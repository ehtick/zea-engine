!function(g,I){"object"==typeof exports&&"undefined"!=typeof module?I(exports):"function"==typeof define&&define.amd?define(["exports"],I):I((g="undefined"!=typeof globalThis?globalThis:g||self).zeaEngine={})}(this,(function(g){"use strict";var I="4.0.1";const C=function(){if(!globalThis.navigator)return{isMobileDevice:!1,isIOSDevice:!1,browserName:"Node",webGLSupported:!1,deviceCategory:"High",hardwareConcurrency:4};const g=null!=(navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/webOS/i)||navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)||navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/Pixel/i)||navigator.userAgent.match(/Windows Phone/i)),I=function(){const g=navigator.userAgent;let I,C,F,U=navigator.appName,l=""+parseFloat(navigator.appVersion),t=parseInt(navigator.appVersion,10);return navigator.brave?(U="Brave",C=g.indexOf("Chrome"),l=g.substring(C+7,g.indexOf(" ",C+7))):-1!=(C=g.indexOf("Opera"))?(U="Opera",l=g.substring(C+6),-1!=(C=g.indexOf("Version"))&&(l=g.substring(C+8))):-1!=(C=g.indexOf("MSIE"))?(U="Microsoft Internet Explorer",l=g.substring(C+5)):-1!=(C=g.indexOf("Edge"))?(U="Edge",l=g.substring(C+4)):-1!=(C=g.indexOf("Chrome"))?(U="Chrome",l=g.substring(C+7,g.indexOf(" ",C+7))):-1!=(C=g.indexOf("Safari"))?(U="Safari",l=g.substring(C+7),-1!=(C=g.indexOf("Version"))&&(l=g.substring(C+8))):-1!=(C=g.indexOf("Firefox"))?(U="Firefox",l=g.substring(C+8)):(I=g.lastIndexOf(" ")+1)<(C=g.lastIndexOf("/"))&&(U=g.substring(I,C),l=g.substring(C+1),U.toLowerCase()==U.toUpperCase()&&(U=navigator.appName)),-1!=(F=l.indexOf(";"))&&(l=l.substring(0,F)),-1!=(F=l.indexOf(" "))&&(l=l.substring(0,F)),t=parseInt(""+l,10),isNaN(t)&&(l=""+parseFloat(navigator.appVersion),t=parseInt(navigator.appVersion,10)),{browserName:U,fullVersion:l,majorVersion:t,appName:navigator.appName,userAgent:navigator.userAgent}}(),C=function(){let g,I;try{g=document.createElement("canvas").getContext("webgl")}catch(g){}if(!g)return{vendor:"Unknown",renderer:"Unknown",gpuVendor:"Unknown",maxTextureSize:0,supportsWebGL:!1,supportsWebGL2:!1};try{I=document.createElement("canvas").getContext("webgl2")}catch(g){}const C=g.getExtension("WEBGL_debug_renderer_info");if(!C)return console.warn("Unable to determine GPU Info:"),{vendor:"Unknown",renderer:"Unknown",gpuVendor:"Unknown",maxTextureSize:0,supportsWebGL:null!=g,supportsWebGL2:null!=I};const F=g.getParameter(C.UNMASKED_VENDOR_WEBGL),U=g.getParameter(C.UNMASKED_RENDERER_WEBGL),l=g.getParameter(g.MAX_TEXTURE_SIZE);let t;return U.match(/NVIDIA/i)?t="NVidia":U.match(/AMD/i)||U.match(/Radeon/i)?t="AMD":U.match(/Intel/i)?t="Intel":U.match(/Mali/i)?t="ARM":U.match(/Apple/i)?t="Apple":U.match(/Adreno/i)?t="Adreno":U.match(/Swiftshader/i)?(t="Google",console.warn("Hardware rendering is disabled or not working on your system. Falling back to the Swiftshader. Expect poor performance:",U)):console.warn("Unable to determine GPU vendor:",U),{vendor:F,renderer:U,gpuVendor:t,maxTextureSize:l,supportsWebGL:!0,supportsWebGL2:null!=I}}();let F="Low";if(C.supportsWebGL)if(g)F="Low";else{const g=C.renderer.replace(/[()]/g,"").split(" ");if("NVidia"==C.gpuVendor){const I=g.indexOf("GTX");if(-1!=I){const C=g[I+1];if(C.endsWith("M")){F=parseInt(C.substring(0,C.length-2))>=900?"Medium":"Low"}else{F=parseInt(C)>=1030?"High":"Medium"}}else F=g.includes("RTX")||g.includes("TITAN")||g.includes("Quadro")?"High":"Low"}else if("AMD"==C.gpuVendor){const I=g.indexOf("Radeon");if(-1!=I){const C=g.indexOf("RX");if(-1!=C)if("Vega"==g[C+1])F="High";else{const I=g[C+1];let U;I.endsWith("X")?(U=parseInt(I.substring(0,I.length-2)),F="High"):U=parseInt(I),F=U>=480?"High":"Medium"}else if("Pro"==g[I+1]){F=parseInt(g[C+1])>=450?"Medium":"Low"}else if("Sky"==g[I+1]){F=parseInt(g[C+1])>=700?"Medium":"Low"}else F="Low"}else F=g.includes("FirePro")||g.includes("Quadro")?"High":"Low"}else("Adreno"==C.gpuVendor||"Intel"==C.gpuVendor||"Google"==C.gpuVendor)&&(F="Low")}let U=globalThis.navigator.hardwareConcurrency;return U||(U=g?4:6),{isMobileDevice:g,isIOSDevice:null!=(navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)),browserName:I.browserName,fullVersion:I.fullVersion,majorVersion:I.majorVersion,appName:I.appName,userAgent:I.userAgent,webGLSupported:C.supportsWebGL,gpuDesc:C,deviceCategory:F,hardwareConcurrency:U}}();globalThis.ZeaSystemDesc||(globalThis.ZeaSystemDesc=C);let F={},U={},l=[];class t{static register(g,I){g in F&&console.warn(`There's a class registered with '${g}' name`);const C=l.length;l.push(I),U[C]=g,F[g]=C}static getClassDefinition(g){if(!(g in F))throw new Error(`${g} class is not registered`);return l[F[g]]}static getClassName(g){const I=l.indexOf(g);if(I>=0&&U[I])return U[I];throw new Error("class is not registered")}static constructClass(g){const I=l[F[g]];if(!I)throw new Error(`${g} class is not registered`);return new I}static flush(){F={},U={},l=[]}}class e{static replaceAll(g,I,C){return g.replace(new RegExp(I,"g"),C)}static stringifyJSONWithFixedPrecision(g,I=0,C=5){return JSON.stringify(g,((g,I)=>I&&I.toFixed?Number(I.toFixed(C)):I),I)}static hashStr(g){let I,C,F,U=0;if(0===g.length)return U;for(I=0,F=g.length;I<F;I++)C=g.charCodeAt(I),U=(U<<5)-U+C,U|=0;return Math.abs(U)}}class Q{constructor(g=0,I=0){g instanceof Float32Array||g instanceof Uint32Array||g instanceof Int32Array?this.__data=g:"number"==typeof g&&"number"==typeof I?(this.__data=new Float32Array(2),this.__data[0]=g,this.__data[1]=I):"object"==typeof g?(this.__data=new Float32Array(2),this.fromJSON(g)):this.__data=new Float32Array(2)}get x(){return this.__data[0]}set x(g){this.__data[0]=g}get y(){return this.__data[1]}set y(g){this.__data[1]=g}set(g,I){this.__data[0]=g,this.__data[1]=I}setFromOther(g){this.x=g.x,this.y=g.y}isEqual(g){return this.x==g.x&&this.y==g.y}notEqual(g){return this.x!=g.x&&this.y!=g.y}approxEqual(g,I=Number.EPSILON){return Math.abs(this.x-g.x)<I&&Math.abs(this.y-g.y)<I}add(g){return new Q(this.x+g.x,this.y+g.y)}addInPlace(g){this.x+=g.x,this.y+=g.y}subtract(g){return new Q(this.x-g.x,this.y-g.y)}subtractInPlace(g){return this.x-=g.x,this.y-=g.y,this}scale(g){return new Q(this.x*g,this.y*g)}scaleInPlace(g){this.x*=g,this.y*=g}invert(){return new Q(1/this.x,1/this.y)}invertInPlace(){return this.x=1/this.x,this.y=1/this.y,this}multiply(g){return new Q(this.x*g.x,this.y*g.y)}multiplyInPlace(g){this.x*=g.x,this.y*=g.y}lengthSquared(){const g=this.__data[0],I=this.__data[1];return g*g+I*I}length(){return Math.sqrt(this.lengthSquared())}distanceTo(g){const I=this.__data[0]-g.x,C=this.__data[1]-g.y;return Math.sqrt(I*I+C*C)}normalize(){const g=this.__data[0],I=this.__data[1];let C=g*g+I*I;return C<Number.EPSILON?new Q:(C=1/Math.sqrt(C),new Q(g*C,I*C))}normalizeInPlace(){const g=this.__data[0],I=this.__data[1];let C=g*g+I*I;C<Number.EPSILON||(C=1/Math.sqrt(C),this.set(g*C,I*C))}dot(g){return this.x*g.x+this.y*g.y}cross(g){return this.x*g.y-this.y*g.x}angleTo(g){const I=this.normalize().dot(g.normalize());return I>1?0:I<-1?Math.PI:Math.acos(I)}signedAngleTo(g){const I=this.angleTo(g);return this.cross(g)<0?-I:I}rotate(g){const I=Math.cos(g),C=Math.sin(g);return new Q(this.x*I-this.y*C,this.x*C+this.y*I)}lerp(g,I){const C=this.x,F=this.y;return new Q(C+I*(g.x-C),F+I*(g.y-F))}setRandomDir(g=1){const I=2*Math.random()*Math.PI;return this.__data[0]=Math.cos(I)*g,this.__data[1]=Math.sin(I)*g,this}setRandom(g=1){return this.__data[0]=Math.random()*g,this.__data[1]=Math.random()*g,this}clone(){return new Q(this.__data[0],this.__data[1])}asArray(){return this.__data}toString(){return e.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.x,y:this.y}}fromJSON(g){this.x=g.x,this.y=g.y}readBinary(g){this.x=g.loadFloat32(),this.y=g.loadFloat32()}static intersectionOfLines(g,I,C,F){const U=(g.x-I.x)*(C.y-F.y)-(g.y-I.y)*(C.x-F.x);if(0==U)return null;const l=g.x*I.y-g.y*I.x,t=C.x*F.y-C.y*F.x,e=C.x-F.x,d=g.x-I.x,n=C.y-F.y,i=g.y-I.y;return new Q((l*e-d*t)/U,(l*n-i*t)/U)}isValid(){for(const g of this.__data)if(g==1/0||isNaN(g))return!1;return!0}}class d{constructor(g=0,I=0,C=0){if(g instanceof Float32Array||g instanceof Uint32Array)this.__data=g;else if(g instanceof ArrayBuffer){console.warn("deprecated, please use new Vec3(new Float32Array(buffer, byteOffset, 3))");const C=g,F=I;this.__data=new Float32Array(C,F,3)}else"number"==typeof g&&"number"==typeof I&&"number"==typeof C?(this.__data=new Float32Array(3),this.__data[0]=g,this.__data[1]=I,this.__data[2]=C):null!=g&&"object"==typeof g?(this.__data=new Float32Array(3),this.fromJSON(g)):this.__data=new Float32Array(3)}get x(){return this.__data[0]}set x(g){this.__data[0]=g}get y(){return this.__data[1]}set y(g){this.__data[1]=g}get z(){return this.__data[2]}set z(g){this.__data[2]=g}get xy(){return new Q(this.__data[0],this.__data[1])}get yz(){return new Q(this.__data[1],this.__data[2])}set(g,I,C){this.x=g,this.y=void 0!==I?I:g,this.z=void 0!==C?C:g}setDataArray(g){this.__data=g}setFromOther(g){this.x=g.x,this.y=g.y,this.z=g.z}isNull(){return Math.abs(this.x)<Number.EPSILON&&Math.abs(this.y)<Number.EPSILON&&Math.abs(this.z)<Number.EPSILON}is111(){return Math.abs(1-this.x)<Number.EPSILON&&Math.abs(1-this.y)<Number.EPSILON&&Math.abs(1-this.z)<Number.EPSILON}isEqual(g){return this.x==g.x&&this.y==g.y&&this.z==g.z}notEqual(g){return this.x!=g.x&&this.y!=g.y&&this.z!=g.z}approxEqual(g,I=Number.EPSILON){return Math.abs(this.x-g.x)<I&&Math.abs(this.y-g.y)<I&&Math.abs(this.z-g.z)<I}add(g){return new d(this.x+g.x,this.y+g.y,this.z+g.z)}addInPlace(g){this.x+=g.x,this.y+=g.y,this.z+=g.z}subtract(g){return new d(this.x-g.x,this.y-g.y,this.z-g.z)}subtractInPlace(g){this.x-=g.x,this.y-=g.y,this.z-=g.z}multiply(g){return new d(this.x*g.x,this.y*g.y,this.z*g.z)}multiplyInPlace(g){this.x*=g.x,this.y*=g.y,this.z*=g.z}divide(g){return new d(this.x/g.x,this.y/g.y,this.z/g.z)}divideInPlace(g){this.x/=g.x,this.y/=g.y,this.z/=g.z}scale(g){return new d(this.x*g,this.y*g,this.z*g)}scaleInPlace(g){this.x*=g,this.y*=g,this.z*=g}negate(){return new d(-this.x,-this.y,-this.z)}inverse(){return new d(1/this.x,1/this.y,1/this.z)}lengthSquared(){const g=this.__data[0],I=this.__data[1],C=this.__data[2];return g*g+I*I+C*C}length(){return Math.sqrt(this.lengthSquared())}distanceTo(g){const I=this.__data[0]-g.x,C=this.__data[1]-g.y,F=this.__data[2]-g.z;return Math.sqrt(I*I+C*C+F*F)}normalize(){let g=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];return g<Number.EPSILON?new d:(g=1/Math.sqrt(g),new d(this.__data[0]*g,this.__data[1]*g,this.__data[2]*g))}normalizeInPlace(){let g=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];if(g<Number.EPSILON)return;g=Math.sqrt(g);const I=1/g;return this.__data[0]*=I,this.__data[1]*=I,this.__data[2]*=I,g}resize(g){const I=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];if(I<Number.EPSILON)return;const C=g/Math.sqrt(I);return new d(this.__data[0]*C,this.__data[1]*C,this.__data[2]*C)}resizeInPlace(g){const I=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];if(I<Number.EPSILON)return;const C=g/Math.sqrt(I);this.__data[0]*=C,this.__data[1]*=C,this.__data[2]*=C}dot(g){return this.x*g.x+this.y*g.y+this.z*g.z}cross(g){const I=this.x,C=this.y,F=this.z,U=g.x,l=g.y,t=g.z;return new d(C*t-F*l,F*U-I*t,I*l-C*U)}angleTo(g){const I=this.dot(g);return I>1?0:Math.acos(I)}lerp(g,I){const C=this.x,F=this.y,U=this.z;return new d(C+I*(g.x-C),F+I*(g.y-F),U+I*(g.z-U))}abs(){return new d(Math.abs(this.x),Math.abs(this.y),Math.abs(this.z))}setRandomDir(g=1){const I=2*Math.random()*Math.PI,C=2*Math.random()-1,F=Math.sqrt(1-C*C)*g;return this.__data[0]=Math.cos(I)*F,this.__data[1]=Math.sin(I)*F,this.__data[2]=C*g,this}setRandom(g=1){return this.__data[0]=(Math.random()-.5)*g,this.__data[1]=(Math.random()-.5)*g,this.__data[2]=(Math.random()-.5)*g,this}clone(){return new d(this.__data[0],this.__data[1],this.__data[2])}asArray(){return this.__data}toString(){return e.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.x,y:this.y,z:this.z}}fromJSON(g){this.x=g.x,this.y=g.y,this.z=g.z}readBinary(g){this.x=g.loadFloat32(),this.y=g.loadFloat32(),this.z=g.loadFloat32()}isValid(){for(const g of this.__data)if(g==1/0||isNaN(g))return!1;return!0}}class n{constructor(g=0,I=0,C=0,F=0){if(g instanceof Float32Array||g instanceof Uint32Array)this.__data=g;else if(g instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const C=g,F=I;this.__data=new Float32Array(C,F,4)}else"number"==typeof g&&"number"==typeof I&&"number"==typeof C&&"number"==typeof F?(this.__data=new Float32Array(4),this.__data[0]=g,this.__data[1]=I,this.__data[2]=C,this.__data[3]=F):null!=g&&"object"==typeof g?(this.__data=new Float32Array(4),this.fromJSON(g)):this.__data=new Float32Array(4)}get x(){return this.__data[0]}set x(g){this.__data[0]=g}get y(){return this.__data[1]}set y(g){this.__data[1]=g}get z(){return this.__data[2]}set z(g){this.__data[2]=g}get t(){return this.__data[3]}set t(g){this.__data[3]=g}get w(){return this.__data[3]}set w(g){this.__data[3]=g}get xyz(){return new d(this.__data[0],this.__data[1],this.__data[2])}set(g,I,C,F){this.x=g,this.y=I,this.z=C,this.t=F}setFromOther(g){this.x=g.x,this.y=g.y,this.z=g.z,this.t=g.t}isEqual(g){return this.x==g.x&&this.y==g.y&&this.z==g.z&&this.t==g.t}notEqual(g){return this.x!=g.x&&this.y!=g.y&&this.z!=g.z&&this.t!=g.t}approxEqual(g,I=Number.EPSILON){return Math.abs(this.x-g.x)<I&&Math.abs(this.y-g.y)<I&&Math.abs(this.z-g.z)<I&&Math.abs(this.t-g.t)<I}add(g){return new n(this.x+g.x,this.y+g.y,this.z+g.z,this.t+g.t)}addInPlace(g){this.x+=g.x,this.y+=g.y,this.z+=g.z,this.t+=g.t}subtract(g){return new n(this.x-g.x,this.y-g.y,this.z-g.z,this.t-g.t)}subtractInPlace(g){this.x-=g.x,this.y-=g.y,this.z-=g.z,this.t-=g.t}multiply(g){return new n(this.x*g.x,this.y*g.y,this.z*g.z,this.t*g.t)}multiplyInPlace(g){this.x*=g.x,this.y*=g.y,this.z*=g.z,this.t*=g.t}divide(g){return new n(this.x/g.x,this.y/g.y,this.z/g.z,this.t/g.t)}divideInPlace(g){this.x/=g.x,this.y/=g.y,this.z/=g.z,this.t/=g.t}scale(g){return new n(this.x*g,this.y*g,this.z*g,this.t*g)}scaleInPlace(g){this.set(this.x*g,this.y*g,this.z*g,this.t*g)}length(){const g=this.__data[0],I=this.__data[1],C=this.__data[2],F=this.__data[2];return Math.sqrt(g*g+I*I+C*C+F*F)}lengthSquared(){const g=this.__data[0],I=this.__data[1],C=this.__data[2],F=this.__data[3];return g*g+I*I+C*C+F*F}normalize(){const g=this.__data[0],I=this.__data[1],C=this.__data[2],F=this.__data[3];let U=g*g+I*I+C*C+F*F;return U<Number.EPSILON?new n:(U=1/Math.sqrt(U),new n(g*U,I*U,C*U))}normalizeInPlace(){const g=this.__data[0],I=this.__data[1],C=this.__data[2],F=this.__data[3];let U=g*g+I*I+C*C+F*F;U<Number.EPSILON||(U=1/Math.sqrt(U),this.set(g*U,I*U,C*U,F*U))}dot(g){return this.x*g.x+this.y*g.y+this.z*g.z+this.t*g.t}cross(g){const I=this.x,C=this.y,F=this.z,U=this.t,l=g.x,t=g.y,e=g.z,Q=g.t;return new n(C*e-F*t,F*Q-U*e,U*l-I*Q,I*t-C*l)}angleTo(g){const I=this.normalize(),C=g.normalize(),F=I.dot(C);return F>1?0:Math.acos(F)}lerp(g,I){const C=this.x,F=this.y,U=this.z,l=this.t;return new n(C+I*(g.x-C),F+I*(g.y-F),U+I*(g.z-U),l+I*(g.t-l))}clone(){return new n(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}toVec3(){return new d(this.__data[0],this.__data[1],this.__data[2])}asArray(){return this.__data}toString(){return e.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.x,y:this.y,z:this.z,t:this.t}}fromJSON(g){this.x=g.x,this.y=g.y,this.z=g.z,this.t=g.t}readBinary(g){this.x=g.loadFloat32(),this.y=g.loadFloat32(),this.z=g.loadFloat32(),this.t=g.loadFloat32()}isValid(){for(const g of this.__data)if(g==1/0||isNaN(g))return!1;return!0}}class i{constructor(g=0,I=0,C=0,F=255){if(g instanceof Uint8Array)this.__data=g;else if(g instanceof ArrayBuffer){const C=g,F=I;this.__data=new Uint8Array(C,F,4)}else this.__data=new Uint8Array(4),"string"==typeof g?g.startsWith("#")?this.setFromHex(g):this.setFromCSSColorName(g):(this.__data[0]=g,this.__data[1]=I,this.__data[2]=C,this.__data[3]=F)}get r(){return this.__data[0]}set r(g){this.__data[0]=g}get g(){return this.__data[1]}set g(g){this.__data[1]=g}get b(){return this.__data[2]}set b(g){this.__data[2]=g}get a(){return this.__data[3]}set a(g){this.__data[3]=g}set(g,I,C,F=255){this.r=g,this.g=I,this.b=C,this.a=F}setFromOther(g){this.r=g.r,this.g=g.g,this.b=g.b,this.a=g.a}setFromArray(g){this.r=g[0],this.g=g[1],this.b=g[2],this.a=4==g.length?g[3]:1}setFromHex(g){const I=function(g){const I=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(g);return I?{r:parseInt(I[1],16),g:parseInt(I[2],16),b:parseInt(I[3],16)}:null}(g);I?this.set(I.r,I.g,I.b):console.warn("Invalid hex code:"+g)}setFromCSSColorName(g){if(g.startsWith("#"))this.setFromHex(g);else{const I={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4","indianred ":"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"}[g.toLowerCase()];I&&this.setFromHex(I)}}toHex(){function g(g){const I=g.toString(16);return 1==I.length?"0"+I:I}return"#"+g(this.r)+g(this.g)+g(this.b)}equal(g){return this.r==g.r&&this.g==g.g&&this.b==g.b&&this.a==g.a}notEquals(g){return this.r!=g.r&&this.g!=g.g&&this.b!=g.b&&this.a!=g.a}approxEqual(g,I=Number.EPSILON){return Math.abs(this.r-g.r)<I&&Math.abs(this.g-g.g)<I&&Math.abs(this.b-g.b)<I&&Math.abs(this.a-g.a)<I}add(g){return new i(this.r+g.r,this.g+g.g,this.b+g.b,this.a+g.a)}subtract(g){return new i(this.r-g.r,this.g-g.g,this.b-g.b,this.a-g.a)}scale(g){return new i(this.r*g,this.g*g,this.b*g,this.a*g)}scaleInPlace(g){this.r*=g,this.g*=g,this.b*=g,this.a*=g}applyGamma(g){this.set(Math.pow(this.r,g),Math.pow(this.g,g),Math.pow(this.b,g),this.a)}toLinear(g=2.2){return new i(Math.pow(this.r,g),Math.pow(this.g,g),Math.pow(this.b,g),this.a)}toGamma(g=2.2){return new i(Math.pow(this.r,1/g),Math.pow(this.g,1/g),Math.pow(this.b,1/g),this.a)}luminance(){return.2126*this.r+.7152*this.g+.0722*this.b}lerp(g,I){const C=this.r,F=this.g,U=this.b,l=this.a;return new i(C+I*(g.r-C),F+I*(g.g-F),U+I*(g.b-U),l+I*(g.a-l))}static random(g=0,I=!1){return g>0?new i(g+Math.random()*(1-g),g+Math.random()*(1-g),g+Math.random()*(1-g),I?g+Math.random()*(1-g):1):g<0?new i(Math.random()*(1+g),Math.random()*(1+g),Math.random()*(1+g),I?Math.random()*(1+g):1):new i(Math.random(),Math.random(),Math.random(),I?Math.random():1)}clone(){return new i(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}asArray(){return this.__data}as3ComponentArray(){return[this.__data[0],this.__data[1],this.__data[2]]}toJSON(){return{r:this.r,g:this.g,b:this.b,a:this.a}}fromJSON(g){this.r=g.r,this.g=g.g,this.b=g.b,this.a=g.a}toCSSString(){return"rgba("+Math.round(255*this.r)+", "+Math.round(255*this.g)+", "+Math.round(255*this.b)+", "+this.a+")"}}class A{constructor(g=0,I=0,C=0,F=1){if(g instanceof Float32Array)this.__data=g;else if(g instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const C=g,F=I;this.__data=new Float32Array(C,F,4)}else this.__data=new Float32Array(4),"string"==typeof g?g.startsWith("#")?this.setFromHex(g):this.setFromCSSColorName(g):(this.__data[0]=g,this.__data[1]=I,this.__data[2]=C,this.__data[3]=F)}get r(){return this.__data[0]}set r(g){this.__data[0]=g}get g(){return this.__data[1]}set g(g){this.__data[1]=g}get b(){return this.__data[2]}set b(g){this.__data[2]=g}get a(){return this.__data[3]}set a(g){this.__data[3]=g}set(g,I,C,F=1){this.r=g,this.g=I,this.b=C,this.a=F}setFromOther(g){this.r=g.r,this.g=g.g,this.b=g.b,this.a=g.a}setFromScalarArray(g){this.r=g[0],this.g=g[1],this.b=g[2],this.a=4==g.length?g[3]:1}getAsRGBArray(){return[255*this.r,255*this.g,255*this.b]}getAsRGBDict(){return{r:255*this.r,g:255*this.g,b:255*this.b}}setFromRGB(g,I,C,F){this.r=g/255,this.g=I/255,this.b=C/255,this.a=F?F/255:1}setFromRGBArray(g){this.r=g[0]/255,this.g=g[1]/255,this.b=g[2]/255,this.a=4==g.length?g[3]/255:1}setFromRGBDict(g){this.r=g.r/255,this.g=g.g/255,this.b=g.b/255,this.a=4==g.a?g.a/255:1}setFromHex(g){const I=function(g){const I=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(g);return I?{r:parseInt(I[1],16),g:parseInt(I[2],16),b:parseInt(I[3],16)}:null}(g);I?this.setFromRGB(I.r,I.g,I.b):console.warn("Invalid hex code:"+g)}setFromCSSColorName(g){if(g.startsWith("#"))this.setFromHex(g);else{const I={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4","indianred ":"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"}[g.toLowerCase()];I&&this.setFromHex(I)}}toHex(){function g(g){const I=Math.round(255*g).toString(16);return 1==I.length?"0"+I:I}return"#"+g(this.r)+g(this.g)+g(this.b)}isEqual(g){return this.r==g.r&&this.g==g.g&&this.b==g.b&&this.a==g.a}notEquals(g){return this.r!=g.r&&this.g!=g.g&&this.b!=g.b&&this.a!=g.a}approxEqual(g,I=Number.EPSILON){return Math.abs(this.r-g.r)<I&&Math.abs(this.g-g.g)<I&&Math.abs(this.b-g.b)<I&&Math.abs(this.a-g.a)<I}add(g){return new A(this.r+g.r,this.g+g.g,this.b+g.b,this.a+g.a)}addInPlace(g){this.r+=g.r,this.g+=g.g,this.b+=g.b,this.a+=g.a}subtract(g){return new A(this.r-g.r,this.g-g.g,this.b-g.b,this.a-g.a)}scale(g){return new A(this.r*g,this.g*g,this.b*g,this.a*g)}scaleInPlace(g){this.r*=g,this.g*=g,this.b*=g,this.a*=g}applyGamma(g){this.set(Math.pow(this.r,g),Math.pow(this.g,g),Math.pow(this.b,g),this.a)}toLinear(g=2.2){return new A(Math.pow(this.r,g),Math.pow(this.g,g),Math.pow(this.b,g),this.a)}toGamma(g=2.2){return new A(Math.pow(this.r,1/g),Math.pow(this.g,1/g),Math.pow(this.b,1/g),this.a)}luminance(){return.2126*this.r+.7152*this.g+.0722*this.b}lerp(g,I){const C=this.r,F=this.g,U=this.b,l=this.a;return new A(C+I*(g.r-C),F+I*(g.g-F),U+I*(g.b-U),l+I*(g.a-l))}static random(g=0,I=!1){return g>0?new A(g+Math.random()*(1-g),g+Math.random()*(1-g),g+Math.random()*(1-g),I?g+Math.random()*(1-g):1):g<0?new A(Math.random()*(1+g),Math.random()*(1+g),Math.random()*(1+g),I?Math.random()*(1+g):1):new A(Math.random(),Math.random(),Math.random(),I?Math.random():1)}clone(){return new A(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}asArray(){return this.__data}as3ComponentArray(){return[this.__data[0],this.__data[1],this.__data[2]]}toJSON(){return{r:this.r,g:this.g,b:this.b,a:this.a}}fromJSON(g){this.r=g.r,this.g=g.g,this.b=g.b,this.a=g.a}readBinary(g){this.r=g.loadFloat32(),this.g=g.loadFloat32(),this.b=g.loadFloat32(),this.a=g.loadFloat32()}toCSSString(){return"rgba("+Math.round(255*this.r)+", "+Math.round(255*this.g)+", "+Math.round(255*this.b)+", "+this.a+")"}}class B{constructor(g=0,I=0,C=0,F=0){if("number"!=typeof F||isNaN(F))switch(F){case"XYZ":this.order=0;break;case"YZX":this.order=1;break;case"ZXY":this.order=2;break;case"XZY":this.order=3;break;case"ZYX":this.order=4;break;case"YXZ":this.order=5;break;default:throw new Error("Invalid Euler Angles Order:"+F)}else this.order=F;if(g instanceof ArrayBuffer){const C=g,F=I;this.__data=new Float32Array(C,F,4)}else this.__data=new Float32Array(3),this.__data[0]=g,this.__data[1]=I,this.__data[2]=C}get x(){return this.__data[0]}set x(g){this.__data[0]=g}get y(){return this.__data[1]}set y(g){this.__data[1]=g}get z(){return this.__data[2]}set z(g){this.__data[2]=g}set(g,I,C){this.__data[0]=g,this.__data[1]=I,this.__data[2]=C}toString(){return e.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.__data[0],y:this.__data[1],z:this.__data[2],order:this.order}}fromJSON(g){this.__data[0]=g.x,this.__data[1]=g.y,this.__data[2]=g.z,this.order=g.order}}class a{constructor(g=1,I=0,C=0,F=0,U=1,l=0,t=0,e=0,Q=1){if(g instanceof d&&I instanceof d&&C instanceof d)this.__data=new Float32Array(9),this.set(g.x,g.y,g.z,I.x,I.y,I.z,C.x,C.y,C.z);else if(g instanceof Float32Array)this.__data=g;else if(g instanceof ArrayBuffer){console.warn("Deprecated, please use new Vec3(new Float32Array(buffer, byteOffset, 9))");const C=g,F=I;this.__data=new Float32Array(C,F,9)}else this.__data=new Float32Array(9),this.set(g,I,C,F,U,l,t,e,Q)}get m00(){return this.__data[0]}set m00(g){this.__data[0]=g}get m01(){return this.__data[1]}set m01(g){this.__data[1]=g}get m02(){return this.__data[2]}set m02(g){this.__data[2]=g}get m10(){return this.__data[3]}set m10(g){this.__data[3]=g}get m11(){return this.__data[4]}set m11(g){this.__data[4]=g}get m12(){return this.__data[5]}set m12(g){this.__data[5]=g}get m20(){return this.__data[6]}set m20(g){this.__data[6]=g}get m21(){return this.__data[7]}set m21(g){this.__data[7]=g}get m22(){return this.__data[8]}set m22(g){this.__data[8]=g}get xAxis(){return new d(new Float32Array(this.__data.buffer,0,3))}set xAxis(g){this.xAxis.set(g.x,g.y,g.z)}get yAxis(){return new d(new Float32Array(this.__data.buffer,12,3))}set yAxis(g){this.yAxis.set(g.x,g.y,g.z)}get zAxis(){return new d(new Float32Array(this.__data.buffer,24,3))}set zAxis(g){this.zAxis.set(g.x,g.y,g.z)}set(g=1,I=0,C=0,F=0,U=1,l=0,t=0,e=0,Q=1){this.__data[0]=g,this.__data[1]=I,this.__data[2]=C,this.__data[3]=F,this.__data[4]=U,this.__data[5]=l,this.__data[6]=t,this.__data[7]=e,this.__data[8]=Q}setIdentity(){this.set()}setFromMat(g){this.__data[0]=g.m00,this.__data[1]=g.m01,this.__data[2]=g.m02,this.__data[3]=g.m10,this.__data[4]=g.m11,this.__data[5]=g.m12,this.__data[6]=g.m20,this.__data[7]=g.m21,this.__data[8]=g.m22}setFromDirectionAndUpvector(g,I){const C=g,F=C.length();if(F<Number.EPSILON)return void this.setIdentity();C.scaleInPlace(1/F);const U=I.cross(C),l=U.length();l>Number.EPSILON&&U.scaleInPlace(1/l);const t=C.cross(U),e=t.length();e>Number.EPSILON&&t.scaleInPlace(1/e),this.set(U.x,U.y,U.z,t.x,t.y,t.z,C.x,C.y,C.z)}inverse(){const g=this.__data[0],I=this.__data[1],C=this.__data[2],F=this.__data[3],U=this.__data[4],l=this.__data[5],t=this.__data[6],e=this.__data[7],Q=this.__data[8],d=Q*U-l*e,n=-Q*F+l*t,i=e*F-U*t;let A=g*d+I*n+C*i;return A?(A=1/A,new a(d*A,(-Q*I+C*e)*A,(l*I-C*U)*A,n*A,(Q*g-C*t)*A,(-l*g+C*F)*A,i*A,(-e*g+I*t)*A,(U*g-I*F)*A)):(console.warn("Unable to invert Mat3"),new a)}invertInPlace(){const g=this.__data[0],I=this.__data[1],C=this.__data[2],F=this.__data[3],U=this.__data[4],l=this.__data[5],t=this.__data[6],e=this.__data[7],Q=this.__data[8],d=Q*U-l*e,n=-Q*F+l*t,i=e*F-U*t;let A=g*d+I*n+C*i;return A?(A=1/A,this.set(d*A,(-Q*I+C*e)*A,(l*I-C*U)*A,n*A,(Q*g-C*t)*A,(-l*g+C*F)*A,i*A,(-e*g+I*t)*A,(U*g-I*F)*A),!0):(console.warn("Unable to invert Mat3"),!1)}transpose(){return new a(this.__data[0],this.__data[3],this.__data[6],this.__data[1],this.__data[4],this.__data[7],this.__data[2],this.__data[5],this.__data[8])}transposeInPlace(){const g=this.__data[1],I=this.__data[2],C=this.__data[5];this.__data[1]=this.__data[3],this.__data[2]=this.__data[6],this.__data[3]=g,this.__data[5]=this.__data[7],this.__data[6]=I,this.__data[7]=C}transformVec3(g){return new d(this.__data[0]*g.x+this.__data[1]*g.y+this.__data[2]*g.z,this.__data[3]*g.x+this.__data[4]*g.y+this.__data[5]*g.z,this.__data[6]*g.x+this.__data[7]*g.y+this.__data[8]*g.z)}clone(){return new a(this.__data[0],this.__data[1],this.__data[2],this.__data[3],this.__data[4],this.__data[5],this.__data[6],this.__data[7],this.__data[8])}readBinary(g){this.__data=g.loadFloat32Array(9)}toJSON(){return this.__data}fromJSON(g){this.__data=new Float32Array(g)}toString(){return e.stringifyJSONWithFixedPrecision(this.toJSON())}asArray(){return this.__data}}class V{constructor(g=1,I=0,C=0,F=0,U=0,l=1,t=0,e=0,Q=0,d=0,n=1,i=0,A=0,B=0,a=0,V=1){if(g instanceof Float32Array)this.__data=g;else if(g instanceof ArrayBuffer){const C=g,F=I;this.__data=new Float32Array(C,F,16)}else this.__data=new Float32Array(16),this.set(g,I,C,F,U,l,t,e,Q,d,n,i,A,B,a,V)}get m00(){return this.__data[0]}set m00(g){this.__data[0]=g}get m01(){return this.__data[1]}set m01(g){this.__data[1]=g}get m02(){return this.__data[2]}set m02(g){this.__data[2]=g}get m03(){return this.__data[3]}set m03(g){this.__data[3]=g}get m10(){return this.__data[4]}set m10(g){this.__data[4]=g}get m11(){return this.__data[5]}set m11(g){this.__data[5]=g}get m12(){return this.__data[6]}set m12(g){this.__data[6]=g}get m13(){return this.__data[7]}set m13(g){this.__data[7]=g}get m20(){return this.__data[8]}set m20(g){this.__data[8]=g}get m21(){return this.__data[9]}set m21(g){this.__data[9]=g}get m22(){return this.__data[10]}set m22(g){this.__data[10]=g}get m23(){return this.__data[11]}set m23(g){this.__data[11]=g}get m30(){return this.__data[12]}set m30(g){this.__data[12]=g}get m31(){return this.__data[13]}set m31(g){this.__data[13]=g}get m32(){return this.__data[14]}set m32(g){this.__data[14]=g}get m33(){return this.__data[15]}set m33(g){this.__data[15]=g}get xAxis(){return new d(new Float32Array(this.__data.buffer,0,3))}set xAxis(g){this.xAxis.set(g.x,g.y,g.z)}get yAxis(){return new d(new Float32Array(this.__data.buffer,16,3))}set yAxis(g){this.yAxis.set(g.x,g.y,g.z)}get zAxis(){return new d(new Float32Array(this.__data.buffer,32,3))}set zAxis(g){this.zAxis.set(g.x,g.y,g.z)}get translation(){return new d(new Float32Array(this.__data.buffer,48,3))}set translation(g){this.translation.set(g.x,g.y,g.z)}set(g=1,I=0,C=0,F=0,U=0,l=1,t=0,e=0,Q=0,d=0,n=1,i=0,A=0,B=0,a=0,V=1){this.__data[0]=g,this.__data[1]=I,this.__data[2]=C,this.__data[3]=F,this.__data[4]=U,this.__data[5]=l,this.__data[6]=t,this.__data[7]=e,this.__data[8]=Q,this.__data[9]=d,this.__data[10]=n,this.__data[11]=i,this.__data[12]=A,this.__data[13]=B,this.__data[14]=a,this.__data[15]=V}setIdentity(){this.set()}setDataArray(g){this.__data=g}setFromMat4(g){this.__data[0]=g.m00,this.__data[1]=g.m01,this.__data[2]=g.m02,this.__data[3]=g.m03,this.__data[4]=g.m10,this.__data[5]=g.m11,this.__data[6]=g.m12,this.__data[7]=g.m13,this.__data[8]=g.m20,this.__data[9]=g.m21,this.__data[10]=g.m22,this.__data[11]=g.m23,this.__data[12]=g.m30,this.__data[13]=g.m31,this.__data[14]=g.m32,this.__data[15]=g.m33}toMat3(){return new a(this.__data[0],this.__data[1],this.__data[2],this.__data[4],this.__data[5],this.__data[6],this.__data[8],this.__data[9],this.__data[10])}transposeInPlace(){const g=this.__data[1],I=this.__data[2],C=this.__data[3],F=this.__data[6],U=this.__data[7],l=this.__data[11];this.__data[1]=this.__data[4],this.__data[2]=this.__data[8],this.__data[3]=this.__data[12],this.__data[4]=g,this.__data[6]=this.__data[9],this.__data[7]=this.__data[13],this.__data[8]=I,this.__data[9]=F,this.__data[11]=this.__data[14],this.__data[12]=C,this.__data[13]=U,this.__data[14]=l}transpose(){return new V(this.__data[0],this.__data[4],this.__data[8],this.__data[12],this.__data[1],this.__data[5],this.__data[9],this.__data[13],this.__data[2],this.__data[6],this.__data[10],this.__data[14],this.__data[3],this.__data[7],this.__data[11],this.__data[15])}inverse(){const g=this.__data[0],I=this.__data[1],C=this.__data[2],F=this.__data[3],U=this.__data[4],l=this.__data[5],t=this.__data[6],e=this.__data[7],Q=this.__data[8],d=this.__data[9],n=this.__data[10],i=this.__data[11],A=this.__data[12],B=this.__data[13],a=this.__data[14],R=this.__data[15],s=g*l-I*U,Z=g*t-C*U,o=g*e-F*U,h=I*t-C*l,c=I*e-F*l,r=C*e-F*t,m=Q*B-d*A,W=Q*a-n*A,J=Q*R-i*A,G=d*a-n*B,b=d*R-i*B,N=n*R-i*a;let S=s*N-Z*b+o*G+h*J-c*W+r*m;return S?(S=1/S,new V((l*N-t*b+e*G)*S,(C*b-I*N-F*G)*S,(B*r-a*c+R*h)*S,(n*c-d*r-i*h)*S,(t*J-U*N-e*W)*S,(g*N-C*J+F*W)*S,(a*o-A*r-R*Z)*S,(Q*r-n*o+i*Z)*S,(U*b-l*J+e*m)*S,(I*J-g*b-F*m)*S,(A*c-B*o+R*s)*S,(d*o-Q*c-i*s)*S,(l*W-U*G-t*m)*S,(g*G-I*W+C*m)*S,(B*Z-A*h-a*s)*S,(Q*h-d*Z+n*s)*S)):(console.warn("Unable to invert Mat4"),this)}invertInPlace(){const g=this.__data[0],I=this.__data[1],C=this.__data[2],F=this.__data[3],U=this.__data[4],l=this.__data[5],t=this.__data[6],e=this.__data[7],Q=this.__data[8],d=this.__data[9],n=this.__data[10],i=this.__data[11],A=this.__data[12],B=this.__data[13],a=this.__data[14],V=this.__data[15],R=g*l-I*U,s=g*t-C*U,Z=g*e-F*U,o=I*t-C*l,h=I*e-F*l,c=C*e-F*t,r=Q*B-d*A,m=Q*a-n*A,W=Q*V-i*A,J=d*a-n*B,G=d*V-i*B,b=n*V-i*a;let N=R*b-s*G+Z*J+o*W-h*m+c*r;return N?(N=1/N,this.set((l*b-t*G+e*J)*N,(C*G-I*b-F*J)*N,(B*c-a*h+V*o)*N,(n*h-d*c-i*o)*N,(t*W-U*b-e*m)*N,(g*b-C*W+F*m)*N,(a*Z-A*c-V*s)*N,(Q*c-n*Z+i*s)*N,(U*G-l*W+e*r)*N,(I*W-g*G-F*r)*N,(A*h-B*Z+V*R)*N,(d*Z-Q*h-i*R)*N,(l*m-U*J-t*r)*N,(g*J-I*m+C*r)*N,(B*s-A*o-a*R)*N,(Q*o-d*s+n*R)*N),!0):(console.warn("Unable to invert Mat4"),!1)}setInverse(g){const I=g.__data[0],C=g.__data[1],F=g.__data[2],U=g.__data[3],l=g.__data[4],t=g.__data[5],e=g.__data[6],Q=g.__data[7],d=g.__data[8],n=g.__data[9],i=g.__data[10],A=g.__data[11],B=g.__data[12],a=g.__data[13],V=g.__data[14],R=g.__data[15],s=I*t-C*l,Z=I*e-F*l,o=I*Q-U*l,h=C*e-F*t,c=C*Q-U*t,r=F*Q-U*e,m=d*a-n*B,W=d*V-i*B,J=d*R-A*B,G=n*V-i*a,b=n*R-A*a,N=i*R-A*V;let S=s*N-Z*b+o*G+h*J-c*W+r*m;if(!S)throw new Error("Unable to invert Mat4");S=1/S,this.set((t*N-e*b+Q*G)*S,(F*b-C*N-U*G)*S,(a*r-V*c+R*h)*S,(i*c-n*r-A*h)*S,(e*J-l*N-Q*W)*S,(I*N-F*J+U*W)*S,(V*o-B*r-R*Z)*S,(d*r-i*o+A*Z)*S,(l*b-t*J+Q*m)*S,(C*J-I*b-U*m)*S,(B*c-a*o+R*s)*S,(n*o-d*c-A*s)*S,(t*W-l*G-e*m)*S,(I*G-C*W+F*m)*S,(a*Z-B*h-V*s)*S,(d*h-n*Z+i*s)*S)}multiply(g){const I=this.__data[0],C=this.__data[1],F=this.__data[2],U=this.__data[3],l=this.__data[4],t=this.__data[5],e=this.__data[6],Q=this.__data[7],d=this.__data[8],n=this.__data[9],i=this.__data[10],A=this.__data[11],B=this.__data[12],a=this.__data[13],R=this.__data[14],s=this.__data[15],Z=g.asArray();let o=Z[0],h=Z[1],c=Z[2],r=Z[3];const m=new V;return m.m00=o*I+h*l+c*d+r*B,m.m01=o*C+h*t+c*n+r*a,m.m02=o*F+h*e+c*i+r*R,m.m03=o*U+h*Q+c*A+r*s,o=Z[4],h=Z[5],c=Z[6],r=Z[7],m.m10=o*I+h*l+c*d+r*B,m.m11=o*C+h*t+c*n+r*a,m.m12=o*F+h*e+c*i+r*R,m.m13=o*U+h*Q+c*A+r*s,o=Z[8],h=Z[9],c=Z[10],r=Z[11],m.m20=o*I+h*l+c*d+r*B,m.m21=o*C+h*t+c*n+r*a,m.m22=o*F+h*e+c*i+r*R,m.m23=o*U+h*Q+c*A+r*s,o=Z[12],h=Z[13],c=Z[14],r=Z[15],m.m30=o*I+h*l+c*d+r*B,m.m31=o*C+h*t+c*n+r*a,m.m32=o*F+h*e+c*i+r*R,m.m33=o*U+h*Q+c*A+r*s,m}multiplyInPlace(g){const I=this.asArray(),C=I[0],F=I[1],U=I[2],l=I[3],t=I[4],e=I[5],Q=I[6],d=I[7],n=I[8],i=I[9],A=I[10],B=I[11],a=I[12],V=I[13],R=I[14],s=I[15],Z=g.asArray();let o=Z[0],h=Z[1],c=Z[2],r=Z[3];return this.m00=o*C+h*t+c*n+r*a,this.m01=o*F+h*e+c*i+r*V,this.m02=o*U+h*Q+c*A+r*R,this.m03=o*l+h*d+c*B+r*s,o=Z[4],h=Z[5],c=Z[6],r=Z[7],this.m10=o*C+h*t+c*n+r*a,this.m11=o*F+h*e+c*i+r*V,this.m12=o*U+h*Q+c*A+r*R,this.m13=o*l+h*d+c*B+r*s,o=Z[8],h=Z[9],c=Z[10],r=Z[11],this.m20=o*C+h*t+c*n+r*a,this.m21=o*F+h*e+c*i+r*V,this.m22=o*U+h*Q+c*A+r*R,this.m23=o*l+h*d+c*B+r*s,o=Z[12],h=Z[13],c=Z[14],r=Z[15],this.m30=o*C+h*t+c*n+r*a,this.m31=o*F+h*e+c*i+r*V,this.m32=o*U+h*Q+c*A+r*R,this.m33=o*l+h*d+c*B+r*s,this}postMultiplyInPlace(g){const I=g.asArray(),C=I[0],F=I[1],U=I[2],l=I[3],t=I[4],e=I[5],Q=I[6],d=I[7],n=I[8],i=I[9],A=I[10],B=I[11],a=I[12],V=I[13],R=I[14],s=I[15],Z=this.asArray();let o=Z[0],h=Z[1],c=Z[2],r=Z[3];return this.m00=o*C+h*t+c*n+r*a,this.m01=o*F+h*e+c*i+r*V,this.m02=o*U+h*Q+c*A+r*R,this.m03=o*l+h*d+c*B+r*s,o=Z[4],h=Z[5],c=Z[6],r=Z[7],this.m10=o*C+h*t+c*n+r*a,this.m11=o*F+h*e+c*i+r*V,this.m12=o*U+h*Q+c*A+r*R,this.m13=o*l+h*d+c*B+r*s,o=Z[8],h=Z[9],c=Z[10],r=Z[11],this.m20=o*C+h*t+c*n+r*a,this.m21=o*F+h*e+c*i+r*V,this.m22=o*U+h*Q+c*A+r*R,this.m23=o*l+h*d+c*B+r*s,o=Z[12],h=Z[13],c=Z[14],r=Z[15],this.m30=o*C+h*t+c*n+r*a,this.m31=o*F+h*e+c*i+r*V,this.m32=o*U+h*Q+c*A+r*R,this.m33=o*l+h*d+c*B+r*s,this}translateInPlace(g){const I=this.__data,C=g.x,F=g.y,U=g.z;return I[12]=I[0]*C+I[4]*F+I[8]*U+I[12],I[13]=I[1]*C+I[5]*F+I[9]*U+I[13],I[14]=I[2]*C+I[6]*F+I[10]*U+I[14],I[15]=I[3]*C+I[7]*F+I[11]*U+I[15],this}setLookAt(g,I,C){const F=g.subtract(I),U=F.length();if(U<Number.EPSILON)return void this.setIdentity();F.scaleInPlace(1/U);const l=C.cross(F),t=l.length();t>Number.EPSILON&&l.scaleInPlace(1/t);const e=F.cross(l),Q=e.length();Q>Number.EPSILON&&e.scaleInPlace(1/Q),this.set(l.x,l.y,l.z,0,e.x,e.y,e.z,0,F.x,F.y,F.z,0,g.x,g.y,g.z,1)}setRotation(g,I){const C=g.length();if(Math.abs(C)<Number.EPSILON)return null;const F=g.x/C,U=g.y/C,l=g.z/C,t=Math.sin(I),e=Math.cos(I),Q=1-e,d=this.__data;return d[0]=F*F*Q+e,d[1]=U*F*Q+l*t,d[2]=l*F*Q-U*t,d[3]=0,d[4]=F*U*Q-l*t,d[5]=U*U*Q+e,d[6]=l*U*Q+F*t,d[7]=0,d[8]=F*l*Q+U*t,d[9]=U*l*Q-F*t,d[10]=l*l*Q+e,d[11]=0,d[12]=0,d[13]=0,d[14]=0,d[15]=1,this}setXRotation(g){const I=Math.sin(g),C=Math.cos(g),F=this.__data;return F[0]=1,F[1]=0,F[2]=0,F[3]=0,F[4]=0,F[5]=C,F[6]=I,F[7]=0,F[8]=0,F[9]=-I,F[10]=C,F[11]=0,F[12]=0,F[13]=0,F[14]=0,F[15]=1,this}setYRotation(g){const I=Math.sin(g),C=Math.cos(g),F=this.__data;return F[0]=C,F[1]=0,F[2]=-I,F[3]=0,F[4]=0,F[5]=1,F[6]=0,F[7]=0,F[8]=I,F[9]=0,F[10]=C,F[11]=0,F[12]=0,F[13]=0,F[14]=0,F[15]=1,this}setZRotation(g){const I=Math.sin(g),C=Math.cos(g),F=this.__data;return F[0]=C,F[1]=I,F[2]=0,F[3]=0,F[4]=-I,F[5]=C,F[6]=0,F[7]=0,F[8]=0,F[9]=0,F[10]=1,F[11]=0,F[12]=0,F[13]=0,F[14]=0,F[15]=1,this}transformVec4(g){const I=this.__data,C=g.x,F=g.y,U=g.z,l=g.t;return new n(I[0]*C+I[4]*F+I[8]*U+I[12]*l,I[1]*C+I[5]*F+I[9]*U+I[13]*l,I[2]*C+I[6]*F+I[10]*U+I[14]*l,I[3]*C+I[7]*F+I[11]*U+I[15]*l)}transformVec3(g){const I=this.__data,C=g.x,F=g.y,U=g.z;return new d(I[0]*C+I[4]*F+I[8]*U+I[12],I[1]*C+I[5]*F+I[9]*U+I[13],I[2]*C+I[6]*F+I[10]*U+I[14])}rotateVec3(g){const I=this.__data,C=g.x,F=g.y,U=g.z;return new d(I[0]*C+I[4]*F+I[8]*U,I[1]*C+I[5]*F+I[9]*U,I[2]*C+I[6]*F+I[10]*U)}setPerspectiveMatrix(g,I,C,F){const U=Math.tan(.5*Math.PI-.5*g),l=1/(C-F);this.set(U/I,0,0,0,0,U,0,0,0,0,(C+F)*l,-1,0,0,C*F*l*2,0)}setOrthographicMatrix(g,I,C,F,U,l){const t=1/(g-I),e=1/(C-F),Q=1/(U-l);this.set(-2*t,0,0,0,0,-2*e,0,0,0,0,2*Q,0,(g+I)*t,(F+C)*e,(l+U)*Q,1)}setScale(g,I,C){g instanceof d?this.set(g.x,0,0,0,0,g.y,0,0,0,0,g.z,0,0,0,0,1):this.set(g,0,0,0,0,I,0,0,0,0,C,0,0,0,0,1)}setFromMat3x4Array(g){this.set(g[0],g[1],g[2],0,g[3],g[4],g[5],0,g[6],g[7],g[8],0,g[9],g[10],g[11],1)}clone(){return new V(this.__data[0],this.__data[1],this.__data[2],this.__data[3],this.__data[4],this.__data[5],this.__data[6],this.__data[7],this.__data[8],this.__data[9],this.__data[10],this.__data[11],this.__data[12],this.__data[13],this.__data[14],this.__data[15])}toString(){return e.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return this.__data}fromJSON(g){this.__data=new Float32Array(g)}readBinary(g){this.__data=g.loadFloat32Array(16)}asArray(){return this.__data}}class R{constructor(g=0,I=0,C=0,F=1){if(g instanceof Float32Array)this.__data=g;else if(g instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const C=g,F=I;this.__data=new Float32Array(C,F,4)}else this.__data=new Float32Array(4),"object"==typeof g?(this.__data[0]=0,this.__data[1]=0,this.__data[2]=0,this.__data[3]=1,this.fromJSON(g)):(this.__data[0]=g,this.__data[1]=I,this.__data[2]=C,this.__data[3]=F)}get x(){return this.__data[0]}set x(g){this.__data[0]=g}get y(){return this.__data[1]}set y(g){this.__data[1]=g}get z(){return this.__data[2]}set z(g){this.__data[2]=g}get w(){return this.__data[3]}set w(g){this.__data[3]=g}set(g,I,C,F){this.__data[0]=g,this.__data[1]=I,this.__data[2]=C,this.__data[3]=F}setDataArray(g){this.__data=g}setFromOther(g){this.__data[0]=g.x,this.__data[1]=g.y,this.__data[2]=g.z,this.__data[3]=g.w}setFromEulerAngles(g){const I=new d;switch(g.order){case 0:I.set(g.x,-g.y,g.z);break;case 1:I.set(g.y,-g.z,g.x);break;case 2:I.set(g.z,-g.x,g.y);break;case 3:I.set(g.x,g.z,g.y);break;case 4:I.set(g.z,g.y,g.x);break;case 5:I.set(g.y,g.x,g.z);break;default:throw new Error(`Invalid EulerAngles order: ${g.order}`)}const C=.5*I.x,F=.5*I.y,U=.5*I.z,l=Math.cos(C),t=Math.cos(F),e=Math.cos(U),Q=Math.sin(C),n=Math.sin(F),i=Math.sin(U),A=l*e,B=l*i,a=Q*e,V=Q*i,R=t*a-n*B,s=t*V+n*A,Z=t*B-n*a;switch(this.w=t*A+n*V,g.order){case 0:this.x=R,this.y=-s,this.z=Z;break;case 1:this.x=Z,this.y=R,this.z=-s;break;case 2:this.x=-s,this.y=Z,this.z=R;break;case 3:this.x=R,this.y=Z,this.z=s;break;case 4:this.x=Z,this.y=s,this.z=R;break;case 5:this.x=s,this.y=R,this.z=Z;break;default:throw new Error(`Invalid EulerAngles order: ${g.order}`)}}toEulerAngles(g){const I=new d;switch(g){case 0:I.set(this.z,this.x,this.y);break;case 1:I.set(this.x,this.y,this.z);break;case 2:I.set(this.y,this.z,this.x);break;case 3:I.set(this.y,-this.x,this.z);break;case 4:I.set(this.x,-this.z,this.y);break;case 5:I.set(this.z,-this.y,this.x);break;default:throw new Error("Invalid rotation order:"+g)}const C=new d,F=I.x*I.y+I.z*this.w;if(F>.49999)C.y=2*Math.atan2(I.x,this.w),C.z=.5*Math.PI,C.x=0;else if(F<-.49999)C.y=-2*Math.atan2(I.x,this.w),C.z=-.5*Math.PI,C.x=0;else{const g=I.x*I.x,U=I.y*I.y,l=I.z*I.z;C.y=Math.atan2(2*I.y*this.w-2*I.x*I.z,1-2*U-2*l),C.z=Math.asin(2*F),C.x=Math.atan2(2*I.x*this.w-2*I.y*I.z,1-2*g-2*l)}switch(g){case 0:return new B(C.y,C.z,C.x,g);case 1:return new B(C.x,C.y,C.z,g);case 2:return new B(C.z,C.x,C.y,g);case 3:return new B(-C.y,C.x,C.z,g);case 4:return new B(C.x,C.z,-C.y,g);case 5:return new B(C.z,-C.y,C.x,g)}}setFromAxisAndAngle(g,I){const C=I/2,F=g.normalize().scale(Math.sin(C));this.set(F.x,F.y,F.z,Math.cos(C))}setFromDirectionAndUpvector(g,I){const C=new a;C.setFromDirectionAndUpvector(g,I),this.setFromMat3(C)}setFrom2Vectors(g,I){const C=g.cross(I),F=g.dot(I),U=Math.sqrt(2*(1+F));this.set(C.x/U,C.y/U,C.z/U,U/2),this.normalizeInPlace()}setFromMat3(g){const I=g.asArray(),C=I[0]+I[4]+I[8];let F;if(C>0)F=Math.sqrt(C+1),this.__data[3]=.5*F,F=.5/F,this.__data[0]=(I[5]-I[7])*F,this.__data[1]=(I[6]-I[2])*F,this.__data[2]=(I[1]-I[3])*F;else{let g=0;I[4]>I[0]&&(g=1),I[8]>I[3*g+g]&&(g=2);const C=(g+1)%3,U=(g+2)%3;F=Math.sqrt(I[3*g+g]-I[3*C+C]-I[3*U+U]+1),this.__data[g]=.5*F,F=.5/F,this.__data[3]=(I[3*C+U]-I[3*U+C])*F,this.__data[C]=(I[3*C+g]+I[3*g+C])*F,this.__data[U]=(I[3*U+g]+I[3*g+U])*F}this.normalizeInPlace()}setFromMat4(g){const I=g.asArray(),C=I[0]+I[5]+I[10];let F;if(C>0)F=Math.sqrt(C+1),this.__data[3]=.5*F,F=.5/F,this.__data[0]=(I[6]-I[9])*F,this.__data[1]=(I[8]-I[2])*F,this.__data[2]=(I[1]-I[4])*F;else{let g=0;I[5]>I[0]&&(g=1),I[10]>I[4*g+g]&&(g=2);const C=(g+1)%3,U=(g+2)%3;F=Math.sqrt(I[4*g+g]-I[4*C+C]-I[4*U+U]+1),this.__data[g]=.5*F,F=.5/F,this.__data[3]=(I[4*C+U]-I[4*U+C])*F,this.__data[C]=(I[4*C+g]+I[4*g+C])*F,this.__data[U]=(I[4*U+g]+I[4*g+U])*F}this.normalizeInPlace()}isIdentity(){return this.getAngle()<Number.EPSILON}getAngle(){return 2*Math.acos(this.w)}isEqual(g){return this.x==g.x&&this.y==g.y&&this.z==g.z&&this.w==g.w}notEquals(g){return this.x!=g.x&&this.y!=g.y&&this.z!=g.z&&this.w!=g.w}approxEqual(g,I=Number.EPSILON){return Math.abs(this.x-g.x)<I&&Math.abs(this.y-g.y)<I&&Math.abs(this.z-g.z)<I&&Math.abs(this.w-g.w)<I}add(g){return new R(this.x+g.x,this.y+g.y,this.z+g.z,this.w+g.w)}addInPlace(g){this.x+=g.x,this.y+=g.y,this.z+=g.z,this.w+=g.w}subtract(g){return new R(this.x-g.x,this.y-g.y,this.z-g.z,this.w-g.w)}scale(g){return new R(this.x*g,this.y*g,this.z*g,this.w*g)}scaleInPlace(g){this.x*=g,this.y*=g,this.z*=g,this.w*=g}length(){const g=this.__data[0],I=this.__data[1],C=this.__data[2],F=this.__data[3];return Math.sqrt(g*g+I*I+C*C+F*F)}lengthSquared(){const g=this.__data[0],I=this.__data[1],C=this.__data[2],F=this.__data[3];return g*g+I*I+C*C+F*F}normalize(){const g=this.__data[0],I=this.__data[1],C=this.__data[2],F=this.__data[3];let U=g*g+I*I+C*C+F*F;return U<Number.EPSILON?new R:(U=1/Math.sqrt(U),new R(g*U,I*U,C*U,F*U))}normalizeInPlace(){const g=this.__data[0],I=this.__data[1],C=this.__data[2],F=this.__data[3];let U=g*g+I*I+C*C+F*F;U<Number.EPSILON||(U=1/Math.sqrt(U),this.set(g*U,I*U,C*U,F*U))}dot(g){return this.x*g.x+this.y*g.y+this.z*g.z+this.w*g.w}cross(g){const I=this.x,C=this.y,F=this.z,U=this.w,l=g.x,t=g.y,e=g.z,Q=g.w;return new R(C*e-F*t,F*Q-U*e,U*l-I*Q,I*t-C*l)}conjugate(){return new R(-this.x,-this.y,-this.z,this.w)}inverse(){return this.conjugate()}alignWith(g){this.dot(g)<0&&this.set(-this.x,-this.y,-this.z,-this.w)}multiply(g){const I=this.__data[0],C=this.__data[1],F=this.__data[2],U=this.__data[3],l=g.__data[0],t=g.__data[1],e=g.__data[2],Q=g.__data[3];return new R(I*Q+U*l+C*e-F*t,C*Q+U*t+F*l-I*e,F*Q+U*e+I*t-C*l,U*Q-I*l-C*t-F*e)}multiplyInPlace(g){const I=this.__data[0],C=this.__data[1],F=this.__data[2],U=this.__data[3],l=g.__data[0],t=g.__data[1],e=g.__data[2],Q=g.__data[3];this.set(I*Q+U*l+C*e-F*t,C*Q+U*t+F*l-I*e,F*Q+U*e+I*t-C*l,U*Q-I*l-C*t-F*e)}rotateVec3(g){const I=new R(g.x,g.y,g.z,0),C=this.multiply(I).multiply(this.conjugate());return new d(C.x,C.y,C.z)}rotateX(g){g*=.5;const I=this.x,C=this.y,F=this.z,U=this.w,l=Math.sin(g),t=Math.cos(g);this.x=I*t+U*l,this.y=C*t+F*l,this.z=F*t-C*l,this.w=U*t-I*l}rotateY(g){g*=.5;const I=this.x,C=this.y,F=this.z,U=this.w,l=Math.sin(g),t=Math.cos(g);this.x=I*t-F*l,this.y=C*t+U*l,this.z=F*t+I*l,this.w=U*t-C*l}rotateZ(g){g*=.5;const I=this.x,C=this.y,F=this.z,U=this.w,l=Math.sin(g),t=Math.cos(g);this.x=I*t+C*l,this.y=C*t-I*l,this.z=F*t+U*l,this.w=U*t-F*l}toMat3(){const g=this.x,I=this.y,C=this.z,F=this.w,U=g+g,l=I+I,t=C+C,e=g*U,Q=I*U,d=I*l,n=C*U,i=C*l,A=C*t,B=F*U,V=F*l,R=F*t,s=new a;return s.m00=1-d-A,s.m10=Q-R,s.m20=n+V,s.m01=Q+R,s.m11=1-e-A,s.m21=i-B,s.m02=n-V,s.m12=i+B,s.m22=1-e-d,s}getXaxis(){const g=this.x*this.y,I=this.x*this.z,C=this.y*this.y,F=this.y*this.w,U=this.z*this.z,l=this.z*this.w;return new d(1-2*(U+C),2*(g+l),2*(I-F))}getYaxis(){const g=this.x*this.x,I=this.x*this.y,C=this.x*this.w,F=this.y*this.z,U=this.z*this.z,l=this.z*this.w;return new d(2*(I-l),1-2*(U+g),2*(F+C))}getZaxis(){const g=this.x*this.x,I=this.x*this.z,C=this.x*this.w,F=this.y*this.y,U=this.y*this.z,l=this.y*this.w;return new d(2*(l+I),2*(U-C),1-2*(F+g))}mirror(g){switch(g){case 0:case 0:default:return new R(this.z,this.w,this.x,this.y);case 1:return new R(-this.w,this.z,this.y,-this.x);case 2:return new R(this.x,this.y,this.z,-this.w)}}toMat4(){const g=this.x,I=this.y,C=this.z,F=this.w,U=g+g,l=I+I,t=C+C,e=g*U,Q=I*U,d=I*l,n=C*U,i=C*l,A=C*t,B=F*U,a=F*l,R=F*t,s=new V;return s.m00=1-d-A,s.m10=Q-R,s.m20=n+a,s.m01=Q+R,s.m11=1-e-A,s.m21=i-B,s.m02=n-a,s.m12=i+B,s.m22=1-e-d,s}lerp(g,I){const C=new R(this.x+I*(g.x-this.x),this.y+I*(g.y-this.y),this.z+I*(g.z-this.z),this.w+I*(g.w-this.w));return C.normalizeInPlace(),C}slerp(g,I){const C=this.dot(g),F=I/2;let U=Math.acos(C);U<0&&(U=-U);const l=Math.sin(U),t=Math.sin(F*U),e=Math.sin((1-F)*U)/l,Q=t/l,d=new R(e*this.x+Q*g.x,e*this.y+Q*g.y,e*this.z+Q*g.z,e*this.w+Q*g.w);return d.normalizeInPlace(),d}clone(){return new R(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}asArray(){return this.__data}toString(){return e.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.x,y:this.y,z:this.z,w:this.w}}fromJSON(g){this.__data[0]=g.x,this.__data[1]=g.y,this.__data[2]=g.z,this.__data[3]=g.w,this.normalizeInPlace()}readBinary(g){this.x=g.loadFloat32(),this.y=g.loadFloat32(),this.z=g.loadFloat32(),this.w=g.loadFloat32()}}class s{static radToDeg(g){return g/(Math.PI/180)}static degToRad(g){return g*(Math.PI/180)}static isNumeric(g){return!isNaN(parseFloat(g))&&isFinite(g)}static randomInt(g,I){return g=Math.ceil(g),I=Math.floor(I),Math.floor(Math.random()*(I-g))+g}static lerp(g,I,C){return g+C*(I-g)}static clamp(g,I,C){return Math.min(Math.max(g,I),C)}static nearestPow2(g){return Math.pow(2,Math.round(Math.log(g)/Math.log(2)))}static nearestPow10(g){return Math.pow(10,Math.round(Math.log10(g)/Math.log10(10)))}static nextPow2(g){if(0==this.fract(Math.log2(g)))return g;let I=0;for(;g>0;)I++,g>>=1;return 1<<I}static fract(g){return 0==g?0:g<0?g>-1?-g:-g%Math.floor(-g):g<1?g:g%Math.floor(g)}static remap(g,I,C,F,U){return F+(g-I)/(C-I)*(U-F)}static smoothStep(g,I,C){const F=this.clamp((C-g)/(I-g),0,1);return F*F*(3-2*F)}static linStep(g,I,C){return this.clamp((C-g)/(I-g),0,1)}static decode16BitFloatFrom2xUInt8(g){const I=g[0],C=(120&I)>>3;let F=0==C?0:2048;const U=F+((7&I)<<8)+g[1];F=0==C?1:0;return(128&I?1:-1)*U*Math.pow(2,C+F-16)}static encode16BitFloatInto2xUInt8(g){const I=new Uint8Array(2),C=g>=0?128:0;g=Math.abs(g);let F,U=15,l=1024;for(let I=15;I>0;I--)g<l&&(l/=2,U--);F=0==U?g/l/2:(g-l)/l;const t=Math.round(2048*F),e=t/256,Q=t-256*e;return I[0]=C+8*U+e,I[1]=Q,g>=2048&&(I[0]=255),I}static encode16BitFloat(g){const I=new Float32Array(1);I[0]=g;return(g=>{let I=g>>16&32768,C=g>>12&2047;const F=g>>23&255;return F<103?I:F>142?(I|=31744,I|=(255==F?0:1)&&8388607&g,I):F<113?(C|=2048,I|=(C>>114-F)+(C>>113-F&1),I):(I|=F-112<<10|C>>1,I+=1&C,I)})(new Int32Array(I.buffer)[0])}static decode16BitFloat(g){const I=(32768&g)>>15,C=(31744&g)>>10,F=1023&g;return 0==C?(I?-1:1)*Math.pow(2,-14)*(F/Math.pow(2,10)):31==C?F?NaN:1/0*(I?-1:1):(I?-1:1)*Math.pow(2,C-15)*(1+F/Math.pow(2,10))}static convertFloat32ArrayToUInt16Array(g){const I=new Uint16Array(g.length),C=new Int32Array(g.buffer),F=g=>{let I=g>>16&32768,C=g>>12&2047;const F=g>>23&255;return F<103?I:F>142?(I|=31744,I|=(255==F?0:1)&&8388607&g,I):F<113?(C|=2048,I|=(C>>114-F)+(C>>113-F&1),I):(I|=F-112<<10|C>>1,I+=1&C,I)};for(let U=0;U<g.length;U++)I[U]=F(C[U]);return I}}class Z{constructor(g,I){this.start=g instanceof d?g:new d,this.dir=I instanceof d?I:new d}closestPoint(g){const I=g.subtract(this.start).dot(this.dir);if(I<Number.EPSILON)return 0;const C=this.dir.dot(this.dir);return C<Number.EPSILON?0:I/C}closestPointOnLineSegment(g,I){const C=this.dir,F=I.subtract(g),U=F.length();F.normalizeInPlace();const l=this.start.subtract(g),t=C.dot(C),e=C.dot(F),Q=F.dot(F),d=C.dot(l),n=F.dot(l);if(0==t&&0==Q)return[this.start.distanceTo(g),0];if(0==t)return[0,0];if(0==Q)return[this.closestPoint(g),0];const i=t*Q-e*e;let A,B;return i<.001?(A=0,B=e>Q?d/e:n/Q):(A=(e*n-Q*d)/i,B=(t*n-e*d)/i),[A,s.clamp(B/U,0,1)]}pointAtDist(g){return this.start.add(this.dir.scale(g))}intersectRayVector(g){const I=this.dir,C=g.dir,F=this.start.subtract(g.start),U=I.dot(I),l=I.dot(C),t=C.dot(C),e=I.dot(F),Q=C.dot(F);if(0==U&&0==t)return this.start.distanceTo(g.start);if(0==U)return g.closestPoint(this.start);if(0==t)return this.closestPoint(g.start);const d=U*t-l*l;let n,i;return d<.001?(n=0,i=l>t?e/l:Q/t):(n=(l*Q-t*e)/d,i=(U*Q-l*e)/d),[n,i]}intersectRayPlane(g){const I=this.start.subtract(g.start),C=g.dir.dot(this.dir),F=-g.dir.dot(I);if(Math.abs(C)<Number.PRECISION)return-1;const U=F/C;return U<-Number.PRECISION?-1:U}intersectRayBox3(g,I=0){const C=new d(1/this.dir.x,1/this.dir.y,1/this.dir.z),F=[];F[0]=C.x<0?1:0,F[1]=C.y<0?1:0,F[2]=C.z<0?1:0;const U=[];if(I>0){const C=g.diagonal();C.normalizeInPlace(),C.scaleInPlace(I),U[0]=g.p0.subtract(C),U[1]=g.p1.add(C)}else U[0]=g.p0,U[1]=g.p1;let l=(U[F[0]].x-this.start.x)*C.x,t=(U[1-F[0]].x-this.start.x)*C.x;const e=(U[F[1]].y-this.start.y)*C.y,Q=(U[1-F[1]].y-this.start.y)*C.y;if(l>Q||e>t)return!1;e>l&&(l=e),Q<t&&(t=Q);const n=(U[F[2]].z-this.start.z)*C.z,i=(U[1-F[2]].z-this.start.z)*C.z;return!(l>i||n>t)&&(n>l&&(l=n),i<t&&(t=i),!0)}clone(){return new Z(this.start.clone(),this.dir.clone())}toJSON(){return{start:this.start.toJSON(),dir:this.dir.toJSON()}}fromJSON(g){this.start.fromJSON(g.start),this.dir.fromJSON(g.dir)}toString(){return e.stringifyJSONWithFixedPrecision(this.toJSON())}}class o{constructor(g,I,C){if(g instanceof Float32Array)this.setFromFloat32Array(g);else{if(g instanceof d)this.tr=g;else{if(g instanceof R&&null==I&&null==C)return this.tr=new d,this.ori=g,void(this.sc=new d(1,1,1));this.tr=new d}this.ori=I instanceof R?I:new R,this.sc=C instanceof d?C:new d(1,1,1)}}set(g,I,C){this.tr=g,this.ori=I,C instanceof d&&(this.sc=C)}setFromOther(g){this.tr=g.tr,this.ori=g.ori,this.sc=g.sc}isIdentity(){return this.tr.isNull()&&this.ori.isIdentity()&&this.sc.is111()}isEqual(g){return this.tr.isEqual(g.tr)&&this.ori.isEqual(g.ori)&&this.sc.isEqual(g.sc)}approxEqual(g,I=Number.EPSILON){return(!g.tr||this.tr.approxEqual(g.tr,I))&&(!g.ori||this.ori.approxEqual(g.ori,I))&&(!g.sc||this.sc.approxEqual(g.sc,I))}setLookAt(g,I,C){const F=g.subtract(I);if(F.length()<Number.EPSILON)throw new Error("Invalid dir");this.ori.setFromDirectionAndUpvector(F,C),this.tr=g}multiply(g){let I=this.sc;this.sc.x==this.sc.y&&this.sc.x==this.sc.z||(I=g.ori.rotateVec3(this.sc),Math.sign(I.x)!=Math.sign(this.sc.x)&&(I.x=-I.x),Math.sign(I.y)!=Math.sign(this.sc.y)&&(I.y=-I.y),Math.sign(I.z)!=Math.sign(this.sc.z)&&(I.z=-I.z));return new o(this.tr.add(this.ori.rotateVec3(I.multiply(g.tr))),this.ori.multiply(g.ori),I.multiply(g.sc))}inverse(){const g=new o;return g.ori=this.ori.inverse(),this.sc.x!=this.sc.y||this.sc.x!=this.sc.z?(g.sc=g.ori.rotateVec3(this.sc),Math.sign(g.sc.x)!=Math.sign(this.sc.x)&&(g.sc.x=-g.sc.x),Math.sign(g.sc.y)!=Math.sign(this.sc.y)&&(g.sc.y=-g.sc.y),Math.sign(g.sc.z)!=Math.sign(this.sc.z)&&(g.sc.z=-g.sc.z)):g.sc=this.sc.inverse(),g.tr=g.ori.rotateVec3(this.tr.negate().multiply(g.sc)),g}transformVec3(g){return this.tr.add(this.ori.rotateVec3(this.sc.multiply(g)))}toMat4(){const g=new V(this.sc.x,0,0,0,0,this.sc.y,0,0,0,0,this.sc.z,0,0,0,0,1),I=this.ori.toMat4(),C=new V;return C.translation=this.tr,C.multiply(I).multiply(g)}setFromMat4(g){this.tr=g.translation,this.ori.setFromMat4(g)}setFromFloat32Array(g){if(7==g.length)return this.tr=new d(new Float32Array(g.buffer,g.byteOffset,3)),this.ori=new R(new Float32Array(g.buffer,g.byteOffset+12,4)),void(this.sc=new d(1,1,1));if(8!=g.length){if(10==g.length)return this.tr=new d(new Float32Array(g.buffer,g.byteOffset,3)),this.ori=new R(new Float32Array(g.buffer,g.byteOffset+12,4)),void(this.sc=new d(new Float32Array(g.buffer,g.byteOffset+21,3)));console.warn("unitialized: float32array.length == ",g.length)}else{this.tr=new d(new Float32Array(g.buffer,g.byteOffset,3)),this.ori=new R(new Float32Array(g.buffer,g.byteOffset+12,4));const I=g[7];this.sc=new d(I,I,I)}}clone(){return new o(this.tr.clone(),this.ori.clone(),this.sc.clone())}toJSON(){return{tr:this.tr.toJSON(),ori:this.ori.toJSON(),sc:this.sc.toJSON()}}fromJSON(g){this.tr.fromJSON(g.tr),this.ori.fromJSON(g.ori),g.sc&&this.sc.fromJSON(g.sc)}readBinary(g){this.tr.readBinary(g),this.ori.readBinary(g),this.sc.readBinary(g)}toString(){return e.stringifyJSONWithFixedPrecision(this.toJSON())}}class h{constructor(g,I){this.p0=g instanceof Q?g:new Q(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY),this.p1=I instanceof Q?I:new Q(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY)}set(g,I){this.p0=g,this.p1=I}reset(){this.p0.x=Number.POSITIVE_INFINITY,this.p1.x=Number.NEGATIVE_INFINITY,this.p0.y=Number.POSITIVE_INFINITY,this.p1.y=Number.NEGATIVE_INFINITY}isValid(){return this.p0.x!=Number.POSITIVE_INFINITY&&this.p1.x!=Number.NEGATIVE_INFINITY&&this.p0.y!=Number.POSITIVE_INFINITY&&this.p1.y!=Number.NEGATIVE_INFINITY}addPoint(g){(this.p0.x==Number.POSITIVE_INFINITY||g.x<this.p0.x)&&(this.p0.x=g.x),(this.p0.y==Number.POSITIVE_INFINITY||g.y<this.p0.y)&&(this.p0.y=g.y),(this.p1.y==Number.NEGATIVE_INFINITY||g.x>this.p1.x)&&(this.p1.x=g.x),(this.p1.y==Number.NEGATIVE_INFINITY||g.y>this.p1.y)&&(this.p1.y=g.y)}size(){return this.p1.distanceTo(this.p0)}diagonal(){return this.p1.subtract(this.p0)}center(){const g=this.p1.subtract(this.p0);return g.scaleInPlace(.5),g.addInPlace(this.p0),g}toJSON(){return{p0:this.p0.toJSON(),p1:this.p1.toJSON()}}toString(){return e.stringifyJSONWithFixedPrecision(this.toJSON())}}class c{constructor(g=new d,I=0){this.pos=g instanceof d?g:new d,this.radius=I}clone(){return new c(this.pos.clone(),this.radius)}intersectsBox(g){return g.intersectsSphere(this)}toJSON(){return{pos:this.pos.toJSON(),radius:this.radius}}toString(){return e.stringifyJSONWithFixedPrecision(this.toJSON())}}class r{constructor(g,I){g instanceof Float32Array?(this.p0=new d(new Float32Array(g.buffer,g.byteOffset,3)),this.p1=new d(new Float32Array(g.buffer,g.byteOffset+12,3))):(this.p0=g instanceof d?g:new d(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY),this.p1=I instanceof d?I:new d(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY))}get min(){return this.p0}get max(){return this.p1}set(g,I){this.p0=g,this.p1=I}reset(){this.p0.x=Number.POSITIVE_INFINITY,this.p0.y=Number.POSITIVE_INFINITY,this.p0.z=Number.POSITIVE_INFINITY,this.p1.x=Number.NEGATIVE_INFINITY,this.p1.y=Number.NEGATIVE_INFINITY,this.p1.z=Number.NEGATIVE_INFINITY}isValid(){return this.p0.x!=Number.POSITIVE_INFINITY&&this.p1.x!=Number.NEGATIVE_INFINITY&&this.p0.y!=Number.POSITIVE_INFINITY&&this.p1.y!=Number.NEGATIVE_INFINITY&&this.p0.z!=Number.POSITIVE_INFINITY&&this.p1.z!=Number.NEGATIVE_INFINITY}addPoint(g){g.x!=Number.POSITIVE_INFINITY&&g.x!=Number.NEGATIVE_INFINITY&&(g.x<this.p0.x&&(this.p0.x=g.x),g.x>this.p1.x&&(this.p1.x=g.x)),g.y!=Number.POSITIVE_INFINITY&&g.y!=Number.NEGATIVE_INFINITY&&(g.y<this.p0.y&&(this.p0.y=g.y),g.y>this.p1.y&&(this.p1.y=g.y)),g.z!=Number.POSITIVE_INFINITY&&g.z!=Number.NEGATIVE_INFINITY&&(g.z<this.p0.z&&(this.p0.z=g.z),g.z>this.p1.z&&(this.p1.z=g.z))}addBox3(g,I){I?(this.addPoint(I.transformVec3(g.p0)),this.addPoint(I.transformVec3(new d(g.p0.x,g.p0.y,g.p1.z))),this.addPoint(I.transformVec3(new d(g.p0.x,g.p1.y,g.p0.z))),this.addPoint(I.transformVec3(new d(g.p1.x,g.p0.y,g.p0.z))),this.addPoint(I.transformVec3(new d(g.p0.x,g.p1.y,g.p1.z))),this.addPoint(I.transformVec3(new d(g.p1.x,g.p0.y,g.p1.z))),this.addPoint(I.transformVec3(new d(g.p1.x,g.p1.y,g.p0.z))),this.addPoint(I.transformVec3(g.p1))):(this.addPoint(g.p0),this.addPoint(g.p1))}size(){return this.p1.distanceTo(this.p0)}diagonal(){return this.p1.subtract(this.p0)}center(){const g=this.p1.subtract(this.p0);return g.scaleInPlace(.5),g.addInPlace(this.p0),g}toMat4(){const g=this.p1.x-this.p0.x,I=this.p1.y-this.p0.y,C=this.p1.z-this.p0.z;return new V(g,0,0,0,0,I,0,0,0,0,C,0,this.p0.x,this.p0.y,this.p0.z,1)}getBoundingSphere(){return new c(this.center(),.5*this.diagonal().length())}intersectsBox(g){return!(g.max.x<this.min.x||g.min.x>this.max.x||g.max.y<this.min.y||g.min.y>this.max.y||g.max.z<this.min.z||g.min.z>this.max.z)}intersectsSphere(g){return(new d).distanceTo(g.pos)<=g.radius*g.radius}intersectsPlane(g){let I,C;return g.normal.x>0?(I=g.normal.x*this.min.x,C=g.normal.x*this.max.x):(I=g.normal.x*this.max.x,C=g.normal.x*this.min.x),g.normal.y>0?(I+=g.normal.y*this.min.y,C+=g.normal.y*this.max.y):(I+=g.normal.y*this.max.y,C+=g.normal.y*this.min.y),g.normal.z>0?(I+=g.normal.z*this.min.z,C+=g.normal.z*this.max.z):(I+=g.normal.z*this.max.z,C+=g.normal.z*this.min.z),I<=-g.w&&C>=-g.w}clone(){return new r(this.p0.clone(),this.p1.clone())}toJSON(){return{p0:this.p0.toJSON(),p1:this.p1.toJSON()}}fromJSON(g){const I={x:s.isNumeric(g.p0.x)?g.p0.x:Number.POSITIVE_INFINITY,y:s.isNumeric(g.p0.y)?g.p0.y:Number.POSITIVE_INFINITY,z:s.isNumeric(g.p0.z)?g.p0.z:Number.POSITIVE_INFINITY},C={x:s.isNumeric(g.p1.x)?g.p1.x:Number.NEGATIVE_INFINITY,y:s.isNumeric(g.p1.y)?g.p1.y:Number.NEGATIVE_INFINITY,z:s.isNumeric(g.p1.z)?g.p1.z:Number.NEGATIVE_INFINITY};this.p0.fromJSON(I),this.p1.fromJSON(C)}setFromFloat32Array(g){this.p0=new d(g.buffer,g.byteOffset),this.p1=new d(g.buffer,g.byteOffset+12)}toString(){return e.stringifyJSONWithFixedPrecision(this.toJSON())}}class m{constructor(g,I=0){this.normal=g instanceof d?g:new d,this.w=I}set(g,I,C,F){this.normal.set(g,I,C),this.w=F}divideScalar(g){this.normal.scaleInPlace(1/g),this.w/=g}distanceToPoint(g){return g.dot(this.normal)+this.w}normalizeInPlace(){const g=1/this.normal.length();this.normal.scaleInPlace(g),this.w*=g}clone(){return new m(this.normal.clone(),this.w)}toJSON(){return{normal:this.normal.toJSON(),w:this.w}}fromJSON(g){this.normal.fromJSON(g.normal),this.w=g.w}toString(){return e.stringifyJSONWithFixedPrecision(this.toJSON())}}let W=0;class J{constructor(){this.__id=++W}getId(){return this.__id}getClassName(){return t.getClassName(Object.getPrototypeOf(this).constructor)}}class G{constructor(){}}class b extends J{constructor(){super(),this.listeners={}}on(g,I){if(!I)throw new Error("Missing listener.");this.listeners[g]||(this.listeners[g]=[]);const C=this.listeners[g];if(C.includes(I))throw new Error(`Listener "${I.name}" already connected to event "${g}".`);const F=C.length;return C[F]=I,F}once(g,I){const C=F=>{I(F),this.off(g,C)};return this.on(g,C)}off(g,I){if(!I)throw new Error("Missing callback function (listener).");if("number"==typeof I)return console.warn("Deprecated. Un-register using the original listener instead."),void this.removeListenerById(g,I);const C=this.listeners[g]||[],F=[];if(C.forEach(((g,C)=>{g===I&&F.push(C)})),0==F.length)throw new Error(`Listener "${I.name}" is not connected to "${g}" event`);for(const g of F)C[g]=null}removeListenerById(g,I){const C=this.listeners[g];if(C){if(!C[I])throw new Error("Invalid ID");C[I]=null}else console.warn("callback :"+I+" was not connected to this event:"+g)}emit(g,I=new G){(this.listeners[g]||[]).forEach((g=>{g&&g(I)}))}}class N extends G{constructor(g,I){super(),this.width=g,this.height=I}}class S extends b{constructor(g=0,I=0){super(),this.root={x:0,y:0,w:g,h:I}}fit(g){if(0==g.length)return;let I=!1;if(this.root.w<g[0].w&&(this.root.w=g[0].w,I=!0),this.root.h<g[0].h&&(this.root.h=g[0].h,I=!0),I){const g=new N(this.root.w,this.root.h);this.emit("resized",g)}g.forEach((g=>{g.fit=this.__addBlock(g)}))}__addBlock(g){const I=this.findNode(this.root,g.w,g.h);return I?this.splitNode(I,g.w,g.h):this.growNode(g.w,g.h)}addBlock(g){let I=!1;if(this.root.w<g.w&&(this.root.w=g.w,I=!0),this.root.h<g.h&&(this.root.h=g.h,I=!0),I){const g=new N(this.root.w,this.root.h);this.emit("resized",g)}const C=this.findNode(this.root,g.w,g.h);return C?this.splitNode(C,g.w,g.h):this.growNode(g.w,g.h)}findNode(g,I,C){return g.used?this.findNode(g.right,I,C)||this.findNode(g.down,I,C):I<=g.w&&C<=g.h?g:null}splitNode(g,I,C){return g.used=!0,g.down={x:g.x,y:g.y+C,w:g.w,h:g.h-C},g.right={x:g.x+I,y:g.y,w:g.w-I,h:C},g}growNode(g,I){const C=g<=this.root.w,F=I<=this.root.h,U=F&&this.root.h>=this.root.w+g,l=C&&this.root.w>=this.root.h+I;return U?this.growRight(g,I):l?this.growDown(g,I):F?this.growRight(g,I):C?this.growDown(g,I):null}growRight(g,I){this.root={used:!0,x:0,y:0,w:this.root.w+g,h:this.root.h,down:this.root,right:{x:this.root.w,y:0,w:g,h:this.root.h}};const C=this.findNode(this.root,g,I);let F;C&&(F=this.splitNode(C,g,I));const U=new N(this.root.w,this.root.h);return this.emit("resized",U),F}growDown(g,I){this.root={used:!0,x:0,y:0,w:this.root.w,h:this.root.h+I,down:{x:0,y:this.root.h,w:this.root.w,h:I},right:this.root};const C=this.findNode(this.root,g,I);let F;C&&(F=this.splitNode(C,g,I));const U=new N(this.root.w,this.root.h);return this.emit("resized",U),F}}class u{constructor(g=0,I=0){this.start=g,this.size=I}}class y extends b{constructor(){super(),this.freeList=[],this.allocations=[],this.allocationsMap={},this.allocatedSpace=0,this.reservedSpace=0,this.freeSpace=0}getAllocation(g){return this.allocations[this.allocationsMap[g]]}allocate(g,I){if(null!=this.allocationsMap[g]){const C=this.allocationsMap[g],F=this.allocations[C];if(I==F.size)return F;if(I<F.size){const g=F.size-I;return this.addBlock(C+1,new u(F.start+I,g)),this.freeBlock(C+1),F.size=I,F}{const U=C+1;if(this.freeList.includes(U)&&F.size+this.allocations[U].size>=I){const g=this.allocations[U];if(F.size+g.size==I)return F.size+=g.size,this.freeSpace-=g.size,this.freeList.splice(this.freeList.indexOf(U),1),this.removeBlock(U),F;{const C=I-F.size;return F.size+=C,this.freeSpace-=C,g.start+=C,g.size-=C,F}}delete this.allocationsMap[g],F.start+F.size==this.allocatedSpace?(this.removeBlock(C),this.allocatedSpace-=F.size):this.freeBlock(C)}}let C=-1;for(let g=0;g<this.freeList.length;g++){const F=this.freeList[g],U=this.allocations[F];if(U.size==I){C=F;break}U.size>I&&(C=F)}if(-1!=C){const F=this.allocations[C];if(this.freeSpace-=F.size,this.freeList.splice(this.freeList.indexOf(C),1),F.size>I){const g=F.size-I;this.addBlock(C+1,new u(F.start+I,g)),this.freeBlock(C+1),this.freeList.sort(((g,I)=>this.allocations[I].size-this.allocations[g].size)),this.allocations[C].size=I}this.allocationsMap[g]=C}else{const C=this.allocatedSpace,F=this.allocations.length;this.allocatedSpace+=I;const U=s.nextPow2(this.allocatedSpace);U!=this.reservedSpace&&(this.reservedSpace=U,this.emit("resized",{reservedSpace:this.reservedSpace})),this.allocations.push(new u(C,I)),this.allocationsMap[g]=F}return this.allocations[this.allocationsMap[g]]}addBlock(g,I){this.allocations.splice(g,0,I);for(const I in this.allocationsMap)this.allocationsMap[I]>=g&&this.allocationsMap[I]++;for(let I=0;I<this.freeList.length;I++)this.freeList[I]>=g&&this.freeList[I]++}removeBlock(g){this.allocations.splice(g,1);for(const I in this.allocationsMap)this.allocationsMap[I]>g&&this.allocationsMap[I]--;for(let I=0;I<this.freeList.length;I++)this.freeList[I]>g&&this.freeList[I]--}freeBlock(g){const I=this.allocations[g];this.freeSpace+=I.size;const C=g-1;if(this.freeList.includes(C)){return this.allocations[C].size+=I.size,void this.removeBlock(g)}const F=g+1;if(this.freeList.includes(F)){const C=this.allocations[F];return C.start-=I.size,C.size+=I.size,void this.removeBlock(g)}this.freeList.push(g)}deallocate(g){const I=this.allocationsMap[g];if(null==I)throw new Error(`allocation ${g} does not exist.`);this.freeBlock(I),delete this.allocationsMap[g]}getFragmentation(){return this.freeSpace/this.allocatedSpace}defragment(){}verifyConsistency(){if(Object.keys(this.allocationsMap).length+this.freeList.length!=this.allocations.length)throw new Error("number of blocks does not match the number of allocations");for(const g in this.allocationsMap){const I=this.allocationsMap[g];if(this.freeList.includes(I))throw new Error("block of used memory is also on the free list")}let g=0;for(let I=0;I<this.allocations.length;I++){const C=this.allocations[I];if(C.start!=g)throw"blocks of memory are not sequential";g+=C.size}if(g!=this.allocatedSpace)throw`allocated size: ${this.allocatedSpace}  does not match allocated blocks: ${g}`;if(this.reservedSpace<this.allocatedSpace)throw`reserved space: ${this.reservedSpace} is less than allocated space: ${this.allocatedSpace}`}}class X extends G{constructor(g){super(),this.controller=g}}class p extends G{constructor(g,I){super(),this.change=g,this.count=I}}class k extends G{constructor(g){super(),this.envMap=g}}class Y extends G{constructor(g){super(),this.index=g}}class E extends G{constructor(g){super(),this.propagating=!0,this.sourceEvent=g,this.altKey=g.altKey,this.code=g.code,this.ctrlKey=g.ctrlKey,this.isComposing=g.isComposing,this.key=g.key,this.location=g.location,this.metaKey=g.metaKey,this.repeat=g.repeat,this.shiftKey=g.shiftKey,this.which=g.which}stopPropagation(){this.propagating=!1,this.sourceEvent&&this.sourceEvent.stopPropagation()}preventDefault(){this.sourceEvent&&this.sourceEvent.preventDefault()}}class T extends G{constructor(g){super(),this.name=g}}class D extends G{constructor(g){super(),this.name=g}}class v extends G{constructor(g){super(),this.range=g}}class M extends G{constructor(g){super(),this.scene=g}}class H extends G{constructor(g){super(),this.value=g}}class K extends G{constructor(g){super(),this.selected=g}}class x extends G{constructor(g){super(),this.shaderName=g}}class w extends G{constructor(g){super(),this.state=g}}class z extends G{constructor(g,I){super(),this.geomFileID=g,this.geomCount=I}}class f extends G{constructor(g,I){super(),this.isTextured=g,this.param=I}}class L extends G{constructor(g){super(),this.isTransparent=g}}class _ extends G{constructor(g,I){super(),this.interfaceType=g,this.viewXfo=I}}class O extends G{constructor(g){super(),this.visible=g}}class j extends _{constructor(g){super("VR",g),this.hmd="",this.controllers=[]}}const P={mouse:"mouse",touch:"touch",xr:"xr"};let q=null;class $ extends G{constructor(g){super(),this.propagating=!0,this.pointerType=g}stopPropagation(){this.propagating=!1}setCapture(g){q=g}getCapture(){return q}releaseCapture(){q=null}}class gg extends ${constructor(g,I,C){super(P.xr),this.viewport=g,this.controller=I,this.button=C}stopPropagation(){this.propagating=!1}setCapture(g){this.controller.capturedItem=g}getCapture(){return this.controller.capturedItem}releaseCapture(){this.controller.capturedItem=null}}class Ig extends ${constructor(g,I,C){super(P.xr),this.controllers=[],this.viewport=g,this.viewXfo=I,C.forEach((g=>{this.controllers.push(g)}))}}class Cg extends G{constructor(g){super(),this.xrViewport=g}}class Fg extends ${constructor(g){super(g)}}class Ug extends Fg{constructor(g,I){super(P.mouse),this.sourceEvent=g,this.button=g.button,this.clientX=g.clientX,this.clientY=g.clientY;this.rendererX=1*(this.clientX-I.left),this.rendererY=1*(this.clientY-I.top),this.altKey=g.altKey,this.metaKey=g.metaKey,this.ctrlKey=g.ctrlKey,this.shiftKey=g.shiftKey}stopPropagation(){super.stopPropagation(),this.sourceEvent&&this.sourceEvent.stopPropagation()}preventDefault(){this.sourceEvent&&this.sourceEvent.preventDefault()}}class lg{constructor(g,I){this.clientX=0,this.clientY=0,this.screenX=0,this.screenY=0,this.pageX=0,this.pageY=0,this.radiusX=0,this.radiusY=0,this.rotationAngle=0,this.force=0,this.altitudeAngle=0,this.azimuthAngle=0,this.touchType="direct",this.identifier=g.identifier,this.clientX=g.clientX,this.clientY=g.clientY,this.screenX=g.screenX,this.screenY=g.screenY,this.pageX=g.pageX,this.pageY=g.pageY,this.radiusX=g.radiusX,this.radiusY=g.radiusY,this.rotationAngle=g.rotationAngle,this.force=g.force;this.rendererX=1*(this.clientX-I.left),this.rendererY=1*(this.clientY-I.top),this.touchPos=new Q,this.touchRay=new Z}}class tg extends Fg{constructor(g,I){super(P.touch),this.touches=[],this.changedTouches=[],this.targetTouches=[],this.altKey=!1,this.metaKey=!1,this.ctrlKey=!1,this.shiftKey=!1,this.sourceEvent=g,this.sourceEvent.stopPropagation(),this.altKey=g.altKey,this.metaKey=g.metaKey,this.ctrlKey=g.ctrlKey,this.shiftKey=g.shiftKey;for(let C=0;C<g.touches.length;C++)this.touches.push(new lg(g.touches[C],I));if(g.changedTouches)for(let C=0;C<g.changedTouches.length;C++)this.changedTouches.push(new lg(g.changedTouches[C],I));if(g.targetTouches)for(let C=0;C<g.targetTouches.length;C++)this.targetTouches.push(new lg(g.targetTouches[C],I))}stopPropagation(){super.stopPropagation(),this.sourceEvent&&this.sourceEvent.stopPropagation()}preventDefault(){}}class eg extends Ug{constructor(g,I){super(g,I),this.wheelDelta=g.wheelDelta,this.deltaMode=g.deltaMode,this.deltaX=g.deltaX,this.deltaY=g.deltaY,this.deltaZ=g.deltaZ}}class Qg extends G{constructor(g,I){super(),this.index=g,this.childItem=I}}let dg=0;class ng extends b{constructor(){if(super(),"RefCounted"==this.constructor.name)throw new Error("RefCounted should not be instantiated directly.");this.__id=++dg,this.__refs=[],this.__destroyed=!1}getId(){return this.__id}numRefs(){return this.__refs.length}addRef(g){if(!g)throw new Error("Error in RefCounted.addRef: Must provide a referer");return this.__refs.push(g),!0}removeRef(g){if(!g)throw new Error("Error in RefCounted.removeRef: Must provide a referer");const I=this.__refs.indexOf(g);if(-1==I)throw new Error("Error in RefCounted.removeRef: referer not found in refs list.");this.__refs.splice(I,1),0==this.__refs.length&&this.destroy()}getRefer(g){return this.__refs[g]}getRefIndex(g){return this.__refs.indexOf(g)}isDestroyed(){return this.__destroyed}destroy(){this.__destroyed=!0,this.emit("destructing")}}class ig extends b{constructor(){super(),this.paramEventListenerIDs={},this.paramMapping={},this.params=[],this.deprecatedParamMapping={}}getNumParameters(){return this.params.length}getParameters(){return this.params}getParameterIndex(g){return this.paramMapping[g]}getParameterByIndex(g){return this.params[g]}hasParameter(g){return g in this.paramMapping}addParameterDeprecationMapping(g,I){this.deprecatedParamMapping[g]=I}getParameter(g){let I=this.paramMapping[g];if(null==I){const C=this.deprecatedParamMapping[g];if(!C)return null;console.warn(`Parameter name ${g} is now deprecated. Please use ${C} instead.`),I=this.paramMapping[C]}return this.params[I]}parameterValueChanged(g){this.emit("parameterValueChanged",g)}addParameter(g){return this.insertParameter(g,this.params.length)}insertParameter(g,I){const C=g.getName();null!=this.paramMapping[C]&&(console.warn("Replacing Parameter:"+C),this.removeParameter(C)),g.setOwner(this),this.paramEventListenerIDs[C]=g.on("valueChanged",(I=>{const C={param:g};for(const g in I)C[g]=I[g];this.parameterValueChanged(C)})),this.params.splice(I,0,g);for(let g=I;g<this.params.length;g++)this.paramMapping[this.params[g].getName()]=g;const F=new T(C);return this.emit("parameterAdded",F),g}removeParameter(g){if(null==this.paramMapping[g])throw new Error("Unable to remove Parameter:"+g);const I=this.paramMapping[g];this.params[this.paramMapping[g]].removeListenerById("valueChanged",this.paramEventListenerIDs[g]),this.params.splice(I,1),delete this.paramMapping[g];for(let g=I;g<this.params.length;g++)this.paramMapping[this.params[g].getName()]=g;const C=new D(g);this.emit("parameterRemoved",C)}replaceParameter(g){const I=g.getName();if(null==this.paramMapping[I])throw new Error("Unable to replace Parameter:"+I);const C=this.paramMapping[I];return this.removeParameter(I),this.insertParameter(g,C),g}toJSON(g){const I={type:this.getClassName()},C={};let F=0;for(const I of this.params){const U=I.toJSON(g);U&&(C[I.getName()]=U,F++)}return F>0&&(I.params=C),I}fromJSON(g,I){if(g.params)for(const C in g.params){const F=g.params[C],U=this.getParameter(C);U?F.paramPath?null==I||I.resolvePath(F.paramPath,(g=>{this.replaceParameter(g)}),(()=>{console.warn("Unable to resolve shared parameter:"+F.paramPath)})):U.fromJSON(F,I):console.warn("Param not found:"+C)}}readBinary(g,I){if((null==I?void 0:I.versions["zea-engine"].compare([0,0,3]))>=0){const C=g.loadUInt32();for(let F=0;F<C;F++){const C=g.loadStr(),F=g.loadStr();let U=this.getParameter(F);if(!U){if(U=t.constructClass(C),!U){console.error("Unable to construct prop:"+F+" of type:"+C);continue}U.setName(F),this.addParameter(U)}U.readBinary(g,I)}}}toString(g){return JSON.stringify(this.toJSON(),null,2)}copyFrom(g,I){let C=g.getNumParameters();for(;C--;){const I=g.getParameterByIndex(C),F=this.getParameter(I.getName());F?F.loadValue(I.value):this.addParameter(I.clone())}}}let Ag=0;class Bg extends G{constructor(g,I){super(),this.oldName=g,this.newName=I}}class ag extends ig{constructor(g=""){super(),this.__ownerItem=void 0,this.__selectable=!0,this.__selected=!1,this.__metaData={},this.__name=g,this.__path=[this.__name],Ag++}static getNumBaseItems(){return Ag}getName(){return this.__name}setName(g){if(this.__name!=g){const I=this.__name;this.__name=g,this.updatePath();const C=new Bg(I,g);this.emit("nameChanged",C)}}updatePath(){null==this.__ownerItem?this.__path=[this.__name]:this.__path=[...this.__ownerItem.getPath(),this.__name]}getPath(){return this.__path}resolvePath(g,I=0){if(0==I&&("."!=g[0]&&g[0]!=this.__name||I++),I==g.length)return this;if(">"==g[I]&&I==g.length-1)return this.getParameter(g[I+1]);const C=this.getParameter(g[I]);if(C)return C;throw new Error("Invalid path:"+g+"["+I+"] member not found")}getOwner(){return this.__ownerItem}setOwner(g){this.__ownerItem!==g?(this.__ownerItem=g,this.updatePath()):g||(this.__ownerItem=void 0,this.updatePath())}isSelectable(){return this.__selectable}setSelectable(g){if(this.__selectable!=g){this.__selectable=g;let I=new H(this.__selectable);return this.emit("selectabilityChanged",I),!0}return!1}isSelected(){return this.__selected}setSelected(g){this.__selected=g;let I=new K(this.__selected);this.emit("selectedChanged",I)}getMetadata(g){return this.__metaData[g]}hasMetadata(g){return g in this.__metaData}setMetadata(g,I){this.__metaData[g]=I}deleteMetadata(g){delete this.__metaData[g]}toJSON(g){const I=super.toJSON(g);return I.name=this.__name,I}fromJSON(g,I){g.name&&(this.__name=g.name),super.fromJSON(g,I)}readBinary(g,I){g.loadStr(),this.setName(g.loadStr()),super.readBinary(g,I)}clone(g){throw new Error(this.constructor.name+" does not implement its clone method")}copyFrom(g,I){super.copyFrom(g,I),this.setName(g.getName()),this.setSelectable(g.isSelectable())}}const Vg=function(g,I,C,F,U){try{const l=new XMLHttpRequest;l.responseType=I,l.addEventListener("timeout",(I=>{throw new Error("The request for "+g+" timed out.")})),l.addEventListener("error",(I=>{throw new Error("The request for "+g+": xhr.readyState:"+l.readyState)})),l.addEventListener("abort",(I=>{throw new Error("The request for "+g+": xhr.readyState:"+l.readyState)})),l.addEventListener("progress",(g=>{U&&U(g.total,g.loaded)})),l.addEventListener("loadend",(g=>{200==l.status?C(l):F(l.statusText)})),l.open("GET",g,!0),l.send()}catch(g){F(g)}},Rg=function(g,I,C,F){Vg(g,"text",(g=>{I(g.responseText)}),(I=>{if(null==C)throw new Error("Unable to XHR File:"+g);C(I)}),F)},sg=function(g,I,C,F){Vg(g,"arraybuffer",(g=>{I(g.response)}),(I=>{if(null==C)throw new Error("Unable to XHR File:"+g);C(I)}),F)};function Zg(g,I,C){var F=void 0===I?null:I,U=function(g,I){var C=atob(g);if(I){for(var F=new Uint8Array(C.length),U=0,l=C.length;U<l;++U)F[U]=C.charCodeAt(U);return String.fromCharCode.apply(null,new Uint16Array(F.buffer))}return C}(g,void 0!==C&&C),l=U.indexOf("\n",10)+1,t=U.substring(l)+(F?"//# sourceMappingURL="+F:""),e=new Blob([t],{type:"application/javascript"});return URL.createObjectURL(e)}function og(g,I,C){var F;return function(U){return F=F||Zg(g,I,C),new Worker(F,U)}}var hg=og("",null,!1);const cg=C.hardwareConcurrency-1;class rg extends b{constructor(){super(),this.baseUrl="",this.__totalWork=0,this.__doneWork=0,this.plugins={},this.systemUrls={};const g="https://storage.googleapis.com/visualive-tmp/zea-engine-resources";this.systemUrls["ZeaEngine/Vive.vla"]=g+"/Vive.vla",this.systemUrls["ZeaEngine/Oculus.vla"]=g+"/Oculus.vla",this.commonResources={}}registerPlugin(g){g.init(this),this.plugins[g.getType()]=g}loadFile(g,I){const C=this.plugins[g];if(!C)throw new Error(`There's no plugin registered for the type of file "${g}". Did you add the plugins script? See: https://docs.zea.live/zea-engine/#/adding-default-plugins`);this.incrementWorkload();const F=C.loadFile(I);return F.then((()=>{this.incrementWorkDone(),this.emit("loaded",{url:I})}),(()=>{this.incrementWorkDone()})),F}getCommonResource(g){return this.commonResources[g]}setCommonResource(g,I){this.commonResources[g]=I}incrementWorkload(g=1){this.__totalWork+=g;const I=this.__doneWork/this.__totalWork*100;this.emit("progressIncremented",{percent:I})}incrementWorkDone(g=1){this.__doneWork+=g;const I=this.__doneWork/this.__totalWork*100;if(this.emit("progressIncremented",{percent:I}),this.__doneWork>this.__totalWork)throw new Error("Mismatch between work loaded and work done.")}}const mg=new rg,Wg=new class{constructor(){this.__callbacks={},this.__workers=[],this.__nextWorker=0}init(g){this.resourceLoader=g}getType(){return"archive"}__getWorker(){return this.__nextWorker=(this.__nextWorker+1)%cg,null==this.__workers[this.__nextWorker]&&(this.__workers[this.__nextWorker]=(()=>new Promise(((g,I)=>{const C=new hg;C.postMessage({type:"init"}),C.onmessage=F=>{if("WASM_LOADED"===F.data.type)g(C);else if("FINISHED"===F.data.type)this.__onFinishedReceiveFileData(F.data);else if("ERROR"===F.data.type){const g=F.data;I(new Error(`Unable to load Resource: ${g.resourceId}`))}}})))()),this.__workers[this.__nextWorker]}__terminateWorkers(){for(const g of this.__workers)g.terminate();this.__workers=[]}loadFile(g){this.resourceLoader.incrementWorkload(1);return new Promise(((I,C)=>{g in this.__callbacks||(this.__callbacks[g]=[]),this.__callbacks[g].push(I),fetch(g).then((I=>(this.resourceLoader.incrementWorkDone(1),function(g){return!!g.ok&&g}(I)?I.arrayBuffer():(C(new Error(`loadArchive: ${I.status} - ${I.statusText} : ${g}`)),null)))).then((C=>{const F=g;F in this.__callbacks||(this.__callbacks[F]=[]),this.__callbacks[F].push(I),this.__getWorker().then((g=>{g.postMessage({type:"unpack",resourceId:F,buffer:C})}))}))}))}__onFinishedReceiveFileData(g){const I=g.resourceId,C=this.__callbacks[I];if(C){for(const I of C)I(g.entries);delete this.__callbacks[I]}}shutDownWorkers(){this.__workers.forEach((g=>{g.then((g=>{g.terminate()}))}))}};mg.registerPlugin(Wg);const Jg=new class{init(g){this.resourceLoader=g}getType(){return"json"}loadFile(g){this.resourceLoader.incrementWorkload(1);return new Promise(((I,C)=>{fetch(g).then((F=>{this.resourceLoader.incrementWorkDone(1),!function(g){return!!g.ok&&g}(F)?C(`loadJSON: ${F.status} - ${F.statusText} : ${g}`):I(F.json())}))}))}};mg.registerPlugin(Jg);const Gg=new class{init(g){this.resourceLoader=g}getType(){return"text"}loadFile(g){this.resourceLoader.incrementWorkload(1);return new Promise(((I,C)=>{fetch(g).then((F=>{this.resourceLoader.incrementWorkDone(1),!function(g){return!!g.ok&&g}(F)?C(`loadText: ${F.status} - ${F.statusText} : ${g}`):I(F.text())}))}))}};mg.registerPlugin(Gg);const bg=new class{init(g){this.resourceLoader=g}getType(){return"binary"}loadFile(g){this.resourceLoader.incrementWorkload(1);return new Promise(((I,C)=>{fetch(g).then((F=>{this.resourceLoader.incrementWorkDone(1),!function(g){return!!g.ok&&g}(F)?C(`loadBinary: ${F.status} - ${F.statusText} : ${g}`):I(F.arrayBuffer())}))}))}};mg.registerPlugin(bg);class Ng{constructor(g=""){if(this.branch="",g){const I=g.split("-"),C=I[0].split(".");this.major=parseInt(C[0]),this.minor=parseInt(C[1]),this.patch=parseInt(C[2]),2==I.length&&(this.branch=I[1])}else this.major=0,this.minor=0,this.patch=0}compare(g){const I=[this.major,this.minor,this.patch];for(let C=0;C<3;C++)if(I[C]!==g[C])return I[C]-g[C];return 0}}class Sg{constructor(g,I=0,C=!0){this.__data=g,this.__byteOffset=I,this.__dataView=new DataView(this.__data),this.__isMobileDevice=C,this.utf8decoder=new TextDecoder}get isMobileDevice(){return this.__isMobileDevice}get data(){return this.__data}get byteLength(){return this.__dataView.byteLength}get remainingByteLength(){return this.__dataView.byteLength-this.__byteOffset}pos(){return this.__byteOffset}seek(g){this.__byteOffset=g}advance(g){this.__byteOffset+=g}loadUInt8(){const g=this.__dataView.getUint8(this.__byteOffset);return this.__byteOffset+=1,g}loadUInt16(){const g=this.__dataView.getUint16(this.__byteOffset,!0);return this.__byteOffset+=2,g}loadUInt32(){const g=this.__dataView.getUint32(this.__byteOffset,!0);return this.__byteOffset+=4,g}loadSInt32(){const g=this.__dataView.getInt32(this.__byteOffset,!0);return this.__byteOffset+=4,g}loadFloat16(){const g=this.loadUInt16();return s.decode16BitFloat(g)}loadUFloat16(){const g=this.loadFloat16();return g<0?2048-g:g}loadFloat16From2xUInt8(){throw Error("loadFloat16From2xUInt8 not implemented!")}loadUInt32From2xUFloat16(){return this.loadUFloat16()+4096*this.loadUFloat16()}loadSInt32From2xFloat16(){return this.loadFloat16()+2048*this.loadFloat16()}loadFloat32(){const g=this.__dataView.getFloat32(this.__byteOffset,!0);return this.__byteOffset+=4,g}loadUInt8Array(g,I=!1){null==g&&(g=this.loadUInt32());const C=new Uint8Array(this.__data,this.__byteOffset,g);return this.__byteOffset+=g,C}loadUInt16Array(g,I=!1){if(null==g&&(g=this.loadUInt32()),0==g)return new Uint16Array;let C;if(this.readPad(2),this.__isMobileDevice){C=new Uint16Array(g);for(let I=0;I<g;I++)C[I]=this.__dataView.getUint16(this.__byteOffset,!0),this.__byteOffset+=2}else C=new Uint16Array(this.__data,this.__byteOffset,g),this.__byteOffset+=2*g;return C}loadUInt32Array(g,I=!1){if(null==g&&(g=this.loadUInt32()),0==g)return new Uint32Array;let C;if(this.readPad(4),this.__isMobileDevice){C=new Uint32Array(g);for(let I=0;I<g;I++)C[I]=this.__dataView.getUint32(this.__byteOffset,!0),this.__byteOffset+=4}else C=new Uint32Array(this.__data,this.__byteOffset,g),this.__byteOffset+=4*g;return C}loadFloat32Array(g,I=!1){if(null==g&&(g=this.loadUInt32()),0==g)return new Float32Array;let C;if(this.readPad(4),this.__isMobileDevice){C=new Float32Array(g);for(let I=0;I<g;I++)C[I]=this.__dataView.getFloat32(this.__byteOffset,!0),this.__byteOffset+=4}else C=new Float32Array(this.__data,this.__byteOffset,g),this.__byteOffset+=4*g;return C}loadStr(){const g=this.loadUInt32(),I=new Uint8Array(this.__data,this.__byteOffset,g);return this.__byteOffset+=g,this.utf8decoder.decode(I)}loadStrArray(){const g=this.loadUInt32(),I=[];for(let C=0;C<g;C++)I[C]=this.loadStr();return I}loadSInt32Vec2(){const g=this.loadSInt32(),I=this.loadSInt32();return new Q(g,I)}loadUInt32Vec2(){const g=this.loadUInt32(),I=this.loadUInt32();return new Q(g,I)}loadFloat16Vec2(){const g=this.loadFloat16(),I=this.loadFloat16();return new Q(g,I)}loadFloat32Vec2(){const g=this.loadFloat32(),I=this.loadFloat32();return new Q(g,I)}loadFloat16Vec3(){const g=this.loadFloat16(),I=this.loadFloat16(),C=this.loadFloat16();return new d(g,I,C)}loadFloat32Vec3(){const g=this.loadFloat32(),I=this.loadFloat32(),C=this.loadFloat32();return new d(g,I,C)}loadFloat16Quat(){const g=this.loadFloat16(),I=this.loadFloat16(),C=this.loadFloat16(),F=this.loadFloat16();return new R(g,I,C,F)}loadFloat32Quat(){const g=this.loadFloat32(),I=this.loadFloat32(),C=this.loadFloat32(),F=this.loadFloat32();return new R(g,I,C,F)}loadRGBFloat32Color(){const g=this.loadFloat32(),I=this.loadFloat32(),C=this.loadFloat32();return new A(g,I,C)}loadRGBAFloat32Color(){const g=this.loadFloat32(),I=this.loadFloat32(),C=this.loadFloat32(),F=this.loadFloat32();return new A(g,I,C,F)}loadRGBUInt8Color(){const g=this.loadUInt8(),I=this.loadUInt8(),C=this.loadUInt8();return new A(g/255,I/255,C/255)}loadRGBAUInt8Color(){const g=this.loadUInt8(),I=this.loadUInt8(),C=this.loadUInt8(),F=this.loadUInt8();return new A(g/255,I/255,C/255,F/255)}loadBox2(){return new h(this.loadFloat32Vec2(),this.loadFloat32Vec2())}loadBox3(){return new r(this.loadFloat32Vec3(),this.loadFloat32Vec3())}readPad(g){const I=this.__byteOffset%g;0!=I&&(this.__byteOffset+=g-I)}}var ug;g.OperatorOutputMode=void 0,(ug=g.OperatorOutputMode||(g.OperatorOutputMode={}))[ug.OP_WRITE=0]="OP_WRITE",ug[ug.OP_READ_WRITE=1]="OP_READ_WRITE";class yg extends b{constructor(g="",I,C){super(),this.dirty=!1,this.boundInputs=[],this.boundOutputs=[],this.cleaning=!1,this.dirtyOpIndex=0,this.firstOP_WRITE=0,this.name=g,this.__value=I,this.dataType=C}getName(){return this.name}setName(g){if(g===this.name)return;const I=this.name;this.name=g,this.emit("nameChanged",{newName:this.name,prevName:I})}getOwner(){return this.ownerItem}setOwner(g){this.ownerItem=g}getPath(){return this.ownerItem&&this.ownerItem instanceof ag?[...this.ownerItem.getPath(),this.name]:[this.name]}getDataType(){return this.dataType}bindOperatorInput(g){this.boundInputs.push(g)}unbindOperatorInput(g){const I=this.boundInputs.indexOf(g);this.boundInputs.splice(I,1)}bindOperatorOutput(g,I=-1){-1==I&&(I=this.boundOutputs.length),this.boundOutputs.splice(I,0,g);for(let g=I;g<this.boundOutputs.length;g++)this.boundOutputs[g].setParamBindIndex(g);return this.__findFirstOP_WRITE(),this.dirtyOpIndex=this.boundOutputs.length,this.setDirty(I),I}unbindOperatorOutput(g){const I=g.getParamBindIndex();this.boundOutputs.splice(I,1);for(let g=I;g<this.boundOutputs.length;g++)this.boundOutputs[g].setParamBindIndex(g);return this.__findFirstOP_WRITE(),this.dirtyOpIndex=this.boundOutputs.length,this.setDirty(Math.max(0,I-1)),I}__findFirstOP_WRITE(){if(this.firstOP_WRITE=this.boundOutputs.length,this.boundOutputs.length>0)for(this.firstOP_WRITE--;this.firstOP_WRITE>0&&this.boundOutputs[this.firstOP_WRITE].getMode()!=g.OperatorOutputMode.OP_WRITE;this.firstOP_WRITE--);}setDirty(g){if(g<this.dirtyOpIndex){let I=this.firstOP_WRITE;if(I<=g){for(this.dirtyOpIndex=I,I++;I<this.boundOutputs.length;I++)I!=g&&this.boundOutputs[I].getOperator().setDirty();for(let g=0;g<this.boundInputs.length;g++)this.boundInputs[g].setDirty();return this.emit("valueChanged"),!0}}return!1}isDirty(){return this.dirtyOpIndex<this.boundOutputs.length}getDirtyBindingIndex(){return this.dirtyOpIndex}setCleanFromOp(I,C){if(C!=this.dirtyOpIndex)if(C<this.dirtyOpIndex)console.log("Parameter is cleaned when it was already clean to that point in the stack:",this.getPath());else if(this.boundOutputs[C].getMode()!=g.OperatorOutputMode.OP_WRITE){const g=this.getClassName(),I=this.boundOutputs[C].getOperator(),F=I.getClassName();throw new Error(`Parameter: ${g} with name: ${this.getName()} is not cleaning all outputs during evaluation of op: ${F} with name: ${I.getName()}`)}this.__value=I,this.dirtyOpIndex=C+1}getValueFromOp(g){return this.dirtyOpIndex<g&&this._clean(g),this.__value}_clean(g){if(this.cleaning)throw new Error(`Cycle detected when cleaning: ${this.getPath()}. Operators need to be rebound to fix errors`);for(this.cleaning=!0;this.dirtyOpIndex<g;){const g=this.dirtyOpIndex;if(this.boundOutputs[this.dirtyOpIndex].getOperator().evaluate(),g==this.dirtyOpIndex){const g=this.boundOutputs[this.dirtyOpIndex].getOperator(),I=g.getClassName();console.warn(`Operator: ${I} with name: ${g.getName()} is not cleaning its outputs during evaluation`),this.dirtyOpIndex++}}this.cleaning=!1}getValue(){return this.dirtyOpIndex<this.boundOutputs.length&&this._clean(this.boundOutputs.length),this.__value}setValue(g){if(null==g)throw"undefined was passed into the set value for param:"+this.getName();if(this.boundOutputs.length>0)for(let I=this.boundOutputs.length-1;I>=0;I--){const C=this.boundOutputs[I];if(g=C.backPropagateValue(g),0==C.getMode())return}if("object"==typeof g||this.__value!=g){this.__value=g;for(let g=0;g<this.boundInputs.length;g++)this.boundInputs[g].paramValueChanged();this.emit("valueChanged")}}get value(){return this.getValue()}set value(g){this.setValue(g)}loadValue(g){this.__value=g}readBinary(g,I){console.warn(`TODO: Parameter: ${this.constructor.name} with name: ${this.name} does not implement readBinary`)}destroy(){console.warn("nothing destroyed. This method was not overwritten in subclass")}}class Xg extends yg{constructor(g="",I=0,C,F){super(g,I,"Number"),this.range=C,this.step=F}getRange(){return this.range}setRange(g){this.range=g}getStep(){return this.step}setStep(g){this.step=g}toJSON(g){const I={value:this.__value};return this.range&&(I.range=this.range),this.step&&(I.step=this.step),I}fromJSON(g,I){this.__value=g.value,g.range&&(this.range=g.range),g.step&&(this.step=g.step)}readBinary(g,I){this.__value=g.loadFloat32()}clone(){return new Xg(this.name,this.__value,this.range,this.step)}}t.register("NumberParameter",Xg),t.register("Property_SInt32",class extends Xg{readBinary(g,I){this.__value=g.loadSInt32()}}),t.register("Property_UInt32",class extends Xg{readBinary(g,I){this.__value=g.loadUInt32()}}),t.register("Property_Float32",class extends Xg{readBinary(g,I){this.__value=g.loadFloat32()}});class pg extends Xg{constructor(g,I,C=[]){super(g,I,[0,C.length],1),this.choices=C}getChoices(){return this.choices}setValue(g){"string"==typeof g?super.setValue(this.choices.indexOf(g)):super.setValue(g)}}t.register("MultiChoiceParameter",pg);class kg extends yg{constructor(g="",I){super(g,null!=I&&I,"Boolean")}readBinary(g,I){this.__value=0!=g.loadUInt8()}toJSON(g){return{value:this.__value}}fromJSON(g,I){this.__value=g.value,this.emit("valueChanged",{mode:0})}clone(){return new kg(this.name,this.__value)}}t.register("BooleanParameter",kg),t.register("Property_Boolean",kg);class Yg extends yg{constructor(g="",I,C){super(g,I||new Q,"Vec2"),this.range=C}getRange(){return this.range}setRange(g){this.range=g,this.emit("rangeChanged",{range:g})}readBinary(g,I){var C;null===(C=this.__value)||void 0===C||C.readBinary(g)}toJSON(g){var I;return{name:this.name,value:null===(I=this.__value)||void 0===I?void 0:I.toJSON()}}fromJSON(g,I){const C=new Q;C.fromJSON(g.value),this.__value=C,g.name&&(this.name=g.name)}clone(){var g;const I=new Yg(this.name,null===(g=this.__value)||void 0===g?void 0:g.clone());return this.range&&I.setRange(this.range),I}}t.register("Vec2Parameter",Yg),t.register("Property_Vec2_32f",Yg);class Eg extends yg{constructor(g="",I,C){super(g,I||new d,"Vec3"),this.range=C}readBinary(g,I){var C;null===(C=this.__value)||void 0===C||C.readBinary(g)}toJSON(g){var I;return{name:this.name,value:null===(I=this.__value)||void 0===I?void 0:I.toJSON()}}fromJSON(g,I){const C=new d;C.fromJSON(g.value),this.__value=C,g.name&&(this.name=g.name)}clone(){var g;return new Eg(this.name,null===(g=this.__value)||void 0===g?void 0:g.clone())}}t.register("Vec3Parameter",Eg),t.register("Property_Vec3_32f",Eg);class Tg extends yg{constructor(g="",I){super(g,I||new n,"Vec4")}readBinary(g,I){var C;null===(C=this.__value)||void 0===C||C.readBinary(g)}toJSON(g){var I;return{name:this.name,value:null===(I=this.__value)||void 0===I?void 0:I.toJSON()}}fromJSON(g,I){const C=new n;C.fromJSON(g.value),this.__value=C,g.name&&(this.name=g.name)}clone(){var g;return new Tg(this.name,null===(g=this.__value)||void 0===g?void 0:g.clone())}}t.register("Vec4Parameter",Tg),t.register("Property_Vec4_32f",Tg);class Dg extends yg{constructor(g="",I){super(g,I||new A,"Color")}readBinary(g,I){const C=g.loadRGBAFloat32Color();C.applyGamma(2.2),this.__value=C}toJSON(g){var I;return{value:null===(I=this.__value)||void 0===I?void 0:I.toJSON()}}fromJSON(g,I){var C;null===(C=this.__value)||void 0===C||C.fromJSON(g.value)}clone(){var g;return new Dg(this.name,null===(g=this.__value)||void 0===g?void 0:g.clone())}}t.register("ColorParameter",Dg),t.register("Property_Color_32f",Dg);class vg extends yg{constructor(g="",I){super(g,I||new R,"Quat")}readBinary(g,I){var C;null===(C=this.__value)||void 0===C||C.readBinary(g)}toJSON(g){var I;return{value:null===(I=this.__value)||void 0===I?void 0:I.toJSON()}}fromJSON(g,I){const C=new R;C.fromJSON(g.value),this.__value=C}clone(){var g;return new vg(this.name,null===(g=this.__value)||void 0===g?void 0:g.clone())}}t.register("QuatParameter",vg),t.register("Property_Quat_32f",vg);class Mg extends yg{constructor(g="",I){super(g,I||new a,"Mat3")}readBinary(g,I){var C;null===(C=this.__value)||void 0===C||C.readBinary(g)}toJSON(g){var I;return{value:null===(I=this.__value)||void 0===I?void 0:I.toJSON()}}fromJSON(g,I){const C=new a;C.fromJSON(g.value),this.__value=C}clone(){var g;return new Mg(this.name,null===(g=this.__value)||void 0===g?void 0:g.clone())}}t.register("Mat3Parameter",Mg),t.register("Property_Mat3_32f",Mg);class Hg extends yg{constructor(g="",I){super(g,I||new V,"Mat4")}readBinary(g,I){var C;null===(C=this.__value)||void 0===C||C.readBinary(g)}toJSON(g){var I;return{value:null===(I=this.__value)||void 0===I?void 0:I.toJSON()}}fromJSON(g,I){const C=new V;C.fromJSON(g.value),this.__value=C}clone(){var g;return new Hg(this.name,null===(g=this.__value)||void 0===g?void 0:g.clone())}}t.register("Mat4Parameter",Hg),t.register("Property_Mat4_32f",Hg);class Kg extends yg{constructor(g="",I){super(g,I||new o,"Xfo")}readBinary(g,I){this.__value.readBinary(g)}toJSON(g){return{name:this.name,value:this.__value.toJSON()}}fromJSON(g,I){const C=new o;C.fromJSON(g.value),this.__value=C,g.name&&(this.name=g.name)}clone(){return new Kg(this.name,this.__value.clone())}}t.register("XfoParameter",Kg),t.register("Property_Xfo_32f",Kg);class xg extends yg{constructor(g="",I){super(g,I,"BaseImage")}toJSON(g){const I={name:this.name};return this.__value&&(I.imageType=this.__value.getClassName(),I.value=this.__value.toJSON()),I}fromJSON(g,I){var C;g.imageType&&(this.__value=t.constructClass(g.imageType),g.value&&(null===(C=this.__value)||void 0===C||C.fromJSON(g.value,I)))}clone(){return new xg(this.name,this.__value)}}t.register("ImageParameter",xg);class wg extends yg{constructor(g="",I=""){super(g,I,"String"),this.multiLine=!1}setMultiLine(g){this.multiLine=g}getMultiLine(){return this.multiLine}readBinary(g,I){this.__value=g.loadStr()}toJSON(g){return{value:this.__value}}fromJSON(g,I){this.__value=g.value?g.value:"",this.emit("valueChanged",{mode:0})}clone(){return new wg(this.name,this.__value)}}t.register("StringParameter",wg),t.register("Property_String",wg);class zg extends yg{constructor(g="",I=[]){super(g,I,"String[]")}readBinary(g,I){this.__value=g.loadStrArray()}toJSON(g){return{value:this.__value}}fromJSON(g,I){this.__value=g.value,this.emit("valueChanged",{mode:0})}clone(){return new zg(this.name,this.__value)}}t.register("StringListParameter",zg),t.register("Property_StringList",zg);class fg extends yg{constructor(g="",I){super(g,[],I)}filter(g){return!0}getCount(){var g;return(null===(g=this.__value)||void 0===g?void 0:g.length)||0}getElement(g){if(this.__value)return this.__value[g]}setElement(g,I){this.__value||(this.__value=[]),this.__value[g]=I,this.emit("valueChanged")}addElement(g){if((g||0==g)&&this.filter(g))return this.__value||(this.__value=[]),this.__value.push(g),this.emit("elementAdded",{elem:g,index:this.__value.length-1}),this.emit("valueChanged"),g}removeElement(g){this.__value||(this.__value=[]);const I=this.__value[g];this.__value.splice(g,1),this.emit("elementRemoved",{elem:I,index:g}),this.emit("valueChanged")}insertElement(g,I){this.__value&&this.filter(I)&&(this.__value.splice(g,0,I),this.emit("elementAdded",{elem:I,index:g}),this.emit("valueChanged"))}toJSON(g){const I=[];if(this.__value)for(const C of this.__value)"string"==typeof this.dataType?I.push(C):I.push(C.toJSON(g));return{value:I}}fromJSON(g,I){if(null!=g.items){this.__value=[];for(let C=0;C<g.items.length;C++){let F;if("string"==typeof this.dataType)F=g.items[C];else{if(!this.dataType)throw"No DataType";F=t.constructClass(this.dataType),F.fromJSON(g.items[C],I)}this.__value.push(F),this.emit("elementAdded",{elem:F,index:this.__value.length-1})}this.emit("valueChanged",{mode:0})}else console.warn("Invalid Parameter JSON")}clone(){const g=this.__value?this.__value.slice(0):[];if(!this.dataType)throw"This parameter does not have a DataType";const I=new fg(this.name,this.dataType);return I.setValue(g),I}destroy(){if(this.__value)for(let g=0;g<this.__value.length;g++)this.__value[g]instanceof yg&&this.__value[g].destroy(),this.removeElement(g)}}class Lg extends yg{constructor(g){super(g,{},"Struct"),this.members=[]}addMember(g){return this.__value&&(this.__value[g.getName()]=g.value),g.on("valueChanged",(()=>{this.__value&&(this.__value[g.getName()]=g.value)})),this.members.push(g),this.emit("valueChanged"),g}getParameter(g){for(const I of this.members)if(I.getName()==g)return I}getMember(g){return this.getParameter(g)}getMemberNames(){const g=[];for(let I=0;I<this.members.length;I++){const C=this.members[I];null!=C&&(g[I]=C.getName())}return g}toJSON(g){const I={},C=[];for(const I of this.members)C.push(I.toJSON(g));return I.members=C,I.name=this.name,I}fromJSON(g,I){if(null!=g.members){for(let C=0;C<g.members.length;C++)g.members[C]&&this.members[C].fromJSON(g.members[C],I);this.name=g.name}else console.warn("Invalid Parameter JSON")}clone(){return new Lg(this.name)}destroy(){for(const g of this.members)g.destroy()}}t.register("StructParameter",Lg);class _g extends b{constructor(I,C=g.OperatorOutputMode.OP_WRITE){super(),this._op=null,this.__name=I,this._mode=C,this._param=void 0,this._paramBindIndex=-1,this.detached=!1}getName(){return this.__name}setOperator(g){this._op=g}getOperator(){return this._op}getMode(){return this._mode}isConnected(){return null!=this._param}getParam(){return this._param}setParam(g,I=-1){this._param&&this._param.unbindOperatorOutput(this),this._param=g,this._param&&(this._paramBindIndex=this._param.bindOperatorOutput(this,I)),this.emit("paramSet",{param:this._param})}getParamBindIndex(){return this._paramBindIndex}setParamBindIndex(g){this._paramBindIndex=g}setDirty(){this._param&&this._param.setDirty(this._paramBindIndex)}getValue(){if(this._param)return this._param.getValueFromOp(this._paramBindIndex);throw new Error("Cannot call getValue on OperatorOutput that is not connected:",this.__name)}backPropagateValue(g){return this._op&&(g=this._op.backPropagateValue(g)),g}setClean(g){this._param&&this._param.setCleanFromOp(g,this._paramBindIndex)}toJSON(g){const I=this._param?this._param.getPath():"";return{name:this.__name,paramPath:g&&g.makeRelative?g.makeRelative(I):I,paramBindIndex:this._paramBindIndex}}fromJSON(g,I){g.paramPath&&(null==I||I.resolvePath(g.paramPath,(I=>{this.setParam(I,g.paramBindIndex)}),(I=>{console.warn("OperatorOutput: '"+this.getName()+"'. Unable to connect to:"+g.paramPath)})))}detach(){this.detached=!0,this._paramBindIndex=this._param?this._param.unbindOperatorOutput(this):-1}reattach(){this.detached=!1,this._param&&(this._paramBindIndex=this._param.bindOperatorOutput(this,this._paramBindIndex))}rebind(){this._param&&(this._param.unbindOperatorOutput(this),this._paramBindIndex=this._param.bindOperatorOutput(this))}}class Og extends _g{}class jg extends _g{}class Pg extends _g{}class qg extends ag{constructor(g=""){super(g),this.__inputs=new Map,this.__outputs=new Map}setDirty(){this.__outputs.forEach((g=>g.setDirty()))}parameterValueChanged(g){super.parameterValueChanged(g),this.setDirty()}addInput(g){return g.setOperator(this),this.__inputs.set(g.getName(),g),this.setDirty(),g}removeInput(g){"string"==typeof g&&(g=this.getInput(g)),g.getParam()&&g.setParam(void 0),this.__inputs.delete(g.getName())}getNumInputs(){return this.__inputs.size}getInputByIndex(g){return Array.from(this.__inputs.values())[g]}getInput(g){const I=this.__inputs.get(g);if(!I)throw`Couldn't find an Input with the name of '${g}'`;return I}addOutput(g){return g.setOperator(this),this.__outputs.set(g.getName(),g),this.setDirty(),g}removeOutput(g){if("string"==typeof g&&(g=this.getOutput(g)),!(g instanceof _g))throw new Error("removeOutput only accepts string or OperatorInput");g.getParam()&&g.setParam(),this.__outputs.delete(g.getName())}getNumOutputs(){return this.__outputs.size}getOutputByIndex(g){return Array.from(this.__outputs.values())[g]}getOutput(g){const I=this.__outputs.get(g);if(!I)throw new Error(`Couldn't find an Output with the name of '${g}'`);return I}evaluate(){throw new Error("Not yet implemented")}backPropagateValue(g){return g}toJSON(g){const I=super.toJSON(g);I.type=this.getClassName();const C=[];this.__inputs.forEach((I=>{C.push(I.toJSON(g))})),I.inputs=C;const F=[];return this.__outputs.forEach((I=>{F.push(I.toJSON(g))})),I.outputs=F,I}fromJSON(g,I){super.fromJSON(g,I),g.inputs&&g.inputs.forEach(((g,C)=>{let F;g.name?(F=this.getInput(g.name),F||(F=this.addInput(g.name))):F=this.getInputByIndex(C),F.fromJSON(g,I)})),g.outputs&&g.outputs.forEach(((g,C)=>{let F;g.name?(F=this.getOutput(g.name),F||(F=this.addOutput(g.name))):F=this.getOutputByIndex(C),F.fromJSON(g,I)}))}detach(){this.__inputs.forEach((g=>g.detach())),this.__outputs.forEach((g=>g.detach()))}reattach(){this.__inputs.forEach((g=>g.reattach())),this.__outputs.forEach((g=>g.reattach()))}rebind(){this.__outputs.forEach((g=>g.rebind()))}}class $g extends b{constructor(g){super(),this.detached=!1,this.name=g}getName(){return this.name}setOperator(g){this._op=g}getOperator(){return this._op}isConnected(){return null!=this.param}getParam(){return this.param}paramValueChanged(){this._op&&this._op.setDirty()}setParam(g){this.param&&this.param.unbindOperatorInput(this),this.param=g,this.param&&this.param.bindOperatorInput(this),this.emit("paramSet",{param:this.param})}getValue(){if(this.param)return this.param.value;throw new Error("Unable to getValue")}setValue(g){this.param&&this.param.setValue(g)}setDirty(){this._op&&this._op.setDirty()}toJSON(g){const I=this.param?this.param.getPath():[],C=g&&g.makeRelative?g.makeRelative(I):I;return{name:this.name,paramPath:C}}fromJSON(g,I){g.paramPath&&(null==I||I.resolvePath(g.paramPath,(g=>{this.setParam(g)}),(()=>{console.warn("OperatorInput: '"+this.getName()+"'. Unable to connect to:"+g.paramPath)})))}detach(){this.param&&this.param.unbindOperatorInput(this)}reattach(){this.detached=!1,this.param&&this.param.bindOperatorInput(this)}}class gI extends $g{}class II extends qg{constructor(g,I){super("CalcGlobalXfoOperator"),this.parentGlobal=new gI("ParentGlobal"),this.localXfo=new gI("LocalXfo"),this.globalXfo=new jg("GlobalXfo"),this.localXfo.setParam(I),this.globalXfo.setParam(g),this.addInput(this.parentGlobal),this.addInput(this.localXfo),this.addOutput(this.globalXfo)}backPropagateValue(g){if(this.parentGlobal.isConnected()){const I=this.parentGlobal.getValue();this.localXfo.setValue(I.inverse().multiply(g))}else this.localXfo.setValue(g)}evaluate(){const g=this.localXfo.getValue();if(this.parentGlobal.isConnected()){const I=this.parentGlobal.getValue();this.globalXfo.setClean(I.multiply(g))}else this.globalXfo.setClean(g)}}t.register("CalcGlobalXfoOperator",II);class CI extends yg{constructor(g="",I){super(g,new r,"Box3"),this.treeItem=I,this.dirty=!0}setParameterAsDirty(){this.dirty=!0}setDirty(g){const I=super.setDirty(g);return I&&(this.dirty=!0),I}getValue(){return this.dirty&&(this.__value=this.treeItem._cleanBoundingBox(this.__value)),this.__value}toJSON(g){var I;return{value:null===(I=this.__value)||void 0===I?void 0:I.toJSON()}}fromJSON(g,I){var C;null===(C=this.__value)||void 0===C||C.fromJSON(g.value)}readBinary(g,I){throw new Error("Method not implemented.")}clone(){var g;const I=new CI(this.name,this.treeItem);return I.value=null===(g=this.__value)||void 0===g?void 0:g.clone(),I}}class FI extends ag{constructor(g){super(g),this.disableBoundingBox=!1,this.__childItems=[],this.__childItemsEventHandlers=[],this.__childItemsMapping={},this.globalXfoParam=new Kg("GlobalXfo",new o),this.localXfoParam=new Kg("LocalXfo",new o),this.boundingBoxParam=new CI("BoundingBox",this),this.visibleParam=new kg("Visible",!0),this.__highlightMapping={},this.__highlights=[],this.__visible=!0,this.__visibleCounter=1,this.addParameter(this.visibleParam),this.addParameter(this.localXfoParam),this.addParameter(this.globalXfoParam),this.addParameter(this.boundingBoxParam),this.globalXfoOp=new II(this.globalXfoParam,this.localXfoParam),this.globalXfoParam.on("valueChanged",(g=>{this.setBoundingBoxDirty(),this.emit("globalXfoChanged",g)})),this.visibleParam.on("valueChanged",(()=>{this.__visibleCounter+=this.visibleParam.value?1:-1,this.updateVisibility()}))}setOwner(g){if(this.__ownerItem){const g=this.__ownerItem;if(g&&g instanceof FI){g.isVisible()||this.__visibleCounter++;const I=g.getChildIndex(this);I>=0&&g.unbindChild(I,this)}}if(super.setOwner(g),this.__ownerItem){const g=this.__ownerItem;g&&(g.isVisible()||this.__visibleCounter--,this.globalXfoOp.getInput("ParentGlobal").setParam(g.globalXfoParam))}else this.globalXfoOp.getInput("ParentGlobal").setParam(void 0);this.updateVisibility()}updatePath(){super.updatePath();for(const g of this.__childItems)g&&g.updatePath()}getParentItem(){return this.getOwner()}setParentItem(g){this.setOwner(g)}isVisible(){return this.__visibleCounter>0}setVisible(g){this.visibleParam.value=g}propagateVisibility(g){this.__visibleCounter+=g,this.updateVisibility()}updateVisibility(){const g=this.__visibleCounter>0;if(g!=this.__visible){this.__visible=g;for(const g of this.__childItems)g.propagateVisibility(this.__visible?1:-1);this.emit("visibilityChanged",{visible:g});const I=this.__ownerItem;return I&&I instanceof FI&&I.setBoundingBoxDirty(),!0}return!1}addHighlight(g,I,C=!1){if(g in this.__highlightMapping)if(this.__highlights[this.__highlights.length-1]!=g){const C=this.__highlights.indexOf(g);this.__highlights.splice(C,1),this.__highlights.push(g),this.emit("highlightChanged",{name:g,color:I})}else this.__highlightMapping[g].isEqual(I)||(this.__highlightMapping[g]=I,this.emit("highlightChanged",{name:g,color:I}));else this.__highlights.push(g),this.__highlightMapping[g]=I,this.emit("highlightChanged",{name:g,color:I});C&&this.__childItems.forEach((F=>{F.addHighlight(g,I,C)}))}removeHighlight(g,I=!1){if(g in this.__highlightMapping){if(this.__highlights[this.__highlights.length-1]==g)if(this.__highlights.pop(),delete this.__highlightMapping[g],this.__highlights.length>0){const g=this.__highlights[this.__highlights.length-1],I=this.__highlightMapping[g];this.emit("highlightChanged",{name:g,color:I})}else this.emit("highlightChanged");else{const I=this.__highlights.indexOf(g);this.__highlights.splice(I,1),delete this.__highlightMapping[g],this.emit("highlightChanged")}I&&this.__childItems.forEach((C=>{C.removeHighlight(g,I)}))}}getHighlight(){if(!(this.__highlights.length>0))throw Error("highlight length > 0");return this.__highlightMapping[this.__highlights[this.__highlights.length-1]]}isHighlighted(){return this.__highlights.length>0}_cleanBoundingBox(g){return g.reset(),this.__childItems.forEach((I=>{if(I.isVisible()){const C=I.boundingBoxParam.value;C&&g.addBox3(C)}})),g}childBBoxChanged(){this.setBoundingBoxDirty()}setBoundingBoxDirty(){this.boundingBoxParam&&this.boundingBoxParam.setDirty(-1);const g=this.__ownerItem;g&&g instanceof FI&&g.setBoundingBoxDirty()}getChildren(){return this.__childItems}getNumChildren(){return this.__childItems.length}generateUniqueName(g){if(!(g in this.__childItemsMapping))return g;let I=1;g.length>4&&!Number.isNaN(parseInt(g.substring(g.length-4)))?I=parseInt(g.substr(g.length-4)):g.length>3&&!Number.isNaN(parseInt(g.substring(g.length-3)))?I=parseInt(g.substr(g.length-3)):g.length>2&&!Number.isNaN(parseInt(g.substring(g.length-2)))&&(I=parseInt(g.substr(g.length-2)));const C=[];for(const g of this.__childItems)g&&C.push(g.getName());let F=g;for(;;){let U=""+I;for(;U.length<2;)U="0"+U;if(F=g+U,!C.includes(F))break;I++}return F}updateChildNameMapping(g){for(let I=g;I<this.__childItems.length;I++)this.__childItemsMapping[this.__childItems[I].getName()]=I}childNameChanged(g){const I=this.__childItemsMapping[g.oldName];delete this.__childItemsMapping[g.oldName],this.__childItemsMapping[g.newName]=I}insertChild(g,I,C=!1,F=!0){if(g.getName()in this.__childItemsMapping){if(!F)throw new Error("Item '"+g.getName()+"' is already a child of :"+this.getPath());g.setName(this.generateUniqueName(g.getName()))}if(!(g instanceof FI))throw new Error("Object is is not a tree item :"+g);const U={};if(U.nameChanged=g.on("nameChanged",(g=>{this.childNameChanged(g)})),C){const I=this.globalXfoParam.value,C=g.globalXfoParam.value,F=I.inverse().multiply(C);g.localXfoParam.value=F}return this.setBoundingBoxDirty(),this.__highlights.forEach((I=>{const C=this.__highlightMapping[I];g.addHighlight(I,C,!0)})),this.__childItems.splice(I,0,g),this.__childItemsEventHandlers.splice(I,0,U),this.__childItemsMapping[g.getName()]=I,this.updateChildNameMapping(I),g.setOwner(this),this.emit("childAdded",new Qg(I,g)),g}addChild(g,I=!0,C=!0){const F=this.__childItems.length;return this.insertChild(g,F,I,C),g}getChild(g){return this.__childItems[g]}getChildByName(g){const I=this.__childItemsMapping[g];return null!=I?this.__childItems[I]:null}getChildNames(){const g=[];for(let I=0;I<this.__childItems.length;I++){const C=this.__childItems[I];null!=C&&(g[I]=C.getName())}return g}unbindChild(g,I){const C=this.__childItemsEventHandlers[g];for(const g in C)I.removeListenerById(g,C[g]);this.__childItems.splice(g,1),this.__childItemsEventHandlers.splice(g,1),delete this.__childItemsMapping[I.getName()],this.updateChildNameMapping(g),this.setBoundingBoxDirty(),this.emit("childRemoved",{childItem:I,index:g})}removeChild(g){const I=this.__childItems[g];I&&(this.unbindChild(g,I),I.setOwner(void 0))}removeChildByName(g){const I=this.__childItemsMapping[g];if(null!=I)return this.removeChild(I)}removeChildByHandle(g){const I=this.__childItems.indexOf(g);if(-1==I)throw new Error("Error in removeChildByHandle. Child not found:"+g.getName());this.removeChild(I)}removeAllChildren(){let g=this.__childItems.length;for(;g--;)this.removeChild(g);this.setBoundingBoxDirty()}getChildIndex(g){return this.__childItems.indexOf(g)}resolvePath(g,I=0,C=!1){if("string"==typeof g&&(g=g.split("/")),0==I)if("."==g[0]||g[0]==this.__name)I++;else if(".."==g[0]){if(this.__ownerItem)return this.__ownerItem.resolvePath(g,I+1);if(C)throw Error("this.__ownerItem is undefined");console.warn("this.__ownerItem is undefined")}if(I==g.length)return this;const F=g[I],U=this.getChildByName(F);if(null==U){const C=this.getParameter(g[I]);if(C)return C;throw new Error(`Unable to resolve path : [${g.toString()}] after: ${this.getName()} \nNo child or parameter called : "${g[I]}"`)}return U.resolvePath(g,I+1)}traverse(g,I=!0){const C=(g,I)=>{const C=g.getChildren();for(const g of C)g&&g instanceof FI&&F(g,I+1)},F=(I,F)=>{0!=g(I,F)&&I instanceof FI&&C(I,F)};I?F(this,1):C(this,0)}onPointerDown(g){this.emit("pointerDown",g);const I=this.__ownerItem;g.propagating&&I&&I.onPointerDown(g)}onPointerUp(g){this.emit("pointerUp",g);const I=this.__ownerItem;g.propagating&&I&&I.onPointerUp(g)}onPointerMove(g){this.emit("pointerMove",g);const I=this.__ownerItem;g.propagating&&I&&I.onPointerMove(g)}onPointerEnter(g){this.emit("pointerEnter",g);const I=this.__ownerItem;g.propagating&&I&&I.onPointerEnter(g)}onPointerLeave(g){this.emit("pointerLeave",g);const I=this.__ownerItem;g.propagating&&I&&I.onPointerLeave(g)}onWheel(g){this.emit("mouseWheel",g);const I=this.__ownerItem;g.propagating&&I&&I.onWheel(g)}onTouchCancel(g){this.emit("touchCancel",g);const I=this.__ownerItem;g.propagating&&I&&I.onTouchCancel(g)}toJSON(g){let I=super.toJSON(g);const C={};for(const I of this.__childItems)if(I){const F=I.toJSON(g);F&&(C[I.getName()]=F)}return Object.keys(C).length>0&&(I?I.children=C:I={name:this.__name,children:C}),I}fromJSON(g,I,C){if(super.fromJSON(g,I),I&&!Number.isNaN(I.numTreeItems)&&I.numTreeItems++,null!=g.children){const C=g.children;if(Array.isArray(C))for(const g of C){let C=this.getChildByName(g.name);C?C.fromJSON(g,I):g.type&&(C=t.constructClass(g.type),C&&(C.fromJSON(g,I),this.addChild(C,!1,!1)))}else for(const g in C){const F=C[g];let U=this.getChildByName(g);U?U.fromJSON(F,I):F.type&&(U=t.constructClass(F.type),U&&(U.fromJSON(F,I),this.addChild(U,!1,!1)))}}}readBinary(g,I){super.readBinary(g,I),I.numTreeItems++;const C=g.loadUInt8();this.setVisible(0!=(2&C));if(4&C){const I=new o;if(I.tr=g.loadFloat32Vec3(),I.ori=g.loadFloat32Quat(),32&C)I.sc=g.loadFloat32Vec3();else{const C=g.loadFloat32();I.sc.set(C,C,C)}this.localXfoParam.value=I}8&C&&this.boundingBoxParam.loadValue(new r(g.loadFloat32Vec3(),g.loadFloat32Vec3()));const F=g.loadUInt32();if(F>0){const C=g.loadUInt32Array(F);for(let U=0;U<F;U++)try{g.seek(C[U]);let F=g.loadStr();const l=t.constructClass(F);if(!l){const I=g.loadStr();console.warn("Unable to construct child:"+I+" of type:"+F);continue}g.seek(C[U]),l.readBinary(g,I),this.addChild(l,!1,!0)}catch(g){console.warn("Error loading tree item: ",g)}}}clone(g){const I=new FI("");return I.copyFrom(this,g),I}copyFrom(g,I){super.copyFrom(g,I),g.getChildren().forEach((g=>{g&&this.addChild(g.clone(),!1,!1)}))}}t.register("TreeItem",FI);class UI extends yg{constructor(g="",I){super(g,void 0,"TreeItem"),this.listenerIDs={},this.owner=new FI(""),this.filterFn=I}emitTreeItemGlobalXfoChanged(g){this.emit("treeItemGlobalXfoChanged",g)}setOwner(g){this.owner=g}getOwner(){return this.owner}setFilterFn(g){this.filterFn=g}getFilterFn(){return this.filterFn}setValue(g){this.filterFn&&!this.filterFn(g)||this.__value!==g&&(this.__value&&this.__value.removeListenerById("globalXfoChanged",this.listenerIDs.globalXfoChanged),this.__value=g,this.__value&&(this.listenerIDs.globalXfoChanged=this.__value.on("globalXfoChanged",(g=>{this.emitTreeItemGlobalXfoChanged(g)}))),this.emit("valueChanged"))}toJSON(g){var I;return{value:g.makeRelative(null===(I=this.__value)||void 0===I?void 0:I.getPath())}}fromJSON(g,I){null!=g.value?I.resolvePath(g.value,(g=>{this.setValue(g)}),(()=>{console.warn("Unable to resolve tree item parameter value:"+g.paramPath)})):console.warn("Invalid Parameter JSON")}clone(g){const I=new UI(this.name,this.filterFn);return this.__value&&I.setValue(this.__value.clone(g)),I}}t.register("TreeItemParameter",UI);class lI extends G{constructor(g,I){super(),this.index=I,this.item=g}}class tI extends yg{constructor(g="",I){super(g,new Set,"TreeItem"),this.filterFn=I}setFilterFn(g){this.filterFn=g}getFilterFn(){return this.filterFn}getItem(g){return Array.from(this.__value)[g]}addItem(g,I=!0){if(this.filterFn&&!this.filterFn(g))return void console.warn("ItemSet __filterFn rejecting item:",g.getPath());this.__value.add(g);const C=Array.from(this.__value).indexOf(g);return this.emit("itemAdded",new lI(g,C)),I&&this.emit("valueChanged"),C}addItems(g,I=!0){g.forEach((g=>this.addItem(g,!1))),I&&this.emit("valueChanged")}removeItem(g,I=!0){const C=Array.from(this.__value)[g];return this.__value.delete(C),this.emit("itemRemoved",new lI(C,g)),I&&this.emit("valueChanged"),C}setItems(g,I=!0){const C=Array.from(this.__value);for(let I=C.length-1;I>=0;I--){const F=C[I];g.has(F)||this.removeItem(I,!1)}for(const I of g)this.__value.has(I)||this.addItem(I,!1);I&&this.emit("valueChanged")}clearItems(g=!0){this.__value.clear(),g&&this.emit("valueChanged")}getNumItems(){return this.__value.size}toJSON(g){this.__value||(this.__value=new Set);const I=[];if(g)for(const g of this.__value)I.push(g.getPath());return{value:I}}fromJSON(g,I){if(I)for(const C in g.value){const g=I.resolvePath(C);this.__value.add(g)}}clone(){return new tI(this.name,this.filterFn)}}class eI extends yg{constructor(g="",I){super(g,I,"Geometry"),this.listenerIDs={},I&&this.setValue(I)}emitBoundingBoxDirtied(g){this.emit("boundingBoxChanged",g)}setValue(g){this.__value!==g&&(this.__value&&this.__value.removeListenerById("boundingBoxChanged",this.listenerIDs.boundingBoxChanged),this.__value=g,this.__value&&(this.listenerIDs.boundingBoxChanged=this.__value.on("boundingBoxChanged",(g=>{this.emitBoundingBoxDirtied(g)}))),this.emit("valueChanged"))}loadValue(g){this.__value&&this.__value.removeListenerById("boundingBoxChanged",this.listenerIDs.boundingBoxChanged),this.__value=g,this.__value&&(this.listenerIDs.boundingBoxChanged=this.__value.on("boundingBoxChanged",(g=>{this.emitBoundingBoxDirtied(g)})))}toJSON(g){var I;return{name:this.name,value:null===(I=this.__value)||void 0===I?void 0:I.toJSON(g)}}fromJSON(g,I){g.name&&(this.name=g.name);const C=t.constructClass(g.value.type);C.fromJSON(g.value,I),this.__value=C}clone(){return new eI(this.name,this.__value)}}t.register("GeometryParameter",eI);class QI extends yg{constructor(g=""){super(g,"","FilePath")}getFilename(){if(!this.__value)throw"No file value";return this.__value.lastIndexOf("/")>-1?this.__value.substring(this.__value.lastIndexOf("/")+1):""}getExt(){const g=this.getFilename(),I=g.lastIndexOf(".");if(-1!=I)return g.substring(I).toLowerCase()}getStem(){const g=this.getFilename();if(g){const I=g.split(".");return 2==I.length?I[0]:g}return null}setValue(g){if(!g)throw new Error("Invalid value for setValue.");g!=this.__value&&(this.__value=g,this.emit("valueChanged"))}toJSON(g){return{value:this.__value}}fromJSON(g,I){g.value&&(this.__value=g.value)}clone(){const g=new QI(this.name);return this.__value&&g.setValue(this.__value),g}}t.register("FilePathParameter",QI);class dI extends ag{constructor(g){super(g),this.width=0,this.height=0,this.format="RGB",this.type="UNSIGNED_BYTE",this.loaded=!1,this.mipMapped=!0,this.wrapS="REPEAT",this.wrapT="REPEAT",this.minFilter="LINEAR",this.magFilter="LINEAR",this.on("parameterValueChanged",(()=>{this.emit("updated")}))}isLoaded(){return this.loaded}getParams(){return{type:this.type,format:this.format,width:this.width,height:this.height,wrapS:this.wrapS,wrapT:this.wrapT,minFilter:this.minFilter,magFilter:this.magFilter,mipMapped:this.mipMapped}}}class nI extends Xg{constructor(g="",I,C){super(g,I,C)}toJSON(g){return super.toJSON(g)}getImage(){return this.image}setImage(g){const I=()=>{this.emit("textureDisconnected")};g?(null!=this.image&&this.image!==g&&I(),this.image=g,this.emit("textureConnected"),this.emit("valueChanged",{mode:0})):null!=this.image&&(I(),this.image=void 0,this.emit("textureDisconnected"))}setValue(g){g instanceof dI?this.setImage(g):super.setValue(g)}readBinary(g,I){super.readBinary(g,I);const C=g.loadStr();""!=C&&(console.log("Load Texture"),this.setImage(I.assetItem.materialLibrary.getImage(C)))}clone(){return new nI(this.name,this.__value,this.range)}}t.register("MaterialFloatParam",nI);class iI extends Dg{constructor(g,I){super(g,I),this.listenerIDs={}}getImage(){return this.image}imageUpdated(){this.emit("valueChanged")}setImage(g){const I=()=>{this.image&&(this.image.removeListenerById("loaded",this.listenerIDs.loaded),this.image.removeListenerById("updated",this.listenerIDs.updated),this.image=void 0),this.emit("textureDisconnected")};g?(null!=this.image&&this.image!==g&&I(),this.image=g,this.listenerIDs.updated=this.image.on("updated",(()=>{this.imageUpdated()})),this.emit("textureConnected"),this.emit("valueChanged")):null!=this.image&&(I(),this.image=void 0,this.emit("textureDisconnected"))}setValue(g){g instanceof dI?this.setImage(g):super.setValue(g)}readBinary(g,I){super.readBinary(g,I);const C=g.loadStr();""!=C&&this.setImage(I.assetItem.materialLibrary.getImage(C))}clone(){var g;return new iI(this.name,null===(g=this.__value)||void 0===g?void 0:g.clone())}}t.register("MaterialColorParam",iI);class AI extends ag{constructor(g,I){super(g),this.__isTransparent=!1,this.__isTextured=!1,this.__shaderName="",I&&this.setShaderName(I)}getShaderName(){return this.__shaderName}setShaderName(g){if(this.__shaderName==g)return;this.__shaderName=g;const I=t.getClassDefinition(g).getMaterialTemplate();if(!I)throw new Error("Error setting Shader. Material template not registered found:"+g);const C={};let F=I.getNumParameters();for(;F--;){const g=I.getParameterByIndex(F);this.getParameter(g.getName())||this.addParameter(g.clone()),C[g.getName()]=!0}for(const g of this.params)C[g.getName()]||this.removeParameter(g.getName());this.__shaderName=g,this.__checkTransparency({});const U=new x(g);this.emit("shaderNameChanged",U)}removeAllTextures(){for(const g of this.params)g instanceof iI?g.getImage()&&g.setImage(null):g instanceof nI&&g.getImage()&&g.setImage(null)}getParamTextures(){const g={};for(const I of this.params)I instanceof iI?I.getImage()&&(g[I.getName()]=I.getImage()):I instanceof nI&&I.getImage()&&(g[I.getName()]=I.getImage());return g}isTransparent(){return this.__isTransparent}__checkTransparency(g){let I=!1;try{this.getShaderClass().isTransparent()&&(I=!0)}catch(g){}if(!I){const g=this.getParameter("Opacity");if(g&&(g.value<.99||g instanceof nI&&g.getImage()))I=!0;else{const g=this.getParameter("BaseColor");if(g){if(g instanceof iI){const C=g.getImage();C&&"RGBA"==C.format&&(I=!0)}if(!I&&g.value){g.value.a<1&&(I=!0)}}}}if(I!=this.__isTransparent){this.__isTransparent=I;const g=new L(I);this.emit("transparencyChanged",g)}}isTextured(){return this.__isTextured}__checkTextures(g){const I=g||{};let C=!1;for(const g of this.params)if(g instanceof iI){if(g.getImage()){C=!0;break}}else if(g instanceof nI&&g.getImage()){C=!0;break}if(C!=this.__isTextured){this.__isTextured=C;let g=new f(C,I);this.emit("texturedChanged",g)}}parameterValueChanged(g){this.__checkTransparency(g),this.__checkTextures(g),super.parameterValueChanged(g)}getShaderClass(){return t.getClassDefinition(this.getShaderName())}toJSON(g){const I=super.toJSON(g);return I.shader=this.__shaderName,I}fromJSON(g,I={}){g.shader?(this.setShaderName(g.shader),super.fromJSON(g,I)):console.warn("Invalid Material JSON")}readBinary(g,I){let C=g.loadStr();if("StandardMaterial"==C&&(C="StandardSurfaceShader"),"TransparentMaterial"==C&&(C="StandardSurfaceShader"),this.setShaderName(C),I.versions["zea-engine"].compare([0,0,3])<0)throw`Loading zcad files of version ${I.versions["zea-engine"]} is not longer support`;super.readBinary(g,I),this.__checkTransparency(),this.__checkTextures()}clone(g){const I=new AI("clone","");return I.copyFrom(this,g),I}copyFrom(g,I){this.setShaderName(g.getShaderName()),super.copyFrom(g,I)}}t.register("Material",AI);class BI extends yg{constructor(g="",I){super(g,I,"Material"),this.listenerIDs={},I&&this.setValue(I)}valueParameterValueChanged(g){this.emit("valueParameterValueChanged",g)}setValue(g){this.__value!==g&&(this.__value&&this.__value.removeListenerById("parameterValueChanged",this.listenerIDs.parameterValueChanged),this.__value=g,this.__value&&(this.listenerIDs.parameterValueChanged=this.__value.on("parameterValueChanged",(g=>{this.valueParameterValueChanged(g)}))),this.emit("valueChanged"))}loadValue(g){this.__value&&this.__value.removeListenerById("parameterValueChanged",this.listenerIDs.parameterValueChanged),this.__value=g,this.__value&&(this.listenerIDs.parameterValueChanged=this.__value.on("parameterValueChanged",(g=>{this.valueParameterValueChanged(g)})))}toJSON(g){let I={};return I.name=this.name,this.__value&&(I={value:g&&g.onlyPath?this.__value.getPath():this.__value.toJSON(g)}),I}fromJSON(g,I){if(null!=g.value)if(g.value instanceof Array||g.value instanceof String){if(I&&I.assetItem){const C=I.assetItem.getMaterialLibrary().getMaterial(g.value instanceof Array?g.value[1]:g.value);C&&this.loadValue(C)}}else{const C=new AI;g.value&&C.fromJSON(g.value,I),this.loadValue(C)}else console.warn("Invalid Parameter JSON")}clone(){return new BI(this.name,this.__value)}}function aI(g,I){return!g.some(((g,C)=>Math.abs(I[C]-g)>.001))}t.register("MaterialParameter",BI);class VI extends J{constructor(g,I){super(),this.data=new Float32Array(0),this.dataTypeName=g,this.stride=I,this.initRange(0),this.splits={},this.splitValues=[]}setMesh(g){this.mesh=g}asArray(){return this.data}getDataTypeName(){return this.dataTypeName}getCount(){return this.data.length/this.stride}setCount(g){const I=this.data.length,C=g*this.stride;if(C>I){const g=new Float32Array(C);g.set(this.data,0),this.data=g,this.initRange(I)}else C<I&&(this.data=this.data.slice(0,C));this.splits={},this.splitValues=[]}initRange(g){for(let I=g;I<this.data.length;I++)this.data[I]=Number.NaN}get numElements(){return this.stride}getFloat32Value(g){return this.data[g]}setFloat32Value(g,I){this.data[g]=I}getSplits(){return this.splits}getFaceVertexValueRef_array(g,I){const C=this.mesh.getFaceVertexIndex(g,I);return C in this.splits&&g in this.splits[C]?this.splitValues[this.splits[C][g]]:this.data.subarray(C*this.stride,(C+1)*this.stride)}setFaceVertexValue_array(g,I,C){const F=this.mesh.getFaceVertexIndex(g,I);this.setFaceVertexValue_ByVertexIndex(g,F,C)}setFaceVertexValue_ByVertexIndex(g,I,C){const F=this.data.subarray(I*this.stride,(I+1)*this.stride);if(function(g){for(let I=0;I<g.length;I++)if(!Number.isNaN(g[I]))return!0;return!1}(F))if(aI(F,C));else{if(I in this.splits){const F=this.splits[I];for(const I in F){const U=F[I];if(aI(this.splitValues[U],C))return void(F[g]=U)}if(g in this.splits[I])return void(this.splitValues[this.splits[I][g]]=C)}else this.splits[I]={};this.splits[I][g]=this.splitValues.length,this.splitValues.push(C)}else F.set(C)}setSplitVertexValue_array(g,I,C){if(g in this.splits||(this.splits[g]={}),I in this.splits[g]){if(aI(this.splitValues[this.splits[g][I]],C))return;console.warn("Face Vertex Already Split with different value")}this.splits[g][I]=this.splitValues.length,this.splitValues.push(C)}setSplitVertexValues(g,I,C){g in this.splits||(this.splits[g]={});const F=this.splitValues.length;this.splitValues.push(C);for(const C of I)this.splits[g][C]=F}generateSplitValues(g,I){if(0==I)return this.data;const C=this.getCount(),F=new Float32Array((C+I)*this.stride);F.set(this.data);for(const I in g){const U=g[I];for(const g in U){const l=C+U[g];if(I in this.splits&&g in this.splits[I]){const C=this.splits[I][g];this.splitValues[C].forEach(((g,I)=>{F[l*this.stride+I]=g}))}else{const g=parseInt(I);for(let I=0;I<this.stride;I++)F[l*this.stride+I]=this.data[g*this.stride+I]}}}return F}toJSON(g){return{data:this.data,dataType:this.dataTypeName,length:this.data.length/this.stride}}fromJSON(g){const I=g.data.map((g=>s.isNumeric(g)?g:Number.POSITIVE_INFINITY));this.data=Float32Array.from(I)}loadSplitValues(g){const I=g.loadUInt32Array();if(0==I.length)return;let C=0,F=0;for(;;){const g=I[C++],U=I[C++],l={};for(let g=0;g<U;g++){const g=I[C++],U=I[C++];l[g]=U,U>=F&&(F=U+1)}if(this.splits[g]=l,C>=I.length)break}const U=this.stride,l=g.loadFloat32Array(F*U);this.splitValues=[];for(let g=0;g<F;g++){const I=l.slice(g*U,g*U+U);this.splitValues.push(I)}}toString(){return JSON.stringify(this.toJSON(),null,2)}genBuffer(){return{values:this.data,count:this.getCount(),dataType:this.dataTypeName,normalized:this.normalized}}}class RI extends VI{constructor(){super("Vec3",3),this.normalized=!1}getValueRef(g){if(g>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+g+". Num Vertices:"+this.data.length/3);const I=g*this.stride,C=this.data.subarray(I,I+this.stride);return new d(C)}getValue(g){if(g>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+g+". Num Vertices:"+this.data.length/3);const I=g*this.stride,C=this.data.slice(I,I+this.stride);return new d(C)}setValue(g,I){if(g>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+g+". Num Vertices:"+this.data.length/3);const C=g*this.stride;this.data.set(I.asArray(),C)}getFaceVertexValueRef(g,I){const C=this.getFaceVertexValueRef_array(g,I);return new d(C)}setFaceVertexValue(g,I,C){this.setFaceVertexValue_array(g,I,C.asArray())}setSplitVertexValue(g,I,C){this.setSplitVertexValue_array(g,I,C.asArray())}}t.register("Vec3Attribute",RI);class sI extends VI{constructor(){super("Vec2",2),this.normalized=!1}getValueRef(g){if(g>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+g+". Num Vertices:"+this.data.length/3);const I=g*this.stride,C=this.data.subarray(I,I+this.stride);return new Q(C)}getValue(g){if(g>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+g+". Num Vertices:"+this.data.length/3);const I=g*this.stride,C=this.data.slice(I,I+this.stride);return new Q(C)}setValue(g,I){if(g>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+g+". Num Vertices:"+this.data.length/3);const C=g*this.stride;this.data.set(I.asArray(),C)}getFaceVertexValueRef(g,I){const C=this.getFaceVertexValueRef_array(g,I);return new Q(C)}setFaceVertexValue(g,I,C){this.setFaceVertexValue_array(g,I,C.asArray())}setSplitVertexValue(g,I,C){this.setSplitVertexValue_array(g,I,C.asArray())}}t.register("Vec2Attribute",sI);class ZI extends ig{constructor(){super(),this.__boundingBox=new r,this.__boundingBoxDirty=!0,this.__metaData=new Map,this.__name="",this.__numVertices=0,this.__vertexAttributes=new Map,this.debugColor=new A(1,0,0,1),this.name="",this.addVertexAttribute("positions",new RI)}clear(){this.setNumVertices(0)}setDebugName(g){this.name=g}addVertexAttribute(g,I){I.setCount(this.__numVertices),this.__vertexAttributes.set(g,I)}hasVertexAttribute(g){return this.__vertexAttributes.has(g)}getVertexAttribute(g){return this.__vertexAttributes.get(g)}getVertexAttributes(){const g={};for(const[I,C]of this.__vertexAttributes.entries())g[I]=C;return g}get positions(){return this.__vertexAttributes.get("positions")}numVertices(){return this.__numVertices}getNumVertices(){return this.__numVertices}setNumVertices(g){this.__numVertices=g,this.__vertexAttributes.forEach((g=>g.setCount(this.__numVertices))),this.setBoundingBoxDirty()}getBoundingBox(){return this.__boundingBoxDirty&&this.updateBoundingBox(),this.__boundingBox}setBoundingBoxDirty(){this.__boundingBoxDirty=!0,this.emit("boundingBoxChanged")}updateBoundingBox(){const g=this.positions,I=new r;if(g){const C=g.getCount();for(let F=0;F<C;F++)I.addPoint(g.getValueRef(F))}this.__boundingBox=I,this.__boundingBoxDirty=!1}getMetadata(g){return this.__metaData.get(g)}hasMetadata(g){return this.__metaData.has(g)}setMetadata(g,I){this.__metaData.set(g,I)}deleteMetadata(g){this.__metaData.delete(g)}genBuffers(g){const I={};for(const[g,C]of this.__vertexAttributes)I[g]=C.genBuffer();return{numVertices:this.numVertices(),attrBuffers:I}}loadBaseGeomBinary(g){this.name=g.loadStr();const I=g.loadUInt8();this.debugColor=g.loadRGBFloat32Color();const C=g.loadUInt32();this.__boundingBox.set(g.loadFloat32Vec3(),g.loadFloat32Vec3()),this.setNumVertices(C);const F=this.positions;let U,l;2&I&&(U=this.getVertexAttribute("normals"),U||(U=new RI,this.addVertexAttribute("normals",U))),4&I&&(l=this.getVertexAttribute("texCoords"),l||(l=new sI,this.addVertexAttribute("texCoords",l)));const t=(g,I,C,U)=>{for(let l=g[0];l<g[1];l++){const g=new d(U[3*l+0]/255,U[3*l+1]/255,U[3*l+2]/255);g.multiplyInPlace(C),g.addInPlace(I),F&&F.setValue(l,g)}},e=(g,I,C,F)=>{C.isNull()&&C.set(1,1,1);for(let l=g[0];l<g[1];l++){const g=new d(F[3*l+0]/255,F[3*l+1]/255,F[3*l+2]/255);g.multiplyInPlace(C),g.addInPlace(I),g.normalizeInPlace(),U.setValue(l,g)}},n=(g,I,C,F)=>{for(let U=g[0];U<g[1];U++){const g=new Q(F[2*U+0]/255,F[2*U+1]/255);g.multiplyInPlace(C),g.addInPlace(I),l.setValue(U,g)}},i=g.loadUInt32();if(1==i){{const I=this.__boundingBox,F=g.loadUInt8Array(3*C);t([0,C],I.p0,I.diagonal(),F)}if(U){const I=new r(g.loadFloat32Vec3(),g.loadFloat32Vec3()),F=g.loadUInt8Array(3*C);e([0,C],I.p0,I.diagonal(),F),U.loadSplitValues(g)}if(l){const I=new h(g.loadFloat32Vec2(),g.loadFloat32Vec2()),F=g.loadUInt8Array(2*C);n([0,C],I.p0,I.diagonal(),F),l.loadSplitValues(g)}}else{const I=[];let F=0;for(let C=0;C<i;C++){const C=g.loadUInt32(),t={range:[F,F+C],bbox:new r(g.loadFloat32Vec3(),g.loadFloat32Vec3()),normalsRange:new r,texCoordsRange:new h};U&&t.normalsRange.set(g.loadFloat32Vec3(),g.loadFloat32Vec3()),l&&t.texCoordsRange.set(g.loadFloat32Vec2(),g.loadFloat32Vec2()),I.push(t),F+=C}const Q=g.loadUInt8Array(3*C);let d=null,A=null;U&&(d=g.loadUInt8Array(3*C)),l&&(A=g.loadUInt8Array(2*C));for(let g=0;g<i;g++){{const C=I[g].bbox;t(I[g].range,C.p0,C.diagonal(),Q)}if(U){const C=I[g].normalsRange;e(I[g].range,C.p0,C.diagonal(),d)}if(l){const C=I[g].texCoordsRange;n(I[g].range,C.p0,C.diagonal(),A)}}U&&U.loadSplitValues(g),l&&l.loadSplitValues(g)}}toJSON(g){const I=super.toJSON(g);g&&g.skipTopology||(I.numVertices=this.__numVertices||0);const C={};for(const[I,F]of this.__vertexAttributes.entries())g&&"skipAttributes"in g&&g.skipAttributes.includes(I)||(C[I]=F.toJSON(g));return I.vertexAttributes=C,I}fromJSON(g,I){this.clear(),super.fromJSON(g,I),this.setNumVertices(g.numVertices);for(const I in g.vertexAttributes){let C=this.__vertexAttributes.get(I);const F=g.vertexAttributes[I];C?C.fromJSON(F):console.warn("attr undefined, cannot execute fromJSON()")}this.emit("geomDataTopologyChanged")}toString(){return JSON.stringify(this.toJSON(),null,2)}}class oI extends VI{constructor(){super("Vec4",4),this.normalized=!1}getValueRef(g){if(g>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+g+". Num Vertices:"+this.data.length/3);const I=g*this.stride,C=this.data.subarray(I,I+this.stride);return new n(C)}getValue(g){if(g>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+g+". Num Vertices:"+this.data.length/3);const I=g*this.stride,C=this.data.slice(I,I+this.stride);return new n(C)}setValue(g,I){if(g>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+g+". Num Vertices:"+this.data.length/3);const C=g*this.stride;this.data.set(I.asArray(),C)}getFaceVertexValueRef(g,I){const C=this.getFaceVertexValueRef_array(g,I);return new n(C)}setFaceVertexValue(g,I,C){this.setFaceVertexValue_array(g,I,C.asArray())}setSplitVertexValue(g,I,C){this.setSplitVertexValue_array(g,I,C.asArray())}}t.register("Vec4Attribute",oI);class hI extends VI{constructor(){super("Color",4),this.normalized=!1}getValueRef(g){if(g>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+g+". Num Vertices:"+this.data.length/3);const I=g*this.stride,C=this.data.subarray(I,I+this.stride);return new A(C)}getValue(g){if(g>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+g+". Num Vertices:"+this.data.length/3);const I=g*this.stride,C=this.data.slice(I,I+this.stride);return new A(C)}setValue(g,I){if(g>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+g+". Num Vertices:"+this.data.length/3);const C=g*this.stride;this.data.set(I.asArray(),C)}getFaceVertexValueRef(g,I){const C=this.getFaceVertexValueRef_array(g,I);return new A(C)}setFaceVertexValue(g,I,C){this.setFaceVertexValue_array(g,I,C.asArray())}setSplitVertexValue(g,I,C){this.setSplitVertexValue_array(g,I,C.asArray())}}t.register("ColorAttribute",hI);class cI extends ZI{constructor(){super()}clear(){this.setNumVertices(0),this.emit("geomDataTopologyChanged")}loadBin(g){this.name=g.loadStr();const I=g.loadUInt32();this.__boundingBox.set(g.loadFloat32Vec3(),g.loadFloat32Vec3()),this.setNumVertices(I);const C=this.getVertexAttribute("positions");if(!C)throw Error("positions is undefined");if(I<256){const F=this.__boundingBox.toMat4(),U=g.loadUInt8Array(3*I);for(let g=0;g<I;g++){const I=new d(U[3*g+0]/255,U[3*g+1]/255,U[3*g+2]/255);C.setValue(g,F.transformVec3(I))}}else{const F=g.loadUInt32(),U=[];for(let I=0;I<F;I++){const I=g.loadUInt32Vec2(),C=g.loadFloat32Vec3(),F=g.loadFloat32Vec3();U.push({range:I,bbox:new r(C,F)})}const l=g.loadUInt8Array(3*I);for(let g=0;g<F;g++){const I=U[g].bbox.toMat4();for(let F=U[g].range.x;F<U[g].range.y;F++){const g=new d(l[3*F+0]/255,l[3*F+1]/255,l[3*F+2]/255);C.setValue(F,I.transformVec3(g))}}}}readBinary(g,I){super.loadBaseGeomBinary(g),this.emit("geomDataChanged")}}t.register("Points",cI);class rI extends ZI{constructor(){super(),this.__indices=new Uint32Array}clear(){this.setNumSegments(0),this.setNumVertices(0),this.emit("geomDataTopologyChanged")}getIndices(){return this.__indices}getNumSegments(){return this.__indices.length/2}setNumSegments(g){if(g>this.getNumSegments()){const I=new Uint32Array(2*g);I.set(this.__indices),this.__indices=I}else this.__indices=this.__indices.slice(0,2*g)}setSegmentVertexIndices(g,I,C){if(g>=this.__indices.length/2)throw new Error("Invalid line index:"+g+". Num Segments:"+this.__indices.length/2);this.__indices[2*g+0]=I,this.__indices[2*g+1]=C}getSegmentVertexIndex(g,I){return g<this.getNumSegments()?this.__indices[2*g+I]:-1}genBuffers(g){const I=super.genBuffers();let C;return C=I.numVertices<Math.pow(2,8)?new Uint8Array(this.__indices):I.numVertices<Math.pow(2,16)?new Uint16Array(this.__indices):this.__indices,I.indices=C,I}readBinary(g,I){super.loadBaseGeomBinary(g),this.setNumSegments(g.loadUInt32());const C=g.loadUInt8();1==C?this.__indices=g.loadUInt8Array():2==C?this.__indices=g.loadUInt16Array():4==C&&(this.__indices=g.loadUInt32Array()),this.emit("geomDataChanged")}toJSON(g){const I=super.toJSON(g);return g&&g.skipTopology||(I.indices=Array.from(this.__indices)),I}fromJSON(g,I){super.fromJSON(g,I),g.indices&&(this.__indices=Uint32Array.from(g.indices))}}t.register("Lines",rI);class mI extends ZI{constructor(){super(),this.edgeFaces=[],this.faceEdges=[[]],this.faceCounts=[],this.__faceVertexIndices=new Uint32Array,this.__logTopologyWarnings=!1,this.__edgeAttributes=new Map,this.__faceAttributes=new Map,this.numEdges=0,this.edgeVerts=[],this.vertexEdges=[],this.edgeAngles=new Float32Array,this.edgeVecs=[]}init(){}clear(){super.clear(),this.edgeVerts=[],this.vertexEdges=[],this.numEdges=0,this.edgeAngles=new Float32Array,this.emit("geomDataTopologyChanged")}addVertexAttribute(g,I){super.addVertexAttribute(g,I),I.setMesh(this)}getFaceCounts(){return this.faceCounts}getNumFaces(){return 0==this.faceCounts.length?0:this.faceCounts.reduce(((g,I)=>g+I))}setFaceCounts(g){let I=0,C=3;for(const F of g)I+=F*C,C++;if(0==this.getNumFaces())this.__faceVertexIndices=new Uint32Array(I);else{const F=new Uint32Array(I);let U=0,l=0;I=0,C=3,g.forEach(((g,I)=>{const t=U+Math.min(g,this.faceCounts[I])*C;F.set(this.__faceVertexIndices.slice(U,t),l),U+=this.faceCounts[I]*C,l+=g*C,C++})),this.__faceVertexIndices=F}this.faceCounts=g}getFaceVertexCount(g){let I=0,C=0;return this.faceCounts.some(((F,U)=>(I+=F,I>g&&(C=U+3,!0)))),C}getFaceVertexOffset(g){let I=0,C=0;return this.faceCounts.some(((F,U)=>I+F>g?(C+=(g-I)*(U+3),!0):(I+=F,C+=F*(U+3),!1))),C}setFaceVertexIndices(g,I){const C=this.getFaceVertexCount(g);if(I.length!=C)throw new Error(`Invalid indices for face:${g} vertexIndices:${I}. Expected ${C} indices`);const F=this.getFaceVertexOffset(g);this.__faceVertexIndices.set(I,F)}addFace(g){const I=[...this.faceCounts];if(I.length<=g.length-3){for(let C=I.length;C<g.length-3;C++)I[C]=0;I[g.length-3]=1}else I[g.length-3]++;this.setFaceCounts(I);let C=0,F=0;return this.faceCounts.some(((I,U)=>U+3==g.length?(C+=I-1,F+=(I-1)*(U+3),!0):(C+=I,F+=I*(U+3),!1))),this.__faceVertexIndices.set(g,F),C}getFaceVertexIndices(g){const I=[],C=this.getFaceVertexOffset(g),F=this.getFaceVertexCount(g);for(let g=0;g<F;g++)I.push(this.__faceVertexIndices[C+g]);return I}getFaceVertexIndex(g,I){const C=this.getFaceVertexOffset(g);return this.__faceVertexIndices[C+I]}addFaceAttribute(g,I){return I.setCount(this.getNumFaces()),this.__faceAttributes.set(g,I),I}hasFaceAttribute(g){return this.__faceAttributes.has(g)}getFaceAttribute(g){return this.__faceAttributes.get(g)}addEdgeAttribute(g,I){I.setCount(this.numEdges),this.__edgeAttributes.set(g,I)}hasEdgeAttribute(g){return this.__edgeAttributes.has(g)}getEdgeAttribute(g){return this.__edgeAttributes.get(g)}genTopologyInfo(){let g={};this.vertexEdges=[],this.edgeFaces=[],this.edgeVerts=[],this.faceEdges=[],this.numEdges=0;const I=this.positions,C=(C,F)=>{let U=C,l=F;if(l<U){const g=U;U=l,l=g}const t=U+">"+l;if(t in g)return g[t];const e=I.getValueRef(U),Q=I.getValueRef(l).subtract(e),d={edgeIndex:this.edgeFaces.length/2,edgeVec:Q};return g[t]=d,this.edgeFaces.push(-1),this.edgeFaces.push(-1),this.edgeVerts.push(U),this.edgeVerts.push(l),this.numEdges++,d},F=(g,I,F)=>{const U=C(g,I).edgeIndex;if(I<g){const g=2*U+0;this.__logTopologyWarnings&&-1!=this.edgeFaces[g]&&console.warn("Edge poly 0 already set. Mesh is non-manifold."),this.edgeFaces[g]=F}else{const g=2*U+1;this.__logTopologyWarnings&&-1!=this.edgeFaces[g]&&console.warn("Edge poly 1 already set. Mesh is non-manifold."),this.edgeFaces[g]=F}F in this.faceEdges||(this.faceEdges[F]=[]),this.faceEdges[F].push(U),null==this.vertexEdges[g]&&(this.vertexEdges[g]=new Set),null==this.vertexEdges[I]&&(this.vertexEdges[I]=new Set),this.vertexEdges[g].add(U),this.vertexEdges[I].add(U)},U=this.getNumFaces();for(let g=0;g<U;g++){const I=this.getFaceVertexIndices(g);for(let C=0;C<I.length;C++){F(I[C],I[(C+1)%I.length],g)}}}computeFaceNormals(){const g=this.positions,I=new RI;this.addFaceAttribute("normals",I);const C=this.getNumFaces();for(let F=0;F<C;F++){const C=this.getFaceVertexIndices(F),U=g.getValueRef(C[0]);let l=g.getValueRef(C[1]);const t=new d;for(let I=2;I<C.length;I++){const F=g.getValueRef(C[I]),e=l.subtract(U),Q=F.subtract(U);t.addInPlace(e.cross(Q).normalize()),l=F}t.lengthSquared()<Number.EPSILON||I.setValue(F,t.normalize())}}calculateEdgeAngles(){0==this.vertexEdges.length&&this.genTopologyInfo(),this.computeFaceNormals();const g=this.positions,I=this.getFaceAttribute("normals");this.edgeVecs=[],this.edgeAngles=new Float32Array(this.numEdges);for(let C=0;C<this.edgeFaces.length;C+=2){const F=this.edgeVerts[C],U=this.edgeVerts[C+1],l=g.getValueRef(U).subtract(g.getValueRef(F));l.normalizeInPlace(),this.edgeVecs.push(l);const t=this.edgeFaces[C],e=this.edgeFaces[C+1];if(-1==t||-1==e){this.edgeAngles[C/2]=2*Math.PI;continue}const Q=I.getValueRef(t),d=I.getValueRef(e);this.edgeAngles[C/2]=Q.angleTo(d)}}computeVertexNormals(g=1){this.calculateEdgeAngles();const I=this.getFaceAttribute("normals"),C=new RI;this.addVertexAttribute("normals",C);const F=(g,I)=>{C.setValue(g,I)},U=(g,I)=>{let C,F;const U=this.faceEdges[g];for(const g of U)(this.edgeVerts[2*g]==I||this.edgeVerts[2*g+1]==I)&&(C?F=this.edgeVecs[g]:C=this.edgeVecs[g]);return[C,F]};for(let t=0;t<this.vertexEdges.length;t++){if(null==this.vertexEdges[t])continue;const e=this.vertexEdges[t],Q=[],n=g=>{let I=!1;for(const C of Q)if(I=C.includes(g),I)break;I||Q.push([g])};for(const I of e){const C=this.edgeFaces[2*I],F=this.edgeFaces[2*I+1];if(-1!=C&&-1!=F&&this.edgeAngles[I]<g){let g=-1,I=-1;for(let U=0;U<Q.length;U++)-1==g&&Q[U].includes(C)&&(g=U),-1==I&&Q[U].includes(F)&&(I=U);-1==g&&-1==I?Q.push([C,F]):-1!=g&&-1!=I?g!=I&&(Q[g]=Q[g].concat(Q[I]),Q.splice(I,1)):(-1==g&&Q[I].push(C),-1==I&&Q[g].push(F))}else-1!=C&&n(C),-1!=F&&n(F)}Q.sort(((g,I)=>g.length<I.length?1:g.length>I.length?-1:0));let i=!0;for(const g of Q){const e=new d;for(const C of g){const g=U(C,t);let F;g[0]&&g[1]?(F=g[0].angleTo(g[1]),e.addInPlace((l=C,I.getValueRef(l)).scale(F))):console.warn("variable weight is undefined because faceEdges[0] or faceEdges[1] is undefined")}e.normalizeInPlace(),i?(F(t,e),i=!1):C.setSplitVertexValues(t,g,e.asArray())}}var l;return C}computeHardEdgesIndices(g=1){0==this.edgeVerts.length&&this.calculateEdgeAngles();const I=[],C=g=>{I.push(this.edgeVerts[g]),I.push(this.edgeVerts[g+1])};for(let I=0;I<this.edgeAngles.length;I++)this.edgeAngles[I]>g&&C(2*I);return Uint32Array.from(I)}genBuffers(g){const I={};let C=0;for(const[,g]of this.__vertexAttributes){const F=g.getSplits();for(const g in F){g in I||(I[g]={});const U=F[g];for(const F in U){const U=parseInt(F);U in I[g]||(I[g][U]=C,C++)}}}const F=this.positions.getCount(),U=F+C;let l;g&&0==g.includeIndices||(l=this.generateTriangulatedIndices(U,F,I));const t={};for(const[g,F]of this.__vertexAttributes){let U;U=0==C?F.asArray():F.generateSplitValues(I,C);const l=F.stride,e=U.length/l;t[g]={values:U,count:e,dimension:l,normalized:"normals"==g,dataType:F.getDataTypeName()}}return{numVertices:this.numVertices(),numRenderVerts:U,indices:l,attrBuffers:t}}computeNumTriangles(){let g=3,I=0;for(const C of this.faceCounts)I+=C*(g-2),g++;return I}generateTriangulatedIndices(g,I,C){const F=this.computeNumTriangles();let U;U=g<Math.pow(2,8)?new Uint8Array(3*F):g<Math.pow(2,16)?new Uint16Array(3*F):new Uint32Array(3*F);let l=0;const t=function(g,F){g in C&&F in C[g]&&(g=I+C[g][F]),U[l]=g,l++},e=this.getNumFaces();for(let g=0;g<e;g++){const I=this.getFaceVertexIndices(g);for(let C=0;C<I.length;C++)C>=3&&(t(I[0],g),t(I[C-1],g)),t(I[C],g)}return U}readBinary(g,I){super.loadBaseGeomBinary(g),this.setFaceCounts(Array.from(g.loadUInt32Array()));const C=this.getNumFaces(),F=g.loadUInt8Array(C),U=g.loadSInt32Vec2(),l=g.loadUInt8();let t;if(1==l)t=g.loadUInt8Array();else if(2==l)t=g.loadUInt16Array();else{if(4!=l)throw Error("faceVertexIndexDeltas undefined");t=g.loadUInt32Array()}let e=3,Q=0;const d=this.faceCounts.map(((g,I)=>{const C=Q;return Q+=g*e,e++,C}));let n=0,i=0;const A=[];for(let g=0;g<C;g++){const I=F[g],C=d[I],l=I+3;A[g]=C;for(let I=0;I<l;I++){const F=C+I,l=t[n+I]+U.x;if(0==g)this.__faceVertexIndices[F]=l;else{let C=A[g-1];C+=I<i?I:i-1,this.__faceVertexIndices[F]=this.__faceVertexIndices[C]+l}}n+=l,d[I]+=l,i=l}this.hasVertexAttribute("normals")||this.computeVertexNormals(),this.emit("geomDataChanged")}toJSON(g){const I=super.toJSON(g);return g&&g.skipTopology||(I.faceCounts=Array.from(this.faceCounts),I.faceVertexIndices=Array.from(this.__faceVertexIndices)),I}fromJSON(g,I){super.fromJSON(g,I),g.faceCounts&&(this.faceCounts=g.faceCounts),g.faceVertexIndices&&(this.__faceVertexIndices=Uint32Array.from(g.faceVertexIndices))}}t.register("Mesh",mI);class WI extends b{constructor(g){super(),this.name=g.name,this.__buffers=g.geomBuffers,this.__buffers.attrBuffers,this.boundingBox=new r,this.boundingBox.p0.__data=g.bbox.p0.__data,this.boundingBox.p1.__data=g.bbox.p1.__data,this.__metaData=new Map}getNumVertices(){return this.__buffers.numVertices}getBoundingBox(){return this.boundingBox}genBuffers(){return this.__buffers}getMetadata(g){return this.__metaData.get(g)}hasMetadata(g){return this.__metaData.has(g)}setMetadata(g,I){this.__metaData.set(g,I)}deleteMetadata(g){this.__metaData.delete(g)}}class JI extends WI{constructor(g){super(g)}}class GI extends WI{constructor(g){super(g)}getNumLineSegments(){return this.__buffers.indices.length/2}}class bI extends WI{constructor(g){super(g)}getNumTriangles(){return this.__buffers.indices.length/3}}class NI extends cI{constructor(){super(),this.dirtyTopology=!0,this.dirtyVertices=!0,this.topologyParams=[]}parameterValueChanged(g){this.setBoundingBoxDirty(),this.topologyParams.includes(g.param.getName())?(this.dirtyTopology=!0,this.emit("geomDataTopologyChanged")):(this.dirtyVertices=!0,this.setBoundingBoxDirty(),this.emit("geomDataChanged")),super.parameterValueChanged(g)}update(){this.dirtyTopology?(this.rebuild(),this.dirtyTopology=!1,this.dirtyVertices=!1,this.rebuild()):this.dirtyVertices&&(this.dirtyVertices=!1,this.resize(),this.dirtyVertices=!1)}getBoundingBox(){return this.update(),super.getBoundingBox()}getNumVertices(){return this.update(),super.getNumVertices()}genBuffers(g){return this.update(),super.genBuffers(g)}toJSON(g){g||(g={}),g.skipTopology=!0,g.skipAttributes=["positions","normals","texCoords"];const I=super.toJSON(g);return g.skipTopology=!1,g.skipAttributes=[],I}}class SI extends rI{constructor(){super(),this.dirtyTopology=!0,this.dirtyVertices=!0,this.topologyParams=[]}parameterValueChanged(g){this.setBoundingBoxDirty(),this.topologyParams.includes(g.param.getName())?(this.dirtyTopology=!0,this.emit("geomDataTopologyChanged")):(this.dirtyVertices=!0,this.setBoundingBoxDirty(),this.emit("geomDataChanged")),super.parameterValueChanged(g)}update(){this.dirtyTopology?(this.rebuild(),this.dirtyTopology=!1,this.dirtyVertices=!1,this.rebuild()):this.dirtyVertices&&(this.resize(),this.dirtyVertices=!1,this.resize())}getBoundingBox(){return this.update(),super.getBoundingBox()}getNumVertices(){return this.update(),super.getNumVertices()}genBuffers(g){return this.update(),super.genBuffers()}toJSON(g){g||(g={}),g.skipTopology=!0,g.skipAttributes=["positions","normals","texCoords"];const I=super.toJSON(g);return g.skipTopology=!1,g.skipAttributes=[],I}fromJSON(g,I){super.fromJSON(g,I)}}class uI extends mI{constructor(){super(),this.dirtyTopology=!0,this.dirtyVertices=!0,this.topologyParams=[]}parameterValueChanged(g){this.setBoundingBoxDirty(),this.topologyParams.includes(g.param.getName())?(this.dirtyTopology=!0,this.emit("geomDataTopologyChanged")):(this.dirtyVertices=!0,this.setBoundingBoxDirty(),this.emit("geomDataChanged")),super.parameterValueChanged(g)}update(){this.dirtyTopology?(this.vertexEdges=[],this.dirtyTopology=!1,this.dirtyVertices=!1,this.rebuild()):this.dirtyVertices&&(this.dirtyVertices=!1,this.resize())}getBoundingBox(){return this.update(),super.getBoundingBox()}getNumVertices(){return this.update(),super.getNumVertices()}computeVertexNormals(g=1){return this.update(),super.computeVertexNormals(g)}computeHardEdgesIndices(g=1){return this.update(),super.computeHardEdgesIndices(g)}genBuffers(g){return this.update(),super.genBuffers(g)}toJSON(g){g||(g={}),g.skipTopology=!0,g.skipAttributes=["positions","normals","texCoords"];const I=super.toJSON(g);return g.skipTopology=!1,g.skipAttributes=[],I}}class yI extends NI{constructor(g=1,I=1,C=1,F=1,U=!1){if(super(),this.topologyParams=[],isNaN(g)||isNaN(I)||isNaN(C)||isNaN(F))throw new Error("Invalid geom args");this.sizeXParam=this.addParameter(new Xg("X",g)),this.sizeYParam=this.addParameter(new Xg("Y",I)),this.divisionsXParam=this.addParameter(new Xg("XDivisions",C)),this.divisionsYParam=this.addParameter(new Xg("YDivisions",F)),U&&this.addVertexAttribute("texCoords",new sI),this.topologyParams.push("XDivisions"),this.topologyParams.push("YDivisions")}rebuild(){const g=this.divisionsXParam.value,I=this.divisionsYParam.value;this.setNumVertices(g*I);const C=this.getVertexAttribute("texCoords");if(C)for(let F=0;F<I;F++){const U=F/(I-1);for(let I=0;I<g;I++){const l=I/(g-1);C.getValueRef(F*g+I).set(l,U)}}this.resize()}resize(){const g=this.divisionsXParam.value,I=this.divisionsYParam.value,C=this.sizeXParam.value,F=this.sizeYParam.value,U=this.getVertexAttribute("positions");if(U)for(let l=0;l<I;l++){const t=(l/(I-1)-.5)*F;for(let I=0;I<g;I++){const F=(I/(g-1)-.5)*C;U.getValueRef(l*g+I).set(F,t,0)}}}}t.register("PointGrid",yI);class XI extends SI{constructor(g=1,I=1){if(super(),isNaN(g)||isNaN(I))throw new Error("Invalid geom args");this.sizeXParam=this.addParameter(new Xg("X",g)),this.sizeXParam.on("valueChanged",this.resize.bind(this)),this.sizeYParam=this.addParameter(new Xg("Y",I)),this.sizeYParam.on("valueChanged",this.resize.bind(this)),this.rebuild()}rebuild(){this.setNumVertices(4),this.setNumSegments(4),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,1,2),this.setSegmentVertexIndices(2,2,3),this.setSegmentVertexIndices(3,3,0),this.resize(!1)}resize(){const g=this.sizeXParam.value,I=this.sizeYParam.value,C=this.getVertexAttribute("positions");C&&(C.getValueRef(0).set(-.5*g,-.5*I,0),C.getValueRef(1).set(.5*g,-.5*I,0),C.getValueRef(2).set(.5*g,.5*I,0),C.getValueRef(3).set(-.5*g,.5*I,0))}}t.register("Rect",XI);class pI extends SI{constructor(g=1,I=32,C=2*Math.PI){if(super(),this.topologyParams=[],isNaN(g)||isNaN(I))throw new Error("Invalid geom args");this.radiusParam=this.addParameter(new Xg("Radius",g)),this.angleParam=this.addParameter(new Xg("Angle",C)),this.sidesParam=this.addParameter(new Xg("Sides",I>=3?I:3,[3,200],1)),this.topologyParams.push("Sides")}rebuild(){const g=this.sidesParam.value;this.setNumVertices(g);const I=this.angleParam.value<2*Math.PI;I?this.setNumSegments(g-1):this.setNumSegments(g);for(let C=0;C<(I?g-1:g);C++)this.setSegmentVertexIndices(C,C,(C+1)%g);this.resize()}resize(){const g=this.radiusParam.value,I=this.sidesParam.value,C=this.angleParam.value/I,F=this.getVertexAttribute("positions");if(F)for(let U=0;U<I;U++)F.getValueRef(U).set(Math.cos(C*U)*g,Math.sin(C*U)*g,0)}}t.register("Circle",pI);class kI extends SI{constructor(g=1){if(super(),isNaN(g))throw new Error("Invalid geom args");this.sizeParam=this.addParameter(new Xg("Size",g))}rebuild(){this.setNumVertices(6),this.setNumSegments(3),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,2,3),this.setSegmentVertexIndices(2,4,5),this.resize()}resize(){const g=this.sizeParam.value,I=this.getVertexAttribute("positions");I&&(I.getValueRef(0).set(-.5*g,0,0),I.getValueRef(1).set(.5*g,0,0),I.getValueRef(2).set(0,.5*g,0),I.getValueRef(3).set(0,-.5*g,0),I.getValueRef(4).set(0,0,.5*g),I.getValueRef(5).set(0,0,-.5*g))}}t.register("Cross",kI);class YI extends SI{constructor(g=1,I=1,C=1,F=!1){super(),this.sizeXParam=this.addParameter(new Xg("X",g)),this.sizeYParam=this.addParameter(new Xg("Y",I)),this.sizeZParam=this.addParameter(new Xg("Z",C)),this.baseZAtZeroParam=this.addParameter(new kg("BaseZAtZero",F))}rebuild(){this.setNumVertices(8),this.setNumSegments(12),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,1,2),this.setSegmentVertexIndices(2,2,3),this.setSegmentVertexIndices(3,3,0),this.setSegmentVertexIndices(4,4,5),this.setSegmentVertexIndices(5,5,6),this.setSegmentVertexIndices(6,6,7),this.setSegmentVertexIndices(7,7,4),this.setSegmentVertexIndices(8,0,4),this.setSegmentVertexIndices(9,1,5),this.setSegmentVertexIndices(10,2,6),this.setSegmentVertexIndices(11,3,7),this.resize()}resize(){const g=this.sizeXParam.value,I=this.sizeYParam.value,C=this.sizeZParam.value,F=this.baseZAtZeroParam.value,U=this.getVertexAttribute("positions");if(U){let l=.5;F&&(l=1),U.getValueRef(0).set(.5*g,-.5*I,l*C),U.getValueRef(1).set(.5*g,.5*I,l*C),U.getValueRef(2).set(-.5*g,.5*I,l*C),U.getValueRef(3).set(-.5*g,-.5*I,l*C),l=-.5,F&&(l=0),U.getValueRef(4).set(.5*g,-.5*I,l*C),U.getValueRef(5).set(.5*g,.5*I,l*C),U.getValueRef(6).set(-.5*g,.5*I,l*C),U.getValueRef(7).set(-.5*g,-.5*I,l*C)}}}t.register("LinesCuboid",YI);class EI extends SI{constructor(g=1,I=1,C=10,F=10,U=!1){if(super(),this.topologyParams=[],isNaN(g)||isNaN(I)||isNaN(C)||isNaN(F))throw new Error("Invalid geom args");this.xParam=this.addParameter(new Xg("X",g)),this.yParam=this.addParameter(new Xg("Y",I)),this.xDivisionsParam=this.addParameter(new Xg("XDivisions",C)),this.yDivisionsParam=this.addParameter(new Xg("YDivisions",F)),this.skipCenterLinesParam=this.addParameter(new kg("SkipCenterLines",U)),this.topologyParams.push("XDivisions"),this.topologyParams.push("YDivisions"),this.topologyParams.push("SkipCenterLines")}rebuild(){const g=this.xDivisionsParam.value,I=this.yDivisionsParam.value,C=this.skipCenterLinesParam.value&&g%2==0&&I%2==0;this.setNumVertices(2*(g+I+2-(C?1:0))),this.setNumSegments(g+I+2-(C?1:0));let F=0;for(let I=0;I<=g;I++){if(C&&I==g/2)continue;const U=2*F,l=2*F+1;this.setSegmentVertexIndices(F,U,l),F++}for(let U=0;U<=I;U++){if(C&&U==g/2)continue;const I=2*F,l=2*F+1;this.setSegmentVertexIndices(F,I,l),F++}this.resize()}resize(){const g=this.getVertexAttribute("positions"),I=this.xDivisionsParam.value,C=this.yDivisionsParam.value,F=this.xParam.value,U=this.yParam.value,l=this.skipCenterLinesParam.value&&I%2==0&&C%2==0;let t=0;for(let C=0;C<=I;C++){if(l&&C==I/2)continue;const e=2*t,Q=2*t+1,d=(C/I-.5)*F;g&&(g.getValueRef(e).set(d,-.5*U,0),g.getValueRef(Q).set(d,.5*U,0)),t++}for(let e=0;e<=C;e++){if(l&&e==I/2)continue;const Q=2*t,d=2*t+1,n=(e/C-.5)*U;g&&(g.getValueRef(Q).set(-.5*F,n,0),g.getValueRef(d).set(.5*F,n,0)),t++}}}t.register("Grid",EI);class TI extends uI{constructor(g=.5,I=1,C=32,F=!0,U=!0,l=!0){if(super(),this.topologyParams=[],isNaN(g)||isNaN(I)||isNaN(C))throw new Error("Invalid geom args");this.radiusParam=this.addParameter(new Xg("Radius",g)),this.heightParam=this.addParameter(new Xg("Height",I)),this.detailParam=this.addParameter(new Xg("Detail",C>=3?C:3,[3,200],1)),this.capParam=this.addParameter(new kg("Cap",F)),U&&this.addVertexAttribute("normals",new RI),l&&this.addVertexAttribute("texCoords",new sI),this.topologyParams.push("Detail"),this.topologyParams.push("Cap")}rebuild(){const g=this.detailParam.value,I=this.radiusParam.value,C=this.heightParam.value,F=this.capParam.value;let U=g+1;F&&(U+=1),this.setNumVertices(U);const l=g,t=g+1,e=this.getVertexAttribute("positions");if(e){e.getValueRef(l).set(0,0,C);for(let C=0;C<g;C++){const F=-C/g*2*Math.PI;e.getValueRef(C).set(I*Math.cos(F),I*Math.sin(F),0)}F&&e.getValueRef(t).set(0,0,0)}this.setFaceCounts([g+(F?g:0)]);for(let I=0;I<g;I++){const C=(I+1)%g;this.setFaceVertexIndices(I,[C,I,l])}if(F)for(let I=0;I<g;I++){const C=(I+1)%g;this.setFaceVertexIndices(g+I,[I,C,t])}const d=this.getVertexAttribute("texCoords");if(d){let I=0;for(let C=0;C<g;C++)"setFaceVertexValue"in d&&(d.setFaceVertexValue(I,0,new Q((C+1)/g,0)),d.setFaceVertexValue(I,1,new Q(C/g,0)),d.setFaceVertexValue(I,2,new Q((C+.5)/g,1)));if(F)for(let C=0;C<g;C++)d.setFaceVertexValue(I,0,new Q(C/g,0)),d.setFaceVertexValue(I,1,new Q((C+1)/g,0)),d.setFaceVertexValue(I,2,new Q((C+.5)/g,1)),I++}this.resize()}resize(){const g=this.detailParam.value,I=this.radiusParam.value,C=this.heightParam.value,F=g,U=g+1,l=this.getVertexAttribute("positions");if(l){l.getValueRef(F).set(0,0,C);for(let C=0;C<g;C++){const F=-C/g*2*Math.PI;l.getValueRef(C).set(I*Math.cos(F),I*Math.sin(F),0)}this.capParam.value&&l.getValueRef(U).set(0,0,0)}this.dirtyTopology=!1,this.dirtyVertices=!1;this.getVertexAttribute("normals")&&this.computeVertexNormals()}}t.register("Cone",TI);class DI extends uI{constructor(g=1,I=1,C=1,F=!1){if(super(),isNaN(g)||isNaN(I)||isNaN(C))throw new Error("Invalid geom args");this.sizeXParam=this.addParameter(new Xg("X",g)),this.sizeYParam=this.addParameter(new Xg("Y",I)),this.sizeZParam=this.addParameter(new Xg("Z",C)),this.baseZAtZeroParam=this.addParameter(new kg("BaseZAtZero",F)),this.setFaceCounts([0,6]),this.setFaceVertexIndices(0,[0,1,2,3]),this.setFaceVertexIndices(1,[7,6,5,4]),this.setFaceVertexIndices(2,[1,0,4,5]),this.setFaceVertexIndices(3,[3,2,6,7]),this.setFaceVertexIndices(4,[0,3,7,4]),this.setFaceVertexIndices(5,[2,1,5,6]),this.setNumVertices(8),this.addVertexAttribute("normals",new RI)}rebuild(){const g=this.getVertexAttribute("normals");if(g)for(let I=0;I<6;I++){let C;switch(I){case 0:C=new d(0,0,1);break;case 1:C=new d(0,0,-1);break;case 2:C=new d(1,0,0);break;case 3:C=new d(-1,0,0);break;case 4:C=new d(0,-1,0);break;default:C=new d(0,1,0)}g.setFaceVertexValue(I,0,C),g.setFaceVertexValue(I,1,C),g.setFaceVertexValue(I,2,C),g.setFaceVertexValue(I,3,C)}this.resize()}resize(){const g=this.sizeXParam.value,I=this.sizeYParam.value,C=this.sizeZParam.value,F=this.baseZAtZeroParam.value;let U=.5;const l=this.getVertexAttribute("positions");F&&(U=1),l&&(l.getValueRef(0).set(.5*g,-.5*I,U*C),l.getValueRef(1).set(.5*g,.5*I,U*C),l.getValueRef(2).set(-.5*g,.5*I,U*C),l.getValueRef(3).set(-.5*g,-.5*I,U*C),U=-.5,F&&(U=0),l.getValueRef(4).set(.5*g,-.5*I,U*C),l.getValueRef(5).set(.5*g,.5*I,U*C),l.getValueRef(6).set(-.5*g,.5*I,U*C),l.getValueRef(7).set(-.5*g,-.5*I,U*C))}}t.register("Cuboid",DI);class vI extends uI{constructor(g=.5,I=1,C=32,F=2,U=!0,l=!1){if(super(),this.topologyParams=[],isNaN(g)||isNaN(I)||isNaN(C)||isNaN(F))throw new Error("Invalid geom args");this.radiusParam=this.addParameter(new Xg("Radius",g)),this.heightParam=this.addParameter(new Xg("Height",I)),this.sidesParam=this.addParameter(new Xg("Sides",C>=3?C:3,[3,200],1)),this.loopsParam=this.addParameter(new Xg("Loops",F>=2?F:2,[1,200],1)),this.capsParam=this.addParameter(new kg("Caps",U)),this.baseZAtZeroParam=this.addParameter(new kg("BaseZAtZero",l)),this.addVertexAttribute("texCoords",new sI),this.addVertexAttribute("normals",new RI),this.topologyParams.push("Sides"),this.topologyParams.push("Loops"),this.topologyParams.push("Caps")}rebuild(){const g=this.sidesParam.value,I=this.loopsParam.value,C=this.capsParam.value;let F=g*I;C&&(F+=2),this.setNumVertices(F),C?this.setFaceCounts([2*g,g]):this.setFaceCounts([0,g]);let U=0;if(C){for(let I=0;I<g;I++){const C=F-1,l=I,t=(I+1)%g;this.setFaceVertexIndices(U++,[C,l,t])}for(let C=0;C<g;C++){const l=g*(I-1)+C,t=F-2,e=g*(I-1)+(C+1)%g;this.setFaceVertexIndices(U++,[l,t,e])}}for(let C=0;C<I-1;C++)for(let I=0;I<g;I++){const F=g*C+(I+1)%g,l=g*C+I,t=g*(C+1)+I,e=g*(C+1)+(I+1)%g;this.setFaceVertexIndices(U++,[F,l,t,e])}const l=this.getVertexAttribute("normals");if(l){if(U=0,C){const I=new d(0,0,-1);for(let C=0;C<g;C++)l.setFaceVertexValue(U,0,I),l.setFaceVertexValue(U,1,I),l.setFaceVertexValue(U,2,I),U++;I.set(0,0,1);for(let C=0;C<g;C++)l.setFaceVertexValue(U,0,I),l.setFaceVertexValue(U,1,I),l.setFaceVertexValue(U,2,I),U++}for(let C=0;C<I-1;C++)for(let I=0;I<g;I++){let C=I/g*2*Math.PI;const F=new d(Math.sin(C),Math.cos(C),0);l.setFaceVertexValue(U,0,F),l.setFaceVertexValue(U,1,F),C=(I+1)/g*2*Math.PI;const t=new d(Math.sin(C),Math.cos(C),0);l.setFaceVertexValue(U,2,t),l.setFaceVertexValue(U,3,t),U++}}const t=this.getVertexAttribute("texCoords");if(t){if(U=0,C){for(let I=0;I<g;I++)t.setFaceVertexValue(U,0,new Q(I/g,0)),t.setFaceVertexValue(U,1,new Q((I+1)/g,0)),t.setFaceVertexValue(U,2,new Q((I+.5)/g,1)),U++;for(let I=0;I<g;I++)t.setFaceVertexValue(U,0,new Q(I/g,0)),t.setFaceVertexValue(U,1,new Q((I+1)/g,0)),t.setFaceVertexValue(U,2,new Q((I+.5)/g,1)),U++}for(let I=0;I<g;I++)t.setFaceVertexValue(U,0,new Q((I+1)/g,0)),t.setFaceVertexValue(U,2,new Q((I+1)/g,1)),t.setFaceVertexValue(U,1,new Q(I/g,0)),t.setFaceVertexValue(U,3,new Q(I/g,1)),U++}this.resize()}resize(){const g=this.sidesParam.value,I=this.loopsParam.value,C=this.radiusParam.value,F=this.heightParam.value,U=this.capsParam.value,l=this.baseZAtZeroParam.value;let t=g*I;U&&(t+=2);let e=0,Q=.5;l&&(Q=0);const d=this.getVertexAttribute("positions");if(d){for(let U=0;U<I;U++){const l=U/(I-1)*F-F*Q;for(let I=0;I<g;I++){const F=I/g*2*Math.PI;d.getValueRef(e).set(Math.sin(F)*C,Math.cos(F)*C,l),e++}}U&&(d.getValueRef(t-1).set(0,0,F*(l?0:-.5)),d.getValueRef(t-2).set(0,0,F*(l?1:.5)))}this.dirtyTopology=!1,this.dirtyVertices=!1,this.computeVertexNormals()}}t.register("Cylinder",vI);class MI extends uI{constructor(g=.5,I=32){if(super(),this.topologyParams=[],isNaN(g)||isNaN(I))throw new Error("Invalid geom args");this.radiusParam=this.addParameter(new Xg("Radius",g)),this.sidesParam=this.addParameter(new Xg("Sides",I>=3?I:3,[3,200],1)),this.addVertexAttribute("texCoords",new sI),this.addVertexAttribute("normals",new RI),this.topologyParams.push("Sides")}rebuild(){const g=this.sidesParam.value;this.setNumVertices(g+1),this.setFaceCounts([g]);const I=this.getVertexAttribute("positions");I&&I.getValueRef(0).set(0,0,0);for(let I=0;I<g;I++){const C=I%g+1,F=(I+1)%g+1;this.setFaceVertexIndices(I,[0,C,F])}const C=this.getVertexAttribute("normals");if(C){const I=new d(0,0,1);C.setValue(0,I);for(let F=0;F<g;F++)C.setValue(F+1,I)}const F=this.getVertexAttribute("texCoords");if(F){F.getValueRef(0).set(.5,.5);for(let I=0;I<g;I++){const C=I/g*2*Math.PI;F.getValueRef(I+1).set(.5*Math.sin(C)+.5,.5*Math.cos(C)+.5)}}this.resize()}resize(){const g=this.sidesParam.value,I=this.radiusParam.value,C=this.getVertexAttribute("positions");if(C)for(let F=0;F<g;F++){const U=F/g*2*Math.PI;C.getValueRef(F+1).set(Math.sin(U)*I,Math.cos(U)*I,0)}}}t.register("Disc",MI);class HI extends uI{constructor(g=1,I=1,C=1,F=1,U=!0,l=!0){if(super(),this.topologyParams=[],isNaN(g)||isNaN(I)||isNaN(C)||isNaN(F))throw new Error("Invalid geom args");this.sizeXParam=this.addParameter(new Xg("SizeX",g)),this.sizeYParam=this.addParameter(new Xg("SizeY",I)),this.detailXParam=this.addParameter(new Xg("DetailX",C)),this.detailYParam=this.addParameter(new Xg("DetailY",F)),U&&this.addVertexAttribute("normals",new RI),l&&this.addVertexAttribute("texCoords",new sI),this.topologyParams.push("DetailX"),this.topologyParams.push("DetailY")}rebuild(){const g=this.detailXParam.value,I=this.detailYParam.value;this.setNumVertices((g+1)*(I+1)),this.setFaceCounts([0,g*I]);let C=0;for(let F=0;F<I;F++)for(let I=0;I<g;I++){const U=(g+1)*(F+1)+I,l=(g+1)*F+I,t=(g+1)*F+(I+1),e=(g+1)*(F+1)+(I+1);this.setFaceVertexIndices(C,[U,l,t,e]),C+=1}let F=0;const U=this.getVertexAttribute("normals");if(U)for(let C=0;C<=I;C++)for(let I=0;I<=g;I++)U.getValueRef(F).set(0,0,1),F++;F=0;const l=this.getVertexAttribute("texCoords");if(l)for(let C=0;C<=I;C++){const U=C/I;for(let I=0;I<=g;I++){const C=I/g;l.getValueRef(F).set(C,U),F++}}this.resize()}resize(){const g=this.sizeXParam.value,I=this.sizeYParam.value,C=this.detailXParam.value,F=this.detailYParam.value,U=this.getVertexAttribute("positions");if(!U)return;let l=0;for(let t=0;t<=F;t++){const e=(t/F-.5)*I;for(let I=0;I<=C;I++){const F=(I/C-.5)*g;U.getValueRef(l).set(F,e,0),l++}}}}t.register("Plane",HI);class KI extends uI{constructor(g=1,I=12,C=12,F=!0,U=!0){if(super(),this.radiusParam=new Xg("Radius",1),this.sidesParam=new Xg("Sides",12,[3,200],1),this.loopsParam=new Xg("Loops",6,[3,200],1),isNaN(g)||isNaN(I)||isNaN(C))throw new Error("Invalid geom args");this.addParameter(this.radiusParam),this.addParameter(this.sidesParam),this.addParameter(this.loopsParam),this.radiusParam.value=g,this.sidesParam.value=I,this.loopsParam.value=C,F&&this.addVertexAttribute("normals",new RI),U&&this.addVertexAttribute("texCoords",new sI),this.topologyParams.push("Sides"),this.topologyParams.push("Loops")}rebuild(){const g=this.radiusParam.value,I=this.sidesParam.value,C=this.loopsParam.value,F=2+I*C,U=2*I,l=I*C;this.setNumVertices(F),this.setFaceCounts([U,l]);const t=this.getVertexAttribute("positions"),e=this.getVertexAttribute("normals"),n=new d(0,0,1);let i=0;if(!t)return;t.getValueRef(i).set(0,0,g),e&&e.getValueRef(i).set(0,0,1),i++;for(let F=0;F<C;F++){const U=(F+1)/(C+1)*Math.PI;for(let C=0;C<I;C++){const F=-C/I*2*Math.PI;n.set(Math.sin(U)*Math.cos(F),Math.sin(U)*Math.sin(F),Math.cos(U)),t.getValueRef(i).setFromOther(n.scale(g)),e&&e.getValueRef(i).setFromOther(n),i++}}t.getValueRef(i).set(0,0,-g),e&&e.getValueRef(i).set(0,0,-1),i++;const A=this.getVertexAttribute("texCoords");let B=0;for(let g=0;g<I;g++){const F=0,U=(g+1)%I+1,l=g+1;if(this.setFaceVertexIndices(B,[F,U,l]),A){const F=new Q(.5,0),U=new Q((g+1)/(I-1),1/(C+1)),l=new Q(g/(I-1),1/(C+1));A.setFaceVertexValue(B,0,F),A.setFaceVertexValue(B,1,U),A.setFaceVertexValue(B,2,l)}B++}for(let g=0;g<I;g++){const U=F-1,l=I*(C-1)+(g+1)%I+1,t=I*(C-1)+g+1;if(this.setFaceVertexIndices(B,[U,t,l]),A){const F=new Q(.5,1),U=new Q((g+1)/(I-1),1-1/(C+1)),l=new Q(g/(I-1),1-1/(C+1));A.setFaceVertexValue(B,0,F),A.setFaceVertexValue(B,1,U),A.setFaceVertexValue(B,2,l)}B++}for(let g=0;g<C-1;g++)for(let F=0;F<I;F++){const U=I*g+F+1,l=I*g+(F+1)%I+1,t=I*(g+1)+(F+1)%I+1,e=I*(g+1)+F+1;this.setFaceVertexIndices(B,[U,l,t,e]),A&&(A.setFaceVertexValue(B,0,new Q(F/I,(g+1)/C)),A.setFaceVertexValue(B,1,new Q((F+1)/I,(g+1)/C)),A.setFaceVertexValue(B,2,new Q((F+1)/I,(g+2)/C)),A.setFaceVertexValue(B,3,new Q(F/I,(g+2)/C))),B++}}resize(){const g=this.radiusParam.value,I=this.sidesParam.value,C=this.loopsParam.value;if(!I||!C)return void console.warn("resize() failed");const F=this.getVertexAttribute("positions"),U=this.getVertexAttribute("normals");let l=0;const t=new d(0,0,1);F.getValueRef(l).set(0,0,g),U&&U.getValueRef(l).set(0,0,1),l++;for(let e=0;e<C;e++){const Q=(e+1)/(C+1)*Math.PI;for(let C=0;C<I;C++){const e=-C/I*2*Math.PI;t.set(Math.sin(Q)*Math.cos(e),Math.sin(Q)*Math.sin(e),Math.cos(Q)),F.getValueRef(l).setFromOther(t.scale(g)),U&&U.getValueRef(l).setFromOther(t),l++}}F.getValueRef(l).set(0,0,-g),U&&U.getValueRef(l).set(0,0,-1),l++}}t.register("Sphere",KI);class xI extends uI{constructor(g=.5,I=3,C=32,F=2*Math.PI){if(super(),isNaN(g)||isNaN(I)||isNaN(C))throw new Error("Invalid geom args");this.innerRadiusParam=this.addParameter(new Xg("InnerRadius",g)),this.outerRadiusParam=this.addParameter(new Xg("OuterRadius",I)),this.detailParam=this.addParameter(new Xg("Detail",C>=3?C:3,[3,200],1)),this.arcAngleParam=this.addParameter(new Xg("ArcAngle",F)),this.addVertexAttribute("texCoords",new sI),this.addVertexAttribute("normals",new RI),this.topologyParams.push("Detail"),this.topologyParams.push("ArcAngle")}rebuild(){const g=this.arcAngleParam.value<2*Math.PI,I=this.detailParam.value,C=I,F=2*I+(g?1:0),U=C*F;this.setNumVertices(U),this.setFaceCounts([0,C*F]);const l=this.getVertexAttribute("texCoords");if(l){let I=0;for(let U=0;U<(g?F-1:F);U++)for(let g=0;g<C;g++){const t=(U+1)%F,e=(g+1)%C,d=C*U+g,n=C*U+e,i=C*t+e,A=C*t+g;this.setFaceVertexIndices(I,[d,n,i,A]),l.setFaceVertexValue(I,0,new Q(U/F,g/F)),l.setFaceVertexValue(I,1,new Q(U/F,(g+1)/F)),l.setFaceVertexValue(I,2,new Q((U+1)/F,(g+1)/F)),l.setFaceVertexValue(I,3,new Q((U+1)/F,g/F)),I++}}this.resize()}resize(){const g=this.innerRadiusParam.value,I=this.outerRadiusParam.value,C=this.arcAngleParam.value,F=this.detailParam.value,U=C<2*Math.PI,l=F,t=2*F+(U?1:0),e=this.getVertexAttribute("positions"),Q=this.getVertexAttribute("normals");if(!e||!Q)return;let d=0;for(let F=0;F<t;F++){const n=-F/(U?t-1:t)*C,i=Math.cos(n),A=Math.sin(n);for(let C=0;C<l;C++){const F=C/l*2*Math.PI,U=Math.sin(F),t=Math.cos(F),n=I+t*g;e.getValueRef(d).set(i*n,A*n,g*U),Q.getValueRef(d).set(i*t,A*t,U),d++}}}}t.register("Torus",xI);class wI extends dI{constructor(g){super(g),this.__data=new Uint8Array(4),this.format="RGBA",this.type="UNSIGNED_BYTE",this.width=1,this.height=1}isLoaded(){return this.loaded}isStream(){return!1}setData(g,I,C){this.__data!=C&&(this.width=g,this.height=I,this.__data=C,this.loaded?this.emit("updated"):(this.loaded=!0,this.emit("loaded")))}getParams(){const g=super.getParams();return g.data=this.__data,g}}t.register("DataImage2D",wI),t.register("DataImage",wI);const zI={};class fI extends dI{constructor(g,I="",C={}){super(g),this.__data=null,this.type="UNSIGNED_BYTE",this.crossOrigin="anonymous",I&&""!=I&&this.load(I)}setCrossOrigin(g){this.crossOrigin=g}getDOMElement(){return this.__data}load(g,I="RGB"){return new Promise(((C,F)=>{if(!I){const C=g.lastIndexOf(".");if(-1!=C){".png"==g.substring(C).toLowerCase()&&(I="RGBA")}}this.format=I,this.loaded=!1;const U=()=>{this.url=g,this.width=this.__data.width,this.height=this.__data.height,this.loaded=!0,this.emit("loaded"),C()};g in zI?(this.__data=zI[g],this.__data.complete?U():(this.__data.addEventListener("load",U),this.__data.addEventListener("error",F))):(this.__data=new Image,this.__data.crossOrigin=this.crossOrigin,this.__data.src=g,this.__data.addEventListener("load",U),this.__data.addEventListener("error",F),zI[g]=this.__data)}))}setImageURL(g,I="RGB"){this.load(g,I)}getParams(){const g=super.getParams();return this.loaded&&(g.data=this.__data),g}toJSON(g){return{}}fromJSON(g,I){}readBinary(g,I){this.setName(g.loadStr());const C=g.loadStr();if("string"==typeof C&&""!=C){const g=I.url.substring(0,I.url.lastIndexOf("/"));this.load(g+"/"+C)}}}t.register("FileImage2D",fI),t.register("FileImage",fI);class LI extends fI{constructor(g,I,C){super(g,I,C)}}t.register("LDRImage",LI);class _I extends dI{constructor(g,I={}){let C;super(g),this.exposure=1,this.hdrTint=new A(1,1,1,1),null!=g&&g.includes(".")&&(C=g,this.setName(g.substring(g.lastIndexOf("/")+1,g.lastIndexOf(".")))),this.type="FLOAT",C&&this.load(C)}__decodeData(g){return new Promise(((I,C)=>{const F=g.ldr,U=g.cdm,l=new Blob([F.buffer]),t=new Image;t.onload=()=>{this.width=t.width,this.height=t.height,this.__data={ldr:t,cdm:U},this.loaded?this.emit("updated"):(this.loaded=!0,this.emit("loaded")),I()},t.src=URL.createObjectURL(l)}))}load(g){return this.loaded=!1,new Promise(((I,C)=>{const F=g.lastIndexOf("/")>-1?g.substring(g.lastIndexOf("/")+1):"",U=F.substring(0,F.lastIndexOf("."));""==this.getName()&&this.setName(U),this.type="FLOAT",mg.loadFile("archive",g).then((g=>{if(!g.ldr||!g.cdm)for(const I in g)I.endsWith(".jpg")?(g.ldr=g[I],delete g[I]):I.endsWith(".bin")&&(g.cdm=g[I],delete g[I]);this.__decodeData(g).then((()=>{I()}))}),(g=>{this.emit("error",g),C(g)}))}))}isStream(){return!1}getParams(){const g=super.getParams();return this.loaded&&(g.data=this.__data,g.exposure=this.exposure),g}setHDRTint(g){this.hdrTint=g}getHDRTint(){return this.hdrTint}toJSON(g){return{}}fromJSON(g,I){return{}}readBinary(g,I){this.setName(g.loadStr());let C=g.loadStr();"string"==typeof C&&""!=C&&this.load(C)}}t.register("HDRImage",_I);class OI extends fI{constructor(g,I,C){super(g,I,C),this.videoElem=new HTMLVideoElement,this.muteParam=new kg("Mute",!1),this.loopParam=new kg("Loop",!0),this.spatializeAudioParam=new kg("SpatializeAudio",!0),this.refDistanceParam=new Xg("refDistance",2),this.maxDistanceParam=new Xg("maxDistance",1e4),this.rolloffFactorParam=new Xg("rolloffFactor",1),this.coneInnerAngleParam=new Xg("coneInnerAngle",360),this.coneOuterAngleParam=new Xg("coneOuterAngle",0),this.coneOuterGainParam=new Xg("coneOuterGain",1),this.gainParam=new Xg("Gain",2),this.format="RGB",this.type="UNSIGNED_BYTE",this.addParameter(this.muteParam),this.addParameter(this.loopParam),this.addParameter(this.spatializeAudioParam),this.addParameter(this.refDistanceParam),this.addParameter(this.maxDistanceParam),this.addParameter(this.rolloffFactorParam),this.addParameter(this.coneInnerAngleParam),this.addParameter(this.coneOuterAngleParam),this.addParameter(this.coneOuterGainParam),this.addParameter(this.gainParam).setRange([0,5])}getAudioSource(){return this.videoElem}load(g,I="RGB"){return new Promise(((I,C)=>{mg.incrementWorkload(1),this.videoElem.style.display="none",this.videoElem.preload="auto",this.videoElem.crossOrigin="anonymous",document.body.appendChild(this.videoElem),this.videoElem.addEventListener("loadedmetadata",(()=>{this.videoElem.muted=this.muteParam.value,this.muteParam.on("valueChanged",(()=>{this.videoElem.muted=this.muteParam.value})),this.videoElem.loop=this.loopParam.value,this.loopParam.on("valueChanged",(()=>{this.videoElem.loop=this.loopParam.value})),this.width=this.videoElem.videoHeight,this.height=this.videoElem.videoWidth,this.loaded=!0,mg.incrementWorkDone(1),this.emit("loaded"),I(F);let g=0;const C=()=>{if(this.videoElem.paused||this.videoElem.ended)return;const I=Math.floor(29.97*this.videoElem.currentTime);g!=I&&(this.emit("updated"),g=I),setTimeout(C,20)};C()}),!1),this.videoElem.src=g;const F=this.videoElem.play();void 0!==F&&F.then((g=>{console.log("Autoplay started!")})).catch((()=>{console.log("Autoplay was prevented.")}))}))}getParams(){const g=super.getParams();return this.loaded&&(g.data=this.videoElem),g}}function jI(g){this.data=g,this.pos=0}function PI(g){this.stream=new jI(g),this.output={}}t.register("LDRVideo",OI),jI.prototype.readByte=function(){return this.data[this.pos++]},jI.prototype.peekByte=function(){return this.data[this.pos]},jI.prototype.readBytes=function(g){for(var I=new Array(g),C=0;C<g;C++)I[C]=this.readByte();return I},jI.prototype.peekBytes=function(g){for(var I=new Array(g),C=0;C<g;C++)I[C]=this.data[this.pos+C];return I},jI.prototype.readString=function(g){for(var I="",C=0;C<g;C++)I+=String.fromCharCode(this.readByte());return I},jI.prototype.readBitArray=function(){for(var g=[],I=this.readByte(),C=7;C>=0;C--)g.push(!!(I&1<<C));return g},jI.prototype.readUnsigned=function(g){var I=this.readBytes(2);return g?(I[1]<<8)+I[0]:(I[0]<<8)+I[1]},PI.prototype.parse=function(g){return this.parseParts(this.output,g),this.output},PI.prototype.parseParts=function(g,I){for(var C=0;C<I.length;C++){var F=I[C];this.parsePart(g,F)}},PI.prototype.parsePart=function(g,I){var C,F=I.label;if(!I.requires||I.requires(this.stream,this.output,g))if(I.loop){for(var U=[];I.loop(this.stream);){var l={};this.parseParts(l,I.parts),U.push(l)}g[F]=U}else I.parts?(C={},this.parseParts(C,I.parts),g[F]=C):I.parser?(C=I.parser(this.stream,this.output,g),I.skip||(g[F]=C)):I.bits&&(g[F]=this.parseBits(I.bits))},PI.prototype.parseBits=function(g){var I={},C=this.stream.readBitArray();for(var F in g){var U=g[F];U.length?I[F]=C.slice(U.index,U.index+U.length).reduce((function(g,I){return 2*g+I}),0):I[F]=C[U.index]}return I};var qI=function(){return function(g){return g.readByte()}},$I=function(g){return function(I){return I.readBytes(g)}},gC=function(g){return function(I){return I.readString(g)}},IC=function(g){return function(I){return I.readUnsigned(g)}},CC=function(g,I){return function(C,F,U){for(var l=I(C,F,U),t=new Array(l),e=0;e<l;e++)t[e]=C.readBytes(g);return t}},FC={label:"blocks",parser:function(g){for(var I=[],C=g.readByte();0!==C;C=g.readByte())I=I.concat(g.readBytes(C));return I}},UC={label:"gce",requires:function(g){var I=g.peekBytes(2);return 33===I[0]&&249===I[1]},parts:[{label:"codes",parser:$I(2),skip:!0},{label:"byteSize",parser:qI()},{label:"extras",bits:{future:{index:0,length:3},disposal:{index:3,length:3},userInput:{index:6},transparentColorGiven:{index:7}}},{label:"delay",parser:IC(!0)},{label:"transparentColorIndex",parser:qI()},{label:"terminator",parser:qI(),skip:!0}]},lC={label:"image",requires:function(g){return 44===g.peekByte()},parts:[{label:"code",parser:qI(),skip:!0},{label:"descriptor",parts:[{label:"left",parser:IC(!0)},{label:"top",parser:IC(!0)},{label:"width",parser:IC(!0)},{label:"height",parser:IC(!0)},{label:"lct",bits:{exists:{index:0},interlaced:{index:1},sort:{index:2},future:{index:3,length:2},size:{index:5,length:3}}}]},{label:"lct",requires:function(g,I,C){return C.descriptor.lct.exists},parser:CC(3,(function(g,I,C){return Math.pow(2,C.descriptor.lct.size+1)}))},{label:"data",parts:[{label:"minCodeSize",parser:qI()},FC]}]},tC={label:"text",requires:function(g){var I=g.peekBytes(2);return 33===I[0]&&1===I[1]},parts:[{label:"codes",parser:$I(2),skip:!0},{label:"blockSize",parser:qI()},{label:"preData",parser:function(g,I,C){return g.readBytes(C.text.blockSize)}},FC]},eC={label:"frames",parts:[UC,{label:"application",requires:function(g,I,C){var F=g.peekBytes(2);return 33===F[0]&&255===F[1]},parts:[{label:"codes",parser:$I(2),skip:!0},{label:"blockSize",parser:qI()},{label:"id",parser:function(g,I,C){return g.readString(C.blockSize)}},FC]},{label:"comment",requires:function(g,I,C){var F=g.peekBytes(2);return 33===F[0]&&254===F[1]},parts:[{label:"codes",parser:$I(2),skip:!0},FC]},lC,tC],loop:function(g){var I=g.peekByte();return 33===I||44===I}},QC=[{label:"header",parts:[{label:"signature",parser:gC(3)},{label:"version",parser:gC(3)}]},{label:"lsd",parts:[{label:"width",parser:IC(!0)},{label:"height",parser:IC(!0)},{label:"gct",bits:{exists:{index:0},resolution:{index:1,length:3},sort:{index:4},size:{index:5,length:3}}},{label:"backgroundColorIndex",parser:qI()},{label:"pixelAspectRatio",parser:qI()}]},{label:"gct",requires:function(g,I){return I.lsd.gct.exists},parser:CC(3,(function(g,I){return Math.pow(2,I.lsd.gct.size+1)}))},eC];function dC(g){var I=new PI(new Uint8Array(g));this.raw=I.parse(QC),this.raw.hasImages=!1;for(var C=0;C<this.raw.frames.length;C++)if(this.raw.frames[C].image){this.raw.hasImages=!0;break}}dC.prototype.decompressFrame=function(g,I){if(g>=this.raw.frames.length)return null;var C=this.raw.frames[g];if(C.image){var F=C.image.descriptor.width*C.image.descriptor.height,U=function(g,I,C){var F,U,l,t,e,Q,d,n,i,A,B,a,V,R,s,Z,o=4096,h=-1,c=C,r=new Array(C),m=new Array(o),W=new Array(o),J=new Array(o+1);for(e=(U=1<<(a=g))+1,F=U+2,d=h,l=(1<<(t=a+1))-1,i=0;i<U;i++)m[i]=0,W[i]=i;for(B=n=V=R=Z=s=0,A=0;A<c;){if(0===R){if(n<t){B+=I[s]<<n,n+=8,s++;continue}if(i=B&l,B>>=t,n-=t,i>F||i==e)break;if(i==U){l=(1<<(t=a+1))-1,F=U+2,d=h;continue}if(d==h){J[R++]=W[i],d=i,V=i;continue}for(Q=i,i==F&&(J[R++]=V,i=d);i>U;)J[R++]=W[i],i=m[i];V=255&W[i],J[R++]=V,F<o&&(m[F]=d,W[F]=V,0==(++F&l)&&F<o&&(t++,l+=F)),d=Q}R--,r[Z++]=J[R],A++}for(A=Z;A<c;A++)r[A]=0;return r}(C.image.data.minCodeSize,C.image.data.blocks,F);C.image.descriptor.lct.interlaced&&(U=function(g,I){for(var C=new Array(g.length),F=g.length/I,U=function(F,U){var l=g.slice(U*I,(U+1)*I);C.splice.apply(C,[F*I,I].concat(l))},l=[0,4,2,1],t=[8,8,4,2],e=0,Q=0;Q<4;Q++)for(var d=l[Q];d<F;d+=t[Q])U(d,e),e++;return C}(U,C.image.descriptor.width));var l={pixels:U,dims:{top:C.image.descriptor.top,left:C.image.descriptor.left,width:C.image.descriptor.width,height:C.image.descriptor.height}};return C.image.descriptor.lct&&C.image.descriptor.lct.exists?l.colorTable=C.image.lct:l.colorTable=this.raw.gct,C.gce&&(l.delay=10*(C.gce.delay||10),l.disposalType=C.gce.extras.disposal,C.gce.extras.transparentColorGiven&&(l.transparentIndex=C.gce.transparentColorIndex)),I&&(l.patch=function(g){for(var I=g.pixels.length,C=new Uint8ClampedArray(4*I),F=0;F<I;F++){var U=4*F,l=g.pixels[F],t=g.colorTable[l];C[U]=t[0],C[U+1]=t[1],C[U+2]=t[2],C[U+3]=l!==g.transparentIndex?255:0}return C}(l)),l}return null},dC.prototype.decompressFrames=function(g){for(var I=[],C=0;C<this.raw.frames.length;C++){this.raw.frames[C].image&&I.push(this.decompressFrame(C,g))}return I};const nC={};class iC extends fI{constructor(g,I="",C={}){super(g,I,C),this.streamAtlasDescParam=new Tg("StreamAtlasDesc"),this.streamAtlasIndexParam=new Xg("StreamAtlasIndex",0),this.format="RGBA",this.type="UNSIGNED_BYTE",this.__streamAtlas=!0,this.addParameter(this.streamAtlasDescParam),this.addParameter(this.streamAtlasIndexParam);const F=this.streamAtlasIndexParam;let U;F.setRange([0,1]);let l=0;const t=g=>{F.value=l,U&&setTimeout((()=>t(g)),this.getFrameDelay(l)),l=(l+1)%g};this.play=()=>{this.__resourcePromise.then((()=>{U=!0;let g=F.getRange();if(!g)return void console.warn("numFrames is null");const I=g[1];t(I)}))},this.stop=()=>{U=!1}}getFrameDelay(g){return 10*this.__unpackedData.frameDelays[g]}load(g,I="RGB"){return g in nC?(this.__resourcePromise=nC[g],this.__resourcePromise):(this.__resourcePromise=new Promise(((I,C)=>{mg.incrementWorkload(1),sg(g,(C=>{console.warn("Unpacking Gif client side:"+g);const F=performance.now(),U=new dC(C).decompressFrames(!0),l=Math.sqrt(U.length),t=[l,l];s.fract(l)>0&&(t[0]=Math.floor(t[0]+1),s.fract(l)>.5?t[1]=Math.floor(t[1]+1):t[1]=Math.floor(t[1]));const e=U[0].dims.width,Q=U[0].dims.height,d=document.createElement("canvas"),n=d.getContext("2d"),i=document.createElement("canvas"),A=i.getContext("2d");i.width=e,i.height=Q;const B=document.createElement("canvas"),a=B.getContext("2d");let V;B.width=t[0]*e,B.height=t[1]*Q;const R=[],Z=(g,I)=>{const C=g.dims;R.push(g.delay/10),V&&C.width==V.width&&C.height==V.height||(d.width=C.width,d.height=C.height,V=null==n?void 0:n.createImageData(C.width,C.height)),V.data.set(g.patch),null==n||n.putImageData(V,0,0),2==g.disposalType&&(null==A||A.clearRect(0,0,i.width,i.height)),null==A||A.drawImage(d,C.left,C.top),null==a||a.drawImage(i,I%t[0]*e,Math.floor(I/t[0])*Q)};for(let g=0;g<U.length;g++)Z(U[g],g);mg.incrementWorkDone(1);const o=null==a?void 0:a.getImageData(0,0,B.width,B.height),h=performance.now()-F;console.log(`Decode GIF '${g}' time:`+h),I({width:B.width,height:B.height,atlasSize:t,frameRange:[0,U.length],frameDelays:R,imageData:o})}),(I=>{const F="Unable to Load URL:"+I+":"+g;console.warn(F),C(F)}))})),nC[g]=this.__resourcePromise,this.__resourcePromise.then((g=>{this.width=g.width,this.height=g.height,this.streamAtlasDescParam.value=new n(g.atlasSize[0],g.atlasSize[1],0,0),this.streamAtlasIndexParam.setRange(g.frameRange),this.__unpackedData=g,this.__data=g.imageData,this.loaded=!0,this.emit("loaded")})),this.__resourcePromise)}}t.register("GIFImage",iC);class AC extends _I{constructor(g,I={}){super(g,I),this.headlightModeParam=new kg("HeadLightMode",!1),this.addParameter(this.headlightModeParam),this.utf8decoder=new TextDecoder,this.shCoeffs=[]}__decodeData(g){const I=g.samples;if(I&&(this.luminanceData=JSON.parse(this.utf8decoder.decode(I)),this.luminanceData.shCoeffs))for(let g=0;g<9;g++)this.shCoeffs[g]=new A(this.luminanceData.shCoeffs[3*g+0],this.luminanceData.shCoeffs[3*g+1],this.luminanceData.shCoeffs[3*g+2]);return super.__decodeData(g)}dirToLuminance(g){const I=g.x,C=g.y,F=g.z,U=this.shCoeffs[0].scale(.886227);return U.addInPlace(this.shCoeffs[1].scale(1.023328*C)),U.addInPlace(this.shCoeffs[2].scale(1.023328*F)),U.addInPlace(this.shCoeffs[3].scale(1.023328*I)),U.addInPlace(this.shCoeffs[4].scale(.858086*I*C)),U.addInPlace(this.shCoeffs[5].scale(.858086*C*F)),U.addInPlace(this.shCoeffs[6].scale(.743125*F*F-.247708)),U.addInPlace(this.shCoeffs[7].scale(.858086*I*F)),U.addInPlace(this.shCoeffs[8].scale(.429043*(I*I-C*C))),U.luminance()}}t.register("EnvMap",AC);class BC extends b{constructor(){super(),this.__labelLibraries={},this.__language=function(){if(!globalThis.navigator)return"en";const g=new URLSearchParams(window.location.search);if(g.has("lang"))return g.get("lang");const I=globalThis.navigator;let C,F;const U=g=>g.startsWith("en")?"En":g.startsWith("es")?"Es":g.startsWith("fr")?"Fr":g.startsWith("gb")||g.startsWith("de")?"Gb":g;if(Array.isArray(I.languages))for(C=0;C<I.languages.length;C++)if(F=I.languages[C],F&&F.length)return U(F);return null}(),this.__foundLabelLibraries={}}loadLibrary(g,I){const C=g.substring(0,g.lastIndexOf("."));if(this.__foundLabelLibraries[C]=I,g.endsWith(".labels"))Rg(I,(g=>{this.__labelLibraries[C]=JSON.parse(g),this.emit("labelLibraryLoaded",{library:C})}));else if(g.endsWith(".xlsx")){const g=globalThis.XLSX;sg(I,(I=>{const F=new Uint8Array(I),U=g.read(F,{type:"array"}),l={};U.SheetNames.forEach((function(I){g.utils.sheet_to_json(U.Sheets[I],{}).forEach((function(g){const I=g.Identifier;delete g.Identifier,l[I]=g}))})),this.__labelLibraries[C]=l,this.emit("labelLibraryLoaded",{library:C})}))}}isLibraryFound(g){return g in this.__foundLabelLibraries}isLibraryLoaded(g){return g in this.__labelLibraries}getLabelText(g,I){const C=this.__labelLibraries[g];if(!C)throw new Error("LabelLibrary: '"+g+"' not found in LabelManager. Found: ["+Object.keys(this.__labelLibraries)+"]");const F=C[I];if(!F)throw new Error("Label: '"+I+"' not found in LabelLibrary: '"+g+"'. Found: ["+Object.keys(C)+"]");const U=F[this.__language];if(!U){if(F.En)return F.En;throw new Error("labelText: '"+this.__language+"' not found in Label. Found: ["+Object.keys(F)+"]")}return U}setLabelText(g,I,C){let F=this.__labelLibraries[g];F||(F={},this.__labelLibraries[g]=F);let U=F[I];U||(U={},F[I]=U),U[this.__language]=C}setLanguage(g){this.__language=g}}const aC=new BC;class VC extends wI{constructor(g,I){super(g),this.requestedReRender=!1,this.libraryParam=new wg("Library"),this.textParam=new wg("Text",""),this.fontColorParam=new Dg("FontColor",new A(0,0,0)),this.fontSizeParam=new Xg("FontSize",22),this.fontParam=new wg("Font","Helvetica"),this.borderWidthParam=new Xg("BorderWidth",2),this.outlineParam=new kg("Outline",!1),this.outlineColorParam=new Dg("OutlineColor",new A(0,0,0)),this.backgroundParam=new kg("Background",!0),this.backgroundColorParam=new Dg("BackgroundColor",new A("#FBC02D")),this.fillBackgroundParam=new kg("FillBackground",!0),this.strokeBackgroundOutlineParam=new kg("StrokeBackgroundOutline",!0),this.canvasElem=document.createElement("canvas");this.marginParam=new Xg("Margin",11),this.borderRadiusParam=new Xg("BorderRadius",11),this.addParameter(this.marginParam),this.addParameter(this.borderRadiusParam),this.addParameter(this.libraryParam),this.addParameter(this.textParam),this.addParameter(this.fontColorParam),this.addParameter(this.fontSizeParam),this.addParameter(this.fontParam),this.addParameter(this.borderWidthParam),this.addParameter(this.outlineParam),this.addParameter(this.outlineColorParam),this.addParameter(this.backgroundParam),this.addParameter(this.backgroundColorParam),this.addParameter(this.fillBackgroundParam),this.addParameter(this.strokeBackgroundOutlineParam);this.on("nameChanged",(()=>{this.loadLabelData()})),I&&(this.libraryParam.value=I),this.requestedReRender=!1,this.needsRender=!1,this.loadLabelData()}__parameterValueChanged(g){super.parameterValueChanged(g),this.requestedReRender||(this.requestedReRender=!0,this.loadLabelData())}loadLabelData(){Promise.all([(()=>new Promise((g=>{const I=this.libraryParam.value;if(""==I)return void g();if(!aC.isLibraryFound(I))return console.warn("Label Library not found:",I),void g();const C=()=>{try{const g=this.getName(),C=aC.getLabelText(I,g);this.textParam.value=C}catch(g){console.warn(g)}g()};aC.isLibraryLoaded(I)?C():aC.on("labelLibraryLoaded",(g=>{g.library==I&&C()}))})))(),(()=>new Promise((g=>{if(null!=document.fonts){const I=this.fontParam.value,C=this.fontSizeParam.value;document.fonts.load(C+'px "'+I+'"').then((()=>{g()}))}else g()})))()]).then((()=>{this.requestedReRender=!1,this.needsRender=!0,this.loaded?this.emit("updated"):(this.loaded=!0,this.emit("loaded"))}))}renderLabelToImage(){const g=this.canvasElem.getContext("2d",{alpha:!0});let I=this.textParam.value;""==I&&(I=this.getName());const C=this.fontParam.value,F=this.fontColorParam.value,U=this.fontSizeParam.value,l=this.marginParam.value,t=this.borderWidthParam.value,e=this.borderRadiusParam.value,Q=this.outlineParam.value,d=this.outlineColorParam.value,n=this.backgroundParam.value,i=this.backgroundColorParam.value,A=this.fillBackgroundParam.value,B=this.strokeBackgroundOutlineParam.value,a=l+t,V=I.split("\n");g.font=U+'px "'+C+'"';let R=0;V.forEach((I=>{R=Math.max(g.measureText(I).width,R)}));const s=U;this.width=Math.ceil(R+2*a),this.height=Math.ceil(s*V.length+2*a),g.canvas.width=this.width,g.canvas.height=this.height,this.canvasElem.width=this.width,this.canvasElem.height=this.height,g.fillStyle="rgba(0, 0, 0, 0.0)",g.fillRect(0,0,this.width,this.height),n&&(g.fillStyle=i.toHex(),g.strokeStyle=d.toHex(),function(g,I,C,F,U,l,t=!1,e=!0,Q){if(void 0===e&&(e=!0),void 0===l&&(l=5),"number"==typeof l)l={tl:l,tr:l,br:l,bl:l};else{const g={tl:0,tr:0,br:0,bl:0};for(const I in g)l[I]=l[I]||g[I]}g.beginPath(),g.moveTo(I+l.tl,C),g.lineTo(I+F-l.tr,C),g.quadraticCurveTo(I+F,C,I+F,C+l.tr),g.lineTo(I+F,C+U-l.br),g.quadraticCurveTo(I+F,C+U,I+F-l.br,C+U),g.lineTo(I+l.bl,C+U),g.quadraticCurveTo(I,C+U,I,C+U-l.bl),g.lineTo(I,C+l.tl),g.quadraticCurveTo(I,C,I+l.tl,C),g.closePath(),t&&g.fill(),e&&(g.lineWidth=Q,g.stroke())}(g,t,t,this.width-2*t,this.height-2*t,e,A,B,t)),g.font=U+'px "'+C+'"',g.textAlign="left",g.fillStyle=F.toHex(),g.textBaseline="hanging",V.forEach(((I,C)=>{g.fillText(I,a,a+C*s)})),Q&&(g.strokeStyle=d.toHex(),g.lineWidth=1.5,g.strokeText(I,a,a)),this.__data=g.getImageData(0,0,this.width,this.height),this.needsRender=!1,this.emit("labelRendered",{width:this.width,height:this.height,data:this.__data})}getParams(){return this.needsRender&&this.renderLabelToImage(),super.getParams()}toJSON(g){return super.toJSON(g)}fromJSON(g,I){super.fromJSON(g,I)}}t.register("Label",VC);class RC extends dI{constructor(){super("")}connectWebcam(g,I,C=!1){const F={width:g,height:I,frameRate:{ideal:60,max:60}};F.facingMode=C?{exact:"environment"}:{facingMode:"user"};const U=document.createElement("video");U.style.display="none",U.preload="auto",U.crossOrigin="anonymous",document.body.appendChild(U),navigator.mediaDevices.getUserMedia({audio:!1,video:F}).then((g=>{U.srcObject=g,U.onloadedmetadata=g=>{U.play(),this.width=U.videoWidth,this.height=U.videoHeight,console.log("Webcam:["+this.width+", "+this.height+"]"),this.__data=U,this.loaded=!0,this.emit("loaded");let I=0;const C=()=>{if(U.paused||U.ended)return;const g=Math.floor(60*U.currentTime);I!=g&&(this.emit("updated"),I=g),setTimeout(C,20)};C()}})).catch((function(g){}))}setVideoStream(g){this.loaded=!1,this.width=g.videoWidth,this.height=g.videoHeight,this.start(),this.__data=g,this.loaded=!0,this.emit("loaded")}stop(){clearInterval(this.__intervalId)}start(){this.__intervalId=setInterval((()=>{this.emit("updated")}),20)}isLoaded(){return this.loaded}getParams(){return{type:this.type,format:this.format,width:this.width,height:this.height,data:this.__data,flipY:!0}}}t.register("VideoStreamImage2D",RC);class sC extends AI{constructor(g){super(g),this.baseColorParam=new iI("BaseColor",new A(1,1,.5)),this.opacityParam=new Xg("Opacity",1),this.lineThicknessParam=new Xg("LineThickness",.01),this.overlayParam=new Xg("Overlay",0),this.__shaderName="FatLinesShader",this.addParameter(this.baseColorParam),this.addParameter(this.opacityParam),this.addParameter(this.overlayParam),this.addParameter(this.lineThicknessParam)}}t.register("FatLinesMaterial",sC);class ZC extends AI{constructor(g){super(g),this.baseColorParam=new iI("BaseColor",new A(1,1,.5)),this.pointSizeParam=new Xg("PointSize",1),this.roundedParam=new Xg("Rounded",1),this.borderWidthParam=new Xg("BorderWidth",.2),this.overlayParam=new Xg("Overlay",0),this.__shaderName="FatPointsShader",this.addParameter(this.baseColorParam),this.addParameter(this.pointSizeParam),this.addParameter(this.roundedParam),this.addParameter(this.borderWidthParam),this.addParameter(this.overlayParam)}}t.register("FatPointsMaterial",ZC);class oC extends AI{constructor(g){super(g),this.baseColorParam=new iI("BaseColor",new A(1,1,.5)),this.__shaderName="FlatSurfaceShader",this.addParameter(this.baseColorParam)}}t.register("FlatSurfaceMaterial",oC);class hC extends AI{constructor(g){super(g),this.baseColorParam=new iI("BaseColor",new A(1,1,.5)),this.opacityParam=new nI("Opacity",.7,[0,1]),this.overlayParam=new nI("Overlay",1e-6),this.stippleScaleParam=new Xg("StippleScale",.01),this.stippleValueParam=new Xg("StippleValue",0,[0,1]),this.occludedStippleValueParam=new Xg("OccludedStippleValue",1,[0,1]),this.__shaderName="LinesShader",this.addParameter(this.baseColorParam),this.addParameter(this.opacityParam),this.addParameter(this.overlayParam),this.addParameter(this.stippleScaleParam),this.addParameter(this.stippleValueParam),this.addParameter(this.occludedStippleValueParam)}}t.register("LinesMaterial",hC);class cC extends AI{constructor(g){super(g),this.baseColorParam=new iI("BaseColor",new A(1,1,.5)),this.pointSizeParam=new nI("PointSize",2),this.overlayParam=new nI("Overlay",2e-5),this.__shaderName="PointsShader",this.addParameter(this.baseColorParam),this.addParameter(this.pointSizeParam),this.addParameter(this.overlayParam)}}t.register("PointsMaterial",cC);class rC extends AI{constructor(g){super(g),this.baseColorParam=new iI("BaseColor",new A(1,1,.5)),this.__shaderName="ScreenSpaceShader",this.addParameter(this.baseColorParam)}}t.register("ScreenSpaceMaterial",rC);class mC extends AI{constructor(g){super(g),this.baseColorParam=new iI("BaseColor",new A(1,1,.5)),this.opacityParam=new nI("Opacity",1,[0,1]),this.emissiveStrengthParam=new nI("EmissiveStrength",0,[0,1]),this.__shaderName="SimpleSurfaceShader",this.addParameter(this.baseColorParam),this.addParameter(this.opacityParam),this.addParameter(this.emissiveStrengthParam)}}t.register("SimpleSurfaceMaterial",mC);class WC extends AI{constructor(g){super(g),this.baseColorParam=new iI("BaseColor",new A(1,1,.5)),this.normalParam=new iI("Normal",new A(1,1,.5)),this.ambientOcclusion=new nI("AmbientOcclusion",1,[0,1]),this.metallicParam=new nI("Metallic",.05,[0,1]),this.roughnessParam=new nI("Roughness",.5,[0,1]),this.reflectanceParam=new nI("Reflectance",.5,[0,1]),this.emissiveStrengthParam=new nI("EmissiveStrength",0,[0,1]),this.opacityParam=new nI("Opacity",1,[0,1]),this.__shaderName="StandardSurfaceShader",this.addParameter(this.baseColorParam),this.addParameter(this.normalParam),this.addParameter(this.ambientOcclusion),this.addParameter(this.metallicParam),this.addParameter(this.roughnessParam),this.addParameter(this.reflectanceParam),this.addParameter(this.emissiveStrengthParam),this.addParameter(this.opacityParam)}}t.register("StandardSurfaceMaterial",WC);class JC extends FI{constructor(g){super(g),this.srcTreePath=[],this.srcTree=null}setSrcTree(g,I){this.srcTree=g;const C=this.srcTree.clone(I);C.localXfoParam.value=new o,this.addChild(C,!1)}getSrcTree(){return this.srcTree}readBinary(g,I){if(super.readBinary(g,I),this.srcTreePath=g.loadStrArray(),this.srcTreePath.length>0)try{I.resolvePath(this.srcTreePath,(g=>{this.setSrcTree(g,I)}),(g=>{console.warn(`Error loading InstanceItem: ${this.getPath()}, unable to resolve: ${this.srcTreePath}. `+g.message)}))}catch(g){console.warn(`Error loading InstanceItem: ${this.getPath()}: `+g)}}toJSON(g={}){return super.toJSON(g)}fromJSON(g,I={}){}clone(g){const I=new JC;return I.copyFrom(this,g),I}copyFrom(g,I){super.copyFrom(g,I),this.srcTreePath=g.srcTreePath,this.srcTreePath.length>0&&0==this.getNumChildren()&&g.once("childAdded",(g=>{const C=g.childItem;this.setSrcTree(C,I)}))}}t.register("InstanceItem",JC);class GC extends FI{constructor(g){super(g),this.materialParam=new BI("Material"),this.overlay=!1,this.__cutAway=!1,this.__cutAwayVector=new d(1,0,0),this.__cutAwayDist=0,this.__layers=[]}setOverlay(g){this.overlay=g}isOverlay(){return this.overlay}addLayer(g){this.__layers.push(g)}getLayers(){return this.__layers}isCutawayEnabled(){return this.__cutAway}setCutawayEnabled(g){this.__cutAway=g,this.emit("cutAwayChanged")}getCutVector(){return this.__cutAwayVector}setCutVector(g){this.__cutAwayVector=g,this.emit("cutAwayChanged")}getCutDist(){return this.__cutAwayDist}setCutDist(g){this.__cutAwayDist=g,this.emit("cutAwayChanged")}readBinary(g,I){if(super.readBinary(g,I),I.versions["zea-engine"].compare([0,0,4])>=0){const C=g.loadStr();let F=I.assetItem.getMaterialLibrary().getMaterial(C,!1);if(F||(F=new AI(C,"SimpleSurfaceShader"),F.getParameter("BaseColor").loadValue(A.random(.25)),I.assetItem.getMaterialLibrary().addMaterial(F)),this.materialParam.loadValue(F),this.__layers=g.loadStrArray(),this.__layers.length>0)for(const g of this.__layers)I.addGeomToLayer(this,g)}}}let bC=!1;class NC extends qg{constructor(g,I,C){super("CalcGeomMatOperator"),this.globalXfo=new gI("GlobalXfo"),this.geomOffsetXfo=new gI("GeomOffsetXfo"),this.geomMat=new Pg("GeomMat"),this.globalXfo.setParam(g),this.geomOffsetXfo.setParam(I),this.geomMat.setParam(C),this.addInput(this.globalXfo),this.addInput(this.geomOffsetXfo),this.addOutput(this.geomMat)}evaluate(){const g=this.globalXfo.getValue().toMat4(),I=this.geomOffsetXfo.getValue().toMat4();this.geomMat.setClean(g.multiply(I))}}class SC extends GC{constructor(g,I,C,F){super(g),this.listenerIDs={},this.geomIndex=-1,this.assetItem=null,this.cullable=!0,this.geomOffsetXfoParam=new Kg("GeomOffsetXfo"),this.geomParam=new eI("Geometry"),this.geomMatParam=new Hg("GeomMat"),this.addParameter(this.geomParam),this.addParameter(this.materialParam),this.addParameter(this.geomOffsetXfoParam),this.addParameter(this.geomMatParam);const U=()=>{this.setBoundingBoxDirty()};this.geomParam.on("valueChanged",U),this.geomParam.on("boundingBoxChanged",U),this.calcGeomMatOperator=new NC(this.globalXfoParam,this.geomOffsetXfoParam,this.geomMatParam),I&&this.geomParam.loadValue(I),C&&this.materialParam.loadValue(C),F&&(this.localXfoParam.value=F)}_cleanBoundingBox(g){if(this.disableBoundingBox)return g;if(g=super._cleanBoundingBox(g),this.geomBBox){const I=this.geomMatParam.value;g.addPoint(I.transformVec3(this.geomBBox.p0)),g.addPoint(I.transformVec3(this.geomBBox.p1))}else{const I=this.geomParam.value;if(I)if(bC){const C=this.geomMatParam.value;if(I instanceof WI){const F=I.__buffers.attrBuffers.positions.values,U=g=>{const I=3*g;return new d(F.subarray(I,I+3))};for(let F=0;F<I.getNumVertices();F++)g.addPoint(C.transformVec3(U(F)))}else{const F=I.getVertexAttribute("positions");for(let U=0;U<I.getNumVertices();U++)g.addPoint(C.transformVec3(F.getValueRef(U)))}}else g.addBox3(I.getBoundingBox(),this.geomMatParam.value)}return g}toJSON(g){return super.toJSON(g)}fromJSON(g,I){super.fromJSON(g,I),I.numGeomItems++}readBinary(g,I){super.readBinary(g,I),I.numGeomItems++;const C=g.loadUInt8(),F=g.loadUInt32(),U=I.assetItem.getGeometryLibrary();this.geomIndex=F,this.assetItem=I.assetItem;const l=U.getGeom(F);if(l)this.geomParam.loadValue(l);else{const g=g=>{const{range:C}=g;if(F>=C[0]&&F<C[1]){const g=U.getGeom(F);g?this.geomParam.value=g:console.warn("Geom not loaded:",this.getName()),U.removeListenerById("rangeLoaded",I)}},I=U.on("rangeLoaded",g)}if(4&C&&(this.geomOffsetXfoParam.value=new o(g.loadFloat32Vec3(),g.loadFloat32Quat(),g.loadFloat32Vec3())),I.versions["zea-engine"].compare([0,0,4])<0){if(C&8){const C=I.assetItem.getMaterialLibrary(),F=g.loadStr();let U=C.getMaterial(F);U||(console.warn("Geom :'"+this.__name+"' Material not found:"+F),U=C.getMaterial("Default")),this.materialParam.loadValue(U)}else this.materialParam.loadValue(I.assetItem.getMaterialLibrary().getMaterial("Default"))}I.versions["zea-engine"].compare([3,0,0])<0?g.loadFloat32Vec2():this.geomBBox=new r(g.loadFloat32Vec3(),g.loadFloat32Vec3())}toString(g){return JSON.stringify(this.toJSON(g),null,2)}clone(g){const I=new SC;return I.copyFrom(this,g),I}copyFrom(g,I){if(super.copyFrom(g,I),!g.geomParam.value&&-1!=g.geomIndex){const I=g.assetItem.getGeometryLibrary();this.assetItem=g.assetItem,this.geomIndex=g.geomIndex,this.geomBBox=g.geomBBox;const C=g=>{const{range:C}=g;if(this.geomIndex>=C[0]&&this.geomIndex<C[1]){const g=I.getGeom(this.geomIndex);g?this.geomParam.value=g:console.warn("Geom not loaded:",this.getName()),I.removeListenerById("rangeLoaded",this.listenerIDs.rangeLoaded)}};this.listenerIDs.rangeLoaded=I.on("rangeLoaded",C)}this.geomMatParam.setDirty(0)}static setCalculatePreciseBoundingBoxes(g){bC=g}}t.register("GeomItem",SC);class uC extends FI{constructor(g){super(g),this.itemsParam=new tI("Items",(g=>g instanceof FI)),this.__itemsEventHandlers=[],this.addParameter(this.itemsParam),this.itemsParam.on("itemAdded",(g=>{this.bindItem(g.item,g.index)})),this.itemsParam.on("itemRemoved",(g=>{this.unbindItem(g.item,g.index)}))}setSearchRoot(g){this.searchRoot=g}setOwner(g){this.searchRoot&&this.searchRoot!=this.getOwner()||(this.searchRoot=g),super.setOwner(g)}bindItem(g,I){if(!(g instanceof FI))return;const C={};C.pointerDown=g.on("pointerDown",(g=>{this.onPointerDown(g)})),C.pointerUp=g.on("pointerUp",(g=>{this.onPointerUp(g)})),C.pointerMove=g.on("pointerMove",(g=>{this.onPointerMove(g)})),C.pointerEnter=g.on("pointerEnter",(g=>{this.onPointerEnter(g)})),C.pointerLeave=g.on("pointerLeave",(g=>{this.onPointerLeave(g)})),this.__itemsEventHandlers.splice(I,0,C)}unbindItem(g,I){if(!(g instanceof FI))return;const C=this.__itemsEventHandlers[I];for(let I in C){const F=I.split(".");if(F.length>1){const U=g.getParameter(F[0]);U&&U.removeListenerById(F[1],C[I])}else g.removeListenerById(I,C[I])}this.__itemsEventHandlers.splice(I,1)}addItem(g,I=!0){g?this.itemsParam.addItem(g,I):console.warn("Error adding item to group. Item is null")}removeItem(g,I=!0){const C=this.itemsParam.value;if(!C)return;const F=Array.from(C).indexOf(g);F&&this.itemsParam.removeItem(F,I)}clearItems(g=!0){const I=this.itemsParam.value;if(!I)return;const C=Array.from(I);for(let g=C.length-1;g>=0;g--)this.unbindItem(C[g],g);this.itemsParam.clearItems(g)}getItems(){return this.itemsParam.value}setItems(g){this.clearItems(!1),this.itemsParam.setItems(g)}toJSON(g){const I=super.toJSON(g),C=this.itemsParam.value;if(C){const F=Array.from(C),U=[];F.forEach((I=>{const C=I.getPath();U.push(g?g.makeRelative(C):C)})),I.treeItems=U}return I}fromJSON(g,I){if(super.fromJSON(g,I),!g.treeItems)return void console.warn("Invalid Parameter JSON");if(!I)throw new Error("Unable to load JSON on a BaseGroup without a load context");let C=g.treeItems.length;const F=g=>{I.resolvePath(g,(g=>{this.addItem(g),C--,0==C&&this.loadDone()}),(()=>{console.warn("BaseGroup: '"+this.getName()+"'. Unable to load item:"+g)}))};for(const I of g.treeItems)F(I)}loadDone(){}copyFrom(g,I){super.copyFrom(g,I)}}class yC extends uC{constructor(g){super(g),this.highlightedParam=new kg("Highlighted",!1),this.highlightColorParam=new Dg("HighlightColor",new A(.5,.5,1)),this.highlightFillParam=new Xg("HighlightFill",0,[0,1]),this.addParameter(this.highlightedParam),this.highlightedParam.on("valueChanged",(()=>{this.updateHighlight()})),this.addParameter(this.highlightColorParam),this.highlightColorParam.on("valueChanged",(()=>{this.updateHighlight()})),this.addParameter(this.highlightFillParam),this.highlightFillParam.on("valueChanged",(()=>{this.updateHighlight()}))}updateVisibility(){if(super.updateVisibility()){const g=this.isVisible();return Array.from(this.itemsParam.value).forEach((I=>{I instanceof FI&&I.propagateVisibility(g?1:-1)})),!0}return!1}updateHighlight(){this.__updateHighlightHelper()}__updateHighlightHelper(){let g,I=!1;(this.highlightedParam.value||this.isSelected())&&(I=!0,g=this.highlightColorParam.value,g.a=this.highlightFillParam.value);const C="groupItemHighlight"+this.getId();Array.from(this.itemsParam.value).forEach((F=>{F instanceof FI&&(I?F.addHighlight(C,g,!0):F.removeHighlight(C,!0))}))}setSelected(g){super.setSelected(g),this.updateHighlight()}bindItem(g,I){super.bindItem(g,I);const C=this.__itemsEventHandlers[I];if(g instanceof FI){if(g instanceof FI&&this.highlightedParam.value){const I=this.highlightColorParam.value;I.a=this.highlightFillParam.value,g.addHighlight("groupItemHighlight"+this.getId(),I,!0)}this.isVisible()||g.propagateVisibility(-1),C["BoundingBox.valueChanged"]=g.boundingBoxParam.on("valueChanged",(g=>{this.setBoundingBoxDirty()}))}}unbindItem(g,I){super.unbindItem(g,I),g instanceof FI&&(this.highlightedParam.value&&g.removeHighlight("groupItemHighlight"+this.getId(),!0),this.isVisible()||g.propagateVisibility(1),g.traverse((g=>{g instanceof GC&&g.setCutawayEnabled(!1)}),!0))}clone(g){const I=new yC(this.__name+" clone");return I.copyFrom(this,g),I}}t.register("SelectionSet",yC);var XC=og("",null,!1);const pC=C.hardwareConcurrency-1;let kC=0;const YC=[],EC=[],TC=(g,I)=>{const C=kC;if(!YC[C]){EC[C]=new Map;const g=new XC;g.onmessage=g=>{const I=g.data;EC[C][I.geomLibraryId](I)},YC[C]=g}EC[C][g]=C=>{if(I(C))for(let I=0;I<EC.length;I++)EC[I][g]&&(delete EC[I][g],0==Object.keys(EC[I]).length&&(YC[I].terminate(),YC[I]=null))};const F=YC[C];return kC=(C+1)%pC,F};class DC extends b{constructor(){super(),this.listenerIDs={},this.__numGeoms=-1,this.geoms=[],this.basePath="",this.__loadedCount=0,this.__streamInfos={},this.__genBuffersOpts={},this.loadCount=0,this.queue=[],this.on("streamFileParsed",(g=>{if(this.loadCount--,this.loadCount<pC&&this.queue.length){const{geomFileID:g,geomsData:I}=this.queue.pop();this.readBinaryBuffer(g,I.buffer,this.loadContext)}})),this.clear()}clear(){this.__loadedCount=0,this.__numGeoms=-1,this.geoms=[]}isLoaded(){return this.__loadedCount==this.__numGeoms}loadGeomFile(g,I=!1){return I&&mg.incrementWorkload(1),new Promise((I=>{const C=this.basePath+g+".zgeoms";mg.loadFile("archive",C).then((F=>{const U=F[Object.keys(F)[0]],l=this.on("streamFileParsed",(C=>{C.geomFileID==g&&(mg.incrementWorkDone(1),this.removeListenerById("streamFileParsed",l),I())}));this.loadCount<pC?(this.loadCount++,this.readBinaryBuffer(C,U.buffer,this.loadContext)):this.queue.splice(0,0,{geomFileID:g,geomsData:U})}))}))}loadGeomFilesStream(g,I,C){const F=g.numGeomsPerFile.length;mg.incrementWorkload(F),this.__numGeoms=g.numGeoms,this.basePath=I,this.loadContext=C;for(let g=0;g<F;g++)this.loadGeomFile(g,!1)}setGenBufferOption(g,I){this.__genBuffersOpts[g]=I}setNumGeoms(g){this.__numGeoms=g}getNumGeoms(){return this.__numGeoms}getGeom(g){return g>=this.geoms.length?null:this.geoms[g]}readBinaryBuffer(g,I,F){const U=new Sg(I,0,C.isMobileDevice),l=U.loadUInt32(),t=U.loadUInt32();if(this.__streamInfos[g]={total:l,done:0},0==l){const I=new z(g,0);return void this.emit("streamFileParsed",I)}-1==this.__numGeoms&&(this.__numGeoms=l);const e=U.loadUInt32Array(l),Q=Math.max(1,Math.floor(l/pC+1));let d=0;for(;d<l;){const C=e[d];let n,i;d+Q>=l?(i=[d,l],n=I.byteLength):(i=[d,d+Q],n=e[i[1]]);const A=I.slice(C,n);d+=Q,TC(this.getId(),(g=>this.__receiveGeomDatas(g))).postMessage({geomLibraryId:this.getId(),geomFileID:g,toc:e,geomIndexOffset:t,geomsRange:i,isMobileDevice:U.isMobileDevice,bufferSlice:A,genBuffersOpts:this.__genBuffersOpts,context:{versions:F.versions}},[A])}}__receiveGeomDatas(g){const{geomLibraryId:I,geomFileID:C,geomDatas:F,geomIndexOffset:U,geomsRange:l}=g;if(I!=this.getId())throw new Error("Receiving workload for a different GeomLibrary");const t=U+l[0],e=[t,U+l[1]];for(let g=0;g<F.length;g++){const I=F[g];if(!I.type)continue;let C;switch(I.type){case"Points":C=new JI(I);break;case"Lines":C=new GI(I);break;case"Mesh":case"Plane":case"Sphere":case"Cone":C=new bI(I);break;default:throw new Error("Unsupported Geom type:")}this.geoms[t+g]=C}const Q=new v(e);this.emit("rangeLoaded",Q);const d=e[1]-e[0],n=this.__streamInfos[C];if(n.done+=d,n.done==n.total){const g=new z(C,n.done);this.emit("streamFileParsed",g)}return this.__loadedCount+=d,this.__loadedCount==this.__numGeoms&&this.emit("loaded"),this.__loadedCount==this.__numGeoms}toJSON(){return{numGeoms:this.geoms.length}}toString(){return JSON.stringify(this.toJSON(),null,2)}static shutDownWorkers(){YC.forEach(((g,I)=>{g.terminate()}))}}class vC extends b{constructor(g="MaterialLibrary"){super(),this.__images={},this.__materials={},this.name="",this.__name=g,this.lod=0,C.isMobileDevice&&(this.lod=1),this.clear()}clear(){this.__images={},this.__materials={Default:new AI("Default","SimpleSurfaceShader")}}getPath(){return[this.__name]}resolvePath(g,I=0){return null}getNumMaterials(){return Object.keys(this.__materials).length}getMaterials(){return Object.values(this.__materials)}getMaterialNames(){const g=[];for(const I in this.__materials)g.push(I);return g}hasMaterial(g){return g in this.__materials}addMaterial(g){g.setOwner(this),this.__materials[g.getName()]=g}getMaterial(g,I=!0){const C=this.__materials[g];if(!C&&I)throw new Error("Material:"+g+" not found in library:"+this.getMaterialNames());return C}hasImage(g){return g in this.__images}addImage(g){g.setOwner(this),this.__images[g.getName()]=g}getImage(g,I=!0){const C=this.__images[g];if(!C&&I)throw new Error("Image:"+g+" not found in library:"+this.getImageNames());return C}getImageNames(){const g=[];for(const I in this.__images)g.push(I);return g}load(g){const I=new XMLHttpRequest;I.open("GET",g,!0),I.ontimeout=()=>{throw new Error("The request for "+g+" timed out.")},I.onload=()=>{4===I.readyState&&(200===I.status?this.fromJSON(JSON.parse(I.responseText)):console.warn(I.statusText))},I.send(null)}toJSON(g={}){return{numMaterials:this.getNumMaterials()}}fromJSON(g,I={}){I.lod=this.lod;for(const I in g.textures){const C=new fI(I);C.fromJSON(g.textures[I]),this.__images[I]=C}for(const I in g.materials){const C=new AI(I);C.fromJSON(g.materials[I]),this.addMaterial(C)}}readBinary(g,I){this.name=g.loadStr();const C=g.loadUInt32();for(let F=0;F<C;F++){const C=g.loadStr(),F=t.constructClass(C);F.readBinary(g,I),this.__images[F.getName()]=F}const F=g.loadUInt32();if(F>0){const C=g.loadUInt32Array(F);for(let U=0;U<F;U++){let F;switch(g.loadStr()){case"StandardMaterial":case"TransparentMaterial":case"StandardSurfaceShader":F=t.constructClass("StandardSurfaceMaterial");break;case"SimpleSurfaceShader":case"SimpleSurfaceMaterial":F=t.constructClass("SimpleSurfaceMaterial");break;case"PointsShader":case"PointsMaterial":F=t.constructClass("PointsMaterial");break;case"FatPointsShader":case"FatPointsMaterial":F=t.constructClass("FatPointsMaterial");break;case"LinesShader":case"LinesMaterial":F=t.constructClass("LinesMaterial");break;default:F=new AI("")}g.seek(C[U]),F.readBinary(g,I),this.addMaterial(F)}}this.emit("loaded")}toString(){return JSON.stringify(this.toJSON(),null,2)}}const MC=g=>{switch(g.toLowerCase()){case"millimeters":return.001;case"centimeters":return.01;case"decimeters":return.1;case"meters":return 1;case"kilometers":return 1e3;case"inches":return.0254;case"feet":return.3048;case"miles":return 1609.34}return 1};class HC extends FI{constructor(g=""){super(g),this.geomLibrary=new DC,this.materialLibrary=new vC,this.loaded=!1,this.unitsScale=1,this.units="meters"}load(g){return Promise.reject(`This method is not implemented for this Asset Item: ${g}`)}isLoaded(){return this.loaded}getEngineDataVersion(){return this.engineDataVersion}getGeometryLibrary(){return this.geomLibrary}getMaterialLibrary(){return this.materialLibrary}getUnitsConversion(){return this.unitsScale}readBinary(g,I){I.assetItem=this,I.numTreeItems=0,I.units||(I.units="meters"),I.numGeomItems=0,I.versions["zea-engine"]||(I.versions["zea-engine"]=new Ng(g.loadStr())),this.engineDataVersion=I.versions["zea-engine"];const C=()=>{this.units=g.loadStr();const C=MC(this.units),F=MC(I.units);this.unitsScale=C/F,I.units=this.units;const U=this.localXfoParam,l=U.value;l.sc.scaleInPlace(this.unitsScale),U.value=l};let F;I.versions["zea-engine"].compare([0,0,6])>0&&C();const U={};I.addGeomToLayer=(g,I)=>{if(!U[I]){F||(F=new FI("Layers"),this.addChild(F,!1));const g=new yC(I);F.addChild(g,!1),U[I]=g}U[I].addItem(g)};const l=[];I.resolvePath=(g,I,C)=>{if(!g)throw new Error("Path not specified");try{const C=this.resolvePath(g);I(C)}catch(F){l.push((()=>{try{const C=this.resolvePath(g);I(C)}catch(g){if(!C)throw g;C(g)}}))}},I.addPLCB=g=>l.push(g),this.materialLibrary.readBinary(g,I),super.readBinary(g,I),I.versions["zea-engine"].compare([0,0,5])>=0&&I.versions["zea-engine"].compare([0,0,7])<0&&C();for(const g of l)g();this.loaded=!0}toJSON(g={}){g.makeRelative=g=>{const I=this.getPath(),C=g.slice(0,I.length);for(let F=0;F<C.length-1;F++)if(C[F]!=I[F])return console.warn("Param Path is not relative to the asset. May not be able to be resolved at load time:"+g),g;const F=g.slice(I.length-1);return F[0]=".",F},g.assetItem=this;return super.toJSON(g)}fromJSON(g,I={}){I||(I={}),I.assetItem=this,I.numTreeItems=0,I.numGeomItems=0,null==I.version&&(I.version=0),I.assetItem=this;const C=[];I.resolvePath=(g,I)=>{if(!g)throw new Error("Path not specified");const F=this.resolvePath(g);F?I(F):C.push((()=>{const C=this.resolvePath(g);C?I(C):console.warn("Path unable to be resolved:"+g)}))},I.addPLCB=g=>C.push(g),super.fromJSON(g,I);for(const g of C)g()}clone(g){const I=new HC;return I.copyFrom(this,g),I}copyFrom(g,I){this.geomLibrary=g.geomLibrary,this.materialLibrary=g.materialLibrary,this.loaded=g.loaded,g.loaded||g.once("loaded",(C=>{const F=g.localXfoParam.value,U=this.localXfoParam.value;U.sc=F.sc.clone(),this.localXfoParam.value=U,g.getChildren().forEach((g=>{g&&g!=HC&&this.addChild(g.clone(I),!1,!1)})),this.loaded=!0,this.emit("loaded",C)})),super.copyFrom(g,I)}}t.register("AssetItem",HC);class KC extends b{constructor(g){super(),this.units=g?g.units:"meters",this.assets=g?g.assets:{},this.resources=g?g.resources:{},this.versions={},this.url="",this.folder="",this.sdk="",this.assetItem=null,this.numTreeItems=0,this.numGeomItems=0,this.postLoadCallbacks=[],this.asyncCount=0}incrementAsync(){this.asyncCount++}decrementAsync(){this.asyncCount--,0==this.asyncCount&&this.emit("done")}resolvePath(g,I,C){try{const C=this.assetItem.resolvePath(g);I(C)}catch(F){this.postLoadCallbacks.push((()=>{try{const C=this.assetItem.resolvePath(g);I(C)}catch(g){if(!C)throw new Error(g.message);C(g)}}))}}addPLCB(g){this.postLoadCallbacks.push(g)}}class xC extends FI{constructor(g,I){super(g),this.imageParam=new xg("Image"),this.pixelsPerMeterParam=new Xg("PixelsPerMeter",1e3),this.alphaParam=new Xg("Alpha",1),this.colorParam=new Dg("Color",new A(1,1,1)),this.alignedToCameraParam=new kg("AlignedToCamera",!1),this.drawOnTopParam=new kg("DrawOnTop",!1),this.fixedSizeOnscreenParam=new kg("FixedSizeOnscreen",!1),this.pivotParam=new Yg("Pivot",new Q(.5,0));const C=this.addParameter(this.imageParam);I&&(C.value=I),this.addParameter(this.pixelsPerMeterParam),this.addParameter(this.alphaParam),this.addParameter(this.colorParam),this.addParameter(this.alignedToCameraParam),this.addParameter(this.drawOnTopParam),this.addParameter(this.fixedSizeOnscreenParam),this.addParameter(this.pivotParam)}}t.register("BillboardItem",xC);class wC extends FI{constructor(g="Camera"){super(g),this.isOrthographicParam=new Xg("isOrthographic",0),this.fovParam=new Xg("fov",1),this.nearParam=new Xg("near",.1),this.farParam=new Xg("far",1e3),this.focalDistanceParam=new Xg("focalDistance",5),this.viewHeight=0,this.__orthoIntervalId=-1,this.__focusIntervalId=-1,this.addParameter(this.isOrthographicParam),this.addParameter(this.fovParam),this.addParameter(this.nearParam),this.addParameter(this.farParam),this.addParameter(this.focalDistanceParam);const I=g=>{this.emit("projectionParamChanged",g)};this.isOrthographicParam.on("valueChanged",I),this.fovParam.on("valueChanged",I),this.nearParam.on("valueChanged",I),this.farParam.on("valueChanged",I),this.setPositionAndTarget(new d(3,3,1.75),new d(0,0,1)),this.setLensFocalLength("28mm"),this.adjustNearAndFarPlanesToFocalDist=!0,this.nearDistFactor=.01,this.farDistFactor=100,this.frameOnBoundingSphere=!1}getNear(){return this.nearParam.value}setNear(g){this.nearParam.value=g}getFar(){return this.farParam.value}setFar(g){this.farParam.value=g}getFov(){return this.fovParam.value}setFov(g){this.fovParam.value=g}getFrustumHeight(){return this.viewHeight}setFrustumHeight(g){this.viewHeight=g,this.emit("projectionParamChanged")}setLensFocalLength(g){const I={"10mm":100.4,"11mm":95,"12mm":90,"14mm":81.2,"15mm":77.3,"17mm":70.4,"18mm":67.4,"19mm":64.6,"20mm":61.9,"24mm":53.1,"28mm":46.4,"30mm":43.6,"35mm":37.8,"45mm":29.9,"50mm":27,"55mm":24.6,"60mm":22.6,"70mm":19.5,"75mm":18.2,"80mm":17.1,"85mm":16.1,"90mm":15.2,"100mm":13.7,"105mm":13,"120mm":11.4,"125mm":11,"135mm":10.2,"150mm":9.1,"170mm":8.1,"180mm":7.6,"210mm":6.5,"300mm":4.6,"400mm":3.4,"500mm":2.7,"600mm":2.3,"800mm":1.7};g in I?this.fovParam.value=s.degToRad(I[g]):console.warn("Camera lense focal length not supported:"+g)}getFocalDistance(){return this.focalDistanceParam.value}setFocalDistance(g){g<1e-4&&console.error("Never set focal distance to zero"),this.focalDistanceParam.value=g,this.adjustNearAndFarPlanesToFocalDist&&(this.nearParam.value=g*this.nearDistFactor,this.farParam.value=g*this.farDistFactor)}isOrthographic(){return 1==this.isOrthographicParam.value}setIsOrthographic(g,I=0){if(this.__orthoIntervalId&&clearInterval(this.__orthoIntervalId),g>.5){const g=this.fovParam.value,I=this.focalDistanceParam.value;this.viewHeight=Math.sin(.5*g)*I*2}if(0==I)this.isOrthographicParam.value=g;else{const C=Math.round(I/20);let F=0;const U=this.isOrthographicParam.value,l=()=>{const I=s.lerp(U,g,F/C);this.isOrthographicParam.value=I,F++,F<=C?this.__orthoIntervalId=window.setTimeout(l,20):(this.__orthoIntervalId=-1,this.emit("movementFinished"))};l()}}setPositionAndTarget(g,I){this.setFocalDistance(g.distanceTo(I));const C=new o;C.setLookAt(g,I,new d(0,0,1)),this.globalXfoParam.value=C,this.emit("movementFinished")}getTargetPosition(){const g=this.focalDistanceParam.value,I=this.globalXfoParam.value,C=I.ori.getZaxis();return C.scaleInPlace(-g),C.addInPlace(I.tr),C}frameView(g,I){const C=this.focalDistanceParam.value,F=this.fovParam.value,U=this.globalXfoParam.value.clone(),l=g.getWidth()/g.getHeight(),t=2*Math.atan(Math.tan(.5*F)*l);let e=C;if(this.frameOnBoundingSphere){const g=new r;for(const C of I)g.addBox3(C.boundingBoxParam.value);if(!g.isValid())return void console.warn("Bounding box not valid.");const l=U.ori.getZaxis().scale(-C),t=U.tr.add(l),Q=g.center().subtract(t);U.tr.addInPlace(Q),e=g.size()/Math.tan(F)}else{const g=[];if(I.forEach((I=>{I.traverse((I=>{if(!(I instanceof FI))return!1;if(I.disableBoundingBox)return!1;if(I instanceof SC){const C=I.geomParam.value;if(C){const F=C.getBoundingBox();if(F.isValid()){const C=I.geomMatParam.value;return g.push(C.transformVec3(F.p0)),g.push(C.transformVec3(new d(F.p0.x,F.p0.y,F.p1.z))),g.push(C.transformVec3(new d(F.p0.x,F.p1.y,F.p0.z))),g.push(C.transformVec3(new d(F.p1.x,F.p0.y,F.p0.z))),g.push(C.transformVec3(new d(F.p0.x,F.p1.y,F.p1.z))),g.push(C.transformVec3(new d(F.p1.x,F.p0.y,F.p1.z))),g.push(C.transformVec3(new d(F.p1.x,F.p1.y,F.p0.z))),void g.push(C.transformVec3(F.p1))}}}if(0==I.getNumChildren()){const C=I.boundingBoxParam.value;if(C.isValid())return g.push(new d(C.p0.x,C.p0.y,C.p0.z)),g.push(new d(C.p0.x,C.p0.y,C.p1.z)),g.push(new d(C.p0.x,C.p1.y,C.p0.z)),g.push(new d(C.p1.x,C.p0.y,C.p0.z)),g.push(new d(C.p0.x,C.p1.y,C.p1.z)),g.push(new d(C.p1.x,C.p0.y,C.p1.z)),g.push(new d(C.p1.x,C.p1.y,C.p0.z)),void g.push(new d(C.p1.x,C.p1.y,C.p1.z))}}))})),0==g.length)return;const C=this.isOrthographic()?0:t/2,n=this.isOrthographic()?0:F/2,i={};i.XPos=new d(Math.cos(C),0,Math.sin(C)),i.XNeg=new d(-Math.cos(C),0,Math.sin(C)),i.YPos=new d(0,Math.cos(n),Math.sin(n)),i.YNeg=new d(0,-Math.cos(n),Math.sin(n)),i.ZPos=new d(0,0,1),i.ZNeg=new d(0,0,-1);const A={},B={};for(const g in i)A[g]=U.ori.rotateVec3(i[g]),B[g]=Number.NEGATIVE_INFINITY;const a=new d;g.forEach(((g,I)=>{if(!Number.isFinite(g.x)||!Number.isFinite(g.y)||!Number.isFinite(g.z))return;const C=g.subtract(U.tr);for(const g in i){const I=C.dot(A[g]);I>B[g]&&I!=Number.POSITIVE_INFINITY&&(B[g]=I)}a.addInPlace(g)}));for(const g in B)if(B[g]==Number.POSITIVE_INFINITY)return;a.scaleInPlace(1/g.length);let V=0;if(this.isOrthographic()){const g=new d(.5*(-B.XNeg+B.XPos),.5*(-B.YNeg+B.YPos),.5*(-B.ZNeg+B.ZPos)),I=B.ZNeg+B.ZPos;V=2*I,g.z=-B.ZNeg+V,U.tr.addInPlace(U.ori.rotateVec3(g)),e=2*I;const C=B.XPos+B.XNeg,F=B.YPos+B.YNeg;this.viewHeight=Math.max(F,C/l);const t=.1;this.viewHeight+=this.viewHeight*t}else{const g=t/2,I=F/2,C=new Q(Math.cos(g)*B.XPos,Math.sin(g)*B.XPos),l=C.add(new Q(Math.sin(g),-Math.cos(g))),n=new Q(-Math.cos(g)*B.XNeg,Math.sin(g)*B.XNeg),i=n.add(new Q(-Math.sin(g),-Math.cos(g))),A=Q.intersectionOfLines(C,l,n,i),R=new Q(Math.cos(I)*B.YPos,Math.sin(I)*B.YPos),s=R.add(new Q(Math.sin(I),-Math.cos(I))),Z=new Q(-Math.cos(I)*B.YNeg,Math.sin(I)*B.YNeg),o=Z.add(new Q(-Math.sin(I),-Math.cos(I))),h=Q.intersectionOfLines(R,s,Z,o);if(null===A||null===h)return void console.warn("xP or yP === null");V=Math.max(A.y,h.y);const c=new d(A.x,h.x,V);U.tr.addInPlace(U.ori.rotateVec3(c)),e=a.distanceTo(U.tr);const r=e*.1;U.tr.addInPlace(U.ori.rotateVec3(new d(0,0,r))),V+=r}if(this.adjustNearAndFarPlanesToFocalDist){B.ZPos-=V,B.ZNeg+=V;const g=B.ZNeg*this.nearDistFactor,I=-B.ZPos*this.farDistFactor;this.nearParam.value=g,this.farParam.value=I}}this.setFocalDistance(e),this.globalXfoParam.value=U,this.emit("movementFinished")}updateProjectionMatrix(g,I){const C=this.isOrthographicParam.value,F=this.fovParam.value,U=this.nearParam.value,l=this.farParam.value,t=new V;if(C>0){const g=.5*this.viewHeight,C=-g,F=g,e=g*-I,Q=g*I;t.setOrthographicMatrix(e,Q,C,F,U,l)}C<1&&g.setPerspectiveMatrix(F,I,U,l),1==C?g.setFromMat4(t):C>0&&g.set(s.lerp(g.m00,t.m00,C),s.lerp(g.m01,t.m01,C),s.lerp(g.m02,t.m02,C),s.lerp(g.m03,t.m03,C),s.lerp(g.m10,t.m10,C),s.lerp(g.m11,t.m11,C),s.lerp(g.m12,t.m12,C),s.lerp(g.m13,t.m13,C),s.lerp(g.m20,t.m20,C),s.lerp(g.m21,t.m21,C),s.lerp(g.m22,t.m22,C),s.lerp(g.m23,t.m23,C),s.lerp(g.m30,t.m30,C),s.lerp(g.m31,t.m31,C),s.lerp(g.m32,t.m32,C),s.lerp(g.m33,t.m33,C))}}t.register("Camera",wC);class zC extends qg{constructor(g,I){super(),this.bindXfo=new o,this.invBindXfo=new o,this.groupGlobalXfo=new gI("GroupGlobalXfo"),this.groupTransformXfo=new jg("GroupTransformXfo"),this.groupGlobalXfo.setParam(g),this.groupTransformXfo.setParam(I),this.addInput(this.groupGlobalXfo),this.addOutput(this.groupTransformXfo)}setBindXfo(g){this.bindXfo=g,this.invBindXfo=g.inverse(),this.setDirty()}evaluate(){if(this.invBindXfo){const g=this.groupGlobalXfo.getValue();this.groupTransformXfo.setClean(g.multiply(this.invBindXfo))}else this.groupTransformXfo.setClean(new o)}}class fC extends qg{constructor(I,C){super(),this.groupTransformXfo=new gI("GroupTransformXfo"),this.memberGlobalXfo=new jg("MemberGlobalXfo",g.OperatorOutputMode.OP_READ_WRITE),this.groupTransformXfo.setParam(I),this.memberGlobalXfo.setParam(C),this.addInput(this.groupTransformXfo),this.addOutput(this.memberGlobalXfo),this._enabled=!0}disable(){this._enabled=!1,this.setDirty()}enable(){this._enabled=!0,this.setDirty()}evaluate(){const g=this.memberGlobalXfo.getValue();if(this._enabled){const I=this.groupTransformXfo.getValue();this.memberGlobalXfo.setClean(I.multiply(g))}else this.memberGlobalXfo.setClean(g)}}const LC={disabled:0,manual:1,first:2,average:3,globalOri:4};class _C extends uC{constructor(g=""){super(g),this.initialXfoModeParam=new pg("InitialXfoMode",LC.average,["manual","first","average","global"]),this.groupTransformParam=new Kg("GroupTransform",new o),this.calculatingGroupXfo=!1,this.memberXfoOps=[],this.addParameter(this.initialXfoModeParam),this.initialXfoModeParam.on("valueChanged",(()=>{this.calcGroupXfo()})),this.addParameter(this.groupTransformParam),this.groupTransformOp=new zC(this.globalXfoParam,this.groupTransformParam)}static get INITIAL_XFO_MODES(){return LC}updateHighlight(){setTimeout((()=>{let g,I=!1;this.isSelected()&&(I=!0,g=this.getHighlight(),g.a=.2);const C="kinematicGroupItemHighlight"+this.getId();Array.from(this.itemsParam.value).forEach((F=>{F instanceof FI&&(I?F.addHighlight(C,g,!0):F.removeHighlight(C,!0))}))}),1)}setSelected(g){super.setSelected(g),this.updateHighlight()}calcGroupXfo(){const g=Array.from(this.itemsParam.value);if(0==g.length)return;this.calculatingGroupXfo=!0,this.memberXfoOps.forEach((g=>g.disable()));const I=this.initialXfoModeParam.value;let C;if(I==LC.manual)C=this.globalXfoParam.value;else if(I==LC.first&&g[0]instanceof FI)C=g[0].globalXfoParam.value;else if(I==LC.average){C=new o,C.ori.set(0,0,0,0);let I=0;g.forEach(((g,F)=>{if(g instanceof FI){const F=g.globalXfoParam.value;C.tr.addInPlace(F.tr),C.ori.addInPlace(F.ori),I++}})),C.tr.scaleInPlace(1/I),C.ori.normalizeInPlace()}else{if(I!=LC.globalOri)throw new Error("Invalid GROUP_XFO_MODES.");{C=new o;let I=0;g.forEach(((g,F)=>{if(g instanceof FI){const F=g.globalXfoParam.value;C.tr.addInPlace(F.tr),I++}})),C.tr.scaleInPlace(1/I)}}this.globalXfoParam.value=C,this.groupTransformOp.setBindXfo(C),this.memberXfoOps.forEach((g=>g.enable())),this.calculatingGroupXfo=!1}bindItem(g,I){if(super.bindItem(g,I),g instanceof FI){if(this.isSelected()){const I=this.getHighlight();I.a=.2;const C="kinematicGroupItemHighlight"+this.getId();g.addHighlight(C,I,!0)}{const C=g.globalXfoParam,F=new fC(this.groupTransformParam,C);this.memberXfoOps.splice(I,0,F),this.__itemsEventHandlers[I]||(this.__itemsEventHandlers[I]={});this.__itemsEventHandlers[I]["BoundingBox.valueChanged"]=g.boundingBoxParam.on("valueChanged",(g=>{this.setBoundingBoxDirty()}))}}}unbindItem(g,I){if(super.unbindItem(g,I),g instanceof FI){if(this.isSelected()){const I="kinematicGroupItemHighlight"+this.getId();g.removeHighlight(I,!0)}this.memberXfoOps[I].detach(),this.memberXfoOps.splice(I,1),this.setBoundingBoxDirty()}}addItem(g,I=!0){super.addItem(g,I),I&&this.calcGroupXfo()}removeItem(g,I=!0){super.removeItem(g,I),I&&this.calcGroupXfo()}setItems(g){super.setItems(g),this.calcGroupXfo()}clearItems(g=!0){super.clearItems(g),this.memberXfoOps=[],g&&this.calcGroupXfo()}loadDone(){this.calculatingGroupXfo=!0,this.calcGroupXfo(),this.calculatingGroupXfo=!1}clone(g){const I=new _C;return I.copyFrom(this,g),I}}t.register("KinematicGroup",_C);class OC extends uC{constructor(g){super(g),this.materialParam=new BI("Material"),this.__backupMaterials={},this.addParameter(this.materialParam),this.materialParam.on("valueChanged",(()=>{this.__updateMaterial()}))}updateHighlight(){this.__updateHighlightHelper()}__updateHighlightHelper(){let g,I=!1;this.isSelected()&&(g=this.getHighlight(),I=!0,g.a=.2);const C="kinematicGroupItemHighlight"+this.getId();Array.from(this.itemsParam.value).forEach((F=>{F instanceof FI&&(I?F.addHighlight(C,g,!0):F.removeHighlight(C,!0))}))}setSelected(g){super.setSelected(g),this.updateHighlight()}__updateMaterial(){this.__updateMaterialHelper()}__updateMaterialHelper(){const g=this.materialParam.value;Array.from(this.itemsParam.value).forEach((I=>{I.traverse((I=>{if(I instanceof GC){const C=I.materialParam;if(g){const I=C.value;I==g||I&&"LinesShader"==I.getShaderName()||(this.__backupMaterials[C.getId()]=I,C.value=g)}else this.__backupMaterials[C.getId()]&&(C.value=this.__backupMaterials[C.getId()])}}))}))}bindItem(g,I){if(super.bindItem(g,I),!(g instanceof FI))return;if(this.isSelected()){const I=this.getHighlight();I.a=.2;const C="materialGroupItemHighlight"+this.getId();g.addHighlight(C,I,!0)}const C=this.materialParam.value;C&&g.traverse((g=>{if(g instanceof GC){const I=g.materialParam;if(C){const g=I.value;g==C||g&&"LinesShader"==g.getShaderName()||(this.__backupMaterials[I.getId()]=g,I.value=C)}}}),!0)}__unbindItem(g,I){if(super.unbindItem(g,I),g instanceof FI&&this.isSelected()){const I="materialGroupItemHighlight"+this.getId();g.removeHighlight(I,!0)}}clone(g){const I=new OC(this.__name+"clone");return I.copyFrom(this,g),I}}t.register("MaterialGroup",OC);class jC extends qg{constructor(g,I){super(),this.groupGlobalXfo=new gI("GroupGlobalXfo"),this.cuttingPlane=new Og("CuttingPlane"),this.groupGlobalXfo.setParam(g),this.cuttingPlane.setParam(I),this.addInput(this.groupGlobalXfo),this.addOutput(this.cuttingPlane)}evaluate(){const g=this.groupGlobalXfo.getValue(),I=g.ori.getZaxis(),C=g.tr.dot(I);this.cuttingPlane.setClean(new n(I.x,I.y,I.z,-C))}}class PC extends uC{constructor(g=""){super(g),this.cutAwayEnabledParam=new kg("CutAwayEnabled",!1),this.cutPlaneParam=new Tg("CutPlane",new n(1,0,0)),this.addParameter(this.cutAwayEnabledParam),this.addParameter(this.cutPlaneParam),this.cutPlaneOp=new jC(this.globalXfoParam,this.cutPlaneParam),this.cutAwayEnabledParam.on("valueChanged",(g=>{this.updateCutaway(g)})),this.cutPlaneParam.on("valueChanged",(g=>{this.updateCutaway(g)}));const I=new AI("plane","FlatSurfaceShader");I.getParameter("BaseColor").value=new A(1,1,1,.2);const C=new SC("PlaneGeom",new HI(1,1),I);C.setSelectable(!1),this.addChild(C);const F=new AI("border","LinesShader");F.getParameter("BaseColor").value=new A(1,0,0,1);const U=new SC("BorderGeom",new XI(1,1),F);U.setSelectable(!1),this.addChild(U)}updateCutaway(g){const I=this.cutAwayEnabledParam.value,C=this.cutPlaneParam.value,F=C.xyz,U=C.w;g instanceof GC?(g.setCutawayEnabled(I),g.setCutVector(F),g.setCutDist(U)):Array.from(this.itemsParam.value).forEach((g=>{g.traverse((g=>{g instanceof GC&&(g.setCutawayEnabled(I),g.setCutVector(F),g.setCutDist(U))}),!0)}))}bindItem(g,I){if(!(g instanceof FI))return;this.cutAwayEnabledParam.value&&this.updateCutaway(g);const C=new r;Array.from(this.itemsParam.value).forEach((g=>{g instanceof FI&&C.addBox3(g.boundingBoxParam.value)}));{const g=C.p1.x-C.p0.x,I=C.p1.y-C.p0.y,F=new o;F.sc.set(g,I,1),this.getChild(0).localXfoParam.value=F,this.getChild(1).localXfoParam.value=F}}unbindItem(g,I){g instanceof FI&&g.traverse((g=>{g instanceof GC&&g.setCutawayEnabled(!1)}),!0)}clone(g){const I=new PC;return I.copyFrom(this,g),I}}t.register("CuttingPlane",PC);class qC extends FI{constructor(g=5,I=50,C=new A("#DCDCDC")){super("GridTree"),this.disableBoundingBox=!0,this.setSelectable(!1);const F=new AI("gridMaterial","LinesShader");F.getParameter("BaseColor").value=C,F.getParameter("Overlay").value=0,F.getParameter("StippleValue").value=0,F.getParameter("OccludedStippleValue").value=1;const U=new EI(g,g,I,I,!0),l=new SC("GridItem",U,F);l.setSelectable(!1),this.addChild(l,!1);const t=new rI;t.setNumVertices(2),t.setNumSegments(1),t.setSegmentVertexIndices(0,0,1);const e=t.getVertexAttribute("positions");e.getValueRef(0).set(-.5*g,0,0),e.getValueRef(1).set(.5*g,0,0);const Q=new AI("gridXAxisMaterial","LinesShader");Q.getParameter("BaseColor").value=new A(C.luminance(),0,0),Q.getParameter("Overlay").value=0,Q.getParameter("StippleValue").value=0,Q.getParameter("OccludedStippleValue").value=1;const n=new SC("xAxisLine",t,Q);n.setSelectable(!1),this.addChild(n,!1);const i=new AI("gridYAxisMaterial","LinesShader");i.getParameter("BaseColor").value=new A(0,C.luminance(),0),i.getParameter("Overlay").value=0,i.getParameter("StippleValue").value=0,i.getParameter("OccludedStippleValue").value=1,i.setSelectable(!1);const B=new SC("yAxisLine",t,i);B.setSelectable(!1);const a=new o;a.ori.setFromAxisAndAngle(new d(0,0,1),.5*Math.PI),B.geomOffsetXfoParam.value=a,this.addChild(B,!1);const V=this._cleanBoundingBox(this.boundingBoxParam.value);this.boundingBoxParam.value=V}_cleanBoundingBox(g){return g.reset(),g}}t.register("GridTreeItem",qC);const $C=new A("#DCDCDC");class gF extends HC{constructor(g){super(g),this.geomLibrary.on("loaded",(()=>{this.emit("geomsLoaded")}))}readBinary(g,I){I.versions["zea-engine"]||(I.versions["zea-mesh"]=new Ng(g.loadStr()));const C=g.loadUInt32();return super.readBinary(g,I),I.versions["zea-engine"].compare([2,1,0])<0&&g.loadFloat32Vec2(),this.geomLibrary.setNumGeoms(g.loadUInt32()),C}load(g,I=new KC){return new Promise(((F,U)=>{const l=g.lastIndexOf("/")>-1?g.substring(0,g.lastIndexOf("/"))+"/":"",t=g.lastIndexOf("/")>-1?g.substring(g.lastIndexOf("/")+1):"",e=t.substring(0,t.lastIndexOf("."));let Q=0;I.assetItem=this,I.url=g,I.folder=l,mg.incrementWorkload(1),this.geomLibrary.on("loaded",(()=>{mg.incrementWorkDone(1)})),mg.loadFile("archive",g).then((g=>{let U;if(g.tree2)U=new Sg(g.tree2.buffer,0,C.isMobileDevice);else{const F=g.tree?g.tree:g[Object.keys(g)[0]];U=new Sg(F.buffer,0,C.isMobileDevice),I.versions["zea-engine"]=new Ng}if(Q=this.readBinary(U,I),this.loaded=!0,this.emit("loaded"),0==Q&&g.geoms)this.geomLibrary.readBinaryBuffer(t,g.geoms.buffer,I);else{const g=l+e,C={numGeomsPerFile:Q,numGeoms:this.geomLibrary.getNumGeoms()};this.geomLibrary.loadGeomFilesStream(C,g,I)}F()}),(g=>{this.emit("error",g),U(g)}))}))}}
/*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
function IF(g,I,C,F){return new(C||(C=Promise))((function(U,l){function t(g){try{Q(F.next(g))}catch(g){l(g)}}function e(g){try{Q(F.throw(g))}catch(g){l(g)}}function Q(g){var I;g.done?U(g.value):(I=g.value,I instanceof C?I:new C((function(g){g(I)}))).then(t,e)}Q((F=F.apply(g,I||[])).next())}))}t.register("VLAAsset",gF);class CF extends ig{constructor(){super(),this.__activated=!1}activateTool(){if(this.__activated)throw new Error("Tool already activate");this.__activated=!0,this.emit("activatedChanged",{activated:this.__activated})}deactivateTool(){this.__activated=!1,this.emit("activatedChanged",{activated:this.__activated})}onPointerDown(g){}onPointerMove(g){}onPointerUp(g){}onPointerDoublePress(g){}onPointerEnter(g){}onPointerLeave(g){}onWheel(g){}onKeyDown(g){}onKeyUp(g){}onTouchCancel(g){}}const FF={OPAQUE:1,TRANSPARENT:2,OVERLAY:4};class UF extends ig{constructor(){super(),this.enabled=!0,this.passIndex=-1,this.__gl=null,this.renderer=null,this.__renderer=null,this.enabledParam=new kg("Enabled",!0),this.enabled=!0,this.passIndex=0,this.addParameter(this.enabledParam),this.enabledParam.on("valueChanged",(()=>this.enabled=this.enabledParam.value))}parameterValueChanged(g){super.parameterValueChanged(g),this.renderer&&this.renderer.requestRedraw()}init(g,I){if(null==I)throw new Error("Missing constructor argument.");this.__gl=g.gl,this.renderer=g,this.__renderer=g,this.passIndex=I}setPassIndex(g){this.passIndex=g}getPassType(){return FF.OPAQUE}itemAddedToScene(g,I){throw Error(`${this.constructor.name} must implement itemAddedToScene and itemRemovedFromScene`)}itemRemovedFromScene(g,I){throw Error(`${this.constructor.name} must implement itemAddedToScene and itemRemovedFromScene`)}startPresenting(){}stopPresenting(){}draw(g){throw Error("draw not implemented on GLPass")}drawHighlightedGeoms(g){}drawGeomData(g){}getGeomItemAndDist(g){throw Error("getGeomItemAndDist not implemented on GLPass")}}const lF={pan:0,dolly:1,focussing:2,look:3,turntable:4,tumbler:5,trackball:6};class tF extends CF{constructor(g){super(),this.__mouseWheelMovementDist=0,this.__mouseWheelZoomCount=0,this.__mouseWheelZoomId=-1,this.orbitRateParam=new Xg("OrbitRate",C.isMobileDevice?.5:1),this.dollySpeedParam=new Xg("DollySpeed",.02),this.mouseWheelDollySpeedParam=new Xg("MouseWheelDollySpeed",.1),this.orbitAroundCursor=new kg("OrbitAroundCursor",!0),this.walkSpeedParam=new Xg("WalkSpeed",5),this.walkModeCollisionDetection=new kg("WalkModeCollisionDetection",!1),this.appData=g,this.__defaultManipulationState=lF.turntable,this.__manipulationState=this.__defaultManipulationState,this.__pointerDown=!1,this.__dragging=0,this.aimFocusOnTouchTap=1,this.aimFocusOnMouseClick=2,this.enabledWASDWalkMode=!1,this.__keyboardMovement=!1,this.__keysPressed=[],this.__velocity=new d,this.__prevVelocityIntegrationTime=-1,this.__ongoingTouches={},this.addParameter(this.orbitRateParam),this.addParameter(this.dollySpeedParam),this.addParameter(this.mouseWheelDollySpeedParam),this.addParameter(this.orbitAroundCursor),this.addParameter(this.walkSpeedParam),this.addParameter(this.walkModeCollisionDetection)}activateTool(){super.activateTool(),this.appData&&this.appData.renderer&&(this.prevCursor=this.appData.renderer.getGLCanvas().style.cursor,this.appData.renderer.getGLCanvas().style.cursor="cursor")}deactivateTool(){super.deactivateTool(),this.appData&&this.appData.renderer&&(this.appData.renderer.getGLCanvas().style.cursor=this.appData.renderer.getGLCanvas().style.cursor)}setDefaultManipulationMode(g){if(this.__defaultManipulationState="string"==typeof g?lF[g]:g,!Object.values(lF).includes(this.__defaultManipulationState))throw new Error("Invalid Camera Manipulation Mode. Must be one of "+Object.keys(lF))}look(g,I){const{viewport:C}=g,F=C.getCamera(),U=this.orbitRateParam.value,l=F.globalXfoParam.value,t=new R;t.rotateZ(I.x/C.getWidth()*Math.PI*U),l.ori=t.multiply(l.ori);const e=new R;e.rotateX(I.y/C.getHeight()*Math.PI*U),l.ori.multiplyInPlace(e),F.globalXfoParam.value=l}turntable(g,I){const{viewport:C}=g,F=C.getCamera(),U=this.orbitRateParam.value,l=F.globalXfoParam.value,t=l.ori.inverse().rotateVec3(l.tr.subtract(this.__orbitTarget)),e=new R;e.rotateZ(I.x/C.getWidth()*2*Math.PI*-U),l.ori=e.multiply(l.ori);const Q=new R;Q.rotateX(I.y/C.getHeight()*Math.PI*-U),l.ori.multiplyInPlace(Q),l.tr=this.__orbitTarget.add(l.ori.rotateVec3(t)),F.globalXfoParam.value=l}tumbler(g,I){const{viewport:C}=g,F=C.getCamera(),U=this.orbitRateParam.value,l=F.globalXfoParam.value,t=l.ori.getXaxis(),e=l.ori.getYaxis(),Q=l.ori.getZaxis(),d=t.scale(-I.x).add(e.scale(I.y)).cross(Q);d.normalizeInPlace();const n=I.length(),i=l.ori.inverse().rotateVec3(l.tr.subtract(this.__orbitTarget)),A=new R;A.setFromAxisAndAngle(d,n/C.getWidth()*Math.PI*-U),l.ori=A.multiply(l.ori),l.tr=this.__orbitTarget.add(l.ori.rotateVec3(i)),F.globalXfoParam.value=l}trackball(g,I){const{viewport:C}=g,F=C.getCamera(),U=this.orbitRateParam.value,l=F.globalXfoParam.value,t=l.ori.getXaxis(),e=l.ori.getYaxis(),Q=l.ori.getZaxis(),d=t.scale(-I.x).add(e.scale(I.y)).cross(Q);d.normalizeInPlace();const n=I.length(),i=l.ori.inverse().rotateVec3(l.tr.subtract(this.__orbitTarget)),A=new R;A.setFromAxisAndAngle(d,n/C.getWidth()*Math.PI*-U),l.ori=A.multiply(l.ori),l.tr=this.__orbitTarget.add(l.ori.rotateVec3(i)),F.globalXfoParam.value=l}pan(g,I){const{viewport:C}=g,F=C.getCamera(),U=new o,l=new d(1,0,0),t=new d(0,1,0);if(F.isOrthographic()){const g=F.getFrustumHeight(),e=g*(C.getWidth()/C.getHeight());U.tr=l.scale(-I.x/C.getWidth()*e),U.tr.addInPlace(t.scale(I.y/C.getHeight()*g))}else{const g=F.getFocalDistance(),e=F.getFov(),Q=2*g*Math.tan(.5*e),d=Q*(C.getWidth()/C.getHeight());U.tr=l.scale(-I.x/C.getWidth()*d),U.tr.addInPlace(t.scale(I.y/C.getHeight()*Q))}const e=F.globalXfoParam.value;F.globalXfoParam.value=e.multiply(U)}dolly(g,I){const{viewport:C}=g,F=C.getCamera(),U=F.getFocalDistance(),l=()=>{const g=I.y*this.dollySpeedParam.value*U,C=new o;C.tr.set(0,0,g);const l=F.globalXfoParam.value;F.globalXfoParam.value=l.multiply(C)},t=()=>{const g=I.y*this.dollySpeedParam.value,C=F.getFrustumHeight(),U=C*g;F.setFrustumHeight(C+U)};F.isOrthographic()?t():l()}initDrag(g){const{pointerPos:I}=g;g.setCapture(this),this.__pointerDown=!0;const C=g.viewport.getCamera(),F=C.globalXfoParam.value,U=this.orbitAroundCursor.value;if(U)if(null!=g.intersectionData&&U){this.__orbitTarget=g.intersectionData.intersectionPos;const I=F.inverse().transformVec3(g.intersectionData.intersectionPos);C.setFocalDistance(-I.z)}else g.pointerRay?this.__orbitTarget=g.pointerRay.pointAtDist(C.getFocalDistance()):this.__orbitTarget=F.tr.add(F.ori.getZaxis().scale(-C.getFocalDistance()));else this.__orbitTarget=F.tr.add(F.ori.getZaxis().scale(-C.getFocalDistance()));this.__prevPointerPos=I,this.__dragging=1}endDrag(g){g.getCapture()==this&&g.releaseCapture(),this.__dragging=0,this.__pointerDown=!1}aimFocus(g,I,C=-1,F=400){this.__focusIntervalId&&clearInterval(this.__focusIntervalId);const U=Math.round(F/20),l=this.__manipulationState;let t=0;const e=()=>{const F=g.globalXfoParam.value,Q=g.getFocalDistance(),d=I.subtract(F.tr),n=d.normalizeInPlace(),i=F.clone();if(l==lF.turntable||l==lF.look){{const g=F.ori.getZaxis().clone();g.z=0;const I=d.negate();I.z=0;const C=new R;C.setFrom2Vectors(g,I),i.ori=C.multiply(i.ori)}{const g=F.ori.getXaxis().clone(),I=F.ori.getZaxis().clone(),C=d.negate();C.subtractInPlace(g.scale(C.dot(g))),C.normalizeInPlace();const U=new R;I.cross(C).dot(g)>0?U.rotateX(I.angleTo(C)):U.rotateX(-I.angleTo(C)),i.ori=i.ori.multiply(U)}{const g=i.ori.getXaxis().clone(),I=g.clone();I.z=0,I.normalizeInPlace();const C=new R;C.setFrom2Vectors(g,I),i.ori=C.multiply(i.ori)}}else{const g=F.ori.getZaxis().clone(),I=d.negate(),C=new R;C.setFrom2Vectors(g,I),i.ori=C.multiply(i.ori)}const A=Math.pow(t/U,2),B=F.clone();if(B.ori=F.ori.lerp(i.ori,A),C>0){const g=d.scale(n-C);B.tr.addInPlace(g.scale(A))}g.setFocalDistance(Q+(n-Q)*A),g.globalXfoParam.value=B,t++,t<=U?this.__focusIntervalId=setTimeout(e,20):(this.__focusIntervalId=void 0,this.emit("movementFinished"),g.emit("movementFinished"))};e()}orientPointOfView(g,I,C,F=0,U=400){this.__focusIntervalId&&clearInterval(this.__focusIntervalId);const l=Math.round(U/20);let t=0;const e=()=>{const U=g.globalXfoParam.value,Q=g.getTargetPosition(),d=Math.pow(t/l,2),n=I.subtract(U.tr),i=n.normalizeInPlace(),A=n.scale(i-F),B=U.tr.add(A.scale(d)),a=Q.lerp(C,d);g.setPositionAndTarget(B,a),t++,t<=l?this.__focusIntervalId=setTimeout(e,20):(this.__focusIntervalId=void 0,this.emit("movementFinished"),g.emit("movementFinished"))};e()}onPointerDoublePress(g){const I=I=>{const C=g.viewport.getCamera(),F=C.globalXfoParam.value.tr.add(I.dir.scale(g.intersectionData.dist));this.aimFocus(C,F),g.aimTarget=F,g.aimDistance=g.intersectionData.dist,this.emit("aimingFocus",g),C.emit("aimingFocus",g),g.stopPropagation()};if(g.intersectionData&&this.aimFocusOnMouseClick){if(g.pointerType===P.mouse&&2==this.aimFocusOnMouseClick){const C=g;I(C.pointerRay),C.preventDefault()}if(g.pointerType===P.touch&&2==this.aimFocusOnTouchTap){I(g.pointerRay)}}}onPointerDown(g){if(g.pointerType===P.mouse){1==this.__dragging&&this.endDrag(g),this.initDrag(g);const I=g;2==I.button?this.__manipulationState=lF.pan:I.ctrlKey&&I.altKey?this.__manipulationState=lF.dolly:I.ctrlKey||2==I.button?this.__manipulationState=lF.look:this.__manipulationState=this.__defaultManipulationState,I.preventDefault()}else g.pointerType===P.touch&&this._onTouchStart(g);g.stopPropagation()}onPointerMove(g){0!=this.__dragging&&(g.pointerType===P.mouse&&this._onMouseMove(g),g.pointerType===P.touch&&this._onTouchMove(g),this.__dragging=2,g.stopPropagation())}_onMouseMove(g){if(!this.__pointerDown)return;const I=g.pointerPos,C=I.subtract(this.__prevPointerPos);switch(this.__manipulationState){case lF.turntable:this.turntable(g,C);break;case lF.tumbler:this.tumbler(g,C);break;case lF.trackball:this.trackball(g,C);break;case lF.look:this.look(g,C);break;case lF.pan:this.pan(g,I.subtract(this.__prevPointerPos));break;case lF.dolly:this.dolly(g,C)}this.__prevPointerPos=I,g.preventDefault()}_onTouchMove(g){const I=g.touches;if(1==I.length){const C=I[0],F=new Q(C.clientX,C.clientY),U=this.__ongoingTouches[C.identifier];if(!U)return;const l=F.subtract(U.pos);switch(this.__defaultManipulationState){case lF.look:l.scaleInPlace(6),this.look(g,l);break;case lF.turntable:this.turntable(g,l);break;case lF.tumbler:this.tumbler(g,l);break;case lF.trackball:this.trackball(g,l)}U.pos=F}else if(2==I.length){const C=I[0],F=this.__ongoingTouches[C.identifier],U=I[1],l=this.__ongoingTouches[U.identifier];if(!F||!l)return;const t=new Q(C.clientX,C.clientY),e=new Q(U.clientX,U.clientY),n=l.pos.subtract(F.pos).length()-e.subtract(t).length(),i=t.subtract(F.pos),A=e.subtract(l.pos),B=i.add(A);B.scaleInPlace(.5);const a=.002*n,{viewport:V}=g,s=V.getCamera(),Z=s.getFocalDistance(),h=s.getFov(),c=new d(1,0,0),r=new d(0,1,0),m=2*Z*Math.tan(.5*h),W=m*(V.getWidth()/V.getHeight()),J=new o;J.tr=c.scale(-B.x/V.getWidth()*W),J.tr.addInPlace(r.scale(B.y/V.getHeight()*m));const G=a*Z;switch(s.setFocalDistance(Z+G),J.tr.z+=G,this.__defaultManipulationState){case lF.tumbler:case lF.trackball:const g=l.pos.subtract(F.pos),I=e.subtract(t);let C=g.normalize().angleTo(I.normalize());g.cross(I)<0&&(C=-C);const U=new R;U.rotateZ(C),J.ori.multiplyInPlace(U)}const b=s.globalXfoParam.value;s.globalXfoParam.value=b.multiply(J),F.pos=t,l.pos=e}}onPointerUp(g){if(1==this.__dragging){if(this.endDrag(g),g.intersectionData&&(g.pointerType===P.mouse&&1==this.aimFocusOnMouseClick||g.pointerType===P.touch&&1==this.aimFocusOnTouchTap)){const I=g.viewport.getCamera(),C=I.globalXfoParam.value,F=(g.pointerType,g.pointerRay),U=C.tr.add(F.dir.scale(g.intersectionData.dist));this.aimFocus(I,U),g.aimTarget=U,g.aimDistance=g.intersectionData.dist,this.emit("aimingFocus",g),I.emit("aimingFocus",g),g.stopPropagation(),g.pointerType===P.mouse&&g.preventDefault()}}else if(2==this.__dragging){if(g.pointerType===P.mouse){this.endDrag(g),this.emit("movementFinished");g.viewport.getCamera().emit("movementFinished")}else if(g.pointerType===P.touch){const I=g,{changedTouches:C,touches:F}=I;for(let g=0;g<C.length;g++)this.__endTouch(C[g]);0==Object.keys(this.__ongoingTouches).length?this.endDrag(g):F.length||(this.endDrag(g),this.__ongoingTouches={}),I.preventDefault()}g.stopPropagation()}}onPointerEnter(g){}onPointerLeave(g){this.__keysPressed.length>0&&(this.__keysPressed=[],this.__velocity.set(0,0,0),this.__keyboardMovement=!1)}onWheel(g){const I=g.viewport.getCamera(),C=this.mouseWheelDollySpeedParam.value,F=g.shiftKey?.1:.5,U=I.globalXfoParam.value;let l;if(!I.isOrthographic())if(null!=g.intersectionData){l=U.tr.subtract(g.intersectionData.intersectionPos),l.normalizeInPlace();const C=U.inverse().transformVec3(g.intersectionData.intersectionPos);I.setFocalDistance(-C.z)}else{const C=g.pointerRay.pointAtDist(I.getFocalDistance());l=U.tr.subtract(C),l.normalizeInPlace()}const t=g.deltaY<0?-1:1,e=()=>{const g=I.getFocalDistance(),C=g*this.__mouseWheelMovementDist;U.tr.addInPlace(l.scale(C)),I.setFocalDistance(g+C),I.globalXfoParam.value=U,this.__mouseWheelZoomCount++,this.__mouseWheelZoomCount<6?this.__mouseWheelZoomId=window.setTimeout(e,10):(this.__mouseWheelZoomId=-1,this.emit("movementFinished"),I.emit("movementFinished"))},Q=()=>{const C=I.getFrustumHeight(),F=C*this.__mouseWheelMovementDist;if(I.setFrustumHeight(C+F),g.intersectionData){const l=U.tr.subtract(g.intersectionData.intersectionPos),t=U.ori.getZaxis();l.subtractInPlace(t.scale(l.dot(t))),U.tr.addInPlace(l.scale(F/(C+F))),I.globalXfoParam.value=U}this.__mouseWheelZoomCount++,this.__mouseWheelZoomCount<6?this.__mouseWheelZoomId=window.setTimeout(Q,10):(this.__mouseWheelZoomId=-1,this.emit("movementFinished"),I.emit("movementFinished"))};this.__mouseWheelZoomId>0?(this.__mouseWheelMovementDist+=t*C*F*.5/6,this.__mouseWheelZoomCount=0):(this.__mouseWheelMovementDist=t*C*F/6,this.__mouseWheelZoomCount=0,I.isOrthographic()?Q():e()),g.preventDefault(),g.stopPropagation()}integrateVelocityChange(g){const{viewport:I}=g,C=I.getCamera(),F=performance.now();if(this.__prevVelocityIntegrationTime>0){const g=(F-this.__prevVelocityIntegrationTime)/1e3,U=this.walkSpeedParam.value;if(U>0){const F=new o;F.tr=this.__velocity.normalize().scale(U*g);const l=C.globalXfoParam.value.multiply(F);if(this.walkModeCollisionDetection.value){const g=1.5,C=1.5,F=.5,U=new o(l.tr),t=new Z(l.tr,new d(0,0,-1)),e=I.getRenderer().raycastCluster(U,t,C,F,FF.OPAQUE);if(e.length>0){let I=0;e.forEach((g=>{I+=g.dist})),I/=e.length,l.tr=t.start.add(t.dir.scale(I-g))}}C.globalXfoParam.value=l}}this.__prevVelocityIntegrationTime=F}onKeyDown(g){if(!this.enabledWASDWalkMode)return;const I=g.key.toLowerCase();if(!this.__keysPressed.includes(I)){switch(I){case"w":this.__velocity.z-=1;break;case"s":this.__velocity.z+=1;break;case"a":this.__velocity.x-=1;break;case"d":this.__velocity.x+=1;break;default:return}if(g.stopPropagation(),this.__keysPressed.push(I),!this.__keyboardMovement){this.__keyboardMovement=!0,this.__prevVelocityIntegrationTime=performance.now();const I=()=>{this.integrateVelocityChange(g),this.__keyboardMovement&&window.requestAnimationFrame(I)};window.requestAnimationFrame(I)}}}onKeyUp(g){const I=g.key.toLowerCase();if(!this.__keysPressed.includes(I))return;switch(I){case"w":this.__velocity.z+=1;break;case"s":this.__velocity.z-=1;break;case"a":this.__velocity.x+=1;break;case"d":this.__velocity.x-=1;break;default:return}g.stopPropagation();const C=this.__keysPressed.indexOf(I);this.__keysPressed.splice(C,1),0==this.__keysPressed.length&&(this.__keyboardMovement=!1)}__startTouch(g){this.__ongoingTouches[g.identifier]={identifier:g.identifier,pos:new Q(g.clientX,g.clientY)}}__endTouch(g){delete this.__ongoingTouches[g.identifier]}_onTouchStart(g){const I=g.changedTouches;for(let g=0;g<I.length;g++)this.__startTouch(I[g]);this.initDrag(g)}onTouchEnd(g){g.preventDefault(),g.stopPropagation();const I=g.changedTouches;for(let g=0;g<I.length;g++)this.__endTouch(I[g]);0==Object.keys(this.__ongoingTouches).length&&this.endDrag(g)}onTouchCancel(g){g.preventDefault();const I=g.touches;for(let g=0;g<I.length;g++)this.__endTouch(I[g]);0==Object.keys(this.__ongoingTouches).length&&this.endDrag(g)}static get MANIPULATION_MODES(){return lF}}const eF=function(g,I){let C=null;if(null!=I.webglContextType)try{C=g.getContext(I.webglContextType,I),C.name=I.webglContextType}catch(g){}else{const F=["webgl2","webgl"];for(let U=0;U<F.length;U++){const l=F[U];try{C=g.getContext(l,I),C.name=l}catch(g){}if(C)break}}if(!C)throw new Error("WebGL not supported on your system");return C.sizeInBytes=function(g){switch(g){case this.BYTE:case this.UNSIGNED_BYTE:return 1;case this.SHORT:case this.UNSIGNED_SHORT:return 2;case this.INT:case this.UNSIGNED_INT:case this.FLOAT:return 4;default:throw new Error("unknown type")}},"webgl2"==C.name?(C.floatTexturesSupported=!0,C.__ext_float_linear=C.getExtension("OES_texture_float_linear"),C.__ext_texture_half_float_linear=C.getExtension("OES_texture_half_float_linear"),C.__ext_color_buffer_float=C.getExtension("EXT_color_buffer_float")):(C.__ext_float=C.getExtension("OES_texture_float"),C.__ext_float?(C.floatTexturesSupported=!0,C.__ext_float_linear=C.getExtension("OES_texture_float_linear")):console.warn("OES_texture_float is not available"),C.__ext_half_float=C.getExtension("OES_texture_half_float"),C.__ext_half_float&&(C.HALF_FLOAT=C.__ext_half_float.HALF_FLOAT_OES,C.floatTexturesSupported=!0,C.__ext_texture_half_float_linear=C.getExtension("OES_texture_half_float_linear")),C.__ext_color_buffer_float=C.getExtension("EXT_color_buffer_float"),C.__ext_std_derivatives=C.getExtension("OES_standard_derivatives"),C.__ext_Inst=C.getExtension("ANGLE_instanced_arrays"),C.__ext_Inst&&(C.vertexAttribDivisor=C.__ext_Inst.vertexAttribDivisorANGLE.bind(C.__ext_Inst),C.drawArraysInstanced=C.__ext_Inst.drawArraysInstancedANGLE.bind(C.__ext_Inst),C.drawElementsInstanced=C.__ext_Inst.drawElementsInstancedANGLE.bind(C.__ext_Inst)),C.__ext_VAO=C.getExtension("OES_vertex_array_object"),C.__ext_VAO&&(C.createVertexArray=C.__ext_VAO.createVertexArrayOES.bind(C.__ext_VAO),C.deleteVertexArray=C.__ext_VAO.deleteVertexArrayOES.bind(C.__ext_VAO),C.bindVertexArray=C.__ext_VAO.bindVertexArrayOES.bind(C.__ext_VAO)),C.__ext_element_index_uint=C.getExtension("OES_element_index_uint"),C.__ext_WEBGL_depth_texture=C.getExtension("WEBGL_depth_texture"),C.__ext_WEBGL_depth_texture&&(C.UNSIGNED_INT_24_8=C.__ext_WEBGL_depth_texture.UNSIGNED_INT_24_8_WEBGL),C.DRAW_FRAMEBUFFER=C.FRAMEBUFFER),C.__ext_frag_depth=C.getExtension("EXT_frag_depth"),C.setupInstancedQuad=function(){const g=new Float32Array([0,1,2,3]),I=new Uint16Array([0,1,2,2,1,3]);this.__quadVertexIdsBuffer=this.createBuffer(),this.bindBuffer(this.ARRAY_BUFFER,this.__quadVertexIdsBuffer),this.bufferData(this.ARRAY_BUFFER,g,this.STATIC_DRAW),this.__quadIndexBuffer=this.createBuffer(),this.bindBuffer(this.ELEMENT_ARRAY_BUFFER,this.__quadIndexBuffer),this.bufferData(this.ELEMENT_ARRAY_BUFFER,I,this.STATIC_DRAW),this.__quadattrbuffers={vertexIDs:{buffer:this.__quadVertexIdsBuffer,dataType:"Float32",dimension:1,count:g.length,shared:!0}}},C.drawQuad=function(){this.drawElements(this.TRIANGLES,6,this.UNSIGNED_SHORT,0)},C},QF=function(g,I){if(!I.width||!I.height){if(!I.width)throw new Error("Invalid texture params. 'width' not provided");if(!I.height)throw new Error("Invalid texture params. 'height' not provided")}const C=g.getParameter(g.MAX_TEXTURE_SIZE);if(I.width<=0||I.width>C||I.height<=0||I.height>C)throw new Error("GLTextureParams: Invalid texture size. width:"+I.width+" height:"+I.height+" maxSize:"+C);const F={width:I.width,height:I.height},U=I=>isNaN(I)?g[I]:I,l=(g,C)=>{g in I?F[g]=U(I[g]):C&&(F[g]=U(C))};if(l("format"),l("internalFormat",F.format),l("type",g.UNSIGNED_BYTE),l("minFilter",I.filter?I.filter:g.LINEAR),l("magFilter",I.filter?I.filter:g.LINEAR),l("wrapS",I.wrapS?I.wrapS:g.CLAMP_TO_EDGE),l("wrapT",I.wrapT?I.wrapT:g.CLAMP_TO_EDGE),l("flipY",!1),l("mipMapped",!1),l("depthInternalFormat"),l("depthFormat"),l("depthType"),I.createDepthTexture&&("webgl2"==g.name||g.__ext_WEBGL_depth_texture?(g.name,F.depthFormat=g.DEPTH_COMPONENT,F.depthType=g.UNSIGNED_INT):F.depthType=g.UNSIGNED_SHORT),F.format==g.FLOAT)if("webgl2"==g.name)F.filter!=g.LINEAR||g.__ext_float_linear||(console.warn("Floating point texture filtering not supported on result device"),F.filter=g.NEAREST);else if(g.__ext_float)F.filter!=g.LINEAR||g.__ext_float_linear||(console.warn("Floating point texture filtering not supported on result device"),F.filter=g.NEAREST);else{if(!g.__ext_half_float)throw new Error("OES_texture_half_float is not available");F.format=g.HALF_FLOAT,F.filter!=g.LINEAR||g.__ext_texture_half_float_linear||(console.warn("Half Float texture filtering not supported on result device"),F.filter=g.NEAREST)}else if(F.format==g.HALF_FLOAT)if("webgl2"==g.name);else{if(!g.__ext_half_float)throw new Error("OES_texture_half_float is not available");if(F.filter!=g.LINEAR||g.__ext_texture_half_float_linear||(console.warn("Half Float texture filtering not supported on result device"),F.filter=g.NEAREST),F.channels==g.RGB)throw new Error("OES_texture_half_float onlysupports RGBA textures")}else if("sRGB"==F.format&&!g.__ext_sRGB)throw new Error("EXT_sRGB is not available");return null!=F.format&&"webgl2"==g.name&&F.internalFormat==F.format&&(F.type==g.FLOAT?F.format==g.RED?F.internalFormat=g.R32F:F.format==g.RG?F.internalFormat=g.RG32F:F.format==g.RGB?F.internalFormat=g.RGB32F:F.format==g.RGBA&&(F.internalFormat=g.RGBA32F):F.type==g.HALF_FLOAT?F.format==g.RED?F.internalFormat=g.R16F:F.format==g.RGB?F.internalFormat=g.RGB16F:F.format==g.RGBA&&(F.internalFormat=g.RGBA16F):F.type==g.UNSIGNED_BYTE&&(F.format==g.RED&&(F.internalFormat=g.R8),F.format==g.RGB?F.internalFormat=g.RGB8:F.format==g.RGBA&&(F.internalFormat=g.RGBA8))),null!=F.depthFormat&&("webgl2"==g.name?F.depthType==g.UNSIGNED_SHORT?F.depthInternalFormat=g.DEPTH_COMPONENT16:F.depthType==g.UNSIGNED_INT&&(F.depthInternalFormat=g.DEPTH_COMPONENT24):F.depthInternalFormat=F.depthFormat),F};class dF extends ng{constructor(g,I){if(super(),this.__image=null,this.__internalFormat=0,this.__type=0,this.__format=0,this.__wrapParam=0,this.params={},this.__minFilter=0,this.__magFilter=0,this.__wrapS=0,this.__wrapT=0,this.__flipY=!1,this.__mipMapped=!1,this.invert=!1,this.alphaFromLuminance=!1,this.__gltex=null,this.__typeParam="",this.__formatParam="",this.__gl=g,this.ready=!1,this.width=0,this.height=0,this.textureType=1,this.textureDesc=[0,0,0,0],this.__loaded=!1,this.__bound=!1,null!=I)if(I instanceof dI){this.__image=I,this.__image.setMetadata("gltexture",this);const g=()=>{const g=this.__image.getParams(),I=g.width,C=g.height,F=g.data;this.bufferData(F,I,C)};this.__image.on("updated",g),this.__image.isLoaded()?this.configure(this.__image.getParams()):this.__image.on("loaded",(()=>{this.configure(this.__image.getParams())}))}else this.configure(I)}isLoaded(){return this.__loaded}getImage(){return this.__image}getInternalFormat(){return this.__internalFormat}getType(){return this.__type}getFormat(){return this.__format}getWrap(){return this.__wrapParam}getMipMapped(){return this.__mipMapped}configure(g){const I=this.__gl,C=QF(I,g);this.params=C,this.__format=C.format,this.__internalFormat=C.internalFormat,this.__type=C.type,this.__minFilter=C.minFilter,this.__magFilter=C.magFilter,this.__wrapS=C.wrapS,this.__wrapT=C.wrapT,this.__flipY="flipY"in g&&g.flipY,this.__mipMapped="mipMapped"in g&&g.mipMapped,this.invert="invert"in g&&g.invert,this.alphaFromLuminance="alphaFromLuminance"in g&&g.alphaFromLuminance,this.textureType=1,this.textureDesc[0]=this.width,this.textureDesc[1]=this.height,1==this.textureType&&this.__format==I.RGBA&&(this.textureType=2),this.__gltex&&I.deleteTexture(this.__gltex),this.__gltex=I.createTexture(),this.__updateGLTexParams();const F=C.width,U=C.height,l=g.data;l?this.bufferData(l,F,U,!1,!1):this.resize(F,U,!1,!1),this.__loaded||(this.emit("ready"),this.__loaded=!0)}__updateGLTexParams(){const g=this.__gl;g.bindTexture(g.TEXTURE_2D,this.__gltex),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MAG_FILTER,this.__minFilter),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MIN_FILTER,this.__magFilter),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_S,this.__wrapS),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_T,this.__wrapT)}bufferData(g,I=-1,C=-1,F=!0,U=!0){const l=this.__gl;if(F&&l.bindTexture(l.TEXTURE_2D,this.__gltex),null!=g){if(g instanceof Image||g instanceof ImageData||g instanceof HTMLCanvasElement||g instanceof HTMLImageElement||g instanceof HTMLVideoElement)l.texImage2D(l.TEXTURE_2D,0,this.__internalFormat,this.__format,this.__type,g),this.width=g.width,this.height=g.height;else{-1==I&&(I=this.width),-1==C&&(C=this.height);const F=I*C;let U;switch(this.__format){case l.RED:case l.RED_INTEGER:case l.ALPHA:case l.LUMINANCE:case l.LUMINANCE_ALPHA:U=1;break;case l.RG:U=2,l.pixelStorei(l.UNPACK_ALIGNMENT,2);break;case l.RGB:U=3;break;case l.RGBA:U=4;break;default:console.warn("Reaching default case: numChannels:=1"),U=1}g.length!=F*U&&console.warn("Invalid data for Image width:"+I+" height:"+C+" format:"+this.__formatParam+" type:"+this.__typeParam+" Data Length:"+g.length+" Expected:"+F*U),this.__type==l.HALF_FLOAT&&g instanceof Float32Array&&(g=s.convertFloat32ArrayToUInt16Array(g)),"webgl2"==l.name?l.texImage2D(l.TEXTURE_2D,0,this.__internalFormat,I,C,0,this.__format,this.__type,g,0):l.texImage2D(l.TEXTURE_2D,0,this.__internalFormat,I,C,0,this.__format,this.__type,g),this.width=I,this.height=C}this.__mipMapped&&l.generateMipmap(l.TEXTURE_2D)}else l.texImage2D(l.TEXTURE_2D,0,this.__internalFormat,this.width,this.height,0,this.__format,this.__type,null),this.width=I,this.height=C;U&&this.emit("updated")}clear(){const g=this.__gl,I=this.width*this.height;let C,F;switch(this.__format){case g.RED:case g.RED_INTEGER:case g.ALPHA:case g.LUMINANCE:case g.LUMINANCE_ALPHA:C=1;break;case g.RG:C=2;break;case g.RGB:C=3;break;case g.RGBA:C=4;break;default:throw new Error("Invalid Format")}switch(this.__type){case g.UNSIGNED_BYTE:F=new Uint8Array(I*C);break;case g.HALF_FLOAT:F=new Uint16Array(I*C);break;case g.FLOAT:F=new Float32Array(I*C);break;default:throw new Error("Invalid Type")}"webgl2"==g.name?g.texImage2D(g.TEXTURE_2D,0,this.__internalFormat,this.width,this.height,0,this.__format,this.__type,F,0):g.texImage2D(g.TEXTURE_2D,0,this.__internalFormat,this.width,this.height,0,this.__format,this.__type,F)}resize(g,I,C=!1,F=!0){const U=this.__gl;if(this.width!=g||this.height!=I){const l=U.getParameter(U.MAX_TEXTURE_SIZE);if(g<0||g>l||I<0||I>l)throw new Error("gl-texture2d: Invalid texture size. width:"+g+" height:"+I+" maxSize:"+l);if(C){const C=U.createTexture();U.bindTexture(U.TEXTURE_2D,C),U.texImage2D(U.TEXTURE_2D,0,this.__internalFormat,g,I,0,this.__format,this.__type,null);const F=U.createFramebuffer();U.bindFramebuffer(U.FRAMEBUFFER,F),U.framebufferTexture2D(U.FRAMEBUFFER,U.COLOR_ATTACHMENT0,U.TEXTURE_2D,this.__gltex,0),U.bindTexture(U.TEXTURE_2D,C),U.copyTexImage2D(U.TEXTURE_2D,0,this.__internalFormat,0,0,this.width,this.height,0),U.bindFramebuffer(U.FRAMEBUFFER,null),U.deleteFramebuffer(F),this.__gl.deleteTexture(this.__gltex),this.__gltex=C,this.__updateGLTexParams()}else this.width>0&&this.height,U.bindTexture(U.TEXTURE_2D,this.__gltex),U.texImage2D(U.TEXTURE_2D,0,this.__internalFormat,g,I,0,this.__format,this.__type,null);if(this.width=g,this.height=I,F){const C=new N(g,I);this.emit("resized",C)}}}populate(g,I,C,F=0,U=0,l=!0){const t=this.__gl;l&&t.bindTexture(t.TEXTURE_2D,this.__gltex),t.texSubImage2D(t.TEXTURE_2D,0,F,U,I,C,this.__format,this.__type,g)}getSize(){return[this.width,this.height]}get glTex(){return this.__gltex}getTexHdl(){return this.__gltex}preBind(g,I){return{textureTypeUnif:I[g.name+"Type"],textureDescUnif:I[g.name+"Desc"]}}bindToUniform(g,I,C){if(!this.__loaded)return!1;if(!this.__gltex)throw new Error("Unable to bind non-initialized or deleted texture.");const F=g.boundTextures++,U=this.__gl;return U.activeTexture(U.TEXTURE0+F),U.bindTexture(U.TEXTURE_2D,this.__gltex),U.uniform1i(I.location,F),C&&(C.textureTypeUnif&&U.uniform1i(C.textureTypeUnif.location,this.textureType),C.textureDescUnif&&U.uniform4fv(C.textureDescUnif.location,this.textureDesc)),!0}destroy(){super.destroy(),this.__image&&this.__image.setMetadata("gltexture",void 0),this.__gl.deleteTexture(this.__gltex),this.__gltex=null}}let nF={bool:"Boolean",int:"SInt32",uint:"UInt32",float:"Float32",ivec2:"Vec2",ivec3:"Vec3",ivec4:"Vec4",vec2:"Vec2",vec3:"Vec3",vec4:"Vec4",color:"Color",mat3:"Mat3",mat4:"Mat4",sampler2D:"BaseImage",samplerCube:"BaseImage"};const iF=/\s+/;class AF{constructor(){this.__shaderModules={},this.materialTemplates={}}setShaderModule(g,I){g in this.__shaderModules||(this.__shaderModules[g]=I)}getShaderModule(g){return this.__shaderModules[g]}getShaderModuleNames(){const g=[];for(const I in this.__shaderModules)g.push(I);return g}parseAttr(g,I,C,F){if(!(g[1]in nF))throw new Error("Error while parsing \nType not recognized:"+g[1]);const U=g[2].slice(0,g[2].length-1);C.attributes[U]={type:nF[g[1]],instanced:I},"color"==g[1]&&(g[1]="vec4",g.join(" "))}handleImport(g,I,C,F,U){if(C in this.__shaderModules){const l=this.__shaderModules[C];if(!l)throw Error("snippet not loaded or does not exists!");const t=this.parseShaderHelper(I,l,F,U);F.push(C),g.glsl=g.glsl+t.glsl,g.numLines+=t.numLines,g.uniforms=Object.assign(Object.assign({},g.uniforms),t.uniforms),g.attributes=Object.assign(Object.assign({},g.attributes),t.attributes)}else console.log("shaderName: "+I),console.log("SNIPPET NOT FOUND: "+C)}parseShader(g,I){return this.parseShaderHelper(g,I,[],0)}parseShaderHelper(g,I,C,F){const U=(g,I)=>{g.glsl=g.glsl+I+"\n",g.numLines++};C.push(g);const l={glsl:"",numLines:0,uniforms:{},attributes:{}},t=(I=I.toString()).split("\n");for(let I=0;I<t.length;I++){let e=t[I];const Q=e.trim(),d=Q.split(iF);switch(d[0]){case"<%include":case"import":{const I=Q.split(/'|"|`/)[1].split("/").pop();C.includes(I)||this.handleImport(l,g,I,C,F);break}case"attribute":this.parseAttr(d,!1,l,e),U(l,e);break;case"instancedattribute":this.parseAttr(d,!0,l,e),d[0]="attribute",e=d.join(" "),U(l,e);break;case"uniform":{let I=1;4==d.length&&(I=2);const C=d[I];if(!(C in nF))throw new Error("Error while parsing :"+g+" \nType not recognized:"+d[1]);const F=d[I+1].slice(0,d[I+1].length-1);F.includes("[")?l.uniforms[F.substring(0,F.indexOf("["))]=nF[C]:l.uniforms[F]=nF[C],"struct"==l.uniforms[F]&&console.log(d),"color"==d[1]&&(d[1]="vec4",e=d.join(" ")),U(l,e);break}default:U(l,e)}}return l}}const BF=new AF;let aF=0;class VF extends ag{constructor(g,I){super(I),g&&(this.__gl=g),this.__shaderStagesGLSL={},this.__shaderStages={},this.__shaderProgramHdls={},this.__gltextures={},this.__id=aF++}setGLContext(g){this.__gl=g}setShaderStage(g,I){this.__shaderStagesGLSL[g]=I,this.clearProgramsCache()}getShaderStage(g){return this.__shaderStagesGLSL[g]}clearProgramsCache(){const g=this.__gl;for(const I in this.__shaderProgramHdls){const C=this.__shaderProgramHdls[I];for(const I in C.shaderHdls)g.deleteShader(C.shaderHdls[I]);g.deleteProgram(C.shaderProgramHdl)}}static isTransparent(){return!1}static isOverlay(){return!1}__compileShaderStage(g,I,C,F){const U=this.__gl;if(F||(F=U.shaderopts),F){if(F.repl)for(const I in F.repl)g=e.replaceAll(g,I,F.repl[I]);if(F.directives){g=F.directives.join("\n")+"\n"+g}}let l;"webgl2"==U.name&&(g=e.replaceAll(g,"attribute","in"),g="vertexShader"==C?e.replaceAll(g,"varying","out"):e.replaceAll(g,"varying","in"),l="#version 300 es\n",g="#version 300 es\n"+(g=e.replaceAll(g,"texture2D","texture")));const t=U.createShader(I);if(!t)throw Error("shaderHdl not defined");if(U.shaderSource(t,g),U.compileShader(t),!U.getShaderParameter(t,U.COMPILE_STATUS)){console.log("Errors in :"+this.constructor.name);const I=U.getShaderInfoLog(t).split("\n"),F={};for(let g=0;g<I.length;g++){if(I[g].startsWith("'")){I[g-1]=I[g-1]+I[g],delete I[g],g--;continue}const C=I[g].split(":");if(C.length>=2){const U=parseInt(C[2]);isNaN(U)||(F[U]?F[U].push(I[g]):F[U]=[I[g]])}}const l=[],e=g.split("\n");for(const g in F){const I=Number.parseInt(g)-1;for(let g=Math.max(0,I-4);g<I;g++)l.push((I+1+" ").padStart(3)+e[g]);l.push((I+1+">").padStart(3)+e[I]);for(let g=I+1;g<Math.min(e.length-1,I+5);g++)l.push((I+1+" ").padStart(3)+e[g]);const C=F[g];for(const g of C)l.push(g)}throw new Error("An error occurred compiling the shader \n=================\n"+this.constructor.name+"."+C+": \n\n"+l.join("\n"))}return t}__createProgram(g){const I=this.__gl;this.__shaderCompilationAttempted=!0;const C=I.createProgram();if(!C)throw Error("shaderProgramHdl not defined");const F={};this.__shaderStages.VERTEX_SHADER||(this.__shaderStages.VERTEX_SHADER=BF.parseShader("VERTEX_SHADER",this.__shaderStagesGLSL.VERTEX_SHADER));const U=this.__shaderStages.VERTEX_SHADER.glsl;if(null!=U){const l=this.__compileShaderStage(U,I.VERTEX_SHADER,"vertexShader",g);if(!l)return!1;I.attachShader(C,l),F[I.VERTEX_SHADER]=l}this.__shaderStages.FRAGMENT_SHADER||(this.__shaderStages.FRAGMENT_SHADER=BF.parseShader("FRAGMENT_SHADER",this.__shaderStagesGLSL.FRAGMENT_SHADER));const l=this.__shaderStages.FRAGMENT_SHADER.glsl;if(null!=l){const U=Object.assign({},I.shaderopts,g);U.frag&&(U.defines=U.frag.defines+U.defines);const t=this.__compileShaderStage(l,I.FRAGMENT_SHADER,"fragmentShader",U);if(!t)return!1;I.attachShader(C,t),F[I.FRAGMENT_SHADER]=t}if(I.linkProgram(C),!I.getProgramParameter(C,I.LINK_STATUS)){const g=I.getProgramInfoLog(C);if(!g)throw Error("info not defined");if(g.includes("D3D shader compilation failed")){const g=I.getExtension("WEBGL_debug_shaders");if(g){const C=g.getTranslatedShaderSource(F[I.VERTEX_SHADER]);console.log(C)}}throw console.log("vertexShaderGLSL:"+U),console.log("fragmentShaderGLSL:"+l),new Error("Unable to link the shader program:"+this.constructor.name+"\n==================\n"+g)}const t=this.__extractAttributeAndUniformLocations(C,g);return t.shaderHdls=F,t.shaderProgramHdl=C,t}__extractAttributeAndUniformLocations(g,I){const C=this.__gl,F=this.getAttributes(),U={attrs:{},unifs:{}};for(const I in F){const l=C.getAttribLocation(g,I);if(null==l){console.warn("Shader attribute not found:"+I);continue}const t=F[I];U.attrs[I]={name:I,location:l,type:t.type,instanced:t.instanced}}const l=this.getUniforms();for(let F in l){const t=l[F];if(I&&I.repl)for(const g in I.repl)F=F.replace(g,I.repl[g]);const e=C.getUniformLocation(g,F);null!=e&&(U.unifs[F]={name:F,location:e,type:t})}return U}getAttributes(){const g={};for(const I in this.__shaderStages){const C=this.__shaderStages[I];for(const I in C.attributes)g[I]=C.attributes[I]}return g}getUniforms(){const g={};for(const I in this.__shaderStages){const C=this.__shaderStages[I];for(const I in C.uniforms)g[I]=C.uniforms[I]}return g}isCompiledForTarget(g){const I=g||this.getId();return null!=this.__shaderProgramHdls[I]}compileForTarget(g,I){const C=g||this.getId();let F=this.__shaderProgramHdls[C];return F||!1!==F&&(F=this.__createProgram(I||{}),F.shaderkey=C,this.__shaderProgramHdls[C]=F),F}compile(){this.compileForTarget()}bind(g,I){const C=this.__gl;if(g.glShader!=this){const F=this.compileForTarget(I,g.shaderopts);if(F==={})return console.warn(this.constructor.name+" is not compiled for "+I),!1;const U=F.shaderProgramHdl;C.useProgram(U),g.glShader=this,g.shaderkey=F.shaderkey,g.unifs=F.unifs,g.attrs=F.attrs,g.boundTextures=0,g.glGeom=void 0,g.bindRendererUnifs&&g.bindRendererUnifs(F.unifs)}return g.supportsInstancing=!0,!0}unbind(g){return g.glShader=null,g.shaderkey="",g.unifs={},g.attrs={},!0}getGeomDataShaderName(){return""}getSelectedShaderName(){return""}static supportsInstancing(){return!0}static getPackedMaterialData(g){return new Float32Array(4)}static getMaterialTemplate(){throw new Error("Shader does not provide a material template.")}destroy(){const g=this.__gl;for(const I in this.__shaderProgramHdls){const C=this.__shaderProgramHdls[I];g.deleteProgram(C.shaderProgramHdl)}this.__shaderProgramHdls={}}}new AI;class RF{constructor(g,I,F=!1){this.colorTextureResizeEventId=-1,this.__depthTexture=null,this.__fbo=null,this.__prevBoundFbo=null,!C.isIOSDevice||"webgl"!=g.name||I.getType()!=g.FLOAT&&I.getType()!=g.HALF_FLOAT||console.error("IOS devices are unable to render to float textures."),this.__gl=g,this.__colorTexture=I,this.__createDepthTexture=F,this.__clearColor=new A(0,0,0,0),this.__colorTexture&&(this.colorTextureResizeEventId=this.__colorTexture.on("resized",(g=>{this.resize(this.__colorTexture.width,this.__colorTexture.height,!1)}))),this.setup()}textureResized(g){this.resize(this.__colorTexture.width,this.__colorTexture.height,!1)}setClearColor(g){this.__clearColor=g}getWidth(){return this.__colorTexture.width}getHeight(){return this.__colorTexture.height}getSize(){return[this.__colorTexture.width,this.__colorTexture.height]}getColorTexture(){return this.__colorTexture}getDepthTextureGL(){return this.__depthTexture}get width(){return this.__colorTexture.width}get height(){return this.__colorTexture.height}get size(){return[this.__colorTexture.width,this.__colorTexture.height]}get colorTexture(){return this.__colorTexture}setColorTexture(g){const I=this.__gl;this.__colorTexture=g,I.framebufferTexture2D(I.FRAMEBUFFER,I.COLOR_ATTACHMENT0,I.TEXTURE_2D,this.__colorTexture.glTex,0)}get depthTextureGL(){return this.__depthTexture}setup(){const g=this.__gl;if(this.__fbo=g.createFramebuffer(),"webgl2"==g.name?g.bindFramebuffer(g.DRAW_FRAMEBUFFER,this.__fbo):g.bindFramebuffer(g.FRAMEBUFFER,this.__fbo),this.__colorTexture&&("webgl2"==g.name?g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_2D,this.__colorTexture.glTex,0):g.framebufferTexture2D(g.FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_2D,this.__colorTexture.glTex,0)),this.__createDepthTexture)if("webgl2"==g.name||g.__ext_WEBGL_depth_texture)g.activeTexture(g.TEXTURE0),this.__depthTexture=g.createTexture(),g.bindTexture(g.TEXTURE_2D,this.__depthTexture),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MAG_FILTER,g.LINEAR),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MIN_FILTER,g.LINEAR),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_S,g.CLAMP_TO_EDGE),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_T,g.CLAMP_TO_EDGE),"webgl2"==g.name?(g.texImage2D(g.TEXTURE_2D,0,g.DEPTH_COMPONENT24,this.width,this.height,0,g.DEPTH_COMPONENT,g.UNSIGNED_INT,null),g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.TEXTURE_2D,this.__depthTexture,0)):(g.texImage2D(g.TEXTURE_2D,0,g.DEPTH_COMPONENT,this.width,this.height,0,g.DEPTH_COMPONENT,g.UNSIGNED_INT,null),g.framebufferTexture2D(g.FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.TEXTURE_2D,this.__depthTexture,0));else{const I=g.createRenderbuffer();g.bindRenderbuffer(g.RENDERBUFFER,I),g.renderbufferStorage(g.RENDERBUFFER,g.DEPTH_COMPONENT16,this.width,this.height),g.framebufferRenderbuffer(g.FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.RENDERBUFFER,I)}this.__checkFramebuffer(),"webgl2"==g.name?g.bindFramebuffer(g.DRAW_FRAMEBUFFER,null):g.bindFramebuffer(g.FRAMEBUFFER,null)}resize(g,I,C){const F=this.__gl;C&&this.__colorTexture.resize(g,I,!1,!1),"webgl2"==F.name?F.bindFramebuffer(F.DRAW_FRAMEBUFFER,this.__fbo):F.bindFramebuffer(F.FRAMEBUFFER,this.__fbo),F.framebufferTexture2D(F.FRAMEBUFFER,F.COLOR_ATTACHMENT0,F.TEXTURE_2D,this.__colorTexture.glTex,0),this.__depthTexture&&(F.activeTexture(F.TEXTURE0),F.bindTexture(F.TEXTURE_2D,this.__depthTexture),"webgl2"==F.name?F.texImage2D(F.TEXTURE_2D,0,F.DEPTH_COMPONENT24,this.width,this.height,0,F.DEPTH_COMPONENT,F.UNSIGNED_INT,null):F.texImage2D(F.TEXTURE_2D,0,F.DEPTH_COMPONENT,this.width,this.height,0,F.DEPTH_COMPONENT,F.UNSIGNED_INT,null)),this.__checkFramebuffer()}__checkFramebuffer(){const g=this.__gl;let I;if(I="webgl2"==g.name?g.checkFramebufferStatus(g.DRAW_FRAMEBUFFER):g.checkFramebufferStatus(g.FRAMEBUFFER),I!==g.FRAMEBUFFER_COMPLETE)switch(g.bindTexture(g.TEXTURE_2D,null),"webgl2"==g.name?g.bindFramebuffer(g.DRAW_FRAMEBUFFER,null):g.bindFramebuffer(g.FRAMEBUFFER,null),console.warn("Error creating Fbo width:",this.width,", height:",this.height," Texture Type:",this.__colorTexture.getType()),I){case g.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case g.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case g.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case g.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}}bindForWriting(g){g&&(this.__prevBoundFbo=g.boundRendertarget,g.boundRendertarget=this.__fbo);const I=this.__gl;"webgl2"==I.name?I.bindFramebuffer(I.DRAW_FRAMEBUFFER,this.__fbo):I.bindFramebuffer(I.FRAMEBUFFER,this.__fbo),I.viewport(0,0,this.width,this.height)}unbindForWriting(g){g&&(g.boundRendertarget=this.__prevBoundFbo);const I=this.__gl;"webgl2"==I.name?I.bindFramebuffer(I.DRAW_FRAMEBUFFER,this.__prevBoundFbo):I.bindFramebuffer(I.FRAMEBUFFER,this.__prevBoundFbo)}bind(g){this.bindForWriting(g)}unbind(g){if(g)this.unbindForWriting(g);else{const g=this.__gl;g.bindFramebuffer(g.FRAMEBUFFER,null)}}bindForReading(g){const I=this.__gl;"webgl2"==I.name?I.bindFramebuffer(I.READ_FRAMEBUFFER,this.__fbo):I.bindFramebuffer(I.FRAMEBUFFER,this.__fbo)}unbindForReading(){const g=this.__gl;"webgl2"==g.name?g.bindFramebuffer(g.READ_FRAMEBUFFER,null):g.bindFramebuffer(g.FRAMEBUFFER,null)}clear(){const g=this.__gl;g.colorMask(!0,!0,!0,!0);const I=this.__clearColor.asArray();g.clearColor(I[0],I[1],I[2],I[3]),this.__createDepthTexture?g.clear(g.COLOR_BUFFER_BIT|g.DEPTH_BUFFER_BIT):g.clear(g.COLOR_BUFFER_BIT)}bindAndClear(g){this.bind(g),this.clear()}destroy(){const g=this.__gl;g.bindFramebuffer(g.FRAMEBUFFER,null),g.deleteFramebuffer(this.__fbo),this.__fbo=null,this.__colorTexture.removeListenerById("resized",this.colorTextureResizeEventId)}}class sF extends b{constructor(g,I){super(),this.params={},this.width=0,this.height=0,this.__gl=g,this.textureTargets=[],this.depthTexture=null,this.textureDesc=[0,0,0,0],this.clearColor=new A(0,0,0,0),this.colorMask=[!0,!0,!0,!0],I&&this.configure(I)}configure(g){const I=this.__gl,C=QF(I,g);this.textureTargets.forEach((g=>{I.deleteTexture(g)})),this.textureTargets=[],this.depthTexture&&(I.deleteTexture(this.depthTexture),this.depthTexture=null),this.frameBuffer&&I.deleteFramebuffer(this.frameBuffer),this.params=C,this.type=C.type,this.format=C.format,this.internalFormat=C.internalFormat,this.filter=C.filter,this.wrap=C.wrap,this.flipY=C.flipY,this.width=C.width,this.height=C.height,this.textureType=1,this.textureDesc[0]=this.width,this.textureDesc[1]=this.height;const F=null!=g.numColorChannels?g.numColorChannels:null!=C.format?1:0;for(let g=0;g<F;g++){I.activeTexture(I.TEXTURE0+1);const g=I.createTexture();I.bindTexture(I.TEXTURE_2D,g),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_WRAP_S,C.wrapS),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_WRAP_T,C.wrapT),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_MIN_FILTER,C.minFilter),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_MAG_FILTER,C.magFilter),I.texImage2D(I.TEXTURE_2D,0,this.internalFormat,C.width,C.height,0,this.format,this.type,null),this.textureTargets.push(g)}if(C.depthFormat){if("webgl"==I.name&&!I.__ext_WEBGL_depth_texture)throw new Error("Depth textures not support on this device");I.activeTexture(I.TEXTURE0),this.depthTexture=I.createTexture(),I.bindTexture(I.TEXTURE_2D,this.depthTexture),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_WRAP_S,C.wrapS),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_WRAP_T,C.wrapT),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_MIN_FILTER,C.minFilter),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_MAG_FILTER,C.magFilter),I.texImage2D(I.TEXTURE_2D,0,C.depthInternalFormat,C.width,C.height,0,C.depthFormat,C.depthType,null)}if(this.frameBuffer=I.createFramebuffer(),this.bindForWriting(),this.textureTargets.length>0){this.textureTargets.length>1&&"webgl"==I.name&&I.drawBuffers;const g=[];for(let C=0;C<this.textureTargets.length;C++)I.framebufferTexture2D(I.DRAW_FRAMEBUFFER,I.COLOR_ATTACHMENT0+C,I.TEXTURE_2D,this.textureTargets[C],0),g.push(I.COLOR_ATTACHMENT0+C);this.textureTargets.length>1&&I.drawBuffers(g)}this.depthTexture&&I.framebufferTexture2D(I.DRAW_FRAMEBUFFER,I.DEPTH_ATTACHMENT,I.TEXTURE_2D,this.depthTexture,0),this.checkFramebuffer()}checkFramebuffer(){this.bindForWriting();const g=this.__gl,I=g.checkFramebufferStatus(g.DRAW_FRAMEBUFFER);if(I!=g.FRAMEBUFFER_COMPLETE)switch(I){case g.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case g.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case g.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case g.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}this.unbindForWriting()}bindForWriting(g,I=!1){g&&(this.__prevBoundFbo=g.boundRendertarget,g.boundRendertarget=this.frameBuffer);const C=this.__gl;"webgl2"==C.name?C.bindFramebuffer(C.DRAW_FRAMEBUFFER,this.frameBuffer):C.bindFramebuffer(C.FRAMEBUFFER,this.frameBuffer),C.viewport(0,0,this.width,this.height),I&&this.clear()}unbindForWriting(g){g&&(g.boundRendertarget=this.__prevBoundFbo);const I=this.__gl;"webgl2"==I.name?I.bindFramebuffer(I.DRAW_FRAMEBUFFER,this.__prevBoundFbo):I.bindFramebuffer(I.FRAMEBUFFER,this.__prevBoundFbo)}clear(g=!0){const I=this.__gl,C=this.colorMask;I.colorMask(C[0],C[1],C[2],C[3]);const F=this.clearColor.asArray();I.clearColor(F[0],F[1],F[2],F[3]);let U=0;this.textureTargets.length>0&&(U|=I.COLOR_BUFFER_BIT),this.depthTexture&&(U|=I.DEPTH_BUFFER_BIT),I.clear(U)}bindForReading(){const g=this.__gl;"webgl2"==g.name?g.bindFramebuffer(g.READ_FRAMEBUFFER,this.frameBuffer):g.bindFramebuffer(g.FRAMEBUFFER,this.frameBuffer)}unbindForReading(){const g=this.__gl;"webgl2"==g.name?g.bindFramebuffer(g.READ_FRAMEBUFFER,null):g.bindFramebuffer(g.FRAMEBUFFER,null)}bindColorTexture(g,I,C=0){const F=this.__gl,U=g.boundTextures++;return F.uniform1i(I.location,U),F.activeTexture(F.TEXTURE0+U),F.bindTexture(F.TEXTURE_2D,this.textureTargets[C]),!0}bindDepthTexture(g,I){const C=this.__gl,F=g.boundTextures++;return C.uniform1i(I.location,F),C.activeTexture(C.TEXTURE0+F),C.bindTexture(C.TEXTURE_2D,this.depthTexture),!0}unbind(g){this.unbindForWriting(g)}resize(g,I,C=!1){const F=this.__gl;if(this.width!=g||this.height!=I){const U=F.getParameter(F.MAX_TEXTURE_SIZE);if(g<0||g>U||I<0||I>U)throw new Error(`GLRenderTarget: Invalid texture size. width: ${g} height: ${I} maxSize: ${U}`);C&&this.bindForReading();const l=this.params;for(let U=0;U<this.textureTargets.length;U++){const t=F.createTexture();F.bindTexture(F.TEXTURE_2D,t),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_S,l.wrapS),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_T,l.wrapT),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MIN_FILTER,l.minFilter),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MAG_FILTER,l.magFilter),F.texImage2D(F.TEXTURE_2D,0,this.internalFormat,g,I,0,this.format,this.type,null),C&&F.copyTexImage2D(F.TEXTURE_2D,0,this.internalFormat,0,0,Math.min(g,this.width),Math.min(I,this.height),0),F.deleteTexture(this.textureTargets[U]),this.textureTargets[U]=t}if(l.depthFormat){if("webgl"==F.name&&!F.__ext_WEBGL_depth_texture)throw new Error("Depth textures not support on this device");F.activeTexture(F.TEXTURE0);const U=F.createTexture();F.bindTexture(F.TEXTURE_2D,U),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_S,l.wrapS),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_T,l.wrapT),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MIN_FILTER,l.minFilter),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MAG_FILTER,l.magFilter),F.texImage2D(F.TEXTURE_2D,0,l.depthInternalFormat,g,I,0,l.depthFormat,l.depthType,null),C&&F.copyTexImage2D(F.TEXTURE_2D,0,this.internalFormat,0,0,Math.min(g,this.width),Math.min(I,this.height),0),F.deleteTexture(this.depthTexture),this.depthTexture=U}if(C&&this.unbindForReading(),this.width=g,this.height=I,this.frameBuffer&&F.deleteFramebuffer(this.frameBuffer),this.frameBuffer=F.createFramebuffer(),this.bindForWriting(),this.textureTargets.length>0){this.textureTargets.length>1&&"webgl"==F.name&&F.drawBuffers;const g=[];for(let I=0;I<this.textureTargets.length;I++)F.framebufferTexture2D(F.DRAW_FRAMEBUFFER,F.COLOR_ATTACHMENT0+I,F.TEXTURE_2D,this.textureTargets[I],0),g.push(F.COLOR_ATTACHMENT0+I);this.textureTargets.length>1&&F.drawBuffers(g)}this.depthTexture&&F.framebufferTexture2D(F.DRAW_FRAMEBUFFER,F.DEPTH_ATTACHMENT,F.TEXTURE_2D,this.depthTexture,0),this.checkFramebuffer()}}bindToUniform(g,I,C){const F=g.boundTextures++,U=this.__gl.TEXTURE0+F,l=this.__gl;return l.activeTexture(U),l.bindTexture(l.TEXTURE_2D,this.textureTargets[0]),l.uniform1i(I.location,F),C&&(C.textureTypeUnif&&l.uniform1i(C.textureTypeUnif.location,this.textureType),C.textureDescUnif&&this.__gl.uniform4fv(C.textureDescUnif.location,this.textureDesc)),!0}destroy(){const g=this.__gl;this.textureTargets.forEach((I=>{g.deleteTexture(I)})),this.textureTargets=[],this.depthTexture&&(g.deleteTexture(this.depthTexture),this.depthTexture=null),this.frameBuffer&&g.deleteFramebuffer(this.frameBuffer)}}BF.setShaderModule("imageAtlas.glsl","#define GLSLIFY 1\n// Note: On mobile, I can't seem to pass around a stuct containing sampler2D.\n// I have to unpack the struct and pass its members. :(\n// struct ImageAtlas {\n//     sampler2D layout;\n//     sampler2D image;\n//     vec4 desc;\n// };\n\nimport 'GLSLUtils.glsl'\n\nvec4 getSubImageLayout(int index, in sampler2D atlasLayout, in vec4 atlasDesc){\n    return fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);\n}\nvec2 calcSubImageTexCoords(vec2 texCoord, int index, in sampler2D atlasLayout, in vec4 atlasDesc){\n    vec4 layoutData = fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);\n    // The following line is a hack to fix artifacts in our PBR lighting\n    // We were seeing loads of lighting garbage on some sufaces that were orthogonal\n    // to the world. The UV coordinates would have been landing right on the edges\n    // of our subimages and were often sampling outside the image. This couuld\n    // have been because of filtering, or an error in the uv coords. \n    texCoord = clamp(texCoord, vec2(0.01, 0.01), vec2(0.99, 0.99));\n    vec2 subimageTexel = texCoord * layoutData.zw;\n    // subimageTexel = clamp(subimageTexel, vec2(0.0, 0.0), vec2(1.0, 1.0));\n    return subimageTexel + layoutData.xy;\n}\nvec4 sampleSubImage(vec2 texCoord, int index, in sampler2D atlasLayout, in sampler2D atlasImage, in vec4 atlasDesc){\n    vec4 layoutData = fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);\n    vec2 atlasCoords = calcSubImageTexCoords(texCoord, index, atlasLayout, atlasDesc);\n    return texture2D(atlasImage, atlasCoords);\n}"),BF.setShaderModule("surfaceGeomData.glsl","#define GLSLIFY 1\n  uniform int floatGeomBuffer;\n  uniform int passId;\n\n  import 'GLSLBits.glsl'\n  \n  vec4 setFragColor_geomData(vec3 v_viewPos, int floatGeomBuffer, int passId, float v_drawItemId, int isOrthographic){\n    vec4 fragColor;\n\n    float viewDist;\n    if (isOrthographic > 0) {\n      viewDist = abs(v_viewPos.z);\n    } else {\n      viewDist = length(v_viewPos);\n    }\n    if (floatGeomBuffer != 0) {\n      fragColor.r = float(passId); \n      fragColor.g = float(v_drawItemId);\n      fragColor.b = 0.0;// TODO: store poly-id or something.\n      fragColor.a = viewDist;\n    }\n    else {\n      ///////////////////////////////////\n      // UInt8 buffer\n      fragColor.r = mod(v_drawItemId, 256.) / 255.;\n      fragColor.g = (floor(v_drawItemId / 256.) + float(passId) * 32.) / 255.;\n\n      // encode the dist as a 16 bit float\n      vec2 float16bits = encode16BitFloatInto2xUInt8(viewDist);\n      fragColor.b = float16bits.x;\n      fragColor.a = float16bits.y;\n    }\n\n    return fragColor;\n  }"),BF.setShaderModule("surfaceHighlight.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getHighlightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);\n}\n#else\n\nuniform vec4 highlightColor;\n\nvec4 getHighlightColor(int id) {\n    return highlightColor;\n}\n\n#endif\n\nvec4 setFragColor_highlight(float v_drawItemId){\n  vec4 fragColor; \n  int drawItemId = int(v_drawItemId + 0.5);\n  fragColor = getHighlightColor(drawItemId);\n  return fragColor;\n}\n"),BF.setShaderModule("computeViewNormal.glsl","#define GLSLIFY 1\n  \n#ifdef ENABLE_ES3\nvec3 computeViewNormal(vec3 viewPos) {\n  vec3 fdx = dFdx(viewPos);\n  vec3 fdy = dFdy(viewPos);\n  return normalize(cross(fdx, fdy));\n}\n#else \nvec3 computeViewNormal(vec3 viewPos) {\n  return vec3(0.0, 0.0, 0.0);\n}\n#endif\n"),BF.setShaderModule("calcFatLinesViewPos.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nvec3 calcFatLinesViewPos(int vertexID, mat4 modelViewMatrix, inout vec3 viewNormal, inout vec2 texCoord, inout vec3 pos) {\n\n  int seqentialIndex_0 = int(mod(segmentIndices.x, 2.));\n  int seqentialIndex_1 = int(mod(segmentIndices.y, 2.));\n  int index_0 = int(segmentIndices.x) / 2;\n  int index_1 = int(segmentIndices.y) / 2;\n\n  vec3 viewPos;\n  vec4 data_0 = fetchTexel(positionsTexture, positionsTextureSize, index_0);\n  vec4 data_1 = fetchTexel(positionsTexture, positionsTextureSize, index_1);\n\n  // During XR sessions, there is a scaling applied to the view matrix\n  // which causes a distortion to the line width. We extract that scale here\n  // and use to correct the distortion.\n  // See also: FatPointsShader\n  vec3 viewZ = modelViewMatrix[2].xyz;\n  float viewScale = length(viewZ);\n\n  vec4 pos_0 = modelViewMatrix * vec4(data_0.xyz, 1.0);\n  vec4 pos_1 = modelViewMatrix * vec4(data_1.xyz, 1.0);\n  // Note: multiply the per-vertex line thickness with the line thickness uniform value;\n  float lineThickness_0 = LineThickness * data_0.w * viewScale;\n  float lineThickness_1 = LineThickness * data_1.w * viewScale;\n\n  if (vertexID < 2) {\n    pos = data_0.xyz;\n    viewPos = pos_0.xyz;\n  }\n  else {\n    pos = data_1.xyz;\n    viewPos = pos_1.xyz;\n  }\n  if (pos_1 != pos_0) {\n    vec3 segmentDir = normalize(pos_1.xyz - pos_0.xyz);\n    vec3 viewVector = normalize(viewPos);\n\n    if (vertexID < 2) {\n      vec3 segmentStartDir = segmentDir;\n      if (seqentialIndex_0 != 0) {\n        //if index_0 == 0, get the last index in the line as previous\n        int index_prev = (index_0 > 0) ? (index_0-1) : (positionsTextureSize-1);\n        vec4 data_prev = fetchTexel(positionsTexture, positionsTextureSize, index_prev);\n        vec4 pos_prev = modelViewMatrix * vec4(data_prev.xyz, 1.0);\n        segmentStartDir = normalize(segmentDir + normalize(pos_0.xyz - pos_prev.xyz));\n        // segmentStartDir = segmentDir;\n      }\n      // vec3 startBiTangent = normalize(cross(segmentStartDir, viewVector));\n      // viewNormal = normalize(cross(segmentStartDir, startBiTangent));\n      vec3 startBiTangent = normalize(vec3(-segmentStartDir.y, segmentStartDir.x, 0.0));\n      viewNormal = normalize(-viewVector);\n      // Move the endpoints to overlap a bit more.\n      //viewPos -= vec3(segmentStartDir * lineThickness_0 * 0.25);\n      if (mod(vertexIDs, 2.0) == 0.0) {\n        viewPos += vec3(startBiTangent * lineThickness_0);\n        texCoord.x = 1.0;\n      }\n      else {\n        viewPos -= vec3(startBiTangent * lineThickness_0);\n        texCoord.x = 0.0;\n      }\n      texCoord.y = 0.0;\n    }\n    else {\n      vec3 segmentEndDir = segmentDir;\n      if (seqentialIndex_1 != 0) {\n        //if index_1 == numPoints-1, get the first index in the line as next\n        int index_next = (index_1 < (positionsTextureSize-1)) ? (index_1+1) : 0;\n        vec4 data_next = fetchTexel(positionsTexture, positionsTextureSize, index_next);\n        vec4 pos_next = modelViewMatrix * vec4(data_next.xyz, 1.0);\n        segmentEndDir = normalize(segmentDir + normalize(pos_next.xyz - pos_1.xyz));\n        // segmentEndDir = segmentDir;\n      }\n      // vec3 endBiTangent = normalize(cross(segmentEndDir, viewVector));\n      // viewNormal = normalize(cross(segmentEndDir, endBiTangent));\n      vec3 endBiTangent = normalize(vec3(-segmentEndDir.y, segmentEndDir.x, 0.0));\n      viewNormal = normalize(-viewVector);\n      // Move the endpoints to overlap a bit more.\n      //viewPos += vec3(segmentEndDir * lineThickness_1 * 0.25);\n      if (mod(vertexIDs, 2.0) == 0.0) {\n        viewPos += vec3(endBiTangent * lineThickness_1);\n        texCoord.x = 1.0;\n      }\n      else {\n        viewPos -= vec3(endBiTangent * lineThickness_1);\n        texCoord.x = 0.0;\n      }\n      texCoord.y = 1.0;\n    }\n\n    // Move the line towards the viewer by the line thickness.\n    // this is to avoid depth issues when lines are rendered over meshes. \n    viewPos.z += (lineThickness_0 + lineThickness_1) * 0.5;\n  }\n\n  return viewPos;\n}\n\n"),BF.setShaderModule("constants.glsl","#define GLSLIFY 1\n#define PI 3.141592653589793\n#define TwoPI (2.0 * PI)\n#define HalfPI (0.5 * PI)\n\n"),BF.setShaderModule("convolve-helpers.glsl","#define GLSLIFY 1\n\n#ifdef ENVMAP_CUBE\n\nuniform samplerCube envMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return texture(envMap, dir);\n}\n\n#else \n\nuniform sampler2D   envMap;\n\nimport 'envmap-octahedral.glsl'\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = dirToSphOctUv(dir);\n  vec4 texel = texture2D(envMap, vec2(uv.x, 1.0 - uv.y));\n  return vec4(texel.rgb/texel.a, 1.0); // TODO: Check this line. Do we need it?\n}\n\n#endif \n\nvec3 cubeFaceUvToDir(float u, float v, int faceId) {\n\n  // normalize into [-1, 1] range\n  float n_u = 2.0 * u - 1.0;\n  float n_v = 2.0 * v - 1.0;\n\n  vec3 dir;\n  switch (faceId)\n  {\n  case 0: //TEXTURE_CUBE_MAP_POSITIVE_X:\n    dir.x = 1.0f;\n    dir.y = n_v;\n    dir.z = -n_u;\n    break;\n  case 1: //TEXTURE_CUBE_MAP_NEGATIVE_X:\n    dir.x = -1.0f;\n    dir.y = n_v;\n    dir.z = n_u;\n    break;\n  case 3: //TEXTURE_CUBE_MAP_POSITIVE_Y:\n    dir.x = n_u;\n    dir.y = 1.0f;\n    dir.z = -n_v;\n    break;\n  case 2: //TEXTURE_CUBE_MAP_NEGATIVE_Y:\n    dir.x = n_u;\n    dir.y = -1.0f;\n    dir.z = n_v;\n    break;\n  case 4: //TEXTURE_CUBE_MAP_POSITIVE_Z:\n    dir.x = n_u;\n    dir.y = n_v;\n    dir.z = 1.0f;\n    break;\n  case 5: //TEXTURE_CUBE_MAP_NEGATIVE_Z:\n    dir.x = -n_u;\n    dir.y = n_v;\n    dir.z = -1.0f;\n    break;\n  }\n  return normalize(dir);\n}\n\n"),BF.setShaderModule("cutaways.glsl","#define GLSLIFY 1\nconst int GEOMITEM_FLAG_CUTAWAY = 1; // 1<<0;\nconst int GEOMITEM_INVISIBLE_IN_GEOMDATA = 2; // 1<<1;\n\n#define RAY_EPS 0.0000001\nstruct Ray {\n  vec3 start;\n  vec3 dir;\n};\n\nfloat intersectRayPlane(Ray ray, Ray plane) {\n  vec3 w = ray.start - plane.start;\n  float D = dot(plane.dir, ray.dir);\n  float N = dot(-plane.dir, w);\n\n  if (abs(D) < RAY_EPS) {\n    // segment is parallel to plane\n    if (N == 0.0)\n      return -1.0; // segment lies in plane\n    else\n      return -1.0; // no intersection\n  }\n  // they are not parallel\n  // compute intersect param\n  float sI = N / D;\n  if (sI < -RAY_EPS) {\n    return -1.0; // no intersection\n  }\n  return sI;\n}\n\nbool cutaway(vec3 worldPos, vec3 planeNormal, float planeDist) {\n\n  vec3 planePos = planeNormal * planeDist;\n  vec3 planeDir = worldPos + planePos;\n  float planeOffset = dot(planeDir, planeNormal);\n  if (planeOffset > 0.0) {\n    return true;\n  }\n  return false;\n}\n"),BF.setShaderModule("debugColors.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\n\nvec3 getDebugColor(float id) {\n  int sel = int(round(mod(round(id), 16.0)));\n  \n  if (sel==0)\n    return vec3(0.0, 1.0, 1.0);\n  else if (sel==1)\n    return vec3(0.0, 1.0, 0.0);\n  else if (sel==2)\n    return vec3(1.0, 0.0, 1.0);\n  else if (sel==3)\n    return vec3(0.75, 0.75, 0.0);\n  else if (sel==4)\n    return vec3(0.0, 0.75, 0.75);\n  else if (sel==5)\n    return vec3(0.75, 0.0, 0.75);\n  else if (sel==6)\n    return vec3(0.45, 0.95, 0.0);\n  else if (sel==7)\n    return vec3(0.0, 0.45, 0.95);\n  else if (sel==8)\n    return vec3(0.95, 0.0, 0.45);\n  else if (sel==9)\n    return vec3(0.95, 0.45, 0.0);\n  else if (sel==10)\n    return vec3(0.0, 0.95, 0.45);\n  else if (sel==11)\n    return vec3(0.45, 0.0, 0.95);\n  else if (sel==12)\n    return vec3(0.45, 0.45, 0.95);\n  else if (sel==13)\n    return vec3(0.0, 0.0, 0.45);\n  else if (sel==14)\n    return vec3(0.0, 0.45, 0.45);\n  else if (sel==15)\n    return vec3(0.45, 0.0, 0.45);\n  else return vec3(0.2, 0.2, 0.2);\n}\n\n"),BF.setShaderModule("drawItemId.glsl","#define GLSLIFY 1\n\n#ifdef ENABLE_MULTI_DRAW\n\nuniform sampler2D drawIdsTexture;\n\n#ifdef EMULATE_MULTI_DRAW\n\nuniform int drawId;\nint getDrawItemId() {\n  return drawId;\n}\n\n#else // EMULATE_MULTI_DRAW\n\nint getDrawItemId() {\n  ivec2 drawIdsTextureSize = textureSize(drawIdsTexture, 0);\n  ivec2 drawIdsArrayCoords = ivec2(gl_DrawID % drawIdsTextureSize.x, gl_DrawID / drawIdsTextureSize.x);\n  return int(texelFetch(drawIdsTexture, drawIdsArrayCoords, 0).r + 0.5);\n}\n\n#endif // EMULATE_MULTI_DRAW\n\n#else // ENABLE_MULTI_DRAW\n\nuniform int drawItemId;\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\nattribute float instancedIds;    // instanced attribute..\nuniform int instancedDraw;\n\nint getDrawItemId() {\n  if (instancedDraw == 0) {\n    return drawItemId;\n  }\n  else {\n    return int(instancedIds);\n  }\n}\n\n#else\n\nint getDrawItemId() {\n  return drawItemId;\n}\n\n#endif // ENABLE_FLOAT_TEXTURES\n#endif // ENABLE_MULTI_DRAW\n\n"),BF.setShaderModule("drawItemTexture.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\nuniform sampler2D instancesTexture;\nuniform highp int instancesTextureSize;\n\nconst int pixelsPerItem = 6;\n\nvec4 getInstanceData(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 0);\n}\n\n#else\n\nuniform vec4 drawItemData;\n\nvec4 getInstanceData(int id) {\n  return drawItemData;\n}\n\n#endif\n\n"),BF.setShaderModule("envmap-dualfisheye.glsl","#define GLSLIFY 1\n\nvec2 dualfisheyeUVsFromDir(vec3 dir) {\n  vec2 result;\n  float angle = 0.465;\n  if (dir.x < 0.0) {\n    result = vec2(((dir.z * -angle) + 0.5) * 0.5, (dir.y * angle) + 0.5);\n  }\n  else {\n    result = vec2( 0.5 + ((dir.z * angle) + 0.5) * 0.5, (dir.y * angle) + 0.5);\n  }\n  return result;\n}\n\n"),BF.setShaderModule("envmap-equirect.glsl","#define GLSLIFY 1 \nimport 'constants.glsl'\n\nvec2 latLongUVsFromDir(vec3 dir) {\n  // Math function taken from...\n  // http://gl.ict.usc.edu/Data/HighResProbes/\n  // Note: Scaling from u=[0,2], v=[0,1] to u=[0,1], v=[0,1]\n  float phi = acos(dir.z);\n  float theta = atan(dir.x, dir.y);\n  return vec2((1.0 + theta / PI) / 2.0, phi / PI);\n}\n\n// Note: when u == 0.5 z = 1.0\nvec3 dirFromLatLongUVs(float u, float v) {\n  // http://gl.ict.usc.edu/Data/HighResProbes/\n  float theta = PI*((u * 2.0) - 1.0);\n  float phi = PI*v;\n  return vec3(sin(phi)*sin(theta), sin(phi)*cos(theta), cos(phi));\n}\n\nvec3 dirFromPolar(vec2 polar) {\n  float u = polar.x / (PI * 2.0);\n  float v = polar.y / PI;\n  return dirFromLatLongUVs(u, v);\n}\n\n"),BF.setShaderModule("envmap-octahedral.glsl","#define GLSLIFY 1\nimport 'constants.glsl'\nimport 'GLSLUtils.glsl'\n#define sectorize(value) step(0.0, (value))*2.0-1.0\n#define sum(value) dot(clamp((value), 1.0, 1.0), (value))\n\nvec2 dirToSphOctUv(vec3 normal) {\n  normal = normalize(normal);\n  vec3 aNorm = abs(normal);\n  vec3 sNorm = sectorize(normal);\n  \n  vec2 dir = aNorm.xy;\n  float orient = atan(dir.x, max(dir.y,0.0000000000000001))/HalfPI;\n\n  dir = vec2(aNorm.z, length(aNorm.xy));\n  float pitch = atan(dir.y, dir.x)/HalfPI;\n\n  vec2 uv = vec2(sNorm.x*orient, sNorm.y*(1.0-orient))*pitch;\n\n  if (normal.z < 0.0) {\n    uv = sNorm.xy - abs(uv.ts)*sNorm.xy;\n  }\n  vec2 res = uv*0.5+0.5;\n  // Flip-v\n  // return res;\n  return vec2(res.x, 1.0 - res.y);\n}\n\nvec3 sphOctUvToDir(vec2 uv) {\n  uv = uv*2.0-1.0;\n  // Flip-v\n  uv.y = -uv.y;\n  vec2 suv = sectorize(uv);\n  float sabsuv = sum(abs(uv));\n  float pitch = sabsuv*HalfPI;\n\n  if (pitch <= 0.0) {\n    return vec3(0.0, 0.0, 1.0);\n  }\n  if (abs(pitch - PI) < 0.000001) {\n    return vec3(0.0, 0.0, -1.0);\n  }\n  if (sabsuv > 1.0) {\n    uv = (1.0-abs(uv.ts))*suv;\n  }\n\n  float orient = (abs(uv.s)/sabsuv)*HalfPI;\n  float sOrient = sin(orient);\n  float cOrient = cos(orient);\n  float sPitch = sin(pitch);\n  float cPitch = cos(pitch);\n\n  return vec3(\n    sOrient*suv.s*sPitch,\n    cOrient*suv.t*sPitch,\n    cPitch\n  );\n}\n\n"),BF.setShaderModule("GLSLBits.glsl",'#define GLSLIFY 1\n    \n/////////////////////////////////////////////////////////////////\n// http://concord-consortium.github.io/lab/experiments/webgl-gpgpu/script.js\nfloat shift_right(float v, float amt) {\n  v = floor(v) + 0.5;\n  return floor(v / exp2(amt));\n}\nfloat shift_left(float v, float amt) {\n  return floor(v * exp2(amt) + 0.5);\n}\n\nfloat mask_last(float v, float bits) {\n  return mod(v, shift_left(1.0, bits));\n}\nfloat extract_bits(float num, float from, float to) {\n  from = floor(from + 0.5);\n  to = floor(to + 0.5);\n  return mask_last(shift_right(num, from), to - from);\n}\n\n/////////////////////////////////////////////////////////////////\n// https://stackoverflow.com/questions/18453302/how-do-you-pack-one-32bit-int-into-4-8bit-ints-in-glsl-webgl\n\nconst vec4 bitEnc = vec4(1.,255.,65025.,16581375.);\nconst vec4 bitDec = 1./bitEnc;\nvec4 EncodeFloatRGBA (float v) {\n  vec4 enc = bitEnc * v;\n  enc = fract(enc);\n  enc -= enc.yzww * vec2(1./255., 0.).xxxy;\n  return enc;\n}\nfloat DecodeFloatRGBA (vec4 v) {\n  return dot(v, bitDec);\n}\n\n/////////////////////////////////////////////////////////////////\n// https://gist.github.com/Flexi23/1713774\n// \nvec2 encode16BitFloatInto2xUInt8(float v) {\n  vec2 c = vec2(0.);\n\n  int signum = (v >= 0.) ? 128 : 0;\n  v = abs(v);\n  int exponent = 15;\n  float limit = 1024.; // considering the bias from 2^-5 to 2^10 (==1024)\n  for(int exp = 15; exp > 0; exp--) {\n    if ( v < limit) {\n      limit /= 2.;\n      exponent--;\n    }\n  }\n\n  float rest;\n  if (exponent == 0) {\n    rest = v / limit / 2.;      // "subnormalize" implicite preceding 0. \n  } \n  else {\n    rest = (v - limit)/limit;   // normalize accordingly to implicite preceding 1.\n  }\n\n  int mantissa = int(rest * 2048.);   // 2048 = 2^11 for the (split) 11 bit mantissa\n  int msb = mantissa / 256;           // the most significant 3 bits go into the lower part of the first byte\n  int lsb = mantissa - msb * 256;     // there go the other 8 bit of the lower significance\n\n  c.x = float(signum + exponent * 8 + msb) / 255.;    // color normalization for texture2D\n  c.y = float(lsb) / 255.;\n\n  if (v >= 2048.) {\n    c.y = 1.;\n  }\n\n  return c;\n}\n\nfloat decode16BitFloatFrom2xUInt8(vec2 c) {\n  float v = 0.;\n\n  int ix = int(c.x*255.); // 1st byte: 1 bit signum, 4 bits exponent, 3 bits mantissa (MSB)\n  int iy = int(c.y*255.); // 2nd byte: 8 bit mantissa (LSB)\n\n  int s = (c.x >= 0.5) ? 1 : -1;\n  ix = (s > 0) ? ix - 128 : ix;   // remove the signum bit from exponent\n  int iexp = ix / 8;              // cut off the last 3 bits of the mantissa to select the 4 exponent bits\n  int msb = ix - iexp * 8;        // subtract the exponent bits to select the 3 most significant bits of the mantissa\n\n  int norm = (iexp == 0) ? 0 : 2048;          // distinguish between normalized and subnormalized numbers\n  int mantissa = norm + msb * 256 + iy;       // implicite preceding 1 or 0 added here\n  norm = (iexp == 0) ? 1 : 0;                 // normalization toggle\n  float exponent = pow( 2., float(iexp + norm) - 16.); // -5 for the the exponent bias from 2^-5 to 2^10 plus another -11 for the normalized 12 bit mantissa \n  v = float( s * mantissa ) * exponent;\n\n  return v;\n}\n\n// TODO : Encoding Float32 to 4x UInt8\n// http://concord-consortium.github.io/lab/experiments/webgl-gpgpu/script.js\n// http://ultraist.hatenablog.com/entry/20110608/1307539319\n\n'),BF.setShaderModule("GLSLUtils.glsl","#define GLSLIFY 1\n\nint ftoi(float val) {\n  return int(floor(val + 0.5));\n}\nivec2 ftoi(vec2 v2) {\n  return ivec2(ftoi(v2.x), ftoi(v2.y));\n}\nivec3 ftoi(vec3 v4) {\n  return ivec3(ftoi(v4.x), ftoi(v4.y), ftoi(v4.z));\n}\nivec4 ftoi(vec4 v4) {\n  return ivec4(ftoi(v4.x), ftoi(v4.y), ftoi(v4.z), ftoi(v4.w));\n}\n\n#ifdef ENABLE_ES3\n\nint imod(int x, int y) {\n  return x % y;\n}\n\nvoid setFlag(inout int flags, int flag) {\n  flags |= flag;\n}\n\nvoid clearFlag(inout int flags, int flag) {\n  flags &= ~flag;\n}\n\nbool testFlag(int flags, int flag) {\n  return (flags & flag) != 0;\n}\n\n// private function: Mangle me...\nivec2 _pixelIndexToUV(int index, int textureWidth) {\n  return ivec2(index % textureWidth, index / textureWidth);\n}\n\nvec4 fetchTexel(sampler2D texture, int textureWidth, int index) {\n  return texelFetch(texture, _pixelIndexToUV(index, textureWidth), 0);\n}\n\nvec4 fetchTexel(sampler2D texture, ivec2 textureSize, ivec2 texCoord) {\n  return texelFetch(texture, texCoord, 0);\n}\n\n#else\n\n// TODO: integrate: https://gist.github.com/mattatz/70b96f8c57d4ba1ad2cd\n\nint max(int a, int b) {\n  return a > b ? a : b;\n}\nint min(int a, int b) {\n  return a < b ? a : b;\n}\n\nfloat round(float val) {\n  return floor(val + 0.4);\n}\n\nint imod(int x, int y) {\n  return x-y*(x/y);\n}\n\nvoid setFlag(inout int flags, int flag) {\n  flags += flag;\n}\nvoid clearFlag(inout int flags, int flag) {\n  flags -= flag;\n}\n\nbool testFlag(int flags, int flag) {\n  return imod(flags / flag, 2) != 0;\n}\n\n// private function: Mangle me...\nvec2 _pixelIndexToUV(int index, int textureSize) {\n  float flTexSize = float(textureSize);\n  float x = (float(imod(index, textureSize))+0.5)/flTexSize;\n  float y = (floor(float(index / textureSize))+0.5)/flTexSize;\n  return vec2(x, y);\n}\n\nvec4 fetchTexel(sampler2D texture, int textureSize, int index) {\n  vec2 texCoord = _pixelIndexToUV(index, textureSize);\n  return texture2D(texture, texCoord);\n}\n\nvec4 fetchTexel(sampler2D texture, ivec2 textureSize, ivec2 texCoord) {\n  vec2 ftextureSize = vec2(textureSize);\n  return texture2D(texture, (vec2(texCoord) + 0.5) / ftextureSize);\n}\n\n#endif // ENABLE_ES3\n\nint uvToPixelIndex(vec2 uv, int textureSize) {\n  return int(uv.x * float(textureSize)) + (int(floor(uv.y * float(textureSize))) * textureSize);\n}\n\n"),BF.setShaderModule("Hammersley.glsl","#define GLSLIFY 1\nfloat RadicalInverse_VdC(uint bits) \n{\n  bits = (bits << 16u) | (bits >> 16u);\n  bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\n  bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\n  bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\n  bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\n  return float(bits) * 2.3283064365386963e-10; // / 0x100000000\n}\n// ----------------------------------------------------------------------------\nvec2 Hammersley(uint i, uint N)\n{\n  return vec2(float(i)/float(N), RadicalInverse_VdC(i));\n} \n"),BF.setShaderModule("ImportanceSampleGGX.glsl","#define GLSLIFY 1\nimport 'constants.glsl'\n\nvec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)\n{\n  float a = roughness*roughness;\n\n  float phi = 2.0 * PI * Xi.x;\n  float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));\n  float sinTheta = sqrt(1.0 - cosTheta*cosTheta);\n\n  // from spherical coordinates to cartesian coordinates\n  vec3 H = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);\n\n  // from tangent-space vector to world-space sample vector\n  vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n  vec3 tangent   = normalize(cross(up, N));\n  vec3 bitangent = cross(N, tangent);\n\n  vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n  return normalize(sampleVec);\n} \n"),BF.setShaderModule("materialparams.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nimport 'gamma.glsl'\n\n#ifdef ENABLE_MULTI_DRAW\n \nuniform sampler2D materialsTexture;\nuniform highp ivec2 materialsTextureSize;\n\nvec4 getMaterialValue(vec2 materialCoords, int valueIndex) {\n  int index = ftoi(materialCoords.x) + valueIndex;\n  ivec2 texelCoords = ivec2(imod(index, materialsTextureSize.x), index / materialsTextureSize.x);\n  \n  return fetchTexel(materialsTexture, materialsTextureSize, texelCoords);\n}\n\n#else // ENABLE_MULTI_DRAW\n\n////////////////////////\n// Material Param Helpers.\n\nvec4 getColorParamValue(vec4 value, sampler2D tex, int texType, vec2 texCoord) {\n  if (texType == 0) {\n    return toLinear(value);\n  }\n  else if (texType == 1 || texType == 2) {\n    // TODO: Use SRGB textures.\n    return toLinear(texture2D(tex, texCoord));\n  }\n  else if (texType == 3) {\n    // Float HDR Texture\n    return texture2D(tex, texCoord);\n  }\n  else\n    return value;\n}\n\nfloat luminanceFromRGB(vec3 rgb) {\n  return 0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b;\n}\n\nfloat getLuminanceParamValue(float value, sampler2D tex, int texType, vec2 texCoord) {\n  if (texType == 0)\n    return value;\n  else\n    return luminanceFromRGB(texture2D(tex, texCoord).rgb);\n}\n\n#endif // ENABLE_MULTI_DRAW\n"),BF.setShaderModule("modelMatrix.glsl","#define GLSLIFY 1\n#ifdef ENABLE_FLOAT_TEXTURES\nimport 'GLSLUtils.glsl'\nimport 'transpose.glsl'\nmat4 getMatrix(sampler2D texture, int textureSize, int index) {\n  // Unpack 3 x 4 matrix columns into a 4 x 4 matrix.\n  vec4 col0 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 1);\n  vec4 col1 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 2);\n  vec4 col2 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 3);\n  mat4 result = transpose(mat4(col0, col1, col2, vec4(0.0, 0.0, 0.0, 1.0)));\n  return result;\n}\n\nmat4 getModelMatrix(int id) {\n  return getMatrix(instancesTexture, instancesTextureSize, id);\n}\n\n#else\n\nuniform mat4 modelMatrix;\n\nmat4 getModelMatrix(int id) {\n  return modelMatrix;\n}\n\n#endif\n\n"),BF.setShaderModule("PBRSurfaceRadiance.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nconst int ENVMAP_FLAG_HEADLIGHT =  1; // 1<<0;\n\nstruct MaterialParams {\n  vec3 baseColor;\n  float ambientOcclusion;\n  float metallic;\n  float roughness;\n  float reflectance;\n  float opacity;\n  float emission;\n};\n\n#ifndef ENABLE_PBR\n\nvec4 pbrSurfaceRadiance(in MaterialParams material, vec3 normal, in vec3 viewVector) {\n  vec3 irradiance = vec3(dot(normal, viewVector));\n  float ao = material.ambientOcclusion; \n  return vec4(material.baseColor * ao * irradiance + (material.emission * material.baseColor), material.opacity);\n\n  // return vec4(material.baseColor * ao * irradiance , material.opacity);\n}\n\n#else\n\nuniform int envMapFlags;\nuniform samplerCube irradianceMap;\nuniform samplerCube prefilterMap;\nuniform sampler2D brdfLUT;\n\nvec3 sampleIrradiance(vec3 dir) {\n  return texture(irradianceMap, dir).rgb;\n}\n\nvec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness) {\n  return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);\n}\n\nfloat luminance(vec3 color) {\n  return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n}\n\nvec4 pbrSurfaceRadiance(in MaterialParams material, vec3 normal, in vec3 viewVector) {\n  if (envMapFlags == -1) {\n    vec3 irradiance = vec3(dot(normal, viewVector));\n    float ao = material.ambientOcclusion; \n    return vec4(material.baseColor * ao * irradiance + (material.emission * material.baseColor), material.opacity);\n  }\n\n  vec3 N = normal;\n  vec3 V = viewVector;\n  vec3 R = reflect(-V, N);\n  float roughness = material.roughness * material.roughness;\n  vec3 diffuseColor = (1.0 - material.metallic) * material.baseColor;\n\n  // Note: The specular reflectance of metallic surfaces is chromatic\n  // https://google.github.io/filament/Filament.html#listing_fnormal\n  vec3 F0 = 0.16 * material.reflectance * material.reflectance * (1.0 - material.metallic) + material.baseColor * material.metallic;\n\n  float NdotV = dot(N, V);\n\n  vec3 F = fresnelSchlickRoughness(max(NdotV, 0.0), F0, roughness);\n\n  vec3 kS = F;\n  vec3 kD = 1.0 - kS;\n  kD *= 1.0 - material.metallic;\n  float ao = material.ambientOcclusion; \n  \n  vec3 irradiance;\n  vec3 irradianceSampleDir = normal;\n  \n  bool headLightMode = testFlag(envMapFlags, ENVMAP_FLAG_HEADLIGHT);\n  if (headLightMode) {\n    irradianceSampleDir = viewVector;\n  }\n  irradiance = sampleIrradiance(irradianceSampleDir);\n  // vec3 irradiance = shGetIrradianceAt(shCoefficients, N);\n  vec3 diffuse    = irradiance * diffuseColor;\n  \n  const float MAX_REFLECTION_LOD = 4.0;\n  vec3 prefilteredColor = textureLod(prefilterMap, R,  roughness * MAX_REFLECTION_LOD).rgb;   \n  vec2 envBRDF  = texture(brdfLUT, vec2(max(NdotV, 0.0), roughness)).rg;\n  vec3 specular = prefilteredColor * (F * envBRDF.x + envBRDF.y);\n  \n  vec3 radiance = (kD * diffuse + specular) * ao;\n  \n  // Now handle semi-transparent objects. We need to be able to linearly interpolate\n  // opacity to make objects disappear, so we need a continuous change.\n  float opacity = material.opacity;\n  vec4 transparent = vec4((radiance * opacity) + specular, opacity + luminance(specular) + luminance(F));\n  vec4 result = mix(transparent, vec4(radiance, 1.0), opacity);\n\n  // Add emission on as the final component.\n  // Note: emission allows a material to blend off its specular component, \n  // which can also be used to make an object completely disappear if also transparent.\n  return mix(result, vec4(material.baseColor, opacity), material.emission);\n}\n\n#endif // ENABLE_PBR\n"),BF.setShaderModule("SHCoeffs.glsl","#define GLSLIFY 1\nuniform vec3 shCoeffs[9];\n\nvec3 sampleSHCoeffs(vec3 dir) {\n  // dir is assumed to have unit length\n  float x = dir.x, y = dir.y, z = dir.z;\n  // band 0\n  vec3 result = shCoeffs[ 0 ] * 0.886227;\n  // band 1\n  result += shCoeffs[ 1 ] * 2.0 * 0.511664 * y;\n  result += shCoeffs[ 2 ] * 2.0 * 0.511664 * z;\n  result += shCoeffs[ 3 ] * 2.0 * 0.511664 * x;\n  // band 2\n  result += shCoeffs[ 4 ] * 2.0 * 0.429043 * x * y;\n  result += shCoeffs[ 5 ] * 2.0 * 0.429043 * y * z;\n  result += shCoeffs[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n  result += shCoeffs[ 7 ] * 2.0 * 0.429043 * x * z;\n  result += shCoeffs[ 8 ] * 0.429043 * ( x * x - y * y );\n  return result;\n}\n"),BF.setShaderModule("gamma.glsl","#define GLSLIFY 1\nconst float gamma_const = 2.2;\n\nfloat toLinear(float v) {\n  return pow(v, gamma_const);\n}\n\nvec2 toLinear(vec2 v) {\n  return pow(v, vec2(gamma_const));\n}\n\nvec3 toLinear(vec3 v) {\n  return pow(v, vec3(gamma_const));\n}\n\nvec4 toLinear(vec4 v) {\n  return vec4(toLinear(v.rgb), v.a);\n}\n\nfloat toGamma(float v) {\n  return pow(v, 1.0 / gamma_const);\n}\n\nvec2 toGamma(vec2 v) {\n  return pow(v, vec2(1.0 / gamma_const));\n}\n\nvec3 toGamma(vec3 v) {\n  return pow(v, vec3(1.0 / gamma_const));\n}\n\nvec4 toGamma(vec4 v) {\n  return vec4(toGamma(v.rgb), v.a);\n}\n\nfloat toGamma(float v, float gamma) {\n  return pow(v, 1.0 / gamma);\n}\n\nvec2 toGamma(vec2 v, float gamma) {\n  return pow(v, vec2(1.0 / gamma));\n}\n\nvec3 toGamma(vec3 v, float gamma) {\n  return pow(v, vec3(1.0 / gamma));\n}\n\nvec4 toGamma(vec4 v, float gamma) {\n  return vec4(toGamma(v.rgb, gamma), v.a);\n}\n\n"),BF.setShaderModule("inverse.glsl","#define GLSLIFY 1\n\n#ifndef ENABLE_ES3\n\nfloat inverse(float m) {\n  return 1.0 / m;\n}\n\nmat2 inverse(mat2 m) {\n  return mat2(m[1][1],-m[0][1],\n             -m[1][0], m[0][0]) / (m[0][0]*m[1][1] - m[0][1]*m[1][0]);\n}\n\nmat3 inverse(mat3 m) {\n  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n  float b01 = a22 * a11 - a12 * a21;\n  float b11 = -a22 * a10 + a12 * a20;\n  float b21 = a21 * a10 - a11 * a20;\n\n  float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\n#endif\n\n"),BF.setShaderModule("transpose.glsl","#define GLSLIFY 1\n\n#ifndef ENABLE_ES3\n\nfloat transpose(float m) {\n  return m;\n}\n\nmat2 transpose(mat2 m) {\n  return mat2(m[0][0], m[1][0],\n              m[0][1], m[1][1]);\n}\n\nmat3 transpose(mat3 m) {\n  return mat3(m[0][0], m[1][0], m[2][0],\n              m[0][1], m[1][1], m[2][1],\n              m[0][2], m[1][2], m[2][2]);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(m[0][0], m[1][0], m[2][0], m[3][0],\n              m[0][1], m[1][1], m[2][1], m[3][1],\n              m[0][2], m[1][2], m[2][2], m[3][2],\n              m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\n#endif\n\n"),BF.setShaderModule("quadVertexFromID.glsl","#define GLSLIFY 1\nattribute float vertexIDs;\n\nvec2 getQuadVertexPositionFromID() {\n  int vertexID = int(vertexIDs);\n  if (vertexID == 0)\n    return vec2(-0.5, -0.5);\n  else if (vertexID == 1)\n    return vec2(0.5, -0.5);\n  else if (vertexID == 2)\n    return vec2(-0.5, 0.5);\n  else if (vertexID == 3)\n    return vec2(0.5, 0.5);\n  return vec2(0,0);\n}\n"),BF.setShaderModule("unpackHDR.glsl","#define GLSLIFY 1\n\nvec3 decodeHDR(const in vec3 ldrPixel, const in float cdmAlpha) {\n  float avg = (cdmAlpha * 16.0 - 8.0);\n  float scl = 1.0;\n  vec3 color;\n  color.x = (tan((ldrPixel.x-0.5)*1.5)/scl)+avg;\n  color.y = (tan((ldrPixel.y-0.5)*1.5)/scl)+avg;\n  color.z = (tan((ldrPixel.z-0.5)*1.5)/scl)+avg;\n\n  // convert from logarithmic curve to linear curve.\n  // subtract the epsilon that was added during encoding.\n  const float eps = 0.001;\n  color.x = pow(10.0, color.x) - eps;\n  color.y = pow(10.0, color.y) - eps;\n  color.z = pow(10.0, color.z) - eps;\n  return color;\n}\n\nvec3 decodeHDR(sampler2D ldrSampler, sampler2D cdmSampler, vec2 texCoord) {\n#ifdef ENABLE_ES3\n  float cdm = texture2D(cdmSampler, texCoord).r;\n#else\n  float cdm = texture2D(cdmSampler, texCoord).a;\n#endif\n  return decodeHDR(texture2D(ldrSampler, texCoord).rgb, cdm);\n}\n\n");class ZF extends VF{constructor(g){super(g,"UnpackHDRShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER"," \nprecision highp float;\n#define GLSLIFY 1\n\nvarying vec2 v_texCoord;\nuniform sampler2D ldrSampler;\nuniform sampler2D cdmSampler;\nuniform vec4 srcRegion; // pos, and size of the source region\n\nimport 'unpackHDR.glsl'\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec2 srcUv = srcRegion.xy + (v_texCoord * srcRegion.zw);\n\n  fragColor = vec4(decodeHDR(ldrSampler, cdmSampler, srcUv), 1.0);\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n\n")}}const oF=(g,I)=>{let C,F,U;switch(I){case"UInt8":C=1,F=4,U=g.UNSIGNED_BYTE;break;case"SInt8":C=1,F=4,U=g.BYTE;break;case"UInt16":C=1,F=4,U=g.UNSIGNED_SHORT;break;case"SInt16":C=1,F=4,U=g.SHORT;break;case"UInt32":C=1,F=4,U=g.UNSIGNED_INT;break;case"SInt32":C=1,F=4,U=g.INT;break;case"Float32":C=1,F=4,U=g.FLOAT;break;case"Vec2":C=2,F=4,U=g.FLOAT;break;case"Vec3":C=3,F=4,U=g.FLOAT;break;case"Vec4":case"Color":C=4,F=4,U=g.FLOAT;break;case"RGBA":C=4,F=1,U=g.UNSIGNED_BYTE;break;default:throw"Unhandled Type"}return{dimension:C,elementSize:F,dataType:U}};class hF{}class cF extends hF{constructor(g,I,C,F){super(),this.gl=g,this.shaderAttrs=I,this.glattrbuffers=C,this.indexBuffer=F}bind(g){const I=this.gl;for(const g in this.shaderAttrs){if("instancedIds"==g)continue;const C=this.shaderAttrs[g],F=C.location;if(-1==F)continue;const U=this.glattrbuffers[g];if(!U){I.disableVertexAttribArray(F);continue}const l=oF(this.gl,U.dataType),t=l.dimension*l.elementSize,e=null!=U.offset?U.offset*l.dimension*l.elementSize:0,Q=1==U.normalized,d=C.instanced;I.enableVertexAttribArray(F),I.bindBuffer(I.ARRAY_BUFFER,U.buffer),I.vertexAttribPointer(F,l.dimension,l.dataType,Q,t,e),I.vertexAttribDivisor&&(1==d?I.vertexAttribDivisor(F,1):I.vertexAttribDivisor(F,0))}return I.bindBuffer(I.ELEMENT_ARRAY_BUFFER,this.indexBuffer),!0}unbind(){const g=this.gl;for(const I in this.shaderAttrs){const C=this.shaderAttrs[I],F=C.location;-1==F&&g.enableVertexAttribArray(F),C.instanced&&g.vertexAttribDivisor(F,0)}g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,null)}destroy(){}}class rF extends hF{constructor(g,I,C,F){super(),this.gl=g,this.vao=g.createVertexArray(),g.bindVertexArray(this.vao);for(const F in I){if("instancedIds"==F)continue;const U=I[F],l=U.location;if(-1==l)continue;let t=C[F];if(!t&&(F.endsWith("Next")&&(t=C[F.substring(0,F.length-4)],U.offset=1),!t)){g.disableVertexAttribArray(l);continue}const e=oF(g,t.dataType),Q=e.dimension*e.elementSize,d=null!=U.offset?U.offset*e.dimension*e.elementSize:0,n=1==t.normalized,i=U.instanced;g.enableVertexAttribArray(l),g.bindBuffer(g.ARRAY_BUFFER,t.buffer),g.vertexAttribPointer(l,e.dimension,e.dataType,n,Q,d),g.vertexAttribDivisor&&(1==i?g.vertexAttribDivisor(l,1):g.vertexAttribDivisor(l,0))}this.indexBuffer=F,this.indexBuffer&&g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,this.indexBuffer)}bind(g){const I=this.gl;return I.bindVertexArray(this.vao),this.indexBuffer&&I.bindBuffer(I.ELEMENT_ARRAY_BUFFER,this.indexBuffer),!0}unbind(){const g=this.gl;g.bindVertexArray(null),this.indexBuffer&&g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,null)}destroy(){const g=this.gl;this.indexBuffer&&(g.bindVertexArray(this.vao),g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,null)),g.deleteVertexArray(this.vao)}}function mF(g,I,C,F){return null==g.createVertexArray?new cF(g,I,C,F):new rF(g,I,C,F)}class WF extends dF{constructor(g,I){super(g),this.listenerIDs={},this.fbo=null,this.srcLDRTex=null,this.srcCDMTex=null,this.unpackHDRShader=null,this.shaderBinding=null,this.hdrImage=I,this.hdrImage.setMetadata("gltexture",this);const C=()=>{this.__unpackHDRImage(this.hdrImage.getParams())};this.listenerIDs.updated=this.hdrImage.on("updated",C),this.hdrImage.isLoaded()?C():this.listenerIDs.loaded=this.hdrImage.on("loaded",C)}getImage(){return this.hdrImage}__unpackHDRImage(g){const I=this.__gl,C=g.data.ldr,F=g.data.cdm;if(this.fbo)this.srcLDRTex.bufferData(C),this.srcCDMTex.bufferData(F);else{this.configure({format:"RGBA",type:"FLOAT",width:C.width,height:C.height,filter:"LINEAR",wrap:"CLAMP_TO_EDGE"}),this.fbo=new RF(this.__gl,this),this.fbo.setClearColor(new A(0,0,0,0)),this.srcLDRTex=new dF(this.__gl,{format:"RGB",type:"UNSIGNED_BYTE",width:C.width,height:C.height,filter:"NEAREST",mipMapped:!1,wrap:"CLAMP_TO_EDGE",data:C}),this.srcCDMTex=new dF(this.__gl,{format:"webgl2"==I.name?"RED":"ALPHA",type:"UNSIGNED_BYTE",width:C.width,height:C.height,filter:"NEAREST",mipMapped:!1,wrap:"CLAMP_TO_EDGE",data:F}),this.unpackHDRShader=new ZF(this.__gl);const g=this.unpackHDRShader.compileForTarget("GLHDRImage",{directives:["#define ENABLE_ES3"]});this.shaderBinding=mF(this.__gl,g.attrs,I.__quadattrbuffers,I.__quadIndexBuffer)}this.fbo.bindAndClear();const U={};this.unpackHDRShader.bind(U,"GLHDRImage"),this.shaderBinding.bind(U);const l=U.unifs;this.srcLDRTex.bindToUniform(U,l.ldrSampler),this.srcCDMTex.bindToUniform(U,l.cdmSampler),I.uniform4fv(l.srcRegion.location,[0,0,1,1]),I.drawQuad(),this.fbo.unbind(),this.emit("updated")}bindToUniform(g,I,C){return super.bindToUniform(g,I,C)}destroy(){super.destroy(),this.fbo&&(this.fbo.destroy(),this.srcLDRTex.destroy(),this.srcCDMTex.destroy()),this.unpackHDRShader&&this.unpackHDRShader.destroy(),this.shaderBinding&&this.shaderBinding.destroy(),"loaded"in this.listenerIDs&&this.hdrImage.removeListenerById("loaded",this.listenerIDs.loaded),this.hdrImage.removeListenerById("updated",this.listenerIDs.updated)}}class JF extends VF{constructor(g){super(g,"PreComputeBRDFShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nvarying vec2 v_texCoord;\n\nimport 'GLSLUtils.glsl'\nimport 'Hammersley.glsl'\nimport 'ImportanceSampleGGX.glsl'\n\nfloat GeometrySchlickGGX(float NdotV, float roughness)\n{\n  float a = roughness;\n  float k = (a * a) / 2.0;\n\n  float nom   = NdotV;\n  float denom = NdotV * (1.0 - k) + k;\n\n  return nom / denom;\n}\n// ----------------------------------------------------------------------------\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)\n{\n  float NdotV = max(dot(N, V), 0.0);\n  float NdotL = max(dot(N, L), 0.0);\n  float ggx2 = GeometrySchlickGGX(NdotV, roughness);\n  float ggx1 = GeometrySchlickGGX(NdotL, roughness);\n\n  return ggx1 * ggx2;\n}\n\nvec2 IntegrateBRDF(float NdotV, float roughness)\n{\n  vec3 V;\n  V.x = sqrt(1.0 - NdotV*NdotV);\n  V.y = 0.0;\n  V.z = NdotV;\n\n  float A = 0.0;\n  float B = 0.0;\n\n  vec3 N = vec3(0.0, 0.0, 1.0);\n\n  for(uint i = 0u; i < SAMPLE_COUNT; ++i)\n  {\n    vec2 Xi = Hammersley(i, SAMPLE_COUNT);\n    vec3 H  = ImportanceSampleGGX(Xi, N, roughness);\n    vec3 L  = normalize(2.0 * dot(V, H) * H - V);\n\n    float NdotL = max(L.z, 0.0);\n    float NdotH = max(H.z, 0.0);\n    float VdotH = max(dot(V, H), 0.0);\n\n    if (NdotL > 0.0)\n    {\n      float G = GeometrySmith(N, V, L, roughness);\n      float G_Vis = (G * VdotH) / (NdotH * NdotV);\n      float Fc = pow(1.0 - VdotH, 5.0);\n\n      A += (1.0 - Fc) * G_Vis;\n      B += Fc * G_Vis;\n    }\n  }\n  A /= float(SAMPLE_COUNT);\n  B /= float(SAMPLE_COUNT);\n  return vec2(A, B);\n}\n\nout vec2 fragColor;\nvoid main(void) {\n  vec2 integratedBRDF = IntegrateBRDF(v_texCoord.x, v_texCoord.y);\n  fragColor = integratedBRDF;\n}\n\n")}}class GF extends VF{constructor(g){super(g,"ConvolveIrradianceShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\nimport 'constants.glsl'\nimport 'convolve-helpers.glsl'\n\nuniform float roughness;\nuniform int faceId;\nvarying vec2 v_texCoord;\n\nout vec4 fragColor;\nvoid main(void) {\n\n  vec3 N = cubeFaceUvToDir(v_texCoord.x, v_texCoord.y, faceId);   \n\n  vec3 irradiance = vec3(0.0);\n\n  vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n  vec3 tangent   = normalize(cross(up, N));\n  vec3 bitangent = cross(N, tangent);\n\n  float nrSamples = 0.0; \n  for(float phi = 0.0; phi < 2.0 * PI; phi += SAMPLE_DELTA)\n  {\n    for(float theta = 0.0; theta < 0.5 * PI; theta += SAMPLE_DELTA)\n    {\n      // spherical to cartesian (in tangent space)\n      // from spherical coordinates to cartesian coordinates\n      vec3 H = vec3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));\n      // tangent space to world\n      vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n\n      irradiance += sampleEnvMap(normalize(sampleVec)).rgb * cos(theta) * sin(theta);\n      nrSamples++;\n    }\n  }\n  irradiance = PI * irradiance * (1.0 / float(nrSamples));\n\n  fragColor = vec4(irradiance, 1.0);\n}\n")}}class bF extends VF{constructor(g){super(g,"ConvolveSpecularShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","precision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'ImportanceSampleGGX.glsl'\nimport 'convolve-helpers.glsl'\nimport 'Hammersley.glsl'\n  \n  \nuniform float roughness;\nuniform int faceId;\nvarying vec2 v_texCoord;\n\nout vec4 fragColor;\nvoid main(void) {\n\n  vec3 N = cubeFaceUvToDir(v_texCoord.x, v_texCoord.y, faceId);   \n\n  vec3 R = N;\n  vec3 V = R;\n\n  float totalWeight = 0.0;   \n  vec3 prefilteredColor = vec3(0.0);     \n  for(uint i = 0u; i < SAMPLE_COUNT; ++i)\n  {\n    vec2 Xi = Hammersley(i, SAMPLE_COUNT);\n    vec3 H  = ImportanceSampleGGX(Xi, N, roughness);\n    vec3 L  = normalize(2.0 * dot(V, H) * H - V);\n\n    float NdotL = max(dot(N, L), 0.0);\n    if (NdotL > 0.0)\n    {\n      prefilteredColor += sampleEnvMap(L).rgb * NdotL;\n      totalWeight      += NdotL;\n    }\n  }\n  prefilteredColor = prefilteredColor / totalWeight;\n\n  fragColor = vec4(prefilteredColor, 1.0);\n}\n")}}class NF extends b{constructor(g,I){super(),this.__gl=g;const C=g;this.maxFragmentShaderTextureUnits=g.getParameter(this.__gl.MAX_TEXTURE_IMAGE_UNITS),C.__quadVertexIdsBuffer||C.setupInstancedQuad(),this.textureType=1,this.textureDesc=[0,0,0,0],this.__convolved=!1,this.__fbos=[]}convolveProbe(g){const I=this.__gl,F={shaderopts:{directives:["#define ENABLE_ES3","#define ENABLE_FLOAT_TEXTURES"]}};"Low"==C.deviceCategory?(F.shaderopts.directives.push("#define SAMPLE_DELTA 0.1"),F.shaderopts.directives.push("#define SAMPLE_COUNT 64u")):"Medium"==C.deviceCategory?(F.shaderopts.directives.push("#define SAMPLE_DELTA 0.08"),F.shaderopts.directives.push("#define SAMPLE_COUNT 256u")):(F.shaderopts.directives.push("#define SAMPLE_DELTA 0.025"),F.shaderopts.directives.push("#define SAMPLE_COUNT 1024u")),this.brdfLUTTexture=I.createTexture(),I.bindTexture(I.TEXTURE_2D,this.brdfLUTTexture),I.texImage2D(I.TEXTURE_2D,0,I.RG16F,512,512,0,I.RG,I.FLOAT,null),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_WRAP_S,I.CLAMP_TO_EDGE),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_WRAP_T,I.CLAMP_TO_EDGE),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_MIN_FILTER,I.LINEAR),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_MAG_FILTER,I.LINEAR);const U=new JF(this.__gl),l=U.compileForTarget("GLProbe",F.shaderopts),t=mF(this.__gl,l.attrs,I.__quadattrbuffers,I.__quadIndexBuffer),e=I.createFramebuffer();I.bindFramebuffer(I.DRAW_FRAMEBUFFER,e),I.framebufferTexture2D(I.DRAW_FRAMEBUFFER,I.COLOR_ATTACHMENT0,I.TEXTURE_2D,this.brdfLUTTexture,0),U.bind(F),t.bind(F),I.clear(I.COLOR_BUFFER_BIT|I.DEPTH_BUFFER_BIT),I.viewport(0,0,512,512),I.drawQuad(),I.bindFramebuffer(I.DRAW_FRAMEBUFFER,null),I.deleteFramebuffer(e),U.unbind(F),U.destroy();{const C=new GF(this.__gl),U=C.compileForTarget("GLProbe",F.shaderopts),l=mF(this.__gl,U.attrs,I.__quadattrbuffers,I.__quadIndexBuffer);C.bind(F,"GLProbe"),l.bind(F);const t=F.unifs;g.bindToUniform(F,t.envMap);const e=64;this.irradianceCubeTex=I.createTexture(),I.bindTexture(I.TEXTURE_CUBE_MAP,this.irradianceCubeTex),I.texParameteri(I.TEXTURE_CUBE_MAP,I.TEXTURE_MAG_FILTER,I.LINEAR),I.texParameteri(I.TEXTURE_CUBE_MAP,I.TEXTURE_MIN_FILTER,I.LINEAR_MIPMAP_LINEAR),I.texParameteri(I.TEXTURE_CUBE_MAP,I.TEXTURE_WRAP_S,I.CLAMP_TO_EDGE),I.texParameteri(I.TEXTURE_CUBE_MAP,I.TEXTURE_WRAP_T,I.CLAMP_TO_EDGE),I.texParameteri(I.TEXTURE_CUBE_MAP,I.TEXTURE_WRAP_R,I.CLAMP_TO_EDGE);for(let g=0;g<6;g++)I.texImage2D(I.TEXTURE_CUBE_MAP_POSITIVE_X+g,0,I.RGBA32F,e,e,0,I.RGBA,I.FLOAT,null);const Q=I.createFramebuffer();I.bindFramebuffer(I.DRAW_FRAMEBUFFER,Q);for(let g=0;g<6;++g)I.uniform1i(t.faceId.location,g),I.framebufferTexture2D(I.DRAW_FRAMEBUFFER,I.COLOR_ATTACHMENT0,I.TEXTURE_CUBE_MAP_POSITIVE_X+g,this.irradianceCubeTex,0),I.viewport(0,0,e,e),I.clearColor(1,0,0,1),I.clear(I.COLOR_BUFFER_BIT|I.DEPTH_BUFFER_BIT),I.drawQuad();I.bindFramebuffer(I.DRAW_FRAMEBUFFER,null),I.deleteFramebuffer(Q),I.generateMipmap(I.TEXTURE_CUBE_MAP)}{const C=new bF(this.__gl),U=C.compileForTarget("GLProbe",F.shaderopts),l=mF(this.__gl,U.attrs,I.__quadattrbuffers,I.__quadIndexBuffer);C.bind(F,"GLProbe"),l.bind(F);const t=F.unifs;g.bindToUniform(F,t.envMap),this.specularCubetex=I.createTexture(),I.bindTexture(I.TEXTURE_CUBE_MAP,this.specularCubetex),I.texParameteri(I.TEXTURE_CUBE_MAP,I.TEXTURE_MAG_FILTER,I.LINEAR),I.texParameteri(I.TEXTURE_CUBE_MAP,I.TEXTURE_MIN_FILTER,I.LINEAR_MIPMAP_LINEAR),I.texParameteri(I.TEXTURE_CUBE_MAP,I.TEXTURE_WRAP_S,I.CLAMP_TO_EDGE),I.texParameteri(I.TEXTURE_CUBE_MAP,I.TEXTURE_WRAP_T,I.CLAMP_TO_EDGE),I.texParameteri(I.TEXTURE_CUBE_MAP,I.TEXTURE_WRAP_R,I.CLAMP_TO_EDGE);const e=256;for(let g=0;g<6;g++)I.texImage2D(I.TEXTURE_CUBE_MAP_POSITIVE_X+g,0,I.RGBA32F,e,e,0,I.RGBA,I.FLOAT,null);I.generateMipmap(I.TEXTURE_CUBE_MAP);const Q=5;for(let g=0;g<Q;++g){const C=e*Math.pow(.5,g),F=e*Math.pow(.5,g),U=I.createFramebuffer();I.bindFramebuffer(I.DRAW_FRAMEBUFFER,U),I.viewport(0,0,C,F);const l=g/(Q-1);I.uniform1f(t.roughness.location,l);for(let C=0;C<6;++C)I.uniform1i(t.faceId.location,C),I.framebufferTexture2D(I.DRAW_FRAMEBUFFER,I.COLOR_ATTACHMENT0,I.TEXTURE_CUBE_MAP_POSITIVE_X+C,this.specularCubetex,g),I.drawQuad();I.bindFramebuffer(I.DRAW_FRAMEBUFFER,null),I.deleteFramebuffer(U)}C.destroy()}this.__convolved=!0}bind(g){const I=this.__gl,{irradianceMap:C,prefilterMap:F,brdfLUT:U,envMapFlags:l}=g.unifs;if(!this.__convolved)return C&&I.uniform1i(C.location,this.maxFragmentShaderTextureUnits-1),F&&I.uniform1i(F.location,this.maxFragmentShaderTextureUnits-1),l&&I.uniform1i(l.location,-1),!1;if(U){const C=g.boundTextures++;I.activeTexture(this.__gl.TEXTURE0+C),I.bindTexture(I.TEXTURE_2D,this.brdfLUTTexture),I.uniform1i(U.location,C)}if(C){const F=g.boundTextures++,U=this.__gl.TEXTURE0+F;I.activeTexture(U),I.bindTexture(I.TEXTURE_CUBE_MAP,this.irradianceCubeTex),I.uniform1i(C.location,F)}if(F){const C=g.boundTextures++,U=this.__gl.TEXTURE0+C;I.activeTexture(U),I.bindTexture(I.TEXTURE_CUBE_MAP,this.specularCubetex),I.uniform1i(F.location,C)}return l&&I.uniform1i(l.location,0),!0}destroy(){}}class SF extends VF{constructor(g){super(g,"EnvMapShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\n\nimport 'inverse.glsl'\nimport 'transpose.glsl'\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID() * 2.0;\n  v_texCoord = position * 0.5 + 0.5;\n\n  mat4 inverseProjection = inverse(projectionMatrix);\n  mat3 inverseModelview = transpose(mat3(viewMatrix));\n\n  // transform from the normalized device coordinates back to the view space\n  vec3 unprojected = (inverseProjection * vec4(position, 0, 1)).xyz;\n\n  // transfrom from the view space back to the world space\n  // and use it as a sampling vector\n  v_worldDir = inverseModelview * unprojected;\n\n  gl_Position = vec4(position, 0, 1);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'gamma.glsl'\nimport 'constants.glsl'\n\nuniform float focus;\nuniform float exposure;\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\nvarying vec2 v_texCoord;\n\n#define ENABLE_INLINE_GAMMACORRECTION\n\n#define ENV_MAP_LATLONG 0\n#define ENV_MAP_OCT 1\n#define ENV_MAP_CUBE 2\n#define ENV_MAP_irradianceMap 8\n#define ENV_MAP_prefilterMap 3\n#define ENV_MAP_STEREO_LATLONG 4\n#define ENV_MAP_DUALFISHEYE 5\n#define ENV_MAP_SH 6\n#define ENV_MAP_BRDF_LUT 7\n\n#define ENV_MAPTYPE ENV_MAP_OCT\n\n#if (ENV_MAPTYPE == ENV_MAP_LATLONG)  \n\nimport 'envmap-equirect.glsl'\n\nuniform sampler2D backgroundImage;\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = latLongUVsFromDir(normalize(dir));\n  vec4 texel = texture2D(backgroundImage, uv) * exposure;\n  return vec4(texel.rgb/texel.a, 1.0);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_OCT)  \n\nimport 'envmap-octahedral.glsl'\n\nuniform sampler2D   envMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = dirToSphOctUv(normalize(dir));\n  if (false) {\n    vec4 texel = texture2D(envMap, uv);\n    return vec4(texel.rgb/texel.a, 1.0);\n  }\n  else {\n    return texture2D(envMap, uv) * exposure;\n  }\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_CUBE)\n\nuniform samplerCube cubeMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return texture(cubeMap, dir, 0.0);// * exposure;\n  // return textureLod(cubeMap, dir, exposure);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_irradianceMap)\n\nuniform samplerCube irradianceMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return textureLod(irradianceMap, dir, exposure);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_prefilterMap)\n\nuniform samplerCube prefilterMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return textureLod(prefilterMap, dir, exposure);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_STEREO_LATLONG)  \n\nimport 'envmap-equirect.glsl'\nuniform int eye;// L = 0, R = 1;\nuniform sampler2D backgroundImage;\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = latLongUVsFromDir(normalize(v_worldDir));\n  uv.y *= 0.5;\n  if (eye == 1) {\n    uv.y += 0.5;\n  }\n  vec4 texel = texture2D(backgroundImage, uv) * exposure;\n  fragColor = vec4(texel.rgb/texel.a, 1.0);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_DUALFISHEYE)\n\nimport 'envmap-dualfisheye.glsl'\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = dualfisheyeUVsFromDir(dir);\n  return texture2D(backgroundImage, uv) * exposure;\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_SH)\n\nimport 'SHCoeffs.glsl'\n\nvec4 sampleEnvMap(vec3 dir) {\n\treturn vec4(sampleSHCoeffs(dir) * exposure, 1.0);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_BRDF_LUT)\n\nuniform sampler2D brdfLUT;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return texture2D(brdfLUT, v_texCoord);\n}\n#endif\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  fragColor = sampleEnvMap(normalize(v_worldDir));\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb);\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}class uF extends NF{constructor(g,I){super(g.gl,"EnvMap"),this.__srcGLTex=null,this.__envMapShader=null,this.__envMapShaderBinding=null,this.__renderer=g,this.__envMap=I,this.__backgroundFocus=0,this.__envMap.isLoaded()?this.init():this.__envMap.once("loaded",(g=>{this.init()}))}init(){const g=this.__renderer.gl;g.__quadVertexIdsBuffer||g.setupInstancedQuad(),this.__srcGLTex=new WF(g,this.__envMap),this.__envMapShader=new SF(g);const I=this.__envMapShader.compileForTarget("GLEnvMap",{directives:["#define ENABLE_ES3"]});this.__envMapShaderBinding=mF(g,I.attrs,g.__quadattrbuffers,g.__quadIndexBuffer);const C=this.__envMap.headlightModeParam,F=()=>{C.value?this.textureDesc[3]|=1:this.textureDesc[3]&=-2};F(),C.on("valueChanged",(()=>{F(),this.emit("updated")})),this.convolveProbe(this.__srcGLTex),this.emit("updated")}getEnvMap(){return this.__envMap}getBackgroundFocus(){return this.__backgroundFocus}setBackgroundFocus(g){this.__backgroundFocus=g,this.__renderer.requestRedraw()}draw(g){if(this.__envMap.isLoaded()){const I=this.__gl;{this.__envMapShader.bind(g,"GLEnvMap");const C=g.unifs,{envMap:F,focus:U,exposure:l}=g.unifs;F&&this.__srcGLTex.bindToUniform(g,F),U&&I.uniform1f(U.location,this.__backgroundFocus),l&&I.uniform1f(l.location,g.exposure),this.__envMapShaderBinding.bind(g),I.depthMask(!1),g.bindViewports(C,(()=>{I.drawQuad()}))}}}destroy(){super.destroy(),this.__srcGLTex&&this.__srcGLTex.destroy()}}function yF(g){var I=typeof g;return null!=g&&("object"==I||"function"==I)}var XF="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},pF="object"==typeof XF&&XF&&XF.Object===Object&&XF,kF="object"==typeof self&&self&&self.Object===Object&&self,YF=pF||kF||Function("return this")(),EF=function(){return YF.Date.now()},TF=/\s/;var DF=/^\s+/;function vF(g){return g?g.slice(0,function(g){for(var I=g.length;I--&&TF.test(g.charAt(I)););return I}(g)+1).replace(DF,""):g}var MF=YF.Symbol,HF=Object.prototype,KF=HF.hasOwnProperty,xF=HF.toString,wF=MF?MF.toStringTag:void 0;var zF=Object.prototype.toString;var fF=MF?MF.toStringTag:void 0;function LF(g){return null==g?void 0===g?"[object Undefined]":"[object Null]":fF&&fF in Object(g)?function(g){var I=KF.call(g,wF),C=g[wF];try{g[wF]=void 0;var F=!0}catch(g){}var U=xF.call(g);return F&&(I?g[wF]=C:delete g[wF]),U}(g):function(g){return zF.call(g)}(g)}var _F=/^[-+]0x[0-9a-f]+$/i,OF=/^0b[01]+$/i,jF=/^0o[0-7]+$/i,PF=parseInt;function qF(g){if("number"==typeof g)return g;if(function(g){return"symbol"==typeof g||function(g){return null!=g&&"object"==typeof g}(g)&&"[object Symbol]"==LF(g)}(g))return NaN;if(yF(g)){var I="function"==typeof g.valueOf?g.valueOf():g;g=yF(I)?I+"":I}if("string"!=typeof g)return 0===g?g:+g;g=vF(g);var C=OF.test(g);return C||jF.test(g)?PF(g.slice(2),C?2:8):_F.test(g)?NaN:+g}var $F=Math.max,gU=Math.min;function IU(g,I,C){var F,U,l,t,e,Q,d=0,n=!1,i=!1,A=!0;if("function"!=typeof g)throw new TypeError("Expected a function");function B(I){var C=F,l=U;return F=U=void 0,d=I,t=g.apply(l,C)}function a(g){return d=g,e=setTimeout(R,I),n?B(g):t}function V(g){var C=g-Q;return void 0===Q||C>=I||C<0||i&&g-d>=l}function R(){var g=EF();if(V(g))return s(g);e=setTimeout(R,function(g){var C=I-(g-Q);return i?gU(C,l-(g-d)):C}(g))}function s(g){return e=void 0,A&&F?B(g):(F=U=void 0,t)}function Z(){var g=EF(),C=V(g);if(F=arguments,U=this,Q=g,C){if(void 0===e)return a(Q);if(i)return clearTimeout(e),e=setTimeout(R,I),B(Q)}return void 0===e&&(e=setTimeout(R,I)),t}return I=qF(I)||0,yF(C)&&(n=!!C.leading,l=(i="maxWait"in C)?$F(qF(C.maxWait)||0,I):l,A="trailing"in C?!!C.trailing:A),Z.cancel=function(){void 0!==e&&clearTimeout(e),d=0,F=Q=U=e=void 0},Z.flush=function(){return void 0===e?t:s(EF())},Z}class CU extends VF{constructor(g){super(g,"ScreenQuadShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\nuniform vec2 pos;\nuniform vec2 size;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(vec2(-1.0, -1.0) + (pos * 2.0) + (v_texCoord * abs(size) * 2.0), 0.0, 1.0);\n  if (size.x < 0.0)\n    v_texCoord.x = 1.0 - v_texCoord.x;\n  if (size.y < 0.0)\n    v_texCoord.y = 1.0 - v_texCoord.y;\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D image;\n\nvarying vec2 v_texCoord;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n  fragColor = texture2D(image, v_texCoord);\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}class FU{constructor(g,I){this.__gl=g,this.__pos=[0,0],this.__size=[1,1],this.flipY=!0,this.__glshader=new CU(g),g.__quadVertexIdsBuffer||g.setupInstancedQuad();const C=this.__glshader.compileForTarget("GLScreenQuad",I);this.__quadBinding=mF(this.__gl,C.attrs,g.__quadattrbuffers,g.__quadIndexBuffer),this.ready=!0}bind(g,I,C,F){const U=g.unifs;I&&I.bindToUniform(g,g.unifs.image);const l=this.__gl;{const g=U.pos;if(g){let I=C?C instanceof Q?C.asArray():C:this.__pos;l.uniform2fv(g.location,I)}}{const g=U.size;if(g){let I=F?F instanceof Q?F.asArray():F:this.__size;l.uniform2fv(g.location,I)}}this.__quadBinding.bind(g)}bindShader(g){return this.__glshader.bind(g,"GLScreenQuad")}draw(g,I,C,F){this.bind(g,I,C,F);const U=this.__gl;U.drawElements(U.TRIANGLES,6,U.UNSIGNED_SHORT,0)}destroy(){}}class UU extends ng{constructor(g,I){super(),this.genBufferOpts={},this.__indexBuffer=null,this.__gl=g,this.__geom=I,this.__glattrbuffers={},this.__shaderBindings={},this.buffersDirty=!0;this.__geom.on("geomDataChanged",(g=>{this.dirtyBuffers(g)}));this.__geom.on("geomDataTopologyChanged",(g=>{this.clearBuffers(),this.dirtyBuffers(g)}))}getGeom(){return this.__geom}dirtyBuffers(g){this.genBufferOpts=g,this.buffersDirty=!0,this.emit("updated")}genBuffers(g){}updateBuffers(g){this.genBuffers(g),this.buffersDirty=!1}bind(g){if(this.__destroyed)throw new Error("Error binding a destroyed geom");this.buffersDirty&&this.updateBuffers();let I=this.__shaderBindings[g.shaderkey];if(!I){I=mF(this.__gl,g.attrs,this.__glattrbuffers,this.__indexBuffer),this.__shaderBindings[g.shaderkey]=I}return I.bind(g),!0}unbind(g){const I=this.__shaderBindings[g.shaderkey];I&&I.unbind(g)}draw(g){throw new Error("Not implemented. Implement this method in a derived class.")}drawInstanced(g,I){throw new Error("Not implemented. Implement this method in a derived class.")}bindAndDraw(g){this.bind(g),this.draw(g)}clearBuffers(){const g=this.__gl;for(const I in this.__glattrbuffers){const C=this.__glattrbuffers[I];C.shared||g.deleteBuffer(C.buffer)}this.__glattrbuffers={};for(const g in this.__shaderBindings){this.__shaderBindings[g].destroy()}this.__shaderBindings={}}destroy(){this.__geom.deleteMetadata("glgeom"),this.clearBuffers(),this.__destroyed=!0,this.emit("destructing")}}class lU extends UU{constructor(g,I){super(g,I),this.__numTriIndices=0,this.__indexDataType=0,this.__numVertices=0,this.__numTriangles=0,this.__numRenderVerts=0}genBuffers(){super.genBuffers();const g=this.__gl,I=this.__geom.genBuffers(),C=I.indices;this.__numTriIndices=I.indices.length,C instanceof Uint8Array&&(this.__indexDataType=this.__gl.UNSIGNED_BYTE),C instanceof Uint16Array&&(this.__indexDataType=this.__gl.UNSIGNED_SHORT),C instanceof Uint32Array&&(this.__indexDataType=this.__gl.UNSIGNED_INT),this.__numVertices=this.__geom.getNumVertices(),this.__numTriangles=C.length/3,this.__numRenderVerts=I.numRenderVerts,this.__indexBuffer&&g.deleteBuffer(this.__indexBuffer),this.__indexBuffer=g.createBuffer(),g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),g.bufferData(g.ELEMENT_ARRAY_BUFFER,I.indices,g.STATIC_DRAW);for(const C in I.attrBuffers){const F=I.attrBuffers[C];this.__glattrbuffers[C]&&this.__glattrbuffers[C].buffer&&g.deleteBuffer(this.__glattrbuffers[C].buffer);const U=g.createBuffer();g.bindBuffer(g.ARRAY_BUFFER,U),g.bufferData(g.ARRAY_BUFFER,F.values,g.STATIC_DRAW),this.__glattrbuffers[C]={buffer:U,dataType:F.dataType,normalized:F.normalized},"textureCoords"==C&&(this.__glattrbuffers.texCoords=this.__glattrbuffers.textureCoords)}}updateBuffers(g){const I=this.__gl;if(this.__numVertices!=this.__geom.getNumVertices())return void this.genBuffers();const C=this.__geom.genBuffers({includeIndices:!1});for(const g in C.attrBuffers){const F=C.attrBuffers[g],U=this.__glattrbuffers[g];I.bindBuffer(I.ARRAY_BUFFER,U.buffer),I.bufferData(I.ARRAY_BUFFER,F.values,I.STATIC_DRAW)}this.buffersDirty=!1}clearBuffers(){this.__gl.deleteBuffer(this.__indexBuffer),this.__indexBuffer=null,super.clearBuffers()}draw(g){this.__gl.drawElements(this.__gl.TRIANGLES,this.__numTriIndices,this.__indexDataType,0)}drawInstanced(g,I){this.__gl.drawElementsInstanced(this.__gl.TRIANGLES,this.__numTriIndices,this.__indexDataType,0,I)}destroy(){super.destroy();this.__gl.deleteBuffer(this.__indexBuffer),this.__indexBuffer=null}}const tU={MSAA_RENDERBUFFER:0,COLORBUFFER:1,DEPTHBUFFER:2};class eU extends ig{constructor(g){super(),this.__fbo=null,this.offscreenBuffer=null,this.depthTexture=null,this.__backgroundTexture=null,this.__backgroundGLTexture=null,this.offscreenBufferFbo=null,this.__width=0,this.__height=0,this.__canvasWidth=0,this.__canvasHeight=0,this.fb=null,this.depthBuffer=null,this.EXT_frag_depth=null,this.depthRange=[0,0],this.backgroundColorParam=new Dg("BackgroundColor",new A("#eeeeee")),this.doubleClickTimeParam=new Xg("DoubleClickTimeMS",200),this.renderer=g,this.__renderer=g,this.addParameter(this.doubleClickTimeParam);const I=this.__renderer.gl;this.__gl=I,this.quad=new lU(I,new HI(1,1)),"webgl2"==I.name&&(this.offscreenBuffer=new dF(I,{type:"UNSIGNED_BYTE",format:"RGBA",filter:"LINEAR",width:4,height:4}),this.depthTexture=new dF(I,{type:I.UNSIGNED_INT_24_8,format:I.DEPTH_STENCIL,internalFormat:"webgl2"==I.name?I.DEPTH24_STENCIL8:I.DEPTH_COMPONENT,filter:I.NEAREST,wrap:I.CLAMP_TO_EDGE,width:4,height:4})),this.highlightedGeomsBuffer=new dF(I,{type:"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:4,height:4}),this.highlightedGeomsBufferFbo=new RF(I,this.highlightedGeomsBuffer,!0),this.highlightedGeomsBufferFbo.setClearColor(new A(0,0,0,0));const C=()=>{const g=this.backgroundColorParam.value;g instanceof dI?g instanceof _I?(this.__backgroundTexture=g,this.__backgroundGLTexture=new WF(I,g)):(this.__backgroundTexture=g,this.__backgroundGLTexture=new dF(I,g)):g instanceof A?(this.__backgroundGLTexture&&(this.__backgroundGLTexture.destroy(),this.__backgroundGLTexture=null,this.__backgroundTexture=null),this.offscreenBufferFbo&&this.offscreenBufferFbo.setClearColor(new A(g.asArray()))):console.warn("Invalid background:"+g),this.emit("updated")};C(),this.backgroundColorParam.on("valueChanged",C)}getWidth(){return this.__width}getHeight(){return this.__height}resize(g,I){if(this.__canvasWidth==g&&this.__canvasHeight==I)return;this.__canvasWidth=g,this.__canvasHeight=I,this.__width=g,this.__height=I,this.resizeRenderTargets(g,I);const C=new N(this.__width,this.__height);this.emit("resized",C)}resizeRenderTargets(g,I){const C=this.__renderer.gl;if(this.renderer.outlineThickness>0&&"webgl2"==C.name){this.fb&&(C.deleteFramebuffer(this.fb[tU.MSAA_RENDERBUFFER]),C.deleteFramebuffer(this.fb[tU.COLORBUFFER]),C.deleteFramebuffer(this.fb[tU.DEPTHBUFFER]),this.colorRenderbuffer&&C.deleteRenderbuffer(this.colorRenderbuffer),this.depthBuffer&&C.deleteRenderbuffer(this.depthBuffer)),this.offscreenBuffer.resize(g,I),this.depthTexture.resize(g,I),this.fb=[],this.fb[tU.MSAA_RENDERBUFFER]=C.createFramebuffer(),C.bindFramebuffer(C.FRAMEBUFFER,this.fb[tU.MSAA_RENDERBUFFER]),this.colorRenderbuffer=C.createRenderbuffer(),C.bindRenderbuffer(C.RENDERBUFFER,this.colorRenderbuffer),C.renderbufferStorageMultisample(C.RENDERBUFFER,4,C.RGBA8,g,I),C.framebufferRenderbuffer(C.FRAMEBUFFER,C.COLOR_ATTACHMENT0,C.RENDERBUFFER,this.colorRenderbuffer),this.depthBuffer=C.createRenderbuffer(),C.bindRenderbuffer(C.RENDERBUFFER,this.depthBuffer),C.renderbufferStorageMultisample(C.RENDERBUFFER,4,C.DEPTH24_STENCIL8,g,I),C.framebufferRenderbuffer(C.FRAMEBUFFER,C.DEPTH_ATTACHMENT,C.RENDERBUFFER,this.depthBuffer),this.fb[tU.COLORBUFFER]=C.createFramebuffer(),C.bindFramebuffer(C.FRAMEBUFFER,this.fb[tU.COLORBUFFER]),C.framebufferTexture2D(C.FRAMEBUFFER,C.COLOR_ATTACHMENT0,C.TEXTURE_2D,this.offscreenBuffer.glTex,0),C.bindFramebuffer(C.FRAMEBUFFER,null),this.fb[tU.DEPTHBUFFER]=C.createFramebuffer(),C.bindFramebuffer(C.FRAMEBUFFER,this.fb[tU.DEPTHBUFFER]),C.framebufferTexture2D(C.FRAMEBUFFER,C.DEPTH_ATTACHMENT,C.TEXTURE_2D,this.depthTexture.glTex,0),C.bindFramebuffer(C.FRAMEBUFFER,null);const F=C.checkFramebufferStatus("webgl2"==C.name?C.DRAW_FRAMEBUFFER:C.FRAMEBUFFER);if(F!==C.FRAMEBUFFER_COMPLETE)switch(F){case C.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case C.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case C.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case C.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}}this.highlightedGeomsBuffer&&this.highlightedGeomsBuffer.resize(g,I)}draw(g){const I=this.__renderer.gl,C=g.boundRendertarget;if(this.renderer.outlineThickness>0&&"webgl2"==I.name){this.fb||this.resizeRenderTargets(this.__width,this.__height);const C=this.fb[tU.MSAA_RENDERBUFFER];I.bindFramebuffer("webgl2"==I.name?I.DRAW_FRAMEBUFFER:I.FRAMEBUFFER,C),g.boundRendertarget=C}else g.boundRendertarget||I.bindFramebuffer(I.FRAMEBUFFER,null);I.viewport(0,0,this.__width,this.__height);const F=this.backgroundColorParam.value.asArray();if(I.clearColor(F[0],F[1],F[2],F[3]),I.colorMask(!0,!0,!0,!1),I.clear(I.COLOR_BUFFER_BIT|I.DEPTH_BUFFER_BIT),I.enable(I.DEPTH_TEST),this.__renderer.drawScene(g),this.drawHighlights(g),this.fb&&"webgl2"==I.name){const F=I;F.bindFramebuffer(F.READ_FRAMEBUFFER,this.fb[tU.MSAA_RENDERBUFFER]),F.bindFramebuffer(F.DRAW_FRAMEBUFFER,this.fb[tU.COLORBUFFER]),F.clearBufferfv(F.COLOR,0,[0,0,0,0]),F.blitFramebuffer(0,0,this.__width,this.__height,0,0,this.__width,this.__height,F.COLOR_BUFFER_BIT,F.LINEAR),I.bindFramebuffer(I.DRAW_FRAMEBUFFER,C),g.boundRendertarget=C,I.viewport(0,0,this.__width,this.__height),I.disable(I.DEPTH_TEST);const U=this.__renderer.screenQuad;U.bindShader(g),U.draw(g,this.offscreenBuffer)}}drawSilhouettes(g){const I=this.__renderer.gl;if(0==this.renderer.outlineThickness||"webgl2"!=I.name||!this.fb)return;const C=I;if(C.bindFramebuffer(C.READ_FRAMEBUFFER,this.fb[tU.MSAA_RENDERBUFFER]),C.bindFramebuffer(C.DRAW_FRAMEBUFFER,this.fb[tU.DEPTHBUFFER]),C.clearBufferfv(C.COLOR,0,[1,1,1,1]),C.blitFramebuffer(0,0,this.__width,this.__height,0,0,this.__width,this.__height,C.DEPTH_BUFFER_BIT,C.NEAREST),C.bindFramebuffer(C.DRAW_FRAMEBUFFER,this.fb[tU.MSAA_RENDERBUFFER]),g.boundRendertarget=this.fb[tU.MSAA_RENDERBUFFER],C.viewport(0,0,this.__width,this.__height),0==this.renderer.outlineThickness)return;C.enable(C.BLEND),C.blendEquation(C.FUNC_ADD),C.blendFunc(C.SRC_ALPHA,C.ONE_MINUS_SRC_ALPHA),C.disable(C.DEPTH_TEST),C.depthMask(!1),this.renderer.silhouetteShader.bind(g);const F=g.unifs;this.depthTexture.bindToUniform(g,F.depthTexture),C.uniform2f(F.screenSize.location,this.__width,this.__height),C.uniform1f(F.outlineThickness.location,this.renderer.outlineThickness);const U=this.renderer.outlineColor.asArray();C.uniform4f(F.outlineColor.location,U[0],U[1],U[2],U[3]),C.uniform1f(F.outlineSensitivity.location,this.renderer.outlineSensitivity),C.uniform1f(F.outlineDepthBias.location,this.renderer.outlineDepthBias),C.uniform2f(F.depthRange.location,this.depthRange[0],this.depthRange[1]),this.quad.bindAndDraw(g),C.enable(C.DEPTH_TEST),C.depthMask(!0)}drawHighlights(g){if(this.highlightedGeomsBufferFbo){const I=this.__renderer.gl;this.highlightedGeomsBufferFbo.bindForWriting(g),this.highlightedGeomsBufferFbo.clear(),I.disable(I.BLEND),I.enable(I.DEPTH_TEST),I.depthFunc(I.LESS),I.depthMask(!0),g.glShader=null,this.__renderer.drawHighlightedGeoms(g),this.highlightedGeomsBufferFbo.unbindForWriting(g),I.viewport(0,0,this.__width,this.__height);{this.renderer.highlightsShader.bind(g),I.enable(I.BLEND),I.blendEquation(I.FUNC_ADD),I.blendFunc(I.SRC_ALPHA,I.ONE_MINUS_SRC_ALPHA);const C=g.unifs;I.uniform1f(C.outlineThickness.location,this.renderer.highlightOutlineThickness),this.highlightedGeomsBuffer.bindToUniform(g,C.highlightDataTexture),I.uniform2f(C.highlightDataTextureSize.location,g.region[2],g.region[3]),this.quad.bindAndDraw(g),I.disable(I.BLEND)}}}getManipulator(){return this.manipulator}setManipulator(g){this.manipulator!=g&&(this.manipulator&&this.manipulator.deactivateTool&&this.manipulator.deactivateTool(),this.manipulator=g,this.manipulator.activateTool&&this.manipulator.activateTool())}onPointerDown(g){console.warn("@GLBaseViewport#onPointerDown - Implement me!")}onPointerUp(g){console.warn("@GLBaseViewport#onPointerUp - Implement me!")}onPointerMove(g){console.warn("@GLBaseViewport#onPointerMove - Implement me!")}onPointerEnter(g){console.warn("@GLBaseViewport#onPointerEnter - Implement me!")}onPointerLeave(g){console.warn("@GLBaseViewport#onPointerLeave - Implement me!")}onMouseLeave(g){}onKeyDown(g){}onKeyUp(g){}}class QU{constructor(g,I,C,F,U){this.screenPos=g,this.pointerRay=I,this.intersectionPos=C,this.geomData=F,this.geomItem=U.geomItem,this.dist=U.dist}}class dU extends eU{constructor(g,I,C,F){super(g),this.debugHighlightedGeomsBuffer=!1,this.__x=0,this.__y=0,this.region=[0,0,0,0],this.__cameraXfo=new o,this.__cameraMat=new V,this.__viewMat=new V,this.__geomDataBufferInvalid=!0,this.__screenPos=null,this.__name=I,this.__projectionMatrix=new V,this.__frustumDim=new Q,this.__bl=new Q(0,0),this.__tr=new Q(1,1),this.__prevDownTime=0,this.__geomDataBufferSizeFactor=1,this.debugGeomShader=!1;const U=this.__renderer.gl;this.__geomDataBuffer=new dF(U,{type:g.floatGeomBuffer?"FLOAT":"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:C<=1?1:Math.floor(C/this.__geomDataBufferSizeFactor),height:F<=1?1:Math.floor(F/this.__geomDataBufferSizeFactor)}),this.__geomDataBufferFbo=new RF(U,this.__geomDataBuffer,!0),this.__geomDataBufferFbo.setClearColor(new A(0,0,0,0)),this.__camera=new wC("DefaultCamera"),this.setCamera(this.__camera),this.setManipulator(new tF({renderer:g})),this.resize(C,F)}getBl(){return this.__bl}setBl(g){this.__bl.x=g,this.__bl.y=g,this.resize(this.__canvasWidth,this.__canvasHeight)}getTr(){return this.__tr}setTr(g){this.__tr.x=g,this.__tr.y=g,this.resize(this.__canvasWidth,this.__canvasHeight)}getPosX(){return this.__x}getPosY(){return this.__y}resize(g,I){if(this.__canvasWidth==g&&this.__canvasHeight==I)return;this.__canvasWidth=g,this.__canvasHeight=I,this.__x=g*this.__bl.x,this.__y=g*this.__bl.y,this.__width=g*this.__tr.x-g*this.__bl.x,this.__height=I*this.__tr.y-I*this.__bl.y,this.region=[this.__x,this.__y,this.__width,this.__height],this.resizeRenderTargets(this.__width,this.__height),this.__camera&&this.__updateProjectionMatrix();const C=new N(this.__width,this.__height);this.emit("resized",C)}resizeRenderTargets(g,I){super.resizeRenderTargets(g,I),this.__geomDataBufferFbo&&(this.__geomDataBuffer.resize(Math.floor(this.__width/this.__geomDataBufferSizeFactor),Math.floor(this.__height/this.__geomDataBufferSizeFactor)),this.renderGeomDataFbo())}getCamera(){return this.__camera}setCamera(g){this.__camera=g,this.depthRange=[this.__camera.getNear(),this.__camera.getFar()];const I=g.globalXfoParam,C=()=>{this.__cameraXfo=I.value,this.__cameraMat=this.__cameraXfo.toMat4(),this.__viewMat=this.__cameraMat.inverse()};C(),I.on("valueChanged",(()=>{C(),this.invalidateGeomDataBuffer(),this.emit("updated");const g=new _("CameraAndPointer",this.__cameraXfo);this.emit("viewChanged",g)})),this.__camera.on("projectionParamChanged",(()=>{this.__updateProjectionMatrix(),this.depthRange=[this.__camera.getNear(),this.__camera.getFar()],this.emit("updated")})),this.__updateProjectionMatrix()}__updateProjectionMatrix(){const g=this.__width/this.__height;this.__camera.updateProjectionMatrix(this.__projectionMatrix,g);const I=Math.tan(this.__camera.getFov()/2)*this.__camera.getNear()*2,C=I*g;this.__frustumDim.set(C,I)}getProjectionMatrix(){return this.__projectionMatrix}getViewMatrix(){return this.__viewMat}frameView(g){this.__width>0&&this.__height>0?this.__camera.frameView(this,g):this.once("resized",(()=>this.frameView()))}calcRayFromScreenPos(g){const I=this.__canvasHeight*(1-this.__tr.y);let C=(g.x-this.__x)/this.__width,F=(g.y-I)/this.__height;C=2*C-1,F=2*F-1;const U=this.__cameraMat,l=this.__projectionMatrix.inverse();if(null==l)return console.warn(`Unable to generate Ray from screen pos:${g.toString()} in region ${this.region}`),new Z;let t,e;if(this.__camera.isOrthographic()){const g=l.transformVec3(new d(C,-F,-1));g.z=0,t=U.transformVec3(g),e=new d(0,0,-1)}else t=U.translation,e=l.transformVec3(new d(C,-F,-1));return e=U.rotateVec3(e).normalize(),new Z(t,e)}renderGeomDataFbo(){if(this.__geomDataBufferFbo){const g={};this.__initRenderState(g),g.geomDataFbo=this.__geomDataBufferFbo,this.__geomDataBufferFbo.bindAndClear(g),this.__renderer.drawSceneGeomData(g),this.__geomDataBufferInvalid=!1,this.__geomDataBufferFbo.unbind()}}invalidateGeomDataBuffer(){this.__geomDataBufferInvalid=!0}getGeomDataAtPos(g,I){if(this.__geomDataBufferFbo){if(this.__geomDataBufferInvalid&&(this.renderGeomDataFbo(),this.__screenPos=null),g===this.__screenPos)return this.__intersectionData;this.__screenPos=g,this.__intersectionData=null;const C=this.__renderer.gl;C.finish(),this.__geomDataBufferFbo.bindForReading();const F=this.__geomDataBufferFbo.width,U=this.__geomDataBufferFbo.height,l=Math.floor(g.x*(F/this.__width)),t=Math.floor(g.y*(U/this.__height));let e,Q;if(this.__renderer.floatGeomBuffer){if(Q=new Float32Array(4),C.readPixels(l,U-t-1,1,1,C.RGBA,C.FLOAT,Q),0==Q[3])return null;e=63&Math.round(Q[0])}else{if(Q=new Uint8Array(4),C.readPixels(l,U-t-1,1,1,C.RGBA,C.UNSIGNED_BYTE,Q),C.bindFramebuffer(C.FRAMEBUFFER,null),0==Q[0]&&0==Q[1])return;e=Math.floor(Q[1]/32)}this.__geomDataBufferFbo.unbind();const d=this.__renderer.getPass(e);if(!d)return console.warn("Geom data buffer returns invalid pass id:",e),null;const n=d.getGeomItemAndDist(Q);if(n){if(!n.geomItem.isSelectable())return null;I||(I=this.calcRayFromScreenPos(g));const C=I.start.add(I.dir.scale(n.dist));this.__intersectionData=new QU(g,I,C,Q,n)}return this.__intersectionData}return null}getGeomItemsInRect(g,I){var C;if(this.__geomDataBufferFbo){const F=this.__renderer.gl;F.finish();const U=this.__geomDataBufferFbo.width,l=this.__geomDataBufferFbo.height,t=U/this.__width,e=l/this.__height,Q=Math.round(g.x*t),d=Math.round(g.y*e),n=Math.round(I.x*t),i=Math.round(I.y*e),A=Math.round(l-i),B=Math.round(Q),a=Math.round(n-Q),V=Math.round(i-d),R=a*V;let s;this.__geomDataBufferFbo.bindForReading(),this.__renderer.floatGeomBuffer?(s=new Float32Array(4*R),F.readPixels(B,A,a,V,F.RGBA,F.FLOAT,s)):(s=new Uint8Array(4*R),F.readPixels(B,A,a,V,F.RGBA,F.UNSIGNED_BYTE,s)),F.bindFramebuffer(F.FRAMEBUFFER,null);const Z=new Set;for(let g=0;g<R;g++){let I;const F=s.subarray(4*g,4*(g+1));if(this.__renderer.floatGeomBuffer){if(0==F[3])continue;I=Math.round(F[0])}else{if(0==F[0]&&0==F[1])continue;I=Math.floor(F[1]/64)}const U=null===(C=this.__renderer.getPass(I))||void 0===C?void 0:C.getGeomItemAndDist(F);if(U){if(!U.geomItem.isSelectable())continue;Z.add(U.geomItem)}}return Z}return new Set}__getPointerPos(g,I){return new Q(g-this.getPosX(),I-this.getPosY())}prepareUIEvent(g){g.viewport=this}onPointerDown(g){if(this.prepareUIEvent(g),g.pointerType===P.mouse){const I=g;I.pointerPos=this.__getPointerPos(I.rendererX,I.rendererY),I.pointerRay=this.calcRayFromScreenPos(I.pointerPos),I.intersectionData=this.getGeomDataAtPos(I.pointerPos,I.pointerRay)}else if(g.pointerType===P.touch){const I=g;if(1==I.touches.length){const g=I.touches[0];I.pointerPos=this.__getPointerPos(g.rendererX,g.rendererY),I.pointerRay=this.calcRayFromScreenPos(I.pointerPos),I.intersectionData=this.getGeomDataAtPos(I.pointerPos,I.pointerRay)}}const I=Date.now();if(I-this.__prevDownTime<this.doubleClickTimeParam.value){if(this.manipulator&&(this.manipulator.onPointerDoublePress(g),!g.propagating))return;if(this.emit("pointerDoublePressed",g),!g.propagating)return}else this.__prevDownTime=I;g.getCapture()&&(g.getCapture().onPointerDown(g),!g.propagating)||(null==g.intersectionData||(g.intersectionData.geomItem.onPointerDown(g),g.propagating))&&(this.emit("pointerDown",g),g.propagating&&(!this.manipulator||(this.manipulator.onPointerDown(g),g.propagating)))}onPointerUp(g){if(this.prepareUIEvent(g),g.pointerType===P.mouse){const I=g;I.pointerPos=this.__getPointerPos(I.rendererX,I.rendererY),I.pointerRay=this.calcRayFromScreenPos(I.pointerPos),I.intersectionData=this.getGeomDataAtPos(I.pointerPos,I.pointerRay)}else if(g.pointerType===P.touch){const I=g;if(0==I.touches.length&&1==I.changedTouches.length){const g=I.changedTouches[0];I.pointerPos=this.__getPointerPos(g.rendererX,g.rendererY),I.pointerRay=this.calcRayFromScreenPos(I.pointerPos),I.intersectionData=this.getGeomDataAtPos(I.pointerPos,I.pointerRay)}}g.getCapture()&&(g.getCapture().onPointerUp(g),!g.propagating)||(null==g.intersectionData||(g.intersectionData.geomItem.onPointerUp(g),g.propagating))&&(this.emit("pointerUp",g),g.propagating&&(!this.manipulator||(this.manipulator.onPointerUp(g),g.propagating)))}onPointerMove(g){if(this.prepareUIEvent(g),g.pointerType===P.mouse){const I=g,C=this.__getPointerPos(I.rendererX,I.rendererY);I.pointerPos=C,I.pointerRay=this.calcRayFromScreenPos(C)}else if(g.pointerType===P.touch){const I=g;for(let g=0;g<I.touches.length;g++){const C=I.touches[g];C.touchPos=this.__getPointerPos(C.rendererX,C.rendererY),C.touchRay=this.calcRayFromScreenPos(C.touchPos)}I.pointerPos=I.touches[0].touchPos,I.pointerRay=I.touches[0].touchRay}if(!g.getCapture()||(g.getCapture().onPointerMove(g),g.propagating)){if(g.intersectionData=this.getGeomDataAtPos(g.pointerPos,g.pointerRay),g.intersectionData){if(g.intersectionData.geomItem!=this.pointerOverItem){if(this.pointerOverItem&&(g.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(g),g.propagating&&this.emit("pointerLeaveGeom",g)),g.propagating=!0,this.pointerOverItem=g.intersectionData.geomItem,this.pointerOverItem.onPointerEnter(g),!g.propagating)return;this.emit("pointerOverGeom",g)}if(g.propagating=!0,g.intersectionData.geomItem.onPointerMove(g),!g.propagating)return}else if(this.pointerOverItem){if(g.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(g),this.pointerOverItem=null,!g.propagating)return;this.emit("pointerLeaveGeom",g)}this.emit("pointerMove",g),g.propagating&&(!this.manipulator||(this.manipulator.onPointerMove(g),g.propagating))}}onPointerEnter(g){this.prepareUIEvent(g),this.emit("pointerEnter",g),g.propagating&&(!this.manipulator||!this.manipulator.onPointerEnter||(this.manipulator.onPointerEnter(g),g.propagating))}onPointerLeave(g){this.prepareUIEvent(g),this.emit("pointerLeave",g),g.propagating&&(!this.manipulator||!this.manipulator.onPointerLeave||(this.manipulator.onPointerLeave(g),g.propagating))}onKeyDown(g){this.manipulator&&(this.manipulator.onKeyDown(g),!g.propagating)||this.emit("keyDown",g)}onKeyUp(g){this.manipulator&&(this.manipulator.onKeyUp(g),!g.propagating)||this.emit("keyUp",g)}onWheel(g){this.prepareUIEvent(g),g.pointerPos=this.__getPointerPos(g.rendererX,g.rendererY),g.pointerRay=this.calcRayFromScreenPos(g.pointerPos),g.intersectionData=this.getGeomDataAtPos(g.pointerPos,g.pointerRay),(null==g.intersectionData||(g.intersectionData.geomItem.onWheel(g),g.propagating))&&(this.manipulator?this.manipulator.onWheel(g):this.emit("mouseWheel",g))}onTouchCancel(g){this.prepareUIEvent(g),g.getCapture()&&(g.getCapture().onTouchCancel(g),!g.propagating)||this.manipulator&&(this.manipulator.onTouchCancel(g),!g.propagating)||this.emit("touchCancel",g)}__initRenderState(g){g.viewXfo=this.__cameraXfo,g.viewScale=1,g.region=this.region,g.cameraMatrix=this.__cameraMat,g.viewport=this,g.viewports=[{region:this.region,viewMatrix:this.__viewMat,projectionMatrix:this.__projectionMatrix,viewportFrustumSize:this.__frustumDim,isOrthographic:this.__camera.isOrthographic(),fovY:this.__camera.getFov()}]}draw(){const g={};if(this.__initRenderState(g),super.draw(g),this.debugGeomShader){this.renderGeomDataFbo();const g={},I=this.__renderer.screenQuad;I.bindShader(g),I.draw(g,this.__geomDataBuffer,new Q(0,0),new Q(1,1))}if(this.debugHighlightedGeomsBuffer){const g={},I=this.__renderer.screenQuad;I.bindShader(g),I.draw(g,this.highlightedGeomsBuffer,new Q(0,0),new Q(1,1))}}}class nU{constructor(g,I){this.__xrvp=g,this.__treeItem=new FI("XRHead"),I.addChild(this.__treeItem),this.__mat4=new V,this.__localXfo=new o}setVisible(g){if(g&&!this.hmdGeomItem){const g=this.__xrvp.getAsset();if(!g)return;const I=g.getChildByName("HMD");if(!I)return;this.hmdGeomItem=I.clone({assetItem:g}),this.hmdGeomItem&&(this.hmdGeomItem.localXfoParam.value=new o(new d(0,-.035,-.03),new R(0,1,0,Math.PI),new d(.001,.001,.001)),this.__treeItem.addChild(this.hmdGeomItem,!1))}this.hmdGeomItem&&(this.hmdGeomItem.visibleParam.value=g)}update(g){this.__mat4.setDataArray(g.transform.matrix),this.__localXfo.setFromMat4(this.__mat4),this.__treeItem.localXfoParam.value=this.__localXfo}getTreeItem(){return this.__treeItem}getXfo(){return this.__localXfo}}class iU{constructor(g,I,F){if(this.raycastTick=5,this.raycastArea=.04,this.raycastDist=.04,this.pointerRay=new Z,this.raycastAreaCache=0,this.raycastDistCache=0,this.rayCastRenderTargetProjMatrix=new V,this.capturedItem=null,this.xrvp=g,this.inputSource=I,this.id=F,this.buttonPressed=!1,this.mat4=new V,this.xfo=new o,this.treeItem=new FI("XRController:"+I.handedness+F),!C.isMobileDevice){this.tipItem=new FI("Tip");const C=new o;if(C.tr.set(0,-.05,-.13),this.tipItem.localXfoParam.value=C,this.treeItem.addChild(this.tipItem,!1),g.getTreeItem().addChild(this.treeItem),"tracked-pointer"==I.targetRayMode){switch(I.profiles[0]){case"htc-vive":localStorage.setItem("ZeaEngine_XRDevice","Vive");break;case"oculus-touch":case"oculus-touch-v2":case"oculus-touch-v3":localStorage.setItem("ZeaEngine_XRDevice","Oculus")}g.loadHMDResources().then((g=>{if(!g)return;const C=new o;let F;if(C.ori.setFromAxisAndAngle(new d(0,1,0),Math.PI),C.sc.set(.001,.001,.001),"htc-vive"==I.profiles[0])F=g.getChildByName("Controller"),C.tr.set(0,-.035,-.085);else switch(I.handedness){case"left":F=g.getChildByName("LeftController"),C.tr.set(0,-.035,-.085),C.sc.scaleInPlace(.85);break;case"right":F=g.getChildByName("RightController"),C.tr.set(0,-.035,-.085),C.sc.scaleInPlace(.85);break;case"none":case"left-right":case"left-right-none":F=g.getChildByName("Controller")}if(F){const I=F.clone({assetItem:g});I.localXfoParam.value=C,this.treeItem.addChild(I,!1)}}))}}this.tick=0}getHandedness(){return this.inputSource.handedness}getId(){return this.id}getTreeItem(){return this.treeItem}getTipItem(){return this.tipItem}getTipXfo(){return this.tipItem.globalXfoParam.value}getTouchPadValue(){return this.touchpadValue}isButtonPressed(){return this.buttonPressed}getControllerStageLocalXfo(){return this.xfo}getControllerTipStageLocalXfo(){return this.xfo.multiply(this.tipItem.localXfoParam.value)}updatePose(g,I,C){const F=I.getPose(C.gripSpace,g);if(F&&F.transform){if(this.mat4.setDataArray(F.transform.matrix),this.xfo.setFromMat4(this.mat4),this.treeItem.localXfoParam.value=this.xfo,this.hitTested=!1,this.raycastTick>0&&this.tick%this.raycastTick==0){const g=this.getGeomItemAtTip();if(null!=g){const I=new gg(this.xrvp,this,this.buttonPressed?1:0);I.intersectionData=g,I.pointerRay=this.pointerRay,g.geomItem!=this.pointerOverItem&&(this.pointerOverItem&&(I.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(I),I.propagating&&this.xrvp.emit("pointerLeaveGeom",I)),I.propagating=!0,this.pointerOverItem=g.geomItem,this.pointerOverItem.onPointerEnter(I),I.propagating&&this.xrvp.emit("pointerOverGeom",I)),g.geomItem.onPointerMove(I)}else if(this.pointerOverItem){const g=new gg(this.xrvp,this,this.buttonPressed?1:0);g.pointerRay=this.pointerRay,g.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(g),this.pointerOverItem=null}}this.tick++}}getGeomItemAtTip(){if(this.hitTested)return this.intersectionData;this.hitTested=!0;const g=this.xrvp.getRenderer(),I=this.tipItem.globalXfoParam.value;this.pointerRay.start=I.tr,this.pointerRay.dir=I.ori.getZaxis().negate();const C=this.raycastDist/this.xrvp.stageScale,F=this.raycastArea/this.xrvp.stageScale;return C==this.raycastDistCache&&F==this.raycastAreaCache||(this.rayCastRenderTargetProjMatrix.setOrthographicMatrix(-.5*F,.5*F,-.5*F,.5*F,0,C),this.raycastDistCache=C,this.raycastAreaCache=F),this.intersectionData=g.raycastWithProjection(I,this.rayCastRenderTargetProjMatrix,this.pointerRay),this.intersectionData&&(this.intersectionData.dist*=this.xrvp.stageScale),this.intersectionData}}class AU extends CF{constructor(g){super(),this.listenerIDs={},this.__controllerTriggersHeld=[],this.xrvp=g,this.vrControllerToolTip=new KI(.015),this.vrControllerToolTipMat=new AI("Cross","FlatSurfaceShader"),this.vrControllerToolTipMat.getParameter("BaseColor").value=new A("#03E3AC"),this.listenerIDs={}}addIconToController(g){const I=new SC("HandleToolTip",this.vrControllerToolTip,this.vrControllerToolTipMat);I.setSelectable(!1),g.getTipItem().removeAllChildren(),g.getTipItem().addChild(I,!1)}activateTool(){super.activateTool();for(const g of this.xrvp.getControllers())this.addIconToController(g);this.listenerIDs.controllerAdded=this.xrvp.on("controllerAdded",(g=>{this.addIconToController(g.controller)}))}deactivateTool(){super.deactivateTool();for(const g of this.xrvp.getControllers())g.getTipItem().removeAllChildren();this.xrvp.removeListenerById("controllerAdded",this.listenerIDs.controllerAdded)}__initMoveStage(){if(1==this.__controllerTriggersHeld.length)this.__grabPos=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr.clone(),this.stageXfo__GrabStart=this.xrvp.getXfo().clone(),this.__invOri=this.stageXfo__GrabStart.ori.inverse();else if(2==this.__controllerTriggersHeld.length){const g=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr,I=this.__controllerTriggersHeld[1].getControllerTipStageLocalXfo().tr;this.__grabDir=I.subtract(g),this.__grabPos=g.lerp(I,.5),this.__grabDir.y=0,this.__grabDist=this.__grabDir.length(),this.__grabDir.scaleInPlace(1/this.__grabDist),this.stageXfo__GrabStart=this.xrvp.getXfo().clone(),this.__grab_to_stage=this.__grabPos.subtract(this.stageXfo__GrabStart.tr)}}onVRControllerButtonDown(g){if(1!=g.button)return;-1==this.__controllerTriggersHeld.indexOf(g.controller)&&(this.__controllerTriggersHeld.push(g.controller),this.__initMoveStage(),g.stopPropagation())}onVRControllerButtonUp(g){if(1!=g.button)return;const I=this.__controllerTriggersHeld.indexOf(g.controller);-1!=I&&(this.__controllerTriggersHeld.splice(I,1),this.__initMoveStage(),g.stopPropagation())}onVRControllerDoubleClicked(g){console.log("onVRControllerDoubleClicked:",this.__controllerTriggersHeld.length);const I=this.xrvp.getXfo().clone();I.sc.set(1,1,1),this.xrvp.setXfo(I)}onVRPoseChanged(g){if(1==this.__controllerTriggersHeld.length){const g=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr,I=new o;I.tr=this.__grabPos.subtract(g);const C=this.stageXfo__GrabStart.multiply(I);this.xrvp.setXfo(C)}else if(2==this.__controllerTriggersHeld.length){const g=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr,I=this.__controllerTriggersHeld[1].getControllerTipStageLocalXfo().tr,C=g.lerp(I,.5),F=I.subtract(g);F.y=0;const U=F.length();if(U<1e-4)return;F.scaleInPlace(1/U);const l=new o,t=Math.max(Math.min(this.__grabDist/U,10),.1);l.sc.set(t,t,t);let e=this.__grabDir.angleTo(F);this.__grabDir.cross(F).y>0&&(e=-e),l.ori.rotateY(e);const Q=l.ori.rotateVec3(this.__grabPos);l.tr.addInPlace(this.__grabPos.subtract(Q));const d=this.__grabPos.scale(1-t);l.tr.addInPlace(l.ori.rotateVec3(d));const n=this.__grabPos.subtract(C).scale(t);l.tr.addInPlace(l.ori.rotateVec3(n));const i=this.stageXfo__GrabStart.multiply(l);this.xrvp.setXfo(i)}}onPointerDown(g){g.pointerType===P.xr&&this.onVRControllerButtonDown(g)}onPointerMove(g){g.pointerType===P.xr&&this.onVRPoseChanged(g)}onPointerUp(g){g.pointerType===P.xr&&this.onVRControllerButtonUp(g)}onPointerDoublePress(g){g.pointerType===P.xr&&this.onVRControllerDoubleClicked(g)}}class BU extends eU{constructor(g){super(g),this.__stageXfo=new o,this.__stageMatrix=new V,this.session=null,this.__hmd="",this.__region=[],this.__projectionMatrices=[],this.__viewMatrices=[],this.__cameraMatrices=[],this.doubleClickTimeParam.value=300,this.__projectionMatricesUpdated=!1,this.__stageTreeItem=new FI("VRStage"),this.__stageTreeItem.setVisible(!1),this.__renderer.addTreeItem(this.__stageTreeItem),this.__xrhead=new nU(this,this.__stageTreeItem),this.controllersMap={},this.controllers=[],this.controllerPointerDownTime=[],this.spectatorMode=!1,this.tick=0;const I=new o;I.ori.setFromAxisAndAngle(new d(1,0,0),.5*Math.PI),this.setXfo(I),this.__leftViewMatrix=new V,this.__leftProjectionMatrix=new V,this.__rightViewMatrix=new V,this.__rightProjectionMatrix=new V,this.setManipulator(new AU(this))}getRenderer(){return this.renderer}getAsset(){return this.__vrAsset}getTreeItem(){return this.__stageTreeItem}getVRHead(){return this.__xrhead}getXfo(){return this.__stageXfo}setXfo(g){this.__stageXfo=g,this.__stageTreeItem.globalXfoParam.value=g,this.__stageMatrix=g.inverse().toMat4(),this.stageScale=g.sc.x}getControllers(){return this.controllers}isPresenting(){return null!=this.session}setSpectatorMode(g){if(!g){const g=this.__renderer.gl;g.bindFramebuffer(g.FRAMEBUFFER,null),g.viewport(0,0,g.drawingBufferWidth,g.drawingBufferHeight);let I=this.backgroundColorParam.value.asArray();g.clearColor(I[0],I[1],I[2],I[3]),g.colorMask(!0,!0,!0,!0),g.clear(g.COLOR_BUFFER_BIT|g.DEPTH_BUFFER_BIT)}this.spectatorMode=g}__startSession(){const g=(I,C)=>{this.session&&(this.session.requestAnimationFrame(g),this.drawXRFrame(C))};this.session.requestAnimationFrame(g)}loadHMDResources(){if(C.isMobileDevice)return Promise.resolve(null);let g=localStorage.getItem("ZeaEngine_XRDevice");if(g||(g="Vive",localStorage.setItem("ZeaEngine_XRDevice",g)),this.__hmd!=g)this.__hmdAssetPromise=void 0;else if(this.__hmdAssetPromise)return this.__hmdAssetPromise;return this.__hmd=g,this.__hmdAssetPromise=new Promise(((I,C)=>{{let C;switch(g){case"Vive":default:C="ZeaEngine/Vive.vla";break;case"Oculus":C="ZeaEngine/Oculus.vla"}if(!mg.commonResources[C]){const g=new gF(C);g.load(mg.systemUrls[C]),mg.commonResources[C]=g}this.__vrAsset=mg.getCommonResource(C);const F=()=>{const g=this.__vrAsset.getMaterialLibrary(),C=g.getMaterialNames();for(const I of C){const C=g.getMaterial(I,!1);C&&C.setShaderName("SimpleSurfaceShader")}this.__vrAsset.traverse((g=>{g.setSelectable(!1)})),I(this.__vrAsset)};this.__vrAsset.isLoaded()?F():this.__vrAsset.once("loaded",F)}})),this.__hmdAssetPromise}startPresenting(){return new Promise(((g,I)=>{this.spectatorMode||this.setSpectatorMode(!1);(()=>{var F;null===(F=navigator)||void 0===F||F.xr.requestSession("immersive-vr",{requiredFeatures:["local-floor"],optionalFeatures:["bounded-floor"]}).then((F=>{const U=this.__renderer.getViewport();if(U){const g=U.getCamera().globalXfoParam.value,I=new o;I.tr=g.tr.clone(),I.tr.z-=1.3;const C=g.ori.getZaxis();C.z=0,C.normalizeInPlace(),I.ori.setFromDirectionAndUpvector(C,new d(0,0,1)),this.setXfo(I)}F.addEventListener("end",(g=>{this.__stageTreeItem.setVisible(!1),this.session=null,this.emit("presentingChanged",new w(!1))}));const l=g=>{console.log("creating controller:",g.handedness,g.profiles);const I=this.controllers.length,C=new iU(this,g,I);this.controllersMap[g.handedness]=C,this.controllers[I]=C;const F=new X(C);return this.emit("controllerAdded",F),C};F.addEventListener("selectstart",(g=>{const I=this.controllersMap[g.inputSource.handedness];I&&(I.buttonPressed=!0,this.onPointerDown(new gg(this,I,1)))})),F.addEventListener("selectend",(g=>{const I=this.controllersMap[g.inputSource.handedness];I&&(I.buttonPressed=!1,this.onPointerUp(new gg(this,I,1)))})),F.addEventListener("inputsourceschange",(g=>{for(const I of g.added)0!=I.profiles.length&&l(I)})),this.session=F;const t=new XRWebGLLayer(F,this.__gl);F.updateRenderState({baseLayer:t}),this.__width=t.framebufferWidth,this.__height=t.framebufferHeight,this.__region=[0,0,this.__width,this.__height],this.resizeRenderTargets(this.__width,this.__height);const e=I=>{this.__refSpace=I,this.__stageTreeItem.setVisible(!0),this.emit("presentingChanged",new w(!0)),this.loadHMDResources().then((()=>{this.__startSession(),g()}))};F.requestReferenceSpace(C.isMobileDevice?"local":"bounded-floor").catch((g=>{console.log("Falling back to local-floor reference space"),F.requestReferenceSpace("local-floor").then(e)})).then((g=>{e(g)})).catch((g=>{console.warn(g.message),I(new Error("Unable to start XR Session:"+g.message))}))})).catch((g=>{console.warn(g.message)}))})()}))}stopPresenting(){this.session&&this.session.end()}togglePresenting(){this.session?this.stopPresenting():this.startPresenting()}updateControllers(g){const I=this.session.inputSources;for(let C=0;C<I.length;C++){const F=I[C];if(0==F.profiles.length)return;this.controllers[C]?this.controllers[C].updatePose(this.__refSpace,g,F):console.warn("Missing controller")}}drawXRFrame(g){const I=g.session,F=I.renderState.baseLayer,U=g.getViewerPose(this.__refSpace);if(!U)return;this.__xrhead.update(U);const l=this.__xrhead.getTreeItem().globalXfoParam.value,t=U.views;if(!this.__projectionMatricesUpdated){this.__projectionMatrices=[],this.__viewMatrices=[],this.__cameraMatrices=[];for(let g=0;g<t.length;g++){const I=t[g],C=new V;C.setDataArray(I.projectionMatrix),this.__projectionMatrices[g]=C,this.__viewMatrices[g]=new V,this.__cameraMatrices[g]=new V}this.__projectionMatricesUpdated=!0}const e=this.__renderer.gl;e.bindFramebuffer(e.FRAMEBUFFER,F.framebuffer);let Q=this.backgroundColorParam.value.asArray();e.clearColor(Q[0],Q[1],Q[2],Q[3]),e.colorMask(!0,!0,!0,!0),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),this.depthRange=[I.renderState.depthNear,I.renderState.depthFar];const d={};d.boundRendertarget=F.framebuffer,d.region=this.__region,d.viewport=this,d.vrviewport=this,d.viewports=[];for(let g=0;g<t.length;g++){const I=t[g];this.__viewMatrices[g].setDataArray(I.transform.inverse.matrix),this.__viewMatrices[g].multiplyInPlace(this.__stageMatrix);const C=F.getViewport(I);d.viewports.push({viewMatrix:this.__viewMatrices[g],projectionMatrix:this.__projectionMatrices[g],region:[C.x,C.y,C.width,C.height],isOrthographic:!1})}d.viewXfo=l,d.viewScale=1/this.stageScale,d.cameraMatrix=d.viewXfo.toMat4(),d.region=this.__region,d.vrPresenting=!0,this.draw(d);const n=new Ig(this,l,this.controllers);this.updateControllers(g),n.getCapture()&&n.getCapture().onPointerMove(n),this.manipulator&&n.propagating&&this.manipulator.onPointerMove(n);const i=new j(d.viewXfo);if(i.hmd=this.__hmd,i.controllers=this.controllers,i.viewport=this,i.vrviewport=this,this.emit("viewChanged",i),this.spectatorMode&&!C.isMobileDevice&&this.tick%5==0){const g=this.__renderer.getViewport();g&&(this.__xrhead.setVisible(!0),g.draw(),this.__xrhead.setVisible(!1))}this.tick++}onPointerDown(g){g.intersectionData=g.controller.getGeomItemAtTip(),g.pointerRay=g.controller.pointerRay;const I=Date.now();if(I-this.controllerPointerDownTime[g.controller.id]<this.doubleClickTimeParam.value){if(this.emit("pointerDoublePressed",g),!g.propagating)return;if(this.manipulator&&(this.manipulator.onPointerDoublePress(g),!g.propagating))return}this.controllerPointerDownTime[g.controller.id]=I,g.getCapture()&&(g.getCapture().onPointerDown(g),!g.propagating)||(null==g.intersectionData||(g.intersectionData.geomItem.onPointerDown(g),g.propagating))&&(this.emit("pointerDown",g),g.propagating&&this.manipulator&&this.manipulator.onPointerDown(g))}onPointerUp(g){this.controllerPointerDownTime[g.controller.id]=0,g.pointerRay=g.controller.pointerRay,g.getCapture()&&(g.getCapture().onPointerUp(g),!g.propagating)||(g.intersectionData=g.controller.getGeomItemAtTip(),(null==g.intersectionData||(g.intersectionData.geomItem.onPointerUp(g),g.propagating))&&(this.emit("pointerUp",g),g.propagating&&(!this.manipulator||(this.manipulator.onPointerUp(g),g.propagating))))}}class aU extends J{constructor(g){super(),this.dirty=!1,this.unif=g}bind(g){}unbind(g){}destroy(){}}class VU extends aU{constructor(g,I,C,F,U){super(F),this.gltexture=null,this.textureType=-1;const l=C.getName();switch(this.param=C,this.unif=F,this.textureUnif=U[l+"Tex"],this.textureTypeUnif=U[l+"TexType"],this.uniform1i=g.uniform1i.bind(g),this.unif.type){case"Boolean":case"SInt32":this.uniformXX=g.uniform1i.bind(g);break;case"UInt32":"webgl2"==g.name?this.uniformXX=g.uniform1ui.bind(g):this.uniformXX=g.uniform1i.bind(g);break;case"Float32":this.uniformXX=g.uniform1f.bind(g)}this.bind=this.bindValue;const t=C=>{let F=C.getMetadata("gltexture");F||(F="FLOAT"===C.type?new WF(g,C):new dF(g,C)),this.texBinding=F.preBind(this.textureUnif,U),F.on("updated",(()=>{I.emit("updated")})),this.gltexture=F,this.gltexture.addRef(this),this.textureType=1,this.bind=this.bindTexture,I.emit("updated")};let e,Q;if(this.update=()=>{try{e||("boolean"==typeof C.value?this.val=C.value?1:0:this.val=C.value)}catch(g){}I.emit("updated")},C instanceof nI){const g=g=>{g.isLoaded()?t(g):Q=g.on("loaded",(()=>{t(e)})),e=g},F=()=>{e.getMetadata("gltexture").removeRef(this),this.texBinding=null,this.gltexture=null,this.textureType=-1,this.bind=this.bindValue,Q&&e.removeListenerById("loaded",Q),e=null,Q=null,I.emit("updated")};C.getImage()&&g(C.getImage()),C.on("textureConnected",(()=>{g(C.getImage())})),C.on("textureDisconnected",(()=>{F()}))}this.dirty=!0,C.on("valueChanged",(()=>{this.dirty=!0,I.emit("updated")}))}bindValue(g){this.dirty&&(this.update(),this.dirty=!1),this.unif&&this.uniformXX(this.unif.location,this.val),this.textureTypeUnif&&this.uniform1i(this.textureTypeUnif.location,0)}bindTexture(g){this.dirty&&(this.update(),this.dirty=!1),this.gltexture.bindToUniform(g,this.textureUnif,this.texBinding)}}class RU extends aU{constructor(g,I,C,F){switch(super(F),this.param=C,this.unif.type){case"Vec2":this.uniformXX=g.uniform2fv.bind(g);break;case"Vec3":this.uniformXX=g.uniform3fv.bind(g);break;case"Vec4":this.uniformXX=g.uniform4fv.bind(g)}this.dirty=!0,C.on("valueChanged",(()=>{this.dirty=!0,I.emit("updated")}))}bind(g){this.dirty&&(this.values=this.param.value.asArray(),this.dirty=!1),this.uniformXX(this.unif.location,this.values)}unbind(){}destroy(){}}class sU extends aU{constructor(g,I,C,F){switch(super(F),this.values=new Float32Array(0),this.param=C,this.unif.type){case"Mat3":this.uniformMatrixXXX=g.uniformMatrix3fv.bind(g);break;case"Mat4":this.uniformMatrixXXX=g.uniformMatrix4fv.bind(g)}this.dirty=!0,C.on("valueChanged",(()=>{this.dirty=!0,I.emit("updated")}))}bind(g){this.dirty&&(this.values=this.param.value.asArray(),this.dirty=!1),this.uniformMatrixXXX(this.unif.location,!1,this.values)}unbind(){}destroy(){}}class ZU extends aU{constructor(g,I,C,F,U){super(F);const l=C.getName();this.param=C,this.textureUnif=U[l+"Tex"],this.textureTypeUnif=U[l+"TexType"],this.values=Float32Array.from([0,0,0,0]),this.bind=this.bindValue;const t=C=>{e=C;let F=C.getMetadata("gltexture");F||(F="FLOAT"===C.type?new WF(g,C):new dF(g,C)),this.texBinding=F.preBind(this.textureUnif,U),F.on("updated",(()=>{I.emit("updated")})),this.gltexture=F,this.gltexture.addRef(this),this.textureType=1,this.bind=this.bindTexture,I.emit("updated")};let e,Q;const d=g=>{g.isLoaded()?t(g):Q=g.once("loaded",(()=>{t(g)}))},n=()=>{this.gltexture.removeRef(this),this.gltexture=null,this.texBinding=null,this.textureType=null,Q&&e.removeListenerById("loaded",Q),this.bind=this.bindValue,e=null,Q=null,I.emit("updated")};this.update=()=>{try{e||this.unif&&(this.values=C.value.asArray())}catch(g){}I.emit("updated")},C instanceof iI&&(C.getImage()&&d(C.getImage()),C.on("textureConnected",(()=>{d(C.getImage())})),C.on("textureDisconnected",(()=>{n()}))),this.dirty=!0,C.on("valueChanged",(()=>{this.dirty=!0})),this.uniform1i=g.uniform1i.bind(g),this.uniform4fv=g.uniform4fv.bind(g)}bindValue(g){this.unif&&(this.dirty&&(this.update(),this.dirty=!1),this.unif&&this.uniform4fv(this.unif.location,this.values),this.textureTypeUnif&&this.uniform1i(this.textureTypeUnif.location,0))}bindTexture(g){this.dirty&&(this.update(),this.dirty=!1),this.gltexture.bindToUniform(g,this.textureUnif,this.texBinding)}}const oU={};class hU{constructor(g,I,C,F){this.uniformBindings=[];const U=U=>{const l=U.getName(),t=C[l];if(null!=t)switch(t.type){case"Boolean":case"UInt32":case"SInt32":case"Float32":this.uniformBindings.push(new VU(g,I,U,t,C));break;case"Vec2":case"Vec3":case"Vec4":this.uniformBindings.push(new RU(g,I,U,t));break;case"Color":this.uniformBindings.push(new ZU(g,I,U,t,C));break;case"Mat4":this.uniformBindings.push(new sU(g,I,U,t));break;default:return void console.warn("Param :"+l+" has unhandled data type:"+t.type)}else{if(C[l+"Tex"])return void this.uniformBindings.push(new ZU(g,I,U,t,C));if(F){const g=I.getMaterial().getShaderName();oU[g]||(oU[g]={}),oU[g][l]||(console.warn("Material:"+I.getMaterial().getName(),"with Shader ",g,"Param has no unif",l),oU[g][l]=!0)}}},l=I.getMaterial().getParameters();for(const g of l)U(g)}bind(g){for(const I of this.uniformBindings)I.bind(g);return!0}unbind(g){for(const I of this.uniformBindings)I.unbind(g)}destroy(){for(const g of this.uniformBindings)g.destroy()}}class cU extends b{constructor(g,I,C){super(),this.__gl=g,this.__material=I,this.__glshader=C,this.__shaderBindings={},I.on("parameterValueChanged",(()=>this.emit("updated")))}getMaterial(){return this.__material}getGLShader(){return this.__glshader}bind(g,I){this.__boundTexturesBeforeMaterial=g.boundTextures;let C=this.__shaderBindings[g.shaderkey];if(!C){const F=this.__gl;C=new hU(F,this,g.unifs,I),this.__shaderBindings[g.shaderkey]=C}return C.bind(g)}unbind(g){g.boundTextures=this.__boundTexturesBeforeMaterial}}class rU extends b{constructor(g){super(),this.materials=[],this.materialIndices={},this.glMaterials={},this.refCounts=[],this.freeIndices=[],this.materialsAllocator=new y,this.renderer=g,this.materials=[],this.refCounts=[],this.materialIndices={},this.glMaterials={},this.freeIndices=[],this.dirtyIndices=new Set,this.materialsAllocator=new y,this.materialsAllocator.on("dataReallocated",(g=>{const I=g.id;this.dirtyIndices.add(I)}))}addMaterial(g){let I=this.materialIndices[g.getId()];if(null!=I)return this.refCounts[I]++,I;I=this.freeIndices.length?this.freeIndices.pop():this.materials.length,this.materials[I]=g,this.refCounts[I]=1,this.materialIndices[g.getId()]=I;const C=g.getShaderClass().getPackedMaterialData(g);this.materialsAllocator.allocate(I,C.length/4);return g.on("parameterValueChanged",(()=>{this.dirtyIndices.add(I),this.emit("updated")})),this.dirtyIndices.add(I),I}getGLMaterial(g){if(this.glMaterials[g.getId()])return this.glMaterials[g.getId()];const I=this.renderer.getOrCreateShader(g.getShaderName()),C=this.renderer.gl,F=new cU(C,g,I);return F.on("updated",(()=>{this.renderer.requestRedraw()})),g.setMetadata("glMaterial",F),this.glMaterials[g.getId()]=F,F}getMaterialAllocation(g){const I=this.materialIndices[g.getId()];if(null!=I)return this.materialsAllocator.getAllocation(I)}removeMaterial(g){const I=this.materialIndices[g.getId()];this.refCounts[I]--,this.refCounts[I]>0||(this.freeIndices.push(I),this.materialsAllocator.deallocate(I),this.materials[I]=null,delete this.materialIndices[g.getId()],this.dirtyIndices.has(I)&&this.dirtyIndices.delete(I))}uploadMaterials(g){const I=this.renderer.__gl,C=s.nextPow2(Math.ceil(Math.sqrt(this.materialsAllocator.reservedSpace))),F=g.boundTextures++;if(I.activeTexture(I.TEXTURE0+F),this.materialsTexture){if(this.materialsTexture.width<C){this.materialsTexture.resize(C,C);for(let g=0;g<this.materials.length;g++)this.materialsAllocator.getAllocation(g)&&this.dirtyIndices.add(g)}}else this.materialsTexture=new dF(this.renderer.__gl,{format:"RGBA",type:"FLOAT",width:C,height:C,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.materialsTexture.clear();const U=this.materialsTexture,l=this.materialsTexture.width;I.bindTexture(I.TEXTURE_2D,U.glTex),this.dirtyIndices.forEach((g=>{const C=this.materialsAllocator.getAllocation(g),F=this.materials[g],t=F.getShaderClass().getPackedMaterialData(F),e=C.start%l,Q=Math.ceil((e+C.size)/l);let d=0,n=C.size,i=e;for(let g=0;g<Q;g++){let g;i+n>l?(g=l-i,i=0):g=n;const F=(C.start+d)%l,e=Math.floor((C.start+d)/l),Q=t.subarray(4*d,4*(d+g));I.texSubImage2D(I.TEXTURE_2D,0,F,e,g,1,U.__format,U.__type,Q),d+=g,n-=g}})),this.dirtyIndices=new Set,I.bindTexture(I.TEXTURE_2D,null),g.boundTextures--}update(g){this.dirtyItemIndices.length>0&&this.uploadMaterials(g),g.drawItemsTexture=this.glGeomItemsTexture}bind(g){if(this.dirtyIndices.size>0&&this.uploadMaterials(g),!this.materialsTexture)return!1;const{materialsTexture:I,materialsTextureSize:C}=g.unifs;if(I&&(this.materialsTexture.bindToUniform(g,I),C)){this.renderer.gl.uniform2i(C.location,this.materialsTexture.width,this.materialsTexture.height)}return!0}}class mU extends UU{constructor(g,I){super(g,I),this.__numVertices=9,this.__vboState=-1,this.genBuffers()}genBuffers(g){super.genBuffers(g);const I=this.__gl,C=this.__geom.genBuffers();for(const g in C.attrBuffers){const F=C.attrBuffers[g],U=I.createBuffer();I.bindBuffer(I.ARRAY_BUFFER,U),I.bufferData(I.ARRAY_BUFFER,F.values,I.STATIC_DRAW),this.__glattrbuffers[g]={buffer:U,dataType:F.dataType,normalized:F.normalized}}this.__numVertices=C.numVertices,this.__vboState=2}updateBuffers(g){const I=this.__gl,C=this.__geom.genBuffers(),F=C.numVertices!=this.__numVertices;for(const g in C.attrBuffers){const U=C.attrBuffers[g],l=this.__glattrbuffers[g];F&&(I.deleteBuffer(l.buffer),l.buffer=I.createBuffer()),I.bindBuffer(I.ARRAY_BUFFER,l.buffer),I.bufferData(I.ARRAY_BUFFER,U.values,I.STATIC_DRAW)}this.__numVertices=C.numVertices}bind(g){if(g.unifs.PointSize){const I=this.__gl;let C=this.__shaderBindings[g.shaderkey];if(!C){I.__quadVertexIdsBuffer||I.setupInstancedQuad();const F=Object.assign(this.__glattrbuffers,I.__quadattrbuffers);C=mF(this.__gl,g.attrs,F,I.__quadIndexBuffer),this.__shaderBindings[g.shaderkey]=C}return C.bind(g),!0}return super.bind(g)}draw(g){const I=this.__gl;g.unifs.PointSize?I.drawElementsInstanced(I.TRIANGLES,6,I.UNSIGNED_SHORT,0,this.__numVertices):I.drawArrays(I.POINTS,0,this.__numVertices)}drawInstanced(g,I){this.__gl.drawArraysInstanced(this.__gl.POINTS,0,this.__numVertices,I)}}class WU extends UU{constructor(g,I){super(g,I),this.__numSegIndices=0,this.__numVertices=0,this.__fatBuffersNeedUpload=!1,this.fatBuffers=null,this.__buffersNeedUpload=!1,this.__indexDataType=0,this.__numSegIndices=0,this.__numVertices=0,this.__fatBuffersNeedUpload=!0}dirtyBuffers(g){super.dirtyBuffers(g),this.__fatBuffersNeedUpload=!0,this.emit("updated")}clearBuffers(){const g=this.__gl;if(g.deleteBuffer(this.__indexBuffer),this.__indexBuffer=null,this.fatBuffers&&this.fatBuffers.positionsTexture){this.fatBuffers.positionsTexture&&(this.fatBuffers.positionsTexture.destroy(),this.fatBuffers.positionsTexture=null);const I=this.fatBuffers.glattrbuffers.segmentIndices;I.buffer&&(g.deleteBuffer(I.buffer),this.fatBuffers.glattrbuffers.segmentIndices=null)}super.clearBuffers()}genFatBuffers(g){const I=this.__gl,C=this.__geom.genBuffers(),F=C.indices,U=C.numVertices!=this.__numVertices;I.__quadVertexIdsBuffer||I.setupInstancedQuad(),this.fatBuffers||(this.fatBuffers={drawCount:0,positionsTexture:null,glattrbuffers:{}},this.fatBuffers.glattrbuffers.vertexIDs=I.__quadattrbuffers.vertexIDs);const l=g.boundTextures++;I.activeTexture(this.__gl.TEXTURE0+l),this.fatBuffers.drawCount=F.length/2;const t=this.__geom.getVertexAttributes(),e=t.positions,Q=t.lineThickness,n=new Float32Array(4*e.getCount());for(let g=0;g<e.getCount();g++){new d(new Float32Array(n.buffer,4*g*4,3)).setFromOther(e.getValueRef(g)),n[4*g+3]=Q?Q.getFloat32Value(g):1}U&&this.fatBuffers.positionsTexture&&(this.fatBuffers.positionsTexture.destroy(),this.fatBuffers.positionsTexture=null),this.fatBuffers.positionsTexture?this.fatBuffers.positionsTexture.bufferData(n,e.getCount(),1):this.fatBuffers.positionsTexture=new dF(this.__gl,{format:"RGBA",type:"FLOAT",width:e.getCount(),height:1,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",data:n,mipMapped:!1});const i=()=>{const g=new Float32Array(F.length);for(let I=0;I<F.length;I++){let C;C=I%2==0?I>0?F[I]==F[I-1]:F[I]==F[F.length-1]:I<F.length-1?F[I]==F[I+1]:F[I]==F[0],g[I]=(C?1:0)+2*F[I]}return g};if(this.fatBuffers.glattrbuffers.segmentIndices)(!this.genBufferOpts||this.genBufferOpts&&this.genBufferOpts.topologyChanged)&&(I.bindBuffer(I.ARRAY_BUFFER,this.fatBuffers.glattrbuffers.segmentIndices.buffer),I.bufferData(I.ARRAY_BUFFER,i(),I.STATIC_DRAW));else{const g=I.createBuffer();I.bindBuffer(I.ARRAY_BUFFER,g),I.bufferData(I.ARRAY_BUFFER,i(),I.STATIC_DRAW),this.fatBuffers.glattrbuffers.segmentIndices={buffer:g,dimension:2,dataType:"Vec2"}}this.__numSegIndices=F.length,this.__numVertices=C.numVertices,I.bindTexture(I.TEXTURE_2D,null),g.boundTextures--,this.__fatBuffersNeedUpload=!1}genBuffers(g){const I=this.__gl,C=this.__geom.genBuffers(),F=C.indices,U=C.numVertices!=this.__numVertices;this.__indexBuffer?(!this.genBufferOpts||this.genBufferOpts&&this.genBufferOpts.topologyChanged)&&(this.__numSegIndices!=F.length&&(I.deleteBuffer(this.__indexBuffer),this.__indexBuffer=I.createBuffer()),I.bindBuffer(I.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),I.bufferData(I.ELEMENT_ARRAY_BUFFER,F,I.STATIC_DRAW),this.__numSegIndices=F.length):(this.__indexBuffer=I.createBuffer(),I.bindBuffer(I.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),I.bufferData(I.ELEMENT_ARRAY_BUFFER,F,I.STATIC_DRAW));for(const g in C.attrBuffers){const F=C.attrBuffers[g];if(this.__glattrbuffers[g]){const C=this.__glattrbuffers[g];U&&(I.deleteBuffer(C.buffer),C.buffer=I.createBuffer()),I.bindBuffer(I.ARRAY_BUFFER,C.buffer),I.bufferData(I.ARRAY_BUFFER,F.values,I.STATIC_DRAW)}else{const C=I.createBuffer();I.bindBuffer(I.ARRAY_BUFFER,C),I.bufferData(I.ARRAY_BUFFER,F.values,I.STATIC_DRAW),this.__glattrbuffers[g]={buffer:C,dataType:F.dataType,normalized:F.normalized}}}this.__numSegIndices=F.length,this.__numVertices=C.numVertices,this.__buffersNeedUpload=!1,F instanceof Uint8Array&&(this.__indexDataType=this.__gl.UNSIGNED_BYTE),F instanceof Uint16Array&&(this.__indexDataType=this.__gl.UNSIGNED_SHORT),F instanceof Uint32Array&&(this.__indexDataType=this.__gl.UNSIGNED_INT)}bind(g){const I=this.__gl,C=g.unifs;if(C.LineThickness&&I.floatTexturesSupported){this.__fatBuffersNeedUpload&&this.genFatBuffers(g);const F=this.fatBuffers;let U=this.__shaderBindings[g.shaderkey];return U||(U=mF(this.__gl,g.attrs,F.glattrbuffers,I.__quadIndexBuffer),this.__shaderBindings[g.shaderkey]=U),U.bind(g),C.positionsTexture&&(F.positionsTexture.bindToUniform(g,C.positionsTexture),I.uniform1i(C.positionsTextureSize.location,F.positionsTexture.width)),!0}return super.bind(g)}drawPoints(){this.__gl.drawArrays(this.__gl.POINTS,0,this.__geom.numVertices())}draw(g){const I=this.__gl;g.unifs.LineThickness&&I.floatTexturesSupported?I.drawElementsInstanced(I.TRIANGLES,6,I.UNSIGNED_SHORT,0,this.fatBuffers.drawCount):I.drawElements(this.__gl.LINES,this.__numSegIndices,this.__indexDataType,0)}drawInstanced(g,I){const C=this.__gl,{occluded:F}=g.unifs;F&&C.uniform1i(F.location,0),C.drawElementsInstanced(this.__gl.LINES,this.__numSegIndices,this.__indexDataType,0,I),F&&(C.uniform1i(F.location,1),C.depthFunc(C.GREATER),C.drawElementsInstanced(this.__gl.LINES,this.__numSegIndices,this.__indexDataType,0,I),C.depthFunc(C.LEQUAL))}}const JU={GEOMITEM_FLAG_CUTAWAY:1,GEOMITEM_INVISIBLE_IN_GEOMDATA:2};class GU extends b{constructor(g,I,C,F,U,l=!1){if(super(),this.listenerIDs={},this.GLShaderGeomSets=null,this.cutDataChanged=!1,this.cutData=[],this.geomMatrixDirty=!1,this.gl=g,this.geomItem=I,this.drawItemId=C,this.geomId=F,this.materialId=U,this.supportInstancing=l,this.geomVisible=this.geomItem.isVisible(),this.visible=this.geomVisible,this.culled=!1,this.listenerIDs.visibilityChanged=this.geomItem.on("visibilityChanged",(g=>{this.updateVisibility()})),!this.supportInstancing){this.cutDataChanged=!1,this.cutData=[0,0,0,0];const g=0;let C=0;this.geomItem.isCutawayEnabled()&&(C|=JU.GEOMITEM_FLAG_CUTAWAY),0==I.isSelectable()&&(C|=JU.GEOMITEM_INVISIBLE_IN_GEOMDATA),this.geomData=[C,g,0,0],this.geomMatrixDirty=!0,this.listenerIDs["GeomMat.valueChanged"]=this.geomItem.geomMatParam.on("valueChanged",(()=>{this.geomMatrixDirty=!0,this.emit("updated")})),this.listenerIDs.cutAwayChanged=this.geomItem.on("cutAwayChanged",(()=>{this.cutDataChanged=!0,this.emit("updated")}))}}getGeomItem(){return this.geomItem}isVisible(){return this.visible}getDrawItemId(){return this.drawItemId}updateVisibility(){this.geomVisible=this.geomItem.isVisible();const g=this.geomVisible&&!this.culled;if(this.visible!=g){this.visible=g;const I=new O(g);this.emit("visibilityChanged",I),this.emit("updated")}}setCulled(g){this.culled=g;const I=this.geomVisible&&!this.culled;if(this.visible!=I){this.visible=I;const g=new O(I);this.emit("visibilityChanged",g)}}bind(g){const I=this.gl,C=g.unifs;if(!this.supportInstancing){const g=C.modelMatrix;g&&(this.geomMatrixDirty&&(this.modelMatrixArray=this.geomItem.geomMatParam.value.asArray()),I.uniformMatrix4fv(g.location,!1,this.modelMatrixArray));const F=C.drawItemData;F&&I.uniform4fv(F.location,this.geomData);const U=C.cutawayData;if(U){if(this.cutDataChanged&&this.geomItem.isCutawayEnabled()){const g=this.geomItem.getCutVector(),I=this.geomItem.getCutDist();this.cutData=[g.x,g.y,g.z,I]}I.uniform4fv(U.location,this.cutData)}}const F=C.drawItemId;return F&&I.uniform1i(F.location,this.drawItemId),!0}destroy(){this.geomItem.removeListenerById("visibilityChanged",this.listenerIDs.visibilityChanged),this.supportInstancing||(this.geomItem.geomMatParam.removeListenerById("valueChanged",this.listenerIDs["GeomMat.valueChanged"]),this.geomItem.removeListenerById("cutAwayChanged",this.listenerIDs.cutAwayChanged))}}class bU extends b{constructor(g,I){super(),this.drawIdsArray=null,this.drawIdsBuffer=null,this.highlightedIdsArray=null,this.highlightedIdsBuffer=null,this.gl=g,this.glGeom=I,this.id=I?I.getGeom().getId():this.getId(),this.glGeomItems=[],this.glgeomItems_freeIndices=[],this.glgeomItemEventHandlers=[],this.drawIdsArray=null,this.drawIdsBuffer=null,this.drawIdsBufferDirty=!0,this.highlightedIdsArray=null,this.highlightedIdsBuffer=null,this.highlightedIdsBufferDirty=!0,this.visibleItems=[],this.highlightedItems=[]}getGLGeom(){return this.glGeom}getDrawCount(){return this.visibleItems.length}addGLGeomItem(g){let I;if(this.glgeomItems_freeIndices.length>0?I=this.glgeomItems_freeIndices.pop():(I=this.glGeomItems.length,this.glGeomItems.push(null)),g.geomItem.isVisible()){this.visibleItems.push(I);const g=new p(1,this.visibleItems.length);this.emit("drawCountChanged",g)}g.geomItem.isHighlighted()&&(this.highlightedItems.push(I),this.highlightedIdsBufferDirty=!0);const C={};C.highlightChanged=C=>{if(g.geomItem.isHighlighted()){if(this.highlightedItems.includes(I))return;this.highlightedItems.push(I);const g=new p(1,this.highlightedItems.length);this.emit("highlightedCountChanged",g)}else{this.highlightedItems.splice(this.highlightedItems.indexOf(I),1);const g=new p(-1,this.highlightedItems.length);this.emit("highlightedCountChanged",g)}this.highlightedIdsBufferDirty=!0},g.geomItem.on("highlightChanged",C.highlightChanged),C.visibilityChanged=g=>{if(g.visible){this.visibleItems.push(I);const g=new p(1,this.visibleItems.length);this.emit("drawCountChanged",g)}else{this.visibleItems.splice(this.visibleItems.indexOf(I),1);const g=new p(-1,this.visibleItems.length);this.emit("drawCountChanged",g)}this.drawIdsBufferDirty=!0},g.geomItem.on("visibilityChanged",C.visibilityChanged),this.glGeomItems[I]=g,this.glgeomItemEventHandlers[I]=C,this.drawIdsBufferDirty=!0,g.GLGeomItemSet=this}removeGLGeomItem(g){const I=this.glGeomItems.indexOf(g),C=this.glgeomItemEventHandlers[I];if(g.geomItem.off("highlightChanged",C.highlightChanged),g.geomItem.off("visibilityChanged",C.visibilityChanged),this.glGeomItems[I]=null,this.glgeomItemEventHandlers[I]=null,g.GLGeomItemSet=null,this.glgeomItems_freeIndices.push(I),g.geomItem.isVisible()){this.visibleItems.splice(this.visibleItems.indexOf(I),1);const g=new p(-1,this.visibleItems.length);this.emit("drawCountChanged",g)}if(g.geomItem.isHighlighted()){this.highlightedItems.splice(this.highlightedItems.indexOf(I),1);const g=new p(-1,this.highlightedItems.length);this.emit("highlightedCountChanged",g)}this.drawIdsBufferDirty=!0,this.glGeomItems.length==this.glgeomItems_freeIndices.length&&this.destroy()}updateDrawIDsBuffer(){const g=this.gl;g.floatTexturesSupported?(this.drawIdsBuffer&&this.glGeomItems.length!=this.drawIdsArray.length&&(this.gl.deleteBuffer(this.drawIdsBuffer),this.drawIdsBuffer=null),this.drawIdsBuffer||(this.drawIdsBuffer=g.createBuffer(),g.bindBuffer(g.ARRAY_BUFFER,this.drawIdsBuffer)),g.bindBuffer(g.ARRAY_BUFFER,this.drawIdsBuffer),g.bufferData(g.ARRAY_BUFFER,this.getDrawIdsArray(),g.STATIC_DRAW),this.drawIdsBufferDirty=!1):this.drawIdsBufferDirty=!1}getDrawIdsArray(){return this.drawIdsBufferDirty&&(this.drawIdsArray&&this.glGeomItems.length==this.drawIdsArray.length||(this.drawIdsArray=new Float32Array(this.glGeomItems.length)),this.visibleItems.forEach(((g,I)=>{this.drawIdsArray[I]=this.glGeomItems[g].getDrawItemId()})),this.drawIdsBufferDirty=!1),this.drawIdsArray}updateHighlightedIDsBuffer(){const g=this.gl;g.floatTexturesSupported?(this.highlightedIdsBuffer&&this.glGeomItems.length>this.highlightedIdsArray.length&&(this.gl.deleteBuffer(this.highlightedIdsBuffer),this.highlightedIdsBuffer=null),this.highlightedIdsBuffer||(this.highlightedIdsBuffer=g.createBuffer()),g.bindBuffer(g.ARRAY_BUFFER,this.highlightedIdsBuffer),g.bufferData(g.ARRAY_BUFFER,this.getHighlightedIdsArray(),g.STATIC_DRAW),this.highlightedIdsBufferDirty=!1):this.highlightedIdsBufferDirty=!1}getHighlightedIdsArray(){return this.highlightedIdsBufferDirty&&((!this.highlightedIdsArray||this.highlightedItems.length>this.highlightedIdsArray.length)&&(this.highlightedIdsArray=new Float32Array(this.glGeomItems.length)),this.highlightedItems.forEach(((g,I)=>{this.highlightedIdsArray[I]=this.glGeomItems[g].getDrawItemId()})),this.highlightedIdsBufferDirty=!1),this.highlightedIdsArray}draw(g){0!=this.visibleItems.length&&(this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(),this.__bindAndRender(g,this.visibleItems,this.drawIdsBuffer))}drawHighlighted(g){0!=this.highlightedItems.length&&(this.highlightedIdsBufferDirty&&this.updateHighlightedIDsBuffer(),this.__bindAndRender(g,this.highlightedItems,this.highlightedIdsBuffer))}__bindAndRender(g,I,C){const F=this.gl,U=g.unifs;if(g.glGeom!=this.glGeom&&(this.glGeom.bind(g),g.glGeom=this.glGeom),F.floatTexturesSupported&&F.drawElementsInstanced&&g.supportsInstancing){g.unifs.instancedDraw&&F.uniform1i(g.unifs.instancedDraw.location,1);const l=g.attrs.instancedIds.location;F.enableVertexAttribArray(l),F.bindBuffer(F.ARRAY_BUFFER,C),F.vertexAttribPointer(l,1,F.FLOAT,!1,4,0),F.vertexAttribDivisor(l,1),g.bindViewports(U,(()=>{this.glGeom.drawInstanced(g,I.length)}))}else g.unifs.instancedDraw&&F.uniform1i(g.unifs.instancedDraw.location,0),I.forEach((I=>{this.glGeomItems[I].bind(g),g.bindViewports(U,(()=>{this.glGeom.draw(g)}))}))}destroy(){this.drawIdsBuffer&&(this.gl.deleteBuffer(this.drawIdsBuffer),this.drawIdsBuffer=null),this.highlightedIdsBuffer&&(this.gl.deleteBuffer(this.highlightedIdsBuffer),this.highlightedIdsBuffer=null),this.emit("destructing")}}class NU extends b{constructor(g,I){super(),this.glGeomItemSets={},this.pass=g,this.__gl=g.renderer.gl,this.glMaterial=I,this.glGeomItemSets={},this.drawCount=0;const C=I.getMaterial(),F=g=>{C.off("transparencyChanged",F);for(const g in this.glGeomItemSets){const I=this.glGeomItemSets[g];for(const g of I.glGeomItems){const I=g.geomItem;this.pass.removeGeomItem(I),this.pass.renderer.assignTreeItemToGLPass(I)}}};C.on("transparencyChanged",F)}getGLMaterial(){return this.glMaterial}addGLGeomItem(g,I){const C=I.getGeom().getId();let F=this.glGeomItemSets[C];F||(F=new bU(this.__gl,I),this.addGeomItemSet(F)),F.addGLGeomItem(g)}drawCountChanged(g){this.drawCount+=g.change,this.emit("updated")}__materialChanged(){const g=this.glMaterial.getMaterial();if(!this.pass.checkMaterial(g))for(const g in this.glGeomItemSets){const I=this.glGeomItemSets[g];for(const g of I.glGeomItems){const I=g.geomItem;this.pass.removeGeomItem(I),this.pass.renderer.assignTreeItemToGLPass(I)}}}addGeomItemSet(g){const I=g.getGLGeom().getGeom().getId();this.glGeomItemSets[I]=g;const C=g.on("drawCountChanged",(g=>{this.drawCountChanged(g)}));g.once("destructing",(()=>{g.removeListenerById("drawCountChanged",C),delete this.glGeomItemSets[I],0==Object.keys(this.glGeomItemSets).length&&this.emit("destructing")}))}draw(g){if(0==this.drawCount)return;this.glMaterial.bind(g,!0);for(const I in this.glGeomItemSets){this.glGeomItemSets[I].draw(g)}this.glMaterial.unbind(g)}drawHighlighted(g){this.glMaterial.bind(g,!1);for(const I in this.glGeomItemSets){this.glGeomItemSets[I].drawHighlighted(g)}this.glMaterial.unbind(g)}drawGeomData(g){this.glMaterial.bind(g,!1);for(const I in this.glGeomItemSets){this.glGeomItemSets[I].draw(g)}this.glMaterial.unbind(g)}}class SU extends b{constructor(g,I,C){super(),this.gl=g,this.pass=I,this.glShader=C.glShader,this.glgeomdatashader=C.glgeomdatashader,this.glselectedshader=C.glselectedshader,this.glMaterialGeomItemSets=[]}findMaterialGeomItemSets(g){for(const I of this.glMaterialGeomItemSets)if(I.glMaterial==g)return I}addGLGeomItem(g,I,C){let F=this.findMaterialGeomItemSets(C);F||(F=new NU(this.pass,C),this.addMaterialGeomItemSets(F)),F.addGLGeomItem(g,I)}addMaterialGeomItemSets(g){this.glMaterialGeomItemSets.push(g);const I=()=>{this.emit("updated")},C=()=>{g.off("updated",I),g.off("destructing",C);const F=this.glMaterialGeomItemSets.indexOf(g);this.glMaterialGeomItemSets.splice(F,1),0==this.glMaterialGeomItemSets.length&&this.emit("destructing")};g.on("updated",I),g.on("destructing",C)}removeMaterialGeomItemSets(g){const I=this.glMaterialGeomItemSets.indexOf(g);this.glMaterialGeomItemSets.splice(I,1)}getMaterialGeomItemSets(){return this.glMaterialGeomItemSets}draw(g){const I=this.glShader;if(this.glShader.bind(g)){this.pass.renderer.glGeomItemLibrary.bind(g);for(const I of this.glMaterialGeomItemSets)I.draw(g);I.unbind(g)}}drawHighlightedGeoms(g){if(this.glselectedshader&&this.glselectedshader.bind(g,"highlight")){this.pass.renderer.glGeomItemLibrary.bind(g);for(const I of this.glMaterialGeomItemSets)I.drawHighlighted(g)}}drawGeomData(g){if(!this.glgeomdatashader||!this.glgeomdatashader.bind(g,"geomData"))return;this.pass.renderer.glGeomItemLibrary.bind(g);const I=this.gl,{floatGeomBuffer:C,passId:F}=g.unifs;C&&I.uniform1i(C.location,g.floatGeomBuffer?1:0),F&&I.uniform1i(F.location,g.passIndex);for(const I of this.glMaterialGeomItemSets)I.drawGeomData(g)}}const uU=(g,I)=>{const C=new Int32Array(I);return C.set(g),C};class yU extends b{constructor(g){super(),this.indexBuffer=null,this.__destroyed=!1,this.renderer=g,this.__gl=g.gl,this.shaderAttrSpec={},this.freeGeomIndices=[],this.geoms=[],this.geomRefCounts=[],this.geomsDict={},this.glGeomsDict={},this.geomBuffersTmp=[],this.glattrbuffers={},this.shaderBindings={},this.bufferNeedsRealloc=!1,this.attributesAllocator=new y,this.dirtyGeomIndices=new Set,this.attributesAllocator.on("resized",(()=>{this.bufferNeedsRealloc=!0})),this.attributesAllocator.on("dataReallocated",(g=>{const I=g.id,C=g.allocation;this.dirtyGeomIndices.add(I),this.geomVertexOffsets[I]=C.start,this.geomVertexCounts[I]=C.size})),this.geomVertexCounts=new Int32Array(1),this.geomVertexOffsets=new Int32Array(1),this.indicesCounts=new Int32Array(1),this.indicesOffsets=new Int32Array(1),this.freeGeomIndices.push(0),this.numIndices=0,this.indicesAllocator=new y,this.indicesAllocator.on("resized",(()=>{this.bufferNeedsRealloc=!0})),this.indicesAllocator.on("dataReallocated",(g=>{const I=g.id;this.dirtyGeomIndices.add(I)}))}constructGLGeom(g){let I=this.glGeomsDict[g.getId()];if(null!=I)return I;const C=this.__gl;if(g instanceof mI||g instanceof bI)I=new lU(C,g);else if(g instanceof rI||g instanceof GI)I=new WU(C,g);else{if(!(g instanceof cI||g instanceof JI))throw new Error("Unsupported geom type:"+g.constructor.name);I=new mU(C,g)}return this.glGeomsDict[g.getId()]=I,I.on("updated",(()=>{this.renderer.requestRedraw()})),I.addRef(this),I}addGeom(g){let I=this.geomsDict[g.getId()];if(null!=I)return this.geomRefCounts[I]++,I;if(0==this.freeGeomIndices.length){const g=this.geomVertexCounts.length,I=2*g;this.geomVertexCounts=uU(this.geomVertexCounts,I),this.geomVertexOffsets=uU(this.geomVertexOffsets,I),this.indicesCounts=uU(this.indicesCounts,I),this.indicesOffsets=uU(this.indicesOffsets,I);for(let C=I-1;C>=g;C--)this.freeGeomIndices.push(C)}I=this.freeGeomIndices.pop(),this.geoms[I]=g,this.geomRefCounts[I]=1,this.geomsDict[g.getId()]=I,this.dirtyGeomIndices.add(I),this.geomVertexCounts[I]=0,this.geomVertexOffsets[I]=0,this.indicesCounts[I]=0,this.indicesOffsets[I]=0;return g.on("geomDataChanged",(()=>{this.dirtyGeomIndices.add(I),this.emit("updated")})),g.on("geomDataTopologyChanged",(()=>{this.dirtyGeomIndices.add(I),this.emit("updated")})),I}removeGeom(g){const I=this.geomsDict[g.getId()];this.geomRefCounts[I]--,this.geomRefCounts[I]>0||(this.attributesAllocator.getAllocation(I)&&this.attributesAllocator.deallocate(I),this.indicesAllocator.getAllocation(I)&&this.indicesAllocator.deallocate(I),this.dirtyGeomIndices.has(I)&&this.dirtyGeomIndices.delete(I),this.geomVertexCounts[I]=0,this.geomVertexOffsets[I]=0,this.geoms[I]=null,this.freeGeomIndices.push(I),delete this.geomsDict[g.getId()],delete this.geomBuffersTmp[I],this.indicesCounts[I]=0,this.indicesOffsets[I]=0)}getGeom(g){return this.geoms[g]}getGeomOffsetAndCount(g){return[this.indicesOffsets[g],this.indicesCounts[g]]}allocateBuffers(g){const I=this.geoms[g];if(!I)return;const C=I.genBuffers(),F=C.numRenderVerts?C.numRenderVerts:C.numVertices;if(this.geomVertexCounts[g]!=F)if(0==F)this.attributesAllocator.deallocate(g),this.geomVertexOffsets[g]=0,this.geomVertexCounts[g]=0;else{const I=this.attributesAllocator.allocate(g,F);this.geomVertexOffsets[g]=I.start,this.geomVertexCounts[g]=I.size}for(const g in C.attrBuffers)if(!this.shaderAttrSpec[g]){const I=C.attrBuffers[g],F=oF(this.__gl,I.dataType);this.shaderAttrSpec[g]={dataType:I.dataType,normalized:I.normalized,dimension:F.dimension,elementSize:F.elementSize}}if(C.indices){const I=C.indices.length;if(this.indicesCounts[g]!=I)if(0==I)this.indicesAllocator.deallocate(g),this.indicesOffsets[g]=0,this.indicesCounts[g]=0;else{const C=this.indicesAllocator.allocate(g,I),F=4;this.indicesOffsets[g]=C.start*F,this.indicesCounts[g]=C.size}}else this.indicesOffsets[g]=this.geomVertexOffsets[g],this.indicesCounts[g]=this.geomVertexCounts[g];this.geomBuffersTmp[g]=C}genBuffers(){const g=this.attributesAllocator.reservedSpace,I=this.__gl;for(const C in this.shaderAttrSpec){const F=this.shaderAttrSpec[C],U=g*F.dimension;F.numValues=U,this.glattrbuffers[C]&&this.glattrbuffers[C].buffer&&I.deleteBuffer(this.glattrbuffers[C].buffer);const l=I.createBuffer();I.bindBuffer(I.ARRAY_BUFFER,l);const t=U*F.elementSize;I.bufferData(I.ARRAY_BUFFER,t,I.STATIC_DRAW),this.glattrbuffers[C]={buffer:l,dataType:F.dataType,normalized:F.normalized,length:U,dimension:F.dimension},"textureCoords"==C&&(this.glattrbuffers.texCoords=this.glattrbuffers.textureCoords)}const C=this.indicesAllocator.reservedSpace;if(this.numIndices!=C){const g=this.__gl;this.indexBuffer&&g.deleteBuffer(this.indexBuffer),this.indexBuffer=g.createBuffer(),g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,this.indexBuffer);const I=this.indicesAllocator.reservedSpace,C=I*4;g.bufferData(g.ELEMENT_ARRAY_BUFFER,C,g.STATIC_DRAW),this.numIndices=I}}uploadBuffers(g){const I=this.__gl;let C=this.geomBuffersTmp[g];if(!C){const I=this.geoms[g];if(!I)return;C=I.genBuffers(),this.geomBuffersTmp[g]=C}const F=this.geomVertexCounts[g],U=C.numRenderVerts?C.numRenderVerts:C.numVertices;if(F!=U)throw new Error("Invalid allocation for this geom");if(0==U){const I=new Y(g);return void this.emit("geomDataChanged",I)}for(const F in C.attrBuffers){const U=this.shaderAttrSpec[F],l=C.attrBuffers[F],t=this.glattrbuffers[F];if(!l||!t)continue;I.bindBuffer(I.ARRAY_BUFFER,t.buffer);const e=U.elementSize,Q=this.geomVertexOffsets[g]*e*U.dimension;I.bufferSubData(I.ARRAY_BUFFER,Q,l.values)}if(I.bindBuffer(I.ARRAY_BUFFER,null),C.indices&&C.indices.length>0){const I=C.indices,F=this.indicesAllocator.getAllocation(g);if(F.size!=I.length)throw new Error("Invalid allocation for this geom");const U=this.attributesAllocator.getAllocation(g),l=new Uint32Array(F.size);for(let g=0;g<I.length;g++)l[g]=C.indices[g]+U.start;const t=this.__gl;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer);const e=4,Q=F.start*e;t.bufferSubData(t.ELEMENT_ARRAY_BUFFER,Q,l),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)}let l=new Y(g);this.emit("geomDataChanged",l)}cleanGeomBuffers(){if(new Set(this.dirtyGeomIndices).forEach((g=>{this.allocateBuffers(g)})),this.bufferNeedsRealloc){for(const g in this.shaderBindings){this.shaderBindings[g].destroy()}this.shaderBindings={};for(let g=0;g<this.geoms.length;g++)this.geoms[g]&&this.dirtyGeomIndices.add(g);this.genBuffers(),this.bufferNeedsRealloc=!1}this.dirtyGeomIndices.forEach((g=>{this.uploadBuffers(g)})),this.dirtyGeomIndices=new Set,this.geomBuffersTmp=[]}bind(g){this.dirtyGeomIndices.size>0&&this.cleanGeomBuffers();let I=this.shaderBindings[g.shaderkey];if(I)I.bind(g);else{I=mF(this.__gl,g.attrs,this.glattrbuffers,this.indexBuffer),this.shaderBindings[g.shaderkey]=I}return!0}unbind(g){const I=this.shaderBindings[g.shaderkey];I&&I.unbind(g)}clearBuffers(){const g=this.__gl;for(const I in this.glattrbuffers){const C=this.glattrbuffers[I];C.shared||g.deleteBuffer(C.buffer)}this.glattrbuffers={},this.indexBuffer&&(g.deleteBuffer(this.indexBuffer),this.indexBuffer=null);for(const g in this.shaderBindings){this.shaderBindings[g].destroy()}this.shaderBindings={}}destroy(){this.clearBuffers(),this.__destroyed=!0,this.emit("destructing")}}var XU=og("",null,!1);class pU extends b{constructor(g,I){super(),this.dirtyWorkerItemIndices=new Set,this.glGeomItemsTexture=null,this.renderer=g,this.glGeomItems=[],this.glGeomItemEventHandlers=[],this.glGeomItemsMap={},this.glGeomItemsIndexFreeList=[],this.dirtyItemIndices=[],this.dirtyWorkerItemIndices=new Set,this.removedItemIndices=[],this.enableFrustumCulling=I.enableFrustumCulling,this.enableFrustumCulling&&this.setupCullingWorker(g)}setupCullingWorker(g){this.worker=new XU;let I=!0;this.worker.onmessage=g=>{"CullResults"==g.data.type?this.applyCullResults(g.data):"Done"==g.data.type&&this.renderer.emit("CullingUpdated"),I=!0};const C=()=>{const I=g.getViewport(),C=g.getViewport().getCamera(),F=I.getWidth()/I.getHeight();if(C.isOrthographic()){const I=C.getFrustumHeight(),U=I*F;this.worker.postMessage({type:"ViewportChanged",frustumHeight:I,frustumWidth:U,isOrthographic:!0,solidAngleLimit:g.solidAngleLimit})}else{const I=.5*C.getFov(),U=Math.atan(Math.tan(I)*F);this.worker.postMessage({type:"ViewportChanged",frustumHalfAngleX:U,frustumHalfAngleY:I,isOrthographic:!1,solidAngleLimit:g.solidAngleLimit})}};g.on("resized",C);const F=g.getViewport().getCamera();F.on("projectionParamChanged",(g=>{F.isOrthographic()&&C()})),C(),g.once("xrViewportSetup",(I=>{I.xrViewport.on("presentingChanged",(I=>{if(I.state){l=10;const I=Math.PI/180,C=62*I,F=50*I;this.worker.postMessage({type:"ViewportChanged",frustumHalfAngleX:F,frustumHalfAngleY:C,isOrthographic:!1,solidAngleLimit:2*g.solidAngleLimit})}else l=5,C(),t()}))}));let U=0,l=5;g.on("viewChanged",(C=>{if(I){if(U%l==0){I=!1;const F=C.viewXfo.tr,U=C.viewXfo.ori;this.worker.postMessage({type:"ViewChanged",cameraPos:F.asArray(),cameraOri:U.asArray(),solidAngleLimit:g.solidAngleLimit})}U++}}));const t=()=>{const I=g.getViewport().getCamera().globalXfoParam.value,C=I.tr,F=I.ori;this.worker.postMessage({type:"ViewChanged",cameraPos:C.asArray(),cameraOri:F.asArray(),solidAngleLimit:g.solidAngleLimit})};g.getViewport().getCamera().on("movementFinished",t),t()}addGeomItem(g){let I=this.glGeomItemsMap[g.getId()];if(null!=I)return this.glGeomItems[I];const C=g.materialParam;let F=C.value,U=-1;U=this.renderer.glMaterialLibrary.addMaterial(F);const l=()=>{this.renderer.glMaterialLibrary.removeMaterial(F),F=C.value,A.materialId=this.renderer.glMaterialLibrary.addMaterial(F),B()};C.on("valueChanged",l);const t=g.geomParam;let e=t.value;const Q=this.renderer.glGeomLibrary.addGeom(e),d=g=>{this.renderer.glGeomLibrary.removeGeom(e),e=t.value,A.geomId=this.renderer.glGeomLibrary.addGeom(e),this.enableFrustumCulling&&this.dirtyWorkerItemIndices.add(I),B()};t.on("valueChanged",d),this.glGeomItemsIndexFreeList.length>0?I=this.glGeomItemsIndexFreeList.pop():(I=this.glGeomItems.length,this.glGeomItems.push(null)),this.removedItemIndices.includes(I)&&this.removedItemIndices.splice(this.removedItemIndices.indexOf(I),1),this.dirtyItemIndices.push(I);const n=this.renderer.gl,i=n.floatTexturesSupported,A=new GU(n,g,I,Q,U,i),B=()=>{this.dirtyItemIndices.includes(I)||(this.dirtyItemIndices.push(I),this.renderer.drawItemChanged())};g.geomMatParam.on("valueChanged",B),g.on("cutAwayChanged",B),g.on("highlightChanged",B),g.on("selectabilityChanged",B);const a=()=>{this.enableFrustumCulling&&(this.dirtyWorkerItemIndices.has(I)||(this.dirtyWorkerItemIndices.add(I),this.renderer.drawItemChanged()))};return this.enableFrustumCulling&&this.dirtyWorkerItemIndices.add(I),g.on("visibilityChanged",a),g.geomMatParam.on("valueChanged",a),t.on("boundingBoxChanged",a),this.glGeomItems[I]=A,this.glGeomItemEventHandlers[I]={geomItemChanged:B,materialChanged:l,geomChanged:d,workerItemDataChanged:a},this.glGeomItemsMap[g.getId()]=I,this.renderer.requestRedraw(),A}applyCullResults(g){const{newlyCulled:I,newlyUnCulled:C}=g;0==I.length&&0==C.length||(I.forEach((g=>{this.glGeomItems[g]?this.glGeomItems[g].setCulled(!0):-1==this.removedItemIndices.indexOf(g)&&console.warn("Culling worker has items that are deleted.")})),C.forEach((g=>{this.glGeomItems[g]?this.glGeomItems[g].setCulled(!1):-1==this.removedItemIndices.indexOf(g)&&console.warn("Culling worker has items that are deleted.")})),this.renderer.requestRedraw(),this.renderer.emit("CullingUpdated"))}removeGeomItem(g){const I=this.glGeomItemsMap[g.getId()];if(null==I)return null;const C=this.glGeomItems[I],F=g.geomParam.value;this.renderer.glGeomLibrary.removeGeom(F);const U=g.materialParam.value;this.renderer.glMaterialLibrary.removeMaterial(U);const l=this.glGeomItemEventHandlers[I];g.materialParam.off("valueChanged",l.materialChanged),g.geomMatParam.off("valueChanged",l.geomItemChanged),g.off("cutAwayChanged",l.geomItemChanged),g.off("highlightChanged",l.geomItemChanged),g.off("visibilityChanged",l.workerItemDataChanged),g.geomMatParam.off("valueChanged",l.workerItemDataChanged);const t=g.geomParam;return t.off("valueChanged",l.geomChanged),t.off("boundingBoxChanged",l.workerItemDataChanged),this.glGeomItems[I]=null,this.glGeomItemEventHandlers[I]=null,this.glGeomItemsIndexFreeList.push(I),delete this.glGeomItemsMap[g.getId()],this.removedItemIndices.push(I),this.renderer.requestRedraw(),C}getGeomItem(g){var I;if(!(g>=this.glGeomItems.length))return null===(I=this.glGeomItems[g])||void 0===I?void 0:I.geomItem;console.warn("Invalid Draw Item id:"+g+" NumItems:"+(this.glGeomItems.length-1))}getGLGeomItem(g){const I=this.glGeomItemsMap[g.getId()];return null!=I?this.glGeomItems[I]:null}populateDrawItemDataArray(g,I,C){const F=this.glGeomItems[g];if(!F)return;const{geomItem:U,geomId:l}=F,t=24*I;let e=0;U.isCutawayEnabled()&&(e|=JU.GEOMITEM_FLAG_CUTAWAY),0==U.isSelectable()&&(e|=JU.GEOMITEM_INVISIBLE_IN_GEOMDATA);const Q=new n(new Float32Array(C.buffer,4*(t+0),4));Q.set(e,0,0,0);const d=U.materialParam.value,i=this.renderer.glMaterialLibrary.getMaterialAllocation(d);i&&(Q.z=i.start),Q.w=l;const A=U.geomMatParam.value,B=new n(new Float32Array(C.buffer,4*(t+4),4)),a=new n(new Float32Array(C.buffer,4*(t+8),4)),V=new n(new Float32Array(C.buffer,4*(t+12),4));B.set(A.xAxis.x,A.yAxis.x,A.zAxis.x,A.translation.x),a.set(A.xAxis.y,A.yAxis.y,A.zAxis.y,A.translation.y),V.set(A.xAxis.z,A.yAxis.z,A.zAxis.z,A.translation.z);const R=new n(new Float32Array(C.buffer,4*(t+16),4));if(U.isHighlighted()){const g=U.getHighlight();R.set(g.r,g.g,g.b,g.a)}const s=new n(new Float32Array(C.buffer,4*(t+20),4));if(U.isCutawayEnabled()){const g=U.getCutVector(),I=U.getCutDist();s.set(g.x,g.y,g.z,I)}}getCullingWorkerData(g,I,C){const F=g.boundingBoxParam.value,U=.5*F.size(),l=F.center();let t=0!=g.cullable;const e=I.getParameter("MaintainScreenSize");return e&&e.value&&(t=!1),I.getShaderName().startsWith("ScreenSpace")&&(t=!1),I.hasParameter("PointSize")&&(t=!1),{id:C,boundingRadius:U,pos:l.asArray(),cullable:t,visible:g.isVisible()}}uploadGeomItemsToWorker(){if(this.enableFrustumCulling){const g=[];this.dirtyWorkerItemIndices.forEach((I=>{const C=this.glGeomItems[I];if(!C)return;const{geomItem:F}=C,U=F.materialParam.value;g.push(this.getCullingWorkerData(F,U,I))})),this.worker.postMessage({type:"UpdateGeomItems",geomItems:g,removedItemIndices:this.removedItemIndices}),this.dirtyWorkerItemIndices.clear(),this.removedItemIndices=[]}}uploadGeomItems(g){const I=this.renderer.gl;if(!I.floatTexturesSupported)return;let C=Math.round(Math.sqrt(6*this.glGeomItems.length)+.5);C=s.nextPow2(C),C%6!=0&&(C+=6-C%6),this.glGeomItemsTexture?this.glGeomItemsTexture.width!=C&&(this.glGeomItemsTexture.resize(C,C),this.dirtyItemIndices=Array(C*C/6).fill(0).map(((g,I)=>I))):(this.glGeomItemsTexture=new dF(I,{format:"RGBA",type:"FLOAT",width:C,height:C,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.glGeomItemsTexture.clear()),I.bindTexture(I.TEXTURE_2D,this.glGeomItemsTexture.glTex);const F=this.glGeomItemsTexture.getType();for(let g=0;g<this.dirtyItemIndices.length;g++){const U=this.dirtyItemIndices[g],l=Math.floor(6*U/C);let t=U+1;for(let I=g+1;I<this.dirtyItemIndices.length;I++){const g=this.dirtyItemIndices[I];if(Math.floor(6*g/C)!=l)break;if(g!=t)break;t++}const e=t-U,Q=6*U%C,d=6*e,n=1,i=new Float32Array(24*e);for(let g=U;g<t;g++)this.populateDrawItemDataArray(g,g-U,i);if(F==I.FLOAT)this.glGeomItemsTexture.populate(i,d,n,Q,l,!1);else{const g=s.convertFloat32ArrayToUInt16Array(i);this.glGeomItemsTexture.populate(g,d,n,Q,l,!1)}g+=e-1}this.removedItemIndices=[],this.dirtyItemIndices=[]}bind(g){(this.dirtyWorkerItemIndices.size>0||this.removedItemIndices.length>0)&&this.uploadGeomItemsToWorker(),this.dirtyItemIndices.length>0&&this.uploadGeomItems(g);const I=this.renderer.gl,{instancesTexture:C,instancesTextureSize:F}=g.unifs;C&&(this.glGeomItemsTexture.bindToUniform(g,C),I.uniform1i(F.location,this.glGeomItemsTexture.width))}destroy(){}}let kU,YU=!1,EU=!1;const TU={};class DU extends ig{constructor(g,I={}){if(super(),this.listenerIDs={},this.directives=[],this.solidAngleLimit=.004,this.__glcanvas=null,this.__scene=null,this.__shaderDirectives={},this.__renderGeomDataFbosRequested=!1,this.__shaders={},this.__passes={},this.__passesRegistrationOrder=[],this.__passCallbacks=[],this.__viewports=[],this.__activeViewport=void 0,this.__continuousDrawing=!1,this.__redrawRequested=!1,this.__isMobile=!1,this.__drawSuspensionLevel=0,this.__xrViewportPresenting=!1,this.floatGeomBuffer=!0,this.__supportXR=!1,this.__xrViewport=void 0,this.screenQuad=null,!C.gpuDesc)throw new Error("Unable to create renderer. WebGL not Supported");this.__isMobile=C.isMobileDevice,this.requestRedraw=this.requestRedraw.bind(this),this.__gl=this.setupWebGL(g,I),this.screenQuad=new FU(this.__gl,{directives:this.directives}),this.bindEventHandlers(),this.addViewport("main"),this.glMaterialLibrary=new rU(this),this.glMaterialLibrary.on("updated",(()=>{this.requestRedraw()})),this.glGeomLibrary=new yU(this),this.glGeomLibrary.on("updated",(()=>{this.requestRedraw()})),this.glGeomItemLibrary=new pU(this,I),this.glGeomItemLibrary.on("updated",(()=>{this.requestRedraw()}));for(const g in TU)for(const I of TU[g])this.addPass(new I,parseInt(g),!1);this.__supportXR=void 0===I.supportXR||I.supportXR,this.__xrViewportPromise=new Promise(((g,I)=>{var C,F;if(this.__supportXR&&(null===(C=navigator)||void 0===C?void 0:C.xr)){const I=()=>{this.__gl.makeXRCompatible().then((()=>{this.__xrViewport=this.__setupXRViewport();let I=new Cg(this.__xrViewport);this.emit("xrViewportSetup",I),g(this.__xrViewport)}))};null===(F=navigator)||void 0===F||F.xr.isSessionSupported("immersive-vr").then((g=>{g&&I()})).catch((g=>{console.warn("Unable to setup XR:"+g)}))}}))}addShaderPreprocessorDirective(g,I){this.__shaderDirectives[g]=I?"#define "+g+" = "+I:"#define "+g;const C=[];for(const g in this.__shaderDirectives)C.push(this.__shaderDirectives[g]);this.directives=C}getWidth(){return this.__glcanvas.width}getHeight(){return this.__glcanvas.height}addViewport(g){const I=new dU(this,g,this.getWidth(),this.getHeight());return I.on("updated",(()=>{this.requestRedraw()})),I.on("viewChanged",(g=>{this.__xrViewportPresenting||this.emit("viewChanged",g)})),this.__viewports.push(I),this.__activeViewport=I,I}getViewport(g=0){return this.__viewports[g]}getViewportAtPos(g,I){for(const C of this.__viewports){const F=C.getPosX(),U=C.getPosY(),l=C.getWidth(),t=C.getHeight();if(g>=F&&I>=U&&g<=l+F&&I<=t+U)return C}}activateViewport(g){this.__activeViewport!=g&&(this.__activeViewport=g)}activateViewportAtPos(g,I){if(this.__xrViewportPresenting)return;const C=this.getViewportAtPos(g,I);C&&C!=this.__activeViewport&&this.activateViewport(C)}getActiveViewport(){return this.__activeViewport}suspendDrawing(){this.__drawSuspensionLevel++}resumeDrawing(){this.__drawSuspensionLevel--,0==this.__drawSuspensionLevel&&(this.renderGeomDataFbos(),this.requestRedraw())}renderGeomDataFbos(){if(1==this.__renderGeomDataFbosRequested)return;this.__renderGeomDataFbosRequested=!0;window.requestAnimationFrame((()=>{for(const g of this.__viewports)g.renderGeomDataFbo();this.__renderGeomDataFbosRequested=!1}))}getScene(){return this.__scene}setScene(g){this.__scene=g,this.addTreeItem(this.__scene.getRoot());let I=new M(this.__scene);this.emit("sceneSet",I)}addTreeItem(g){if(!(g instanceof FI))return;const I=g.getId(),C={};if(this.listenerIDs[I]=C,g instanceof SC){const I=g.geomParam;if(null==I.value){const F=()=>{delete C["Geometry.valueChanged"],this.assignTreeItemToGLPass(g)};C["Geometry.valueChanged"]=I.once("valueChanged",F)}else this.assignTreeItemToGLPass(g)}else this.assignTreeItemToGLPass(g);for(const I of g.getChildren())I&&this.addTreeItem(I);C.childAdded=g.on("childAdded",(g=>{this.addTreeItem(g.childItem)})),C.childRemoved=g.on("childRemoved",(g=>{this.removeTreeItem(g.childItem)})),this.renderGeomDataFbos()}assignTreeItemToGLPass(g){if(g instanceof SC){const I=g;this.glGeomItemLibrary.addGeomItem(I)}let I=!1;for(let C=this.__passesRegistrationOrder.length-1;C>=0;C--){const F={continueInSubTree:!0};if(I=this.__passesRegistrationOrder[C].itemAddedToScene(g,F),I){if(!F.continueInSubTree)return;break}}if(!I)for(const I of this.__passCallbacks){const C={continueInSubTree:!0};if(I.itemAddedFn(g,C)){if(!C.continueInSubTree)return;break}}}removeTreeItem(g){if(!(g instanceof FI))return;const I=g.getId(),C=this.listenerIDs[I];delete this.listenerIDs[I],g.removeListenerById("childAdded",C.childAdded),g.removeListenerById("childRemoved",C.childRemoved);for(let I=this.__passesRegistrationOrder.length-1;I>=0;I--){const C={continueInSubTree:!0};if(this.__passesRegistrationOrder[I].itemRemovedFromScene(g,C)){if(!C.continueInSubTree)return;break}}for(const I of this.__passCallbacks){if(!I.itemRemovedFn)continue;const C={continueInSubTree:!0};if(I.itemRemovedFn(g,C)){if(!C.continueInSubTree)return;break}}for(const I of g.getChildren())I&&this.removeTreeItem(I);if(g instanceof SC){const I=g;if(C["Geometry.valueChanged"]){g.geomParam.removeListenerById("valueChanged",C["Geometry.valueChanged"])}this.glGeomItemLibrary.removeGeomItem(I)}this.renderGeomDataFbos()}get gl(){return this.__gl}getGL(){return this.__gl}handleResize(g,I){if(this.__xrViewportPresenting)return;const C=Math.max(4,g),F=Math.max(4,I);this.__glcanvas.width=C,this.__glcanvas.height=F,this.__viewports.forEach((g=>{g.resize(C,F)}));const U=new N(C,F);this.emit("resized",U),this.requestRedraw()}getDiv(){return this.__glcanvas.parentElement}setupWebGL(g,I){const{tagName:F}=g;if(!["DIV","CANVAS"].includes(F))throw new Error("Only CANVAS and DIV are valid root elements.");const U="DIV"===F;this.__glcanvas=g,U?(console.warn("@GLBaseRenderer#setupWebGL.","Using a DIV as root element is deprecated.","Use a CANVAS instead.","See: https://docs.zea.live/zea-engine/#/getting-started/get-started-with-engine?id=basic-setup"),this.__glcanvas=document.createElement("canvas"),g.appendChild(this.__glcanvas)):this.__glcanvas=g,this.__glcanvas.style["touch-action"]="none",this.__glcanvas.parentElement.style.position="relative",this.__glcanvas.parentElement.style.overflow="hidden",this.__glcanvas.style.position="absolute";const l=function(g,I,C){var F=!0,U=!0;if("function"!=typeof g)throw new TypeError("Expected a function");return yF(C)&&(F="leading"in C?!!C.leading:F,U="trailing"in C?!!C.trailing:U),IU(g,I,{leading:F,maxWait:I,trailing:U})}((g=>{if(Array.isArray(g)&&g.length)for(const I of g){if(!I.contentRect)return;const g=Math.round(I.contentRect.width),C=Math.round(I.contentRect.height);this.handleResize(g,C)}}),500);window.addEventListener("resize",(()=>{const g=[{contentRect:{width:this.__glcanvas.parentElement.clientWidth,height:this.__glcanvas.parentElement.clientHeight}}];l(g)}));const t=new ResizeObserver(l);try{t.observe(this.__glcanvas.parentNode,{box:"device-pixel-content-box"})}catch(g){t.observe(this.__glcanvas.parentNode,{box:"content-box"})}this.handleResize(this.__glcanvas.parentElement.clientWidth,this.__glcanvas.parentElement.clientHeight),I.preserveDrawingBuffer=!0,I.antialias=null==I.antialias||I.antialias,I.depth=!0,I.stencil=!1,I.alpha=!!I.alpha&&I.alpha,I.xrCompatible=!1,I.powerPreference=I.powerPreference||"high-performance";const e=eF(this.__glcanvas,I);e||alert("Unable to create WebGL context. WebGL not supported."),"webgl2"==e.name&&this.addShaderPreprocessorDirective("ENABLE_ES3"),e.floatTexturesSupported&&this.addShaderPreprocessorDirective("ENABLE_FLOAT_TEXTURES");{const g="webgl2"==e.name?e.getExtension("WEBGL_multi_draw"):null;g&&!I.disableMultiDraw?(e.multiDrawArrays=g.multiDrawArraysWEBGL.bind(g),e.multiDrawElements=g.multiDrawElementsWEBGL.bind(g),e.multiDrawElementsInstanced=g.multiDrawElementsInstancedWEBGL.bind(g),e.multiDrawArraysInstanced=g.multiDrawArraysInstancedWEBGL.bind(g)):this.addShaderPreprocessorDirective("EMULATE_MULTI_DRAW")}return"Safari"==C.browserName&&"webgl"==e.name?this.floatGeomBuffer=!1:this.floatGeomBuffer=null!=I.floatGeomBuffer?I.floatGeomBuffer:e.floatTexturesSupported,e.floatGeomBuffer=this.floatGeomBuffer,e}bindEventHandlers(){const g=()=>this.getWidth()>0&&this.getHeight(),I=g=>!(!C.isMobileDevice||"Safari"!=C.browserName)&&(console.warn("Mobile Safari is triggering mouse event:",g.type),!0);this.__glcanvas.addEventListener("mousedown",(g=>{if(I(g))return;const C=new Ug(g,this.__glcanvas.getBoundingClientRect());YU=!0,kU=this,this.activateViewportAtPos(C.rendererX,C.rendererY);const F=this.getActiveViewport();F&&F.onPointerDown(C),EU=!1})),document.addEventListener("mouseup",(C=>{if(I(C))return;if(kU!=this||!g())return;const F=new Ug(C,this.__glcanvas.getBoundingClientRect());YU=!1;const U=this.getActiveViewport();U&&U.onPointerUp(F),EU&&(U&&U.onPointerLeave(F),kU=void 0)})),document.addEventListener("mousemove",(C=>{if(I(C))return;if(kU!=this||!g())return;const F=new Ug(C,this.__glcanvas.getBoundingClientRect());YU||this.activateViewportAtPos(F.rendererX,F.rendererY);const U=this.getActiveViewport();U&&U.onPointerMove(F)})),this.__glcanvas.addEventListener("mouseenter",(g=>{if(!I(g)&&!YU){kU=this;const I=new Ug(g,this.__glcanvas.getBoundingClientRect());if(this.activateViewportAtPos(I.rendererX,I.rendererY),!YU){const g=this.getActiveViewport();g&&g.onPointerEnter(I)}EU=!1}})),this.__glcanvas.addEventListener("mouseleave",(C=>{if(I(C))return;if(kU!=this||!g())return;const F=new Ug(C,this.__glcanvas.getBoundingClientRect());if(YU)EU=!0;else{const g=this.getActiveViewport();g&&g.onPointerLeave(F),kU=void 0}})),this.__glcanvas.addEventListener("touchstart",(g=>{kU=this;const I=this.getActiveViewport(),C=new tg(g,this.__glcanvas.getBoundingClientRect());I.onPointerDown(C)}),{passive:!0}),this.__glcanvas.addEventListener("touchend",(g=>{const I=this.getActiveViewport(),C=new tg(g,this.__glcanvas.getBoundingClientRect());I.onPointerUp(C)}),{passive:!0}),this.__glcanvas.addEventListener("touchmove",(g=>{const I=this.getActiveViewport(),C=new tg(g,this.__glcanvas.getBoundingClientRect());I.onPointerMove(C)}),{passive:!0}),this.__glcanvas.addEventListener("touchcancel",(g=>{const I=this.getActiveViewport(),C=new tg(g,this.__glcanvas.getBoundingClientRect());I.onTouchCancel(C)}),{passive:!0});window.addEventListener("wheel",(I=>{if(kU==this&&g()&&kU){const g=new eg(I,this.__glcanvas.getBoundingClientRect()),C=kU.getActiveViewport();C&&C.onWheel(g)}}),{passive:!1}),window.oncontextmenu=function(){return!1},document.addEventListener("keydown",(I=>{if(kU!=this||!g())return;const C=new E(I),F=kU.getActiveViewport();F&&F.onKeyDown(C)})),document.addEventListener("keyup",(I=>{if(kU!=this||!g())return;const C=new E(I),F=kU.getActiveViewport();F&&F.onKeyUp(C)}))}getGLCanvas(){return this.__glcanvas}frameAll(g=0){this.__viewports[g].frameView([this.__scene.getRoot()])}getOrCreateShader(g){let I=this.__shaders[g];return I||(I=t.constructClass(g),I||console.error("@GLBaseRenderer#getOrCreateShader - Shader not registered with the Registry:",g),I.setGLContext(this.__gl),this.__shaders[g]=I),I}addPass(g,I=-1,C=!0){-1==I&&(I=g.getPassType()),this.__passes[I]||(this.__passes[I]=[]);let F=0;for(const g in this.__passes){if(g==I.toString())break;F+=this.__passes[g].length}if(F+=this.__passes[I].length,g.on("updated",(g=>{this.requestRedraw(),this.renderGeomDataFbos()})),g.init(this,F),this.__passes[I].push(g),C){let g=0;for(const I in this.__passes){const C=this.__passes[I];C.forEach(((I,C)=>{I.setPassIndex(g+C)})),g+=C.length}}return this.__passesRegistrationOrder.push(g),this.requestRedraw(),F}getPass(g){let I=0;for(const C in this.__passes){const F=this.__passes[C];if(g-I<F.length)return F[g-I];I+=F.length}}supportsVR(){var g;return console.warn("@GLBaseRenderer#supportVR - Deprecated Method. Please instead connect to the vrViewportSetup signal."),this.__supportXR&&null!=(null===(g=navigator)||void 0===g?void 0:g.xr)}__setupXRViewport(){const g=new BU(this),I=g=>{this.emit("viewChanged",g)};return g.on("presentingChanged",(C=>{const F=C.state;if(this.__xrViewportPresenting!=F)if(this.__xrViewportPresenting=F,F){for(const g in this.__passes){const I=this.__passes[g];for(const g of I)g.startPresenting()}g.on("viewChanged",I)}else{g.off("viewChanged",I),this.emit("updated");for(const g in this.__passes){const I=this.__passes[g];for(const g of I)g.stopPresenting()}const C=this.getViewport().getCamera().globalXfoParam.value,F=new _("CameraAndPointer",C);this.emit("viewChanged",F),this.requestRedraw()}})),g}getVRViewport(){return this.__xrViewport}getXRViewport(){return this.__xrViewportPromise}isXRViewportPresenting(){return this.__xrViewportPresenting}isContinuouslyDrawing(){return this.__continuousDrawing}startContinuousDrawing(){if(this.isContinuouslyDrawing()||this.__xrViewportPresenting)return;const g=()=>{this.__continuousDrawing&&!this.__xrViewportPresenting&&window.requestAnimationFrame(g);for(const g of this.__viewports)g.draw()};this.__continuousDrawing=!0,window.requestAnimationFrame(g)}stopContinuousDrawing(){this.__continuousDrawing=!1}toggleContinuousDrawing(){this.__continuousDrawing?this.stopContinuousDrawing():this.startContinuousDrawing()}drawItemChanged(){for(const g of this.__viewports)g.invalidateGeomDataBuffer();this.requestRedraw()}requestRedraw(){if(this.__redrawRequested||this.__continuousDrawing||this.__xrViewportPresenting||this.__drawSuspensionLevel>0)return!1;return window.requestAnimationFrame((()=>{this.__redrawRequested=!1;for(const g of this.__viewports)g.draw()})),this.__redrawRequested=!0,!0}forceRender(){if(this.__redrawRequested){this.__redrawRequested=!1;for(const g of this.__viewports)g.draw()}else console.warn("@GlBaseRenderer#forceRender - Scene is not dirty")}bindGLBaseRenderer(g){g.gl=this.__gl,g.shaderopts={directives:this.directives};const I=this.__gl;g.viewports&&1!=g.viewports.length?(g.bindRendererUnifs=C=>{const{cameraMatrix:F}=C;F&&I.uniformMatrix4fv(F.location,!1,g.cameraMatrix.asArray())},g.bindViewports=(C,F)=>{g.viewports.forEach(((g,U)=>{let l=g.region;I.viewport(l[0],l[1],l[2],l[3]);const{viewMatrix:t,projectionMatrix:e,eye:Q,isOrthographic:d}=C;t&&I.uniformMatrix4fv(t.location,!1,g.viewMatrix.asArray()),e&&I.uniformMatrix4fv(e.location,!1,g.projectionMatrix.asArray()),Q&&I.uniform1i(Q.location,U),d&&I.uniform1i(d.location,g.isOrthographic),F()}))}):(g.bindRendererUnifs=C=>{const{cameraMatrix:F,viewMatrix:U,projectionMatrix:l,eye:t,isOrthographic:e}=C;F&&I.uniformMatrix4fv(F.location,!1,g.cameraMatrix.asArray());const Q=g.viewports[0];U&&I.uniformMatrix4fv(U.location,!1,Q.viewMatrix.asArray()),l&&I.uniformMatrix4fv(l.location,!1,Q.projectionMatrix.asArray()),t&&I.uniform1i(t.location,0),e&&I.uniform1i(e.location,Q.isOrthographic)},g.bindViewports=(g,I)=>I())}drawScene(g){g.directives=[...this.directives,"#define DRAW_COLOR"],g.shaderopts.directives=g.directives;for(const I in this.__passes){const C=this.__passes[I];for(const I of C)I.enabled&&I.draw(g)}}drawHighlightedGeoms(g){this.bindGLBaseRenderer(g),g.directives=[...this.directives,"#define DRAW_HIGHLIGHT"],g.shaderopts.directives=g.directives;for(const I in this.__passes){const C=this.__passes[I];for(const I of C)I.enabled&&I.drawHighlightedGeoms(g)}}drawSceneGeomData(g,I=255){this.bindGLBaseRenderer(g),g.directives=[...this.directives,"#define DRAW_GEOMDATA"],g.shaderopts.directives=g.directives,g.floatGeomBuffer=this.floatGeomBuffer;for(const C in this.__passes){if(0==(Number.parseInt(C)&I))continue;const F=this.__passes[C];for(const I of F)I.enabled&&I.drawGeomData(g)}}static registerPass(g,I){TU[I]||(TU[I]=[]),TU[I].push(g)}destroy(){this.resizeObserver.disconnect()}}class vU extends VF{constructor(g){super(g,"HighlightsShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;    //(location = 0)\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  v_texCoord = positions.xy+0.5;\n  gl_Position = vec4(positions.xy*2.0, 0.0, 1.0);\n}\n\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform float outlineThickness;\nuniform sampler2D highlightDataTexture;\nuniform vec2 highlightDataTextureSize;\n\nvarying vec2 v_texCoord;\n\nvec3 SobelFactor(vec3 ldc, vec3 ldl, vec3 ldr, vec3 ldu, vec3 ldd)\n{\n  return abs(ldl - ldc) +\n      abs(ldr - ldc) +\n      abs(ldu - ldc) +\n      abs(ldd - ldc);\n}\n\n// https://github.com/ssell/UnitySobelOutline/blob/2e1f4a5b4e703ae2c96aaf08d5518ce58abbaab9/Assets/Resources/Shaders/SobelOutlineHLSL.shader#L18\nvec4 SobelSample(vec2 uv)\n{\n  vec3 offset = vec3((1.0 / highlightDataTextureSize.x), (1.0 / highlightDataTextureSize.y), 0.0) * outlineThickness;\n\n  vec4 pixelCenter = texture2D(highlightDataTexture, uv);\n  vec3 pixelLeft   = texture2D(highlightDataTexture, uv - offset.xz).rgb;\n  vec3 pixelRight  = texture2D(highlightDataTexture, uv + offset.xz).rgb;\n  vec3 pixelUp     = texture2D(highlightDataTexture, uv + offset.zy).rgb;\n  vec3 pixelDown   = texture2D(highlightDataTexture, uv - offset.zy).rgb;\n\n  vec3 sobelNormalVec = SobelFactor(pixelCenter.rgb, pixelLeft, pixelRight, pixelUp, pixelDown);\n  \n  float sobelNormal = sobelNormalVec.x + sobelNormalVec.y + sobelNormalVec.z;\n  \n  float outlineDepthMultiplier = 10.0;\n  float outlineDepthBias = 2.5;\n  sobelNormal = pow(sobelNormal * outlineDepthMultiplier, outlineDepthBias);\n\n  sobelNormal = clamp(sobelNormal, 0.0, 1.0);\n\n  \n  float pixelCenterWeight = length(pixelCenter.rgb) > 0.0 ? 1.0 : 0.0;\n  float pixelLeftWeight   = length(pixelLeft) > 0.0 ? 1.0 : 0.0;\n  float pixelRightWeight  = length(pixelRight) > 0.0 ? 1.0 : 0.0;\n  float pixelUpWeight     = length(pixelUp) > 0.0 ? 1.0 : 0.0;\n  float pixelDownWeight   = length(pixelDown) > 0.0 ? 1.0 : 0.0;\n  \n  // Weight each neighbors contribution to the current pixel color.\n  pixelCenter.rgb = pixelCenter.rgb * pixelCenterWeight;\n  pixelLeft   *= pixelLeftWeight;\n  pixelRight  *= pixelRightWeight;\n  pixelUp     *= pixelUpWeight;\n  pixelDown   *= pixelDownWeight;\n\n  // Add all the weighted contributions, and then normalize.\n  vec3 outlineColor = pixelCenter.rgb + pixelLeft + pixelRight +  pixelUp + pixelDown;\n  outlineColor /= pixelCenterWeight + pixelLeftWeight + pixelRightWeight + pixelUpWeight + pixelDownWeight;\n\n  return mix(vec4(outlineColor, sobelNormal), pixelCenter, pixelCenter.a);\n}\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\nvoid main(void) {\n    \n  vec4 outlineColor = SobelSample(v_texCoord);\n  \n  if (outlineColor.a > 0.0001) {\n#ifndef ENABLE_ES3\n    gl_FragColor = outlineColor;\n#else\n    fragColor = outlineColor;\n#endif\n  }\n  else {\n      discard;\n  }\n}\n\n")}}class MU extends VF{constructor(g){super(g,"SilhouetteShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\nattribute vec3 positions;    //(location = 0)\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  v_texCoord = positions.xy+0.5;\n  gl_Position = vec4(positions.xy*2.0, 0.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\n#ifndef ENABLE_ES3\n#extension GL_EXT_frag_depth: enable\n#endif\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D colorTexture;\nuniform sampler2D depthTexture;\nuniform vec2 screenSize;\nuniform vec2 depthRange;\n\nuniform float outlineThickness;\nuniform color outlineColor;\nuniform float outlineSensitivity;\nuniform float outlineDepthBias;\n\nvarying vec2 v_texCoord;\n\n// http://web.archive.org/web/20130416194336/http://olivers.posterous.com/linear-depth-in-glsl-for-real\nfloat LinearEyeDepth(float z_b) {\n  float z_n = 2.0 * z_b - 1.0;\n  float z_e = 2.0 * depthRange.x * depthRange.y / (depthRange.y + depthRange.x - z_n * (depthRange.y - depthRange.x));\n  return z_e;\n}\n\nfloat LogEyeDepth(float z_b) {\n  return depthRange.x + ((depthRange.y - depthRange.x) * z_b);\n}\n\n// https://www.vertexfragment.com/ramblings/unity-postprocessing-sobel-outline/#depth-based-outline\n// https://github.com/ssell/UnitySobelOutline/blob/2e1f4a5b4e703ae2c96aaf08d5518ce58abbaab9/Assets/Resources/Shaders/SobelOutlineHLSL.shader\n\nfloat SobelDepth(float ldc, float ldl, float ldr, float ldu, float ldd)\n{\n  return abs(ldl - ldc) +\n      abs(ldr - ldc) +\n      abs(ldu - ldc) +\n      abs(ldd - ldc);\n}\n\nfloat SobelSampleDepth(vec2 uv, vec3 offset)\n{\n  float pixelCenter = LinearEyeDepth(texture2D(depthTexture, uv).r);\n  float pixelLeft   = LinearEyeDepth(texture2D(depthTexture, uv - offset.xz).r);\n  float pixelRight  = LinearEyeDepth(texture2D(depthTexture, uv + offset.xz).r);\n  float pixelUp     = LinearEyeDepth(texture2D(depthTexture, uv + offset.zy).r);\n  float pixelDown   = LinearEyeDepth(texture2D(depthTexture, uv - offset.zy).r);\n\n  float  outlineDepthMultiplier = (1.0 / pixelCenter) * outlineSensitivity;\n\n  return SobelDepth(pixelCenter, pixelLeft, pixelRight, pixelUp, pixelDown) * outlineDepthMultiplier;\n}\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec3 offset = vec3((1.0 / screenSize.x), (1.0 / screenSize.y), 0.0) * outlineThickness;\n  float sobelDepth = SobelSampleDepth(v_texCoord, offset);\n  float sobelValue = pow(sobelDepth, outlineDepthBias);\n\n  float minEdgeValue = 0.25;\n  float maxEdgeValue = 0.55;\n  sobelDepth = smoothstep(minEdgeValue, maxEdgeValue, sobelValue);\n\n#ifdef ENABLE_ES3\n  fragColor = vec4(outlineColor.rgb, sobelDepth);\n#else\n  fragColor = vec4(mix(texture2D(colorTexture, v_texCoord).rgb, outlineColor.rgb, sobelDepth), 1.0);\n#ifdef  GL_EXT_frag_depth\n  gl_FragDepthEXT = texture2D(depthTexture, v_texCoord).r;\n#endif\n#endif\n\n  // float z = texture2D(depthTexture, v_texCoord).r;\n  // float near = depthRange.x * 2.0;    // the near plane\n  // float far = depthRange.y / 2.0;     // the far plane\n  // float c = (2.0 * near) / (far + near - z * (far - near));  // convert to linear values \n  // fragColor = vec4(vec3(c), 1.0);\n\n  \n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}const HU=FF.OPAQUE|FF.TRANSPARENT|FF.OVERLAY;class KU extends DU{constructor(g,I={}){super(g,I),this.__glEnvMap=null,this.__rayCastRenderTarget=null,this.__backgroundMapShader=null,this.__backgroundMapShaderBinding=null,this.__rayCastRenderTargetProjMatrix=new V,this.__exposure=1,this.__tonemap=!0,this.__gamma=2.2,this.__displayEnvironment=!0,this.__debugMode=0,this._planeDist=0,this.__cutPlaneNormal=new d(1,0,0),this.rayCastDist=0,this.rayCastArea=0;const C=this.__gl;this.highlightsShader=new vU(C),this.silhouetteShader=new MU(C),this.highlightOutlineThickness=1.5,this.outlineThickness=0,this.outlineColor=new A(.15,.15,.15,1),this.outlineSensitivity=2,this.outlineDepthBias=.7,this.__debugTextures=[void 0],this.addShaderPreprocessorDirective("ENABLE_INLINE_GAMMACORRECTION"),I.disableTextures||this.addShaderPreprocessorDirective("ENABLE_TEXTURES"),I.debugGeomIds&&this.addShaderPreprocessorDirective("DEBUG_GEOM_ID")}__bindEnvMap(g){const I=this.__gl;if(!(g instanceof AC)){const C=g;if(this.__glBackgroundMap=C.getMetadata("gltexture"),this.__glBackgroundMap||("FLOAT"===C.type?this.__glBackgroundMap=new WF(this.__gl,C):this.__glBackgroundMap=new dF(this.__gl,C)),this.__glBackgroundMap.on("loaded",(()=>{this.requestRedraw()})),this.__glBackgroundMap.on("updated",(()=>{this.requestRedraw()})),!this.__backgroundMapShader){I.__quadVertexIdsBuffer||I.setupInstancedQuad(),this.__backgroundMapShader=new SF(this.__gl);const g=this.__backgroundMapShader.compileForTarget();this.__backgroundMapShaderBinding=mF(this.__gl,g.attrs,I.__quadattrbuffers,I.__quadIndexBuffer)}return}if("webgl2"!==I.name)return;this.__glEnvMap=g.getMetadata("gltexture"),this.__glEnvMap||"FLOAT"===g.type&&(this.addShaderPreprocessorDirective("ENABLE_PBR"),this.__glEnvMap=new uF(this,g)),this.__glEnvMap.on("loaded",(g=>{this.requestRedraw()})),this.__glEnvMap.on("updated",(g=>{this.requestRedraw()}));const C=new k(this.__glEnvMap);this.emit("envMapAssigned",C)}setScene(g){const I=g.envMapParam;null!=I.value&&this.__bindEnvMap(I.value),I.on("valueChanged",(()=>{this.__bindEnvMap(I.value)}));const C=g.displayEnvMapParam;this.__displayEnvironment=C.value,C.on("valueChanged",(()=>{this.__displayEnvironment=C.value,this.requestRedraw()})),super.setScene(g)}addViewport(g){return super.addViewport(g)}get exposure(){return this.__exposure}set exposure(g){this.__exposure=g,this.requestRedraw()}get gamma(){return this.__gamma}set gamma(g){this.__gamma=g,this.requestRedraw()}get displayEnvironment(){return this.__displayEnvironment}set displayEnvironment(g){this.__displayEnvironment=g,this.requestRedraw()}raycastWithRay(g,I,C=.01,F=HU){const U=new o;return U.setLookAt(g.start,g.start.add(g.dir),new d(0,0,1)),this.raycast(U,g,I,C,F)}raycastWithXfo(g,I,C=.01,F=HU){const U=new Z(g.tr,g.ori.getZaxis().negate());return this.raycast(g,U,I,C,F)}raycast(g,I,C,F=.01,U=HU){return this.rayCastDist==C&&this.rayCastArea==F||(this.__rayCastRenderTargetProjMatrix.setOrthographicMatrix(-.5*F,.5*F,-.5*F,.5*F,0,C),this.rayCastDist=C,this.rayCastArea=F),this.raycastWithProjection(g,this.__rayCastRenderTargetProjMatrix,I,U)}raycastWithProjection(g,I,C,F=HU){var U;const l={cameraMatrix:g.toMat4(),viewports:[{region:[0,0,3,3],viewMatrix:g.inverse().toMat4(),projectionMatrix:I,isOrthographic:!0}]},t=this.__gl;this.__rayCastRenderTarget||(this.__rayCastRenderTarget=new sF(t,{type:"FLOAT",format:"RGBA",filter:"NEAREST",createDepthTexture:!0,width:3,height:3,numColorChannels:1})),this.__rayCastRenderTarget.bindForWriting(l,!0),t.enable(t.CULL_FACE),t.enable(t.DEPTH_TEST),t.depthFunc(t.LEQUAL),t.depthMask(!0),this.drawSceneGeomData(l,F),t.finish(),this.__rayCastRenderTarget.unbindForWriting(),this.__rayCastRenderTarget.bindForReading();const e=new Float32Array(36);t.readPixels(0,0,3,3,t.RGBA,t.FLOAT,e),this.__rayCastRenderTarget.unbindForReading();const Q=[4,3,5,1,7];let d;for(const g of Q)if(0!=e[4*g+3]){d=e.subarray(4*g,4*g+4);break}if(!d)return null;const n=63&Math.round(d[0]),i=null===(U=this.getPass(n))||void 0===U?void 0:U.getGeomItemAndDist(d);if(i){const g=C.start.add(C.dir.scale(i.dist));return{pointerRay:C,intersectionPos:g,geomItem:i.geomItem,dist:i.dist,geomData:d}}return null}raycastCluster(g,I,C,F=.01,U=HU){const l=this.__gl;this.__rayCastRenderTarget||(this.__rayCastRenderTarget=new sF(l,{type:"FLOAT",format:"RGBA",filter:"NEAREST",createDepthTexture:!0,width:3,height:3,numColorChannels:1}),this.__rayCastRenderTargetProjMatrix=new V),this.rayCastDist==C&&this.rayCastArea==F||(this.__rayCastRenderTargetProjMatrix.setOrthographicMatrix(-.5*F,.5*F,-.5*F,.5*F,0,C),this.rayCastDist=C,this.rayCastArea=F);const t={};t.viewports.push({region:[0,0,3,3],viewMatrix:g.inverse().toMat4(),projectionMatrix:this.__rayCastRenderTargetProjMatrix,isOrthographic:!0}),t.cameraMatrix=g.toMat4(),this.__rayCastRenderTarget.bindForWriting(t,!0),l.enable(l.CULL_FACE),l.enable(l.DEPTH_TEST),l.depthFunc(l.LEQUAL),l.depthMask(!0),this.drawSceneGeomData(t,U),l.finish(),this.__rayCastRenderTarget.unbindForWriting(),this.__rayCastRenderTarget.bindForReading();const e=new Float32Array(36);l.readPixels(0,0,3,3,l.RGBA,l.FLOAT,e),this.__rayCastRenderTarget.unbindForReading();const Q=[];for(let g=0;g<9;g++)if(0!=e[4*g+3]){const C=e.subarray(4*g,4*g+4),F=63&Math.round(C[0]),U=this.getPass(F);if(U){const g=U.getGeomItemAndDist(C);if(g){const F=I.start.add(I.dir.scale(g.dist));Q.push({pointerRay:I,intersectionPos:F,geomItem:g.geomItem,dist:g.dist,geomData:C})}}}return Q}drawBackground(g){if(this.__glBackgroundMap&&this.__backgroundMapShader&&this.__backgroundMapShaderBinding){if(!this.__glBackgroundMap.isLoaded())return;const I=this.__gl;I.depthMask(!1),this.__backgroundMapShader.bind(g);const C=g.unifs;this.__glBackgroundMap.bindToUniform(g,C.backgroundImage),this.__backgroundMapShaderBinding.bind(g),I.drawQuad()}else this.__glEnvMap&&this.__glEnvMap.draw&&this.__glEnvMap.draw(g)}bindGLRenderer(g){super.bindGLBaseRenderer(g),g.envMap=this.__glEnvMap,g.exposure=this.__exposure,g.gamma=this.__gamma}drawScene(g){this.bindGLRenderer(g),this.__displayEnvironment&&this.drawBackground(g),super.drawScene(g),this.emit("redrawOccurred")}}class xU extends VF{constructor(g){super(g,"BillboardShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 cameraMatrix;\n\nimport 'GLSLUtils.glsl'\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\n// A sorted attribute of instance Ids so we draw from back to front.\ninstancedattribute float instanceIds;\n\nimport 'transpose.glsl'\nimport 'imageAtlas.glsl'\n\nuniform sampler2D atlasBillboards_layout;\nuniform vec4 atlasBillboards_desc;\n\nuniform sampler2D instancesTexture;\nuniform int instancesTextureSize;\nuniform int passId;\n\nconst int cols_per_instance = 7;\n\nmat4 getMatrix(sampler2D texture, int textureSize, int index) {\n  // Unpack 3 x 4 matix columns into a 4 x 4 matrix.\n  vec4 col0 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 0);\n  vec4 col1 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 1);\n  vec4 col2 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 2);\n  mat4 result = mat4(col0, col1, col2, vec4(0.0, 0.0, 0.0, 1.0));\n  return transpose(result);\n  // return mat4(1.0);\n}\n\nmat4 getModelMatrix(int id) {\n  return getMatrix(instancesTexture, instancesTextureSize, id);\n}\nvec4 getInstanceData(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 3);\n}\nvec4 getPivot(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 4);\n}\nvec4 getTintColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 5);\n}\n\n#else\n\nuniform vec4 atlasBillboards_desc;\n\nuniform mat4 modelMatrix;\nuniform vec2 pivot;\nuniform vec4 billboardData;\nuniform vec4 tintColor;\nuniform vec4 layoutData;\n\n#endif\n\nuniform int inVR;\n\nmat4 calcLookAtMatrix(vec3 origin, vec3 target, float roll) {\n  // vec3 rr = vec3(sin(roll), 0.0, cos(roll));\n  vec3 rr = vec3(0.0, 0.0, 1.0);\n  vec3 ww = normalize(target - origin);\n  vec3 uu = normalize(cross(rr, ww));\n  vec3 vv = normalize(cross(ww, uu));\n\n  return mat4(vec4(uu, 0.0), vec4(vv, 0.0), vec4(ww, 0.0), vec4(origin, 1.0));\n}\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\n/* VS Outputs */\nvarying float v_instanceID;\nvarying vec2 v_texCoord;\nvarying float v_alpha;\nvarying vec4 v_tint;\nvarying vec3 v_viewPos;\n\nvoid main(void) {\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\n  int instanceID = int(instanceIds);\n  v_instanceID = float(instanceID) + 0.25;\n\n  mat4 modelMatrix = getModelMatrix(instanceID);\n  vec2 pivot = getPivot(instanceID).xy;\n  vec4 billboardData = getInstanceData(instanceID);\n  vec4 layoutData = fetchTexel(atlasBillboards_layout, int(atlasBillboards_desc.z), int(billboardData.z));\n  v_tint = getTintColor(instanceID);\n\n#else\n\n  v_tint = tintColor;\n\n#endif\n\n  vec2 quadVertex = getQuadVertexPositionFromID();\n  \n  vec2 pos = quadVertex + vec2(0.5, 0.0) - pivot;\n  v_texCoord = vec2(quadVertex.x, -quadVertex.y) + 0.5;\n  v_alpha = billboardData.w;\n  v_texCoord *= layoutData.zw;\n  v_texCoord += layoutData.xy;\n\n  float scl = billboardData.x;\n  float width = layoutData.z * atlasBillboards_desc.x * scl;\n  float height = layoutData.w * atlasBillboards_desc.y * scl;\n  int flags = int(billboardData.y);\n\n  // Use cross platform bit flags methods\n  bool alignedToCamera = testFlag(flags, 4); // flag = 1<<2\n  bool drawOnTop = testFlag(flags, 8); // flag = 1 << 3\n  bool fixedSizeOnscreen = testFlag(flags, 16); // flag = 1 << 4\n\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n\n  // Note: items in front of the camera will have a negative value here.\n  float sc = 1.0;\n  if (fixedSizeOnscreen) {\n    sc = -modelViewMatrix[3][2];\n    \n    if (inVR == 1) {\n      // During XR sessions, there is a scaling applied to the view matrix\n      // which causes a distortion to the line width. We extract that scale here\n      // and use to correct the distortion.\n      // See also: FatPointsShader\n      vec3 viewZ = modelViewMatrix[2].xyz;\n      float viewScale = length(viewZ);\n      sc /= viewScale;\n    }\n  }\n  \n  mat4 modelViewProjectionMatrix;\n  if (alignedToCamera) {\n    if (inVR == 0) {\n      gl_Position = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n      gl_Position += vec4(pos.x * width * sc, (pos.y + 0.5) * height * sc, 0.0, 0.0);\n      v_viewPos = gl_Position.xyz;\n      gl_Position = projectionMatrix * gl_Position;\n    } else {\n      vec3 cameraPos = vec3(cameraMatrix[3][0], cameraMatrix[3][1], cameraMatrix[3][2]);\n      vec3 billboardPos = vec3(modelMatrix[3][0], modelMatrix[3][1], modelMatrix[3][2]);\n      mat4 lookAt = calcLookAtMatrix(billboardPos, cameraPos, 0.0);\n      mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * lookAt;\n      gl_Position = modelViewProjectionMatrix * vec4(pos.x * width * sc, (pos.y + 0.5) * height * sc, 0.0, 1.0);\n      v_viewPos = (modelViewMatrix * vec4(pos.x * width * sc, (pos.y + 0.5) * height * sc, 0.0, 1.0)).xyz;\n    }\n  }\n  else {\n    modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;\n    gl_Position = modelViewProjectionMatrix * vec4(pos.x * width, (pos.y + 0.5) * height, 0.0, 1.0);\n    v_viewPos = (modelViewMatrix * vec4(pos.x * width, (pos.y + 0.5) * height, 0.0, 1.0)).xyz;\n  }\n\n  // Use cross platform bit flags methods\n  if (drawOnTop) {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.w, 0.5);\n  }\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nimport 'imageAtlas.glsl'\n\nuniform sampler2D atlasBillboards;\n\n/* VS Outputs */\nvarying float v_instanceID;\nvarying vec2 v_texCoord;\nvarying float v_alpha;\nvarying vec4 v_tint;\nvarying vec3 v_viewPos;\n\nuniform sampler2D instancesTexture;\nuniform int instancesTextureSize;\n\n#if defined(DRAW_GEOMDATA)\n  uniform int isOrthographic;\n  import 'surfaceGeomData.glsl'\n#endif // DRAW_GEOMDATA\n\nconst int cols_per_instance = 7;\n\nvec4 getHilightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 6);\n}\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  int instanceID = int(v_instanceID);\n  vec4 imageColor = texture2D(atlasBillboards, v_texCoord) * v_tint;\n  imageColor.a *= v_alpha;\n  if(imageColor.a < 0.1)\n    discard;\n\n#if defined(DRAW_COLOR)\n  fragColor = imageColor;\n  // fragColor.r = 1.0;\n  // fragColor.a = 1.0;\n#elif defined(DRAW_GEOMDATA)\n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_instanceID, isOrthographic);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = getHilightColor(instanceID);\n  // Skip unhilighting labels.\n  if(fragColor.r < 0.001 && fragColor.g < 0.001 && fragColor.b < 0.001)\n    discard;\n#endif // DRAW_HIGHLIGHT\n  \n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}class wU extends VF{constructor(g){super(g,"EnvProjectionShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;    //(location = 0)\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform vec3 projectionCenter;\n\nimport 'inverse.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\n \nvoid main()\n{\n  int drawItemId = getDrawItemId();\n  vec4 pos = vec4(positions, 1.);\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;\n\n  gl_Position = modelViewProjectionMatrix * pos;\n\n  vec4 worldPos = modelMatrix * pos;\n  v_worldDir = worldPos.xyz - projectionCenter;\n}\n\n")}}new AI("EnvProjectionShader_template").addParameter(new Eg("projectionCenter",new d(0,0,1.7)));class zU extends VF{constructor(g){super(g,"FatLinesShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\ninstancedattribute vec2 segmentIndices;\nattribute float vertexIDs;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\nuniform int drawItemId;\nint getDrawItemId() {\n  return drawItemId;\n}\n\nuniform sampler2D positionsTexture;\nuniform int positionsTextureSize;\n\nuniform float LineThickness;\nuniform float Overlay;\n\nimport 'calcFatLinesViewPos.glsl'\n\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\nvarying vec2 v_texCoord;\n\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying float v_drawItemID;\nvarying vec3 v_worldPos;\n\nvoid main(void) {\n\n  int drawItemId = getDrawItemId();\n  v_drawItemId = float(drawItemId);\n  v_geomItemData = getInstanceData(drawItemId);\n\n  int vertexID = int(vertexIDs);\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  vec3 pos;\n\n  #if defined(DRAW_COLOR)\n    v_viewPos       = calcFatLinesViewPos(vertexID, modelViewMatrix, v_viewNormal, v_texCoord, pos);\n  #elif defined(DRAW_GEOMDATA)\n    vec3  viewNormal;\n    vec2  texCoord;\n    v_viewPos       = calcFatLinesViewPos(vertexID, modelViewMatrix, viewNormal, texCoord, pos);\n    v_drawItemID = float(getDrawItemId());\n    v_worldPos      = (modelMatrix * vec4(pos, 1.0)).xyz;\n  #endif\n\n  gl_Position     = projectionMatrix * vec4(v_viewPos, 1.0);\n  if (Overlay > 0.0) {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.w, Overlay);\n  }\n\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform color BaseColor;\nuniform mat4 cameraMatrix;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\n/* VS Outputs */\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\nvarying vec2 v_texCoord;\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying float v_drawItemID;\nvarying vec3 v_worldPos;\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'GLSLBits.glsl'\n\nuniform int floatGeomBuffer;\nuniform int passId;\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getCutaway(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);\n}\n#else\n\nuniform vec4 cutawayData;\n\nvec4 getCutaway(int id) {\n  return cutawayData;\n}\n\n#endif\n\n#if defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n#if defined(DRAW_COLOR)\n  int debugLevel = 0;\n  if (debugLevel == 0) {\n\n    vec3 viewVector = mat3(cameraMatrix) * normalize(-v_viewPos);\n    vec3 normal = mat3(cameraMatrix) * v_viewNormal;\n    float NdotV = dot(normalize(normal), normalize(viewVector));\n\n    // Modulate the lighting using the texture coord so the line looks round.\n    NdotV *= cos((v_texCoord.x - 0.5) * 2.0);\n\n    vec4 color = BaseColor * NdotV;\n    fragColor = vec4(color.rgb, BaseColor.a);\n  }\n  else {\n    fragColor = vec4(v_texCoord.x, 0.0, 0.0, 1.0);\n  }\n#elif defined(DRAW_GEOMDATA)\n  int drawItemId = int(v_drawItemId + 0.5);\n  int flags = int(v_geomItemData.r + 0.5);\n // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {\n    vec4 cutAwayData  = getCutaway(drawItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (cutaway(v_worldPos, planeNormal, planeDist)) {\n      discard;\n      return;\n    }\n  }\n  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n    discard;\n    return;\n  }\n\n  float dist = length(v_viewPos);\n\n  if (floatGeomBuffer != 0) {\n    fragColor.r = float(passId); \n    fragColor.g = float(v_drawItemID);\n    fragColor.b = 0.0;// TODO: store poly-id or something.\n    fragColor.a = dist;\n  }\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_drawItemId);\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}bind(g,I){return!!super.bind(g,I)&&(g.supportsInstancing=!1,!0)}static supportsInstancing(){return!1}static getMaterialTemplate(){return fU}}const fU=new sC("FatLinesShader_template");t.register("FatLinesShader",zU);class LU extends VF{constructor(g){super(g,"FlatSurfaceShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\nimport 'GLSLUtils.glsl'\n\nimport 'drawItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  v_drawItemId = float(drawItemId);\n  v_geomItemData  = getInstanceData(drawItemId);\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n\n  vec4 pos = vec4(positions, 1.);\n  vec4 viewPos = (modelViewMatrix * pos);\n  gl_Position = projectionMatrix * viewPos;\n\n  v_viewPos = viewPos.xyz;\n#ifdef ENABLE_TEXTURES\n  v_textureCoord = texCoords;\n  v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y\n#endif\n\n  v_worldPos      = (modelMatrix * pos).xyz;\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\n\n#ifndef ENABLE_MULTI_DRAW\n\nuniform color BaseColor;\n\n#ifdef ENABLE_TEXTURES\nuniform sampler2D BaseColorTex;\nuniform int BaseColorTexType;\n#endif\n\n#endif // ENABLE_MULTI_DRAW\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n\nuniform color cutColor;\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getCutaway(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);\n}\n\n#else\n\nuniform vec4 cutawayData;\n\nvec4 getCutaway(int id) {\n  return cutawayData;\n}\n\n#endif\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\n#if defined(DRAW_GEOMDATA)\n  uniform int isOrthographic;\n  import 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  int drawItemId = int(v_drawItemId + 0.5);\n  int flags = int(v_geomItemData.r + 0.5);\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) \n  {\n    vec4 cutAwayData   = getCutaway(drawItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (cutaway(v_worldPos, planeNormal, planeDist)) {\n      discard;\n      return;\n    }\n  }\n\n  //////////////////////////////////////////////\n  // Material\n#ifdef ENABLE_MULTI_DRAW\n\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 baseColor = toLinear(getMaterialValue(materialCoords, 0));\n\n#else // ENABLE_MULTI_DRAW\n\n#ifndef ENABLE_TEXTURES\n  vec4 baseColor = toLinear(BaseColor);\n#else\n  vec4 baseColor = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);\n#endif // ENABLE_TEXTURES\n\n#endif // ENABLE_MULTI_DRAW\n\n  if (baseColor.a < 0.001) discard;\n\n#if defined(DRAW_COLOR)\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {\n    if (!gl_FrontFacing) {\n#ifdef ENABLE_ES3\n      fragColor = cutColor;\n#else\n      gl_FragColor = cutColor;\n#endif\n      return;\n    }\n  }\n\n  //////////////////////////////////////////////\n  fragColor = baseColor;\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb);\n#endif\n\n#elif defined(DRAW_GEOMDATA)\n\n  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n    discard;\n    return;\n  }\n\n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId,v_drawItemId, isOrthographic);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_drawItemId);\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}bind(g,I){super.bind(g,I);const C=this.__gl;return C.disable(C.CULL_FACE),!0}unbind(g){super.unbind(g);const I=this.__gl;return I.enable(I.CULL_FACE),!0}static getPackedMaterialData(g){const I=new Float32Array(4),C=g.getParameter("BaseColor").value;return I[0]=C.r,I[1]=C.g,I[2]=C.b,I[3]=C.a,I}static getMaterialTemplate(){return _U}}const _U=new oC("FlatSurfaceShader_template");t.register("FlatSurfaceShader",LU);class OU extends VF{constructor(g){super(g,"LinesShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\nattribute vec3 positionsNext;\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\n#ifdef ENABLE_MULTI_DRAW\nimport 'materialparams.glsl'\n#else\nuniform float Overlay;\n#endif\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_worldPos;\nvarying vec3 v_nextVertexDist;\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  v_drawItemId = float(drawItemId);\n  v_geomItemData  = getInstanceData(drawItemId);\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  vec4 viewPos = modelViewMatrix * vec4(positions, 1.0);\n  vec4 viewPosNext = modelViewMatrix * vec4(positionsNext, 1.0);\n\n#ifdef ENABLE_ES3\n  float nextVertexDist = length(viewPosNext.xyz - viewPos.xyz);\n  if (imod(gl_VertexID, 2) == 0) {\n    v_nextVertexDist.x = nextVertexDist;\n    v_nextVertexDist.y = 0.0;\n  } else {\n    v_nextVertexDist.x = 0.0;\n    v_nextVertexDist.y = nextVertexDist;\n  }\n  v_nextVertexDist.z = float(gl_VertexID);\n#endif\n\n  v_viewPos = viewPos.xyz;\n  gl_Position = projectionMatrix * viewPos;\n    \n\n  //////////////////////////////////////////////\n  // Overlay\n\n#ifdef ENABLE_MULTI_DRAW\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 materialValue1 = getMaterialValue(materialCoords, 1);\n  int maintainScreenSize = int(materialValue1.x + 0.5);\n  float overlay = materialValue1.y;\n#else\n  float overlay = Overlay;\n#endif\n\n#if defined(DRAW_GEOMDATA)\n  gl_Position.z = mix(gl_Position.z, -gl_Position.w, mix(overlay, 1.0, 0.0001));\n#else\n  gl_Position.z = mix(gl_Position.z, -gl_Position.w, overlay);\n#endif\n\n  //////////////////////////////////////////////\n  \n  \n  vec4 pos = vec4(positions, 1.);\n  v_worldPos      = (modelMatrix * pos).xyz;\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'materialparams.glsl'\n\nuniform int occluded;\n\n#ifndef ENABLE_MULTI_DRAW\n\nuniform color BaseColor;\nuniform float Opacity;\n\nuniform float StippleScale;\nuniform float StippleValue;\nuniform float OccludedStippleValue;\n\n#endif // ENABLE_MULTI_DRAW\n\n#if defined(DRAW_GEOMDATA)\n\nuniform int isOrthographic;\n\nimport 'surfaceGeomData.glsl'\n\n#elif defined(DRAW_HIGHLIGHT)\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getHighlightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);\n}\n#else // ENABLE_FLOAT_TEXTURES\n\nuniform vec4 highlightColor;\n\nvec4 getHighlightColor() {\n  return highlightColor;\n}\n\n#endif // ENABLE_FLOAT_TEXTURES\n\n#endif // DRAW_HIGHLIGHT\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getCutaway(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);\n}\n\n#else\n\nuniform vec4 cutawayData;\n\nvec4 getCutaway(int id) {\n  return cutawayData;\n}\n\n#endif\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_worldPos;\nvarying vec3 v_nextVertexDist;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  int drawItemId = int(v_drawItemId + 0.5);\n  int flags = int(v_geomItemData.r + 0.5);\n\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) \n  {\n    vec4 cutAwayData   = getCutaway(drawItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (cutaway(v_worldPos, planeNormal, planeDist)) {\n      discard;\n      return;\n    }\n  }\n\n  //////////////////////////////////////////////\n  // Material\n\n#ifdef ENABLE_MULTI_DRAW\n\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 BaseColor = getMaterialValue(materialCoords, 0);\n  vec4 matValue1 = getMaterialValue(materialCoords, 1);\n  vec4 matValue2 = getMaterialValue(materialCoords, 2);\n  float Opacity  = matValue1.r;\n\n  float StippleScale = matValue1.b;\n  float StippleValue = matValue1.a;\n  float OccludedStippleValue = matValue2.r;\n#endif // ENABLE_MULTI_DRAW\n\n  ///////////////////\n  // Stippling\n  float stippleValue = occluded == 0 ? StippleValue : OccludedStippleValue;\n#ifdef ENABLE_ES3 // No stippling < es3 \n  if (stippleValue > 0.0) {\n    // Note: a value of 0.0, means no stippling (solid). A value of 1.0 means invisible\n    float dist = -v_viewPos.z * StippleScale;\n    float nextVertexDist = imod(int(floor(v_nextVertexDist.z)), 2) == 0 ? v_nextVertexDist.x : v_nextVertexDist.y;\n    if (mod(nextVertexDist / dist, 1.0) < stippleValue) {\n      discard;\n      return;\n    }\n  }\n#endif\n\n  //////////////////////////////////////////////\n  // Color\n#if defined(DRAW_COLOR)\n\n  fragColor = BaseColor;\n  fragColor.a *= Opacity;\n\n  \n#ifndef ENABLE_ES3\n  if (occluded == 1) fragColor.a *= 1.0 - stippleValue;\n#endif\n\n  //////////////////////////////////////////////\n  // GeomData\n#elif defined(DRAW_GEOMDATA)\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n    discard;\n    return;\n  }\n  \n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_drawItemId, isOrthographic);\n  \n  //////////////////////////////////////////////\n  // Highlight\n#elif defined(DRAW_HIGHLIGHT)\n  \n  fragColor = getHighlightColor(drawItemId);\n\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}static getPackedMaterialData(g){const I=new Float32Array(12),C=g.getParameter("BaseColor").value;return I[0]=C.r,I[1]=C.g,I[2]=C.b,I[3]=C.a,I[4]=g.getParameter("Opacity").value,I[5]=g.getParameter("Overlay").value,I[6]=g.getParameter("StippleScale").value,I[7]=g.getParameter("StippleValue").value,I[8]=g.getParameter("OccludedStippleValue").value,I}static getMaterialTemplate(){return jU}}const jU=new hC("LinesShader_template");t.register("LinesShader",OU);class PU extends VF{constructor(g){super(g,"PointsShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\n#ifdef ENABLE_MULTI_DRAW\nimport 'materialparams.glsl'\n#else\nuniform float PointSize;\nuniform float Overlay;\n#endif\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  v_drawItemId = float(drawItemId);\n  v_geomItemData  = getInstanceData(drawItemId);\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  \n  vec4 viewPos = modelViewMatrix * vec4(positions, 1.);\n  gl_Position = projectionMatrix * viewPos;\n  \n\n  //////////////////////////////////////////////\n  // Material\n#ifdef ENABLE_MULTI_DRAW\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 materialValue1 = getMaterialValue(materialCoords, 1);\n  int maintainScreenSize = int(materialValue1.x + 0.5);\n  float pointSize = materialValue1.x;\n  float overlay = materialValue1.y;\n#else\n  float pointSize = PointSize;\n  float overlay = Overlay;\n#endif\n  //////////////////////////////////////////////\n\n  // Note: as of 22/01/2021 gl_PointSize has stopped working again...\n  gl_PointSize = pointSize;\n\n#if defined(DRAW_GEOMDATA)\n  // Make the geom data point size at least 8 pixels across, else its impossible to hit.\n  gl_PointSize = max(8.0, pointSize);\n#endif\n  gl_Position.z = mix(gl_Position.z, -gl_Position.w, overlay);\n\n  \n  v_viewPos = -viewPos.xyz;\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\n#ifndef ENABLE_MULTI_DRAW\n\nuniform color BaseColor;\n\n#endif\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'materialparams.glsl'\n\n#if defined(DRAW_GEOMDATA)\n\nuniform int floatGeomBuffer;\nuniform int passId;\n\nimport 'GLSLBits.glsl'\n\n#elif defined(DRAW_HIGHLIGHT)\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getHighlightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);\n}\n#else // ENABLE_FLOAT_TEXTURES\n\nuniform vec4 highlightColor;\n\nvec4 getHighlightColor() {\n  return highlightColor;\n}\n\n#endif // ENABLE_FLOAT_TEXTURES\n\n#endif // DRAW_HIGHLIGHT\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\n/* VS Outputs */\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  //////////////////////////////////////////////\n  // Color\n#if defined(DRAW_COLOR)\n\n#ifdef ENABLE_MULTI_DRAW\n\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 baseColor = getMaterialValue(materialCoords, 0);\n  vec4 matValue1 = getMaterialValue(materialCoords, 1);\n  float pointSize       = baseColor.a * matValue1.r;\n  float overlay      = matValue1.g;\n\n#else // ENABLE_MULTI_DRAW\n\n  vec4 baseColor = BaseColor;\n\n#endif // ENABLE_MULTI_DRAW\n\n  fragColor = baseColor;\n\n  //////////////////////////////////////////////\n  // GeomData\n#elif defined(DRAW_GEOMDATA)\n\n  float viewDist = length(v_viewPos);\n\n  if (floatGeomBuffer != 0) {\n    fragColor.r = float(passId); \n    fragColor.g = float(v_drawItemId);\n    fragColor.b = 0.0;// TODO: store poly-id or something.\n    fragColor.a = viewDist;\n  }\n  else {\n    ///////////////////////////////////\n    // UInt8 buffer\n    fragColor.r = mod(v_drawItemId, 256.) / 256.;\n    fragColor.g = (floor(v_drawItemId / 256.) + (float(passId) * 64.)) / 256.;\n\n    // encode the dist as a 16 bit float\n    vec2 float16bits = encode16BitFloatInto2xUInt8(viewDist);\n    fragColor.b = float16bits.x;\n    fragColor.a = float16bits.y;\n  }\n\n  //////////////////////////////////////////////\n  // Highlight\n#elif defined(DRAW_HIGHLIGHT)\n  \n  int drawItemId = int(v_drawItemId + 0.5);\n  fragColor = getHighlightColor(drawItemId);\n\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}static getPackedMaterialData(g){const I=new Float32Array(12),C=g.getParameter("BaseColor").value;return I[0]=C.r,I[1]=C.g,I[2]=C.b,I[3]=C.a,I[4]=g.getParameter("PointSize").value,I[5]=g.getParameter("Overlay").value,I}static getMaterialTemplate(){return qU}}const qU=new cC("PointsShader_template");t.register("PointsShader",PU);class $U extends VF{constructor(g){super(g,"FatPointsShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\ninstancedattribute vec3 positions;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\nimport 'GLSLUtils.glsl' \nimport 'inverse.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\nimport 'quadVertexFromID.glsl'\n\nuniform int drawItemId;\nint getDrawItemId() {\n  return drawItemId;\n}\n\nuniform float PointSize;\nuniform float Overlay;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\nvarying vec3 v_viewPos;\nvarying float v_drawItemId;\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  vec2 quadPointPos = getQuadVertexPositionFromID();\n  v_texCoord = quadPointPos + 0.5;\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  \n  vec4 viewPos = modelViewMatrix * vec4(positions, 1.);\n\n  // During XR sessions, there is a scaling applied to the view matrix\n  // which causes a distortion to the line width. We extract that scale here\n  // and use to correct the distortion.\n  // See also: FatLinesShader\n  vec3 viewZ = modelViewMatrix[2].xyz;\n  float viewScale = length(viewZ);\n  viewPos += vec4(vec3(quadPointPos, 0.0) * PointSize * viewScale, 0.);\n\n  // Generate a quad which is 0.5 * PointSize closer towards\n  // us. This allows points to be visualized even if snug on \n  // a surface. (else they get fully clipped)\n  viewPos.z += 0.5 * PointSize;\n\n  v_drawItemId = float(getDrawItemId());\n  v_viewPos = -viewPos.xyz;\n  \n  gl_Position = projectionMatrix * viewPos;\n  if (Overlay > 0.0) {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.w, Overlay);\n  }\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'constants.glsl'\n\nuniform color BaseColor;\nuniform float Rounded;\nuniform float BorderWidth;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\nvarying vec3 v_viewPos;\nvarying float v_drawItemId;\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\n#if defined(DRAW_GEOMDATA)\n  uniform int isOrthographic;\n  import 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\nfloat dist = length(v_texCoord - 0.5);\nif (dist > 0.5)\n  discard;\n\n#if defined(DRAW_COLOR)\n\n  if (dist > 0.5 - (BorderWidth * 0.5))\n    fragColor = vec4(0.,0.,0.,1.);\n  else {\n    // Modulate the lighting using the texture coord so the point looks round.\n    float NdotV = cos(dist * PI);\n\n    fragColor = BaseColor * mix(1.0, NdotV, Rounded);\n  }\n\n#elif defined(DRAW_GEOMDATA)\n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId,v_drawItemId, isOrthographic);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_drawItemId);\n#endif // DRAW_HIGHLIGHT\n\n  \n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}bind(g,I){return!!super.bind(g,I)&&(g.supportsInstancing=!1,!0)}static supportsInstancing(){return!1}static getMaterialTemplate(){return gl}}const gl=new ZC("FatPointsShader_template");t.register("FatPointsShader",$U);class Il extends VF{constructor(g){super(g,"SimpleSurfaceShader"),this.setShaderStage("VERTEX_SHADER","precision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\nattribute vec3 normals;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\nimport 'GLSLUtils.glsl'\nimport 'transpose.glsl'\nimport 'inverse.glsl'\nimport 'drawItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  v_drawItemId = float(drawItemId);\n  v_geomItemData  = getInstanceData(drawItemId);\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n\n  vec4 pos = vec4(positions, 1.);\n  vec4 viewPos    = modelViewMatrix * pos;\n  gl_Position     = projectionMatrix * viewPos;\n\n  mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));\n  v_viewPos       = -viewPos.xyz;\n  v_viewNormal    = normalMatrix * normals;\n\n#ifdef ENABLE_TEXTURES\n  v_textureCoord  = texCoords;\n  // v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y\n#endif\n\n  v_worldPos      = (modelMatrix * pos).xyz;\n}\n"),this.setShaderStage("FRAGMENT_SHADER","precision highp float;\n#define GLSLIFY 1\n#ifdef ENABLE_MULTI_DRAW\n// #define DEBUG_GEOM_ID\n#endif\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\n\n#ifdef DEBUG_GEOM_ID\nimport 'debugColors.glsl'\n#endif\n\nuniform color cutColor;\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getCutaway(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);\n}\n\n#else\n\nuniform vec4 cutawayData;\n\nvec4 getCutaway(int id) {\n  return cutawayData;\n}\n\n#endif\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n/* VS Outputs */\n\nuniform mat4 cameraMatrix;\nuniform int isOrthographic;\n\n#ifndef ENABLE_MULTI_DRAW\n\nuniform color BaseColor;\nuniform float Opacity;\nuniform float EmissiveStrength;\n\n#ifdef ENABLE_TEXTURES\nuniform sampler2D BaseColorTex;\nuniform int BaseColorTexType;\nuniform sampler2D OpacityTex;\nuniform int OpacityTexType;\nuniform sampler2D EmissiveStrengthTex;\nuniform int EmissiveStrengthTexType;\n#endif // ENABLE_TEXTURES\n\n#endif // ENABLE_MULTI_DRAW\n\nimport 'computeViewNormal.glsl'\n  \n\n#ifdef ENABLE_ES3\n    out vec4 fragColor;\n#endif\n\n#if defined(DRAW_GEOMDATA)\n  import 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  int drawItemId = int(v_drawItemId + 0.5);\n  int flags = int(v_geomItemData.r + 0.5);\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) \n  {\n    vec4 cutAwayData   = getCutaway(drawItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (cutaway(v_worldPos, planeNormal, planeDist)) {\n      discard;\n      return;\n    }\n  }\n\n#if defined(DRAW_COLOR)\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) \n  {\n    if (!gl_FrontFacing) {\n#ifdef ENABLE_ES3\n  fragColor = cutColor;\n#else\n  gl_FragColor = cutColor;\n#endif\n      return;\n    }\n  }\n\n  //////////////////////////////////////////////\n  // Normals\n  \n  vec3 viewNormal;\n  if (length(v_viewNormal) < 0.1) {\n    viewNormal = computeViewNormal(v_viewPos);\n  } else {\n    viewNormal = normalize(v_viewNormal);\n  }\n  vec3 normal = normalize(mat3(cameraMatrix) * viewNormal);\n  \n  vec3 viewVector;\n  if (isOrthographic == 0)\n    viewVector = normalize(mat3(cameraMatrix) * normalize(v_viewPos));\n  else \n    viewVector = vec3(-cameraMatrix[2][0], -cameraMatrix[2][1], -cameraMatrix[2][2]);\n  \n  //////////////////////////////////////////////\n  // Material\n\n#ifdef ENABLE_MULTI_DRAW\n\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 baseColor = toLinear(getMaterialValue(materialCoords, 0));\n  vec4 matValue1 = getMaterialValue(materialCoords, 1);\n  float opacity       = baseColor.a * matValue1.r;\n  float emission      = matValue1.g;\n\n#else // ENABLE_MULTI_DRAW\n\n#ifndef ENABLE_TEXTURES\n  vec4 baseColor      = toLinear(BaseColor);\n  float emission      = EmissiveStrength;\n  float opacity       = baseColor.a * Opacity;\n#else\n  vec4 baseColor      = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);\n  float opacity       = baseColor.a * getLuminanceParamValue(Opacity, OpacityTex, OpacityTexType, v_textureCoord);\n  float emission      = getLuminanceParamValue(EmissiveStrength, EmissiveStrengthTex, EmissiveStrengthTexType, v_textureCoord);\n#endif\n\n#endif // ENABLE_MULTI_DRAW\n\n  // Hacky simple irradiance. \n  float ndotv = dot(normal, viewVector);\n  if (ndotv < 0.0) {\n    normal = -normal;\n    ndotv = dot(normal, viewVector);\n\n    // Note: these 2 lines can be used to debug inverted meshes.\n    //baseColor = vec4(1.0, 0.0, 0.0, 1.0);\n    //ndotv = 1.0;\n  }\n\n  fragColor = vec4((ndotv * baseColor.rgb) + (emission * baseColor.rgb), opacity);\n\n#ifdef DEBUG_GEOM_ID\n  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n    discard;\n    return;\n  }\n\n  // ///////////////////////\n  // Debug Draw ID (this correlates to GeomID within a GLGeomSet)\n  float geomId = v_geomItemData.w;\n  fragColor.rgb = getDebugColor(geomId);\n  // ///////////////////////\n#endif\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb);\n#endif\n\n#elif defined(DRAW_GEOMDATA)\n\n  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n    discard;\n    return;\n  }\n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId,v_drawItemId, isOrthographic);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_drawItemId);\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}")}static getPackedMaterialData(g){const I=new Float32Array(8),C=g.getParameter("BaseColor").value;return I[0]=C.r,I[1]=C.g,I[2]=C.b,I[3]=C.a,I[4]=g.getParameter("Opacity").value,I[5]=g.getParameter("EmissiveStrength").value,I}static getMaterialTemplate(){return Cl}}const Cl=new mC("SimpleSurfaceShader_template");t.register("SimpleSurfaceShader",Il);class Fl extends VF{constructor(g){super(g,"StandardSuraceShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\nattribute vec3 normals;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\n// should be imported by bottom 3\nimport 'GLSLUtils.glsl'\nimport 'transpose.glsl'\nimport 'inverse.glsl'\n\nimport 'drawItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n/* VS Outputs */\n\n#if defined(DRAW_COLOR)\n#elif defined(DRAW_GEOMDATA)\n#elif defined(DRAW_HIGHLIGHT)\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n\n  int drawItemId = getDrawItemId();\n  v_drawItemId = float(drawItemId);\n  v_geomItemData = getInstanceData(drawItemId);\n  vec4 pos = vec4(positions, 1.);\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  vec4 viewPos    = modelViewMatrix * pos;\n  gl_Position     = projectionMatrix * viewPos;\n  v_viewPos = -viewPos.xyz;\n  v_worldPos      = (modelMatrix * pos).xyz;\n\n  mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));\n  v_viewPos       = -viewPos.xyz;\n  v_viewNormal    = normalMatrix * normals;\n\n#ifdef ENABLE_TEXTURES\n  v_textureCoord  = texCoords;\n#endif\n\n}\n"),this.setShaderStage("FRAGMENT_SHADER","  precision highp float;\n#define GLSLIFY 1\n\n  import 'GLSLUtils.glsl'\n  import 'drawItemTexture.glsl' \n  import 'cutaways.glsl'\n  import 'gamma.glsl'\n  import 'materialparams.glsl'\n  import 'GLSLBits.glsl'\n\n  #ifdef ENABLE_FLOAT_TEXTURES\n    vec4 getCutaway(int id) {\n      return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);\n    }\n\n  #else\n\n    uniform vec4 cutawayData;\n\n    vec4 getCutaway(int id) {\n      return cutawayData;\n    }\n\n  #endif\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n/* VS Outputs */\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\n#if defined(DRAW_COLOR)\n\n#ifdef ENABLE_MULTI_DRAW\n// #define DEBUG_GEOM_ID\n#endif\n#ifdef DEBUG_GEOM_ID\nimport 'debugColors.glsl'\n#endif\n\nuniform color cutColor;\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\nuniform float exposure;\n#endif\n\nuniform mat4 cameraMatrix;\nuniform int isOrthographic;\n\n#ifndef ENABLE_MULTI_DRAW\n\nuniform color BaseColor;\nuniform float AmbientOcclusion;\nuniform float Roughness;\nuniform float Metallic;\nuniform float Reflectance;\nuniform float EmissiveStrength;\nuniform float Opacity;\n\n#ifdef ENABLE_TEXTURES\nuniform sampler2D BaseColorTex;\nuniform int BaseColorTexType;\n\nuniform sampler2D AmbientOcclusionTex;\nuniform int AmbientOcclusionTexType;\n\n#ifdef ENABLE_PBR\nuniform sampler2D RoughnessTex;\nuniform int RoughnessTexType;\n\nuniform sampler2D MetallicTex;\nuniform int MetallicTexType;\n\nuniform sampler2D ReflectanceTex;\nuniform int ReflectanceTexType;\n\nuniform sampler2D NormalTex;\nuniform int NormalTexType;\n#endif // ENABLE_PBR\n\nuniform sampler2D EmissiveStrengthTex;\nuniform int EmissiveStrengthTexType;\n\n#endif // ENABLE_TEXTURES\n#endif // ENABLE_MULTI_DRAW\n\nimport 'PBRSurfaceRadiance.glsl'\n\n#ifdef ENABLE_PBR\nmat3 cotangentFrame( in vec3 normal, in vec3 pos, in vec2 texCoord ) {\n  // https://stackoverflow.com/questions/5255806/how-to-calculate-tangent-and-binormal\n  vec3 n = normal;\n  // derivations of the fragment position\n  vec3 pos_dx = dFdx( pos );\n  vec3 pos_dy = dFdy( pos );\n  // derivations of the texture coordinate\n  vec2 texC_dx = dFdx( texCoord );\n  vec2 texC_dy = dFdy( texCoord );\n  // tangent vector and binormal vector\n  vec3 t = -(texC_dy.y * pos_dx - texC_dx.y * pos_dy);\n  vec3 b = -(texC_dx.x * pos_dy - texC_dy.x * pos_dx);\n\n  t = t - n * dot( t, n ); // orthonormalization ot the tangent vectors\n  b = b - n * dot( b, n ); // orthonormalization of the binormal vectors to the normal vector\n  b = b - t * dot( b, t ); // orthonormalization of the binormal vectors to the tangent vector\n  mat3 tbn = mat3( normalize(t), normalize(b), n );\n\n  return tbn;\n}\n#endif\n\nimport 'computeViewNormal.glsl'\n\n#elif defined(DRAW_GEOMDATA)\nuniform int isOrthographic;\nimport 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\nimport 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n  #ifndef ENABLE_ES3\n    vec4 fragColor;\n  #endif\n\n  int drawItemId = int(v_drawItemId + 0.5);\n  int flags = int(v_geomItemData.r + 0.5);\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {\n    vec4 cutAwayData   = getCutaway(drawItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (cutaway(v_worldPos, planeNormal, planeDist)) {\n        discard;\n        return;\n    }\n  }\n  \n#if defined(DRAW_COLOR)\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {\n    if (!gl_FrontFacing) {\n#ifdef ENABLE_ES3\n      fragColor = cutColor;\n#else\n      gl_FragColor = cutColor;\n#endif\n      return;\n    }\n  }\n\n  //////////////////////////////////////////////\n  // Normals\n  vec3 viewNormal;\n  if (length(v_viewNormal) < 0.1) {\n    viewNormal = computeViewNormal(v_viewPos);\n  } else {\n    viewNormal = normalize(v_viewNormal);\n  }\n  vec3 normal = normalize(mat3(cameraMatrix) * viewNormal);\n  \n  vec3 viewVector;\n  if (isOrthographic == 0)\n    viewVector = normalize(mat3(cameraMatrix) * normalize(v_viewPos));\n  else \n    viewVector = vec3(-cameraMatrix[2][0], -cameraMatrix[2][1], -cameraMatrix[2][2]);\n    \n  if (dot(normal, viewVector) < 0.0) {\n      normal = -normal;\n      // Note: this line can be used to debug inverted meshes.\n      //material.baseColor = vec3(1.0, 0.0, 0.0);\n  }\n\n  //////////////////////////////////////////////\n  // Material\n\n  MaterialParams material;\n\n#ifdef ENABLE_MULTI_DRAW\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 matValue0      = getMaterialValue(materialCoords, 0);\n  vec4 matValue1      = getMaterialValue(materialCoords, 1);\n  vec4 matValue2      = getMaterialValue(materialCoords, 2);\n\n  material.baseColor     = toLinear(matValue0.rgb);\n  material.ambientOcclusion      = matValue1.r;\n  material.metallic      = matValue1.g;\n  material.roughness     = matValue1.b;\n  material.reflectance   = matValue1.a;\n\n  material.emission         = matValue2.r;\n  material.opacity          = matValue2.g * matValue0.a;\n\n#else // ENABLE_MULTI_DRAW\n\n#ifndef ENABLE_TEXTURES\n  material.baseColor     = toLinear(BaseColor.rgb);\n  material.emission      = EmissiveStrength;\n\n#ifdef ENABLE_PBR\n  material.roughness     = Roughness;\n  material.metallic      = Metallic;\n  material.reflectance   = Reflectance;\n#endif\n\n#else\n  // Planar YZ projection for texturing, repeating every meter.\n  // vec2 texCoord       = v_worldPos.xz * 0.2;\n  vec2 texCoord          = v_textureCoord;\n\n  vec4 baseColor         = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, texCoord);\n  material.ambientOcclusion = getLuminanceParamValue(AmbientOcclusion, AmbientOcclusionTex, AmbientOcclusionTexType, texCoord);\n  material.baseColor     = baseColor.rgb;\n  \n#ifdef ENABLE_PBR\n\n  material.metallic      = getLuminanceParamValue(Metallic, MetallicTex, MetallicTexType, texCoord);\n  material.roughness     = getLuminanceParamValue(Roughness, RoughnessTex, RoughnessTexType, texCoord);\n\n  // TODO: Communicate that this tex contains the roughness as well.\n  if (MetallicTexType != 0) {\n    vec4 metallicRoughness = vec4(Metallic, Roughness, 0.0, 1.0);\n    metallicRoughness     = texture2D(MetallicTex, texCoord);\n    material.roughness     = metallicRoughness.g;\n    material.metallic     = metallicRoughness.b;\n  }\n\n  material.reflectance   = getLuminanceParamValue(Reflectance, ReflectanceTex, ReflectanceTexType, texCoord);\n#endif // ENABLE_PBR\n  material.emission         = getLuminanceParamValue(EmissiveStrength, EmissiveStrengthTex, EmissiveStrengthTexType, texCoord);\n#endif // ENABLE_TEXTURES\n  material.opacity       = Opacity * baseColor.a;\n\n#ifdef ENABLE_TEXTURES\n#ifdef ENABLE_PBR\n  if (NormalTexType != 0) {\n      mat3 tbn = cotangentFrame(normal, viewVector, texCoord);\n      normal = normalize(tbn * (texture2D(NormalTex, texCoord).rgb * 2.0 - 1.0));\n  }\n#endif // ENABLE_PBR\n#endif // ENABLE_TEXTURES\n#endif // ENABLE_MULTI_DRAW\n\n  fragColor = pbrSurfaceRadiance(material, normal, viewVector);\n  // fragColor = vec4(texture2D(NormalTex, texCoord).rgb, 1.0);\n  // fragColor = metallicRoughness;\n  // fragColor = vec4(material.baseColor, 1.0);;\n  // fragColor = vec4(vec3(material.metallic), 1.0);;\n  // fragColor = vec4(vec3(material.roughness), 1.0);;\n  // fragColor = vec4(vec3(material.ambientOcclusion), 1.0);\n  \n#ifdef DEBUG_GEOM_ID\n  // ///////////////////////\n  // Debug Draw ID (this correlates to GeomID within a GLGeomSet)\n  float geomId = v_geomItemData.w;\n  fragColor.rgb = getDebugColor(geomId);\n  // ///////////////////////\n#endif\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb * exposure);\n#endif\n\n#elif defined(DRAW_GEOMDATA)\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n    discard;\n    return;\n  }\n  \n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId,v_drawItemId, isOrthographic);\n   \n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = getHighlightColor(drawItemId);\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n\n}")}bind(g,I){const C=g;super.bind(g,I);const F=this.__gl;C.envMap&&C.envMap.bind(C);const{exposure:U}=C.unifs;return U&&F.uniform1f(U.location,C.exposure),!0}static getPackedMaterialData(g){const I=new Float32Array(12),C=g.getParameter("BaseColor").value;return I[0]=C.r,I[1]=C.g,I[2]=C.b,I[3]=C.a,I[4]=g.getParameter("AmbientOcclusion").value,I[5]=g.getParameter("Metallic").value,I[6]=g.getParameter("Roughness").value,I[7]=g.getParameter("Reflectance").value,I[8]=g.getParameter("EmissiveStrength").value,I[9]=g.getParameter("Opacity").value,I}static getMaterialTemplate(){return Ul}}const Ul=new WC("StandardSurfaceShader_template");t.register("StandardSurfaceShader",Fl),t.register("TransparentSurfaceShader",Fl);class ll extends VF{constructor(g){super(g,"ScreenSpaceShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  v_drawItemId = float(drawItemId);\n  v_geomItemData  = getInstanceData(drawItemId);\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n\n  gl_Position = (modelMatrix * vec4(positions, 1.0));\n\n  v_textureCoord = texCoords;\n  v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\n#ifdef ENABLE_MULTI_DRAW\nimport 'drawItemTexture.glsl'\n#endif // ENABLE_MULTI_DRAW\n\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\n\n#if defined(DRAW_COLOR)\n\n  #ifndef ENABLE_MULTI_DRAW\n\n    uniform color BaseColor;\n\n    #ifdef ENABLE_TEXTURES\n      uniform sampler2D BaseColorTex;\n      uniform int BaseColorTexType;\n    #endif\n\n  #endif // ENABLE_MULTI_DRAW\n#endif // DRAW_COLOR\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\n\n#if defined(DRAW_GEOMDATA)\n  uniform int isOrthographic;\n  import 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n  \n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  //////////////////////////////////////////////\n  // Color\n#if defined(DRAW_COLOR)\n\n  #ifdef ENABLE_MULTI_DRAW\n\n    vec2 materialCoords = v_geomItemData.zw;\n    vec4 baseColor = getMaterialValue(materialCoords, 0);\n\n  #else // ENABLE_MULTI_DRAW\n\n  #ifndef ENABLE_TEXTURES\n    vec4 baseColor = BaseColor;\n  #else\n    vec4 baseColor      = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);\n  #endif\n\n  #endif // ENABLE_MULTI_DRAW\n\n    fragColor = baseColor;\n\n  #ifdef ENABLE_INLINE_GAMMACORRECTION\n    fragColor.rgb = toGamma(fragColor.rgb);\n  #endif\n\n  //////////////////////////////////////////////\n  // GeomData\n#elif defined(DRAW_GEOMDATA)\n  fragColor = setFragColor_geomData(vec3(0,0,0), floatGeomBuffer, passId,v_drawItemId, isOrthographic);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_drawItemId);\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}static isOverlay(){return!0}static getPackedMaterialData(g){const I=new Float32Array(8),C=g.getParameter("BaseColor").value;return I[0]=C.r,I[1]=C.g,I[2]=C.b,I[3]=C.a,I}static getMaterialTemplate(){return tl}}const tl=new rC("ScreenSpaceShader_template");t.register("ScreenSpaceShader",ll);class el extends UF{constructor(){super()}init(g,I){super.init(g,I)}itemAddedToScene(g,I){if(g instanceof SC){const I=g;return!!this.filterGeomItem(I)&&(this.addGeomItem(I),I.setMetadata("glpass",this),!0)}return!1}itemRemovedFromScene(g,I){return g instanceof SC&&g.getMetadata("glpass")==this&&this.removeGeomItem(g)}filterGeomItem(g){return!0}addGeomItem(g){}removeGeomItem(g){return!1}constructShaders(g){let I,C;const F=this.__renderer.getOrCreateShader(g);return I=F.getGeomDataShaderName()?this.__renderer.getOrCreateShader(F.getGeomDataShaderName()):F,C=F.getSelectedShaderName()?this.__renderer.getOrCreateShader(F.getSelectedShaderName()):F,{glShader:F,glgeomdatashader:I,glselectedshader:C}}getGeomItemAndDist(g){let I,C;g instanceof Float32Array?(I=Math.round(g[1]),C=g[3]):(I=g[0]+((63&g[1])<<8),C=s.decode16BitFloatFrom2xUInt8(g.slice(2,3)));const F=this.renderer.glGeomItemLibrary.getGeomItem(I);if(F)return{geomItem:F,dist:C}}}class Ql extends b{constructor(g){super(),this.drawIdsTexture=null,this.highlightedIdsTexture=null,this.renderer=g,this.gl=g.gl,this.glGeomItems=[],this.glGeomIdsMapping={},this.glgeomItemEventHandlers=[],this.freeIndices=[],this.drawElementCounts=new Int32Array(0),this.drawElementOffsets=new Int32Array(0),this.highlightElementCounts=new Int32Array(0),this.highlightElementOffsets=new Int32Array(0),this.reserved=0,this.visibleItems=[],this.drawIdsArray=new Float32Array(0),this.drawIdsBufferDirty=!0,this.drawIdsTexture=null,this.highlightedItems=[],this.highlightedIdsArray=null,this.highlightedIdsTexture=null,this.highlightedIdsBufferDirty=!0,this.renderer.glGeomLibrary.on("geomDataChanged",(g=>{const I=this.glGeomIdsMapping[g.index];null!=I&&I.forEach((g=>{const I=this.glGeomItems[g];if(I.isVisible()){const g=this.visibleItems.indexOf(I),C=this.renderer.glGeomLibrary.getGeomOffsetAndCount(I.geomId);this.drawElementOffsets[g]=C[0],this.drawElementCounts[g]=C[1];const F=this.highlightedItems.indexOf(I);-1!=F&&(this.highlightElementOffsets[F]=C[0],this.highlightElementCounts[F]=C[1])}}))}))}addGLGeomItem(g){const I=this.freeIndices.length>0?this.freeIndices.pop():this.glGeomItems.length;this.glGeomIdsMapping[g.geomId]?this.glGeomIdsMapping[g.geomId].push(I):this.glGeomIdsMapping[g.geomId]=[I];const C={};g.visible&&this.visibleItems.push(g),C.visibilityChanged=I=>{I.visible?this.visibleItems.push(g):this.visibleItems.splice(this.visibleItems.indexOf(g),1),this.drawIdsBufferDirty||(this.drawIdsBufferDirty=!0,this.emit("updated"))},g.on("visibilityChanged",C.visibilityChanged),g.geomItem.isHighlighted()&&(this.highlightedItems.push(g),this.highlightedIdsBufferDirty=!0),C.highlightChanged=I=>{if(I&&I.name){if(this.highlightedItems.includes(g))return;this.highlightedItems.push(g)}else this.highlightedItems.splice(this.highlightedItems.indexOf(g),1);this.highlightedIdsBufferDirty=!0,this.emit("updated")},g.geomItem.on("highlightChanged",C.highlightChanged),this.glGeomItems[I]=g,this.glgeomItemEventHandlers[I]=C,this.drawIdsBufferDirty=!0,this.emit("updated")}removeGLGeomItem(g){const I=this.glGeomItems.indexOf(g),C=this.glGeomIdsMapping[g.geomId];C.splice(C.indexOf(I),1),0==C.length&&delete this.glGeomIdsMapping[g.geomId];const F=this.glgeomItemEventHandlers[I];if(g.geomItem.off("highlightChanged",F.highlightChanged),g.off("visibilityChanged",F.visibilityChanged),this.glGeomItems[I]=null,this.glgeomItemEventHandlers[I]=null,this.drawIdsArray[I]=0,this.drawElementOffsets[I]=0,this.drawElementCounts[I]=0,this.freeIndices.push(I),g.isVisible()){const I=this.visibleItems.indexOf(g);this.visibleItems.splice(I,1),this.drawIdsBufferDirty=!0}if(g.geomItem.isHighlighted()){const I=this.highlightedItems.indexOf(g);this.highlightedItems.splice(I,1),this.highlightedIdsBufferDirty=!0}this.emit("updated")}updateDrawIDsBuffer(g){(!this.drawIdsArray||this.visibleItems.length>this.drawIdsArray.length)&&(this.drawIdsArray=new Float32Array(this.visibleItems.length),this.drawElementOffsets=new Int32Array(this.visibleItems.length),this.drawElementCounts=new Int32Array(this.visibleItems.length)),this.visibleItems.forEach(((g,I)=>{const C=this.renderer.glGeomLibrary.getGeomOffsetAndCount(g.geomId);this.drawElementOffsets[I]=C[0],this.drawElementCounts[I]=C[1],this.drawIdsArray[I]=g.drawItemId}));const I=this.renderer.gl;if(!I.multiDrawElements)return;const C=g.boundTextures++;I.activeTexture(I.TEXTURE0+C);const F=2*s.nextPow2(Math.ceil(Math.sqrt(this.visibleItems.length)));this.drawIdsTexture?(this.drawIdsTexture.width<F||this.drawIdsTexture.height<F)&&this.drawIdsTexture.resize(F,F):this.drawIdsTexture=new dF(this.gl,{format:"webgl2"==I.name?"RED":"ALPHA",type:"FLOAT",width:F,height:F,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1});{const g=this.drawIdsTexture,C=this.drawIdsTexture.width;I.bindTexture(I.TEXTURE_2D,g.glTex);const F=0,U=0,l=1,t=g.getFormat(),e=g.getType(),Q=Math.ceil((U+this.visibleItems.length)/C);let d=0,n=this.visibleItems.length,i=U;for(let g=0;g<Q;g++){let g;i+n>C?(g=C-i,i=0):g=n;const U=d%C,Q=Math.floor(d/C),A=this.drawIdsArray.subarray(d,d+g);I.texSubImage2D(I.TEXTURE_2D,F,U,Q,g,l,t,e,A),d+=g,n-=g}}I.bindTexture(I.TEXTURE_2D,null),g.boundTextures--,this.drawIdsBufferDirty=!1}updateHighlightedIDsBuffer(g){if(this.highlightedIdsBufferDirty){(!this.highlightedIdsArray||this.highlightedItems.length>this.highlightedIdsArray.length)&&(this.highlightedIdsArray=new Float32Array(this.highlightedItems.length),this.highlightElementOffsets=new Int32Array(this.highlightedItems.length),this.highlightElementCounts=new Int32Array(this.highlightedItems.length)),this.highlightedItems.forEach(((g,I)=>{this.highlightedIdsArray[I]=g.drawItemId;const C=this.renderer.glGeomLibrary.getGeomOffsetAndCount(g.geomId);this.highlightElementOffsets[I]=C[0],this.highlightElementCounts[I]=C[1]}));for(let g=this.highlightedItems.length;g<this.highlightElementCounts.length;g++)this.highlightElementOffsets[g]=0,this.highlightElementCounts[g]=0;this.highlightedIdsBufferDirty=!1}const I=this.renderer.gl;if(!I.multiDrawElements)return;const C=g.boundTextures++;I.activeTexture(I.TEXTURE0+C);const F=s.nextPow2(Math.ceil(Math.sqrt(this.highlightedItems.length)));this.highlightedIdsTexture?(this.highlightedIdsTexture.width<F||this.highlightedIdsTexture.height<F)&&this.highlightedIdsTexture.resize(F,F):this.highlightedIdsTexture=new dF(this.gl,{format:"webgl2"==I.name?"RED":"ALPHA",type:"FLOAT",width:F,height:F,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1});{const g=this.highlightedIdsTexture,C=this.highlightedIdsTexture.width;I.bindTexture(I.TEXTURE_2D,g.glTex);const F=0,U=0,l=1,t=g.getFormat(),e=g.getType(),Q=Math.ceil((U+this.highlightedIdsArray.length)/C);let d=0,n=this.highlightedIdsArray.length,i=U;for(let g=0;g<Q;g++){let g;i+n>C?(g=C-i,i=0):g=n;const U=d%C,Q=Math.floor(d/C),A=this.highlightedIdsArray.subarray(d,d+g);I.texSubImage2D(I.TEXTURE_2D,F,U,Q,g,l,t,e,A),d+=g,n-=g}}I.bindTexture(I.TEXTURE_2D,null),g.boundTextures--}draw(g){if(this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(g),0!=this.visibleItems.length){if(this.drawIdsTexture){const{drawIdsTexture:I}=g.unifs;this.drawIdsTexture.bindToUniform(g,I)}this.bindAndRender(g,this.drawIdsArray,this.drawElementCounts,this.drawElementOffsets,this.visibleItems.length)}}drawHighlighted(g){if(0!=this.highlightedItems.length){if(this.highlightedIdsBufferDirty&&this.updateHighlightedIDsBuffer(g),this.highlightedIdsTexture){const{drawIdsTexture:I}=g.unifs;this.highlightedIdsTexture.bindToUniform(g,I)}this.bindAndRender(g,this.highlightedIdsArray,this.highlightElementCounts,this.highlightElementOffsets,this.highlightedItems.length)}}bindAndRender(g,I,C,F,U){const l=this.gl,t=g.unifs;t.instancedDraw&&l.uniform1i(g.unifs.instancedDraw.location,1),g.bindViewports(t,(()=>{this.multiDraw(g,I,C,F,U)}))}sortItems(g){const I=[],C=[];this.visibleItems.forEach(((F,U)=>{if(F){const l=F.geomItem.geomMatParam.value.translation.distanceTo(g);I.push(l),C.push(U)}})),C.sort(((g,C)=>I[C]-I[g]));const F=[],U=new Int32Array(this.drawElementCounts.length),l=new Int32Array(this.drawElementOffsets.length);C.forEach(((g,I)=>{F[I]=this.visibleItems[g],U[I]=this.drawElementCounts[g],l[I]=this.drawElementOffsets[g],this.drawIdsArray[I]=this.visibleItems[g].drawItemId})),this.visibleItems=F,this.drawElementCounts=U,this.drawElementOffsets=l,this.drawIdsBufferDirty=!0}destroy(){this.drawIdsTexture&&this.drawIdsTexture.destroy(),this.highlightedIdsTexture&&this.highlightedIdsTexture.destroy(),this.emit("destructing")}}class dl extends Ql{multiDraw(g,I,C,F,U){const l=this.gl;if(l.multiDrawArrays){const{occluded:I}=g.unifs;I&&l.uniform1i(I.location,0),l.multiDrawElements(l.LINES,C,0,l.UNSIGNED_INT,F,0,U),I&&(l.uniform1i(I.location,1),l.depthFunc(l.GREATER),l.multiDrawElements(l.LINES,C,0,l.UNSIGNED_INT,F,0,U),l.depthFunc(l.LEQUAL))}else{const{drawId:t,occluded:e}=g.unifs;e&&l.uniform1i(e.location,0);for(let g=0;g<U;g++)l.uniform1i(t.location,I[g]),l.drawElements(l.LINES,C[g],l.UNSIGNED_INT,F[g]);if(e){l.uniform1i(e.location,1),l.depthFunc(l.GREATER);for(let g=0;g<U;g++)l.uniform1i(t.location,I[g]),l.drawElements(l.LINES,C[g],l.UNSIGNED_INT,F[g]);l.depthFunc(l.LEQUAL)}}}}class nl extends Ql{multiDraw(g,I,C,F,U){const l=this.gl;if(l.multiDrawArrays)l.multiDrawArrays(l.POINTS,F,0,C,0,U);else{const{drawId:t}=g.unifs;for(let g=0;g<U;g++)l.uniform1i(t.location,I[g]),l.drawArrays(l.TRIANGLES,F[g],C[g])}}}class il extends Ql{multiDraw(g,I,C,F,U){const l=this.gl;if(l.multiDrawElements)l.multiDrawElements(l.TRIANGLES,C,0,l.UNSIGNED_INT,F,0,U);else{const{drawId:t}=g.unifs;for(let g=0;g<U;g++)l.uniform1i(t.location,I[g]),l.drawElements(l.TRIANGLES,C[g],l.UNSIGNED_INT,F[g])}}}class Al extends b{constructor(g,I,C){super(),this.glGeomDataShaderKey="",this.glHighlightShaderKey="",this.pass=g,this.gl=I,this.glShader=C.glShader,this.glGeomDataShader=C.glgeomdatashader?C.glgeomdatashader:C.glShader,this.glHighlightShader=C.glselectedshader?C.glselectedshader:C.glShader,this.glGeomItemSets={},this.glShaderKey=C.glShader.getId()+"multidraw-draw",this.glGeomDataShader&&(this.glGeomDataShaderKey=this.glGeomDataShader.getId()+"multidraw-geomdata"),this.glHighlightShader&&(this.glHighlightShaderKey=this.glHighlightShader.getId()+"multidraw-highlight")}getOrCreateGLGeomItemSet(g){let I;if(g instanceof mI||g instanceof bI){if(this.glGeomItemSets.GLMesh)return this.glGeomItemSets.GLMesh;I=new il(this.pass.renderer),this.glGeomItemSets.GLMesh=I}else if(g instanceof rI||g instanceof GI){if(this.glGeomItemSets.GLLines)return this.glGeomItemSets.GLLines;I=new dl(this.pass.renderer),this.glGeomItemSets.GLLines=I}else{if(!(g instanceof cI||g instanceof JI))throw new Error("Unsupported geom type:"+g.constructor.name);if(this.glGeomItemSets.GLPoints)return this.glGeomItemSets.GLPoints;I=new nl(this.pass.renderer),this.glGeomItemSets.GLPoints=I}return I.on("updated",(()=>{this.emit("updated")})),I}addGLGeomItem(g){const I=g.geomItem,C=I.geomParam.value,F=g.geomItem.materialParam.value,U=()=>{this.pass.removeGeomItem(I),this.pass.renderer.assignTreeItemToGLPass(I)};F.on("transparencyChanged",U),I.materialParam.on("valueChanged",U),I.geomParam.on("valueChanged",U);const l=this.getOrCreateGLGeomItemSet(C);g.material=F,g.GLGeomItemSet=l,g.geomItemParamChanged=U,l.addGLGeomItem(g)}removeGLGeomItem(g){const I=g.geomItem,C=g.material,F=g.geomItemParamChanged;C.off("transparencyChanged",F),I.materialParam.off("valueChanged",F),I.geomParam.off("valueChanged",F),g.material=null,g.geomItemParamChanged=null;g.GLGeomItemSet.removeGLGeomItem(g),g.GLGeomItemSet=null}bindShader(g,I,C){const F=this.gl;if(g.isCompiledForTarget(C)||(F.multiDrawElements?I.shaderopts.directives.push("#define ENABLE_MULTI_DRAW\n#extension GL_ANGLE_multi_draw : enable"):I.shaderopts.directives.push("#define ENABLE_MULTI_DRAW"),g.compileForTarget(C,I.shaderopts),I.shaderopts.directives.pop()),!g.bind(I,C))throw new Error("Unable to bind shader:"+g);this.pass.renderer.glGeomItemLibrary.bind(I),this.pass.renderer.glGeomLibrary.bind(I),this.pass.renderer.glMaterialLibrary.bind(I)}draw(g){this.bindShader(this.glShader,g,this.glShaderKey);for(const I in this.glGeomItemSets)this.glGeomItemSets[I].draw(g);this.glShader.unbind(g)}drawHighlightedGeoms(g){if(this.glHighlightShader){this.bindShader(this.glHighlightShader,g,this.glHighlightShaderKey);for(const I in this.glGeomItemSets)this.glGeomItemSets[I].drawHighlighted(g);this.glHighlightShader.unbind(g)}}drawGeomData(g){this.bindShader(this.glGeomDataShader,g,this.glGeomDataShaderKey);const I=g.gl,{floatGeomBuffer:C,passId:F}=g.unifs;C&&I.uniform1i(C.location,g.floatGeomBuffer?1:0),F&&I.uniform1i(F.location,g.passIndex);for(const I in this.glGeomItemSets)this.glGeomItemSets[I].draw(g);this.glGeomDataShader.unbind(g)}sortItems(g){for(const I in this.glGeomItemSets)this.glGeomItemSets[I].sortItems(g)}}class Bl extends el{constructor(){super(),this.__glshadermaterials={},this.__glShaderGeomSets={}}init(g,I){super.init(g,I)}getPassType(){return FF.OPAQUE}filterGeomItem(g){const I=g.materialParam.value;return this.checkMaterial(I)}checkMaterial(g){return!g.isTransparent()}removeAndReAddGeomItem(g){this.removeGeomItem(g),this.__renderer.assignTreeItemToGLPass(g)}addGeomItem(g){const I=g.materialParam,C=I.value,F=this.renderer.glGeomLibrary,U=this.renderer.glGeomItemLibrary;if(!C.isTextured()&&C.getShaderClass().supportsInstancing()){const I=C.getShaderName();let F=this.__glShaderGeomSets[I];if(!F){const g=this.constructShaders(I);F=new Al(this,this.__gl,g),F.on("updated",(()=>{this.__renderer.requestRedraw()})),this.__glShaderGeomSets[I]=F}const U=this.renderer.glGeomItemLibrary.getGLGeomItem(g);return F.addGLGeomItem(U),U.GLShaderGeomSets=F,this.emit("updated"),!0}const l=F.constructGLGeom(g.geomParam.value),t=U.getGLGeomItem(g),e=()=>{this.removeGeomItem(g),this.__renderer.assignTreeItemToGLPass(g)};I.on("valueChanged",e),t.materialChanged=e;const Q=C.getShaderName(),d=this.renderer.glMaterialLibrary.getGLMaterial(C);let n=this.__glshadermaterials[Q];if(!n){const g=this.constructShaders(Q);n=new SU(this.__gl,this,g),this.__glshadermaterials[Q]=n,n.on("updated",(()=>{this.__renderer.requestRedraw()}))}return n.addGLGeomItem(t,l,d),!0}removeGeomItem(g){const I=this.renderer.glGeomItemLibrary.getGLGeomItem(g);if(I.GLShaderGeomSets){return I.GLShaderGeomSets.removeGLGeomItem(I),I.GLShaderGeomSets=null,!0}const C=g.materialParam,F=I.materialChanged;if(C&&F&&(C.off("valueChanged",F),I.materialChanged=null),I.GLGeomItemSet){return I.GLGeomItemSet.removeGLGeomItem(I),I.GLGeomItemSet=null,!0}return!0}removeMaterial(g){const I=g.getShaderName(),C=this.__glshadermaterials[I];if(!C||C!=g.getMetadata("glshaderMaterials"))return void console.warn("Material not found in pass");const F=g.getMetadata("glMaterialGeomItemSets");C.removeMaterialGeomItemSets(F)}__traverseTreeAndDraw(g){for(const I in this.__glShaderGeomSets)this.__glShaderGeomSets[I].draw(g);for(const I in this.__glshadermaterials)this.__glshadermaterials[I].draw(g);g.glGeom&&g.glGeom.unbind(g)}draw(g){const I=this.__gl;I.disable(I.BLEND),I.disable(I.CULL_FACE),I.enable(I.DEPTH_TEST),I.depthFunc(I.LEQUAL),I.depthMask(!0),this.__traverseTreeAndDraw(g),g.viewport.drawSilhouettes(g)}drawHighlightedGeoms(g){const I=this.__gl;I.disable(I.CULL_FACE);for(const I in this.__glShaderGeomSets)this.__glShaderGeomSets[I].drawHighlightedGeoms(g);for(const I in this.__glshadermaterials){this.__glshadermaterials[I].drawHighlightedGeoms(g)}g.glGeom&&g.glGeom.unbind(g)}drawGeomData(g){g.passIndex=this.passIndex;const I=this.__gl;I.disable(I.BLEND),I.disable(I.CULL_FACE),I.enable(I.DEPTH_TEST),I.depthFunc(I.LEQUAL),I.depthMask(!0);for(const I in this.__glShaderGeomSets)this.__glShaderGeomSets[I].drawGeomData(g);for(const I in this.__glshadermaterials){this.__glshadermaterials[I].drawGeomData(g)}g.glGeom&&g.glGeom.unbind(g)}}KU.registerPass(Bl,FF.OPAQUE);class al extends VF{constructor(g){super(g,"FattenLinesShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\nattribute vec3 positions;  //(location = 0)\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  v_texCoord = positions.xy+0.5;\n  gl_Position = vec4(positions.xy*2.0, -1.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D colorTexture;\nuniform sampler2D depthTexture;\nuniform vec2 screenSize;\n\nuniform float growth;\n\nvarying vec2 v_texCoord;\n\nbool sampleNeiPixel(vec2 fragCoord, inout vec4 res) {\n  res = texture2D(colorTexture, fragCoord/screenSize);\n  if (res.a > 0.0) {\n    return true;\n  }\n  return false;\n}\n\nvec4 samplePixels(vec2 fragCoord) {\n  vec4 res = vec4(0.0);\n  \n  if (sampleNeiPixel(fragCoord, res)) return res; // M\n  \n  // Search surrounding pixels for geoms\n  if (sampleNeiPixel(fragCoord+vec2( 1, 0), res)) return res; // E\n  if (sampleNeiPixel(fragCoord+vec2(-1, 0), res)) return res; // W\n  if (sampleNeiPixel(fragCoord+vec2( 0, 1), res)) return res; // N\n  if (sampleNeiPixel(fragCoord+vec2( 0,-1), res)) return res; // S\n  if (sampleNeiPixel(fragCoord+vec2( 1, 1), res)) return res; // NW\n  if (sampleNeiPixel(fragCoord+vec2(-1, 1), res)) return res; // NE\n  if (sampleNeiPixel(fragCoord+vec2( 1,-1), res)) return res; // SW\n  if (sampleNeiPixel(fragCoord+vec2(-1,-1), res)) return res; // SE\n  \n  return res;\n}\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  fragColor = samplePixels(gl_FragCoord.xy);\n  if (fragColor.a < 0.0001) {\n    discard; \n  }\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}class Vl extends Bl{constructor(){super(),this.linesGeomDataBuffer=null,this.fattenLinesShader=null,this.quad=null,this.fbo=null}init(g,I){super.init(g,I)}filterGeomItem(g){const I=g.geomParam.value;return I instanceof rI||I instanceof GI||I instanceof cI||I instanceof JI}__checkFramebuffer(g,I){const C=this.__gl;let F;if(F="webgl2"==C.name?C.checkFramebufferStatus(C.DRAW_FRAMEBUFFER):C.checkFramebufferStatus(C.FRAMEBUFFER),F!==C.FRAMEBUFFER_COMPLETE)switch(C.bindTexture(C.TEXTURE_2D,null),"webgl2"==C.name?C.bindFramebuffer(C.DRAW_FRAMEBUFFER,null):C.bindFramebuffer(C.FRAMEBUFFER,null),console.warn("Error creating Fbo width:",g,", height:",I),F){case C.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case C.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case C.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case C.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}}draw(g){const I=this.__gl;I.enable(I.BLEND),I.blendFunc(I.SRC_ALPHA,I.ONE_MINUS_SRC_ALPHA),I.enable(I.DEPTH_TEST),I.depthFunc(I.LEQUAL),I.depthMask(!0),this.__traverseTreeAndDraw(g),I.disable(I.BLEND)}drawGeomData(g){const I=this.__gl;if(g.geomDataFbo){this.linesGeomDataBuffer||(this.linesGeomDataBuffer=new dF(I,{type:this.__renderer.floatGeomBuffer?"FLOAT":"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:1,height:2}),this.fattenLinesShader=new al(I),this.quad=new lU(I,new HI(1,1)));const C=g.geomDataFbo,F=C.width,U=C.height;if(this.linesGeomDataBuffer.width!=F||this.linesGeomDataBuffer.height!=U){this.fbo&&(I.deleteFramebuffer(this.fbo),this.fbo=null),this.linesGeomDataBuffer.resize(F,U),this.fbo=I.createFramebuffer();const g=this.linesGeomDataBuffer.glTex,l=C.__depthTexture;"webgl2"==I.name?(I.bindFramebuffer(I.DRAW_FRAMEBUFFER,this.fbo),I.framebufferTexture2D(I.DRAW_FRAMEBUFFER,I.COLOR_ATTACHMENT0,I.TEXTURE_2D,g,0),I.framebufferTexture2D(I.DRAW_FRAMEBUFFER,I.DEPTH_ATTACHMENT,I.TEXTURE_2D,l,0)):(I.bindFramebuffer(I.FRAMEBUFFER,this.fbo),I.framebufferTexture2D(I.FRAMEBUFFER,I.COLOR_ATTACHMENT0,I.TEXTURE_2D,g,0),I.framebufferTexture2D(I.FRAMEBUFFER,I.DEPTH_ATTACHMENT,I.TEXTURE_2D,l,0)),this.__checkFramebuffer(F,U)}else"webgl2"==I.name?I.bindFramebuffer(I.DRAW_FRAMEBUFFER,this.fbo):I.bindFramebuffer(I.FRAMEBUFFER,this.fbo);I.colorMask(!0,!0,!0,!0),I.clearColor(0,0,0,0),I.clear(I.COLOR_BUFFER_BIT)}if(super.drawGeomData(g),g.geomDataFbo){g.geomDataFbo.bindForWriting(g),this.fattenLinesShader.bind(g);const{colorTexture:C,screenSize:F}=g.unifs;this.linesGeomDataBuffer.bindToUniform(g,C);const U=g.geomDataFbo;I.uniform2f(F.location,U.width,U.height),this.quad.bindAndDraw(g)}}}KU.registerPass(Vl,FF.OPAQUE);class Rl extends el{constructor(){super(),this.listenerIDs={},this.itemCount=0,this.__glShaderGeomSets={},this.transparentItems=[],this.transparentItemIndices={},this.freeList=[],this.visibleItems=[],this.prevSortCameraPos=new d,this.sortCameraMovementDistance=0,this.reSort=!1}init(g,I){super.init(g,I),this.itemCount=0,this.__glShaderGeomSets={},this.transparentItems=[],this.transparentItemIndices={},this.freeList=[],this.visibleItems=[],this.prevSortCameraPos=new d(999,999,999),this.sortCameraMovementDistance=.25,this.reSort=!1}getPassType(){return FF.TRANSPARENT}filterGeomItem(g){const I=g.geomParam.value;if(I instanceof rI||I instanceof cI||I instanceof JI||I instanceof GI)return!1;return g.materialParam.value.isTransparent()}resortNeeded(){this.reSort=!0}addGeomItem(g){this.itemCount++;const I={};this.listenerIDs[g.getId()]=I;const C=g.materialParam,F=C.value,U=F.getShaderName(),l=this.constructShaders(U);if(!F.isTextured()&&F.getShaderClass().supportsInstancing()){let C=this.__glShaderGeomSets[U];C||(C=new Al(this,this.__gl,l),C.on("updated",(()=>{this.renderer.requestRedraw()})),this.__glShaderGeomSets[U]=C);const F=this.renderer.glGeomItemLibrary.getGLGeomItem(g);return C.addGLGeomItem(F),I["glGeomItem.visibilityChanged"]=F.on("visibilityChanged",(()=>{this.resortNeeded()})),this.emit("updated"),F.GLShaderGeomSets=C,void(this.reSort=!0)}const t=this.renderer.glGeomLibrary.constructGLGeom(g.geomParam.value),e=this.renderer.glGeomItemLibrary.getGLGeomItem(g);if(!e)throw new Error("glGeomItem not found for geomItem:"+g.getName());const Q=this.renderer.glMaterialLibrary.getGLMaterial(F),d=()=>{F.removeListenerById("valueChanged",I["material.valueChanged"]),F.removeListenerById("transparencyChanged",I["material.transparencyChanged"]),C.removeListenerById("valueChanged",I["materialParam.valueChanged"]),this.removeGeomItem(g),this.renderer.assignTreeItemToGLPass(g)};I["material.valueChanged"]=F.on("valueChanged",d),I["material.transparencyChanged"]=F.on("transparencyChanged",d),I["materialParam.valueChanged"]=C.on("valueChanged",d);I["glGeomItem.visibilityChanged"]=e.on("visibilityChanged",(g=>{if(g.visible)this.visibleItems.push(n);else{const g=this.visibleItems.indexOf(n);this.visibleItems.splice(g,1)}this.reSort=!0})),I["GeomMat.valueChanged"]=g.geomMatParam.on("valueChanged",(()=>{this.reSort=!0}));const n={geomItem:g,shaders:l,glGeom:t,glMaterial:Q,glGeomItem:e,material:F};let i;i=this.freeList.length>0?this.freeList.pop():this.transparentItems.length,this.transparentItems[i]=n,this.transparentItemIndices[g.getId()]=i,g.isVisible()&&this.visibleItems.push(n),this.reSort=!0}removeGeomItem(g){this.itemCount--;const I=this.renderer.glGeomItemLibrary.getGLGeomItem(g);if(!I)throw new Error("glGeomItem not found for geomItem:"+g.getName());const C=this.listenerIDs[g.getId()];delete this.listenerIDs[g.getId()];const F=g.getParameter("Material"),U=F.value;if(I.removeListenerById("visibilityChanged",C["glGeomItem.visibilityChanged"]),I.GLShaderGeomSets){return I.GLShaderGeomSets.removeGLGeomItem(I),I.GLShaderGeomSets=null,!0}{const I=this.transparentItemIndices[g.getId()],l=this.transparentItems[I];delete this.transparentItemIndices[g.getId()],U.removeListenerById("valueChanged",C["material.valueChanged"]),U.removeListenerById("transparencyChanged",C["material.transparencyChanged"]),F.removeListenerById("valueChanged",C["materialParam.valueChanged"]),g.getParameter("GeomMat").removeListenerById("valueChanged",C["GeomMat.valueChanged"]),this.transparentItems[I]=null,this.freeList.push(I);const t=this.visibleItems.indexOf(l);-1!=t&&this.visibleItems.splice(t,1)}return this.emit("updated"),!0}sortItems(g){for(const I in this.__glShaderGeomSets)this.__glShaderGeomSets[I].sortItems(g);for(const I of this.visibleItems){const C=I.glGeomItem.geomItem.geomMatParam.value;I.dist=C.translation.distanceTo(g)}this.visibleItems.sort(((g,I)=>g.dist>I.dist?-1:g.dist<I.dist?1:0)),this.reSort=!1}_drawItem(g,I,C){if(C.currentGLMaterial!=I.glMaterial&&(C.currentGLMaterial=I.glMaterial,!C.currentGLMaterial.bind(g)))return;if(C.currentGLGeom!=I.glGeom&&(C.currentGLGeom=I.glGeom,!C.currentGLGeom.bind(g)))return;I.glGeomItem.bind(g)&&g.bindViewports(g.unifs,(()=>{C.currentGLGeom.draw(g)}))}_drawItems(g){for(const I in this.__glShaderGeomSets)this.__glShaderGeomSets[I].draw(g);const I={currentglShader:null,currentGLMaterial:null,currentGLGeom:null};for(const C of this.visibleItems){const F=C.shaders.glShader;if(I.currentglShader!=F){if(!F.bind(g,"color"))continue;const C=this.__gl,U=g.unifs;U.instancedDraw&&C.uniform1i(U.instancedDraw.location,0),this.renderer.glGeomItemLibrary.bind(g),I.currentglShader=F}this._drawItem(g,C,I)}}draw(g){if(0==this.itemCount)return;const I=this.__gl,C=g.viewXfo.tr;if(this.reSort||C.distanceTo(this.prevSortCameraPos)>this.sortCameraMovementDistance)if(this.sortItems(C),this.prevSortCameraPos=C,g.vrviewport)this.sortCameraMovementDistance=.2*g.viewScale;else if(g.viewport){const I=g.viewport.getCamera();this.sortCameraMovementDistance=.3*I.getFocalDistance()}I.enable(I.DEPTH_TEST),I.depthFunc(I.LESS),I.enable(I.BLEND),I.blendEquation(I.FUNC_ADD),g.pass="ADD",I.blendFunc(I.SRC_ALPHA,I.ONE_MINUS_SRC_ALPHA),I.enable(I.CULL_FACE),I.cullFace(I.BACK),this._drawItems(g),I.disable(I.BLEND),I.depthMask(!0)}drawHighlightedGeoms(g){const I=this.__gl;I.disable(I.CULL_FACE);for(const I in this.__glShaderGeomSets)this.__glShaderGeomSets[I].drawHighlightedGeoms(g);const C={currentglShader:null,currentGLMaterial:null,currentGLGeom:null};for(const F of this.visibleItems){if(!F.geomItem.isHighlighted())continue;if(!F.shaders.glselectedshader)continue;const U=F.shaders;if(C.currentglShader!=U.glselectedshader){if(!U.glselectedshader.bind(g,"highlight"))continue;C.currentglShader=U.glselectedshader}const{floatGeomBuffer:l,passId:t,instancedDraw:e}=g.unifs;l&&I.uniform1i(l.location,I.floatGeomBuffer?1:0),t&&I.uniform1i(t.location,this.passIndex),e&&I.uniform1i(e.location,0),this.renderer.glGeomItemLibrary.bind(g),this._drawItem(g,F,C)}C.currentGLGeom&&C.currentGLGeom.unbind(g)}drawGeomData(g){const I=this.__gl;I.disable(I.BLEND),I.disable(I.CULL_FACE),I.enable(I.DEPTH_TEST),I.depthFunc(I.LESS),I.depthMask(!0);for(const I in this.__glShaderGeomSets)this.__glShaderGeomSets[I].drawGeomData(g);const C={currentglShader:null,currentGLMaterial:null,currentGLGeom:null};for(const F of this.visibleItems){if(!F.glGeomItem.geomItem.isSelectable())continue;const U=F.shaders;if(!U.glgeomdatashader)continue;if(C.currentglShader!=U.glgeomdatashader){if(!U.glgeomdatashader.bind(g,"geomdata"))continue;C.currentglShader=U.glgeomdatashader}const{floatGeomBuffer:l,passId:t,instancedDraw:e}=g.unifs;l&&I.uniform1i(l.location,I.floatGeomBuffer?1:0),t&&I.uniform1i(t.location,this.passIndex),e&&I.uniform1i(e.location,0),this.renderer.glGeomItemLibrary.bind(g),this._drawItem(g,F,C)}C.currentGLGeom&&C.currentGLGeom.unbind(g)}}KU.registerPass(Rl,FF.TRANSPARENT);class sl extends VF{constructor(g){super(g,"AtlasLayoutShader"),this.setShaderStage("VERTEX_SHADER","\n\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\nuniform vec2 pos;\nuniform vec2 size;\nuniform vec2 srctextureDim;\nconst int border = 2;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(vec2(-1.0, -1.0) + (pos * 2.0) + (v_texCoord * size * 2.0), 0.0, 1.0);\n\n  vec2 borderVec2 = vec2(float(border), float(border));\n  v_texCoord *= (srctextureDim + (borderVec2 * 2.0)) / srctextureDim;\n  v_texCoord -= borderVec2 / srctextureDim;\n}\n\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D srctexture;\nuniform vec2 srctextureDim;\nuniform bool alphaFromLuminance;\nuniform bool invert;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n\nfloat luminanceFromRGB(vec3 rgb) {\n  return 0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b;\n}\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n  vec2 pixelCoord = v_texCoord*srctextureDim;\n  vec2 uv = v_texCoord;\n\n  // Wrap X coords\n  if (pixelCoord.x < 0.0) {\n    uv.x += 1.0/srctextureDim.x;\n    uv.y = 1.0 - uv.y;\n  }\n  else if (pixelCoord.x > srctextureDim.x) {\n    uv.x -= 1.0/srctextureDim.x;\n    uv.y = 1.0 - uv.y;\n  }\n\n  // Wrap Y coords\n  if (pixelCoord.y < 0.0) {\n    uv.y += 1.0/srctextureDim.y;\n    uv.x = 1.0 - uv.x;\n  }\n  else if (pixelCoord.y > srctextureDim.y) {\n    uv.y -= 1.0/srctextureDim.y;\n    uv.x = 1.0 - uv.x;\n  }\n\n  vec4 texel = texture2D(srctexture, uv);\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  // TODO: check why we pre-multiply alphas here.\n  // fragColor = vec4(texel.rgb/texel.a, texel.a);\n\n  if (alphaFromLuminance) {\n    fragColor = vec4(texel.rgb, luminanceFromRGB(texel.rgb));\n  }\n  else {\n    fragColor = texel;\n  }\n  \n  if (invert) {\n    fragColor = vec4(1.0) - fragColor;\n  }\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n\n")}}class Zl extends sF{constructor(g,I,C="RGBA",F="FLOAT"){super(g),this.__asyncCount=0,this.loaded=!1,this.ready=!1,this.__layout=[],this.__layoutVec4s=[],this.__atlasLayoutShaderBinding=null,this.__atlasLayoutShader=null,this.__name=I,this.__formatParam=C,this.__typeParam=F,this.clearColor=new A(0,0,0,0),this.__subImages=[],this.__layoutNeedsRegeneration=!1,this.__asyncCount=0,this.loaded=!1}incAsyncCount(g=1){this.__asyncCount+=g,this.ready=!1}decAsyncCount(){this.__asyncCount>0&&(this.__asyncCount--,0==this.__asyncCount&&(this.loaded=!0,this.emit("loaded")))}isLoaded(){return 0==this.__asyncCount}getMainImage(){return this.frameBuffer}addSubImage(g){if(g instanceof dI){const I=new dF(this.__gl,g);g.isLoaded()||(this.incAsyncCount(),g.on("loaded",(()=>{this.decAsyncCount()}))),g.setMetadata("ImageAtlas_gltex",I),I.addRef(this);const C=()=>{this.__layoutNeedsRegeneration=!0,this.renderAtlas()};g.on("updated",C),this.__subImages.push(I)}else{const I=g;I.addRef(this),this.__subImages.push(I)}return this.__layoutNeedsRegeneration=!0,this.__subImages.length-1}removeSubImage(g){let I;if(g instanceof dI){const C=g.getMetadata("ImageAtlas_gltex");I=this.__subImages.indexOf(C),g.deleteMetadata("ImageAtlas_gltex")}else I=this.__subImages.indexOf(g);this.__subImages[I].removeRef(this),this.__subImages.splice(I,1),this.__layoutNeedsRegeneration=!0}getSubImage(g){return this.__subImages[g]}numSubImages(){return this.__layout?this.__layout.length:this.__subImages.length}generateAtlasLayout(g){if(0==this.__subImages.length)return void(this.__layoutNeedsRegeneration=!1);const I=[];this.__subImages.forEach(((g,C)=>{I.push({w:g.width+4,h:g.height+4,area:g.width*g.height,index:C})})),I.sort(((g,I)=>g.area>I.area?-1:g.area<I.area?1:0));const C=new S;C.fit(I),this.__layout=[],I.forEach(((g,I)=>{g.fit?this.__layout[g.index]={pos:new Q(g.fit.x+2,g.fit.y+2),size:new Q(g.w,g.h)}:console.warn("Unable to fit image")}));const F=C.root.w,U=C.root.h;this.configure({width:F,height:U,format:"FLOAT"==this.__typeParam&&"RGB"==this.__formatParam?"RGBA":this.__formatParam,type:this.__typeParam,filter:"LINEAR"});const l=this.__gl;if(l.__quadVertexIdsBuffer||l.setupInstancedQuad(),!this.__atlasLayoutShader){this.__atlasLayoutShader=new sl(this.__gl);const g=[];"webgl2"==l.name&&g.push("#define ENABLE_ES3");const I=this.__atlasLayoutShader.compileForTarget("GLImageAtlas",{directives:g});this.__atlasLayoutShaderBinding=mF(this.__gl,I.attrs,l.__quadattrbuffers,l.__quadIndexBuffer)}let t=Math.round(Math.sqrt(1*this.__layout.length)+.5);if(t=s.nextPow2(t),t%1!=0&&(t+=1-t%1),l.floatTexturesSupported){const g=new Float32Array(t*t*4);for(let I=0;I<this.__layout.length;I++){const C=this.__layout[I];new n(new Float32Array(g.buffer,4*I*4,4)).set(C.pos.x/F,C.pos.y/U,C.size.x/F,C.size.y/U)}this.__atlasLayoutTexture&&this.__atlasLayoutTexture.width==t&&this.__atlasLayoutTexture.height==t?this.__atlasLayoutTexture.bufferData(g,t,t):(this.__atlasLayoutTexture&&this.__atlasLayoutTexture.destroy(),this.__atlasLayoutTexture=new dF(l,{format:"RGBA",type:"FLOAT",filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1,width:t,height:t,data:g}))}else this.__layoutVec4s=[],this.__layout.forEach(((g,I)=>{this.__layoutVec4s[I]=[g.pos.x/F,g.pos.y/U,g.size.x/F,g.size.y/U]}));this.textureDesc[0]=this.width,this.textureDesc[1]=this.height,this.textureDesc[2]=this.__atlasLayoutTexture.width,this.__layoutNeedsRegeneration=!1}getLayoutData(g){return this.__layoutVec4s[g]}renderAtlas(g=!1,I=0){if(0==this.__subImages.length)return;this.__layoutNeedsRegeneration&&this.generateAtlasLayout();const C=this.__gl,F={};this.bindForWriting(F,!0),this.__atlasLayoutShader.bind(F,"GLImageAtlas"),this.__atlasLayoutShaderBinding.bind(F);const U=new Q(1/this.width,1/this.height),l=F.unifs;for(let g=I;g<this.__subImages.length;g++){const I=this.__subImages[g],t=this.__layout[g];I.bindToUniform(F,l.srctexture)&&(C.uniform2fv(l.pos.location,t.pos.multiply(U).asArray()),C.uniform2fv(l.size.location,t.size.multiply(U).asArray()),C.uniform2f(l.srctextureDim.location,I.width,I.height),C.uniform1i(l.alphaFromLuminance.location,I.alphaFromLuminance?1:0),C.uniform1i(l.invert.location,I.invert?1:0),C.drawQuad(),F.boundTextures--)}g&&this.cleanup(),this.unbind(F),this.emit("updated")}isReady(){return null!=this.__atlasLayoutTexture}bindToUniform(g,I){super.bindToUniform(g,I);const C=g.unifs;if(this.__atlasLayoutTexture){const F=C[I.name+"_layout"];F&&this.__atlasLayoutTexture.bindToUniform(g,F);const U=C[I.name+"_desc"];U&&this.__gl.uniform4fv(U.location,this.textureDesc)}else{const g=C[I.name+"_desc"];g&&this.__gl.uniform4f(g.location,this.width,this.height,0,0)}return!0}cleanup(){for(const g of this.__subImages)g.removeRef(this);this.__subImages=[],this.destroy()}destroy(){this.cleanup(),super.destroy()}}class ol extends UF{constructor(){super(),this.atlas=null,this.indexArrayUpdateNeeded=!1,this.instanceIdsBuffer=null,this.indexArray=new Float32Array(0),this.glshader=null,this.shaderComp={},this.shaderBinding=null,this.modelMatrixArray=[],this.billboardDataArray=[],this.tintColorArray=[],this.width=0,this.drawItemsTexture=null,this.billboards=[],this.dirtyBillboards=new Set,this.freeIndices=[],this.drawCount=0,this.threshold=0,this.updateRequested=!1,this.prevSortCameraPos=new d}init(g,I){super.init(g,I),this.atlas=new Zl(this.renderer.gl,"Billboards","RGBA","UNSIGNED_BYTE"),this.atlas.clearColor=new A(1,1,1,0);const C=g=>this.emit("updated",g);this.atlas.on("loaded",C),this.atlas.on("updated",C)}getPassType(){return FF.TRANSPARENT}itemAddedToScene(g,I){return g instanceof xC&&(this.addBillboard(g),!0)}itemRemovedFromScene(g,I){return g instanceof xC&&(this.removeBillboard(g),!0)}filterRenderTree(){}addBillboard(g){const I=g.imageParam,C=I.value;if(!C)return void I.on("valueChanged",(()=>this.addBillboard(g)));let F;F=this.freeIndices.length>0?this.freeIndices.pop():this.billboards.length;const U=this.atlas.addSubImage(C);g.setMetadata("GLBillboardsPass_Index",F);const l=()=>{g.isVisible()?(this.drawCount++,this.dirtyBillboards.add(F)):this.drawCount--,this.reqUpdateIndexArray()};g.on("visibilityChanged",l);const t=()=>{g.isVisible()&&(this.dirtyBillboards.add(F),this.emit("updated"))};g.globalXfoParam.on("valueChanged",t),g.alphaParam.on("valueChanged",t),g.on("highlightChanged",t),g.isVisible()&&this.drawCount++,this.billboards[F]={billboard:g,imageIndex:U,visibilityChanged:l,updateBillboard:t},this.indexArrayUpdateNeeded=!0,this.requestUpdate()}removeBillboard(g){const I=g.getMetadata("GLBillboardsPass_Index");if(-1==I)return void console.warn("Billboard already removed.");const C=this.billboards[I],F=C.billboard.imageParam.value;this.atlas.removeSubImage(F),g.off("visibilityChanged",C.visibilityChanged),g.off("highlightChanged",C.updateBillboard),g.globalXfoParam.off("valueChanged",C.updateBillboard),g.alphaParam.off("valueChanged",C.updateBillboard),this.billboards[I]=null,this.freeIndices.push(I),g.isVisible()&&this.drawCount--,this.indexArrayUpdateNeeded=!0,this.requestUpdate()}populateBillboardDataArray(g,I,C){const F=g.billboard,U=F.globalXfoParam.value.toMat4(),l=F.pixelsPerMeterParam.value,t=F.pivotParam.value,e=1/l;let Q=0;F.alignedToCameraParam.value&&(Q|=4),F.drawOnTopParam.value&&(Q|=8),F.fixedSizeOnscreenParam.value&&(Q|=16);const d=F.alphaParam.value,i=F.colorParam.value,A=7*I*4,B=new n(new Float32Array(C.buffer,4*A,4)),a=new n(new Float32Array(C.buffer,4*(A+4),4)),V=new n(new Float32Array(C.buffer,4*(A+8),4)),R=new n(new Float32Array(C.buffer,4*(A+12),4));B.set(U.xAxis.x,U.yAxis.x,U.zAxis.x,U.translation.x),a.set(U.xAxis.y,U.yAxis.y,U.zAxis.y,U.translation.y),V.set(U.xAxis.z,U.yAxis.z,U.zAxis.z,U.translation.z),R.set(e,Q,g.imageIndex,d);new n(new Float32Array(C.buffer,4*(A+16),4)).set(t.x,t.y,0,0);if(new n(new Float32Array(C.buffer,4*(A+20),4)).set(i.r,i.g,i.b,i.a),F.isHighlighted()){const g=F.getHighlight();new n(new Float32Array(C.buffer,4*(A+24),4)).set(g.r,g.g,g.b,g.a)}}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.emit("updated"))}reqUpdateIndexArray(){this.indexArrayUpdateNeeded||(this.indexArrayUpdateNeeded=!0,this.emit("updated"))}updateIndexArray(){const g=this.__gl;this.indexArray&&this.indexArray.length!=this.drawCount&&(g.deleteBuffer(this.instanceIdsBuffer),this.instanceIdsBuffer=null),this.indexArray=new Float32Array(this.drawCount);let I=0;for(let g=0;g<this.billboards.length;g++)this.billboards[g]&&this.billboards[g].billboard.isVisible()&&(this.indexArray[I]=g,I++);this.instanceIdsBuffer||(this.instanceIdsBuffer=g.createBuffer()),g.bindBuffer(g.ARRAY_BUFFER,this.instanceIdsBuffer),g.bufferData(g.ARRAY_BUFFER,this.indexArray,g.STATIC_DRAW),this.indexArrayUpdateNeeded=!1}updateBillboards(g){const I=()=>{this.indexArrayUpdateNeeded&&this.updateIndexArray();const I=this.__gl;if(!this.glshader){I.__quadVertexIdsBuffer||I.setupInstancedQuad(),this.glshader=new xU(I);const C=this.glshader.compileForTarget("GLBillboardsPass",g.shaderopts);this.shaderBinding=mF(I,C.attrs,I.__quadattrbuffers,I.__quadIndexBuffer)}if(this.atlas.renderAtlas(),!I.floatTexturesSupported||!I.drawElementsInstanced)return this.modelMatrixArray=[],this.billboardDataArray=[],this.tintColorArray=[],this.indexArray.forEach((g=>{const I=this.billboards[g],C=I.billboard,F=C.globalXfoParam.value.toMat4(),U=1/C.pixelsPerMeterParam.value;let l=0;C.alignedToCameraParam.value&&(l|=4),C.drawOnTopParam.value&&(l|=8),C.fixedSizeOnscreenParam.value&&(l|=16);const t=C.alphaParam.value,e=C.colorParam.value;this.modelMatrixArray[g]=F.asArray(),this.billboardDataArray[g]=[U,l,I.imageIndex,t],this.tintColorArray[g]=[e.r,e.g,e.b,e.a]})),void(this.updateRequested=!1);let C=Math.round(Math.sqrt(7*(this.billboards.length-this.freeIndices.length))+.5);if(C%7!=0&&(C+=7-C%7),this.width=C,this.drawItemsTexture)this.drawItemsTexture.resize(C,C);else{const g={format:"RGBA",type:"FLOAT",width:C,height:C,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1};this.drawItemsTexture=new dF(I,g),this.drawItemsTexture.clear()}this.indexArray.forEach((g=>{-1!=g&&this.updateBillboard(g)})),this.updateRequested=!1};this.atlas.isLoaded()?I():this.atlas.on("loaded",I)}updateBillboard(g){if(0==this.drawCount||!this.drawItemsTexture)return;const I=this.billboards[g];if(!I.billboard.isVisible())return;const C=this.__gl,F=new Float32Array(28);this.populateBillboardDataArray(I,0,F),C.bindTexture(C.TEXTURE_2D,this.drawItemsTexture.glTex);const U=7*g%this.width,l=Math.floor(7*g/this.width),t=this.drawItemsTexture.getType(),e=this.drawItemsTexture.getFormat();if(t==C.FLOAT)C.texSubImage2D(C.TEXTURE_2D,0,U,l,7,1,e,t,F);else{const g=s.convertFloat32ArrayToUInt16Array(F);C.texSubImage2D(C.TEXTURE_2D,0,U,l,7,1,e,t,g)}}sort(g){for(const I of this.billboards){const{billboard:C}=I;if(C&&C.isVisible()){const F=C.globalXfoParam.value;I.dist=F.tr.distanceTo(g)}}this.indexArray.sort(((g,I)=>-1==g?1:-1==I||this.billboards[g].dist>this.billboards[I].dist?-1:this.billboards[g].dist<this.billboards[I].dist?1:0));const I=this.__gl;I.floatTexturesSupported&&this.instanceIdsBuffer&&(I.bindBuffer(I.ARRAY_BUFFER,this.instanceIdsBuffer),I.bufferData(I.ARRAY_BUFFER,this.indexArray,I.STATIC_DRAW))}__draw(g,I){const C=this.__gl;if(!this.glshader)return;this.glshader.bind(g,I),this.shaderBinding.bind(g);const F=g.unifs,{atlasBillboards:U,passId:l,floatGeomBuffer:t,inVR:e}=g.unifs;if(U&&this.atlas.bindToUniform(g,F.atlasBillboards),t&&C.uniform1i(t.location,g.floatGeomBuffer?1:0),l&&C.uniform1i(l.location,this.passIndex),e&&C.uniform1i(e.location,g.vrPresenting?1:0),C.floatTexturesSupported&&C.drawElementsInstanced){const{instancesTexture:I,instancesTextureSize:U}=g.unifs;this.drawItemsTexture.bindToUniform(g,I),C.uniform1i(U.location,this.width);{const I=g.attrs.instanceIds.location;C.enableVertexAttribArray(I),C.bindBuffer(C.ARRAY_BUFFER,this.instanceIdsBuffer),C.vertexAttribPointer(I,1,C.FLOAT,!1,4,0),C.vertexAttribDivisor(I,1)}g.bindViewports(F,(()=>{C.drawElementsInstanced(C.TRIANGLES,6,C.UNSIGNED_SHORT,0,this.drawCount)}))}else{const{modelMatrix:I,billboardData:U,tintColor:l,layoutData:t}=g.unifs,e=this.indexArray.length;for(let Q=0;Q<e;Q++)C.uniformMatrix4fv(I.location,!1,this.modelMatrixArray[Q]),C.uniform4fv(U.location,this.billboardDataArray[Q]),C.uniform4fv(l.location,this.tintColorArray[Q]),C.uniform4fv(t.location,this.atlas.getLayoutData(this.billboards[Q].imageIndex)),g.bindViewports(F,(()=>{C.drawQuad()}))}}draw(g){if(0==this.drawCount)return;if(this.updateRequested&&this.updateBillboards(g),this.dirtyBillboards.size>0&&(this.dirtyBillboards.forEach((g=>{this.updateBillboard(g)})),this.dirtyBillboards.clear()),this.indexArrayUpdateNeeded&&this.updateIndexArray(),!this.glshader)return;const I=g.viewXfo.tr;if(I.distanceTo(this.prevSortCameraPos)>this.threshold)if(this.sort(I),this.prevSortCameraPos=I.clone(),this.drawCount>1){const g=this.indexArray[this.indexArray.length-1],I=this.indexArray[this.indexArray.length-2],C=this.billboards[g].billboard,F=this.billboards[I].billboard,U=C.globalXfoParam.value.tr,l=F.globalXfoParam.value.tr;this.threshold=U.distanceTo(l)}else this.threshold=9999;const C=this.__gl;C.depthMask(!1),C.disable(C.CULL_FACE),C.enable(C.BLEND),C.blendEquation(C.FUNC_ADD),C.blendFunc(C.SRC_ALPHA,C.ONE_MINUS_SRC_ALPHA),this.__draw(g,"DRAW_COLOR"),C.disable(C.BLEND),C.depthMask(!0)}drawHighlightedGeoms(g){0!=this.drawCount&&this.__draw(g,"DRAW_HIGHLIGHT")}drawGeomData(g){0!=this.drawCount&&this.__draw(g,"DRAW_GEOMDATA")}getGeomItemAndDist(g){let I,C;if(g instanceof Float32Array?(I=Math.round(g[1]),C=g[3]):(I=g[0]+((63&g[1])<<8),C=s.decode16BitFloatFrom2xUInt8(g.slice(2,3))),!(I>=this.billboards.length))return{geomItem:this.billboards[I].billboard,dist:C};console.warn("Invalid Draw Item id:"+I+" NumBillboards:"+(this.billboards.length-1))}}KU.registerPass(ol,FF.TRANSPARENT);class hl extends Bl{constructor(){super()}getPassType(){return FF.OVERLAY}filterGeomItem(g){if(g.isOverlay())return!0;const I=g.materialParam.value.getShaderClass();return!(!I||!I.isOverlay())}draw(g){const I=this.__gl;I.clear(I.DEPTH_BUFFER_BIT),I.enable(I.CULL_FACE),I.cullFace(I.BACK),I.enable(I.BLEND),I.blendEquation(I.FUNC_ADD),g.pass="ADD",I.blendFunc(I.SRC_ALPHA,I.ONE_MINUS_SRC_ALPHA),this.__traverseTreeAndDraw(g),I.disable(I.BLEND)}drawGeomData(g){const I=this.__gl;I.clear(I.DEPTH_BUFFER_BIT),I.enable(I.CULL_FACE),I.cullFace(I.BACK),I.enable(I.BLEND),I.blendEquation(I.FUNC_ADD),g.pass="ADD",I.blendFunc(I.SRC_ALPHA,I.ONE_MINUS_SRC_ALPHA),super.drawGeomData(g),I.disable(I.BLEND),I.enable(I.DEPTH_TEST)}}KU.registerPass(hl,FF.OVERLAY);class cl extends VF{constructor(g){super(g,"BoundingBoxShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec4 positions;\ninstancedattribute float instanceIds;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 cameraMatrix;\n\nimport 'GLSLUtils.glsl'\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\nimport 'transpose.glsl'\n\nuniform sampler2D instancesTexture;\nuniform int instancesTextureSize;\n\nconst int cols_per_instance = 6;\n\nmat4 getMatrix(sampler2D texture, int textureSize, int index) {\n  // Unpack 3 x 4 matix columns into a 4 x 4 matrix.\n  vec4 col0 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 0);\n  vec4 col1 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 1);\n  vec4 col2 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 2);\n  mat4 result = mat4(col0, col1, col2, vec4(0.0, 0.0, 0.0, 1.0));\n  return transpose(result);\n  // return mat4(1.0);\n}\n\nmat4 getModelMatrix(int id) {\n  return getMatrix(instancesTexture, instancesTextureSize, id);\n}\nvec4 getInstanceData(int id, int row) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + row);\n}\n\n#else\n\nuniform mat4 modelMatrix;\nuniform vec4 row3;\nuniform vec4 row4;\nuniform vec4 row5;\n\n#endif\n\n/* VS Outputs */\nvarying vec4 v_color;\n\nvoid main(void) {\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\n  int instanceID = int(instanceIds);\n\n  mat4 modelMatrix = getModelMatrix(instanceID);\n  vec4 row3 = getInstanceData(instanceID, 3);\n  vec4 row4 = getInstanceData(instanceID, 4);\n  vec4 row5 = getInstanceData(instanceID, 5);\n\n#else\n\n#endif\n\n  v_color = row5;\n\n  vec4 pos = positions;\n  if (pos.x < 0.0) pos.x = row3.x;\n  else if (pos.x > 0.0) pos.x = row4.x;\n  if (pos.y < 0.0) pos.y = row3.y;\n  else if (pos.y > 0.0) pos.y = row4.y;\n  if (pos.z < 0.0) pos.z = row3.z;\n  else if (pos.z > 0.0) pos.z = row4.z;\n\n  // Use cross platform bit flags methods\n  bool drawOnTop = false;//testFlag(flags, 8); // flag = 1 << 3\n\n  mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix;// * modelMatrix;\n  gl_Position = modelViewProjectionMatrix * pos;\n\n  // Use cross platform bit flags methods\n  if (drawOnTop) {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.w, 0.5);\n  }\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\n/* VS Outputs */\nvarying vec4 v_color;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  fragColor = v_color;\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}const rl=new class{constructor(g){this.version=g,this.registry={}}registerLib(g){const I=g.name,C=g.version;this.registry[I]&&console.warn("Library already registered:"+I),this.registry[I]=C,console.log(`Registered lib '${I}' v${C}`)}listLibs(){return this.registry}}(I);console.log("Zea Engine v4.0.1"),g.Allocation1D=u,g.Allocator1D=y,g.AssetItem=HC,g.AssetLoadContext=KC,g.Attribute=VI,g.AudioSourceCreatedEvent=class extends G{constructor(g){super(),this.audioSource=g}},g.BaseGeom=ZI,g.BaseGeomItem=GC,g.BaseGroup=uC,g.BaseImage=dI,g.BaseItem=ag,g.BaseProxy=WI,g.BaseTool=CF,g.BillboardItem=xC,g.BillboardShader=xU,g.BinReader=Sg,g.BinWriter=class{constructor(g=0){this.__data=new ArrayBuffer(g),this.__byteOffset=0,this.__reserved=g,this.__dataView=new DataView(this.__data)}pos(){return this.__byteOffset}seek(g){this.__byteOffset=g}seekEnd(){this.__byteOffset=this.__reserved}getBuffer(){if(this.__data.byteLength==this.__byteOffset)return this.__data;return new Uint8Array(this.__data).slice(0,this.__byteOffset).buffer}__grow(){const g=2*(this.__reserved>0?this.__reserved:1),I=new ArrayBuffer(g),C=new Uint8Array(I),F=new Uint8Array(this.__data);C.set(F),this.__data=I,this.__dataView=new DataView(this.__data),this.__reserved=g}__reserve(g){this.__byteOffset+g>this.__reserved&&this.__grow()}__offset(g){this.__byteOffset+=g,this.__byteOffset>this.__reserved&&this.__grow()}writeUInt8(g){this.__reserve(1),this.__dataView.setUint8(this.__byteOffset,g),this.__offset(1)}writeUInt16(g){this.__reserve(2),this.__dataView.setUint16(this.__byteOffset,g,!0),this.__offset(2)}writeUInt32(g){this.__reserve(4),this.__dataView.setUint32(this.__byteOffset,g,!0),this.__offset(4)}writeSInt32(g){this.__reserve(4),this.__dataView.setInt32(this.__byteOffset,g,!0),this.__offset(4)}writeFloat16(g){const I=s.encode16BitFloat(g);this.writeUInt16(I)}writeFloat32(g){this.__reserve(4),this.__dataView.setFloat32(this.__byteOffset,g,!0),this.__offset(4)}writeUInt8Array(g,I=!0){const C=(g.length,g.length);this.__reserve(C+(I?4:0)),I&&this.writeUInt32(C);for(let I=0;I<C;I++)this.writeUInt8(g[I])}writeUInt16Array(g,I=!0){const C=(g.length,g.length);this.__reserve(2*C+(I?4:0)),I&&this.writeUInt32(C);for(let I=0;I<C;I++)this.writeUInt16(g[I])}writeUInt32Array(g,I=!0){const C=(g.length,g.length);this.__reserve(4*C+(I?4:0)),I&&this.writeUInt32(C);for(let I=0;I<C;I++)this.writeUInt32(g[I])}writeFloat32Array(g,I=!0){const C=(g.length,g.length);this.__reserve(4*C+(I?4:0)),I&&this.writeUInt32(C);for(let I=0;I<C;I++)this.writeFloat32(g[I])}writeStr(g,I=!0){const C=g.length;this.__reserve(4*C+(I?4:0)),I&&this.writeUInt32(C);for(let I=0;I<C;I++)this.writeFloat32(g.charCodeAt(I))}writeSInt32Vec2(g){this.writeSInt32(g.x),this.writeSInt32(g.y)}writeUInt32Vec2(g){this.writeUInt32(g.x),this.writeUInt32(g.y)}writeFloat16Vec2(g){this.writeFloat16(g.x),this.writeFloat16(g.y)}writeFloat32Vec2(g){this.writeFloat32(g.x),this.writeFloat32(g.y)}writeFloat16Vec3(g){this.writeFloat16(g.x),this.writeFloat16(g.y),this.writeFloat16(g.z)}writeFloat32Vec3(g){this.writeFloat32(g.x),this.writeFloat32(g.y),this.writeFloat32(g.z)}writeFloat16Quat(g){this.writeFloat16(g.x),this.writeFloat16(g.y),this.writeFloat16(g.z),this.writeFloat16(g.w)}writeFloat32Quat(g){this.writeFloat32(g.x),this.writeFloat32(g.y),this.writeFloat32(g.z),this.writeFloat32(g.w)}writeRGBFloat32Color(g){this.writeFloat32(g.r),this.writeFloat32(g.g),this.writeFloat32(g.b)}writeRGBAFloat32Color(g){this.writeFloat32(g.r),this.writeFloat32(g.g),this.writeFloat32(g.b),this.writeFloat32(g.a)}writeRGBUInt8Color(g){this.writeUInt8(g.r),this.writeUInt8(g.g),this.writeUInt8(g.b)}writeRGBAUInt8Color(g){this.writeUInt8(g.r),this.writeUInt8(g.g),this.writeUInt8(g.b),this.writeUInt8(g.a)}writeBox2(g){this.writeFloat32Vec2(g.p0),this.writeFloat32Vec2(g.p1)}writeBox3(g){this.writeFloat32Vec3(g.p0),this.writeFloat32Vec3(g.p1)}writePadd(g){const I=g-this.__byteOffset;this.__reserve(I),this.__offset(I)}writeAlignment(g){const I=this.__byteOffset%g;0!=I&&(this.__reserve(g-I),this.__offset(g-I))}},g.BooleanOperatorInput=class extends $g{},g.BooleanOperatorOutput=class extends _g{},g.BooleanParameter=kg,g.Box2=h,g.Box3=r,g.Camera=wC,g.CameraManipulator=tF,g.ChildAddedEvent=Qg,g.Circle=pI,g.Color=A,g.ColorAttribute=hI,g.ColorOperatorInput=class extends $g{},g.ColorOperatorOutput=class extends _g{},g.ColorParameter=Dg,g.Cone=TI,g.ControllerAddedEvent=X,g.CountChangedEvent=p,g.Cross=kI,g.Cuboid=DI,g.CuttingPlane=PC,g.Cylinder=vI,g.DataImage=wI,g.Disc=MI,g.EnvMap=AC,g.EnvMapAssignedEvent=k,g.EnvMapShader=SF,g.EnvProjectionShader=wU,g.EulerAngles=B,g.EventEmitter=b,g.FRAMEBUFFER=tU,g.FatLinesMaterial=sC,g.FatLinesShader=zU,g.FatPointsMaterial=ZC,g.FatPointsShader=$U,g.FileImage=fI,g.FileImage2D=class extends fI{constructor(g,I={}){console.warn("FileImage2D is becoming deprecated in favor of simple FileImage"),super(g,I)}},g.FilePathParameter=QI,g.FlatSurfaceMaterial=oC,g.FlatSurfaceShader=LU,g.Float32=6,g.Frustum=class{constructor(g,I,C,F,U,l){this.planes=[g||new m,I||new m,C||new m,F||new m,U||new m,l||new m]}setFromMatrix(g){const I=g,C=this.planes;C[0].set(I.m03-I.m00,I.m13-I.m10,I.m23-I.m20,I.m33-I.m30),C[1].set(I.m03+I.m00,I.m13+I.m10,I.m23+I.m20,I.m33+I.m30),C[2].set(I.m03+I.m01,I.m13+I.m11,I.m23+I.m21,I.m33+I.m31),C[3].set(I.m03-I.m01,I.m13-I.m11,I.m23-I.m21,I.m33-I.m31),C[4].set(I.m03-I.m02,I.m13-I.m12,I.m23-I.m22,I.m33-I.m32),C[5].set(I.m03+I.m02,I.m13+I.m12,I.m23+I.m22,I.m33+I.m32),C.forEach((g=>g.normalizeInPlace()))}intersectsBox(g){const I=new d,C=this.planes,{min:F,max:U}=g;for(let g=0;g<6;g++){const l=C[g];if(I.x=l.normal.x>0?U.x:F.x,I.y=l.normal.y>0?U.y:F.y,I.z=l.normal.z>0?U.z:F.z,l.distanceToPoint(I)<0)return!1}return!0}toJSON(){return{p0:this.planes[0].toJSON(),p1:this.planes[1].toJSON(),p2:this.planes[2].toJSON(),p3:this.planes[3].toJSON(),p4:this.planes[4].toJSON(),p5:this.planes[5].toJSON()}}fromJSON(g){this.planes[0].fromJSON(g.p0),this.planes[1].fromJSON(g.p1),this.planes[2].fromJSON(g.p2),this.planes[3].fromJSON(g.p3),this.planes[4].fromJSON(g.p4),this.planes[5].fromJSON(g.p5)}toString(){return e.stringifyJSONWithFixedPrecision(this.toJSON())}},g.GIFImage=iC,g.GLBaseViewport=eU,g.GLBillboardsPass=ol,g.GLBoundingBoxPass=class extends UF{constructor(){super(),this.boxes=[],this.dirtyBoxes=new Set,this.freeIndices=[],this.idToIndex=[],this.drawCount=0,this.indexArrayUpdateNeeded=!1,this.__updateRequested=!1,this.__modelMatrixArray=[],this.__treeitemDataArray=[],this.__tintColorArray=[],this.__indexArray=new Float32Array(0),this.__width=0}getPassType(){return FF.OPAQUE}init(g,I){super.init(g,I);const C=this.__renderer.gl;this.glgeom=new WU(C,new YI(1,1,1)),this.glshader=new cl(C)}itemAddedToScene(g,I){return!1}itemRemovedFromScene(g,I){return!1}addTreeItem(g,I=!0){if(g instanceof FI&&(this.bindTreeItem(g),I)){for(const I of g.getChildren())I&&this.addTreeItem(I);g.on("childAdded",(g=>{this.addTreeItem(g.childItem)})),g.on("childRemoved",(g=>{this.unbindTreeItem(g.childItem)}))}}bindTreeItem(g){let I,C=this.freeIndices.pop();I=C||this.boxes.length,this.idToIndex[g.getId()]=I;const F=()=>{g.isVisible()?(this.drawCount++,this.dirtyBoxes.add(I)):this.drawCount--,this.indexArrayUpdateNeeded=!0};g.on("visibilityChanged",F);const U=()=>{g.isVisible()&&(this.dirtyBoxes.add(I),this.emit("updated"))};g.globalXfoParam.on("valueChanged",U),g.boundingBoxParam.on("valueChanged",U),g.isVisible()&&this.drawCount++,this.boxes[I]={treeitem:g,visibilityChanged:F,xfoChanged:U},this.indexArrayUpdateNeeded=!0,this.__updateRequested=!0,this.emit("updated")}unbindTreeItem(g){if(!(g.getId()in this.idToIndex))return void console.warn("Billboard already removed.");const I=this.idToIndex[g.getId()],C=this.boxes[I];g.off("visibilityChanged",C.visibilityChanged),g.globalXfoParam.off("valueChanged",C.xfoChanged),g.boundingBoxParam.off("valueChanged",C.xfoChanged),this.boxes[I]=null,this.freeIndices.push(I),g.isVisible()&&this.drawCount--,this.indexArrayUpdateNeeded=!0,this.__updateRequested=!0,this.__updateBoxes(),this.emit("updated")}__populateBoxesDataArray(g,I,C){const F=g.treeitem,U=F.globalXfoParam,l=F.geomMatParam,t=l?new A(1,0,0,1):new A(0,0,1,1),e=l?l.value:U.value.toMat4(),Q=F.boundingBoxParam.value,d=6*I*4,i=new n(new Float32Array(C.buffer,4*d,4)),B=new n(new Float32Array(C.buffer,4*(d+4),4)),a=new n(new Float32Array(C.buffer,4*(d+8),4)),V=new n(new Float32Array(C.buffer,4*(d+12),4)),R=new n(new Float32Array(C.buffer,4*(d+16),4)),s=new n(new Float32Array(C.buffer,4*(d+20),4));i.set(e.xAxis.x,e.yAxis.x,e.zAxis.x,e.translation.x),B.set(e.xAxis.y,e.yAxis.y,e.zAxis.y,e.translation.y),a.set(e.xAxis.z,e.yAxis.z,e.zAxis.z,e.translation.z),V.set(Q.p0.x,Q.p0.y,Q.p0.z,0),R.set(Q.p1.x,Q.p1.y,Q.p1.z,0),s.set(t.r,t.g,t.b,t.a)}__updateIndexArray(){const g=this.__gl;this.__indexArray&&this.__indexArray.length!=this.drawCount&&(g.deleteBuffer(this.__instanceIdsBuffer),this.__instanceIdsBuffer=void 0),this.__indexArray=new Float32Array(this.drawCount);let I=0;for(let g=0;g<this.boxes.length;g++)this.boxes[g]&&this.boxes[g].treeitem.isVisible()&&(this.__indexArray[I]=g,I++);this.__instanceIdsBuffer||(this.__instanceIdsBuffer=g.createBuffer()),g.bindBuffer(g.ARRAY_BUFFER,this.__instanceIdsBuffer),g.bufferData(g.ARRAY_BUFFER,this.__indexArray,g.STATIC_DRAW),this.indexArrayUpdateNeeded=!1}__updateBoxes(){this.indexArrayUpdateNeeded&&this.__updateIndexArray();const g=this.__renderer.gl;let I=Math.round(Math.sqrt(6*(this.boxes.length-this.freeIndices.length))+.5);I%6!=0&&(I+=6-I%6),this.__width=I,this.__drawItemsTexture?this.__drawItemsTexture.resize(I,I):(this.__drawItemsTexture=new dF(g,{format:"RGBA",type:"FLOAT",width:I,height:I,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.__drawItemsTexture.clear()),this.__indexArray.forEach((g=>{-1!=g&&this.__updateBox(g)})),this.__updateRequested=!1}__updateBox(g){if(0==this.drawCount||!this.__drawItemsTexture)return;const I=this.boxes[g];if(!I.treeitem.isVisible())return;const C=this.__gl,F=new Float32Array(24);this.__populateBoxesDataArray(I,0,F),C.bindTexture(C.TEXTURE_2D,this.__drawItemsTexture.glTex);const U=6*g%this.__width,l=Math.floor(6*g/this.__width),t=this.__drawItemsTexture.getType(),e=this.__drawItemsTexture.getFormat();if(t==C.FLOAT)C.texSubImage2D(C.TEXTURE_2D,0,U,l,6,1,e,t,F);else{const g=s.convertFloat32ArrayToUInt16Array(F);C.texSubImage2D(C.TEXTURE_2D,0,U,l,6,1,e,t,g)}}draw(g){if(0==this.drawCount)return;this.__updateRequested&&this.__updateBoxes(),this.dirtyBoxes.size>0&&(this.dirtyBoxes.forEach((g=>{this.__updateBox(g)})),this.dirtyBoxes.clear()),this.indexArrayUpdateNeeded&&this.__updateIndexArray();const I=this.__gl;this.glshader.bind(g),this.glgeom.bind(g);const C=g.unifs;if(I.floatTexturesSupported&&I.drawElementsInstanced){this.__drawItemsTexture.bindToUniform(g,C.instancesTexture),I.uniform1i(C.instancesTextureSize.location,this.__width);{const C=g.attrs.instanceIds.location;I.enableVertexAttribArray(C),I.bindBuffer(I.ARRAY_BUFFER,this.__instanceIdsBuffer),I.vertexAttribPointer(C,1,I.FLOAT,!1,4,0),I.vertexAttribDivisor(C,1)}g.bindViewports(C,(()=>{this.glgeom.drawInstanced(g,this.drawCount)}))}else{const F=this.__indexArray.length;for(let U=0;U<F;U++)g.bindViewports(C,(()=>{I.drawQuad()}))}}},g.GLFbo=RF,g.GLGeom=UU,g.GLGeomItem=GU,g.GLGeomItemChangeType={GEOMITEM_CHANGED:0,GEOM_CHANGED:1,VISIBILITY_CHANGED:2,HIGHLIGHT_CHANGED:3},g.GLGeomItemFlags=JU,g.GLGeomItemSet=bU,g.GLLines=WU,g.GLLinesPass=Vl,g.GLMaterial=cU,g.GLMaterialGeomItemSets=NU,g.GLMesh=lU,g.GLOpaqueGeomsPass=Bl,g.GLOverlayPass=hl,g.GLPass=UF,g.GLPoints=mU,g.GLRenderTarget=sF,g.GLRenderer=KU,g.GLShader=VF,g.GLShaderMaterials=SU,g.GLStandardGeomsPass=el,g.GLTexture2D=dF,g.GLTransparentGeomsPass=Rl,g.GLViewport=dU,g.GeomItem=SC,g.GeomLibrary=DC,g.GeometryParameter=eI,g.Grid=EI,g.GridTreeItem=qC,g.GrowingPacker=S,g.HDRImage=_I,g.IGeomShaderBinding=hF,g.ImageParameter=xg,g.IndexEvent=Y,g.InstanceItem=JC,g.ItemEvent=lI,g.ItemSetParameter=tI,g.KeyboardEvent=E,g.KinematicGroup=_C,g.LDRImage=LI,g.LDRVideo=OI,g.Label=VC,g.LabelManager=BC,g.LatLongEnvProjectionShader=class extends wU{constructor(g){super(g),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'envmap-equirect.glsl'\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\n\nuniform color envMap;\nuniform sampler2D envMapTex;\nuniform int envMapTexType;\n\nuniform float exposure;\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec2 texCoord = latLongUVsFromDir(normalize(v_worldDir));\n  vec4 env = getColorParamValue(envMap, envMapTex, envMapTexType, texCoord);\n  fragColor = vec4(env.rgb/env.a, 1.0);\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb * exposure);\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}},g.Lines=rI,g.LinesCuboid=YI,g.LinesMaterial=hC,g.LinesProxy=GI,g.LinesShader=OU,g.ListParameter=fg,g.Mat3=a,g.Mat3OperatorInput=class extends $g{},g.Mat3OperatorOutput=class extends _g{},g.Mat3Parameter=Mg,g.Mat4=V,g.Mat4OperatorInput=class extends $g{},g.Mat4OperatorOutput=Pg,g.Mat4Parameter=Hg,g.Material=AI,g.MaterialColorParam=iI,g.MaterialFloatParam=nI,g.MaterialGroup=OC,g.MaterialLibrary=vC,g.MaterialParameter=BI,g.MathFunctions=s,g.Mesh=mI,g.MeshProxy=bI,g.MultiChoiceParameter=pg,g.NormalsShader=class extends VF{constructor(g){super(g,"NormalsShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\ninstancedattribute vec3 positions;\ninstancedattribute vec3 normals;\nattribute vec2 vertexIDs;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\nuniform float normalLength;\n\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying float v_weight;\n\nvoid main(void) {\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;\n  if (vertexIDs.x == 0.0) {\n    gl_Position = modelViewProjectionMatrix * vec4(positions, 1.0);\n    v_weight = 1.0;\n  }\n  else {\n    gl_Position = modelViewProjectionMatrix * vec4(positions+(normals*normalLength), 1.0);\n    v_weight = 0.0;\n  }\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform color normalColor;\n\n/* VS Outputs */\nvarying float v_weight;\n\nvoid main(void) {\n  gl_FragColor = normalColor;\n  gl_FragColor.a = v_weight;\n}\n")}},g.NumberOperatorInput=class extends $g{},g.NumberOperatorOutput=class extends _g{},g.NumberParameter=Xg,g.ObjAsset=class extends HC{constructor(g){super(g),this.splitObjects=new kg("splitObjects",!1),this.splitGroupsIntoObjects=new kg("splitGroupsIntoObjects",!1),this.loadMtlFile=new kg("loadMtlFile",!0),this.unitsConversion=new Xg("unitsConversion",1),this.defaultShader=new wg("defaultShader",""),this.splitObjectsParam=new kg("splitObjects",!1),this.splitGroupsIntoObjectsParam=new kg("splitGroupsIntoObjects",!1),this.loadMtlFileParam=new kg("loadMtlFile",!0),this.unitsConversionParam=new Xg("unitsConversion",1),this.defaultShaderParam=new wg("defaultShader",""),this.addParameter(this.splitObjectsParam),this.addParameter(this.splitGroupsIntoObjectsParam),this.addParameter(this.loadMtlFileParam),this.addParameter(this.unitsConversionParam),this.addParameter(this.defaultShaderParam)}load(g){return this.loaded=!1,new Promise(((I,C)=>{const F=g.substring(0,g.lastIndexOf("/"))+"/",U=g=>new Promise((I=>{Rg(g,(g=>{mg.incrementWorkDone(1),(g=>{const I=g.split("\n"),C=/\s+/;for(let g=0;g<I.length;g++){let F=I[g].trim();if(F.startsWith("#"))continue;F.includes("#")&&(F=F.substring(0,F.indexOf("#")).trim());const U=F.split(C);throw U.shift(),U.join(" "),Error("no material defined.")}})(g),mg.incrementWorkDone(1),I()}))})),l=[],t=[],e=[],n={},i=g=>IF(this,void 0,void 0,(function*(){const I=g.split("\n"),C=/\s+/;let Q,d,i=0;const A=g=>{if(g in n){let I=1;for(;g+String(I)in n;)I++;g+=String(I)}Q={verticesRemapping:{},texCoordsRemapping:{},normalsRemapping:{},vertexIndices:[],texCoordIndices:[],normalIndices:[],numVertices:0,numTexCoords:0,numNormals:0,faceCounts:[],material:d},n[g]=Q,i++};A("geom");const B=this.splitGroupsIntoObjectsParam.value;for(let g=0;g<I.length;g++){let a=I[g].trim();if(a.startsWith("#"))continue;a.includes("#")&&(a=a.substring(0,a.indexOf("#")).trim());const V=a.split(C),R=V.shift(),s=V.join(" ");switch(R){case"":case"s":continue;case"mtllib":if(!this.loadMtlFileParam.value)continue;mg.incrementWorkload(2);const g=F+s;g&&(yield U(g));break;case"o":A(s);break;case"usemtl":d=s,A(s+Object.keys(n).length);break;case"g":B&&A(s?V.join("_"):"Group"+i);break;case"v":l.push(V.map((g=>parseFloat(g))));break;case"vt":e.push(V.map((g=>parseFloat(g))));break;case"vn":t.push(V.map((g=>parseFloat(g))));break;case"f":{const g=[],I=[],C=[];for(let F=0,U=V.length;F<U;F++){const U=V[F].split("/").map((g=>parseInt(g)-1)),l=U[0];let t=Q.verticesRemapping[l];if(null==t&&(t=Q.numVertices,Q.verticesRemapping[l]=t,Q.numVertices++),g.push(t),U.length>1&&!isNaN(U[1])){const g=U[1];I.push(g)}if(U.length>2&&!isNaN(U[2])){const g=U[2];C.push(g)}}Q.vertexIndices.push(g),C.length>0&&Q.normalIndices.push(C),I.length>0&&Q.texCoordIndices.push(I),null==Q.faceCounts[g.length-3]&&(Q.faceCounts[g.length-3]=[]),Q.faceCounts[g.length-3]++;break}default:console.warn("Unhandled line:"+a)}}})),A=()=>{for(const g in n)0!=n[g].numVertices&&B(g,n[g]);this.emit("loaded"),this.getGeometryLibrary().emit("loaded"),this.emit("geomsLoaded"),I()},B=(g,I)=>{for(let g=0;g<I.faceCounts.length;g++)null==I.faceCounts[g]&&(I.faceCounts[g]=0);const C=I.numVertices,F=new mI;F.setDebugName(g),F.setFaceCounts(I.faceCounts),F.setNumVertices(C);const U=F.getVertexAttribute("positions"),n=this.unitsConversionParam.value;for(const g in I.verticesRemapping){const C=Number.parseInt(g),F=I.verticesRemapping[C];U.getValueRef(F).set(l[C][0]*n,l[C][1]*n,l[C][2]*n)}let i,A;I.normalIndices.length>0&&(i=new RI,F.addVertexAttribute("normals",i)),I.texCoordIndices.length>0&&(A=new sI,F.addVertexAttribute("texCoords",A));const B=Array(I.faceCounts.length).fill(0);for(let g=0;g<I.vertexIndices.length;g++){const C=I.vertexIndices[g];let U=0;for(let g=0;g<C.length-3;++g)I.faceCounts[g]&&(U+=I.faceCounts[g]);if(U+=B[C.length-3],B[C.length-3]++,F.setFaceVertexIndices(U,C),i){const C=I.normalIndices[g];for(let g=0;g<C.length;g++){const I=new d(t[C[g]][0],t[C[g]][1],t[C[g]][2]);i.setFaceVertexValue(U,g,I)}}if(A&&I.texCoordIndices.length==I.vertexIndices.length){const C=I.texCoordIndices[g];for(let g=0;g<C.length;g++){const I=new Q(e[C[g]][0],e[C[g]][1]);A.setFaceVertexValue(U,g,I)}}}const a=new SC(g,F),V=F.getBoundingBox().center();{const g=V.negate(),I=F.getVertexAttribute("positions");for(let C=0;C<I.getCount();C++)I.getValueRef(C).addInPlace(g);F.setBoundingBoxDirty()}if(a.localXfoParam.value=new o(V),null!=I.material&&this.materialLibrary.hasMaterial(I.material))a.materialParam.value=this.materialLibrary.getMaterial(I.material);else{const I=this.defaultShaderParam.value,C=new AI(g+" mat");C.setShaderName(""!=I?I:"StandardSurfaceShader"),this.materialLibrary.addMaterial(C),a.materialParam.value=C}this.addChild(a,!1)};(()=>{mg.incrementWorkload(2),Rg(g,(g=>{mg.incrementWorkDone(1),i(g).then((()=>{A(),mg.incrementWorkDone(1)}))}),(g=>{this.emit("error",g),C(g)}))})()}))}},g.OctahedralEnvProjectionShader=class extends wU{constructor(g){super(g),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'envmap-octahedral.glsl'\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\n\nuniform color envMap;\nuniform sampler2D envMapTex;\nuniform int envMapTexType;\n\nuniform float exposure;\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec2 texCoord = dirToSphOctUv(normalize(v_worldDir));\n  vec4 env = getColorParamValue(envMap, envMapTex, envMapTexType, texCoord);\n\n  fragColor = vec4(env.rgb/env.a, 1.0);\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb * exposure);\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}},g.Operator=qg,g.OperatorInput=$g,g.OperatorOutput=_g,g.POINTER_TYPES=P,g.Parameter=yg,g.ParameterAddedEvent=T,g.ParameterOwner=ig,g.ParameterRemovedEvent=D,g.PassType=FF,g.Plane=HI,g.PlaneType=m,g.PointGrid=yI,g.Points=cI,g.PointsMaterial=cC,g.PointsProxy=JI,g.PointsShader=PU,g.ProceduralLines=SI,g.ProceduralMesh=uI,g.ProceduralPoints=NI,g.Quat=R,g.QuatOperatorInput=class extends $g{},g.QuatOperatorOutput=class extends _g{},g.QuatParameter=vg,g.RGBA=i,g.RangeLoadedEvent=v,g.Ray=Z,g.Rect=XI,g.RefCounted=ng,g.Registry=t,g.ResizedEvent=N,g.ResourceLoader=rg,g.SInt16=3,g.SInt32=5,g.SInt8=1,g.Scene=class{constructor(){this.envMapParam=new xg("EnvMap"),this.displayEnvMapParam=new kg("Display EnvMap",!1),this.envMapLODParam=new Xg("EnvMapLOD",0),this.root=new FI("root")}getRoot(){return this.root}getResourceLoader(){return mg}setEnvMap(g){this.envMapParam.value=g}setupGrid(g=5,I=50,C=$C){const F=new qC(g,I,C);return this.root.addChild(F,!1),F}},g.SceneSetEvent=M,g.ScreenQuadShader=CU,g.ScreenSpaceMaterial=rC,g.ScreenSpaceShader=ll,g.SelectabilityChangedEvent=H,g.SelectedEvent=K,g.SelectionSet=yC,g.ShaderLibrary=AF,g.ShaderNameChangedEvent=x,g.SimpleSurfaceMaterial=mC,g.SimpleSurfaceShader=Il,g.Sphere=KI,g.SphereType=c,g.StandardSurfaceMaterial=WC,g.StandardSurfaceShader=Fl,g.StateChangedEvent=w,g.StreamFileParsedEvent=z,g.StringFunctions=e,g.StringListParameter=zg,g.StringParameter=wg,g.StructParameter=Lg,g.SystemDesc=C,g.TexturedChangedEvent=f,g.Torus=xI,g.Touch=lg,g.TransparencyChangedEvent=L,g.TreeItem=FI,g.TreeItemParameter=UI,g.UInt16=2,g.UInt32=4,g.UInt8=0,g.UnpackHDRShader=ZF,g.VLAAsset=gF,g.Vec2=Q,g.Vec2Attribute=sI,g.Vec2OperatorInput=class extends $g{},g.Vec2OperatorOutput=class extends _g{},g.Vec2Parameter=Yg,g.Vec3=d,g.Vec3Attribute=RI,g.Vec3OperatorInput=class extends $g{},g.Vec3OperatorOutput=class extends _g{},g.Vec3Parameter=Eg,g.Vec4=n,g.Vec4Attribute=oI,g.Vec4OperatorInput=class extends $g{},g.Vec4OperatorOutput=Og,g.Vec4Parameter=Tg,g.Version=Ng,g.VideoStreamImage2D=RC,g.ViewChangedEvent=_,g.VisibilityChangedEvent=O,g.XRControllerEvent=gg,g.XRPoseEvent=Ig,g.XRViewChangedEvent=j,g.XRViewport=BU,g.Xfo=o,g.XfoOperatorInput=gI,g.XfoOperatorOutput=jg,g.XfoParameter=Kg,g.XrViewportEvent=Cg,g.ZeaMouseEvent=Ug,g.ZeaPointerEvent=$,g.ZeaTouchEvent=tg,g.ZeaUIEvent=Fg,g.ZeaWheelEvent=eg,g.create3DContext=eF,g.genDataTypeDesc=oF,g.generateShaderGeomBinding=mF,g.getFileFolder=function(g){return g.substring(0,g.lastIndexOf("/"))+"/"},g.labelManager=aC,g.libsRegistry=rl,g.loadBinfile=sg,g.loadJSONfile=function(g,I,C,F){Vg(g,"json",(g=>{I(g.response,g)}),(I=>{if(null==C)throw new Error("Unable to XHR File:"+g);C(I)}),F)},g.loadTextfile=Rg,g.loadXMLfile=function(g,I,C,F){Vg(g,"document",(g=>{I(g.responseXML)}),(I=>{if(null==C)throw new Error("Unable to XHR File:"+g);C(I)}),F)},g.resourceLoader=mg,g.shaderLibrary=BF,Object.defineProperty(g,"__esModule",{value:!0})}));
