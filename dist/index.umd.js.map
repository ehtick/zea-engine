{"version":3,"file":"index.umd.js","sources":["SystemDesc.js","Registry.js","Utilities/StringFunctions.js","Math/Vec2.js","Math/Vec3.js","Math/Vec4.js","Math/RGBA.js","Math/Color.js","Math/EulerAngles.js","Math/Mat3.js","Math/Mat4.js","Math/Quat.js","Utilities/MathFunctions.js","Math/Ray.js","Math/Xfo.js","Math/Box2.js","Math/SphereType.js","Math/Box3.js","Math/PlaneType.js","Utilities/BaseClass.js","Utilities/BaseEvent.js","Utilities/EventEmitter.js","Utilities/Events/ResizedEvent.js","Utilities/GrowingPacker.js","Utilities/Allocator1D.js","Utilities/Events/ZeaPointerEvent.js","Utilities/Events/ZeaUIEvent.js","Utilities/Events/ZeaMouseEvent.js","Utilities/Events/ZeaTouchEvent.js","Utilities/Events/ZeaWheelEvent.js","Utilities/Events/XRControllerEvent.js","Utilities/Events/XRPoseEvent.js","SceneTree/RefCounted.js","Utilities/Events/ParameterAddedEvent.js","Utilities/Events/ParameterRemovedEvent.js","SceneTree/ParameterOwner.js","Utilities/Events/SelectabilityChangedEvent.js","Utilities/Events/SelectedEvent.js","SceneTree/BaseItem.js","SceneTree/Utils.js","SceneTree/ResourceLoader/ArchiveUnpackerPlugin.js","SceneTree/resourceLoader.js","SceneTree/ResourceLoader/JsonLoaderPlugin.js","SceneTree/ResourceLoader/TextLoaderPlugin.js","SceneTree/ResourceLoader/BinaryLoaderPlugin.js","SceneTree/Version.js","SceneTree/BinReader.js","SceneTree/Parameters/OperatorOutputMode.js","SceneTree/Parameters/Parameter.js","SceneTree/Parameters/NumberParameter.js","SceneTree/Parameters/MultiChoiceParameter.js","SceneTree/Parameters/BooleanParameter.js","SceneTree/Parameters/Vec2Parameter.js","SceneTree/Parameters/Vec3Parameter.js","SceneTree/Parameters/Vec4Parameter.js","SceneTree/Parameters/ColorParameter.js","SceneTree/Parameters/QuatParameter.js","SceneTree/Parameters/Mat3Parameter.js","SceneTree/Parameters/Mat4Parameter.js","SceneTree/Parameters/XfoParameter.js","SceneTree/Parameters/ImageParameter.js","SceneTree/Parameters/StringParameter.js","SceneTree/Parameters/StringListParameter.js","SceneTree/Parameters/ListParameter.js","SceneTree/Parameters/StructParameter.js","SceneTree/Operators/OperatorOutput.js","SceneTree/Operators/Operator.js","SceneTree/Operators/OperatorInput.js","SceneTree/Operators/CalcGlobalXfoOperator.js","SceneTree/Parameters/BoundingBoxParameter.js","SceneTree/TreeItem.js","SceneTree/Parameters/TreeItemParameter.js","SceneTree/Parameters/ItemSetParameter.js","SceneTree/Parameters/GeometryParameter.js","SceneTree/Parameters/FilePathParameter.js","SceneTree/BaseImage.js","SceneTree/Parameters/MaterialFloatParam.js","SceneTree/Parameters/MaterialColorParam.js","Utilities/Events/ShaderNameChangedEvent.js","Utilities/Events/TransparencyChangedEvent.js","Utilities/Events/TexturedChangedEvent.js","SceneTree/Material.js","SceneTree/Parameters/MaterialParameter.js","SceneTree/Geometry/Attribute.js","SceneTree/Geometry/Vec3Attribute.js","SceneTree/Geometry/Vec2Attribute.js","SceneTree/Geometry/BaseGeom.js","SceneTree/Geometry/Vec4Attribute.js","SceneTree/Geometry/ColorAttribute.js","SceneTree/Geometry/Points.js","SceneTree/Geometry/Lines.js","SceneTree/Geometry/Mesh.js","SceneTree/Geometry/GeomProxies.js","SceneTree/Geometry/Shapes/ProceduralPoints.js","SceneTree/Geometry/Shapes/ProceduralLines.js","SceneTree/Geometry/Shapes/ProceduralMesh.js","SceneTree/Geometry/Shapes/PointGrid.js","SceneTree/Geometry/Shapes/Rect.js","SceneTree/Geometry/Shapes/Circle.js","SceneTree/Geometry/Shapes/Cross.js","SceneTree/Geometry/Shapes/LinesCuboid.js","SceneTree/Geometry/Shapes/Grid.js","SceneTree/Geometry/Shapes/Cone.js","SceneTree/Geometry/Shapes/Cuboid.js","SceneTree/Geometry/Shapes/Cylinder.js","SceneTree/Geometry/Shapes/Disc.js","SceneTree/Geometry/Shapes/Plane.js","SceneTree/Geometry/Shapes/Sphere.js","SceneTree/Geometry/Shapes/Torus.js","SceneTree/Images/DataImage.js","SceneTree/Images/FileImage.js","SceneTree/Images/LDRImage.js","SceneTree/Images/VLHImage.js","SceneTree/Images/LDRVideo.js","external/gifuct-js.js","SceneTree/Images/GIFImage.js","SceneTree/Images/EnvMap.js","SceneTree/Images/LabelManager.js","SceneTree/Images/Label.js","SceneTree/Images/VideoStreamImage2D.js","SceneTree/Materials/FatLinesMaterial.js","SceneTree/Materials/FatPointsMaterial.js","SceneTree/Materials/FlatSurfaceMaterial.js","SceneTree/Materials/LinesMaterial.js","SceneTree/Materials/PointsMaterial.js","SceneTree/Materials/ScreenSpaceMaterial.js","SceneTree/Materials/SimpleSurfaceMaterial.js","SceneTree/Materials/StandardSurfaceMaterial.js","SceneTree/InstanceItem.js","SceneTree/BaseGeomItem.js","SceneTree/GeomItem.js","SceneTree/Groups/BaseGroup.js","SceneTree/Groups/SelectionSet.js","Utilities/Events/StreamFileParsedEvent.js","Utilities/Events/RangeLoadedEvent.js","SceneTree/GeomLibrary.js","SceneTree/MaterialLibrary.js","SceneTree/AssetItem.js","SceneTree/AssetLoadContext.js","SceneTree/BillboardItem.js","SceneTree/Camera.js","SceneTree/Operators/GroupMemberXfoOperator.js","SceneTree/Groups/KinematicGroup.js","SceneTree/Groups/MaterialGroup.js","SceneTree/Operators/CuttingPlaneOperator.js","SceneTree/Groups/CuttingPlane.js","SceneTree/GridTreeItem.js","SceneTree/Scene.js","SceneTree/VLAAsset.js","../node_modules/tslib/tslib.es6.js","SceneTree/Manipulators/BaseTool.js","Renderer/Passes/GLPass.js","SceneTree/Manipulators/CameraManipulator.js","Renderer/GLContext.js","Renderer/processTextureParams.js","Renderer/GLTexture2D.js","Renderer/ShaderLibrary.js","Renderer/GLSLConstants.js","Renderer/GLShader.js","Renderer/GLFbo.js","Renderer/GLRenderTarget.js","Renderer/Shaders/GLSL/index.js","Renderer/Shaders/UnpackHDRShader.js","Renderer/Drawing/GeomShaderBinding.js","Renderer/GLHDRImage.js","Renderer/Shaders/PreComputeBRDFShader.js","Renderer/Shaders/ConvolveIrradianceShader.js","Renderer/Shaders/ConvolveSpecularShader.js","Renderer/GLProbe.js","Renderer/Shaders/EnvMapShader.js","Renderer/GLEnvMap.js","../node_modules/lodash/isObject.js","../node_modules/lodash/_freeGlobal.js","../node_modules/lodash/_root.js","../node_modules/lodash/now.js","../node_modules/lodash/_trimmedEndIndex.js","../node_modules/lodash/_baseTrim.js","../node_modules/lodash/_Symbol.js","../node_modules/lodash/_getRawTag.js","../node_modules/lodash/_objectToString.js","../node_modules/lodash/_baseGetTag.js","../node_modules/lodash/isObjectLike.js","../node_modules/lodash/isSymbol.js","../node_modules/lodash/toNumber.js","../node_modules/lodash/debounce.js","../node_modules/lodash/throttle.js","Renderer/Shaders/ScreenQuadShader.js","Renderer/GLScreenQuad.js","Renderer/Drawing/GLGeom.js","Renderer/Drawing/GLMesh.js","Renderer/GLBaseViewport.js","Utilities/Events/ViewChangedEvent.js","Utilities/IntersectionData.js","Renderer/GLViewport.js","Renderer/VR/VRHead.js","Renderer/VR/VRController.js","Renderer/VR/VRViewManipulator.js","Utilities/Events/VRViewChangedEvent.js","Utilities/Events/ControllerAddedEvent.js","Utilities/Events/StateChangedEvent.js","Renderer/VR/VRViewport.js","Renderer/Drawing/MaterialShaderBinding.js","Renderer/Drawing/GLMaterial.js","Renderer/Drawing/GLMaterialLibrary.js","Renderer/Drawing/GLPoints.js","Renderer/Drawing/GLLines.js","Utilities/Events/VisibilityChangedEvent.js","Renderer/Drawing/GLGeomItem.js","Utilities/Events/CountChangedEvent.js","Renderer/Drawing/GLGeomItemSet.js","Renderer/Drawing/GLMaterialGeomItemSets.js","Renderer/Drawing/GLShaderMaterials.js","Utilities/Events/IndexEvent.js","Renderer/Drawing/GLGeomLibrary.js","Renderer/Drawing/GLGeomItemLibrary.js","Utilities/Events/SceneSetEvent.js","Utilities/Events/XrViewportEvent.js","Utilities/Events/KeyboardEvent.js","Renderer/GLBaseRenderer.js","Renderer/Shaders/HighlightsShader.js","Renderer/Shaders/SilhouetteShader.js","Utilities/Events/EnvMapAssignedEvent.js","Renderer/GLRenderer.js","Renderer/Shaders/BillboardShader.js","Renderer/Shaders/EnvProjectionShader.js","Renderer/Shaders/FatLinesShader.js","Renderer/Shaders/FlatSurfaceShader.js","Renderer/Shaders/LinesShader.js","Renderer/Shaders/PointsShader.js","Renderer/Shaders/FatPointsShader.js","Renderer/Shaders/SimpleSurfaceShader.js","Renderer/Shaders/StandardSurfaceShader.js","Renderer/Shaders/ScreenSpaceShader.js","Renderer/Passes/GLStandardGeomsPass.js","Renderer/Drawing/GLGeomItemSetMultiDraw.js","Renderer/Drawing/GLLinesItemSet.js","Renderer/Drawing/GLPointsItemSet.js","Renderer/Drawing/GLMeshItemSet.js","Renderer/Drawing/GLShaderGeomSets.js","Renderer/Passes/GLOpaqueGeomsPass.js","Renderer/Shaders/FattenLinesShader.js","Renderer/Passes/GLLinesPass.js","Renderer/Passes/GLTransparentGeomsPass.js","Renderer/Shaders/AtlasLayoutShader.js","Renderer/GLImageAtlas.js","Renderer/Passes/GLBillboardsPass.js","Renderer/Passes/GLOverlayPass.js","Renderer/Shaders/BoundingBoxShader.js","index.js","LibsRegistry.js","SceneTree/BinWriter.js","Math/Frustum.js","Renderer/Passes/GLBoundingBoxPass.js","Renderer/Shaders/NormalsShader.js","SceneTree/ObjAsset.js"],"sourcesContent":["// eslint-disable-next-line require-jsdoc\r\nfunction isIOSDevice() {\r\n    return ((navigator.userAgent.match(/iPhone/i) ||\r\n        navigator.userAgent.match(/iPad/i) ||\r\n        navigator.userAgent.match(/iPod/i)) != null);\r\n}\r\n// eslint-disable-next-line require-jsdoc\r\nfunction isMobileDevice() {\r\n    return ((navigator.userAgent.match(/Android/i) ||\r\n        navigator.userAgent.match(/webOS/i) ||\r\n        navigator.userAgent.match(/iPhone/i) ||\r\n        navigator.userAgent.match(/iPad/i) ||\r\n        navigator.userAgent.match(/iPod/i) ||\r\n        navigator.userAgent.match(/BlackBerry/i) ||\r\n        navigator.userAgent.match(/Pixel/i) ||\r\n        navigator.userAgent.match(/Windows Phone/i)) != null);\r\n}\r\n// eslint-disable-next-line require-jsdoc\r\nfunction getBrowserDesc() {\r\n    const nAgt = navigator.userAgent;\r\n    let browserName = navigator.appName;\r\n    let fullVersion = '' + parseFloat(navigator.appVersion);\r\n    let majorVersion = parseInt(navigator.appVersion, 10);\r\n    let nameOffset;\r\n    let verOffset;\r\n    let ix;\r\n    if (navigator.brave) {\r\n        browserName = 'Brave';\r\n        verOffset = nAgt.indexOf('Chrome');\r\n        fullVersion = nAgt.substring(verOffset + 7, nAgt.indexOf(' ', verOffset + 7));\r\n    }\r\n    // In Opera, the true version is after \"Opera\" or after \"Version\"\r\n    else if ((verOffset = nAgt.indexOf('Opera')) != -1) {\r\n        browserName = 'Opera';\r\n        fullVersion = nAgt.substring(verOffset + 6);\r\n        if ((verOffset = nAgt.indexOf('Version')) != -1)\r\n            fullVersion = nAgt.substring(verOffset + 8);\r\n    }\r\n    // In MSIE, the true version is after \"MSIE\" in userAgent\r\n    else if ((verOffset = nAgt.indexOf('MSIE')) != -1) {\r\n        browserName = 'Microsoft Internet Explorer';\r\n        fullVersion = nAgt.substring(verOffset + 5);\r\n    }\r\n    else if ((verOffset = nAgt.indexOf('Edge')) != -1) {\r\n        browserName = 'Edge';\r\n        fullVersion = nAgt.substring(verOffset + 4);\r\n    }\r\n    // In Chrome, the true version is after \"Chrome\"\r\n    else if ((verOffset = nAgt.indexOf('Chrome')) != -1) {\r\n        browserName = 'Chrome';\r\n        fullVersion = nAgt.substring(verOffset + 7, nAgt.indexOf(' ', verOffset + 7));\r\n    }\r\n    // TOOD: Parse Samsung userAgent\r\n    // https://developer.samsung.com/technical-doc/view.do?v=T000000203\r\n    // In Safari, the true version is after \"Safari\" or after \"Version\"\r\n    else if ((verOffset = nAgt.indexOf('Safari')) != -1) {\r\n        browserName = 'Safari';\r\n        fullVersion = nAgt.substring(verOffset + 7);\r\n        if ((verOffset = nAgt.indexOf('Version')) != -1)\r\n            fullVersion = nAgt.substring(verOffset + 8);\r\n    }\r\n    // In Firefox, the true version is after \"Firefox\"\r\n    else if ((verOffset = nAgt.indexOf('Firefox')) != -1) {\r\n        browserName = 'Firefox';\r\n        fullVersion = nAgt.substring(verOffset + 8);\r\n    }\r\n    // In most other browsers, \"name/version\" is at the end of userAgent\r\n    else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) < (verOffset = nAgt.lastIndexOf('/'))) {\r\n        browserName = nAgt.substring(nameOffset, verOffset);\r\n        fullVersion = nAgt.substring(verOffset + 1);\r\n        if (browserName.toLowerCase() == browserName.toUpperCase()) {\r\n            browserName = navigator.appName;\r\n        }\r\n    }\r\n    // trim the fullVersion string at semicolon/space if present\r\n    if ((ix = fullVersion.indexOf(';')) != -1)\r\n        fullVersion = fullVersion.substring(0, ix);\r\n    if ((ix = fullVersion.indexOf(' ')) != -1)\r\n        fullVersion = fullVersion.substring(0, ix);\r\n    majorVersion = parseInt('' + fullVersion, 10);\r\n    if (isNaN(majorVersion)) {\r\n        fullVersion = '' + parseFloat(navigator.appVersion);\r\n        majorVersion = parseInt(navigator.appVersion, 10);\r\n    }\r\n    return {\r\n        browserName,\r\n        fullVersion,\r\n        majorVersion,\r\n        appName: navigator.appName,\r\n        userAgent: navigator.userAgent,\r\n    };\r\n}\r\n// eslint-disable-next-line require-jsdoc\r\nfunction getGPUDesc() {\r\n    let webgl;\r\n    try {\r\n        webgl = document.createElement('canvas').getContext('webgl');\r\n    }\r\n    catch (e) { }\r\n    if (!webgl) {\r\n        return {\r\n            vendor: 'Unknown',\r\n            renderer: 'Unknown',\r\n            gpuVendor: 'Unknown',\r\n            maxTextureSize: 0,\r\n            supportsWebGL: false,\r\n            supportsWebGL2: false,\r\n        };\r\n    }\r\n    let webgl2;\r\n    try {\r\n        webgl2 = document.createElement('canvas').getContext('webgl2');\r\n    }\r\n    catch (e) { }\r\n    const debugInfo = webgl.getExtension('WEBGL_debug_renderer_info');\r\n    if (!debugInfo) {\r\n        console.warn('Unable to determine GPU Info:');\r\n        return {\r\n            vendor: 'Unknown',\r\n            renderer: 'Unknown',\r\n            gpuVendor: 'Unknown',\r\n            maxTextureSize: 0,\r\n            supportsWebGL: webgl != undefined,\r\n            supportsWebGL2: webgl2 != undefined,\r\n        };\r\n    }\r\n    const vendor = webgl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL);\r\n    const renderer = webgl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);\r\n    const maxTextureSize = webgl.getParameter(webgl.MAX_TEXTURE_SIZE);\r\n    let gpuVendor;\r\n    if (renderer.match(/NVIDIA/i)) {\r\n        gpuVendor = 'NVidia';\r\n    }\r\n    else if (renderer.match(/AMD/i) || renderer.match(/Radeon/i)) {\r\n        gpuVendor = 'AMD';\r\n    }\r\n    else if (renderer.match(/Intel/i)) {\r\n        gpuVendor = 'Intel';\r\n    }\r\n    else if (renderer.match(/Mali/i)) {\r\n        gpuVendor = 'ARM';\r\n    }\r\n    else if (renderer.match(/Apple/i)) {\r\n        gpuVendor = 'Apple';\r\n    }\r\n    else if (renderer.match(/Adreno/i)) {\r\n        gpuVendor = 'Adreno';\r\n    }\r\n    else if (renderer.match(/Swiftshader/i)) {\r\n        gpuVendor = 'Google';\r\n        console.warn('Hardware rendering is disabled or not working on your system. Falling back to the Swiftshader. Expect poor performance:', renderer);\r\n    }\r\n    else {\r\n        console.warn('Unable to determine GPU vendor:', renderer);\r\n    }\r\n    return {\r\n        vendor,\r\n        renderer,\r\n        gpuVendor,\r\n        maxTextureSize,\r\n        supportsWebGL: true,\r\n        supportsWebGL2: webgl2 != undefined,\r\n    };\r\n}\r\nconst SystemDesc = (function () {\r\n    if (!globalThis.navigator) {\r\n        // When running in NodeJS\r\n        return {\r\n            isMobileDevice: false,\r\n            isIOSDevice: false,\r\n            browserName: 'Node',\r\n            webGLSupported: false,\r\n            deviceCategory: 'High',\r\n            hardwareConcurrency: 4,\r\n        };\r\n    }\r\n    const isMobile = isMobileDevice();\r\n    const browserDesc = getBrowserDesc();\r\n    const gpuDesc = getGPUDesc();\r\n    let deviceCategory = 'Low';\r\n    if (gpuDesc.supportsWebGL) {\r\n        // We divide devices into 3 categories.\r\n        // 0: low end, we dial everything down as much as possible\r\n        // 1: mid-range, Enb maps and Textures go to mid-lods.\r\n        //    Typically these devices are laptops, so the textures can't be too blurry\r\n        // 2: High-end: turn up as much as needed.\r\n        if (!isMobile) {\r\n            // Remove braces and split into parts\r\n            const parts = gpuDesc.renderer.replace(/[()]/g, '').split(' ');\r\n            if (gpuDesc.gpuVendor == 'NVidia') {\r\n                const gtxIdx = parts.indexOf('GTX');\r\n                if (gtxIdx != -1) {\r\n                    const model = parts[gtxIdx + 1];\r\n                    if (model.endsWith('M')) {\r\n                        // laptop GPU.\r\n                        const modelNumber = parseInt(model.substring(0, model.length - 2));\r\n                        if (modelNumber >= 900) {\r\n                            deviceCategory = 'Medium';\r\n                        }\r\n                        else {\r\n                            deviceCategory = 'Low';\r\n                        }\r\n                    }\r\n                    else {\r\n                        const modelNumber = parseInt(model);\r\n                        if (modelNumber >= 1030) {\r\n                            deviceCategory = 'High';\r\n                        }\r\n                        else {\r\n                            deviceCategory = 'Medium';\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (parts.includes('RTX') || parts.includes('TITAN') || parts.includes('Quadro')) {\r\n                        deviceCategory = 'High';\r\n                    }\r\n                    else {\r\n                        deviceCategory = 'Low';\r\n                    }\r\n                }\r\n            }\r\n            else if (gpuDesc.gpuVendor == 'AMD') {\r\n                const radeonIdx = parts.indexOf('Radeon');\r\n                if (radeonIdx != -1) {\r\n                    const rxIdx = parts.indexOf('RX');\r\n                    if (rxIdx != -1) {\r\n                        if (parts[rxIdx + 1] == 'Vega') {\r\n                            deviceCategory = 'High';\r\n                        }\r\n                        else {\r\n                            const model = parts[rxIdx + 1];\r\n                            let modelNumber;\r\n                            if (model.endsWith('X')) {\r\n                                modelNumber = parseInt(model.substring(0, model.length - 2));\r\n                                deviceCategory = 'High';\r\n                            }\r\n                            else {\r\n                                modelNumber = parseInt(model);\r\n                            }\r\n                            if (modelNumber >= 480) {\r\n                                deviceCategory = 'High';\r\n                            }\r\n                            else {\r\n                                deviceCategory = 'Medium';\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (parts[radeonIdx + 1] == 'Pro') {\r\n                        const modelNumber = parseInt(parts[rxIdx + 1]);\r\n                        if (modelNumber >= 450) {\r\n                            deviceCategory = 'Medium';\r\n                        }\r\n                        else {\r\n                            deviceCategory = 'Low';\r\n                        }\r\n                    }\r\n                    else if (parts[radeonIdx + 1] == 'Sky') {\r\n                        const modelNumber = parseInt(parts[rxIdx + 1]);\r\n                        if (modelNumber >= 700) {\r\n                            deviceCategory = 'Medium';\r\n                        }\r\n                        else {\r\n                            deviceCategory = 'Low';\r\n                        }\r\n                    }\r\n                    else {\r\n                        deviceCategory = 'Low';\r\n                    }\r\n                }\r\n                else {\r\n                    if (parts.includes('FirePro') || parts.includes('Quadro')) {\r\n                        deviceCategory = 'High';\r\n                    }\r\n                    else {\r\n                        deviceCategory = 'Low';\r\n                    }\r\n                }\r\n            }\r\n            else if (gpuDesc.gpuVendor == 'Adreno') {\r\n                deviceCategory = 'Low';\r\n            }\r\n            else if (gpuDesc.gpuVendor == 'Intel') {\r\n                deviceCategory = 'Low';\r\n            }\r\n            else if (gpuDesc.gpuVendor == 'Google') {\r\n                deviceCategory = 'Low';\r\n            }\r\n        }\r\n        else {\r\n            deviceCategory = 'Low';\r\n        }\r\n    }\r\n    let hardwareConcurrency = globalThis.navigator.hardwareConcurrency;\r\n    if (!hardwareConcurrency) {\r\n        if (isMobile)\r\n            hardwareConcurrency = 4;\r\n        else\r\n            hardwareConcurrency = 6;\r\n    }\r\n    return {\r\n        isMobileDevice: isMobile,\r\n        isIOSDevice: isIOSDevice(),\r\n        browserName: browserDesc.browserName,\r\n        fullVersion: browserDesc.fullVersion,\r\n        majorVersion: browserDesc.majorVersion,\r\n        appName: browserDesc.appName,\r\n        userAgent: browserDesc.userAgent,\r\n        webGLSupported: gpuDesc.supportsWebGL,\r\n        gpuDesc,\r\n        deviceCategory,\r\n        hardwareConcurrency,\r\n    };\r\n})();\r\n// @ts-ignore\r\nif (!globalThis.ZeaSystemDesc) {\r\n    // @ts-ignore\r\n    globalThis.ZeaSystemDesc = SystemDesc;\r\n}\r\nexport { SystemDesc };\r\n//# sourceMappingURL=SystemDesc.js.map","let registeredClasses = {};\r\nlet classNames = {};\r\nlet classDefinitions = [];\r\n/**\r\n * Registry is a static factory that handles registration/reconstruction of\r\n * classes bases on BaseClass. Registered classes can then be constructed by the Registry by name.\r\n *\r\n * Note: className is required because on minification process\r\n * the name of classes change and we can't simply use '....constructor.name'.\r\n * So, we need a way of relating minified class names to the one stored for persistency.\r\n *\r\n * i.e.\r\n * ```javascript\r\n * // Import registry class\r\n * class Foo() extends BaseClass {}\r\n *\r\n * Registry.register('Foo', Foo)\r\n * // In case 'Foo' class gets its name changed to 'c' on minification,\r\n * // and the persisted data type is 'Foo', we would know how to relate them.\r\n * ```\r\n *\r\n * @static\r\n * @class Registry\r\n */\r\nclass Registry {\r\n    /**\r\n     * Registers a new class to the factory.\r\n     *\r\n     * @param className - Name of the registered class\r\n     * @param classDef - Class representation(Class function, type)\r\n     */\r\n    static register(className, classDef) {\r\n        if (className in registeredClasses) {\r\n            console.warn(`There's a class registered with '${className}' name`);\r\n        }\r\n        // Note: To provide backwards compatibility, same classDef can be stored under multiple names.\r\n        // Thats the reason behind using indexes instead of the classDef.\r\n        const index = classDefinitions.length;\r\n        classDefinitions.push(classDef);\r\n        classNames[index] = className;\r\n        registeredClasses[className] = index;\r\n    }\r\n    /**\r\n     * Returns class definition using the name it was registered with.\r\n     *\r\n     * @param className - Name of the registered class\r\n     * @return - Class representation(Class function, type)\r\n     */\r\n    static getClassDefinition(className) {\r\n        if (!(className in registeredClasses))\r\n            throw new Error(`${className} class is not registered`);\r\n        return classDefinitions[registeredClasses[className]];\r\n    }\r\n    /**\r\n     * Returns class name registered for the instantiated object.\r\n     * @param classDefinition - Class type definition.\r\n     * @return - Name of the registered class\r\n     */\r\n    static getClassName(classDefinition) {\r\n        const classId = classDefinitions.indexOf(classDefinition);\r\n        if (classId >= 0 && classNames[classId])\r\n            return classNames[classId];\r\n        throw new Error(`class is not registered`);\r\n    }\r\n    /**\r\n     * The factory function that construct the class registered under the given name.\r\n     *\r\n     * @param className - Name of the registered class\r\n     * @return - Instantiated object of the specified class\r\n     */\r\n    static constructClass(className) {\r\n        const classDefinition = classDefinitions[registeredClasses[className]];\r\n        if (!classDefinition)\r\n            throw new Error(`${className} class is not registered`);\r\n        return new classDefinition();\r\n    }\r\n    /**\r\n     * For testing purpose only, never call this outside of the test scope.\r\n     *\r\n     * @private\r\n     */\r\n    static flush() {\r\n        registeredClasses = {};\r\n        classNames = {};\r\n        classDefinitions = [];\r\n    }\r\n}\r\nexport { Registry };\r\n//# sourceMappingURL=Registry.js.map","/**\r\n * String functions\r\n *\r\n */\r\nclass StringFunctions {\r\n    /**\r\n     * Replaces all matches in a string.\r\n     *\r\n     * @static\r\n     * @param str -\r\n     * @param pattern -\r\n     * @param replacement -\r\n     * @return -\r\n     */\r\n    static replaceAll(str, pattern, replacement) {\r\n        return str.replace(new RegExp(pattern, 'g'), replacement);\r\n    }\r\n    /**\r\n     * Returns JSON object as a formatted string, but the numeric values are fixed to the specified precision.\r\n     *\r\n     * @static\r\n     * @param val -\r\n     * @param space -\r\n     * @param precision -\r\n     * @return -\r\n     */\r\n    static stringifyJSONWithFixedPrecision(val, space = 0, precision = 5) {\r\n        return JSON.stringify(val, (_, val) => {\r\n            return val ? (val.toFixed ? Number(val.toFixed(precision)) : val) : val;\r\n        }, space);\r\n    }\r\n    /**\r\n     * Transforms the given string into a numeric value.\r\n     *\r\n     * @static\r\n     * @param str -\r\n     * @return -\r\n     */\r\n    static hashStr(str) {\r\n        let hash = 0;\r\n        let i;\r\n        let chr;\r\n        let len;\r\n        if (str.length === 0)\r\n            return hash;\r\n        for (i = 0, len = str.length; i < len; i++) {\r\n            chr = str.charCodeAt(i);\r\n            hash = (hash << 5) - hash + chr;\r\n            hash |= 0; // Convert to 32bit integer\r\n        }\r\n        return Math.abs(hash);\r\n    }\r\n}\r\nexport { StringFunctions };\r\n//# sourceMappingURL=StringFunctions.js.map","import { StringFunctions } from '../Utilities/StringFunctions';\r\n/**\r\n * Representing a Vec2(two-dimensional floating point vector). A Vec2 is for representing 2 dimensional values, such as screen coordinates or pixel coordinates within an image.\r\n *\r\n * Math types internally store values in {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array|Float32Array} and\r\n * expose getters and setters for the component values.\r\n *\r\n */\r\nclass Vec2 {\r\n    /**\r\n     * Creates a Vec2.\r\n     *\r\n     * The type of values of the `(x, y)` coordinates can be {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array|Float32Array},\r\n     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array|Uint32Array},\r\n     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array|Int32Array} and\r\n     * {@link https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/ArrayBuffer|ArrayBuffer}.\r\n     *\r\n     *\r\n     * ```javascript\r\n     *  const myVec2 = new Vec2(1.2, 3.4)\r\n     * ```\r\n     *\r\n     * Given an array of floats, create a Vec2 that wraps some part of it.\r\n     * ```javascript\r\n     *  const floatArray = new Float32Array(6)\r\n     *  floatArray[0] = 1.2\r\n     *  floatArray[1] = 3.4\r\n     *  const myVec2 = new Vec2(floatArray)\r\n     *  console.log(myVec2.toJSON())\r\n     * ```\r\n     * The resulting output\r\n     * ```json\r\n     *  > { x:1.2, y:3.4 }\r\n     * ```\r\n     *\r\n     * Given an array of floats, create a Vec2 that wraps some part of it.\r\n     * ```javascript\r\n     *  const floatArray = new Float32Array(6)\r\n     *  floatArray[0] = 1.2\r\n     *  floatArray[1] = 3.4\r\n     *  floatArray[2] = 5.6\r\n     *  floatArray[3] = 7.8\r\n     *  floatArray[4] = 9.0\r\n     *  floatArray[5] = 1.9\r\n     *  const myVec2 = new Vec2(floatArray.buffer, 8)\r\n     *  console.log(myVec2.toJSON())\r\n     * ```\r\n     * The resulting output\r\n     * ```json\r\n     *  > { x:5.6, y:7.8 }\r\n     * ```\r\n     *\r\n     * You can also pass one JSON object parameter.\r\n     * ```javascript\r\n     *  const myVec2 = new Vec2({ x:1.2, y:3.4 })\r\n     * ```\r\n     *\r\n     * @param x - The x value. Default is 0.\r\n     * @param y - The y value. Default is 0.\r\n     */\r\n    constructor(x = 0, y = 0) {\r\n        if (x instanceof Float32Array || x instanceof Uint32Array || x instanceof Int32Array) {\r\n            this.__data = x;\r\n        }\r\n        else if (typeof x == 'number' && typeof y == 'number') {\r\n            this.__data = new Float32Array(2);\r\n            this.__data[0] = x;\r\n            this.__data[1] = y;\r\n        }\r\n        else if (typeof x == 'object') {\r\n            this.__data = new Float32Array(2);\r\n            this.fromJSON(x);\r\n        }\r\n        else {\r\n            this.__data = new Float32Array(2);\r\n        }\r\n    }\r\n    /**\r\n     * Getter for `x` component.\r\n     * @return - Returns the x component.\r\n     */\r\n    get x() {\r\n        return this.__data[0];\r\n    }\r\n    /**\r\n     * Setter for `x` component.\r\n     * @param val - The val param.\r\n     */\r\n    set x(val) {\r\n        this.__data[0] = val;\r\n    }\r\n    /**\r\n     * Getter for `y` component.\r\n     * @return - Returns the y component.\r\n     */\r\n    get y() {\r\n        return this.__data[1];\r\n    }\r\n    /**\r\n     * Setter for `y` component.\r\n     * @param val - The val param.\r\n     */\r\n    set y(val) {\r\n        this.__data[1] = val;\r\n    }\r\n    /**\r\n     * Setter from scalar components.\r\n     * @param x - The x component.\r\n     * @param y  - The y component.\r\n     */\r\n    set(x, y) {\r\n        this.__data[0] = x;\r\n        this.__data[1] = y;\r\n    }\r\n    /**\r\n     * Replaces this Vec2 data with the Vec2 data passed as parameter.\r\n     *\r\n     * @param other - The other Vec2 to set from.\r\n     */\r\n    setFromOther(other) {\r\n        this.x = other.x;\r\n        this.y = other.y;\r\n    }\r\n    /**\r\n     * Checks if this Vec2 contains the same values as the other Vec2.\r\n     *\r\n     * @param other - The other Vec2 to compare with.\r\n     * @return - Returns `true` if are the same Vector, otherwise, `false`.\r\n     */\r\n    isEqual(other) {\r\n        return this.x == other.x && this.y == other.y;\r\n    }\r\n    /**\r\n     * Checks if this Vec2 is different from another Vec2.\r\n     *\r\n     * @param other - The other Vec2 to compare with.\r\n     * @return - Returns `true` if the Vec2s are different, otherwise, `false`.\r\n     */\r\n    notEqual(other) {\r\n        return this.x != other.x && this.y != other.y;\r\n    }\r\n    /**\r\n     * Returns true if this Vec2 is approximately the same as other.\r\n     *\r\n     * @param other - The other Vec2 to compare with.\r\n     * @param precision - The precision to which the values must match.\r\n     * @return - Returns true or false.\r\n     */\r\n    approxEqual(other, precision = Number.EPSILON) {\r\n        return Math.abs(this.x - other.x) < precision && Math.abs(this.y - other.y) < precision;\r\n    }\r\n    /**\r\n     * Adds other to this Vec2 and returns the result as a new Vec2.\r\n     *\r\n     * @param other - The other Vec2 to add.\r\n     * @return - Returns a new Vec2.\r\n     */\r\n    add(other) {\r\n        return new Vec2(this.x + other.x, this.y + other.y);\r\n    }\r\n    /**\r\n     * Adds a Vec2 to this Vec2.\r\n     *\r\n     * @param other - The other Vec2 to add.\r\n     */\r\n    addInPlace(other) {\r\n        this.x += other.x;\r\n        this.y += other.y;\r\n    }\r\n    /**\r\n     * Subtracts a Vec2 from this Vec2 and returns the result as a new Vec2.\r\n     *\r\n     * @param other - The other Vec2 to subtract.\r\n     * @return - Returns a new Vec2.\r\n     */\r\n    subtract(other) {\r\n        return new Vec2(this.x - other.x, this.y - other.y);\r\n    }\r\n    /**\r\n     * Subtracts a Vec2 from this Vec2.\r\n     *\r\n     * @param other - The other Vec2 to subtract.\r\n     * @return - Returns a new Vec2.\r\n     */\r\n    subtractInPlace(other) {\r\n        this.x -= other.x;\r\n        this.y -= other.y;\r\n        return this;\r\n    }\r\n    /**\r\n     * Scales this Vec2 by scalar and returns the result as a new Vec2.\r\n     *\r\n     * @param scalar - The scalar value.\r\n     * @return - Returns a new Vec2.\r\n     */\r\n    scale(scalar) {\r\n        return new Vec2(this.x * scalar, this.y * scalar);\r\n    }\r\n    /**\r\n     * Scales this Vec2 by scalar.\r\n     *\r\n     * @param scalar - The scalar value.\r\n     */\r\n    scaleInPlace(scalar) {\r\n        this.x *= scalar;\r\n        this.y *= scalar;\r\n    }\r\n    /**\r\n     * Inverts this Vec2 and returns the result as a new Vec2.\r\n     *\r\n     * @return - Returns a new Vec2.\r\n     */\r\n    invert() {\r\n        return new Vec2(1.0 / this.x, 1.0 / this.y);\r\n    }\r\n    /**\r\n     * Inverts this Vec2.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    invertInPlace() {\r\n        this.x = 1.0 / this.x;\r\n        this.y = 1.0 / this.y;\r\n        return this;\r\n    }\r\n    /**\r\n     * Multiplies a Vec2 with this Vec2 and returns the result as a new Vec2.\r\n     *\r\n     * @param other - The other Vec2 to multiply with.\r\n     * @return - Returns a new Vec2.\r\n     */\r\n    multiply(other) {\r\n        return new Vec2(this.x * other.x, this.y * other.y);\r\n    }\r\n    /**\r\n     * Multiplies a Vec2 with this Vec2.\r\n     *\r\n     * @param other - The other Vec2 to multiply with.\r\n     */\r\n    multiplyInPlace(other) {\r\n        this.x *= other.x;\r\n        this.y *= other.y;\r\n    }\r\n    /**\r\n     * Calculates the squared length of this Vec2.\r\n     *\r\n     * @return - Returns the length squared.\r\n     */\r\n    lengthSquared() {\r\n        const x = this.__data[0];\r\n        const y = this.__data[1];\r\n        return x * x + y * y;\r\n    }\r\n    /**\r\n     * Calculates the length of this Vec2.\r\n     *\r\n     * @return - Returns the length.\r\n     */\r\n    length() {\r\n        return Math.sqrt(this.lengthSquared());\r\n    }\r\n    /**\r\n     * Calculates the distance to another vector.\r\n     *\r\n     * @param other - The other value.\r\n     * @return - Returns the distance between vectors.\r\n     */\r\n    distanceTo(other) {\r\n        const x = this.__data[0] - other.x;\r\n        const y = this.__data[1] - other.y;\r\n        return Math.sqrt(x * x + y * y);\r\n    }\r\n    /**\r\n     * Normalizes the Vec2 and returns it as a new Vec2.\r\n     * Multiplies coordinates value by the inverse of the vector length.\r\n     *\r\n     * @return - Returns the Vec2 normalized.\r\n     */\r\n    normalize() {\r\n        const x = this.__data[0];\r\n        const y = this.__data[1];\r\n        let len = x * x + y * y;\r\n        if (len < Number.EPSILON) {\r\n            return new Vec2();\r\n        }\r\n        // TODO: evaluate use of glm_invsqrt here?\r\n        len = 1 / Math.sqrt(len);\r\n        return new Vec2(x * len, y * len);\r\n    }\r\n    /**\r\n     * Normalizes this Vec2 multiplying coordinate values by the inverse of the vector length.\r\n     */\r\n    normalizeInPlace() {\r\n        const x = this.__data[0];\r\n        const y = this.__data[1];\r\n        let len = x * x + y * y;\r\n        if (len < Number.EPSILON) {\r\n            return;\r\n        }\r\n        len = 1 / Math.sqrt(len);\r\n        this.set(x * len, y * len);\r\n    }\r\n    /**\r\n     * Calculates the dot product of this Vec2 against another Vec2.\r\n     *\r\n     * @param other - The other Vec2 to compare with.\r\n     * @return - Returns the dot product.\r\n     */\r\n    dot(other) {\r\n        return this.x * other.x + this.y * other.y;\r\n    }\r\n    /**\r\n     * Calculates the cross product of this Vec2 against another Vec2.\r\n     *\r\n     * @param other - The other Vec2 to compare with.\r\n     * @return - Returns the cross product.\r\n     */\r\n    cross(other) {\r\n        // just calculate the z-component\r\n        return this.x * other.y - this.y * other.x;\r\n    }\r\n    /**\r\n     * Gets the angle between this Vec2 and other assuming both are normalized vectors.\r\n     *\r\n     * @param other - The other Vec2 to compare with.\r\n     * @return - Returns the angle in radians.\r\n     */\r\n    angleTo(other) {\r\n        const cosine = this.normalize().dot(other.normalize());\r\n        if (cosine > 1.0)\r\n            return 0.0;\r\n        else if (cosine < -1.0)\r\n            return Math.PI;\r\n        else\r\n            return Math.acos(cosine);\r\n    }\r\n    /**\r\n     * Gets the angle between this Vec2 and other.\r\n     *\r\n     * @param other - The other Vec2 to compare with.\r\n     * @return - Returns the angle in radians.\r\n     */\r\n    signedAngleTo(other) {\r\n        const angle = this.angleTo(other);\r\n        if (this.cross(other) < 0.0)\r\n            return -angle;\r\n        else\r\n            return angle;\r\n    }\r\n    /**\r\n     * Rotates a Vec2 in a clockwise direction and returns a new rotated Vec2.\r\n     *\r\n     * @param angle - The angle of rotation.\r\n     * @return - Returns the rotated vector.\r\n     */\r\n    rotate(angle) {\r\n        const cosA = Math.cos(angle);\r\n        const sinA = Math.sin(angle);\r\n        return new Vec2(this.x * cosA - this.y * sinA, this.x * sinA + this.y * cosA);\r\n    }\r\n    /**\r\n     * Performs a linear interpolation between this Vec2 and other Vec2.\r\n     *\r\n     * @param other - The other Vec2 to interpolate between.\r\n     * @param t - Interpolation amount between the two inputs.\r\n     * @return - Returns a new Vec2.\r\n     */\r\n    lerp(other, t) {\r\n        const ax = this.x;\r\n        const ay = this.y;\r\n        return new Vec2(ax + t * (other.x - ax), ay + t * (other.y - ay));\r\n    }\r\n    /**\r\n     * Generates a random vector with the given scale.\r\n     *\r\n     * @param scale - Length of the resulting vector. If omitted, a unit vector will be returned.\r\n     * @return - The return value.\r\n     */\r\n    setRandomDir(scale = 1.0) {\r\n        const r = Math.random() * 2.0 * Math.PI;\r\n        this.__data[0] = Math.cos(r) * scale;\r\n        this.__data[1] = Math.sin(r) * scale;\r\n        return this;\r\n    }\r\n    /**\r\n     * Randomizes the scale of this Vec2 coordinates.\r\n     *\r\n     * @param scale - The scale value.\r\n     * @return - The return value.\r\n     */\r\n    setRandom(scale = 1.0) {\r\n        this.__data[0] = Math.random() * scale;\r\n        this.__data[1] = Math.random() * scale;\r\n        return this;\r\n    }\r\n    /**\r\n     * Clones this Vec2 and returns a new Vec2.\r\n     *\r\n     * @return - Returns a new Vec2.\r\n     */\r\n    clone() {\r\n        return new Vec2(this.__data[0], this.__data[1]);\r\n    }\r\n    /**\r\n     * Returns current Vec2 data as array. Often used to pass types to the GPU.\r\n     *\r\n     * @return - Returns as an array.\r\n     */\r\n    asArray() {\r\n        return this.__data;\r\n    }\r\n    // ///////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Converts this Vec3 to a string in JSON format.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    toString() {\r\n        // eslint-disable-next-line new-cap\r\n        return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());\r\n    }\r\n    /**\r\n     * Encodes Vec2 Class as a JSON object for persistence.\r\n     *\r\n     * @return - The json object.\r\n     */\r\n    toJSON() {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n        };\r\n    }\r\n    /**\r\n     * Decodes a JSON object to set the state of this class.\r\n     *\r\n     * @param j - The json object.\r\n     */\r\n    fromJSON(j) {\r\n        this.x = j.x;\r\n        this.y = j.y;\r\n    }\r\n    /**\r\n     * Loads the state of the value from a binary reader.\r\n     *\r\n     * @param reader - The reader value.\r\n     */\r\n    readBinary(reader) {\r\n        this.x = reader.loadFloat32();\r\n        this.y = reader.loadFloat32();\r\n    }\r\n    /**\r\n     * Calculate the intersection point of 2 2d lines, returning the parameters values for each line.\r\n     *\r\n     * @param p0 - The point of the first line\r\n     * @param d0 - The direction of the first line\r\n     * @param p1 - The point of the second line\r\n     * @param d1 - The direction of the second line\r\n     * @return - Returns an array containing 2 parameter values for the 2 lines.\r\n     */\r\n    static intersectionOfLines(p1, p2, p3, p4) {\r\n        // https://dirask.com/posts/JavaScript-how-to-calculate-intersection-point-of-two-lines-for-given-4-points-VjvnAj\r\n        // down part of intersection point formula\r\n        const d1 = (p1.x - p2.x) * (p3.y - p4.y); // (x1 - x2) * (y3 - y4)\r\n        const d2 = (p1.y - p2.y) * (p3.x - p4.x); // (y1 - y2) * (x3 - x4)\r\n        const d = d1 - d2;\r\n        if (d == 0) {\r\n            return null;\r\n        }\r\n        // upper part of intersection point formula\r\n        const u1 = p1.x * p2.y - p1.y * p2.x; // (x1 * y2 - y1 * x2)\r\n        const u4 = p3.x * p4.y - p3.y * p4.x; // (x3 * y4 - y3 * x4)\r\n        const u2x = p3.x - p4.x; // (x3 - x4)\r\n        const u3x = p1.x - p2.x; // (x1 - x2)\r\n        const u2y = p3.y - p4.y; // (y3 - y4)\r\n        const u3y = p1.y - p2.y; // (y1 - y2)\r\n        // intersection point formula\r\n        const px = (u1 * u2x - u3x * u4) / d;\r\n        const py = (u1 * u2y - u3y * u4) / d;\r\n        return new Vec2(px, py);\r\n    }\r\n    isValid() {\r\n        for (const v of this.__data) {\r\n            if (v == Infinity || isNaN(v))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexport { Vec2 };\r\n//# sourceMappingURL=Vec2.js.map","import { Vec2 } from './Vec2';\r\nimport { StringFunctions } from '../Utilities/StringFunctions';\r\n/**\r\n * Represents a three dimensional coordinate, such as 3D scene values, or mesh vertex positions.\r\n *\r\n * Math types internally store values in {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array|Float32Array} and\r\n * expose getters and setters for the component values.\r\n */\r\nclass Vec3 {\r\n    /**\r\n     * Creates a Vec3.\r\n     *\r\n     * The type of values of the `(x, y, z)` coordinates can be {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array|Float32Array},\r\n     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array|Uint32Array},\r\n     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array|Int32Array} and\r\n     * {@link https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/ArrayBuffer|ArrayBuffer}.\r\n     *\r\n     * You can also pass one JSON object parameter.\r\n     *\r\n     * @param x - The x value. Default is 0.\r\n     * @param y - The y value. Default is 0.\r\n     * @param z - The z value. Default is 0.\r\n     */\r\n    constructor(x = 0, y = 0, z = 0) {\r\n        if (x instanceof Float32Array || x instanceof Uint32Array) {\r\n            this.__data = x;\r\n        }\r\n        else if (x instanceof ArrayBuffer) {\r\n            console.warn(`deprecated, please use new Vec3(new Float32Array(buffer, byteOffset, 3))`);\r\n            const buffer = x;\r\n            const byteOffset = y;\r\n            this.__data = new Float32Array(buffer, byteOffset, 3);\r\n        }\r\n        else if (typeof x == 'number' && typeof y == 'number' && typeof z == 'number') {\r\n            this.__data = new Float32Array(3);\r\n            this.__data[0] = x;\r\n            this.__data[1] = y;\r\n            this.__data[2] = z;\r\n        }\r\n        else if (x != null && typeof x == 'object') {\r\n            this.__data = new Float32Array(3);\r\n            this.fromJSON(x);\r\n        }\r\n        else {\r\n            this.__data = new Float32Array(3);\r\n        }\r\n    }\r\n    /**\r\n     * Getter for `x` component.\r\n     *\r\n     * @return - Returns the x component.\r\n     */\r\n    get x() {\r\n        return this.__data[0];\r\n    }\r\n    /**\r\n     * Setter for `x` component.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set x(val) {\r\n        this.__data[0] = val;\r\n    }\r\n    /**\r\n     * Getter for `y` component.\r\n     *\r\n     * @return - Returns the y component.\r\n     */\r\n    get y() {\r\n        return this.__data[1];\r\n    }\r\n    /**\r\n     * Setter for `y` component.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set y(val) {\r\n        this.__data[1] = val;\r\n    }\r\n    /**\r\n     * Getter for `z` component.\r\n     *\r\n     * @return - Returns the z component.\r\n     */\r\n    get z() {\r\n        return this.__data[2];\r\n    }\r\n    /**\r\n     * Setter for `z` component.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set z(val) {\r\n        this.__data[2] = val;\r\n    }\r\n    /**\r\n     * Getter for `xy` swizzel.\r\n     *\r\n     * @return - Returns the xy components as a Vec2.\r\n     */\r\n    get xy() {\r\n        return new Vec2(this.__data[0], this.__data[1]);\r\n    }\r\n    /**\r\n     * Getter for `yz` swizzel.\r\n     *\r\n     * @return - Returns the yz components as a Vec2.\r\n     */\r\n    get yz() {\r\n        return new Vec2(this.__data[1], this.__data[2]);\r\n    }\r\n    /**\r\n     * Setter from scalar components.\r\n     *\r\n     * @param x - The x component.\r\n     * @param y - The y component.\r\n     * @param z - The y component.\r\n     */\r\n    set(x, y, z) {\r\n        this.x = x;\r\n        this.y = y !== undefined ? y : x;\r\n        this.z = z !== undefined ? z : x;\r\n    }\r\n    /**\r\n     * Sets the state of a Vec3 Object.\r\n     *\r\n     * @param float32Array - The float32Array value.\r\n     */\r\n    setDataArray(float32Array) {\r\n        this.__data = float32Array;\r\n    }\r\n    /**\r\n     * Sets the state of a Vec3 Object from another Vec3.\r\n     *\r\n     * @param other - The other Vec3 to set from.\r\n     */\r\n    setFromOther(other) {\r\n        this.x = other.x;\r\n        this.y = other.y;\r\n        this.z = other.z;\r\n    }\r\n    /**\r\n     * Checks if the coordinates of this Vec3 are 0 0 0.\r\n     *\r\n     * @return - Returns `true` if the coordinates are(0, 0, 0), otherwise, `false`.\r\n     */\r\n    isNull() {\r\n        return Math.abs(this.x) < Number.EPSILON && Math.abs(this.y) < Number.EPSILON && Math.abs(this.z) < Number.EPSILON;\r\n    }\r\n    /**\r\n     * Checks if the coordinates of this Vec3 are 1 1 1.\r\n     *\r\n     * @return - Returns `true` if the coordinates are(1, 1, 1), otherwise, `false`.\r\n     */\r\n    is111() {\r\n        return (Math.abs(1.0 - this.x) < Number.EPSILON &&\r\n            Math.abs(1.0 - this.y) < Number.EPSILON &&\r\n            Math.abs(1.0 - this.z) < Number.EPSILON);\r\n    }\r\n    /**\r\n     * Checks if this Vec3 contains the same values as the other Vec3.\r\n     *\r\n     * @param other - The other Vec3 to compare with.\r\n     * @return - Returns `true` if the values are the same, otherwise, `false`.\r\n     */\r\n    isEqual(other) {\r\n        return this.x == other.x && this.y == other.y && this.z == other.z;\r\n    }\r\n    /**\r\n     * Checks if this Vec2 is different from another Vec2.\r\n     *\r\n     * @param other - The other Vec3 to compare with.\r\n     * @return - Returns `true` if the Vec3s are different, otherwise, `false`.\r\n     */\r\n    notEqual(other) {\r\n        return this.x != other.x && this.y != other.y && this.z != other.z;\r\n    }\r\n    /**\r\n     * Returns true if this Vec2 is approximately the same as other.\r\n     *\r\n     * @param other - The other Vec3 to compare with.\r\n     * @param precision - The precision to which the values must match.\r\n     * @return - Returns true or false.\r\n     */\r\n    approxEqual(other, precision = Number.EPSILON) {\r\n        return (Math.abs(this.x - other.x) < precision &&\r\n            Math.abs(this.y - other.y) < precision &&\r\n            Math.abs(this.z - other.z) < precision);\r\n    }\r\n    /**\r\n     * Adds other to this Vec3 and return the result as a new Vec3.\r\n     *\r\n     * @param other - The other Vec3 to add.\r\n     * @return - Returns a new Vec3.\r\n     */\r\n    add(other) {\r\n        return new Vec3(this.x + other.x, this.y + other.y, this.z + other.z);\r\n    }\r\n    /**\r\n     * Adds other to this Vec3.\r\n     *\r\n     * @param other - The other Vec3 to add.\r\n     */\r\n    addInPlace(other) {\r\n        this.x += other.x;\r\n        this.y += other.y;\r\n        this.z += other.z;\r\n    }\r\n    /**\r\n     * Subtracts other from this Vec3 and returns the result as a new Vec3.\r\n     *\r\n     * @param other - The other Vec3 to subtract.\r\n     * @return - Returns a new Vec3.\r\n     */\r\n    subtract(other) {\r\n        return new Vec3(this.x - other.x, this.y - other.y, this.z - other.z);\r\n    }\r\n    /**\r\n     * Subtracts other from this Vec3.\r\n     *\r\n     * @param other - The other Vec3 to subtract.\r\n     */\r\n    subtractInPlace(other) {\r\n        this.x -= other.x;\r\n        this.y -= other.y;\r\n        this.z -= other.z;\r\n    }\r\n    /**\r\n     * Multiplies two Vec3s and returns the result as a new Vec3.\r\n     *\r\n     * @param other - The other Vec3 to multiply with.\r\n     * @return - Returns a new Vec3.\r\n     */\r\n    multiply(other) {\r\n        return new Vec3(this.x * other.x, this.y * other.y, this.z * other.z);\r\n    }\r\n    /**\r\n     * Multiplies two Vec3s.\r\n     *\r\n     * @param other - The other Vec3 to multiply with.\r\n     */\r\n    multiplyInPlace(other) {\r\n        this.x *= other.x;\r\n        this.y *= other.y;\r\n        this.z *= other.z;\r\n    }\r\n    /**\r\n     * Divides two Vec3s and returns the result as a new Vec3.\r\n     *\r\n     * @param vec3 - The other Vec3 to divide by.\r\n     * @return - Returns a new Vec3.\r\n     */\r\n    divide(vec3) {\r\n        return new Vec3(this.x / vec3.x, this.y / vec3.y, this.z / vec3.z);\r\n    }\r\n    /**\r\n     * Divides two Vec3s.\r\n     *\r\n     * @param vec3 - The other Vec3 to divide by.\r\n     */\r\n    divideInPlace(vec3) {\r\n        this.x /= vec3.x;\r\n        this.y /= vec3.y;\r\n        this.z /= vec3.z;\r\n    }\r\n    /**\r\n     * Scales this Vec3 by scalar and returns the result as a new Vec3.\r\n     *\r\n     * @param scalar - The scalar value.\r\n     * @return - Returns a new Vec3.\r\n     */\r\n    scale(scalar) {\r\n        return new Vec3(this.x * scalar, this.y * scalar, this.z * scalar);\r\n    }\r\n    /**\r\n     * Scales this Vec3 by scalar.\r\n     *\r\n     * @param scalar - The scalar value.\r\n     */\r\n    scaleInPlace(scalar) {\r\n        this.x *= scalar;\r\n        this.y *= scalar;\r\n        this.z *= scalar;\r\n    }\r\n    /**\r\n     * Negates this Vec3 (x = -x, y = -y and z = -z), but returns the result as a new Vec3.\r\n     *\r\n     * @return - Returns a new Vec3.\r\n     */\r\n    negate() {\r\n        return new Vec3(-this.x, -this.y, -this.z);\r\n    }\r\n    /**\r\n     * Returns the inverse of this Vec3, but returns. the result as a new Vec3\r\n     *\r\n     * @return - Returns a new Vec3.\r\n     */\r\n    inverse() {\r\n        return new Vec3(1.0 / this.x, 1.0 / this.y, 1.0 / this.z);\r\n    }\r\n    /**\r\n     * Calculates the squared length of this Vec3.\r\n     *\r\n     * @return - Returns the length.\r\n     */\r\n    lengthSquared() {\r\n        const x = this.__data[0];\r\n        const y = this.__data[1];\r\n        const z = this.__data[2];\r\n        return x * x + y * y + z * z;\r\n    }\r\n    /**\r\n     * Calculates the length of this Vec3.\r\n     *\r\n     * @return - Returns the length.\r\n     */\r\n    length() {\r\n        return Math.sqrt(this.lengthSquared());\r\n    }\r\n    /**\r\n     * Calculates the distance to another Vec3.\r\n     *\r\n     * @param other - The other Vec3 to calculate the distance to.\r\n     * @return - Returns the distance between vectors.\r\n     */\r\n    distanceTo(other) {\r\n        const x = this.__data[0] - other.x;\r\n        const y = this.__data[1] - other.y;\r\n        const z = this.__data[2] - other.z;\r\n        return Math.sqrt(x * x + y * y + z * z);\r\n    }\r\n    /**\r\n     * Normalizes the Vec3 and returns it as a new Vec3.\r\n     * Multiplies coordinates value by the inverse of the vector length.\r\n     *\r\n     * @return - Returns the Vec3 normalized.\r\n     */\r\n    normalize() {\r\n        let len = this.__data[0] * this.__data[0] + this.__data[1] * this.__data[1] + this.__data[2] * this.__data[2];\r\n        if (len < Number.EPSILON) {\r\n            return new Vec3();\r\n        }\r\n        // TODO: evaluate use of glm_invsqrt here?\r\n        len = 1.0 / Math.sqrt(len);\r\n        return new Vec3(this.__data[0] * len, this.__data[1] * len, this.__data[2] * len);\r\n    }\r\n    /**\r\n     * Normalizes this Vec3 multiplying coordinate values by the inverse of the vector length.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    normalizeInPlace() {\r\n        let len = this.__data[0] * this.__data[0] + this.__data[1] * this.__data[1] + this.__data[2] * this.__data[2];\r\n        if (len < Number.EPSILON) {\r\n            return;\r\n        }\r\n        len = Math.sqrt(len);\r\n        const tmp = 1.0 / len;\r\n        this.__data[0] *= tmp;\r\n        this.__data[1] *= tmp;\r\n        this.__data[2] *= tmp;\r\n        return len;\r\n    }\r\n    /**\r\n     * Creates and returns a new Vec3 with the new coordinates(calculated with this Vec3 coordinates and the specified length).\r\n     *\r\n     * @param length - The length value.\r\n     * @return - The return value.\r\n     */\r\n    resize(length) {\r\n        const currLen = this.__data[0] * this.__data[0] + this.__data[1] * this.__data[1] + this.__data[2] * this.__data[2];\r\n        if (currLen < Number.EPSILON) {\r\n            return;\r\n        }\r\n        const scl = length / Math.sqrt(currLen);\r\n        return new Vec3(this.__data[0] * scl, this.__data[1] * scl, this.__data[2] * scl);\r\n    }\r\n    /**\r\n     * Modifies current coordinates using the specified length.\r\n     *\r\n     * @param length - The length value.\r\n     */\r\n    resizeInPlace(length) {\r\n        const currLen = this.__data[0] * this.__data[0] + this.__data[1] * this.__data[1] + this.__data[2] * this.__data[2];\r\n        if (currLen < Number.EPSILON) {\r\n            return;\r\n        }\r\n        const scl = length / Math.sqrt(currLen);\r\n        this.__data[0] *= scl;\r\n        this.__data[1] *= scl;\r\n        this.__data[2] *= scl;\r\n    }\r\n    /**\r\n     * Calculates the dot product of this Vec3 against another Vec3.\r\n     *\r\n     * @param other - The other Vec3 to compare with.\r\n     * @return - Returns the dot product.\r\n     */\r\n    dot(other) {\r\n        return this.x * other.x + this.y * other.y + this.z * other.z;\r\n    }\r\n    /**\r\n     * Calculates the cross product of two Vec3s and returns the result as a new Vec3.\r\n     *\r\n     * @param other - The other Vec3 to calculate with.\r\n     * @return - Returns the cross product as a new Vec3.\r\n     */\r\n    cross(other) {\r\n        const ax = this.x;\r\n        const ay = this.y;\r\n        const az = this.z;\r\n        const bx = other.x;\r\n        const by = other.y;\r\n        const bz = other.z;\r\n        return new Vec3(ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx);\r\n    }\r\n    /**\r\n     * Gets the angle between this Vec3 and b.\r\n     *\r\n     * @param other - The other Vec3 to compare with.\r\n     * @return - Returns the angle in radians.\r\n     */\r\n    angleTo(other) {\r\n        const cosine = this.dot(other);\r\n        if (cosine > 1.0) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return Math.acos(cosine);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a linear interpolation between this Vec3 and other.\r\n     *\r\n     * @param other - The other Vec3 to interpolate between.\r\n     * @param t - Interpolation amount between the two inputs.\r\n     * @return - Returns a new Vec3.\r\n     */\r\n    lerp(other, t) {\r\n        const ax = this.x;\r\n        const ay = this.y;\r\n        const az = this.z;\r\n        return new Vec3(ax + t * (other.x - ax), ay + t * (other.y - ay), az + t * (other.z - az));\r\n    }\r\n    /**\r\n     * Returns a new Vec3 whose component values are the abs of this Vec3s component values.\r\n     *\r\n     * @return - Returns a new Vec3.\r\n     */\r\n    abs() {\r\n        return new Vec3(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z));\r\n    }\r\n    /**\r\n     * Sets the vector a random vector on the surface of a sphere with the radius of the given scale value.\r\n     *\r\n     * @param scale - The radius of the surface sphere.\r\n     * @return - The random Vec3.\r\n     */\r\n    setRandomDir(scale = 1.0) {\r\n        const r = Math.random() * 2.0 * Math.PI;\r\n        const z = Math.random() * 2.0 - 1.0;\r\n        const zScale = Math.sqrt(1.0 - z * z) * scale;\r\n        this.__data[0] = Math.cos(r) * zScale;\r\n        this.__data[1] = Math.sin(r) * zScale;\r\n        this.__data[2] = z * scale;\r\n        return this;\r\n    }\r\n    /**\r\n     * Generates a random vector anywhere in the sphere defined by the provided scale value.\r\n     *\r\n     * @param scale - The radius of the bounding sphere.\r\n     * @return - The random Vec3.\r\n     */\r\n    setRandom(scale = 1.0) {\r\n        this.__data[0] = (Math.random() - 0.5) * scale;\r\n        this.__data[1] = (Math.random() - 0.5) * scale;\r\n        this.__data[2] = (Math.random() - 0.5) * scale;\r\n        return this;\r\n    }\r\n    /**\r\n     * Clones this Vec3 and returns a new Vec3.\r\n     *\r\n     * @return - Returns a new Vec3.\r\n     */\r\n    clone() {\r\n        return new Vec3(this.__data[0], this.__data[1], this.__data[2]);\r\n    }\r\n    /**\r\n     * Returns the type as an array. Often used to pass types to the GPU.\r\n     *\r\n     * @return - Returns as an array.\r\n     */\r\n    asArray() {\r\n        return this.__data; // TODO: return type + cast is a temp fix\r\n    }\r\n    // ///////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Converts this Vec3 to a string in JSON format.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    toString() {\r\n        // eslint-disable-next-line new-cap\r\n        return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());\r\n    }\r\n    /**\r\n     * Encodes Vec3 Class as a JSON object for persistence.\r\n     *\r\n     * @return - The json object.\r\n     */\r\n    toJSON() {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            z: this.z,\r\n        };\r\n    }\r\n    /**\r\n     * Decodes a JSON object to set the state of this class.\r\n     *\r\n     * @param j - The json object.\r\n     */\r\n    fromJSON(j) {\r\n        this.x = j.x;\r\n        this.y = j.y;\r\n        this.z = j.z;\r\n    }\r\n    /**\r\n     * Loads the state of the value from a binary reader.\r\n     *\r\n     * @param reader - The reader value.\r\n     */\r\n    readBinary(reader) {\r\n        this.x = reader.loadFloat32();\r\n        this.y = reader.loadFloat32();\r\n        this.z = reader.loadFloat32();\r\n    }\r\n    isValid() {\r\n        for (const v of this.__data) {\r\n            if (v == Infinity || isNaN(v))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexport { Vec3 };\r\n//# sourceMappingURL=Vec3.js.map","/* eslint-disable new-cap */\r\nimport { Vec3 } from './Vec3';\r\nimport { StringFunctions } from '../Utilities/StringFunctions';\r\n/**\r\n * Represents a four-dimensional coordinate.\r\n * Math types internally store values in {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array|Float32Array} and\r\n * expose getters and setters for the component values.\r\n *\r\n */\r\nclass Vec4 {\r\n    /**\r\n     * Creates a Vec4.\r\n     *\r\n     * The type of values of the `(x, y, z, t)` coordinates can be {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array|Float32Array},\r\n     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array|Uint32Array},\r\n     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array|Int32Array} and\r\n     * {@link https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/ArrayBuffer|ArrayBuffer}.\r\n     *\r\n     * You can also pass one JSON object parameter.\r\n     *\r\n     * @param x - The x value. Default is 0.\r\n     * @param y - The y value. Default is 0.\r\n     * @param z - The y value. Default is 0.\r\n     * @param t - The t value. Default is 0.\r\n     */\r\n    constructor(x = 0, y = 0, z = 0, t = 0) {\r\n        if (x instanceof Float32Array || x instanceof Uint32Array) {\r\n            this.__data = x;\r\n        }\r\n        else if (x instanceof ArrayBuffer) {\r\n            console.warn(`deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))`);\r\n            const buffer = x;\r\n            const byteOffset = y;\r\n            this.__data = new Float32Array(buffer, byteOffset, 4);\r\n        }\r\n        else if (typeof x == 'number' && typeof y == 'number' && typeof z == 'number' && typeof t == 'number') {\r\n            this.__data = new Float32Array(4);\r\n            this.__data[0] = x;\r\n            this.__data[1] = y;\r\n            this.__data[2] = z;\r\n            this.__data[3] = t;\r\n        }\r\n        else if (x != null && typeof x == 'object') {\r\n            this.__data = new Float32Array(4);\r\n            this.fromJSON(x);\r\n        }\r\n        else {\r\n            this.__data = new Float32Array(4);\r\n        }\r\n    }\r\n    /**\r\n     * Getter for `x` value.\r\n     *\r\n     * @return - Returns the x value.\r\n     */\r\n    get x() {\r\n        return this.__data[0];\r\n    }\r\n    /**\r\n     * Setter for `x` value.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set x(val) {\r\n        this.__data[0] = val;\r\n    }\r\n    /**\r\n     * Getter for `y` value.\r\n     *\r\n     * @return - Returns the y value.\r\n     */\r\n    get y() {\r\n        return this.__data[1];\r\n    }\r\n    /**\r\n     * Setter for `y` value.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set y(val) {\r\n        this.__data[1] = val;\r\n    }\r\n    /**\r\n     * Getter for `z` value.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    get z() {\r\n        return this.__data[2];\r\n    }\r\n    /**\r\n     * Setter for `z` value.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set z(val) {\r\n        this.__data[2] = val;\r\n    }\r\n    /**\r\n     * Getter for `t` value.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    get t() {\r\n        return this.__data[3];\r\n    }\r\n    /**\r\n     * Setter for `t` value.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set t(val) {\r\n        this.__data[3] = val;\r\n    }\r\n    /**\r\n     * Getter for `w` value.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    get w() {\r\n        return this.__data[3];\r\n    }\r\n    /**\r\n     * Setter for `w` value.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set w(val) {\r\n        this.__data[3] = val;\r\n    }\r\n    /**\r\n     * Getter for `xyz` swizzel.\r\n     *\r\n     * @return - Returns the z value.\r\n     */\r\n    get xyz() {\r\n        return new Vec3(this.__data[0], this.__data[1], this.__data[2]);\r\n    }\r\n    /**\r\n     * Setter from scalar components.\r\n     *\r\n     * @param x - The x value.\r\n     * @param y  - The y value.\r\n     * @param z  - The y value.\r\n     * @param t  - The t value.\r\n     */\r\n    set(x, y, z, t) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.t = t;\r\n    }\r\n    /**\r\n     * Sets the state of a Vec4 Object from another Vec4.\r\n     *\r\n     * @param other - The other Vec4 to set from.\r\n     */\r\n    setFromOther(other) {\r\n        this.x = other.x;\r\n        this.y = other.y;\r\n        this.z = other.z;\r\n        this.t = other.t;\r\n    }\r\n    /**\r\n     * Checks if this Vec4 contains the same values as the other Vec4.\r\n     *\r\n     * @param other - The other Vec4 to compare with.\r\n     * @return - Returns true or false.\r\n     */\r\n    isEqual(other) {\r\n        return this.x == other.x && this.y == other.y && this.z == other.z && this.t == other.t;\r\n    }\r\n    /**\r\n     * Checks if this Vec4 is different from another Vec4.\r\n     *\r\n     * @param other - The other Vec4 to compare with.\r\n     * @return - Returns true or false.\r\n     */\r\n    notEqual(other) {\r\n        return this.x != other.x && this.y != other.y && this.z != other.z && this.t != other.t;\r\n    }\r\n    /**\r\n     * Returns true if this Vec4 is approximately the same as other.\r\n     *\r\n     * @param other - The other Vec4 to compare with.\r\n     * @param precision - The precision to which the values must match.\r\n     * @return - The return value.\r\n     */\r\n    approxEqual(other, precision = Number.EPSILON) {\r\n        return (Math.abs(this.x - other.x) < precision &&\r\n            Math.abs(this.y - other.y) < precision &&\r\n            Math.abs(this.z - other.z) < precision &&\r\n            Math.abs(this.t - other.t) < precision);\r\n    }\r\n    /**\r\n     * Adds other to this Vec4 and returns the result as a new Vec4.\r\n     *\r\n     * @param other - The other Vec4 to add.\r\n     * @return - Returns a new Vec4.\r\n     */\r\n    add(other) {\r\n        return new Vec4(this.x + other.x, this.y + other.y, this.z + other.z, this.t + other.t);\r\n    }\r\n    /**\r\n     * Adds other to this Vec4 mutating the values of this instance\r\n     *\r\n     * @param other - The other Vec4 to add.\r\n     */\r\n    addInPlace(other) {\r\n        this.x += other.x;\r\n        this.y += other.y;\r\n        this.z += other.z;\r\n        this.t += other.t;\r\n    }\r\n    /**\r\n     * Subtracts other from this Vec4 and returns then result as a new Vec4.\r\n     *\r\n     * @param other - The other Vec4 to subtract.\r\n     * @return - Returns a new Vec4.\r\n     */\r\n    subtract(other) {\r\n        return new Vec4(this.x - other.x, this.y - other.y, this.z - other.z, this.t - other.t);\r\n    }\r\n    /**\r\n     * Subtracts other from this Vec4 mutating the values of this instance\r\n     *\r\n     * @param other - The other Vec4 to subtract.\r\n     */\r\n    subtractInPlace(other) {\r\n        this.x -= other.x;\r\n        this.y -= other.y;\r\n        this.z -= other.z;\r\n        this.t -= other.t;\r\n    }\r\n    /**\r\n     * Multiplies two Vec4s and returns the result as a new Vec4.\r\n     *\r\n     * @param other - The other Vec4 to multiply with.\r\n     * @return - Returns a new Vec4.\r\n     */\r\n    multiply(other) {\r\n        return new Vec4(this.x * other.x, this.y * other.y, this.z * other.z, this.t * other.t);\r\n    }\r\n    /**\r\n     * Multiplies two Vec4s mutating the values of this instance\r\n     *\r\n     * @param other - The other Vec4 to multiply with.\r\n     */\r\n    multiplyInPlace(other) {\r\n        this.x *= other.x;\r\n        this.y *= other.y;\r\n        this.z *= other.z;\r\n        this.t *= other.t;\r\n    }\r\n    /**\r\n     * Divides two Vec4s and returns the result as a new Vec4.\r\n     *\r\n     * @param other - The other Vec4 to divide by.\r\n     * @return - Returns a new Vec4.\r\n     */\r\n    divide(other) {\r\n        return new Vec4(this.x / other.x, this.y / other.y, this.z / other.z, this.t / other.t);\r\n    }\r\n    /**\r\n     * Divides two Vec4s.\r\n     *\r\n     * @param other - The other Vec4 to divide by.\r\n     */\r\n    divideInPlace(other) {\r\n        this.x /= other.x;\r\n        this.y /= other.y;\r\n        this.z /= other.z;\r\n        this.t /= other.t;\r\n    }\r\n    /**\r\n     * Scales this Vec4 by scalar and returns the result as a new Vec4.\r\n     *\r\n     * @param scalar - The scalar value.\r\n     * @return - The return value.\r\n     */\r\n    scale(scalar) {\r\n        return new Vec4(this.x * scalar, this.y * scalar, this.z * scalar, this.t * scalar);\r\n    }\r\n    /**\r\n     * Scales this Vec4 by scalar.\r\n     *\r\n     * @param scalar - The scalar value.\r\n     */\r\n    scaleInPlace(scalar) {\r\n        this.set(this.x * scalar, this.y * scalar, this.z * scalar, this.t * scalar);\r\n    }\r\n    /**\r\n     * Calculates the length of this Vec4.\r\n     *\r\n     * @return - Returns the length.\r\n     */\r\n    length() {\r\n        const x = this.__data[0];\r\n        const y = this.__data[1];\r\n        const z = this.__data[2];\r\n        const t = this.__data[2];\r\n        return Math.sqrt(x * x + y * y + z * z + t * t);\r\n    }\r\n    /**\r\n     * Calculates the squared length of this Vec4.\r\n     *\r\n     * @return - Returns the length.\r\n     */\r\n    lengthSquared() {\r\n        const x = this.__data[0];\r\n        const y = this.__data[1];\r\n        const z = this.__data[2];\r\n        const t = this.__data[3];\r\n        return x * x + y * y + z * z + t * t;\r\n    }\r\n    /**\r\n     * Normalizes the Vec4 and returns it as a new Vec4.\r\n     * Multiplies coordinates value by the inverse of the vector length.\r\n     *\r\n     * @return - Returns the Vec4 normalized.\r\n     */\r\n    normalize() {\r\n        const x = this.__data[0];\r\n        const y = this.__data[1];\r\n        const z = this.__data[2];\r\n        const t = this.__data[3];\r\n        let len = x * x + y * y + z * z + t * t;\r\n        if (len < Number.EPSILON) {\r\n            return new Vec4();\r\n        }\r\n        // TODO: evaluate use of glm_invsqrt here?\r\n        len = 1 / Math.sqrt(len);\r\n        return new Vec4(x * len, y * len, z * len);\r\n    }\r\n    /**\r\n     * Normalizes this Vec4 multiplying coordinate values by the inverse of the vector length.\r\n     */\r\n    normalizeInPlace() {\r\n        const x = this.__data[0];\r\n        const y = this.__data[1];\r\n        const z = this.__data[2];\r\n        const t = this.__data[3];\r\n        let len = x * x + y * y + z * z + t * t;\r\n        if (len < Number.EPSILON) {\r\n            return;\r\n        }\r\n        len = 1 / Math.sqrt(len);\r\n        this.set(x * len, y * len, z * len, t * len);\r\n    }\r\n    /**\r\n     * Calculates the dot product of this Vec4 against another Vec4.\r\n     *\r\n     * @param other - The other Vec4 to compare with.\r\n     * @return - Returns the dot product.\r\n     */\r\n    dot(other) {\r\n        return this.x * other.x + this.y * other.y + this.z * other.z + this.t * other.t; // TODO: other.t used to be b.t?\r\n    }\r\n    /**\r\n     * Calculates the cross product of two Vec4s and returns the result as a new Vec4.\r\n     *\r\n     * @param other - The other Vec4 to calculate with.\r\n     * @return - Returns the cross product as a new Vec4.\r\n     */\r\n    cross(other) {\r\n        const ax = this.x;\r\n        const ay = this.y;\r\n        const az = this.z;\r\n        const at = this.t;\r\n        const bx = other.x;\r\n        const by = other.y;\r\n        const bz = other.z;\r\n        const bt = other.t;\r\n        return new Vec4(ay * bz - az * by, az * bt - at * bz, at * bx - ax * bt, ax * by - ay * bx);\r\n    }\r\n    /**\r\n     * Gets the angle between this Vec4 and b.\r\n     *\r\n     * @param other - The other Vec4 to compare with.\r\n     * @return - Returns the angle in radians.\r\n     */\r\n    angleTo(other) {\r\n        const tempA = this.normalize();\r\n        const tempB = other.normalize();\r\n        const cosine = tempA.dot(tempB);\r\n        if (cosine > 1.0) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return Math.acos(cosine);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a linear interpolation between this Vec4 and other.\r\n     *\r\n     * @param other - The other Vec4 to interpolate between.\r\n     * @param t - Interpolation amount between the two inputs.\r\n     * @return - Returns a new Vec4.\r\n     */\r\n    lerp(other, t) {\r\n        const ax = this.x;\r\n        const ay = this.y;\r\n        const az = this.z;\r\n        const at = this.t;\r\n        return new Vec4(ax + t * (other.x - ax), ay + t * (other.y - ay), az + t * (other.z - az), at + t * (other.t - at));\r\n    }\r\n    /**\r\n     * Generates a random vector with the given scale.\r\n     *\r\n     * @param scale - Length of the resulting vector. If omitted, a unit vector will be returned.\r\n     * @return - The return value.\r\n     */\r\n    // random(scale = 1.0) {\r\n    //   const r = glMatrix.RANDOM() * 2.0 * Math.PI\r\n    //   const z = glMatrix.RANDOM() * 2.0 - 1.0\r\n    //   const zScale = Math.sqrt(1.0 - z * z) * scale\r\n    //   out[0] = Math.cos(r) * zScale\r\n    //   out[1] = Math.sin(r) * zScale\r\n    //   out[2] = z * scale\r\n    //   return out\r\n    // }\r\n    /**\r\n     * Clones this Vec4 and returns a new Vec4.\r\n     *\r\n     * @return - Returns a new Vec4.\r\n     */\r\n    clone() {\r\n        return new Vec4(this.__data[0], this.__data[1], this.__data[2], this.__data[3]);\r\n    }\r\n    /**\r\n     * Converts this Vec4 into a Vec3.\r\n     *\r\n     * @return - Returns the value as a new Vec3.\r\n     */\r\n    toVec3() {\r\n        return new Vec3(this.__data[0], this.__data[1], this.__data[2]);\r\n    }\r\n    /**\r\n     * Returns the type as an array. Often used to pass types to the GPU.\r\n     *\r\n     * @return - Returns as an array.\r\n     */\r\n    asArray() {\r\n        return this.__data;\r\n    }\r\n    // ///////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Converts this Vec3 to a string in JSON format.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    toString() {\r\n        // eslint-disable-next-line new-cap\r\n        return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());\r\n    }\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     * @return - The json object.\r\n     */\r\n    toJSON() {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            z: this.z,\r\n            t: this.t,\r\n        };\r\n    }\r\n    /**\r\n     * Decodes a JSON object to set the state of this class.\r\n     *\r\n     * @param j - The json object.\r\n     */\r\n    fromJSON(j) {\r\n        this.x = j.x;\r\n        this.y = j.y;\r\n        this.z = j.z;\r\n        this.t = j.t;\r\n    }\r\n    /**\r\n     * Loads the state of the value from a binary reader.\r\n     *\r\n     * @param reader - The reader value.\r\n     */\r\n    readBinary(reader) {\r\n        this.x = reader.loadFloat32();\r\n        this.y = reader.loadFloat32();\r\n        this.z = reader.loadFloat32();\r\n        this.t = reader.loadFloat32();\r\n    }\r\n    /**\r\n     * Verifies if the values stored in this Math type are valid numeric values.\r\n     * Returns `false` If at least one of the values is either {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Referencia/Objetos_globales/Infinity|Infinity} or\r\n     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Referencia/Objetos_globales/NaN|NaN}.\r\n     *\r\n     * @return - Returns the result as a boolean.\r\n     */\r\n    isValid() {\r\n        for (const v of this.__data) {\r\n            if (v == Infinity || isNaN(v))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexport { Vec4 };\r\n//# sourceMappingURL=Vec4.js.map","/* eslint-disable require-jsdoc */\r\n/**\r\n * Class representing the red, green, blue and alpha channel of a color as 8bit values.\r\n *\r\n */\r\nclass RGBA {\r\n    /**\r\n     * Create a RGBA.\r\n     * @param r - The red channel of a color.\r\n     * @param g - The green channel of a color.\r\n     * @param b - The blue channel of a color.\r\n     * @param a - The alpha (transparency) channel of a color.\r\n     */\r\n    constructor(r = 0, g = 0, b = 0, a = 255) {\r\n        if (r instanceof Uint8Array) {\r\n            this.__data = r;\r\n        }\r\n        else if (r instanceof ArrayBuffer) {\r\n            const buffer = r;\r\n            const byteOffset = g;\r\n            this.__data = new Uint8Array(buffer, byteOffset, 4);\r\n        }\r\n        else {\r\n            this.__data = new Uint8Array(4);\r\n            if (typeof r == 'string') {\r\n                if (r.startsWith('#')) {\r\n                    this.setFromHex(r);\r\n                }\r\n                else {\r\n                    this.setFromCSSColorName(r);\r\n                }\r\n            }\r\n            else {\r\n                this.__data[0] = r;\r\n                this.__data[1] = g;\r\n                this.__data[2] = b;\r\n                this.__data[3] = a;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Getter for red channel.\r\n     *\r\n     * @return - Returns the red channel.\r\n     */\r\n    get r() {\r\n        return this.__data[0];\r\n    }\r\n    /**\r\n     * Setter for red channel.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set r(val) {\r\n        this.__data[0] = val;\r\n    }\r\n    /**\r\n     * Getter for green channel.\r\n     *\r\n     * @return - Returns the green channel.\r\n     */\r\n    get g() {\r\n        return this.__data[1];\r\n    }\r\n    /**\r\n     * Setter for green channel.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set g(val) {\r\n        this.__data[1] = val;\r\n    }\r\n    /**\r\n     * Getter for blue channel.\r\n     *\r\n     * @return - Returns the blue channel.\r\n     */\r\n    get b() {\r\n        return this.__data[2];\r\n    }\r\n    /**\r\n     * Setter for blue channel.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set b(val) {\r\n        this.__data[2] = val;\r\n    }\r\n    /**\r\n     * Getter for alpha channel.\r\n     *\r\n     * @return - Returns the alpha channel.\r\n     */\r\n    get a() {\r\n        return this.__data[3];\r\n    }\r\n    /**\r\n     * Setter for alpha value.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set a(val) {\r\n        this.__data[3] = val;\r\n    }\r\n    /**\r\n     * Setter from scalar components.\r\n     *\r\n     * @param r - The red channel.\r\n     * @param g  - The green channel.\r\n     * @param b  - The blue channel.\r\n     * @param a  - The alpha channel.\r\n     */\r\n    set(r, g, b, a = 255) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        this.a = a;\r\n    }\r\n    /**\r\n     * Setter from another RGBA color.\r\n     *\r\n     * @param other - The other RGBA to set from.\r\n     */\r\n    setFromOther(other) {\r\n        this.r = other.r;\r\n        this.g = other.g;\r\n        this.b = other.b;\r\n        this.a = other.a;\r\n    }\r\n    /**\r\n     * Setter from a scalar array.\r\n     *\r\n     * @param values - The array of values.\r\n     */\r\n    setFromArray(values) {\r\n        this.r = values[0];\r\n        this.g = values[1];\r\n        this.b = values[2];\r\n        this.a = values.length == 4 ? values[3] : 1.0;\r\n    }\r\n    /**\r\n     * Setter from a hexadecimal value.\r\n     * E.g. #ff0000\r\n     *\r\n     * @param hex - The hex value.\r\n     */\r\n    setFromHex(hex) {\r\n        function hexToRgb(hex) {\r\n            const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n            return result\r\n                ? {\r\n                    r: parseInt(result[1], 16),\r\n                    g: parseInt(result[2], 16),\r\n                    b: parseInt(result[3], 16),\r\n                }\r\n                : null;\r\n        }\r\n        const rgb = hexToRgb(hex);\r\n        if (!rgb) {\r\n            console.warn('Invalid hex code:' + hex);\r\n            return;\r\n        }\r\n        this.set(rgb.r, rgb.g, rgb.b);\r\n    }\r\n    /**\r\n     * Setter from a CSS color name.\r\n     * E.g. \"red\"\r\n     *\r\n     * @param name - The CSS color name.\r\n     */\r\n    setFromCSSColorName(name) {\r\n        const colourNameToHex = (colour) => {\r\n            const colors = {\r\n                aliceblue: '#f0f8ff',\r\n                antiquewhite: '#faebd7',\r\n                aqua: '#00ffff',\r\n                aquamarine: '#7fffd4',\r\n                azure: '#f0ffff',\r\n                beige: '#f5f5dc',\r\n                bisque: '#ffe4c4',\r\n                black: '#000000',\r\n                blanchedalmond: '#ffebcd',\r\n                blue: '#0000ff',\r\n                blueviolet: '#8a2be2',\r\n                brown: '#a52a2a',\r\n                burlywood: '#deb887',\r\n                cadetblue: '#5f9ea0',\r\n                chartreuse: '#7fff00',\r\n                chocolate: '#d2691e',\r\n                coral: '#ff7f50',\r\n                cornflowerblue: '#6495ed',\r\n                cornsilk: '#fff8dc',\r\n                crimson: '#dc143c',\r\n                cyan: '#00ffff',\r\n                darkblue: '#00008b',\r\n                darkcyan: '#008b8b',\r\n                darkgoldenrod: '#b8860b',\r\n                darkgray: '#a9a9a9',\r\n                darkgreen: '#006400',\r\n                darkkhaki: '#bdb76b',\r\n                darkmagenta: '#8b008b',\r\n                darkolivegreen: '#556b2f',\r\n                darkorange: '#ff8c00',\r\n                darkorchid: '#9932cc',\r\n                darkred: '#8b0000',\r\n                darksalmon: '#e9967a',\r\n                darkseagreen: '#8fbc8f',\r\n                darkslateblue: '#483d8b',\r\n                darkslategray: '#2f4f4f',\r\n                darkturquoise: '#00ced1',\r\n                darkviolet: '#9400d3',\r\n                deeppink: '#ff1493',\r\n                deepskyblue: '#00bfff',\r\n                dimgray: '#696969',\r\n                dodgerblue: '#1e90ff',\r\n                firebrick: '#b22222',\r\n                floralwhite: '#fffaf0',\r\n                forestgreen: '#228b22',\r\n                fuchsia: '#ff00ff',\r\n                gainsboro: '#dcdcdc',\r\n                ghostwhite: '#f8f8ff',\r\n                gold: '#ffd700',\r\n                goldenrod: '#daa520',\r\n                gray: '#808080',\r\n                green: '#008000',\r\n                greenyellow: '#adff2f',\r\n                honeydew: '#f0fff0',\r\n                hotpink: '#ff69b4',\r\n                'indianred ': '#cd5c5c',\r\n                indigo: '#4b0082',\r\n                ivory: '#fffff0',\r\n                khaki: '#f0e68c',\r\n                lavender: '#e6e6fa',\r\n                lavenderblush: '#fff0f5',\r\n                lawngreen: '#7cfc00',\r\n                lemonchiffon: '#fffacd',\r\n                lightblue: '#add8e6',\r\n                lightcoral: '#f08080',\r\n                lightcyan: '#e0ffff',\r\n                lightgoldenrodyellow: '#fafad2',\r\n                lightgrey: '#d3d3d3',\r\n                lightgreen: '#90ee90',\r\n                lightpink: '#ffb6c1',\r\n                lightsalmon: '#ffa07a',\r\n                lightseagreen: '#20b2aa',\r\n                lightskyblue: '#87cefa',\r\n                lightslategray: '#778899',\r\n                lightsteelblue: '#b0c4de',\r\n                lightyellow: '#ffffe0',\r\n                lime: '#00ff00',\r\n                limegreen: '#32cd32',\r\n                linen: '#faf0e6',\r\n                magenta: '#ff00ff',\r\n                maroon: '#800000',\r\n                mediumaquamarine: '#66cdaa',\r\n                mediumblue: '#0000cd',\r\n                mediumorchid: '#ba55d3',\r\n                mediumpurple: '#9370d8',\r\n                mediumseagreen: '#3cb371',\r\n                mediumslateblue: '#7b68ee',\r\n                mediumspringgreen: '#00fa9a',\r\n                mediumturquoise: '#48d1cc',\r\n                mediumvioletred: '#c71585',\r\n                midnightblue: '#191970',\r\n                mintcream: '#f5fffa',\r\n                mistyrose: '#ffe4e1',\r\n                moccasin: '#ffe4b5',\r\n                navajowhite: '#ffdead',\r\n                navy: '#000080',\r\n                oldlace: '#fdf5e6',\r\n                olive: '#808000',\r\n                olivedrab: '#6b8e23',\r\n                orange: '#ffa500',\r\n                orangered: '#ff4500',\r\n                orchid: '#da70d6',\r\n                palegoldenrod: '#eee8aa',\r\n                palegreen: '#98fb98',\r\n                paleturquoise: '#afeeee',\r\n                palevioletred: '#d87093',\r\n                papayawhip: '#ffefd5',\r\n                peachpuff: '#ffdab9',\r\n                peru: '#cd853f',\r\n                pink: '#ffc0cb',\r\n                plum: '#dda0dd',\r\n                powderblue: '#b0e0e6',\r\n                purple: '#800080',\r\n                rebeccapurple: '#663399',\r\n                red: '#ff0000',\r\n                rosybrown: '#bc8f8f',\r\n                royalblue: '#4169e1',\r\n                saddlebrown: '#8b4513',\r\n                salmon: '#fa8072',\r\n                sandybrown: '#f4a460',\r\n                seagreen: '#2e8b57',\r\n                seashell: '#fff5ee',\r\n                sienna: '#a0522d',\r\n                silver: '#c0c0c0',\r\n                skyblue: '#87ceeb',\r\n                slateblue: '#6a5acd',\r\n                slategray: '#708090',\r\n                snow: '#fffafa',\r\n                springgreen: '#00ff7f',\r\n                steelblue: '#4682b4',\r\n                tan: '#d2b48c',\r\n                teal: '#008080',\r\n                thistle: '#d8bfd8',\r\n                tomato: '#ff6347',\r\n                turquoise: '#40e0d0',\r\n                violet: '#ee82ee',\r\n                wheat: '#f5deb3',\r\n                white: '#ffffff',\r\n                whitesmoke: '#f5f5f5',\r\n                yellow: '#ffff00',\r\n                yellowgreen: '#9acd32',\r\n            };\r\n            return colors[colour.toLowerCase()];\r\n        };\r\n        if (name.startsWith('#')) {\r\n            this.setFromHex(name);\r\n        }\r\n        else {\r\n            const hexColor = colourNameToHex(name);\r\n            if (hexColor)\r\n                this.setFromHex(hexColor);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the hexadecimal value of this RGBA color.\r\n     *\r\n     * @return - Returns the hex value.\r\n     */\r\n    toHex() {\r\n        function componentToHex(int) {\r\n            const hex = int.toString(16);\r\n            return hex.length == 1 ? '0' + hex : hex;\r\n        }\r\n        return '#' + componentToHex(this.r) + componentToHex(this.g) + componentToHex(this.b);\r\n    }\r\n    /**\r\n     * Returns true if this RGBA color is exactly the same as other.\r\n     *\r\n     * @param other - The other RGBA to compare with.\r\n     * @return - Returns true or false.\r\n     */\r\n    equal(other) {\r\n        return this.r == other.r && this.g == other.g && this.b == other.b && this.a == other.a;\r\n    }\r\n    /**\r\n     * Returns true if this RGBA color is NOT exactly the same as other.\r\n     *\r\n     * @param other -  The other RGBA to compare with.\r\n     * @return - Returns true or false.\r\n     */\r\n    notEquals(other) {\r\n        return this.r != other.r && this.g != other.g && this.b != other.b && this.a != other.a;\r\n    }\r\n    /**\r\n     * Returns true if this RGBA color is approximately the same as other.\r\n     *\r\n     * @param other - The other RGBA to compare with.\r\n     * @param precision - The precision to which the values must match.\r\n     * @return - Returns true or false.\r\n     */\r\n    approxEqual(other, precision = Number.EPSILON) {\r\n        return (Math.abs(this.r - other.r) < precision &&\r\n            Math.abs(this.g - other.g) < precision &&\r\n            Math.abs(this.b - other.b) < precision &&\r\n            Math.abs(this.a - other.a) < precision);\r\n    }\r\n    /**\r\n     * Returns a new RGBA color which is this RGBA color added to other.\r\n     *\r\n     * @param other - The other RGBA to add.\r\n     * @return - Returns a new RGBA.\r\n     */\r\n    add(other) {\r\n        return new RGBA(this.r + other.r, this.g + other.g, this.b + other.b, this.a + other.a);\r\n    }\r\n    /**\r\n     * Returns a new RGBA color which is this RGBA color subtracted from other.\r\n     *\r\n     * @param other - The other RGBA to subtract.\r\n     * @return - Returns a new RGBA.\r\n     */\r\n    subtract(other) {\r\n        return new RGBA(this.r - other.r, this.g - other.g, this.b - other.b, this.a - other.a);\r\n    }\r\n    /**\r\n     * Returns a new RGBA color which is this vector scaled by scalar.\r\n     *\r\n     * @param scalar - The scalar value.\r\n     * @return - Returns a new RGBA.\r\n     */\r\n    scale(scalar) {\r\n        return new RGBA(this.r * scalar, this.g * scalar, this.b * scalar, this.a * scalar);\r\n    }\r\n    /**\r\n     * Scales this RGBA color by scalar.\r\n     *\r\n     * @param scalar - The scalar value.\r\n     */\r\n    scaleInPlace(scalar) {\r\n        this.r *= scalar;\r\n        this.g *= scalar;\r\n        this.b *= scalar;\r\n        this.a *= scalar;\r\n    }\r\n    /**\r\n     * Apply gamma correction to this RGBA color.\r\n     *\r\n     * @param gamma - The gamma value.\r\n     */\r\n    applyGamma(gamma) {\r\n        this.set(Math.pow(this.r, gamma), Math.pow(this.g, gamma), Math.pow(this.b, gamma), this.a);\r\n    }\r\n    /**\r\n     * Converts to linear color space and returns a new color.\r\n     * @param gamma - The gamma value.\r\n     * @return - Returns a new RGBA.\r\n     */\r\n    toLinear(gamma = 2.2) {\r\n        return new RGBA(Math.pow(this.r, gamma), Math.pow(this.g, gamma), Math.pow(this.b, gamma), this.a);\r\n    }\r\n    /**\r\n     * Converts to gamma color space and returns a new RGBA color.\r\n     *\r\n     * @param gamma - The gamma value.\r\n     * @return - Returns a new RGBA.\r\n     */\r\n    toGamma(gamma = 2.2) {\r\n        return new RGBA(Math.pow(this.r, 1.0 / gamma), Math.pow(this.g, 1.0 / gamma), Math.pow(this.b, 1.0 / gamma), this.a);\r\n    }\r\n    /**\r\n     * Calculates and returns the relative luminance of the linear RGB component.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    luminance() {\r\n        return 0.2126 * this.r + 0.7152 * this.g + 0.0722 * this.b;\r\n    }\r\n    /**\r\n     * Performs a linear interpolation between this RGBA color and other.\r\n     *\r\n     * @param other - The other RGBA to interpolate between.\r\n     * @param t - Interpolation amount between the two inputs.\r\n     * @return - Returns a new RGBA.\r\n     */\r\n    lerp(other, t) {\r\n        const ar = this.r;\r\n        const ag = this.g;\r\n        const ab = this.b;\r\n        const aa = this.a;\r\n        return new RGBA(ar + t * (other.r - ar), ag + t * (other.g - ag), ab + t * (other.b - ab), aa + t * (other.a - aa));\r\n    }\r\n    /**\r\n     * Creates a random RGBA.\r\n     *\r\n     * @param gammaOffset - The gamma offset.\r\n     * @param randomAlpha - Determines whether the alpha channel is random.\r\n     * @return - Returns a new random RGBA.\r\n     */\r\n    static random(gammaOffset = 0.0, randomAlpha = false) {\r\n        if (gammaOffset > 0.0) {\r\n            return new RGBA(gammaOffset + Math.random() * (1.0 - gammaOffset), gammaOffset + Math.random() * (1.0 - gammaOffset), gammaOffset + Math.random() * (1.0 - gammaOffset), randomAlpha ? gammaOffset + Math.random() * (1.0 - gammaOffset) : 1.0);\r\n        }\r\n        else if (gammaOffset < 0.0) {\r\n            return new RGBA(Math.random() * (1.0 + gammaOffset), Math.random() * (1.0 + gammaOffset), Math.random() * (1.0 + gammaOffset), randomAlpha ? Math.random() * (1.0 + gammaOffset) : 1.0);\r\n        }\r\n        else {\r\n            return new RGBA(Math.random(), Math.random(), Math.random(), randomAlpha ? Math.random() : 1.0);\r\n        }\r\n    }\r\n    /**\r\n     * Clones this RGBA color and returns a new RGBA color.\r\n     *\r\n     * @return - Returns a new RGBA.\r\n     */\r\n    clone() {\r\n        return new RGBA(this.__data[0], this.__data[1], this.__data[2], this.__data[3]);\r\n    }\r\n    /**\r\n     * Returns the type as an array. Often used to pass types to the GPU.\r\n     *\r\n     * @return - Returns as an array.\r\n     */\r\n    asArray() {\r\n        return this.__data;\r\n    }\r\n    /**\r\n     * Returns the type as a 3 component array. Often used to pass types to the GPU.\r\n     *\r\n     * @return - Returns as a 3 component array.\r\n     */\r\n    as3ComponentArray() {\r\n        return [this.__data[0], this.__data[1], this.__data[2]];\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @return - The json object.\r\n     */\r\n    toJSON() {\r\n        return {\r\n            r: this.r,\r\n            g: this.g,\r\n            b: this.b,\r\n            a: this.a,\r\n        };\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param j - The json object.\r\n     */\r\n    fromJSON(j) {\r\n        this.r = j.r;\r\n        this.g = j.g;\r\n        this.b = j.b;\r\n        this.a = j.a;\r\n    }\r\n    /**\r\n     * Returns the CSS rgba string.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    toCSSString() {\r\n        return ('rgba(' +\r\n            Math.round(this.r * 255) +\r\n            ', ' +\r\n            Math.round(this.g * 255) +\r\n            ', ' +\r\n            Math.round(this.b * 255) +\r\n            ', ' +\r\n            this.a +\r\n            ')');\r\n    }\r\n}\r\nexport { RGBA };\r\n//# sourceMappingURL=RGBA.js.map","/**\r\n * Class representing a color as 4 floating point values.\r\n */\r\nclass Color {\r\n    /**\r\n     * Creates a `Color` object with an RGBA structure.\r\n     *\r\n     * @param r - The red channel of a color.\r\n     * @param g - The green channel of a color.\r\n     * @param b - The blue channel of a color.\r\n     * @param a - The alpha (transparency) channel of a color.\r\n     */\r\n    constructor(r = 0, g = 0, b = 0, a = 1.0) {\r\n        if (r instanceof Float32Array) {\r\n            this.__data = r;\r\n        }\r\n        else if (r instanceof ArrayBuffer) {\r\n            console.warn(`deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))`);\r\n            const buffer = r;\r\n            const byteOffset = g;\r\n            this.__data = new Float32Array(buffer, byteOffset, 4);\r\n        }\r\n        else {\r\n            this.__data = new Float32Array(4);\r\n            if (typeof r == 'string') {\r\n                if (r.startsWith('#')) {\r\n                    this.setFromHex(r);\r\n                }\r\n                else {\r\n                    this.setFromCSSColorName(r);\r\n                }\r\n            }\r\n            else {\r\n                this.__data[0] = r;\r\n                this.__data[1] = g;\r\n                this.__data[2] = b;\r\n                this.__data[3] = a;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Getter for red channel.\r\n     *\r\n     * @return - Returns the red channel.\r\n     */\r\n    get r() {\r\n        return this.__data[0];\r\n    }\r\n    /**\r\n     * Setter for red channel.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set r(val) {\r\n        this.__data[0] = val;\r\n    }\r\n    /**\r\n     * Getter for green channel.\r\n     *\r\n     * @return - Returns the green channel.\r\n     */\r\n    get g() {\r\n        return this.__data[1];\r\n    }\r\n    /**\r\n     * Setter for green channel.\r\n     * @param val - The val param.\r\n     */\r\n    set g(val) {\r\n        this.__data[1] = val;\r\n    }\r\n    /**\r\n     * Getter for blue channel.\r\n     *\r\n     * @return - Returns the blue channel.\r\n     */\r\n    get b() {\r\n        return this.__data[2];\r\n    }\r\n    /**\r\n     * Setter for blue channel.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set b(val) {\r\n        this.__data[2] = val;\r\n    }\r\n    /**\r\n     * Getter for alpha channel.\r\n     *\r\n     * @return - Returns the alpha channel.\r\n     */\r\n    get a() {\r\n        return this.__data[3];\r\n    }\r\n    /**\r\n     * Setter for alpha value.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set a(val) {\r\n        this.__data[3] = val;\r\n    }\r\n    /**\r\n     * Setter from scalar components.\r\n     *\r\n     * @param r - The red channel.\r\n     * @param g  - The green channel.\r\n     * @param b  - The blue channel.\r\n     * @param a  - The alpha channel.\r\n     */\r\n    set(r, g, b, a = 1.0) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        this.a = a;\r\n    }\r\n    /**\r\n     * Sets current color state with another `Color` object.\r\n     *\r\n     * @param other - The other color to set from.\r\n     */\r\n    setFromOther(other) {\r\n        this.r = other.r;\r\n        this.g = other.g;\r\n        this.b = other.b;\r\n        this.a = other.a;\r\n    }\r\n    /**\r\n     * Setter from a scalar array.\r\n     *\r\n     * @param vals - The vals param.\r\n     */\r\n    setFromScalarArray(vals) {\r\n        this.r = vals[0];\r\n        this.g = vals[1];\r\n        this.b = vals[2];\r\n        this.a = vals.length == 4 ? vals[3] : 1.0;\r\n    }\r\n    /**\r\n     * Getter from an RGB array.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getAsRGBArray() {\r\n        return [this.r * 255, this.g * 255, this.b * 255];\r\n    }\r\n    /**\r\n     * Getter from an RGB dict.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getAsRGBDict() {\r\n        return {\r\n            r: this.r * 255,\r\n            g: this.g * 255,\r\n            b: this.b * 255,\r\n        };\r\n    }\r\n    /**\r\n     * Setter from a RGB value.\r\n     *\r\n     * @param r - The red channel.\r\n     * @param g  - The green channel.\r\n     * @param b  - The blue channel.\r\n     * @param a  - The alpha channel.\r\n     */\r\n    setFromRGB(r, g, b, a) {\r\n        this.r = r / 255;\r\n        this.g = g / 255;\r\n        this.b = b / 255;\r\n        this.a = a ? a / 255 : 1.0;\r\n    }\r\n    /**\r\n     * Setter from an RGB array.\r\n     *\r\n     * @param vals - The vals param.\r\n     */\r\n    setFromRGBArray(vals) {\r\n        this.r = vals[0] / 255;\r\n        this.g = vals[1] / 255;\r\n        this.b = vals[2] / 255;\r\n        this.a = vals.length == 4 ? vals[3] / 255 : 1.0;\r\n    }\r\n    /**\r\n     * Setter from an RGB dict.\r\n     *\r\n     * @param vals - The vals param.\r\n     */\r\n    setFromRGBDict(vals) {\r\n        this.r = vals.r / 255;\r\n        this.g = vals.g / 255;\r\n        this.b = vals.b / 255;\r\n        this.a = vals.a == 4 ? vals.a / 255 : 1.0;\r\n    }\r\n    /**\r\n     * Setter from a hexadecimal value.\r\n     * E.g. #ff0000\r\n     * @param hex - The hex value.\r\n     */\r\n    setFromHex(hex) {\r\n        function hexToRgb(hex) {\r\n            const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n            return result\r\n                ? {\r\n                    r: parseInt(result[1], 16),\r\n                    g: parseInt(result[2], 16),\r\n                    b: parseInt(result[3], 16),\r\n                }\r\n                : null;\r\n        }\r\n        const rgb = hexToRgb(hex);\r\n        if (!rgb) {\r\n            console.warn('Invalid hex code:' + hex);\r\n            return;\r\n        }\r\n        this.setFromRGB(rgb.r, rgb.g, rgb.b);\r\n    }\r\n    /**\r\n     * Sets the Color values from a CSS color name.\r\n     * E.g. \"red\"\r\n     * @param name - The CSS color name.\r\n     */\r\n    setFromCSSColorName(name) {\r\n        const colourNameToHex = (colour) => {\r\n            const colors = {\r\n                aliceblue: '#f0f8ff',\r\n                antiquewhite: '#faebd7',\r\n                aqua: '#00ffff',\r\n                aquamarine: '#7fffd4',\r\n                azure: '#f0ffff',\r\n                beige: '#f5f5dc',\r\n                bisque: '#ffe4c4',\r\n                black: '#000000',\r\n                blanchedalmond: '#ffebcd',\r\n                blue: '#0000ff',\r\n                blueviolet: '#8a2be2',\r\n                brown: '#a52a2a',\r\n                burlywood: '#deb887',\r\n                cadetblue: '#5f9ea0',\r\n                chartreuse: '#7fff00',\r\n                chocolate: '#d2691e',\r\n                coral: '#ff7f50',\r\n                cornflowerblue: '#6495ed',\r\n                cornsilk: '#fff8dc',\r\n                crimson: '#dc143c',\r\n                cyan: '#00ffff',\r\n                darkblue: '#00008b',\r\n                darkcyan: '#008b8b',\r\n                darkgoldenrod: '#b8860b',\r\n                darkgray: '#a9a9a9',\r\n                darkgreen: '#006400',\r\n                darkkhaki: '#bdb76b',\r\n                darkmagenta: '#8b008b',\r\n                darkolivegreen: '#556b2f',\r\n                darkorange: '#ff8c00',\r\n                darkorchid: '#9932cc',\r\n                darkred: '#8b0000',\r\n                darksalmon: '#e9967a',\r\n                darkseagreen: '#8fbc8f',\r\n                darkslateblue: '#483d8b',\r\n                darkslategray: '#2f4f4f',\r\n                darkturquoise: '#00ced1',\r\n                darkviolet: '#9400d3',\r\n                deeppink: '#ff1493',\r\n                deepskyblue: '#00bfff',\r\n                dimgray: '#696969',\r\n                dodgerblue: '#1e90ff',\r\n                firebrick: '#b22222',\r\n                floralwhite: '#fffaf0',\r\n                forestgreen: '#228b22',\r\n                fuchsia: '#ff00ff',\r\n                gainsboro: '#dcdcdc',\r\n                ghostwhite: '#f8f8ff',\r\n                gold: '#ffd700',\r\n                goldenrod: '#daa520',\r\n                gray: '#808080',\r\n                green: '#008000',\r\n                greenyellow: '#adff2f',\r\n                honeydew: '#f0fff0',\r\n                hotpink: '#ff69b4',\r\n                'indianred ': '#cd5c5c',\r\n                indigo: '#4b0082',\r\n                ivory: '#fffff0',\r\n                khaki: '#f0e68c',\r\n                lavender: '#e6e6fa',\r\n                lavenderblush: '#fff0f5',\r\n                lawngreen: '#7cfc00',\r\n                lemonchiffon: '#fffacd',\r\n                lightblue: '#add8e6',\r\n                lightcoral: '#f08080',\r\n                lightcyan: '#e0ffff',\r\n                lightgoldenrodyellow: '#fafad2',\r\n                lightgrey: '#d3d3d3',\r\n                lightgreen: '#90ee90',\r\n                lightpink: '#ffb6c1',\r\n                lightsalmon: '#ffa07a',\r\n                lightseagreen: '#20b2aa',\r\n                lightskyblue: '#87cefa',\r\n                lightslategray: '#778899',\r\n                lightsteelblue: '#b0c4de',\r\n                lightyellow: '#ffffe0',\r\n                lime: '#00ff00',\r\n                limegreen: '#32cd32',\r\n                linen: '#faf0e6',\r\n                magenta: '#ff00ff',\r\n                maroon: '#800000',\r\n                mediumaquamarine: '#66cdaa',\r\n                mediumblue: '#0000cd',\r\n                mediumorchid: '#ba55d3',\r\n                mediumpurple: '#9370d8',\r\n                mediumseagreen: '#3cb371',\r\n                mediumslateblue: '#7b68ee',\r\n                mediumspringgreen: '#00fa9a',\r\n                mediumturquoise: '#48d1cc',\r\n                mediumvioletred: '#c71585',\r\n                midnightblue: '#191970',\r\n                mintcream: '#f5fffa',\r\n                mistyrose: '#ffe4e1',\r\n                moccasin: '#ffe4b5',\r\n                navajowhite: '#ffdead',\r\n                navy: '#000080',\r\n                oldlace: '#fdf5e6',\r\n                olive: '#808000',\r\n                olivedrab: '#6b8e23',\r\n                orange: '#ffa500',\r\n                orangered: '#ff4500',\r\n                orchid: '#da70d6',\r\n                palegoldenrod: '#eee8aa',\r\n                palegreen: '#98fb98',\r\n                paleturquoise: '#afeeee',\r\n                palevioletred: '#d87093',\r\n                papayawhip: '#ffefd5',\r\n                peachpuff: '#ffdab9',\r\n                peru: '#cd853f',\r\n                pink: '#ffc0cb',\r\n                plum: '#dda0dd',\r\n                powderblue: '#b0e0e6',\r\n                purple: '#800080',\r\n                rebeccapurple: '#663399',\r\n                red: '#ff0000',\r\n                rosybrown: '#bc8f8f',\r\n                royalblue: '#4169e1',\r\n                saddlebrown: '#8b4513',\r\n                salmon: '#fa8072',\r\n                sandybrown: '#f4a460',\r\n                seagreen: '#2e8b57',\r\n                seashell: '#fff5ee',\r\n                sienna: '#a0522d',\r\n                silver: '#c0c0c0',\r\n                skyblue: '#87ceeb',\r\n                slateblue: '#6a5acd',\r\n                slategray: '#708090',\r\n                snow: '#fffafa',\r\n                springgreen: '#00ff7f',\r\n                steelblue: '#4682b4',\r\n                tan: '#d2b48c',\r\n                teal: '#008080',\r\n                thistle: '#d8bfd8',\r\n                tomato: '#ff6347',\r\n                turquoise: '#40e0d0',\r\n                violet: '#ee82ee',\r\n                wheat: '#f5deb3',\r\n                white: '#ffffff',\r\n                whitesmoke: '#f5f5f5',\r\n                yellow: '#ffff00',\r\n                yellowgreen: '#9acd32',\r\n            };\r\n            return colors[colour.toLowerCase()];\r\n            //  if (typeof colors[colour.toLowerCase()] != 'undefined') return colors[colour.toLowerCase()]\r\n            // return false\r\n        };\r\n        if (name.startsWith('#')) {\r\n            this.setFromHex(name);\r\n        }\r\n        else {\r\n            const hexColor = colourNameToHex(name);\r\n            if (hexColor)\r\n                this.setFromHex(hexColor);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the hexadecimal value of this color, including the leading \"#\" character.\r\n     *\r\n     * @return - Returns the hex value.\r\n     */\r\n    toHex() {\r\n        function componentToHex(c) {\r\n            const int = Math.round(c * 255);\r\n            const hex = int.toString(16);\r\n            return hex.length == 1 ? '0' + hex : hex;\r\n        }\r\n        return '#' + componentToHex(this.r) + componentToHex(this.g) + componentToHex(this.b);\r\n    }\r\n    /**\r\n     * Checks if this Color  contains the same values as the other.\r\n     *\r\n     * @param other - The other Color to compare with.\r\n     * @return - Returns `true` if the values are the same, otherwise, `false`.\r\n     */\r\n    isEqual(other) {\r\n        return this.r == other.r && this.g == other.g && this.b == other.b && this.a == other.a;\r\n    }\r\n    /**\r\n     * Returns true if this color is NOT exactly the same as other.\r\n     *\r\n     * @param other - The other color to compare with.\r\n     * @return - Returns true or false.\r\n     */\r\n    notEquals(other) {\r\n        return this.r != other.r && this.g != other.g && this.b != other.b && this.a != other.a;\r\n    }\r\n    /**\r\n     * Returns true if this color is approximately the same as other.\r\n     *\r\n     * @param other - The other color to compare with.\r\n     * @param precision - The precision to which the values must match.\r\n     * @return - Returns true or false.\r\n     */\r\n    approxEqual(other, precision = Number.EPSILON) {\r\n        return (Math.abs(this.r - other.r) < precision &&\r\n            Math.abs(this.g - other.g) < precision &&\r\n            Math.abs(this.b - other.b) < precision &&\r\n            Math.abs(this.a - other.a) < precision);\r\n    }\r\n    /**\r\n     * Returns a new Color which is this Color added to other.\r\n     *\r\n     * @param other - The other color to add.\r\n     * @return - Returns a new color.\r\n     */\r\n    add(other) {\r\n        return new Color(this.r + other.r, this.g + other.g, this.b + other.b, this.a + other.a);\r\n    }\r\n    /**\r\n     * Updates this Color by adding the values from the other color.\r\n     *\r\n     * @param other - The other color to add.\r\n     */\r\n    addInPlace(other) {\r\n        this.r += other.r;\r\n        this.g += other.g;\r\n        this.b += other.b;\r\n        this.a += other.a;\r\n    }\r\n    /**\r\n     * Returns a new color which is this color subtracted from other.\r\n     *\r\n     * @param other - The other color to subtract.\r\n     * @return - Returns a new color.\r\n     */\r\n    subtract(other) {\r\n        return new Color(this.r - other.r, this.g - other.g, this.b - other.b, this.a - other.a);\r\n    }\r\n    /**\r\n     * Scales this color by scalar and return the result as a new Vec4.\r\n     *\r\n     * @param scalar - The scalar value.\r\n     * @return - Returns a new color.\r\n     */\r\n    scale(scalar) {\r\n        return new Color(this.r * scalar, this.g * scalar, this.b * scalar, this.a * scalar);\r\n    }\r\n    /**\r\n     * Scales this color by scalar.\r\n     *\r\n     * @param scalar - The scalar value.\r\n     */\r\n    scaleInPlace(scalar) {\r\n        this.r *= scalar;\r\n        this.g *= scalar;\r\n        this.b *= scalar;\r\n        this.a *= scalar;\r\n    }\r\n    /**\r\n     * Apply gamma correction to this color\r\n     *\r\n     * @param gamma - The gamma value.\r\n     */\r\n    applyGamma(gamma) {\r\n        this.set(Math.pow(this.r, gamma), Math.pow(this.g, gamma), Math.pow(this.b, gamma), this.a);\r\n    }\r\n    /**\r\n     * Converts to linear color space and returns a new color\r\n     *\r\n     * @param gamma - The gamma value.\r\n     * @return - Returns a new color.\r\n     */\r\n    toLinear(gamma = 2.2) {\r\n        return new Color(Math.pow(this.r, gamma), Math.pow(this.g, gamma), Math.pow(this.b, gamma), this.a);\r\n    }\r\n    /**\r\n     * returns a new color value value is mapped into a gamma curve\r\n     *\r\n     * @param gamma - The gamma value.\r\n     * @return - Returns a new color.\r\n     */\r\n    toGamma(gamma = 2.2) {\r\n        return new Color(Math.pow(this.r, 1.0 / gamma), Math.pow(this.g, 1.0 / gamma), Math.pow(this.b, 1.0 / gamma), this.a);\r\n    }\r\n    /**\r\n     * Calculates and returns the luminance of the linear RGB components.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    luminance() {\r\n        return 0.2126 * this.r + 0.7152 * this.g + 0.0722 * this.b;\r\n    }\r\n    /**\r\n     * Performs a linear interpolation between this color and other.\r\n     *\r\n     * @param other - The other color to interpolate between.\r\n     * @param t - Interpolation amount between the two inputs.\r\n     * @return - Returns a new color.\r\n     */\r\n    lerp(other, t) {\r\n        const ar = this.r;\r\n        const ag = this.g;\r\n        const ab = this.b;\r\n        const aa = this.a;\r\n        return new Color(ar + t * (other.r - ar), ag + t * (other.g - ag), ab + t * (other.b - ab), aa + t * (other.a - aa));\r\n    }\r\n    /**\r\n     * Creates a random color.\r\n     *\r\n     * @param gammaOffset - The gamma offset. Values between 0 and 1 increase the average brightness of the generated color. Values between 0 and -1 darken the generated color values.\r\n     * @param randomAlpha - Determines whether the alpha channel is random. If not, the alpha values will be 1.0.\r\n     * @return - The new random color.\r\n     */\r\n    static random(gammaOffset = 0.0, randomAlpha = false) {\r\n        if (gammaOffset > 0.0) {\r\n            return new Color(gammaOffset + Math.random() * (1.0 - gammaOffset), gammaOffset + Math.random() * (1.0 - gammaOffset), gammaOffset + Math.random() * (1.0 - gammaOffset), randomAlpha ? gammaOffset + Math.random() * (1.0 - gammaOffset) : 1.0);\r\n        }\r\n        if (gammaOffset < 0.0) {\r\n            return new Color(Math.random() * (1.0 + gammaOffset), Math.random() * (1.0 + gammaOffset), Math.random() * (1.0 + gammaOffset), randomAlpha ? Math.random() * (1.0 + gammaOffset) : 1.0);\r\n        }\r\n        return new Color(Math.random(), Math.random(), Math.random(), randomAlpha ? Math.random() : 1.0);\r\n    }\r\n    /**\r\n     * Clones this color and returns a new color.\r\n     *\r\n     * @return - Returns a new color.\r\n     */\r\n    clone() {\r\n        return new Color(this.__data[0], this.__data[1], this.__data[2], this.__data[3]);\r\n    }\r\n    /**\r\n     * Returns the type as an array. Often used to pass types to the GPU.\r\n     *\r\n     * @return - Returns as an array.\r\n     */\r\n    asArray() {\r\n        return this.__data;\r\n    }\r\n    /**\r\n     * Returns the type as a 3 component array. Often used to pass types to the GPU.\r\n     *\r\n     * @return - Returns as a 3 component array.\r\n     * @private\r\n     */\r\n    as3ComponentArray() {\r\n        return [this.__data[0], this.__data[1], this.__data[2]];\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @return - The json object.\r\n     */\r\n    toJSON() {\r\n        return {\r\n            r: this.r,\r\n            g: this.g,\r\n            b: this.b,\r\n            a: this.a,\r\n        };\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param j - The json object.\r\n     */\r\n    fromJSON(j) {\r\n        this.r = j.r;\r\n        this.g = j.g;\r\n        this.b = j.b;\r\n        this.a = j.a;\r\n    }\r\n    /**\r\n     * Loads the state of the value from a binary reader.\r\n     *\r\n     * @param reader - The reader value.\r\n     */\r\n    readBinary(reader) {\r\n        this.r = reader.loadFloat32();\r\n        this.g = reader.loadFloat32();\r\n        this.b = reader.loadFloat32();\r\n        this.a = reader.loadFloat32();\r\n    }\r\n    /**\r\n     * Returns the CSS rgba string.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    toCSSString() {\r\n        return ('rgba(' +\r\n            Math.round(this.r * 255) +\r\n            ', ' +\r\n            Math.round(this.g * 255) +\r\n            ', ' +\r\n            Math.round(this.b * 255) +\r\n            ', ' +\r\n            this.a +\r\n            ')');\r\n    }\r\n}\r\nexport { Color };\r\n//# sourceMappingURL=Color.js.map","import { StringFunctions } from '../Utilities/StringFunctions';\r\n/**\r\n * Class representing euler angles. Euler angles describe rotating an object\r\n * around its various axis in a specified axis order.\r\n *\r\n */\r\nclass EulerAngles {\r\n    /**\r\n     * Create a euler angle. Receives the xyz values in radians and the order that the rotations are applied.\r\n     *\r\n     * Order parameter values: `XYZ: 0`, `YZX: 1`, `ZXY: 2`, `XZY: 3`, `ZYX: 4`, `YXZ: 5`\r\n     *\r\n     * It could be either the `string` or the `number` value.\r\n     *\r\n     * @param x - The angle of the x axis in degrees. Default is 0.\r\n     * @param y - The angle of the y axis in degrees. Default is 0.\r\n     * @param z - The angle of the z axis in degrees. Default is 0.\r\n     * @param order - The order in which the rotations are applied.\r\n     */\r\n    constructor(x = 0, y = 0, z = 0, order = 0) {\r\n        if (typeof order === 'number' && !isNaN(order))\r\n            this.order = order;\r\n        else {\r\n            switch (order) {\r\n                case 'XYZ':\r\n                    this.order = 0;\r\n                    break;\r\n                case 'YZX':\r\n                    this.order = 1;\r\n                    break;\r\n                case 'ZXY':\r\n                    this.order = 2;\r\n                    break;\r\n                case 'XZY':\r\n                    this.order = 3;\r\n                    break;\r\n                case 'ZYX':\r\n                    this.order = 4;\r\n                    break;\r\n                case 'YXZ':\r\n                    this.order = 5;\r\n                    break;\r\n                default:\r\n                    throw new Error('Invalid Euler Angles Order:' + order);\r\n            }\r\n        }\r\n        if (x instanceof ArrayBuffer) {\r\n            const buffer = x;\r\n            const byteOffset = y;\r\n            this.__data = new Float32Array(buffer, byteOffset, 4);\r\n        }\r\n        else {\r\n            this.__data = new Float32Array(3);\r\n            this.__data[0] = x;\r\n            this.__data[1] = y;\r\n            this.__data[2] = z;\r\n        }\r\n    }\r\n    /**\r\n     * Getter for x axis rotation.\r\n     *\r\n     * @return - Returns the x axis rotation.\r\n     */\r\n    get x() {\r\n        return this.__data[0];\r\n    }\r\n    /**\r\n     * Setter for x axis rotation.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set x(val) {\r\n        this.__data[0] = val;\r\n    }\r\n    /**\r\n     * Getter for y axis rotation.\r\n     *\r\n     * @return - Returns the y axis rotation.\r\n     */\r\n    get y() {\r\n        return this.__data[1];\r\n    }\r\n    /**\r\n     * Setter for y axis rotation.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set y(val) {\r\n        this.__data[1] = val;\r\n    }\r\n    /**\r\n     * Getter for z axis rotation.\r\n     *\r\n     * @return - Returns the z axis rotation.\r\n     */\r\n    get z() {\r\n        return this.__data[2];\r\n    }\r\n    /**\r\n     * Setter for z axis rotation.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set z(val) {\r\n        this.__data[2] = val;\r\n    }\r\n    /**\r\n     * Sets the EulerAngles\r\n     *\r\n     * @param x - The x axis rotation in radians.\r\n     * @param y - The y axis rotation in radians.\r\n     * @param z - The z axis rotation in radians.\r\n     */\r\n    set(x, y, z) {\r\n        this.__data[0] = x;\r\n        this.__data[1] = y;\r\n        this.__data[2] = z;\r\n    }\r\n    // ///////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Converts this Vec3 to a string in JSON format.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    toString() {\r\n        // eslint-disable-next-line new-cap\r\n        return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());\r\n    }\r\n    toJSON() {\r\n        return {\r\n            x: this.__data[0],\r\n            y: this.__data[1],\r\n            z: this.__data[2],\r\n            order: this.order,\r\n        };\r\n    }\r\n    fromJSON(json) {\r\n        this.__data[0] = json.x;\r\n        this.__data[1] = json.y;\r\n        this.__data[2] = json.z;\r\n        this.order = json.order;\r\n    }\r\n}\r\nexport { EulerAngles };\r\n//# sourceMappingURL=EulerAngles.js.map","/* eslint-disable new-cap */\r\nimport { Vec3 } from './Vec3';\r\nimport { StringFunctions } from '../Utilities/StringFunctions';\r\n/**\r\n * A class representing a 3x3 matrix.\r\n * This matrix class is based on GLM, and is column major.\r\n *\r\n */\r\nclass Mat3 {\r\n    /**\r\n     * Initializes the Mat3 class with given data.\r\n     *\r\n     * @param m00 - Row 0, column 0.\r\n     * @param m01 - Row 0, column 1.\r\n     * @param m02 - Row 0, column 2.\r\n     * @param m10 - Row 1, column 0.\r\n     * @param m11 - Row 1, column 1.\r\n     * @param m12 - Row 1, column 2.\r\n     * @param m20 - Row 2, column 0.\r\n     * @param m21 - Row 2, column 1.\r\n     * @param m22 - Row 2, column 2.\r\n     */\r\n    constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1) {\r\n        if (m00 instanceof Vec3 && m01 instanceof Vec3 && m02 instanceof Vec3) {\r\n            this.__data = new Float32Array(9);\r\n            this.set(m00.x, m00.y, m00.z, m01.x, m01.y, m01.z, m02.x, m02.y, m02.z);\r\n        }\r\n        else if (m00 instanceof Float32Array) {\r\n            this.__data = m00;\r\n        }\r\n        else if (m00 instanceof ArrayBuffer) {\r\n            console.warn(`Deprecated, please use new Vec3(new Float32Array(buffer, byteOffset, 9))`);\r\n            const buffer = m00;\r\n            const byteOffset = m01;\r\n            this.__data = new Float32Array(buffer, byteOffset, 9);\r\n        }\r\n        else {\r\n            this.__data = new Float32Array(9);\r\n            this.set(m00, m01, m02, m10, m11, m12, m20, m21, m22);\r\n        }\r\n    }\r\n    // /////////////////////////////////////////\r\n    // properties\r\n    /**\r\n     * Getter for row 0, column 0.\r\n     * @return - Returns the m00 value.\r\n     */\r\n    get m00() {\r\n        return this.__data[0];\r\n    }\r\n    /**\r\n     * Setter for row 0, column 0.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m00(val) {\r\n        this.__data[0] = val;\r\n    }\r\n    /**\r\n     * Getter for row 0, column 1.\r\n     *\r\n     * @return - Returns the m01 value.\r\n     */\r\n    get m01() {\r\n        return this.__data[1];\r\n    }\r\n    /**\r\n     * Setter for row 0, column 1.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m01(val) {\r\n        this.__data[1] = val;\r\n    }\r\n    /**\r\n     * Getter for row 0, column 2.\r\n     *\r\n     * @return - Returns the m02 value.\r\n     */\r\n    get m02() {\r\n        return this.__data[2];\r\n    }\r\n    /**\r\n     * Setter for row 0, column 2.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m02(val) {\r\n        this.__data[2] = val;\r\n    }\r\n    /**\r\n     * Getter for row 1, column 0.\r\n     *\r\n     * @return - Returns the m10 value.\r\n     */\r\n    get m10() {\r\n        return this.__data[3];\r\n    }\r\n    /**\r\n     * Setter for row 1, column 0.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m10(val) {\r\n        this.__data[3] = val;\r\n    }\r\n    /**\r\n     * Getter for row 1, column 1\r\n     *\r\n     * @return - Returns the m11 value.\r\n     */\r\n    get m11() {\r\n        return this.__data[4];\r\n    }\r\n    /**\r\n     * Setter for row 1, column 1.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m11(val) {\r\n        this.__data[4] = val;\r\n    }\r\n    /**\r\n     * Getter for row 1, column 2.\r\n     *\r\n     * @return - Returns the m12 value.\r\n     */\r\n    get m12() {\r\n        return this.__data[5];\r\n    }\r\n    /**\r\n     * Setter for row 1, column 2.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m12(val) {\r\n        this.__data[5] = val;\r\n    }\r\n    /**\r\n     * Getter for row 2, column 0.\r\n     *\r\n     * @return - Returns the m20 value.\r\n     */\r\n    get m20() {\r\n        return this.__data[6];\r\n    }\r\n    /**\r\n     * Setter for row 2, column 0.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m20(val) {\r\n        this.__data[6] = val;\r\n    }\r\n    /**\r\n     * Getter for row 2, column 1.\r\n     *\r\n     * @return - Returns the m21 value.\r\n     */\r\n    get m21() {\r\n        return this.__data[7];\r\n    }\r\n    /**\r\n     * Setter for row 2, column 1.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m21(val) {\r\n        this.__data[7] = val;\r\n    }\r\n    /**\r\n     * Getter for row 2, column 2.\r\n     *\r\n     * @return - Returns the m22 value.\r\n     */\r\n    get m22() {\r\n        return this.__data[8];\r\n    }\r\n    /**\r\n     * Setter for row 2, column 2.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m22(val) {\r\n        this.__data[8] = val;\r\n    }\r\n    /**\r\n     * Getter for the `x` axis.\r\n     *\r\n     * @return - Returns the `x` axis as a Vec3.\r\n     */\r\n    get xAxis() {\r\n        return new Vec3(new Float32Array(this.__data.buffer, 0, 3));\r\n    }\r\n    /**\r\n     * Setter for the `x` axis.\r\n     *\r\n     * @param vec3 - The vec3 value.\r\n     */\r\n    set xAxis(vec3) {\r\n        this.xAxis.set(vec3.x, vec3.y, vec3.z);\r\n    }\r\n    /**\r\n     * Getter for the `y` axis.\r\n     * * @return - Returns the `y` axis as a Vec3.\r\n     */\r\n    get yAxis() {\r\n        return new Vec3(new Float32Array(this.__data.buffer, 3 * 4, 3)); // 4 bytes per 32bit float\r\n    }\r\n    /**\r\n     * Setter for the `y` axis.\r\n     * @param vec3 - The vec3 value.\r\n     */\r\n    set yAxis(vec3) {\r\n        this.yAxis.set(vec3.x, vec3.y, vec3.z);\r\n    }\r\n    /**\r\n     * Getter for the `z` axis.\r\n     * * @return - Returns the `z` axis as a Vec3.\r\n     */\r\n    get zAxis() {\r\n        return new Vec3(new Float32Array(this.__data.buffer, 6 * 4, 3));\r\n    }\r\n    /**\r\n     * Setter for the `z` axis.\r\n     * @param vec3 - The vec3 value.\r\n     */\r\n    set zAxis(vec3) {\r\n        this.zAxis.set(vec3.x, vec3.y, vec3.z);\r\n    }\r\n    // /////////////////////////////////////////\r\n    // Setters\r\n    /**\r\n     * Sets the state of the Mat3 class\r\n     *\r\n     * @param m00 - Row 0, column 0.\r\n     * @param m01 - Row 0, column 1.\r\n     * @param m02 - Row 0, column 2.\r\n     * @param m10 - Row 1, column 0.\r\n     * @param m11 - Row 1, column 1.\r\n     * @param m12 - Row 1, column 2.\r\n     * @param m20 - Row 2, column 0.\r\n     * @param m21 - Row 2, column 1.\r\n     * @param m22 - Row 2, column 2.\r\n     */\r\n    set(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1) {\r\n        this.__data[0] = m00;\r\n        this.__data[1] = m01;\r\n        this.__data[2] = m02;\r\n        this.__data[3] = m10;\r\n        this.__data[4] = m11;\r\n        this.__data[5] = m12;\r\n        this.__data[6] = m20;\r\n        this.__data[7] = m21;\r\n        this.__data[8] = m22;\r\n    }\r\n    /**\r\n     * Sets state of the Mat3 with the identity  Matrix\r\n     */\r\n    setIdentity() {\r\n        this.set();\r\n    }\r\n    /**\r\n     * Sets state of the Mat3 from another Mat3\r\n     *\r\n     * Note: works with either Mat3 or Mat4.\r\n     *\r\n     * @param mat - The mat value.\r\n     */\r\n    setFromMat(mat) {\r\n        this.__data[0] = mat.m00;\r\n        this.__data[1] = mat.m01;\r\n        this.__data[2] = mat.m02;\r\n        this.__data[3] = mat.m10;\r\n        this.__data[4] = mat.m11;\r\n        this.__data[5] = mat.m12;\r\n        this.__data[6] = mat.m20;\r\n        this.__data[7] = mat.m21;\r\n        this.__data[8] = mat.m22;\r\n    }\r\n    /**\r\n     * Scales and calculates the cross product of the `Vec3` and sets the result in the Mat3\r\n     * Note: the resulting matrix +Z axis is aligned with the provided direction value.\r\n     *\r\n     * @param dir - The dir value.\r\n     * @param up - The up value.\r\n     */\r\n    setFromDirectionAndUpvector(dir, up) {\r\n        const zAxis = dir;\r\n        const zLen = zAxis.length();\r\n        if (zLen < Number.EPSILON) {\r\n            this.setIdentity();\r\n            return;\r\n        }\r\n        zAxis.scaleInPlace(1 / zLen);\r\n        const xAxis = up.cross(zAxis);\r\n        const xLen = xAxis.length();\r\n        if (xLen > Number.EPSILON)\r\n            xAxis.scaleInPlace(1 / xLen);\r\n        const yAxis = zAxis.cross(xAxis);\r\n        const yLen = yAxis.length();\r\n        if (yLen > Number.EPSILON)\r\n            yAxis.scaleInPlace(1 / yLen);\r\n        this.set(xAxis.x, xAxis.y, xAxis.z, yAxis.x, yAxis.y, yAxis.z, zAxis.x, zAxis.y, zAxis.z);\r\n    }\r\n    /**\r\n     * Inverts a Mat3 and returns the result as a new instance.\r\n     *\r\n     * @return - Returns a new Mat3.\r\n     */\r\n    inverse() {\r\n        const a00 = this.__data[0];\r\n        const a01 = this.__data[1];\r\n        const a02 = this.__data[2];\r\n        const a10 = this.__data[3];\r\n        const a11 = this.__data[4];\r\n        const a12 = this.__data[5];\r\n        const a20 = this.__data[6];\r\n        const a21 = this.__data[7];\r\n        const a22 = this.__data[8];\r\n        const b01 = a22 * a11 - a12 * a21;\r\n        const b11 = -a22 * a10 + a12 * a20;\r\n        const b21 = a21 * a10 - a11 * a20;\r\n        // Calculate the determinant\r\n        let det = a00 * b01 + a01 * b11 + a02 * b21;\r\n        if (!det) {\r\n            console.warn('Unable to invert Mat3');\r\n            return new Mat3();\r\n        }\r\n        det = 1.0 / det;\r\n        return new Mat3(b01 * det, (-a22 * a01 + a02 * a21) * det, (a12 * a01 - a02 * a11) * det, b11 * det, (a22 * a00 - a02 * a20) * det, (-a12 * a00 + a02 * a10) * det, b21 * det, (-a21 * a00 + a01 * a20) * det, (a11 * a00 - a01 * a10) * det);\r\n    }\r\n    /**\r\n     * Inverts a Mat3 in place modifying its values.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    invertInPlace() {\r\n        const a00 = this.__data[0];\r\n        const a01 = this.__data[1];\r\n        const a02 = this.__data[2];\r\n        const a10 = this.__data[3];\r\n        const a11 = this.__data[4];\r\n        const a12 = this.__data[5];\r\n        const a20 = this.__data[6];\r\n        const a21 = this.__data[7];\r\n        const a22 = this.__data[8];\r\n        const b01 = a22 * a11 - a12 * a21;\r\n        const b11 = -a22 * a10 + a12 * a20;\r\n        const b21 = a21 * a10 - a11 * a20;\r\n        // Calculate the determinant\r\n        let det = a00 * b01 + a01 * b11 + a02 * b21;\r\n        if (!det) {\r\n            console.warn('Unable to invert Mat3');\r\n            return false;\r\n        }\r\n        det = 1.0 / det;\r\n        this.set(b01 * det, (-a22 * a01 + a02 * a21) * det, (a12 * a01 - a02 * a11) * det, b11 * det, (a22 * a00 - a02 * a20) * det, (-a12 * a00 + a02 * a10) * det, b21 * det, (-a21 * a00 + a01 * a20) * det, (a11 * a00 - a01 * a10) * det);\r\n        return true;\r\n    }\r\n    /**\r\n     * Transposes (exchanges columns with rows) this matrix\r\n     * and returns the result as a new instance.\r\n     *\r\n     * @return - Return a new transposed Mat3.\r\n     */\r\n    transpose() {\r\n        return new Mat3(this.__data[0], this.__data[3], this.__data[6], this.__data[1], this.__data[4], this.__data[7], this.__data[2], this.__data[5], this.__data[8]);\r\n    }\r\n    /**\r\n     * Transposes (exchanges columns with rows) this matrix modifying its values.\r\n     */\r\n    transposeInPlace() {\r\n        // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n        const a01 = this.__data[1];\r\n        const a02 = this.__data[2];\r\n        const a12 = this.__data[5];\r\n        this.__data[1] = this.__data[3];\r\n        this.__data[2] = this.__data[6];\r\n        this.__data[3] = a01;\r\n        this.__data[5] = this.__data[7];\r\n        this.__data[6] = a02;\r\n        this.__data[7] = a12;\r\n    }\r\n    /**\r\n     * Transforms the Vec3 with a Mat3.\r\n     *\r\n     * @param vec3 - The vec3 value.\r\n     * @return - Return the result as a new Vec3.\r\n     */\r\n    transformVec3(vec3) {\r\n        return new Vec3(this.__data[0] * vec3.x + this.__data[1] * vec3.y + this.__data[2] * vec3.z, this.__data[3] * vec3.x + this.__data[4] * vec3.y + this.__data[5] * vec3.z, this.__data[6] * vec3.x + this.__data[7] * vec3.y + this.__data[8] * vec3.z);\r\n    }\r\n    /**\r\n     * Clones this Mat3 returning a new instance.\r\n     *\r\n     * @return - Returns a new Mat3.\r\n     */\r\n    clone() {\r\n        return new Mat3(this.__data[0], this.__data[1], this.__data[2], this.__data[3], this.__data[4], this.__data[5], this.__data[6], this.__data[7], this.__data[8]);\r\n    }\r\n    // ///////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Loads the state of the value from a binary reader.\r\n     *\r\n     * @param reader - The reader value.\r\n     */\r\n    readBinary(reader) {\r\n        this.__data = reader.loadFloat32Array(9);\r\n    }\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     * @return {Float32Array} - The json object.\r\n     */\r\n    toJSON() {\r\n        return this.__data;\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param json - The json param.\r\n     */\r\n    fromJSON(json) {\r\n        this.__data = new Float32Array(json);\r\n    }\r\n    // ///////////////////////////\r\n    // Debugging\r\n    /**\r\n     * Converts this Vec3 to a string in JSON format.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    toString() {\r\n        // eslint-disable-next-line new-cap\r\n        return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());\r\n    }\r\n    /**\r\n     * Returns current Math type data as array. Often used to pass types to the GPU.\r\n     *\r\n     * @return - Returns the result as an array.\r\n     */\r\n    asArray() {\r\n        return this.__data;\r\n    }\r\n}\r\nexport { Mat3 };\r\n//# sourceMappingURL=Mat3.js.map","import { Vec3 } from './Vec3';\r\nimport { Mat3 } from './Mat3';\r\nimport { Vec4 } from './Vec4';\r\nimport { StringFunctions } from '../Utilities/StringFunctions';\r\n/**\r\n * A class representing a 4x4 matrix.\r\n * This matrix class is based on GLM, and is column major.\r\n *\r\n */\r\nclass Mat4 {\r\n    /**\r\n     * Initializes the Mat3 class with given data.\r\n     *\r\n     * @param m00 - Row 0, column 0.\r\n     * @param m01 - Row 0, column 1.\r\n     * @param m02 - Row 0, column 2.\r\n     * @param m03 - Row 0, column 3.\r\n     * @param m10 - Row 1, column 0.\r\n     * @param m11 - Row 1, column 1.\r\n     * @param m12 - Row 1, column 2.\r\n     * @param m13 - Row 1, column 3.\r\n     * @param m20 - Row 2, column 0.\r\n     * @param m21 - Row 2, column 1.\r\n     * @param m22 - Row 2, column 2.\r\n     * @param m23 - Row 2, column 3.\r\n     * @param m30 - Row 3, column 0.\r\n     * @param m31 - Row 3, column 1.\r\n     * @param m32 - Row 3, column 2.\r\n     * @param m33 - Row 3, column 3.\r\n     */\r\n    constructor(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m10 = 0, m11 = 1, m12 = 0, m13 = 0, m20 = 0, m21 = 0, m22 = 1, m23 = 0, m30 = 0, m31 = 0, m32 = 0, m33 = 1) {\r\n        if (m00 instanceof Float32Array) {\r\n            this.__data = m00;\r\n        }\r\n        else if (m00 instanceof ArrayBuffer) {\r\n            const buffer = m00;\r\n            const byteOffset = m01;\r\n            this.__data = new Float32Array(buffer, byteOffset, 16);\r\n        }\r\n        else {\r\n            this.__data = new Float32Array(16);\r\n            this.set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\r\n        }\r\n    }\r\n    // /////////////////////////////////////////\r\n    // properties\r\n    /**\r\n     * Getter for row 0, column 0.\r\n     *\r\n     * @return - Returns the m00 value.\r\n     */\r\n    get m00() {\r\n        return this.__data[0];\r\n    }\r\n    /**\r\n     * Setter for row 0, column 0.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m00(val) {\r\n        this.__data[0] = val;\r\n    }\r\n    /**\r\n     * Getter for row 0, column 1.\r\n     *\r\n     * @return - Returns the m01 value.\r\n     */\r\n    get m01() {\r\n        return this.__data[1];\r\n    }\r\n    /**\r\n     * Setter for row 0, column 1.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m01(val) {\r\n        this.__data[1] = val;\r\n    }\r\n    /**\r\n     * Getter for row 0, column 2.\r\n     *\r\n     * @return - Returns the m02 value.\r\n     */\r\n    get m02() {\r\n        return this.__data[2];\r\n    }\r\n    /**\r\n     * Setter for row 0, column 2.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m02(val) {\r\n        this.__data[2] = val;\r\n    }\r\n    /**\r\n     * Getter for row 0, column 3.\r\n     *\r\n     * @return - Returns the m03 value.\r\n     */\r\n    get m03() {\r\n        return this.__data[3];\r\n    }\r\n    /**\r\n     * Setter for row 0, column 3.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m03(val) {\r\n        this.__data[3] = val;\r\n    }\r\n    /**\r\n     * Getter for row 1, column 0.\r\n     *\r\n     * @return - Returns the m10 value.\r\n     */\r\n    get m10() {\r\n        return this.__data[4];\r\n    }\r\n    /**\r\n     * Setter for row 1, column 0.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m10(val) {\r\n        this.__data[4] = val;\r\n    }\r\n    /**\r\n     * Getter for row 1, column 1.\r\n     *\r\n     * @return - Returns the m11 value.\r\n     */\r\n    get m11() {\r\n        return this.__data[5];\r\n    }\r\n    /**\r\n     * Setter for row 1, column 1.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m11(val) {\r\n        this.__data[5] = val;\r\n    }\r\n    /**\r\n     * Getter for row 1, column 2.\r\n     *\r\n     * @return - Returns the m12 value.\r\n     */\r\n    get m12() {\r\n        return this.__data[6];\r\n    }\r\n    /**\r\n     * Setter for row 1, column 2.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m12(val) {\r\n        this.__data[6] = val;\r\n    }\r\n    /**\r\n     * Getter for row 1, column 3.\r\n     *\r\n     * @return - Returns the m13 value.\r\n     */\r\n    get m13() {\r\n        return this.__data[7];\r\n    }\r\n    /**\r\n     * Setter for row 1, column 3.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m13(val) {\r\n        this.__data[7] = val;\r\n    }\r\n    /**\r\n     * Getter for row 2, column 0.\r\n     *\r\n     * @return - Returns the m20 value.\r\n     */\r\n    get m20() {\r\n        return this.__data[8];\r\n    }\r\n    /**\r\n     * Setter for row 2, column 0.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m20(val) {\r\n        this.__data[8] = val;\r\n    }\r\n    /**\r\n     * Getter for row 2, column 1.\r\n     *\r\n     * @return - Returns the m21 value.\r\n     */\r\n    get m21() {\r\n        return this.__data[9];\r\n    }\r\n    /**\r\n     * Setter for row 2, column 1\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m21(val) {\r\n        this.__data[9] = val;\r\n    }\r\n    /**\r\n     * Getter for row 2, column 2.\r\n     *\r\n     * @return - Returns the m22 value.\r\n     */\r\n    get m22() {\r\n        return this.__data[10];\r\n    }\r\n    /**\r\n     * Setter for row 2, column 2.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m22(val) {\r\n        this.__data[10] = val;\r\n    }\r\n    /**\r\n     * Getter for row 2, column 3.\r\n     *\r\n     * @return - Returns the m23 value.\r\n     */\r\n    get m23() {\r\n        return this.__data[11];\r\n    }\r\n    /**\r\n     * Setter for row 2, column 3.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m23(val) {\r\n        this.__data[11] = val;\r\n    }\r\n    /**\r\n     * Getter for row 3, column 0\r\n     *\r\n     * @return - Returns the m30 value.\r\n     */\r\n    get m30() {\r\n        return this.__data[12];\r\n    }\r\n    /**\r\n     * Setter for row 3, column 0.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m30(val) {\r\n        this.__data[12] = val;\r\n    }\r\n    /**\r\n     * Getter for row 3, column 1.\r\n     *\r\n     * @return - Returns the m31 value.\r\n     */\r\n    get m31() {\r\n        return this.__data[13];\r\n    }\r\n    /**\r\n     * Setter for row 3, column 1.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m31(val) {\r\n        this.__data[13] = val;\r\n    }\r\n    /**\r\n     * Getter for row 3, column 2.\r\n     *\r\n     * @return - Returns the m32 value.\r\n     */\r\n    get m32() {\r\n        return this.__data[14];\r\n    }\r\n    /**\r\n     * Setter for row 3, column 2.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m32(val) {\r\n        this.__data[14] = val;\r\n    }\r\n    /**\r\n     * Getter for row 3, column 3.\r\n     *\r\n     * @return - Returns the m33 value.\r\n     */\r\n    get m33() {\r\n        return this.__data[15];\r\n    }\r\n    /**\r\n     * Setter for row 3, column 3.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set m33(val) {\r\n        this.__data[15] = val;\r\n    }\r\n    /**\r\n     * Getter for the `x` axis.\r\n     *\r\n     * @return - Returns the `x` axis as a Vec3.\r\n     */\r\n    get xAxis() {\r\n        return new Vec3(new Float32Array(this.__data.buffer, 0, 3));\r\n    }\r\n    /**\r\n     * Setter for the `x` axis.\r\n     *\r\n     * @param vec3 - The vec3 value.\r\n     */\r\n    set xAxis(vec3) {\r\n        this.xAxis.set(vec3.x, vec3.y, vec3.z);\r\n    }\r\n    /**\r\n     * Getter for the `y` axis.\r\n     *\r\n     * @return - Returns the `y` axis as a Vec3.\r\n     */\r\n    get yAxis() {\r\n        return new Vec3(new Float32Array(this.__data.buffer, 4 * 4, 3));\r\n    }\r\n    /**\r\n     * Setter for the `y` axis.\r\n     *\r\n     * @param vec3 - The vec3 value.\r\n     */\r\n    set yAxis(vec3) {\r\n        this.yAxis.set(vec3.x, vec3.y, vec3.z);\r\n    }\r\n    /**\r\n     * Getter for the `z` axis.\r\n     *\r\n     * @return - Returns the `z` axis as a Vec3.\r\n     */\r\n    get zAxis() {\r\n        return new Vec3(new Float32Array(this.__data.buffer, 8 * 4, 3));\r\n    }\r\n    /**\r\n     * Setter for the `z` axis.\r\n     *\r\n     * @param vec3 - The vec3 value.\r\n     */\r\n    set zAxis(vec3) {\r\n        this.zAxis.set(vec3.x, vec3.y, vec3.z);\r\n    }\r\n    /**\r\n     * Getter for the translation of the matrix. Assumes the translation values are 12, 13, & 14.\r\n     *\r\n     * @return - Returns the translation.\r\n     */\r\n    get translation() {\r\n        return new Vec3(new Float32Array(this.__data.buffer, 12 * 4, 3));\r\n    }\r\n    /**\r\n     * Setter for the translation of the matrix. Assumes the translation values are 12, 13, & 14.\r\n     *\r\n     * @param vec3 - The translation.\r\n     */\r\n    set translation(vec3) {\r\n        this.translation.set(vec3.x, vec3.y, vec3.z);\r\n    }\r\n    // /////////////////////////////////////////\r\n    // Setters\r\n    /**\r\n     * Sets the state of the Mat4 class\r\n     *\r\n     * @param m00 - Row 0, column 0.\r\n     * @param m01 - Row 0, column 1.\r\n     * @param m02 - Row 0, column 2.\r\n     * @param m03 - Row 0, column 3.\r\n     * @param m10 - Row 1, column 0.\r\n     * @param m11 - Row 1, column 1.\r\n     * @param m12 - Row 1, column 2.\r\n     * @param m13 - Row 1, column 3.\r\n     * @param m20 - Row 2, column 0.\r\n     * @param m21 - Row 2, column 1.\r\n     * @param m22 - Row 2, column 2.\r\n     * @param m23 - Row 2, column 3.\r\n     * @param m30 - Row 3, column 0.\r\n     * @param m31 - Row 3, column 1.\r\n     * @param m32 - Row 3, column 2.\r\n     * @param m33 - Row 3, column 3.\r\n     */\r\n    set(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m10 = 0, m11 = 1, m12 = 0, m13 = 0, m20 = 0, m21 = 0, m22 = 1, m23 = 0, m30 = 0, m31 = 0, m32 = 0, m33 = 1) {\r\n        this.__data[0] = m00;\r\n        this.__data[1] = m01;\r\n        this.__data[2] = m02;\r\n        this.__data[3] = m03;\r\n        this.__data[4] = m10;\r\n        this.__data[5] = m11;\r\n        this.__data[6] = m12;\r\n        this.__data[7] = m13;\r\n        this.__data[8] = m20;\r\n        this.__data[9] = m21;\r\n        this.__data[10] = m22;\r\n        this.__data[11] = m23;\r\n        this.__data[12] = m30;\r\n        this.__data[13] = m31;\r\n        this.__data[14] = m32;\r\n        this.__data[15] = m33;\r\n    }\r\n    /**\r\n     * Sets state of the Mat4 with the identity  Matrix\r\n     */\r\n    setIdentity() {\r\n        this.set();\r\n    }\r\n    /**\r\n     * Sets the state of the Mat4 Object.\r\n     *\r\n     * @param float32Array - The float32Array value.\r\n     */\r\n    setDataArray(float32Array) {\r\n        this.__data = float32Array;\r\n    }\r\n    /**\r\n     * Sets state of the Mat4 from another Mat4\r\n     *\r\n     * Note: works with either Mat3 or Mat4.\r\n     *\r\n     * @param mat4 - The mat4 value.\r\n     */\r\n    setFromMat4(mat4) {\r\n        this.__data[0] = mat4.m00;\r\n        this.__data[1] = mat4.m01;\r\n        this.__data[2] = mat4.m02;\r\n        this.__data[3] = mat4.m03;\r\n        this.__data[4] = mat4.m10;\r\n        this.__data[5] = mat4.m11;\r\n        this.__data[6] = mat4.m12;\r\n        this.__data[7] = mat4.m13;\r\n        this.__data[8] = mat4.m20;\r\n        this.__data[9] = mat4.m21;\r\n        this.__data[10] = mat4.m22;\r\n        this.__data[11] = mat4.m23;\r\n        this.__data[12] = mat4.m30;\r\n        this.__data[13] = mat4.m31;\r\n        this.__data[14] = mat4.m32;\r\n        this.__data[15] = mat4.m33;\r\n    }\r\n    /**\r\n     * Converts a Mat4 to a Mat3.\r\n     *\r\n     * @return - Returns a new Mat3.\r\n     */\r\n    toMat3() {\r\n        return new Mat3(this.__data[0], this.__data[1], this.__data[2], this.__data[4], this.__data[5], this.__data[6], this.__data[8], this.__data[9], this.__data[10]);\r\n    }\r\n    /**\r\n     * Transposes (exchanges columns with rows) this matrix.\r\n     */\r\n    transposeInPlace() {\r\n        // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n        const a01 = this.__data[1];\r\n        const a02 = this.__data[2];\r\n        const a03 = this.__data[3];\r\n        const a12 = this.__data[6];\r\n        const a13 = this.__data[7];\r\n        const a23 = this.__data[11];\r\n        this.__data[1] = this.__data[4];\r\n        this.__data[2] = this.__data[8];\r\n        this.__data[3] = this.__data[12];\r\n        this.__data[4] = a01;\r\n        this.__data[6] = this.__data[9];\r\n        this.__data[7] = this.__data[13];\r\n        this.__data[8] = a02;\r\n        this.__data[9] = a12;\r\n        this.__data[11] = this.__data[14];\r\n        this.__data[12] = a03;\r\n        this.__data[13] = a13;\r\n        this.__data[14] = a23;\r\n    }\r\n    /**\r\n     * Transposes (exchanges columns with rows) this matrix\r\n     * and returns the result as a new instance.\r\n     *\r\n     * @return - Return a new transposed Mat4.\r\n     */\r\n    transpose() {\r\n        return new Mat4(this.__data[0], this.__data[4], this.__data[8], this.__data[12], this.__data[1], this.__data[5], this.__data[9], this.__data[13], this.__data[2], this.__data[6], this.__data[10], this.__data[14], this.__data[3], this.__data[7], this.__data[11], this.__data[15]);\r\n    }\r\n    /**\r\n     * Inverts a Mat4 and returns the result as a new instance.\r\n     *\r\n     * @return - Returns a new Mat4.\r\n     */\r\n    inverse() {\r\n        const a00 = this.__data[0];\r\n        const a01 = this.__data[1];\r\n        const a02 = this.__data[2];\r\n        const a03 = this.__data[3];\r\n        const a10 = this.__data[4];\r\n        const a11 = this.__data[5];\r\n        const a12 = this.__data[6];\r\n        const a13 = this.__data[7];\r\n        const a20 = this.__data[8];\r\n        const a21 = this.__data[9];\r\n        const a22 = this.__data[10];\r\n        const a23 = this.__data[11];\r\n        const a30 = this.__data[12];\r\n        const a31 = this.__data[13];\r\n        const a32 = this.__data[14];\r\n        const a33 = this.__data[15];\r\n        const b00 = a00 * a11 - a01 * a10;\r\n        const b01 = a00 * a12 - a02 * a10;\r\n        const b02 = a00 * a13 - a03 * a10;\r\n        const b03 = a01 * a12 - a02 * a11;\r\n        const b04 = a01 * a13 - a03 * a11;\r\n        const b05 = a02 * a13 - a03 * a12;\r\n        const b06 = a20 * a31 - a21 * a30;\r\n        const b07 = a20 * a32 - a22 * a30;\r\n        const b08 = a20 * a33 - a23 * a30;\r\n        const b09 = a21 * a32 - a22 * a31;\r\n        const b10 = a21 * a33 - a23 * a31;\r\n        const b11 = a22 * a33 - a23 * a32;\r\n        // Calculate the determinant\r\n        let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n        if (!det) {\r\n            console.warn('Unable to invert Mat4');\r\n            return this;\r\n        }\r\n        det = 1.0 / det;\r\n        return new Mat4((a11 * b11 - a12 * b10 + a13 * b09) * det, (a02 * b10 - a01 * b11 - a03 * b09) * det, (a31 * b05 - a32 * b04 + a33 * b03) * det, (a22 * b04 - a21 * b05 - a23 * b03) * det, (a12 * b08 - a10 * b11 - a13 * b07) * det, (a00 * b11 - a02 * b08 + a03 * b07) * det, (a32 * b02 - a30 * b05 - a33 * b01) * det, (a20 * b05 - a22 * b02 + a23 * b01) * det, (a10 * b10 - a11 * b08 + a13 * b06) * det, (a01 * b08 - a00 * b10 - a03 * b06) * det, (a30 * b04 - a31 * b02 + a33 * b00) * det, (a21 * b02 - a20 * b04 - a23 * b00) * det, (a11 * b07 - a10 * b09 - a12 * b06) * det, (a00 * b09 - a01 * b07 + a02 * b06) * det, (a31 * b01 - a30 * b03 - a32 * b00) * det, (a20 * b03 - a21 * b01 + a22 * b00) * det);\r\n    }\r\n    /**\r\n     * Inverts a Mat4.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    invertInPlace() {\r\n        const a00 = this.__data[0];\r\n        const a01 = this.__data[1];\r\n        const a02 = this.__data[2];\r\n        const a03 = this.__data[3];\r\n        const a10 = this.__data[4];\r\n        const a11 = this.__data[5];\r\n        const a12 = this.__data[6];\r\n        const a13 = this.__data[7];\r\n        const a20 = this.__data[8];\r\n        const a21 = this.__data[9];\r\n        const a22 = this.__data[10];\r\n        const a23 = this.__data[11];\r\n        const a30 = this.__data[12];\r\n        const a31 = this.__data[13];\r\n        const a32 = this.__data[14];\r\n        const a33 = this.__data[15];\r\n        const b00 = a00 * a11 - a01 * a10;\r\n        const b01 = a00 * a12 - a02 * a10;\r\n        const b02 = a00 * a13 - a03 * a10;\r\n        const b03 = a01 * a12 - a02 * a11;\r\n        const b04 = a01 * a13 - a03 * a11;\r\n        const b05 = a02 * a13 - a03 * a12;\r\n        const b06 = a20 * a31 - a21 * a30;\r\n        const b07 = a20 * a32 - a22 * a30;\r\n        const b08 = a20 * a33 - a23 * a30;\r\n        const b09 = a21 * a32 - a22 * a31;\r\n        const b10 = a21 * a33 - a23 * a31;\r\n        const b11 = a22 * a33 - a23 * a32;\r\n        // Calculate the determinant\r\n        let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n        if (!det) {\r\n            console.warn('Unable to invert Mat4');\r\n            return false;\r\n        }\r\n        det = 1.0 / det;\r\n        this.set((a11 * b11 - a12 * b10 + a13 * b09) * det, (a02 * b10 - a01 * b11 - a03 * b09) * det, (a31 * b05 - a32 * b04 + a33 * b03) * det, (a22 * b04 - a21 * b05 - a23 * b03) * det, (a12 * b08 - a10 * b11 - a13 * b07) * det, (a00 * b11 - a02 * b08 + a03 * b07) * det, (a32 * b02 - a30 * b05 - a33 * b01) * det, (a20 * b05 - a22 * b02 + a23 * b01) * det, (a10 * b10 - a11 * b08 + a13 * b06) * det, (a01 * b08 - a00 * b10 - a03 * b06) * det, (a30 * b04 - a31 * b02 + a33 * b00) * det, (a21 * b02 - a20 * b04 - a23 * b00) * det, (a11 * b07 - a10 * b09 - a12 * b06) * det, (a00 * b09 - a01 * b07 + a02 * b06) * det, (a31 * b01 - a30 * b03 - a32 * b00) * det, (a20 * b03 - a21 * b01 + a22 * b00) * det);\r\n        return true;\r\n    }\r\n    /**\r\n     * Sets this matrix as the inverse of the given Mat4.\r\n     *\r\n     * @param mat4 - The mat4 value.\r\n     * @return - In case the `determinant` can't be calculated, a `null` will be returned, otherwise, nothing is returned\r\n     */\r\n    setInverse(mat4) {\r\n        const a00 = mat4.__data[0];\r\n        const a01 = mat4.__data[1];\r\n        const a02 = mat4.__data[2];\r\n        const a03 = mat4.__data[3];\r\n        const a10 = mat4.__data[4];\r\n        const a11 = mat4.__data[5];\r\n        const a12 = mat4.__data[6];\r\n        const a13 = mat4.__data[7];\r\n        const a20 = mat4.__data[8];\r\n        const a21 = mat4.__data[9];\r\n        const a22 = mat4.__data[10];\r\n        const a23 = mat4.__data[11];\r\n        const a30 = mat4.__data[12];\r\n        const a31 = mat4.__data[13];\r\n        const a32 = mat4.__data[14];\r\n        const a33 = mat4.__data[15];\r\n        const b00 = a00 * a11 - a01 * a10;\r\n        const b01 = a00 * a12 - a02 * a10;\r\n        const b02 = a00 * a13 - a03 * a10;\r\n        const b03 = a01 * a12 - a02 * a11;\r\n        const b04 = a01 * a13 - a03 * a11;\r\n        const b05 = a02 * a13 - a03 * a12;\r\n        const b06 = a20 * a31 - a21 * a30;\r\n        const b07 = a20 * a32 - a22 * a30;\r\n        const b08 = a20 * a33 - a23 * a30;\r\n        const b09 = a21 * a32 - a22 * a31;\r\n        const b10 = a21 * a33 - a23 * a31;\r\n        const b11 = a22 * a33 - a23 * a32;\r\n        // Calculate the determinant\r\n        let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n        if (!det) {\r\n            throw new Error('Unable to invert Mat4');\r\n        }\r\n        det = 1.0 / det;\r\n        this.set((a11 * b11 - a12 * b10 + a13 * b09) * det, (a02 * b10 - a01 * b11 - a03 * b09) * det, (a31 * b05 - a32 * b04 + a33 * b03) * det, (a22 * b04 - a21 * b05 - a23 * b03) * det, (a12 * b08 - a10 * b11 - a13 * b07) * det, (a00 * b11 - a02 * b08 + a03 * b07) * det, (a32 * b02 - a30 * b05 - a33 * b01) * det, (a20 * b05 - a22 * b02 + a23 * b01) * det, (a10 * b10 - a11 * b08 + a13 * b06) * det, (a01 * b08 - a00 * b10 - a03 * b06) * det, (a30 * b04 - a31 * b02 + a33 * b00) * det, (a21 * b02 - a20 * b04 - a23 * b00) * det, (a11 * b07 - a10 * b09 - a12 * b06) * det, (a00 * b09 - a01 * b07 + a02 * b06) * det, (a31 * b01 - a30 * b03 - a32 * b00) * det, (a20 * b03 - a21 * b01 + a22 * b00) * det);\r\n    }\r\n    /**\r\n     * Multiplies two Mat4s and returns the result as a new instance.\r\n     *\r\n     * @param other - The other Mat4 to multiply with.\r\n     * @return - Returns a new Mat4.\r\n     */\r\n    multiply(other) {\r\n        const a00 = this.__data[0];\r\n        const a01 = this.__data[1];\r\n        const a02 = this.__data[2];\r\n        const a03 = this.__data[3];\r\n        const a10 = this.__data[4];\r\n        const a11 = this.__data[5];\r\n        const a12 = this.__data[6];\r\n        const a13 = this.__data[7];\r\n        const a20 = this.__data[8];\r\n        const a21 = this.__data[9];\r\n        const a22 = this.__data[10];\r\n        const a23 = this.__data[11];\r\n        const a30 = this.__data[12];\r\n        const a31 = this.__data[13];\r\n        const a32 = this.__data[14];\r\n        const a33 = this.__data[15];\r\n        // Cache only the current line of the second matrix\r\n        const b = other.asArray();\r\n        let b0 = b[0];\r\n        let b1 = b[1];\r\n        let b2 = b[2];\r\n        let b3 = b[3];\r\n        const result = new Mat4();\r\n        result.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        result.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        result.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        result.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        b0 = b[4];\r\n        b1 = b[5];\r\n        b2 = b[6];\r\n        b3 = b[7];\r\n        result.m10 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        result.m11 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        result.m12 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        result.m13 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        b0 = b[8];\r\n        b1 = b[9];\r\n        b2 = b[10];\r\n        b3 = b[11];\r\n        result.m20 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        result.m21 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        result.m22 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        result.m23 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        b0 = b[12];\r\n        b1 = b[13];\r\n        b2 = b[14];\r\n        b3 = b[15];\r\n        result.m30 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        result.m31 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        result.m32 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        result.m33 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        return result;\r\n    }\r\n    /**\r\n     * Multiplies two Mat4s in place explicitly not using SIMD.\r\n     *\r\n     * @param other - The other Mat4 to multiply with.\r\n     * @return - Returns a new Mat4.\r\n     */\r\n    multiplyInPlace(other) {\r\n        const a = this.asArray();\r\n        const a00 = a[0];\r\n        const a01 = a[1];\r\n        const a02 = a[2];\r\n        const a03 = a[3];\r\n        const a10 = a[4];\r\n        const a11 = a[5];\r\n        const a12 = a[6];\r\n        const a13 = a[7];\r\n        const a20 = a[8];\r\n        const a21 = a[9];\r\n        const a22 = a[10];\r\n        const a23 = a[11];\r\n        const a30 = a[12];\r\n        const a31 = a[13];\r\n        const a32 = a[14];\r\n        const a33 = a[15];\r\n        // Cache only the current line of the second matrix\r\n        const b = other.asArray();\r\n        let b0 = b[0];\r\n        let b1 = b[1];\r\n        let b2 = b[2];\r\n        let b3 = b[3];\r\n        this.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        this.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        this.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        this.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        b0 = b[4];\r\n        b1 = b[5];\r\n        b2 = b[6];\r\n        b3 = b[7];\r\n        this.m10 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        this.m11 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        this.m12 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        this.m13 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        b0 = b[8];\r\n        b1 = b[9];\r\n        b2 = b[10];\r\n        b3 = b[11];\r\n        this.m20 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        this.m21 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        this.m22 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        this.m23 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        b0 = b[12];\r\n        b1 = b[13];\r\n        b2 = b[14];\r\n        b3 = b[15];\r\n        this.m30 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        this.m31 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        this.m32 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        this.m33 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        return this;\r\n    }\r\n    /**\r\n     * Post multiplies two Mat4s in place explicitly not using SIMD.\r\n     *\r\n     * @param other - The other Mat4 to multiply with.\r\n     * @return - Returns the result as a new Mat4.\r\n     */\r\n    postMultiplyInPlace(other) {\r\n        const a = other.asArray();\r\n        const a00 = a[0];\r\n        const a01 = a[1];\r\n        const a02 = a[2];\r\n        const a03 = a[3];\r\n        const a10 = a[4];\r\n        const a11 = a[5];\r\n        const a12 = a[6];\r\n        const a13 = a[7];\r\n        const a20 = a[8];\r\n        const a21 = a[9];\r\n        const a22 = a[10];\r\n        const a23 = a[11];\r\n        const a30 = a[12];\r\n        const a31 = a[13];\r\n        const a32 = a[14];\r\n        const a33 = a[15];\r\n        // Cache only the current line of the second matrix\r\n        const b = this.asArray();\r\n        let b0 = b[0];\r\n        let b1 = b[1];\r\n        let b2 = b[2];\r\n        let b3 = b[3];\r\n        this.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        this.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        this.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        this.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        b0 = b[4];\r\n        b1 = b[5];\r\n        b2 = b[6];\r\n        b3 = b[7];\r\n        this.m10 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        this.m11 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        this.m12 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        this.m13 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        b0 = b[8];\r\n        b1 = b[9];\r\n        b2 = b[10];\r\n        b3 = b[11];\r\n        this.m20 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        this.m21 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        this.m22 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        this.m23 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        b0 = b[12];\r\n        b1 = b[13];\r\n        b2 = b[14];\r\n        b3 = b[15];\r\n        this.m30 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        this.m31 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        this.m32 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        this.m33 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        return this;\r\n    }\r\n    /**\r\n     * Translate a Mat4 by the given vector not using SIMD.\r\n     *\r\n     * @param v3 - The given vector to translate along.\r\n     * @return - The return value.\r\n     */\r\n    translateInPlace(v3) {\r\n        const a = this.__data;\r\n        const x = v3.x;\r\n        const y = v3.y;\r\n        const z = v3.z;\r\n        a[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n        a[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n        a[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n        a[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n        return this;\r\n    }\r\n    /**\r\n     * Generates a look-at matrix with the given position, focal point, and up axis.\r\n     *\r\n     * @param pos - Position of the viewer.\r\n     * @param target - Point the viewer is looking at.\r\n     * @param up - Vec3 pointing up.\r\n     */\r\n    setLookAt(pos, target, up) {\r\n        const zAxis = pos.subtract(target);\r\n        const zLen = zAxis.length();\r\n        if (zLen < Number.EPSILON) {\r\n            this.setIdentity();\r\n            return;\r\n        }\r\n        zAxis.scaleInPlace(1.0 / zLen);\r\n        const xAxis = up.cross(zAxis);\r\n        const xLen = xAxis.length();\r\n        if (xLen > Number.EPSILON)\r\n            xAxis.scaleInPlace(1.0 / xLen);\r\n        const yAxis = zAxis.cross(xAxis);\r\n        const yLen = yAxis.length();\r\n        if (yLen > Number.EPSILON)\r\n            yAxis.scaleInPlace(1.0 / yLen);\r\n        /* eslint-disable prettier/prettier*/\r\n        this.set(xAxis.x, xAxis.y, xAxis.z, 0, yAxis.x, yAxis.y, yAxis.z, 0, zAxis.x, zAxis.y, zAxis.z, 0, pos.x, pos.y, pos.z, 1);\r\n        /* eslint-enable prettier/prettier*/\r\n    }\r\n    /**\r\n     * Creates a matrix from a given angle around a given axis.\r\n     * This is equivalent to (but much faster than):\r\n     *\r\n     *     mat4.identity(dest);\r\n     *     mat4.rotate(dest, dest, rad, axis);\r\n     *\r\n     * @param axis - The axis to rotate around.\r\n     * @param rad - The angle to rotate the matrix by.\r\n     * @return - The return value.\r\n     */\r\n    setRotation(axis, rad) {\r\n        const len = axis.length();\r\n        if (Math.abs(len) < Number.EPSILON) {\r\n            return null;\r\n        }\r\n        const x = axis.x / len;\r\n        const y = axis.y / len;\r\n        const z = axis.z / len;\r\n        const s = Math.sin(rad);\r\n        const c = Math.cos(rad);\r\n        const t = 1 - c;\r\n        // Perform rotation-specific matrix multiplication\r\n        const a = this.__data;\r\n        a[0] = x * x * t + c;\r\n        a[1] = y * x * t + z * s;\r\n        a[2] = z * x * t - y * s;\r\n        a[3] = 0;\r\n        a[4] = x * y * t - z * s;\r\n        a[5] = y * y * t + c;\r\n        a[6] = z * y * t + x * s;\r\n        a[7] = 0;\r\n        a[8] = x * z * t + y * s;\r\n        a[9] = y * z * t - x * s;\r\n        a[10] = z * z * t + c;\r\n        a[11] = 0;\r\n        a[12] = 0;\r\n        a[13] = 0;\r\n        a[14] = 0;\r\n        a[15] = 1;\r\n        return this;\r\n    }\r\n    /**\r\n     * Creates a matrix from the given angle around the X axis.\r\n     * This is equivalent to (but much faster than):\r\n     *\r\n     *     mat4.identity(dest);\r\n     *     mat4.rotateX(dest, dest, rad);\r\n     *\r\n     * @param rad - The angle to rotate the matrix by.\r\n     * @return - The return value.\r\n     */\r\n    setXRotation(rad) {\r\n        const s = Math.sin(rad);\r\n        const c = Math.cos(rad);\r\n        // Perform axis-specific matrix multiplication\r\n        const a = this.__data;\r\n        /* eslint-disable prettier/prettier*/\r\n        a[0] = 1;\r\n        a[1] = 0;\r\n        a[2] = 0;\r\n        a[3] = 0;\r\n        a[4] = 0;\r\n        a[5] = c;\r\n        a[6] = s;\r\n        a[7] = 0;\r\n        a[8] = 0;\r\n        a[9] = -s;\r\n        a[10] = c;\r\n        a[11] = 0;\r\n        a[12] = 0;\r\n        a[13] = 0;\r\n        a[14] = 0;\r\n        a[15] = 1;\r\n        /* eslint-enable prettier/prettier*/\r\n        return this;\r\n    }\r\n    /**\r\n     * Creates a matrix from the given angle around the Y axis.\r\n     * This is equivalent to (but much faster than):\r\n     *\r\n     *     mat4.identity(dest);\r\n     *     mat4.rotateY(dest, dest, rad);\r\n     *\r\n     * @param rad - The angle to rotate the matrix by.\r\n     * @return - The return value.\r\n     */\r\n    setYRotation(rad) {\r\n        const s = Math.sin(rad);\r\n        const c = Math.cos(rad);\r\n        // Perform axis-specific matrix multiplication\r\n        const a = this.__data;\r\n        /* eslint-disable prettier/prettier*/\r\n        a[0] = c;\r\n        a[1] = 0;\r\n        a[2] = -s;\r\n        a[3] = 0;\r\n        a[4] = 0;\r\n        a[5] = 1;\r\n        a[6] = 0;\r\n        a[7] = 0;\r\n        a[8] = s;\r\n        a[9] = 0;\r\n        a[10] = c;\r\n        a[11] = 0;\r\n        a[12] = 0;\r\n        a[13] = 0;\r\n        a[14] = 0;\r\n        a[15] = 1;\r\n        /* eslint-enable prettier/prettier*/\r\n        return this;\r\n    }\r\n    /**\r\n     * Creates a matrix from the given angle around the Z axis.\r\n     * This is equivalent to (but much faster than):\r\n     *\r\n     *     mat4.identity(dest);\r\n     *     mat4.rotateZ(dest, dest, rad);\r\n     *\r\n     * @param rad - The angle to rotate the matrix by.\r\n     * @return - The return value.\r\n     */\r\n    setZRotation(rad) {\r\n        const s = Math.sin(rad);\r\n        const c = Math.cos(rad);\r\n        // Perform axis-specific matrix multiplication\r\n        const a = this.__data;\r\n        /* eslint-disable prettier/prettier*/\r\n        a[0] = c;\r\n        a[1] = s;\r\n        a[2] = 0;\r\n        a[3] = 0;\r\n        a[4] = -s;\r\n        a[5] = c;\r\n        a[6] = 0;\r\n        a[7] = 0;\r\n        a[8] = 0;\r\n        a[9] = 0;\r\n        a[10] = 1;\r\n        a[11] = 0;\r\n        a[12] = 0;\r\n        a[13] = 0;\r\n        a[14] = 0;\r\n        a[15] = 1;\r\n        /* eslint-enable prettier/prettier*/\r\n        return this;\r\n    }\r\n    /**\r\n     * Transforms the Vec4 with a Mat4.\r\n     *\r\n     * @param vec - The vec value.\r\n     * @return - Return the result as a new Vec4.\r\n     */\r\n    transformVec4(vec) {\r\n        const a = this.__data;\r\n        const x = vec.x;\r\n        const y = vec.y;\r\n        const z = vec.z;\r\n        const w = vec.t;\r\n        return new Vec4(a[0] * x + a[4] * y + a[8] * z + a[12] * w, a[1] * x + a[5] * y + a[9] * z + a[13] * w, a[2] * x + a[6] * y + a[10] * z + a[14] * w, a[3] * x + a[7] * y + a[11] * z + a[15] * w);\r\n    }\r\n    /**\r\n     * Transforms the Vec3 with a Mat4.\r\n     *\r\n     * @param vec - The vec value.\r\n     * @return - Return the result as a new Vec3.\r\n     */\r\n    transformVec3(vec) {\r\n        const a = this.__data;\r\n        const x = vec.x;\r\n        const y = vec.y;\r\n        const z = vec.z;\r\n        return new Vec3(a[0] * x + a[4] * y + a[8] * z + a[12], a[1] * x + a[5] * y + a[9] * z + a[13], a[2] * x + a[6] * y + a[10] * z + a[14]);\r\n    }\r\n    /**\r\n     * Rotates a given `Vec3` and the result is returned as a new `Vec3`, applying only the top left components of the matrix, so not applying any translation.\r\n     * @param vec - The vec value.\r\n     * @return - Return the result as a new Vec3.\r\n     */\r\n    rotateVec3(vec) {\r\n        const a = this.__data;\r\n        const x = vec.x;\r\n        const y = vec.y;\r\n        const z = vec.z;\r\n        return new Vec3(a[0] * x + a[4] * y + a[8] * z, a[1] * x + a[5] * y + a[9] * z, a[2] * x + a[6] * y + a[10] * z);\r\n    }\r\n    /**\r\n     * Set the perspective from a Mat4.\r\n     *\r\n     * @param fovY - The fovY value.\r\n     * @param aspect - The aspect value.\r\n     * @param near - The near value.\r\n     * @param far - The far value.\r\n     */\r\n    setPerspectiveMatrix(fovy, aspect, near, far) {\r\n        const f = Math.tan(Math.PI * 0.5 - 0.5 * fovy);\r\n        const rangeInv = 1.0 / (near - far);\r\n        /* eslint-disable prettier/prettier*/\r\n        this.set(f / aspect, 0, 0, 0, 0, f, 0, 0, 0, 0, (near + far) * rangeInv, -1, 0, 0, near * far * rangeInv * 2, 0);\r\n        /* eslint-enable prettier/prettier*/\r\n    }\r\n    /**\r\n     * Calculates the orthographic matrix and sets the state of the Mat4 class\r\n     *\r\n     * @param left - The left value.\r\n     * @param right - The right value.\r\n     * @param bottom - The bottom value.\r\n     * @param top - The top value.\r\n     * @param near - The near value.\r\n     * @param far - The far value.\r\n     */\r\n    setOrthographicMatrix(left, right, bottom, top, near, far) {\r\n        const lr = 1 / (left - right);\r\n        const bt = 1 / (bottom - top);\r\n        const nf = 1 / (near - far);\r\n        /* eslint-disable prettier/prettier*/\r\n        this.set(-2 * lr, 0, 0, 0, 0, -2 * bt, 0, 0, 0, 0, 2 * nf, 0, (left + right) * lr, (top + bottom) * bt, (far + near) * nf, 1);\r\n        /* eslint-enable prettier/prettier*/\r\n    }\r\n    /**\r\n     * Set the Matrix to be a scale matrix.\r\n     *\r\n     * @param x - The x value.\r\n     * @param y - The y value.\r\n     * @param z - The z value.\r\n     */\r\n    setScale(x, y, z) {\r\n        /* eslint-disable prettier/prettier*/\r\n        if (x instanceof Vec3) {\r\n            this.set(x.x, 0, 0, 0, 0, x.y, 0, 0, 0, 0, x.z, 0, 0, 0, 0, 1);\r\n        }\r\n        else {\r\n            this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\r\n        }\r\n        /* eslint-enable prettier/prettier*/\r\n    }\r\n    /**\r\n     * Transforms a 3x4 matrix into a 4x4 matrix and set the result to the Math4 state.\r\n     *\r\n     * @param m3x4 - The m3x4 value.\r\n     */\r\n    setFromMat3x4Array(m3x4) {\r\n        /* eslint-disable prettier/prettier*/\r\n        this.set(m3x4[0], m3x4[1], m3x4[2], 0, m3x4[3], m3x4[4], m3x4[5], 0, m3x4[6], m3x4[7], m3x4[8], 0, m3x4[9], m3x4[10], m3x4[11], 1);\r\n        /* eslint-enable prettier/prettier*/\r\n    }\r\n    /**\r\n     * Clones this Mat4 returning a new instance.\r\n     *\r\n     * @return - Returns a new Mat4.\r\n     */\r\n    clone() {\r\n        return new Mat4(this.__data[0], this.__data[1], this.__data[2], this.__data[3], this.__data[4], this.__data[5], this.__data[6], this.__data[7], this.__data[8], this.__data[9], this.__data[10], this.__data[11], this.__data[12], this.__data[13], this.__data[14], this.__data[15]);\r\n    }\r\n    // ///////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Converts this Vec3 to a string in JSON format.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    toString() {\r\n        // eslint-disable-next-line new-cap\r\n        return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());\r\n    }\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @return {Float32Array} - The json object.\r\n     */\r\n    toJSON() {\r\n        return this.__data;\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param json - The json param.\r\n     */\r\n    fromJSON(json) {\r\n        this.__data = new Float32Array(json);\r\n    }\r\n    /**\r\n     * Loads the state of the value from a binary reader.\r\n     *\r\n     * @param reader - The reader value.\r\n     */\r\n    readBinary(reader) {\r\n        this.__data = reader.loadFloat32Array(16);\r\n    }\r\n    /**\r\n     * Returns current Math type data as array. Often used to pass types to the GPU.\r\n     *\r\n     * @return - Returns the result as an array.\r\n     */\r\n    asArray() {\r\n        return this.__data;\r\n    }\r\n}\r\nexport { Mat4 };\r\n//# sourceMappingURL=Mat4.js.map","/* eslint-disable no-unused-vars */\r\nimport { Vec3 } from './Vec3';\r\nimport { Mat3 } from './Mat3';\r\nimport { Mat4 } from './Mat4';\r\nimport { EulerAngles } from './EulerAngles';\r\nimport { StringFunctions } from '../Utilities/StringFunctions';\r\n/**\r\n * Class representing a quaternion. Quaternions are used to represent 3 dimensional rotations.\r\n *\r\n * While Quaternions are difficult to understand they have important mathematical properties that make them very useful in 3d engines.\r\n * They can be directly multiplied together in the same was as matrices.\r\n * They can be interpolated from one value to another while maintaining constant angular velocity.\r\n * They can be converted to other more easily understood representations such as EulerAngles or Matrices.\r\n *\r\n\r\n */\r\nclass Quat {\r\n    /**\r\n     * Creates a quaternion.\r\n     *\r\n     * @param x - The angle of the x axis. Default is 0.\r\n     * @param y - The angle of the y axis. Default is 0.\r\n     * @param z - The angle of the z axis. Default is 0.\r\n     * @param w - The w value. Default is 1.\r\n     */\r\n    constructor(x = 0, y = 0, z = 0, w = 1) {\r\n        if (x instanceof Float32Array) {\r\n            this.__data = x;\r\n        }\r\n        else if (x instanceof ArrayBuffer) {\r\n            console.warn(`deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))`);\r\n            const buffer = x;\r\n            const byteOffset = y;\r\n            this.__data = new Float32Array(buffer, byteOffset, 4);\r\n        }\r\n        else {\r\n            this.__data = new Float32Array(4);\r\n            if (typeof x === 'object') {\r\n                this.__data[0] = 0;\r\n                this.__data[1] = 0;\r\n                this.__data[2] = 0;\r\n                this.__data[3] = 1;\r\n                this.fromJSON(x);\r\n                //  for (const key in x) {\r\n                //  if (Array.isArray(x[key])) this[key].call(this, ...x[key])\r\n                //  else this[key].call(this, x[key])\r\n                //}\r\n            }\r\n            else {\r\n                this.__data[0] = x;\r\n                this.__data[1] = y;\r\n                this.__data[2] = z;\r\n                this.__data[3] = w;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Getter for `x` axis rotation.\r\n     *\r\n     * @return - Returns the x axis rotation.\r\n     */\r\n    get x() {\r\n        return this.__data[0];\r\n    }\r\n    /**\r\n     * Setter for `x` axis rotation.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set x(val) {\r\n        this.__data[0] = val;\r\n    }\r\n    /**\r\n     * Getter for `y` axis rotation.\r\n     *\r\n     * @return - Returns the y axis rotation.\r\n     */\r\n    get y() {\r\n        return this.__data[1];\r\n    }\r\n    /**\r\n     * Setter for `y` axis rotation.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set y(val) {\r\n        this.__data[1] = val;\r\n    }\r\n    /**\r\n     * Getter for `z` axis rotation.\r\n     *\r\n     * @return - Returns the z axis rotation.\r\n     */\r\n    get z() {\r\n        return this.__data[2];\r\n    }\r\n    /**\r\n     * Setter for `z` axis rotation.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    set z(val) {\r\n        this.__data[2] = val;\r\n    }\r\n    /**\r\n     * Getter for `w` value.\r\n     *\r\n     * @return - Returns the w value.\r\n     */\r\n    get w() {\r\n        return this.__data[3];\r\n    }\r\n    /**\r\n     * Setter for `w`.\r\n     * @param val - The val param.\r\n     */\r\n    set w(val) {\r\n        this.__data[3] = val;\r\n    }\r\n    /**\r\n     * Setter from scalar components.\r\n     *\r\n     * @param x - The x axis rotation.\r\n     * @param y  - The y axis rotation.\r\n     * @param z  - The z axis rotation.\r\n     * @param w  - The w value.\r\n     */\r\n    set(x, y, z, w) {\r\n        this.__data[0] = x;\r\n        this.__data[1] = y;\r\n        this.__data[2] = z;\r\n        this.__data[3] = w;\r\n    }\r\n    /**\r\n     * Sets the state of the Quat class using a Float32Array.\r\n     *\r\n     * @param float32Array - The float32Array value.\r\n     */\r\n    setDataArray(float32Array) {\r\n        this.__data = float32Array; // TODO: added cast\r\n    }\r\n    /**\r\n     * Setter from another vector.\r\n     *\r\n     * @param other - The other vector to set from.\r\n     */\r\n    setFromOther(other) {\r\n        this.__data[0] = other.x;\r\n        this.__data[1] = other.y;\r\n        this.__data[2] = other.z;\r\n        this.__data[3] = other.w;\r\n    }\r\n    /**\r\n     * Set this Quat from a euler rotation.\r\n     *\r\n     * @param eulerAngles - The euler angles rotation.\r\n     */\r\n    setFromEulerAngles(eulerAngles) {\r\n        const ordered = new Vec3();\r\n        switch (eulerAngles.order) {\r\n            case 0:\r\n                // 'XYZ'\r\n                ordered.set(eulerAngles.x, -eulerAngles.y, eulerAngles.z);\r\n                break;\r\n            case 1:\r\n                // 'YZX'\r\n                ordered.set(eulerAngles.y, -eulerAngles.z, eulerAngles.x);\r\n                break;\r\n            case 2:\r\n                // 'ZXY'\r\n                ordered.set(eulerAngles.z, -eulerAngles.x, eulerAngles.y);\r\n                break;\r\n            case 3:\r\n                // 'XZY'\r\n                ordered.set(eulerAngles.x, eulerAngles.z, eulerAngles.y);\r\n                break;\r\n            case 4:\r\n                // 'ZYX'\r\n                ordered.set(eulerAngles.z, eulerAngles.y, eulerAngles.x);\r\n                break;\r\n            case 5:\r\n                // 'YXZ'\r\n                ordered.set(eulerAngles.y, eulerAngles.x, eulerAngles.z);\r\n                break;\r\n            default:\r\n                throw new Error(`Invalid EulerAngles order: ${eulerAngles.order}`);\r\n        }\r\n        const ti = ordered.x * 0.5;\r\n        const tj = ordered.y * 0.5;\r\n        const tk = ordered.z * 0.5;\r\n        const ci = Math.cos(ti);\r\n        const cj = Math.cos(tj);\r\n        const ck = Math.cos(tk);\r\n        const si = Math.sin(ti);\r\n        const sj = Math.sin(tj);\r\n        const sk = Math.sin(tk);\r\n        const cc = ci * ck;\r\n        const cs = ci * sk;\r\n        const sc = si * ck;\r\n        const ss = si * sk;\r\n        const ai = cj * sc - sj * cs;\r\n        const aj = cj * ss + sj * cc;\r\n        const ak = cj * cs - sj * sc;\r\n        this.w = cj * cc + sj * ss;\r\n        switch (eulerAngles.order) {\r\n            case 0:\r\n                // ' XYZ'\r\n                this.x = ai;\r\n                this.y = -aj;\r\n                this.z = ak;\r\n                break;\r\n            case 1:\r\n                // 'YZX'\r\n                this.x = ak;\r\n                this.y = ai;\r\n                this.z = -aj;\r\n                break;\r\n            case 2:\r\n                // 'ZXY'\r\n                this.x = -aj;\r\n                this.y = ak;\r\n                this.z = ai;\r\n                break;\r\n            case 3:\r\n                // 'XZY'\r\n                this.x = ai;\r\n                this.y = ak;\r\n                this.z = aj;\r\n                break;\r\n            case 4:\r\n                // 'ZYX'\r\n                this.x = ak;\r\n                this.y = aj;\r\n                this.z = ai;\r\n                break;\r\n            case 5:\r\n                // 'YXZ'\r\n                this.x = aj;\r\n                this.y = ai;\r\n                this.z = ak;\r\n                break;\r\n            default:\r\n                throw new Error(`Invalid EulerAngles order: ${eulerAngles.order}`);\r\n        }\r\n    }\r\n    /**\r\n     * Converts Quat to an EulerAngles\r\n     *\r\n     * @param rotationOrder - The order in which the rotations are applied.\r\n     * @return - The return value.\r\n     */\r\n    toEulerAngles(rotationOrder) {\r\n        const ordered = new Vec3();\r\n        switch (rotationOrder) {\r\n            case 0:\r\n                /* ' XYZ' */\r\n                ordered.set(this.z, this.x, this.y);\r\n                break;\r\n            case 1:\r\n                /* 'YZX' */\r\n                ordered.set(this.x, this.y, this.z);\r\n                break;\r\n            case 2:\r\n                /* 'ZXY' */\r\n                ordered.set(this.y, this.z, this.x);\r\n                break;\r\n            case 3:\r\n                /* 'XZY' */\r\n                ordered.set(this.y, -this.x, this.z);\r\n                break;\r\n            case 4:\r\n                /* 'ZYX' */\r\n                ordered.set(this.x, -this.z, this.y);\r\n                break;\r\n            case 5:\r\n                /* 'YXZ' */\r\n                ordered.set(this.z, -this.y, this.x);\r\n                break;\r\n            default:\r\n                throw new Error('Invalid rotation order:' + rotationOrder);\r\n        }\r\n        const euler = new Vec3();\r\n        const test = ordered.x * ordered.y + ordered.z * this.w;\r\n        if (test > 0.49999) {\r\n            // singularity at north pole\r\n            euler.y = 2.0 * Math.atan2(ordered.x, this.w);\r\n            euler.z = Math.PI * 0.5;\r\n            euler.x = 0.0;\r\n        }\r\n        else if (test < -0.49999) {\r\n            // singularity at south pole\r\n            euler.y = -2.0 * Math.atan2(ordered.x, this.w);\r\n            euler.z = Math.PI * -0.5;\r\n            euler.x = 0.0;\r\n        }\r\n        else {\r\n            const sqx = ordered.x * ordered.x;\r\n            const sqy = ordered.y * ordered.y;\r\n            const sqz = ordered.z * ordered.z;\r\n            euler.y = Math.atan2(2.0 * ordered.y * this.w - 2.0 * ordered.x * ordered.z, 1.0 - 2.0 * sqy - 2.0 * sqz);\r\n            euler.z = Math.asin(2.0 * test);\r\n            euler.x = Math.atan2(2.0 * ordered.x * this.w - 2.0 * ordered.y * ordered.z, 1.0 - 2.0 * sqx - 2.0 * sqz);\r\n        }\r\n        switch (rotationOrder) {\r\n            case 0:\r\n                /* ' XYZ' */\r\n                return new EulerAngles(euler.y, euler.z, euler.x, rotationOrder);\r\n            case 1:\r\n                /* 'YZX' */\r\n                return new EulerAngles(euler.x, euler.y, euler.z, rotationOrder);\r\n            case 2:\r\n                /* 'ZXY' */\r\n                return new EulerAngles(euler.z, euler.x, euler.y, rotationOrder);\r\n            case 3:\r\n                /* 'XZY' */\r\n                return new EulerAngles(-euler.y, euler.x, euler.z, rotationOrder);\r\n            case 4:\r\n                /* 'ZYX' */\r\n                return new EulerAngles(euler.x, euler.z, -euler.y, rotationOrder);\r\n            case 5:\r\n                /* 'YXZ' */\r\n                return new EulerAngles(euler.z, -euler.y, euler.x, rotationOrder);\r\n        }\r\n    }\r\n    /**\r\n     * Set this Quat to a rotation defined by an axis and an angle (in radians).\r\n     *\r\n     * @param axis - The axis around which to rotate.\r\n     * @param angle - The angle to rotate\r\n     */\r\n    setFromAxisAndAngle(axis, angle) {\r\n        const halfAngle = angle / 2.0;\r\n        const vec = axis.normalize().scale(Math.sin(halfAngle));\r\n        this.set(vec.x, vec.y, vec.z, Math.cos(halfAngle));\r\n    }\r\n    /**\r\n     * Sets the state of the Quat to look in a particular direction along the z axis.\r\n     * > The camera looks down the negative z axis, so to set a rotation value\r\n     * > for the camera, remember to negate the direction vector.\r\n     *\r\n     * @param dir - The direction value.\r\n     * @param up - The up vector.\r\n     */\r\n    setFromDirectionAndUpvector(dir, up) {\r\n        const mat3 = new Mat3();\r\n        mat3.setFromDirectionAndUpvector(dir, up);\r\n        this.setFromMat3(mat3);\r\n    }\r\n    /**\r\n     * Sets the state of the `Quat` from two `Vec3`. The quaternion would then represent the rotation from v0 to v1 in 3d space.\r\n     *\r\n     * @param v0 - The v0 unit vector.\r\n     * @param v1 - The v1 unit vector.\r\n     */\r\n    setFrom2Vectors(v0, v1) {\r\n        const c = v0.cross(v1);\r\n        const d = v0.dot(v1);\r\n        const s = Math.sqrt((1 + d) * 2);\r\n        // this.set( s/2, c.x / s, c.y / s, c.z / s );\r\n        this.set(c.x / s, c.y / s, c.z / s, s / 2);\r\n        this.normalizeInPlace();\r\n    }\r\n    /**\r\n     * Set the Quat from a Mat3.\r\n     *\r\n     * @param mat3 - The mat3 value.\r\n     */\r\n    setFromMat3(mat3) {\r\n        // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n        // article \"Quaternion Calculus and Fast Animation\".\r\n        const data = mat3.asArray();\r\n        const fTrace = data[0] + data[4] + data[8];\r\n        let fRoot;\r\n        if (fTrace > 0.0) {\r\n            // |w| > 1/2, may as well choose w > 1/2\r\n            fRoot = Math.sqrt(fTrace + 1); // 2w\r\n            this.__data[3] = 0.5 * fRoot;\r\n            fRoot = 0.5 / fRoot; // 1/(4w)\r\n            this.__data[0] = (data[5] - data[7]) * fRoot;\r\n            this.__data[1] = (data[6] - data[2]) * fRoot;\r\n            this.__data[2] = (data[1] - data[3]) * fRoot;\r\n        }\r\n        else {\r\n            // |w| <= 1/2\r\n            let i = 0;\r\n            if (data[4] > data[0])\r\n                i = 1;\r\n            if (data[8] > data[i * 3 + i])\r\n                i = 2;\r\n            const j = (i + 1) % 3;\r\n            const k = (i + 2) % 3;\r\n            fRoot = Math.sqrt(data[i * 3 + i] - data[j * 3 + j] - data[k * 3 + k] + 1.0);\r\n            this.__data[i] = 0.5 * fRoot;\r\n            fRoot = 0.5 / fRoot;\r\n            this.__data[3] = (data[j * 3 + k] - data[k * 3 + j]) * fRoot;\r\n            this.__data[j] = (data[j * 3 + i] + data[i * 3 + j]) * fRoot;\r\n            this.__data[k] = (data[k * 3 + i] + data[i * 3 + k]) * fRoot;\r\n        }\r\n        this.normalizeInPlace();\r\n    }\r\n    /**\r\n     * Set the Quat from a Mat4.\r\n     *\r\n     * @param mat4 - The mat4 value.\r\n     */\r\n    setFromMat4(mat4) {\r\n        // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n        // article \"Quaternion Calculus and Fast Animation\".\r\n        const data = mat4.asArray();\r\n        const fTrace = data[0] + data[5] + data[10];\r\n        let fRoot;\r\n        if (fTrace > 0.0) {\r\n            // |w| > 1/2, may as well choose w > 1/2\r\n            fRoot = Math.sqrt(fTrace + 1); // 2w\r\n            this.__data[3] = 0.5 * fRoot;\r\n            fRoot = 0.5 / fRoot; // 1/(4w)\r\n            this.__data[0] = (data[6] - data[9]) * fRoot;\r\n            this.__data[1] = (data[8] - data[2]) * fRoot;\r\n            this.__data[2] = (data[1] - data[4]) * fRoot;\r\n        }\r\n        else {\r\n            // |w| <= 1/2\r\n            let i = 0;\r\n            if (data[5] > data[0])\r\n                i = 1;\r\n            if (data[10] > data[i * 4 + i])\r\n                i = 2;\r\n            const j = (i + 1) % 3;\r\n            const k = (i + 2) % 3;\r\n            fRoot = Math.sqrt(data[i * 4 + i] - data[j * 4 + j] - data[k * 4 + k] + 1.0);\r\n            this.__data[i] = 0.5 * fRoot;\r\n            fRoot = 0.5 / fRoot;\r\n            this.__data[3] = (data[j * 4 + k] - data[k * 4 + j]) * fRoot;\r\n            this.__data[j] = (data[j * 4 + i] + data[i * 4 + j]) * fRoot;\r\n            this.__data[k] = (data[k * 4 + i] + data[i * 4 + k]) * fRoot;\r\n        }\r\n        this.normalizeInPlace();\r\n    }\r\n    /**\r\n     * Checks if the angle of the Quat is less that ` Number.EPSILON`\r\n     *\r\n     * @return - Returns true or false.\r\n     */\r\n    isIdentity() {\r\n        return this.getAngle() < Number.EPSILON;\r\n    }\r\n    /**\r\n     * Return the angle of the Quat.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getAngle() {\r\n        return Math.acos(this.w) * 2.0;\r\n    }\r\n    /**\r\n     * Checks if this Quat contains the same values as the other Quat.\r\n     *\r\n     * @param other - The other Quat to compare with.\r\n     * @return - Returns `true` if are the same Vector, otherwise, `false`.\r\n     */\r\n    isEqual(other) {\r\n        return this.x == other.x && this.y == other.y && this.z == other.z && this.w == other.w;\r\n    }\r\n    /**\r\n     * Returns true if this Quat is NOT exactly the same other.\r\n     *\r\n     * @param other - The other Quat to compare with.\r\n     * @return - Returns true or false.\r\n     */\r\n    notEquals(other) {\r\n        return this.x != other.x && this.y != other.y && this.z != other.z && this.w != other.w;\r\n    }\r\n    /**\r\n     * Returns true if this Quat is approximately the same as other\r\n     *\r\n     * @param other - The other Quat to compare with.\r\n     * @param precision - The precision to which the values must match.\r\n     * @return - Returns true or false.\r\n     */\r\n    approxEqual(other, precision = Number.EPSILON) {\r\n        return (Math.abs(this.x - other.x) < precision &&\r\n            Math.abs(this.y - other.y) < precision &&\r\n            Math.abs(this.z - other.z) < precision &&\r\n            Math.abs(this.w - other.w) < precision);\r\n    }\r\n    /**\r\n     * Adds other to this Quat and return the result as a new Quat.\r\n     *\r\n     * @param other - The other Quat to add.\r\n     * @return - Returns a new Quat.\r\n     */\r\n    add(other) {\r\n        return new Quat(this.x + other.x, this.y + other.y, this.z + other.z, this.w + other.w);\r\n    }\r\n    /**\r\n     * Adds other to this Quat.\r\n     *\r\n     * @param other - The other Quat to add.\r\n     */\r\n    addInPlace(other) {\r\n        this.x += other.x;\r\n        this.y += other.y;\r\n        this.z += other.z;\r\n        this.w += other.w;\r\n    }\r\n    /**\r\n     * Subtracts other from this Quat and returns the result as a new Quat.\r\n     *\r\n     * @param other - The other Quat to subtract.\r\n     * @return - Returns a new Quat.\r\n     */\r\n    subtract(other) {\r\n        return new Quat(this.x - other.x, this.y - other.y, this.z - other.z, this.w - other.w);\r\n    }\r\n    /**\r\n     * Scales this Quat by scalar and returns the result as a new Quat.\r\n     *\r\n     * @param scalar - The scalar value.\r\n     * @return - Returns a new Vec3.\r\n     */\r\n    scale(scalar) {\r\n        return new Quat(this.x * scalar, this.y * scalar, this.z * scalar, this.w * scalar);\r\n    }\r\n    /**\r\n     * Scales this Quat by scalar.\r\n     *\r\n     * @param scalar - The scalar value.\r\n     */\r\n    scaleInPlace(scalar) {\r\n        this.x *= scalar;\r\n        this.y *= scalar;\r\n        this.z *= scalar;\r\n        this.w *= scalar;\r\n    }\r\n    /**\r\n     * Calculates the length of this Quat.\r\n     *\r\n     * @return - Returns the length.\r\n     */\r\n    length() {\r\n        const x = this.__data[0];\r\n        const y = this.__data[1];\r\n        const z = this.__data[2];\r\n        const w = this.__data[3];\r\n        return Math.sqrt(x * x + y * y + z * z + w * w);\r\n    }\r\n    /**\r\n     * Calculates the squared length of this Quat.\r\n     *\r\n     * @return - Returns the length.\r\n     */\r\n    lengthSquared() {\r\n        const x = this.__data[0];\r\n        const y = this.__data[1];\r\n        const z = this.__data[2];\r\n        const w = this.__data[3];\r\n        return x * x + y * y + z * z + w * w;\r\n    }\r\n    /**\r\n     * Normalizes the Quat and returns it as a new Quat.\r\n     *\r\n     * @return - Returns the Quat normalized.\r\n     */\r\n    normalize() {\r\n        const x = this.__data[0];\r\n        const y = this.__data[1];\r\n        const z = this.__data[2];\r\n        const w = this.__data[3];\r\n        let len = x * x + y * y + z * z + w * w;\r\n        if (len < Number.EPSILON) {\r\n            return new Quat();\r\n        }\r\n        // TODO: evaluate use of glm_invsqrt here?\r\n        len = 1 / Math.sqrt(len);\r\n        return new Quat(x * len, y * len, z * len, w * len);\r\n    }\r\n    /**\r\n     * Normalizes the Quat, modifying its values in place.\r\n     */\r\n    normalizeInPlace() {\r\n        const x = this.__data[0];\r\n        const y = this.__data[1];\r\n        const z = this.__data[2];\r\n        const w = this.__data[3];\r\n        let len = x * x + y * y + z * z + w * w;\r\n        if (len < Number.EPSILON) {\r\n            return;\r\n        }\r\n        len = 1 / Math.sqrt(len);\r\n        this.set(x * len, y * len, z * len, w * len);\r\n    }\r\n    /**\r\n     * Calculates the dot product of this quat against another.\r\n     *\r\n     * @param other - The other Quat to compare with.\r\n     * @return - Returns the dot product.\r\n     */\r\n    dot(other) {\r\n        return this.x * other.x + this.y * other.y + this.z * other.z + this.w * other.w;\r\n    }\r\n    /**\r\n     * Calculates the cross product of two Quats and returns the result as a new Quat.\r\n     *\r\n     * @param other - The other Quat to calculate with.\r\n     * @return - Returns the cross product as a new Quat.\r\n     */\r\n    cross(other) {\r\n        const ax = this.x;\r\n        const ay = this.y;\r\n        const az = this.z;\r\n        const at = this.w;\r\n        const bx = other.x;\r\n        const by = other.y;\r\n        const bz = other.z;\r\n        const bt = other.w;\r\n        return new Quat(ay * bz - az * by, az * bt - at * bz, at * bx - ax * bt, ax * by - ay * bx);\r\n    }\r\n    /**\r\n     * Returns the rotational conjugate of this Quat.\r\n     * Conjugation represents the same rotation of the Quat but\r\n     * in the opposite direction around the rotational axis.\r\n     *\r\n     * @return - the return value.\r\n     */\r\n    conjugate() {\r\n        return new Quat(-this.x, -this.y, -this.z, this.w);\r\n    }\r\n    /**\r\n     * Return the inverse of the `Quat`\r\n     *\r\n     * @return - Returns a new Quat.\r\n     */\r\n    inverse() {\r\n        return this.conjugate();\r\n    }\r\n    /**\r\n     * Aligns this quaternion with another one ensuring that the delta between\r\n     * the Quat values is the shortest path over the hyper-sphere.\r\n     *\r\n     *  @param other - The other Quat to divide by.\r\n     */\r\n    alignWith(other) {\r\n        if (this.dot(other) < 0.0) {\r\n            this.set(-this.x, -this.y, -this.z, -this.w);\r\n        }\r\n    }\r\n    /**\r\n     * Multiplies two this quat by another returning the result as a new Quat.\r\n     *\r\n     * @param other - The other Quat to multiply.\r\n     * @return - Returns a new Quat.\r\n     */\r\n    multiply(other) {\r\n        const ax = this.__data[0];\r\n        const ay = this.__data[1];\r\n        const az = this.__data[2];\r\n        const aw = this.__data[3];\r\n        const bx = other.__data[0];\r\n        const by = other.__data[1];\r\n        const bz = other.__data[2];\r\n        const bw = other.__data[3];\r\n        return new Quat(ax * bw + aw * bx + ay * bz - az * by, ay * bw + aw * by + az * bx - ax * bz, az * bw + aw * bz + ax * by - ay * bx, aw * bw - ax * bx - ay * by - az * bz);\r\n    }\r\n    /**\r\n     * Multiplies this quat by another, modifying its values in place.\r\n     *\r\n     * @param other - The other Quat to multiply.\r\n     */\r\n    multiplyInPlace(other) {\r\n        const ax = this.__data[0];\r\n        const ay = this.__data[1];\r\n        const az = this.__data[2];\r\n        const aw = this.__data[3];\r\n        const bx = other.__data[0];\r\n        const by = other.__data[1];\r\n        const bz = other.__data[2];\r\n        const bw = other.__data[3];\r\n        this.set(ax * bw + aw * bx + ay * bz - az * by, ay * bw + aw * by + az * bx - ax * bz, az * bw + aw * bz + ax * by - ay * bx, aw * bw - ax * bx - ay * by - az * bz);\r\n    }\r\n    /**\r\n     * Rotates a vector by this quaternion.\r\n     * Don't forget to normalize the quaternion unless\r\n     * you want axial translation as well as rotation.\r\n     *\r\n     * @param vec3 - The vec3 value.\r\n     * @return - Returns a new Vec3.\r\n     */\r\n    rotateVec3(vec3) {\r\n        const vq = new Quat(vec3.x, vec3.y, vec3.z, 0.0);\r\n        const pq = this.multiply(vq).multiply(this.conjugate());\r\n        return new Vec3(pq.x, pq.y, pq.z);\r\n    }\r\n    /**\r\n     * Sets this quaternion to a rotation by the given angle about the X axis.\r\n     *\r\n     * @param rad - Angle (in radians) to rotate.\r\n     */\r\n    rotateX(rad) {\r\n        rad *= 0.5;\r\n        const ax = this.x;\r\n        const ay = this.y;\r\n        const az = this.z;\r\n        const aw = this.w;\r\n        const bx = Math.sin(rad);\r\n        const bw = Math.cos(rad);\r\n        this.x = ax * bw + aw * bx;\r\n        this.y = ay * bw + az * bx;\r\n        this.z = az * bw - ay * bx;\r\n        this.w = aw * bw - ax * bx;\r\n    }\r\n    /**\r\n     * Sets this quaternion to a rotation by the given angle about the Y axis.\r\n     *\r\n     * @param rad - Angle (in radians) to rotate.\r\n     */\r\n    rotateY(rad) {\r\n        rad *= 0.5;\r\n        const ax = this.x;\r\n        const ay = this.y;\r\n        const az = this.z;\r\n        const aw = this.w;\r\n        const by = Math.sin(rad);\r\n        const bw = Math.cos(rad);\r\n        this.x = ax * bw - az * by;\r\n        this.y = ay * bw + aw * by;\r\n        this.z = az * bw + ax * by;\r\n        this.w = aw * bw - ay * by;\r\n    }\r\n    /**\r\n     * Sets this quaternion to a rotation by the given angle about the Z axis.\r\n     *\r\n     * @param rad - Angle (in radians) to rotate.\r\n     */\r\n    rotateZ(rad) {\r\n        rad *= 0.5;\r\n        const ax = this.x;\r\n        const ay = this.y;\r\n        const az = this.z;\r\n        const aw = this.w;\r\n        const bz = Math.sin(rad);\r\n        const bw = Math.cos(rad);\r\n        this.x = ax * bw + ay * bz;\r\n        this.y = ay * bw - ax * bz;\r\n        this.z = az * bw + aw * bz;\r\n        this.w = aw * bw - az * bz;\r\n    }\r\n    /**\r\n     * Converts this Quat to a Mat3 (a 3x3 matrix).\r\n     *\r\n     * @return - TReturns a new Mat3.\r\n     */\r\n    toMat3() {\r\n        const x = this.x;\r\n        const y = this.y;\r\n        const z = this.z;\r\n        const w = this.w;\r\n        const x2 = x + x;\r\n        const y2 = y + y;\r\n        const z2 = z + z;\r\n        const xx = x * x2;\r\n        const yx = y * x2;\r\n        const yy = y * y2;\r\n        const zx = z * x2;\r\n        const zy = z * y2;\r\n        const zz = z * z2;\r\n        const wx = w * x2;\r\n        const wy = w * y2;\r\n        const wz = w * z2;\r\n        const mat3 = new Mat3();\r\n        mat3.m00 = 1 - yy - zz;\r\n        mat3.m10 = yx - wz;\r\n        mat3.m20 = zx + wy;\r\n        mat3.m01 = yx + wz;\r\n        mat3.m11 = 1 - xx - zz;\r\n        mat3.m21 = zy - wx;\r\n        mat3.m02 = zx - wy;\r\n        mat3.m12 = zy + wx;\r\n        mat3.m22 = 1 - xx - yy;\r\n        return mat3;\r\n    }\r\n    /**\r\n     * Calculates a Vec3 value aligned with the X axis of this quaternion.\r\n     *\r\n     * @return - The resulting Vec3 value\r\n     */\r\n    getXaxis() {\r\n        const xy = this.x * this.y;\r\n        const xz = this.x * this.z;\r\n        const yy = this.y * this.y;\r\n        const yw = this.y * this.w;\r\n        const zz = this.z * this.z;\r\n        const zw = this.z * this.w;\r\n        return new Vec3(1.0 - 2.0 * (zz + yy), 2.0 * (xy + zw), 2.0 * (xz - yw));\r\n    }\r\n    /**\r\n     * Calculates a Vec3 value aligned with the Y axis of this quaternion.\r\n     *\r\n     * @return - The resulting Vec3 value\r\n     */\r\n    getYaxis() {\r\n        const xx = this.x * this.x;\r\n        const xy = this.x * this.y;\r\n        const xw = this.x * this.w;\r\n        const yz = this.y * this.z;\r\n        const zz = this.z * this.z;\r\n        const zw = this.z * this.w;\r\n        return new Vec3(2.0 * (xy - zw), 1.0 - 2.0 * (zz + xx), 2.0 * (yz + xw));\r\n    }\r\n    /**\r\n     * Calculates a Vec3 value aligned with the Z axis of this quaternion.\r\n     *\r\n     * @return - The resulting Vec3 value\r\n     */\r\n    getZaxis() {\r\n        const xx = this.x * this.x;\r\n        const xz = this.x * this.z;\r\n        const xw = this.x * this.w;\r\n        const yy = this.y * this.y;\r\n        const yz = this.y * this.z;\r\n        const yw = this.y * this.w;\r\n        // const temp = new Vec3()\r\n        return new Vec3(2.0 * (yw + xz), 2.0 * (yz - xw), 1.0 - 2.0 * (yy + xx));\r\n    }\r\n    /**\r\n     * Reflects this quaternion according to the axis provided.\r\n     *\r\n     * @param axisIndex - An integer with value of 0 for the X axis, 1 for the Y axis, and 2 for the Z axis.\r\n     * @return - Returns a new Quat.\r\n     */\r\n    mirror(axisIndex) {\r\n        switch (axisIndex) {\r\n            case 0:\r\n                return new Quat(this.z, this.w, this.x, this.y);\r\n            case 1:\r\n                return new Quat(-this.w, this.z, this.y, -this.x);\r\n            case 2:\r\n                return new Quat(this.x, this.y, this.z, -this.w);\r\n            case 0:\r\n            default:\r\n                return new Quat(this.z, this.w, this.x, this.y);\r\n        }\r\n    }\r\n    /**\r\n     * Converts this Quat to a Mat4 (a 4x4 matrix).\r\n     *\r\n     * @return - Returns a new Mat4.\r\n     */\r\n    toMat4() {\r\n        const x = this.x;\r\n        const y = this.y;\r\n        const z = this.z;\r\n        const w = this.w;\r\n        const x2 = x + x;\r\n        const y2 = y + y;\r\n        const z2 = z + z;\r\n        const xx = x * x2;\r\n        const yx = y * x2;\r\n        const yy = y * y2;\r\n        const zx = z * x2;\r\n        const zy = z * y2;\r\n        const zz = z * z2;\r\n        const wx = w * x2;\r\n        const wy = w * y2;\r\n        const wz = w * z2;\r\n        // Set the columns\r\n        const mat4 = new Mat4();\r\n        mat4.m00 = 1 - yy - zz;\r\n        mat4.m10 = yx - wz;\r\n        mat4.m20 = zx + wy;\r\n        mat4.m01 = yx + wz;\r\n        mat4.m11 = 1 - xx - zz;\r\n        mat4.m21 = zy - wx;\r\n        mat4.m02 = zx - wy;\r\n        mat4.m12 = zy + wx;\r\n        mat4.m22 = 1 - xx - yy;\r\n        return mat4;\r\n    }\r\n    /**\r\n     * Performs a linear interpolation of this Quat towards another Quat, returning the result as a new Quat.\r\n     *\r\n     * @param other  - The other Quat to interpolate towards.\r\n     * @param t - Interpolation amount between the two inputs.\r\n     * @return - Returns a new Quat.\r\n     */\r\n    lerp(other, t) {\r\n        const result = new Quat(this.x + t * (other.x - this.x), this.y + t * (other.y - this.y), this.z + t * (other.z - this.z), this.w + t * (other.w - this.w));\r\n        result.normalizeInPlace();\r\n        return result;\r\n    }\r\n    /**\r\n     * Performs a spherical linear interpolation of this Quat towards another Quat, returning the result as a new Quat.\r\n     *\r\n     * @param other - The other Quat to interpolate towards.\r\n     * @param t - Interpolation amount between the two inputs.\r\n     * @return - Returns a new Quat.\r\n     */\r\n    slerp(other, t) {\r\n        /// https://www.lix.polytechnique.fr/~nielsen/WEBvisualcomputing/programs/slerp.cpp\r\n        // const dotProduct = this.x * other.x + this.y * other.y + this.z * other.z + this.w * other.w\r\n        const dotProduct = this.dot(other);\r\n        // algorithm adapted from Shoemake's paper\r\n        const lambda = t / 2;\r\n        let theta = Math.acos(dotProduct);\r\n        if (theta < 0.0)\r\n            theta = -theta;\r\n        const st = Math.sin(theta);\r\n        const sut = Math.sin(lambda * theta);\r\n        const sout = Math.sin((1 - lambda) * theta);\r\n        const coeff1 = sout / st;\r\n        const coeff2 = sut / st;\r\n        const result = new Quat(coeff1 * this.x + coeff2 * other.x, coeff1 * this.y + coeff2 * other.y, coeff1 * this.z + coeff2 * other.z, coeff1 * this.w + coeff2 * other.w);\r\n        result.normalizeInPlace();\r\n        return result;\r\n    }\r\n    /**\r\n     * Clones this Quat and returns a new Quat.\r\n     *\r\n     * @return - Returns a new Quat.\r\n     */\r\n    clone() {\r\n        return new Quat(this.__data[0], this.__data[1], this.__data[2], this.__data[3]);\r\n    }\r\n    /**\r\n     * Returns the type as an array. Often used to pass types to the GPU.\r\n     *\r\n     * @return - Returns as an array.\r\n     */\r\n    asArray() {\r\n        return this.__data;\r\n    }\r\n    // ///////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Converts this Vec3 to a string in JSON format.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    toString() {\r\n        // eslint-disable-next-line new-cap\r\n        return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());\r\n    }\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @return - The json object.\r\n     */\r\n    toJSON() {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n            z: this.z,\r\n            w: this.w,\r\n        };\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param j - The json object.\r\n     */\r\n    fromJSON(j) {\r\n        this.__data[0] = j.x;\r\n        this.__data[1] = j.y;\r\n        this.__data[2] = j.z;\r\n        this.__data[3] = j.w;\r\n        this.normalizeInPlace();\r\n    }\r\n    /**\r\n     * Loads the state of the value from a binary reader.\r\n     *\r\n     * @param reader - The reader value.\r\n     */\r\n    readBinary(reader) {\r\n        this.x = reader.loadFloat32();\r\n        this.y = reader.loadFloat32();\r\n        this.z = reader.loadFloat32();\r\n        this.w = reader.loadFloat32();\r\n    }\r\n}\r\nexport { Quat };\r\n//# sourceMappingURL=Quat.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nconst UInt8 = 0;\r\nconst SInt8 = 1;\r\nconst UInt16 = 2;\r\nconst SInt16 = 3;\r\nconst UInt32 = 4;\r\nconst SInt32 = 5;\r\nconst Float32 = 6;\r\n/**\r\n * Math Functions\r\n */\r\nclass MathFunctions {\r\n    /**\r\n     * Converts Radians to Degrees\r\n     *\r\n     * @static\r\n     * @param rad - Radians value\r\n     * @return - Degrees equivalent\r\n     */\r\n    static radToDeg(rad) {\r\n        return rad / (Math.PI / 180);\r\n    }\r\n    /**\r\n     * Converts Degrees to Radiants\r\n     *\r\n     * @static\r\n     * @param deg - Degrees value\r\n     * @return -  Radians equivalent\r\n     */\r\n    static degToRad(deg) {\r\n        return deg * (Math.PI / 180);\r\n    }\r\n    /**\r\n     * Verifies if the specified parameter is numeric.\r\n     *\r\n     * @static\r\n     * @param number - Number to test\r\n     * @return - `true` when is a valid number\r\n     */\r\n    static isNumeric(number) {\r\n        return !isNaN(parseFloat(number)) && isFinite(number);\r\n    }\r\n    /**\r\n     * Generates and returns a random integer within the specified range.\r\n     *\r\n     * @static\r\n     * @param min - Lower value random int can be.\r\n     * @param max - Highest value random int can be.\r\n     * @return - Random number inside range.\r\n     */\r\n    static randomInt(min, max) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n    /**\r\n     * Calculates a lineal interpolation between two inputs for the specified parameter(t).\r\n     *\r\n     * @static\r\n     * @param v0 -\r\n     * @param v1 -\r\n     * @param t -\r\n     * @return -\r\n     */\r\n    static lerp(v0, v1, t) {\r\n        return v0 + t * (v1 - v0);\r\n    }\r\n    /**\r\n     * Restricts the specified value between two numbers\r\n     *\r\n     * @static\r\n     * @param value\r\n     * @param min\r\n     * @param max\r\n     * @return\r\n     */\r\n    static clamp(value, min, max) {\r\n        return Math.min(Math.max(value, min), max);\r\n    }\r\n    /**\r\n     * Returns the nearest pow of two value of the specified number.\r\n     *\r\n     * @static\r\n     * @param value -\r\n     * @return -\r\n     */\r\n    static nearestPow2(value) {\r\n        return Math.pow(2, Math.round(Math.log(value) / Math.log(2)));\r\n    }\r\n    /**\r\n     * Returns the nearest pow of ten value of the specified number.\r\n     *\r\n     * @static\r\n     * @param value -\r\n     * @return -\r\n     */\r\n    static nearestPow10(value) {\r\n        return Math.pow(10, Math.round(Math.log10(value) / Math.log10(10)));\r\n    }\r\n    /**\r\n     * Returns the next pow of two value of the specified number.\r\n     *\r\n     * @static\r\n     * @param value -\r\n     * @return -\r\n     */\r\n    static nextPow2(value) {\r\n        if (this.fract(Math.log2(value)) == 0) {\r\n            return value;\r\n        }\r\n        let exp = 0;\r\n        while (value > 0) {\r\n            exp++;\r\n            value = value >> 1;\r\n        }\r\n        return 1 << exp;\r\n    }\r\n    /**\r\n     * Returns the fractional component of a number\r\n     *\r\n     * @static\r\n     * @param value -\r\n     * @return -\r\n     */\r\n    static fract(value) {\r\n        if (value == 0)\r\n            return 0;\r\n        if (value < 0) {\r\n            if (value > -1.0)\r\n                return -value;\r\n            return -value % Math.floor(-value);\r\n        }\r\n        if (value < 1.0)\r\n            return value;\r\n        return value % Math.floor(value);\r\n    }\r\n    /**\r\n     * Moves the specified value from one numeric domain(range) to another.\r\n     *\r\n     * @static\r\n     * @param value -\r\n     * @param start1 -\r\n     * @param end1 -\r\n     * @param start2 -\r\n     * @param end2 -\r\n     * @return -\r\n     */\r\n    static remap(value, start1, end1, start2, end2) {\r\n        return start2 + (end2 - start2) * ((value - start1) / (end1 - start1));\r\n    }\r\n    /**\r\n     * Perform Hermite interpolation between two values\r\n     *\r\n     * @static\r\n     * @param edge0 -\r\n     * @param edge1 -\r\n     * @param x -\r\n     * @return -\r\n     */\r\n    static smoothStep(edge0, edge1, x) {\r\n        const t = this.clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\r\n        return t * t * (3.0 - 2.0 * t);\r\n    }\r\n    /**\r\n     * Performs - interpolation between two values\r\n     *\r\n     * @static\r\n     * @param edge0 -\r\n     * @param edge1 -\r\n     * @param x -\r\n     * @return -\r\n     */\r\n    static linStep(edge0, edge1, x) {\r\n        return this.clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\r\n    }\r\n    /**\r\n     * Decodes a Float16 from two unsigned Int8\r\n     *\r\n     * @static\r\n     * @param c - Array with the two UInt8\r\n     * @return - Decoded Float16\r\n     */\r\n    static decode16BitFloatFrom2xUInt8(c) {\r\n        const ix = c[0]; // 1st byte: 1 bit signed num, 4 bits exponent, 3 bits mantissa (MSB)\r\n        const iy = c[1]; // 2nd byte: 8 bit mantissa (LSB)\r\n        const s = ix & 0x80 ? 1 : -1; // get bit 8\r\n        const iexp = (ix & 0x78) >> 3; // mask bits 7-4\r\n        const msb = ix & 0x7; // mask bits 3-1\r\n        let norm = iexp == 0 ? 0 : 2048; // distinguish between normalized and sub-normalized numbers\r\n        const mantissa = norm + (msb << 8) + iy; // implicit preceding 1 or 0 added here\r\n        norm = iexp == 0 ? 1 : 0; // normalization toggle\r\n        const exponent = Math.pow(2, iexp + norm - 16); // -5 for the the exponent bias from 2^-5 to 2^10 plus another -11 for the normalized 12 bit mantissa\r\n        const v = s * mantissa * exponent;\r\n        return v;\r\n    }\r\n    /**\r\n     * Encodes an array of two unsigned Int8 to a Float16\r\n     *\r\n     * @static\r\n     * @param v - Float16 number\r\n     * @return - Encoded Unsigned Int8 array\r\n     */\r\n    static encode16BitFloatInto2xUInt8(v) {\r\n        const c = new Uint8Array(2);\r\n        // const c = [0, 0];\r\n        const signum = v >= 0 ? 128 : 0;\r\n        v = Math.abs(v);\r\n        let exponent = 15;\r\n        let limit = 1024; // considering the bias from 2^-5 to 2^10 (==1024)\r\n        for (let exp = 15; exp > 0; exp--) {\r\n            if (v < limit) {\r\n                limit /= 2;\r\n                exponent--;\r\n            }\r\n        }\r\n        let rest;\r\n        if (exponent == 0) {\r\n            rest = v / limit / 2; // \"sub-normalize\" implicit preceding 0.\r\n        }\r\n        else {\r\n            rest = (v - limit) / limit; // normalize accordingly to implicit preceding 1.\r\n        }\r\n        const mantissa = Math.round(rest * 2048); // 2048 = 2^11 for the (split) 11 bit mantissa\r\n        const msb = mantissa / 256; // the most significant 3 bits go into the lower part of the first byte\r\n        const lsb = mantissa - msb * 256; // there go the other 8 bit of the lower significance\r\n        c[0] = signum + exponent * 8 + msb; // color normalization for texture2D\r\n        c[1] = lsb;\r\n        if (v >= 2048) {\r\n            c[0] = 255;\r\n        }\r\n        return c;\r\n    }\r\n    /**\r\n     * Transforms a 16 bit float to an encoded integer.\r\n     *\r\n     * @static\r\n     * @param v - Float16 number to encode\r\n     * @return - Encoded number\r\n     */\r\n    static encode16BitFloat(v) {\r\n        const float32Array = new Float32Array(1);\r\n        float32Array[0] = v;\r\n        const int32View = new Int32Array(float32Array.buffer);\r\n        const toUInt16 = (x) => {\r\n            let bits = (x >> 16) & 0x8000; /* Get the sign */\r\n            let m = (x >> 12) & 0x07ff; /* Keep one extra bit for rounding */\r\n            const e = (x >> 23) & 0xff; /* Using int is faster here */\r\n            /* If zero, or de-normal, or exponent underflows too much for a de-normal\r\n             * half, return signed zero. */\r\n            if (e < 103) {\r\n                return bits;\r\n            }\r\n            /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\r\n            if (e > 142) {\r\n                bits |= 0x7c00;\r\n                /* If exponent was 0xff and one mantissa bit was set, it means NaN,\r\n                 * not Inf, so make sure we set one mantissa bit too. */\r\n                bits |= (e == 255 ? 0 : 1) && x & 0x007fffff;\r\n                return bits;\r\n            }\r\n            /* If exponent underflows but not too much, return a de-normal */\r\n            if (e < 113) {\r\n                m |= 0x0800;\r\n                /* Extra rounding may overflow and set mantissa to 0 and exponent\r\n                 * to 1, which is OK. */\r\n                bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\r\n                return bits;\r\n            }\r\n            bits |= ((e - 112) << 10) | (m >> 1);\r\n            /* Extra rounding. An overflow will set mantissa to 0 and increment\r\n             * the exponent, which is OK. */\r\n            bits += m & 1;\r\n            return bits;\r\n        };\r\n        return toUInt16(int32View[0]);\r\n    }\r\n    /**\r\n     * As opposite of the `encode16BitFloat` method, this takes an encoded integer value,\r\n     * and returns the 16 bit float.\r\n     *\r\n     * @static\r\n     * @param h - Encoded integer\r\n     * @return - Decoded 16 bit float.\r\n     */\r\n    static decode16BitFloat(h) {\r\n        const s = (h & 0x8000) >> 15;\r\n        const e = (h & 0x7c00) >> 10;\r\n        const f = h & 0x03ff;\r\n        if (e == 0) {\r\n            return (s ? -1 : 1) * Math.pow(2, -14) * (f / Math.pow(2, 10));\r\n        }\r\n        else if (e == 0x1f) {\r\n            return f ? NaN : (s ? -1 : 1) * Infinity;\r\n        }\r\n        return (s ? -1 : 1) * Math.pow(2, e - 15) * (1 + f / Math.pow(2, 10));\r\n    }\r\n    /**\r\n     * Transforms an array of Float 32 to an array of unsigned Int16.\r\n     *\r\n     * @static\r\n     * @param float32Array -\r\n     * @return - Unsigned Int16 array representative of the Float32Array\r\n     */\r\n    static convertFloat32ArrayToUInt16Array(float32Array) {\r\n        const unit16s = new Uint16Array(float32Array.length);\r\n        const int32View = new Int32Array(float32Array.buffer);\r\n        const toUInt16 = (x) => {\r\n            let bits = (x >> 16) & 0x8000; /* Get the sign */\r\n            let m = (x >> 12) & 0x07ff; /* Keep one extra bit for rounding */\r\n            const e = (x >> 23) & 0xff; /* Using int is faster here */\r\n            /* If zero, or de-normal, or exponent underflows too much for a de-normal\r\n             * half, return signed zero. */\r\n            if (e < 103) {\r\n                return bits;\r\n            }\r\n            /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\r\n            if (e > 142) {\r\n                bits |= 0x7c00;\r\n                /* If exponent was 0xff and one mantissa bit was set, it means NaN,\r\n                 * not Inf, so make sure we set one mantissa bit too. */\r\n                bits |= (e == 255 ? 0 : 1) && x & 0x007fffff;\r\n                return bits;\r\n            }\r\n            /* If exponent underflows but not too much, return a de-normal */\r\n            if (e < 113) {\r\n                m |= 0x0800;\r\n                /* Extra rounding may overflow and set mantissa to 0 and exponent\r\n                 * to 1, which is OK. */\r\n                bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\r\n                return bits;\r\n            }\r\n            bits |= ((e - 112) << 10) | (m >> 1);\r\n            /* Extra rounding. An overflow will set mantissa to 0 and increment\r\n             * the exponent, which is OK. */\r\n            bits += m & 1;\r\n            return bits;\r\n        };\r\n        for (let i = 0; i < float32Array.length; i++) {\r\n            unit16s[i] = toUInt16(int32View[i]);\r\n        }\r\n        return unit16s;\r\n    }\r\n}\r\nexport { UInt8, SInt8, SInt16, UInt16, SInt32, UInt32, Float32, MathFunctions };\r\n//# sourceMappingURL=MathFunctions.js.map","/* eslint-disable new-cap */\r\nimport { StringFunctions } from '../Utilities/StringFunctions';\r\nimport { MathFunctions } from '../Utilities/MathFunctions';\r\nimport { Vec3 } from './Vec3';\r\n/**\r\n * Class representing a ray that starts from an origin in a specified direction.\r\n */\r\nclass Ray {\r\n    /**\r\n     * Create a ray.\r\n     *\r\n     * @param start - The origin of the ray.\r\n     * @param dir - The direction of the ray.\r\n     */\r\n    constructor(start, dir) {\r\n        if (start instanceof Vec3) {\r\n            this.start = start;\r\n        }\r\n        else {\r\n            this.start = new Vec3();\r\n        }\r\n        if (dir instanceof Vec3) {\r\n            this.dir = dir;\r\n        }\r\n        else {\r\n            this.dir = new Vec3();\r\n        }\r\n    }\r\n    /**\r\n     * Get the closest point on the ray to the given point.\r\n     *\r\n     * @param point - The point in 3D space.\r\n     * @return - returns a number\r\n     */\r\n    closestPoint(point) {\r\n        const w = point.subtract(this.start);\r\n        const c1 = w.dot(this.dir);\r\n        if (c1 < Number.EPSILON)\r\n            return 0;\r\n        const c2 = this.dir.dot(this.dir);\r\n        if (c2 < Number.EPSILON)\r\n            return 0;\r\n        return c1 / c2;\r\n    }\r\n    /**\r\n     * Get the closest point between the ray and the given line segment made of the 2 points.\r\n     *\r\n     * @param p0 - The point in 3D space.\r\n     * @param p1 - The point in 3D space.\r\n     * @return - Returns an array containing 2 scalar values indicating 0: the fraction of the line segment, 1: distance along the Ray\r\n     */\r\n    closestPointOnLineSegment(p0, p1) {\r\n        const u = this.dir;\r\n        const v = p1.subtract(p0);\r\n        const v_len = v.length();\r\n        v.normalizeInPlace();\r\n        const w = this.start.subtract(p0);\r\n        const a = u.dot(u); // always >= 0\r\n        const b = u.dot(v);\r\n        const c = v.dot(v); // always >= 0\r\n        const d = u.dot(w);\r\n        const e = v.dot(w);\r\n        if (a == 0.0 && c == 0.0) {\r\n            return [this.start.distanceTo(p0), 0.0];\r\n        }\r\n        if (a == 0.0) {\r\n            return [0.0, 0.0];\r\n        }\r\n        if (c == 0.0) {\r\n            return [this.closestPoint(p0), 0.0];\r\n        }\r\n        const D = a * c - b * b; // always >= 0\r\n        // compute the ray parameters of the two closest points\r\n        let this_t;\r\n        let seg_t;\r\n        if (D < 0.001) {\r\n            // the lines are almost parallel\r\n            this_t = 0.0;\r\n            if (b > c) {\r\n                // use the largest denominator\r\n                seg_t = d / b;\r\n            }\r\n            else {\r\n                seg_t = e / c;\r\n            }\r\n        }\r\n        else {\r\n            this_t = (b * e - c * d) / D;\r\n            seg_t = (a * e - b * d) / D;\r\n        }\r\n        return [this_t, MathFunctions.clamp(seg_t / v_len, 0, 1)];\r\n    }\r\n    /**\r\n     * Get the closest point at a distance.\r\n     *\r\n     * @param dist - The distance value.\r\n     * @return - Returns a Vec3.\r\n     */\r\n    pointAtDist(dist) {\r\n        return this.start.add(this.dir.scale(dist));\r\n    }\r\n    /**\r\n     * Returns the two ray params that represent the closest point between the two rays.\r\n     *\r\n     * @param ray - The ray value.\r\n     * @return - Returns a Ray.\r\n     */\r\n    intersectRayVector(ray) {\r\n        const u = this.dir;\r\n        const v = ray.dir;\r\n        const w = this.start.subtract(ray.start);\r\n        const a = u.dot(u); // always >= 0\r\n        const b = u.dot(v);\r\n        const c = v.dot(v); // always >= 0\r\n        const d = u.dot(w);\r\n        const e = v.dot(w);\r\n        if (a == 0.0 && c == 0.0) {\r\n            return this.start.distanceTo(ray.start);\r\n        }\r\n        if (a == 0.0) {\r\n            return ray.closestPoint(this.start);\r\n        }\r\n        if (c == 0.0) {\r\n            return this.closestPoint(ray.start);\r\n        }\r\n        const D = a * c - b * b; // always >= 0\r\n        // compute the ray parameters of the two closest points\r\n        let this_t;\r\n        let ray_t;\r\n        if (D < 0.001) {\r\n            // the lines are almost parallel\r\n            this_t = 0.0;\r\n            if (b > c) {\r\n                // use the largest denominator\r\n                ray_t = d / b;\r\n            }\r\n            else {\r\n                ray_t = e / c;\r\n            }\r\n        }\r\n        else {\r\n            this_t = (b * e - c * d) / D;\r\n            ray_t = (a * e - b * d) / D;\r\n        }\r\n        return [this_t, ray_t];\r\n    }\r\n    /**\r\n     * Returns one ray param representing the intersection\r\n     * of this ray against the plane defined by the given ray.\r\n     *\r\n     * @param plane - The plane to intersect with.\r\n     * @return - The return value.\r\n     */\r\n    intersectRayPlane(plane) {\r\n        const w = this.start.subtract(plane.start);\r\n        const D = plane.dir.dot(this.dir);\r\n        const N = -plane.dir.dot(w);\r\n        if (Math.abs(D) < Number.PRECISION) {\r\n            // segment is parallel to plane\r\n            if (N == 0.0)\r\n                return -1.0;\r\n            // segment lies in plane\r\n            else\r\n                return -1.0; // no intersection\r\n        }\r\n        // they are not parallel\r\n        // compute intersect param\r\n        const sI = N / D;\r\n        if (sI < -Number.PRECISION) {\r\n            return -1; // no intersection\r\n        }\r\n        return sI;\r\n    }\r\n    /**\r\n     * Determines if this Box3 intersects a ray.\r\n     *\r\n     * @param box3 - The box to check for intersection against.\r\n     * @param tolerance - The tolerance of the test.\r\n     * @return - The return value.\r\n     */\r\n    intersectRayBox3(box3, tolerance = 0) {\r\n        // https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-box-intersection\r\n        const invDir = new Vec3(1 / this.dir.x, 1 / this.dir.y, 1 / this.dir.z);\r\n        const sign = [];\r\n        sign[0] = invDir.x < 0 ? 1 : 0;\r\n        sign[1] = invDir.y < 0 ? 1 : 0;\r\n        sign[2] = invDir.z < 0 ? 1 : 0;\r\n        const bounds = [];\r\n        if (tolerance > 0) {\r\n            const diag = box3.diagonal();\r\n            diag.normalizeInPlace();\r\n            diag.scaleInPlace(tolerance);\r\n            bounds[0] = box3.p0.subtract(diag);\r\n            bounds[1] = box3.p1.add(diag);\r\n        }\r\n        else {\r\n            bounds[0] = box3.p0;\r\n            bounds[1] = box3.p1;\r\n        }\r\n        let tMin = (bounds[sign[0]].x - this.start.x) * invDir.x;\r\n        let tMax = (bounds[1 - sign[0]].x - this.start.x) * invDir.x;\r\n        const tyMin = (bounds[sign[1]].y - this.start.y) * invDir.y;\r\n        const tyMax = (bounds[1 - sign[1]].y - this.start.y) * invDir.y;\r\n        if (tMin > tyMax || tyMin > tMax)\r\n            return false;\r\n        if (tyMin > tMin)\r\n            tMin = tyMin;\r\n        if (tyMax < tMax)\r\n            tMax = tyMax;\r\n        const tzMin = (bounds[sign[2]].z - this.start.z) * invDir.z;\r\n        const tzMax = (bounds[1 - sign[2]].z - this.start.z) * invDir.z;\r\n        if (tMin > tzMax || tzMin > tMax)\r\n            return false;\r\n        if (tzMin > tMin)\r\n            tMin = tzMin;\r\n        if (tzMax < tMax)\r\n            tMax = tzMax;\r\n        return true;\r\n    }\r\n    /**\r\n     * Clones this Ray and returns a new Ray.\r\n     *\r\n     * @return - Returns a new Ray.\r\n     */\r\n    clone() {\r\n        return new Ray(this.start.clone(), this.dir.clone());\r\n    }\r\n    // ///////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @return - The json object.\r\n     */\r\n    toJSON() {\r\n        return {\r\n            start: this.start.toJSON(),\r\n            dir: this.dir.toJSON(),\r\n        };\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param j - The json object.\r\n     */\r\n    fromJSON(j) {\r\n        this.start.fromJSON(j.start);\r\n        this.dir.fromJSON(j.dir);\r\n    }\r\n    /**\r\n     * Calls `toJSON` method and stringifies it.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    toString() {\r\n        return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());\r\n    }\r\n}\r\nexport { Ray };\r\n//# sourceMappingURL=Ray.js.map","/* eslint-disable no-unused-vars */\r\nimport { StringFunctions } from '../Utilities/StringFunctions';\r\nimport { Vec3 } from './Vec3';\r\nimport { Mat4 } from './Mat4';\r\nimport { Quat } from './Quat';\r\n/**\r\n * Class representing an Xfo transform, which is a transformation decomposed into 3 component values. Translation, Orientation, and Scaling.\r\n */\r\nclass Xfo {\r\n    /**\r\n     * Initializes the Xfo object.\r\n     *\r\n     * **Note:** You can leave it empty and use other methods ti set the state of the class.\r\n     *\r\n     * @see [`setFromOther`](#setFromOther) [`setFromMat4`](#setFromMat4) [`setFromFloat32Array`](#setFromFloat32Array) [`fromJSON`](#fromJSON)\r\n     *\r\n     * @param tr - The translation value.\r\n     * @param ori - The orientation value.\r\n     * @param sc - The scaling value.\r\n     */\r\n    constructor(tr, ori, sc) {\r\n        if (tr instanceof Float32Array) {\r\n            this.setFromFloat32Array(tr);\r\n            return;\r\n        }\r\n        if (tr instanceof Vec3) {\r\n            this.tr = tr;\r\n        }\r\n        else if (tr instanceof Quat && ori == undefined && sc == undefined) {\r\n            this.tr = new Vec3();\r\n            this.ori = tr; // Xfo constructor with just a Quat.\r\n            this.sc = new Vec3(1, 1, 1);\r\n            return;\r\n        }\r\n        else {\r\n            this.tr = new Vec3();\r\n        }\r\n        if (ori instanceof Quat) {\r\n            this.ori = ori;\r\n        }\r\n        else {\r\n            this.ori = new Quat();\r\n        }\r\n        if (sc instanceof Vec3) {\r\n            this.sc = sc;\r\n        }\r\n        else {\r\n            this.sc = new Vec3(1, 1, 1);\r\n        }\r\n    }\r\n    /**\r\n     * Sets the state of the Xfo object.\r\n     *\r\n     * @param tr - The translation value.\r\n     * @param ori - The orientation value.\r\n     * @param sc - The scaling value.\r\n     */\r\n    set(tr, ori, sc) {\r\n        this.tr = tr;\r\n        this.ori = ori;\r\n        if (sc instanceof Vec3)\r\n            this.sc = sc;\r\n    }\r\n    /**\r\n     * Sets the state of the Xfo object using another Xfo object.\r\n     *\r\n     * @param other - The other Xfo to set from.\r\n     */\r\n    setFromOther(other) {\r\n        this.tr = other.tr;\r\n        this.ori = other.ori;\r\n        this.sc = other.sc;\r\n    }\r\n    /**\r\n     * Verifies that the Xfo object is an `identity`, checking that the translation, orientation and scaling attributes are in their initial state.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    isIdentity() {\r\n        return this.tr.isNull() && this.ori.isIdentity() && this.sc.is111();\r\n    }\r\n    /**\r\n     * Checks if this Vec3 contains the same values as the other Vec3.\r\n     *\r\n     * @param other - The other Vec3 to compare with.\r\n     * @return - Returns `true` if are the same Vector, otherwise, `false`.\r\n     */\r\n    isEqual(other) {\r\n        return this.tr.isEqual(other.tr) && this.ori.isEqual(other.ori) && this.sc.isEqual(other.sc);\r\n    }\r\n    /**\r\n     * Returns true if this Vec2 is approximately the same as other.\r\n     *\r\n     * @param other - The other Vec3 to compare with.\r\n     * @param precision - The precision to which the values must match.\r\n     * @return - Returns true or false.\r\n     */\r\n    approxEqual(other, precision = Number.EPSILON) {\r\n        return ((other.tr ? this.tr.approxEqual(other.tr, precision) : true) &&\r\n            (other.ori ? this.ori.approxEqual(other.ori, precision) : true) &&\r\n            (other.sc ? this.sc.approxEqual(other.sc, precision) : true));\r\n    }\r\n    /**\r\n     * The setLookAt method.\r\n     * @param pos - The position value.\r\n     * @param target - The target value.\r\n     * @param up - The up value.\r\n     */\r\n    setLookAt(pos, target, up) {\r\n        // Note: We look along the -z axis. Negate the direction.\r\n        const dir = pos.subtract(target);\r\n        const dirLen = dir.length();\r\n        if (dirLen < Number.EPSILON) {\r\n            throw new Error('Invalid dir');\r\n            return;\r\n        }\r\n        this.ori.setFromDirectionAndUpvector(dir, up);\r\n        this.tr = pos;\r\n    }\r\n    /**\r\n     * Multiplies two Xfo transforms.\r\n     *\r\n     * @param xfo - The xfo to multiply with.\r\n     * @return - Returns an Xfo.\r\n     */\r\n    multiply(xfo) {\r\n        let this_sc = this.sc;\r\n        if (this.sc.x != this.sc.y || this.sc.x != this.sc.z) {\r\n            this_sc = xfo.ori.rotateVec3(this.sc);\r\n            if (Math.sign(this_sc.x) != Math.sign(this.sc.x))\r\n                this_sc.x = -this_sc.x;\r\n            if (Math.sign(this_sc.y) != Math.sign(this.sc.y))\r\n                this_sc.y = -this_sc.y;\r\n            if (Math.sign(this_sc.z) != Math.sign(this.sc.z))\r\n                this_sc.z = -this_sc.z;\r\n        }\r\n        const result = new Xfo(this.tr.add(this.ori.rotateVec3(this_sc.multiply(xfo.tr))), this.ori.multiply(xfo.ori), this_sc.multiply(xfo.sc));\r\n        return result;\r\n    }\r\n    /**\r\n     * Returns the inverse of the Xfo object, but returns. the result as a new Xfo.\r\n     *\r\n     * @return - Returns a new Xfo.\r\n     */\r\n    inverse() {\r\n        const result = new Xfo();\r\n        result.ori = this.ori.inverse();\r\n        if (this.sc.x != this.sc.y || this.sc.x != this.sc.z) {\r\n            // Note: the following code has not been tested and\r\n            // may not be quite correct. We need to setup\r\n            // unit tests for this kind of sample.\r\n            // An example would be to lay out some boxes on different rotations\r\n            // and with non-uniform scale. Then parent them together. If they\r\n            // remain stationary, after parenting, then this math is correct.\r\n            result.sc = result.ori.rotateVec3(this.sc);\r\n            if (Math.sign(result.sc.x) != Math.sign(this.sc.x))\r\n                result.sc.x = -result.sc.x;\r\n            if (Math.sign(result.sc.y) != Math.sign(this.sc.y))\r\n                result.sc.y = -result.sc.y;\r\n            if (Math.sign(result.sc.z) != Math.sign(this.sc.z))\r\n                result.sc.z = -result.sc.z;\r\n        }\r\n        else {\r\n            result.sc = this.sc.inverse();\r\n        }\r\n        result.tr = result.ori.rotateVec3(this.tr.negate().multiply(result.sc));\r\n        return result;\r\n    }\r\n    /**\r\n     * Transforms Xfo object using a `Vec3` object. First scaling it, then rotating and finally adding the result to current translation object.\r\n     *\r\n     * @param vec3 - The vec3 value.\r\n     * @return - The return value.\r\n     */\r\n    transformVec3(vec3) {\r\n        return this.tr.add(this.ori.rotateVec3(this.sc.multiply(vec3)));\r\n    }\r\n    /**\r\n     * Converts this Xfo to a Mat4 (a 4x4 matrix).\r\n     *\r\n     * @return - Returns a new Mat4.\r\n     */\r\n    toMat4() {\r\n        const scl = new Mat4(this.sc.x, 0, 0, 0, 0, this.sc.y, 0, 0, 0, 0, this.sc.z, 0, 0, 0, 0, 1.0);\r\n        const rot = this.ori.toMat4();\r\n        const trn = new Mat4();\r\n        trn.translation = this.tr;\r\n        return trn.multiply(rot).multiply(scl);\r\n    }\r\n    /**\r\n     * Sets the state of the Xfo object using Mat4.\r\n     * @param mat4 - The mat4 value.\r\n     */\r\n    setFromMat4(mat4) {\r\n        this.tr = mat4.translation;\r\n        this.ori.setFromMat4(mat4);\r\n    }\r\n    /**\r\n     * Sets the state of the Xfo object using an `Float32array`.\r\n     *\r\n     * **Note:** You can set the byteOffset in your `Float32array` object\r\n     *\r\n     * @param float32array - The float32array value.\r\n     */\r\n    setFromFloat32Array(float32array) {\r\n        if (float32array.length == 7) {\r\n            this.tr = new Vec3(new Float32Array(float32array.buffer, float32array.byteOffset, 3));\r\n            this.ori = new Quat(new Float32Array(float32array.buffer, float32array.byteOffset + 12, 4));\r\n            this.sc = new Vec3(1, 1, 1);\r\n            return;\r\n        }\r\n        else if (float32array.length == 8) {\r\n            this.tr = new Vec3(new Float32Array(float32array.buffer, float32array.byteOffset, 3));\r\n            this.ori = new Quat(new Float32Array(float32array.buffer, float32array.byteOffset + 12, 4));\r\n            const scl = float32array[7];\r\n            this.sc = new Vec3(scl, scl, scl);\r\n            return;\r\n        }\r\n        else if (float32array.length == 10) {\r\n            this.tr = new Vec3(new Float32Array(float32array.buffer, float32array.byteOffset, 3));\r\n            this.ori = new Quat(new Float32Array(float32array.buffer, float32array.byteOffset + 12, 4));\r\n            this.sc = new Vec3(new Float32Array(float32array.buffer, float32array.byteOffset + 21, 3));\r\n            return;\r\n        }\r\n        else {\r\n            console.warn('unitialized: float32array.length == ', float32array.length);\r\n        }\r\n    }\r\n    /**\r\n     * Clones this Xfo and returns a new Xfo.\r\n     *\r\n     * @return - Returns a new Xfo.\r\n     */\r\n    clone() {\r\n        return new Xfo(this.tr.clone(), this.ori.clone(), this.sc.clone());\r\n    }\r\n    // ///////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @return - The json object.\r\n     */\r\n    toJSON() {\r\n        const j = {\r\n            tr: this.tr.toJSON(),\r\n            ori: this.ori.toJSON(),\r\n        };\r\n        if (!this.sc.is111())\r\n            j.sc = this.sc.toJSON();\r\n        return j;\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param j - The json object.\r\n     */\r\n    fromJSON(j) {\r\n        this.tr.fromJSON(j.tr);\r\n        this.ori.fromJSON(j.ori);\r\n        if (j.sc) {\r\n            this.sc.fromJSON(j.sc);\r\n        }\r\n    }\r\n    /**\r\n     * Loads the state of the value from a binary reader.\r\n     *\r\n     * @param reader - The reader value.\r\n     */\r\n    readBinary(reader) {\r\n        this.tr.readBinary(reader);\r\n        this.ori.readBinary(reader);\r\n        this.sc.readBinary(reader);\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    toString() {\r\n        // eslint-disable-next-line new-cap\r\n        return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());\r\n    }\r\n}\r\nexport { Xfo };\r\n//# sourceMappingURL=Xfo.js.map","import { StringFunctions } from '../Utilities/StringFunctions';\r\nimport { Vec2 } from './Vec2';\r\n/**\r\n * Represents a box in 2D space. Needing two Vec2 vectors describing the corners\r\n */\r\nclass Box2 {\r\n    /**\r\n     * Creates a Box2 object using Vec2s.\r\n     * In case the parameters are not passed by, their values are pre-defined:\r\n     *\r\n     * p0 is a Vec2 with {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY|`Number.POSITIVE_INFINITY`}\r\n     *\r\n     * p1 is a Vec2 with {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY|`Number.NEGATIVE_INFINITY`}\r\n     *\r\n     * @param p0 - A point representing the corners of a 2D box.\r\n     * @param p1 - A point representing the corners of a 2D box.\r\n     */\r\n    constructor(p0, p1) {\r\n        if (p0 instanceof Vec2) {\r\n            this.p0 = p0;\r\n        }\r\n        else {\r\n            this.p0 = new Vec2(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\r\n        }\r\n        if (p1 instanceof Vec2) {\r\n            this.p1 = p1;\r\n        }\r\n        else {\r\n            this.p1 = new Vec2(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\r\n        }\r\n    }\r\n    /**\r\n     * Sets both Vec2 points\r\n     *\r\n     * @param p0 - A point representing the corners of a 2D box.\r\n     * @param p1 - A point representing the corners of a 2D box.\r\n     */\r\n    set(p0, p1) {\r\n        this.p0 = p0;\r\n        this.p1 = p1;\r\n    }\r\n    /**\r\n     * Resets the box2 back to an uninitialized state.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY|`Number.POSITIVE_INFINITY`}\r\n     * and {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY|`Number.NEGATIVE_INFINITY`}\r\n     */\r\n    reset() {\r\n        this.p0.x = Number.POSITIVE_INFINITY;\r\n        this.p1.x = Number.NEGATIVE_INFINITY;\r\n        this.p0.y = Number.POSITIVE_INFINITY;\r\n        this.p1.y = Number.NEGATIVE_INFINITY;\r\n    }\r\n    /**\r\n     * Returns `true` if the box has been expanded to contain a point.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    isValid() {\r\n        return (this.p0.x != Number.POSITIVE_INFINITY &&\r\n            this.p1.x != Number.NEGATIVE_INFINITY &&\r\n            this.p0.y != Number.POSITIVE_INFINITY &&\r\n            this.p1.y != Number.NEGATIVE_INFINITY);\r\n    }\r\n    /**\r\n     * Expands the Box2 to contain the new point.\r\n     *\r\n     * @param point - A point represents the corners of a 2D box.\r\n     */\r\n    addPoint(point) {\r\n        if (this.p0.x == Number.POSITIVE_INFINITY || point.x < this.p0.x)\r\n            this.p0.x = point.x;\r\n        if (this.p0.y == Number.POSITIVE_INFINITY || point.y < this.p0.y)\r\n            this.p0.y = point.y;\r\n        if (this.p1.y == Number.NEGATIVE_INFINITY || point.x > this.p1.x)\r\n            this.p1.x = point.x;\r\n        if (this.p1.y == Number.NEGATIVE_INFINITY || point.y > this.p1.y)\r\n            this.p1.y = point.y;\r\n    }\r\n    /**\r\n     * Returns the length of the diagonal of the box.\r\n     *\r\n     * @return - Returns the distance.\r\n     */\r\n    size() {\r\n        return this.p1.distanceTo(this.p0);\r\n    }\r\n    /**\r\n     * Returns the size of a Box2 - the same as size().\r\n     *\r\n     * @return - Returns a Vec2.\r\n     */\r\n    diagonal() {\r\n        return this.p1.subtract(this.p0);\r\n    }\r\n    /**\r\n     * Returns the center point of a Box2.\r\n     *\r\n     * @return - Returns a Vec2.\r\n     */\r\n    center() {\r\n        const result = this.p1.subtract(this.p0);\r\n        result.scaleInPlace(0.5);\r\n        result.addInPlace(this.p0);\r\n        return result;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Encodes `Box2` Class as a JSON object for persistence.\r\n     *\r\n     * @return - The json object.\r\n     */\r\n    toJSON() {\r\n        return {\r\n            p0: this.p0.toJSON(),\r\n            p1: this.p1.toJSON(),\r\n        };\r\n    }\r\n    /**\r\n     * Calls `toJSON` method and stringifies it.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    toString() {\r\n        // eslint-disable-next-line new-cap\r\n        return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());\r\n    }\r\n}\r\nexport { Box2 };\r\n//# sourceMappingURL=Box2.js.map","/* eslint-disable new-cap */\r\nimport { StringFunctions } from '../Utilities/StringFunctions';\r\nimport { Vec3 } from './Vec3';\r\n/**\r\n * Class representing a mathematical sphere, as opposed to the Sphere class derived from ProceduralMesh.\r\n *\r\n */\r\nclass SphereType {\r\n    /**\r\n     * Create a sphere.\r\n     * @param pos - The position of the sphere.\r\n     * @param radius - The radius of the sphere.\r\n     */\r\n    constructor(pos = new Vec3(), radius = 0) {\r\n        if (pos instanceof Vec3) {\r\n            this.pos = pos;\r\n        }\r\n        else {\r\n            this.pos = new Vec3();\r\n        }\r\n        this.radius = radius;\r\n    }\r\n    /**\r\n     * Clones this sphere and returns a new sphere.\r\n     *\r\n     * @return - Returns a new sphere.\r\n     */\r\n    clone() {\r\n        return new SphereType(this.pos.clone(), this.radius);\r\n    }\r\n    /**\r\n     * Checks if this sphere intersects a box.\r\n     *\r\n     * @param box - The box value.\r\n     * @return - The return value.\r\n     */\r\n    intersectsBox(box) {\r\n        return box.intersectsSphere(this);\r\n    }\r\n    // ///////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @return - The json object.\r\n     */\r\n    toJSON() {\r\n        return {\r\n            pos: this.pos.toJSON(),\r\n            radius: this.radius,\r\n        };\r\n    }\r\n    /**\r\n     * Calls `toJSON` method and stringifies it.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    toString() {\r\n        return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());\r\n    }\r\n}\r\nexport { SphereType };\r\n//# sourceMappingURL=SphereType.js.map","import { StringFunctions } from '../Utilities/StringFunctions';\r\nimport { MathFunctions } from '../Utilities/MathFunctions';\r\nimport { Vec3 } from './Vec3';\r\nimport { Mat4 } from './Mat4';\r\nimport { SphereType } from './SphereType';\r\n/**\r\n * Class representing a box in 3D space.\r\n * Represents a box in 3D space defined by two Vec3 values which define opposing corners of the box.\r\n */\r\nclass Box3 {\r\n    /**\r\n     * Creates a Box3 object using Vec3s.\r\n     * In case the parameters are not passed by, their values are pre-defined:\r\n     *\r\n     * p0 is a Vec2 with {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY|`Number.POSITIVE_INFINITY`}\r\n     *\r\n     * p1 is a Vec2 with {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY|`Number.NEGATIVE_INFINITY`}\r\n     *\r\n     * @param p0 - A point representing the corners of a 3D box.\r\n     * @param p1 - A point representing the corners of a 3D box.\r\n     */\r\n    constructor(p0, p1) {\r\n        if (p0 instanceof Float32Array) {\r\n            this.p0 = new Vec3(new Float32Array(p0.buffer, p0.byteOffset, 3));\r\n            this.p1 = new Vec3(new Float32Array(p0.buffer, p0.byteOffset + 12, 3));\r\n        }\r\n        else {\r\n            if (p0 instanceof Vec3) {\r\n                this.p0 = p0;\r\n            }\r\n            else {\r\n                this.p0 = new Vec3(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\r\n            }\r\n            if (p1 instanceof Vec3) {\r\n                this.p1 = p1;\r\n            }\r\n            else {\r\n                this.p1 = new Vec3(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Getter for the lower (x, y, z) boundary of the box.\r\n     *\r\n     * @return - Returns the minimum Vec3.\r\n     */\r\n    get min() {\r\n        return this.p0;\r\n    }\r\n    /**\r\n     * Getter for the upper (x, y, z) boundary of the box.\r\n     *\r\n     * @return - Returns the maximum Vec3.\r\n     */\r\n    get max() {\r\n        return this.p1;\r\n    }\r\n    /**\r\n     * Sets both Vec3 points\r\n     *\r\n     * @param p0 - A point representing the corners of a 3D box.\r\n     * @param p1 - A point representing the corners of a 3D box.\r\n     */\r\n    set(p0, p1) {\r\n        this.p0 = p0;\r\n        this.p1 = p1;\r\n    }\r\n    /**\r\n     * Resets the box3 back to an uninitialized state.\r\n     */\r\n    reset() {\r\n        this.p0.x = Number.POSITIVE_INFINITY;\r\n        this.p0.y = Number.POSITIVE_INFINITY;\r\n        this.p0.z = Number.POSITIVE_INFINITY;\r\n        this.p1.x = Number.NEGATIVE_INFINITY;\r\n        this.p1.y = Number.NEGATIVE_INFINITY;\r\n        this.p1.z = Number.NEGATIVE_INFINITY;\r\n    }\r\n    /**\r\n     * Returns `true` if the box has been expanded to contain a point.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    isValid() {\r\n        return (this.p0.x != Number.POSITIVE_INFINITY &&\r\n            this.p1.x != Number.NEGATIVE_INFINITY &&\r\n            this.p0.y != Number.POSITIVE_INFINITY &&\r\n            this.p1.y != Number.NEGATIVE_INFINITY &&\r\n            this.p0.z != Number.POSITIVE_INFINITY &&\r\n            this.p1.z != Number.NEGATIVE_INFINITY);\r\n    }\r\n    /**\r\n     * Expands the Box3 to contain the new point.\r\n     *\r\n     * @param point - A point represents the corners of a 3D box.\r\n     */\r\n    addPoint(point) {\r\n        if (point.x != Number.POSITIVE_INFINITY && point.x != Number.NEGATIVE_INFINITY) {\r\n            if (point.x < this.p0.x)\r\n                this.p0.x = point.x;\r\n            if (point.x > this.p1.x)\r\n                this.p1.x = point.x;\r\n        }\r\n        if (point.y != Number.POSITIVE_INFINITY && point.y != Number.NEGATIVE_INFINITY) {\r\n            if (point.y < this.p0.y)\r\n                this.p0.y = point.y;\r\n            if (point.y > this.p1.y)\r\n                this.p1.y = point.y;\r\n        }\r\n        if (point.z != Number.POSITIVE_INFINITY && point.z != Number.NEGATIVE_INFINITY) {\r\n            if (point.z < this.p0.z)\r\n                this.p0.z = point.z;\r\n            if (point.z > this.p1.z)\r\n                this.p1.z = point.z;\r\n        }\r\n    }\r\n    /**\r\n     * Adds `Box3` to this `Box3`, of the Xfo instance is passed in the parameters\r\n     * it proceeds to apply the transform for the Vec3.\r\n     *\r\n     * @param box3 - A 3D box.\r\n     * @param xfo - A 3D transform.\r\n     */\r\n    addBox3(box3, transform) {\r\n        if (transform) {\r\n            // Transform each corner of the Box3 into the new coordinate system.\r\n            this.addPoint(transform.transformVec3(box3.p0));\r\n            this.addPoint(transform.transformVec3(new Vec3(box3.p0.x, box3.p0.y, box3.p1.z)));\r\n            this.addPoint(transform.transformVec3(new Vec3(box3.p0.x, box3.p1.y, box3.p0.z)));\r\n            this.addPoint(transform.transformVec3(new Vec3(box3.p1.x, box3.p0.y, box3.p0.z)));\r\n            this.addPoint(transform.transformVec3(new Vec3(box3.p0.x, box3.p1.y, box3.p1.z)));\r\n            this.addPoint(transform.transformVec3(new Vec3(box3.p1.x, box3.p0.y, box3.p1.z)));\r\n            this.addPoint(transform.transformVec3(new Vec3(box3.p1.x, box3.p1.y, box3.p0.z)));\r\n            this.addPoint(transform.transformVec3(box3.p1));\r\n        }\r\n        else {\r\n            this.addPoint(box3.p0);\r\n            this.addPoint(box3.p1);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the length of the diagonal of the box.\r\n     *\r\n     * @return - Returns the distance.\r\n     */\r\n    size() {\r\n        return this.p1.distanceTo(this.p0);\r\n    }\r\n    /**\r\n     * Returns the diagonal vector of the B=box from p0 to p1.\r\n     *\r\n     * @return - Returns a Box3.\r\n     */\r\n    diagonal() {\r\n        return this.p1.subtract(this.p0);\r\n    }\r\n    /**\r\n     * Returns the center point of a Box3.\r\n     *\r\n     * @return - Returns a Vec3.\r\n     */\r\n    center() {\r\n        const result = this.p1.subtract(this.p0);\r\n        result.scaleInPlace(0.5);\r\n        result.addInPlace(this.p0);\r\n        return result;\r\n    }\r\n    /**\r\n     * Converts this Box3 to a Mat4 (a 4x4 matrix). The returned mat4 would transform a unit cube into the shape of the Bounding box.\r\n     *\r\n     * @return - Returns a new Mat4.\r\n     */\r\n    toMat4() {\r\n        const scx = this.p1.x - this.p0.x;\r\n        const scy = this.p1.y - this.p0.y;\r\n        const scz = this.p1.z - this.p0.z;\r\n        return new Mat4(scx, 0, 0, 0, 0, scy, 0, 0, 0, 0, scz, 0, this.p0.x, this.p0.y, this.p0.z, 1.0);\r\n    }\r\n    /**\r\n     * Calculates and returns the bounding Sphere of the Box3\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getBoundingSphere() {\r\n        return new SphereType(this.center(), this.diagonal().length() * 0.5);\r\n    }\r\n    /**\r\n     * Determines if this Box3 intersects a given box value.\r\n     *\r\n     * @param box - The box to check for intersection against.\r\n     * @return - Returns true if the shapes intersect.\r\n     */\r\n    intersectsBox(box) {\r\n        // Using 6 splitting planes to rule out intersections.\r\n        return box.max.x < this.min.x ||\r\n            box.min.x > this.max.x ||\r\n            box.max.y < this.min.y ||\r\n            box.min.y > this.max.y ||\r\n            box.max.z < this.min.z ||\r\n            box.min.z > this.max.z\r\n            ? false\r\n            : true;\r\n    }\r\n    /**\r\n     * Determines if this Box3 intersects a sphere.\r\n     *\r\n     * @param sphere - The sphere to check for intersection against.\r\n     * @return - Returns true if the shapes intersect.\r\n     */\r\n    intersectsSphere(sphere) {\r\n        let closestPoint = new Vec3();\r\n        // Find the point on the AABB closest to the sphere center.\r\n        // this.clampPoint( sphere.center, closestPoint );\r\n        // If that point is inside the sphere, the AABB and sphere intersect.\r\n        return closestPoint.distanceTo(sphere.pos) <= sphere.radius * sphere.radius;\r\n    }\r\n    /**\r\n     * Determines if this Box3 intersects a plane.\r\n     *\r\n     * @param plane - The plane to check for intersection against.\r\n     * @return - The return value.\r\n     */\r\n    intersectsPlane(plane) {\r\n        // We compute the minimum and maximum dot product values. If those values\r\n        // are on the same side (back or front) of the plane, then there is no intersection.\r\n        let min;\r\n        let max;\r\n        if (plane.normal.x > 0) {\r\n            min = plane.normal.x * this.min.x;\r\n            max = plane.normal.x * this.max.x;\r\n        }\r\n        else {\r\n            min = plane.normal.x * this.max.x;\r\n            max = plane.normal.x * this.min.x;\r\n        }\r\n        if (plane.normal.y > 0) {\r\n            min += plane.normal.y * this.min.y;\r\n            max += plane.normal.y * this.max.y;\r\n        }\r\n        else {\r\n            min += plane.normal.y * this.max.y;\r\n            max += plane.normal.y * this.min.y;\r\n        }\r\n        if (plane.normal.z > 0) {\r\n            min += plane.normal.z * this.min.z;\r\n            max += plane.normal.z * this.max.z;\r\n        }\r\n        else {\r\n            min += plane.normal.z * this.max.z;\r\n            max += plane.normal.z * this.min.z;\r\n        }\r\n        return min <= -plane.w && max >= -plane.w;\r\n    }\r\n    /**\r\n     * Clones this Box3 and returns a new Box3.\r\n     * @return - Returns a new Box3.\r\n     */\r\n    clone() {\r\n        return new Box3(this.p0.clone(), this.p1.clone());\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Encodes `Box3` Class as a JSON object for persistence.\r\n     *\r\n     * @return - The json object.\r\n     */\r\n    toJSON() {\r\n        return {\r\n            p0: this.p0.toJSON(),\r\n            p1: this.p1.toJSON(),\r\n        };\r\n    }\r\n    /**\r\n     * Decodes a JSON object to set the state of this class.\r\n     *\r\n     * @param j - The json object.\r\n     */\r\n    fromJSON(j) {\r\n        // We need to verify that p0 and p1 axes are numeric, so in case they are not, we restore them to their default values.\r\n        // This, because 'Infinity' and '-Infinity' are stringified as 'null'.\r\n        const p0 = {\r\n            x: MathFunctions.isNumeric(j.p0.x) ? j.p0.x : Number.POSITIVE_INFINITY,\r\n            y: MathFunctions.isNumeric(j.p0.y) ? j.p0.y : Number.POSITIVE_INFINITY,\r\n            z: MathFunctions.isNumeric(j.p0.z) ? j.p0.z : Number.POSITIVE_INFINITY,\r\n        };\r\n        const p1 = {\r\n            x: MathFunctions.isNumeric(j.p1.x) ? j.p1.x : Number.NEGATIVE_INFINITY,\r\n            y: MathFunctions.isNumeric(j.p1.y) ? j.p1.y : Number.NEGATIVE_INFINITY,\r\n            z: MathFunctions.isNumeric(j.p1.z) ? j.p1.z : Number.NEGATIVE_INFINITY,\r\n        };\r\n        this.p0.fromJSON(p0);\r\n        this.p1.fromJSON(p1);\r\n    }\r\n    /**\r\n     * The setFromFloat32Array method.\r\n     * @param float32array - The float32array value.\r\n     * @private\r\n     */\r\n    setFromFloat32Array(float32array) {\r\n        this.p0 = new Vec3(float32array.buffer, float32array.byteOffset);\r\n        this.p1 = new Vec3(float32array.buffer, float32array.byteOffset + 12);\r\n    }\r\n    /**\r\n     * Calls `toJSON` method and stringifies it.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    toString() {\r\n        // eslint-disable-next-line new-cap\r\n        return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());\r\n    }\r\n}\r\nexport { Box3 };\r\n//# sourceMappingURL=Box3.js.map","/* eslint-disable new-cap */\r\nimport { StringFunctions } from '../Utilities/StringFunctions';\r\nimport { Vec3 } from './Vec3';\r\n/**\r\n * Class representing a plane.\r\n */\r\nclass PlaneType {\r\n    /**\r\n     * Create a plane.\r\n     *\r\n     * @param normal - The normal of the plane.\r\n     * @param w - The w value.\r\n     */\r\n    constructor(normal, w = 0) {\r\n        if (normal instanceof Vec3) {\r\n            this.normal = normal;\r\n        }\r\n        else {\r\n            this.normal = new Vec3();\r\n        }\r\n        this.w = w;\r\n    }\r\n    /**\r\n     * Setter from scalar components.\r\n     *\r\n     * @param x - The x value.\r\n     * @param y - The y value.\r\n     * @param z - The z value.\r\n     * @param w - The w value.\r\n     */\r\n    set(x, y, z, w) {\r\n        this.normal.set(x, y, z);\r\n        this.w = w;\r\n    }\r\n    /**\r\n     * The divideScalar method\r\n     *\r\n     * @param value - The value value.\r\n     */\r\n    divideScalar(value) {\r\n        this.normal.scaleInPlace(1 / value);\r\n        this.w /= value;\r\n    }\r\n    /**\r\n     * Calculates the distance from a point to this plane.\r\n     *\r\n     * @param point - The point value.\r\n     * @return - The return value.\r\n     */\r\n    distanceToPoint(point) {\r\n        return point.dot(this.normal) + this.w;\r\n    }\r\n    /**\r\n     * Normalize this plane in place modifying its values.\r\n     */\r\n    normalizeInPlace() {\r\n        const inverseNormalLength = 1.0 / this.normal.length();\r\n        this.normal.scaleInPlace(inverseNormalLength);\r\n        this.w *= inverseNormalLength;\r\n    }\r\n    /**\r\n     * Clones this plane and returns a new plane.\r\n     *\r\n     * @return - Returns a new plane.\r\n     */\r\n    clone() {\r\n        return new PlaneType(this.normal.clone(), this.w);\r\n    }\r\n    // ///////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @return - The json object.\r\n     */\r\n    toJSON() {\r\n        return {\r\n            normal: this.normal.toJSON(),\r\n            w: this.w,\r\n        };\r\n    }\r\n    fromJSON(json) {\r\n        this.normal.fromJSON(json.normal);\r\n        this.w = json.w;\r\n    }\r\n    /**\r\n     * Calls `toJSON` method and stringifies it.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    toString() {\r\n        return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());\r\n    }\r\n}\r\nexport { PlaneType };\r\n//# sourceMappingURL=PlaneType.js.map","import { Registry } from '../Registry';\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nlet counter = 0;\r\n/**\r\n * Class representing a BaseClass.\r\n * The BaseClass is the foundation class of the SceneTree, as almost all classes derive from it.\r\n */\r\nclass BaseClass {\r\n    /**\r\n     * Create an BaseClass.\r\n     */\r\n    constructor() {\r\n        this.__id = ++counter;\r\n    }\r\n    /**\r\n     * Every instance of each class based on BaseClass is assigned a unique number.\r\n     * This number is not persistent in between different loads of a scene.\r\n     * Returns the unique id of the object.\r\n     * @return - The Id of the object.\r\n     */\r\n    getId() {\r\n        return this.__id;\r\n    }\r\n    /**\r\n     * Returns the unmangled name of the class.\r\n     * @return - The name of the class definition.\r\n     */\r\n    getClassName() {\r\n        return Registry.getClassName(Object.getPrototypeOf(this).constructor);\r\n    }\r\n}\r\nexport { BaseClass };\r\n//# sourceMappingURL=BaseClass.js.map","/** Class representing a BaseEvent. */\r\nclass BaseEvent {\r\n    /**\r\n     * Create an BaseEvent.\r\n     */\r\n    constructor() { }\r\n}\r\nexport { BaseEvent };\r\n//# sourceMappingURL=BaseEvent.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { BaseClass } from './BaseClass';\r\nimport { BaseEvent } from './BaseEvent';\r\n/**\r\n * Provides an interface for emitting events under given names, and registering listeners to those events.\r\n * This is a base class for most classes in the Scene Tree and Renderer, enabling observers to listen to changes throughout the system.\r\n * The interface exposed is similar to [EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter) in Node.\r\n *\r\n * Similar to how the DOM event system in the browser works, events are registered by name.\r\n * Example: Registering a listener for a custom event, and then emitting that event.\r\n * ```javascript\r\n *  const ee = new EventEmitter()\r\n *\r\n *  const eventID = ee.on('myEvent', (event) => {\r\n *    console.log('My Event was emitted:', event)\r\n *  })\r\n *\r\n *  ee.emit('myEvent', { data: 42 })\r\n *  // We no longer want to listen to this event, so let's remove the listener.\r\n *  ee.removeListenerById('myEvent', eventID)\r\n * ```\r\n *\r\n *\r\n */\r\nclass EventEmitter extends BaseClass {\r\n    /**\r\n     * Initializes an empty `listeners` map that will host all the events,\r\n     * which implies that it doesn't allow multiple events with the same name.\r\n     *\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.listeners = {};\r\n    }\r\n    /**\r\n     * Adds a listener function for a given event name.\r\n     *\r\n     * @param eventName - The name of the event.\r\n     * @param listener - The listener function(callback).\r\n     * @return - the id that can be used to remove the listener.\r\n     */\r\n    on(eventName, listener) {\r\n        if (!listener) {\r\n            throw new Error('Missing listener.');\r\n        }\r\n        if (!this.listeners[eventName]) {\r\n            this.listeners[eventName] = [];\r\n        }\r\n        const listeners = this.listeners[eventName];\r\n        if (listeners.includes(listener)) {\r\n            throw new Error(`Listener \"${listener.name}\" already connected to event \"${eventName}\".`);\r\n        }\r\n        // TODO: Deprecate alongside #addListener.\r\n        const id = listeners.length;\r\n        listeners[id] = listener;\r\n        return id;\r\n    }\r\n    /**\r\n     * Similar to the `on` method with the difference that when the event is triggered,\r\n     * it is automatically unregistered meaning that the event listener will be triggered at most one time.\r\n     *\r\n     * Useful for events that we expect to trigger one time, such as when assets load.\r\n     * ```javascript\r\n     * const asset = new Asset();\r\n     * asset.once('loaded', () => {\r\n     *   console.log(\"Yay! the asset is loaded\")\r\n     * })\r\n     * ```\r\n     *\r\n     * @param eventName - The eventName value\r\n     * @param listener - The listener value\r\n     * @return - the id that can be used to remove the listener.\r\n     */\r\n    once(eventName, listener) {\r\n        const cb = (event) => {\r\n            listener(event);\r\n            this.off(eventName, cb);\r\n        };\r\n        return this.on(eventName, cb);\r\n    }\r\n    /**\r\n     * Removes a listener function from the specified event, using either the function or the index id. Depends on what is passed in.\r\n     *\r\n     * @param eventName - The name of the event.\r\n     * @param listener - The listener function or the id number.\r\n     */\r\n    off(eventName, listener) {\r\n        if (!listener) {\r\n            throw new Error('Missing callback function (listener).');\r\n        }\r\n        if (typeof listener == 'number') {\r\n            console.warn('Deprecated. Un-register using the original listener instead.');\r\n            this.removeListenerById(eventName, listener);\r\n            return;\r\n        }\r\n        const listeners = this.listeners[eventName] || [];\r\n        const ids = [];\r\n        listeners.forEach((e, i) => {\r\n            if (e === listener) {\r\n                ids.push(i);\r\n            }\r\n        });\r\n        if (ids.length == 0) {\r\n            throw new Error(`Listener \"${listener.name}\" is not connected to \"${eventName}\" event`);\r\n        }\r\n        else {\r\n            // Note: do not splice the array as that would change the indexes of existing listeners.\r\n            for (const id of ids) {\r\n                listeners[id] = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * remove listener by ID returned from #on\r\n     *\r\n     * @param eventName - The name of the event.\r\n     * @param id - The id returned by addListener\r\n     */\r\n    removeListenerById(eventName, id) {\r\n        const listeners = this.listeners[eventName];\r\n        if (!listeners) {\r\n            console.warn('callback :' + id + ' was not connected to this event:' + eventName);\r\n            return;\r\n        }\r\n        if (!listeners[id])\r\n            throw new Error('Invalid ID');\r\n        // Note: do not splice the array as that would change the indexes of existing listeners.\r\n        listeners[id] = null;\r\n    }\r\n    /**\r\n     * Triggers all listener functions in an event.\r\n     *\r\n     * @param eventName - The name of the event.\r\n     * @param event - The data you want to pass down to all listener functions as parameter.\r\n     *\r\n     */\r\n    emit(eventName, event = new BaseEvent()) {\r\n        const listeners = this.listeners[eventName] || [];\r\n        listeners.forEach((fn) => {\r\n            // Skip disconnected listeners.\r\n            if (fn) {\r\n                fn(event);\r\n            }\r\n        });\r\n    }\r\n}\r\nexport { EventEmitter };\r\n//# sourceMappingURL=EventEmitter.js.map","import { BaseEvent } from '../BaseEvent';\r\nclass ResizedEvent extends BaseEvent {\r\n    constructor(newWidth, newHeight) {\r\n        super();\r\n        this.width = newWidth;\r\n        this.height = newHeight;\r\n    }\r\n}\r\nexport { ResizedEvent };\r\n//# sourceMappingURL=ResizedEvent.js.map","// Taken from here: https://github.com/jakesgordon/bin-packing/blob/master/js/packer.growing.js\r\nimport { EventEmitter } from './EventEmitter';\r\nimport { ResizedEvent } from './Events/ResizedEvent';\r\n/******************************************************************************\r\n\r\nThis is a binary tree based bin packing algorithm that is more complex than\r\nthe simple Packer (packer.js). Instead of starting off with a fixed width and\r\nheight, it starts with the width and height of the first block passed and then\r\ngrows as necessary to accommodate each subsequent block. As it grows it attempts\r\nto maintain a roughly square ratio by making 'smart' choices about whether to\r\ngrow right or down.\r\n\r\nWhen growing, the algorithm can only grow to the right OR down. Therefore, if\r\nthe new block is BOTH wider and taller than the current target then it will be\r\nrejected. This makes it very important to initialize with a sensible starting\r\nwidth and height. If you are providing sorted input (largest first) then this\r\nwill not be an issue.\r\n\r\nA potential way to solve this limitation would be to allow growth in BOTH\r\ndirections at once, but this requires maintaining a more complex tree\r\nwith 3 children (down, right and center) and that complexity can be avoided\r\nby simply choosing a sensible starting block.\r\n\r\nBest results occur when the input blocks are sorted by height, or even better\r\nwhen sorted by max(width,height).\r\n\r\nInputs:\r\n------\r\n\r\n  blocks: array of any objects that have .w and .h attributes\r\n\r\nOutputs:\r\n-------\r\n\r\n  marks each block that fits with a .fit attribute pointing to a\r\n  node with .x and .y coordinates\r\n\r\nExample:\r\n-------\r\n\r\n  var blocks = [\r\n    { w: 100, h: 100 },\r\n    { w: 100, h: 100 },\r\n    { w:  80, h:  80 },\r\n    { w:  80, h:  80 },\r\n    etc\r\n    etc\r\n  ];\r\n\r\n  var packer = new GrowingPacker();\r\n  packer.fit(blocks);\r\n\r\n  for(var n = 0 ; n < blocks.length ; n++) {\r\n    var block = blocks[n];\r\n    if (block.fit) {\r\n      Draw(block.fit.x, block.fit.y, block.w, block.h);\r\n    }\r\n  }\r\n\r\n\r\n******************************************************************************/\r\nclass GrowingPacker extends EventEmitter {\r\n    constructor(w = 0, h = 0) {\r\n        super();\r\n        this.root = {\r\n            x: 0,\r\n            y: 0,\r\n            w: w,\r\n            h: h,\r\n        };\r\n    }\r\n    fit(blocks) {\r\n        const len = blocks.length;\r\n        if (len == 0)\r\n            return;\r\n        let resized = false;\r\n        if (this.root.w < blocks[0].w) {\r\n            this.root.w = blocks[0].w;\r\n            resized = true;\r\n        }\r\n        if (this.root.h < blocks[0].h) {\r\n            this.root.h = blocks[0].h;\r\n            resized = true;\r\n        }\r\n        if (resized) {\r\n            const event = new ResizedEvent(this.root.w, this.root.h);\r\n            this.emit('resized', event);\r\n        }\r\n        const eachBlock = (block) => {\r\n            block.fit = this.__addBlock(block);\r\n        };\r\n        blocks.forEach(eachBlock);\r\n    }\r\n    __addBlock(block) {\r\n        const node = this.findNode(this.root, block.w, block.h);\r\n        if (node)\r\n            return this.splitNode(node, block.w, block.h);\r\n        else\r\n            return this.growNode(block.w, block.h);\r\n    }\r\n    addBlock(block) {\r\n        let resized = false;\r\n        if (this.root.w < block.w) {\r\n            this.root.w = block.w;\r\n            resized = true;\r\n        }\r\n        if (this.root.h < block.h) {\r\n            this.root.h = block.h;\r\n            resized = true;\r\n        }\r\n        if (resized) {\r\n            const event = new ResizedEvent(this.root.w, this.root.h);\r\n            this.emit('resized', event);\r\n        }\r\n        const node = this.findNode(this.root, block.w, block.h);\r\n        if (node)\r\n            return this.splitNode(node, block.w, block.h);\r\n        else\r\n            return this.growNode(block.w, block.h);\r\n    }\r\n    findNode(root, w, h) {\r\n        if (root.used)\r\n            return this.findNode(root.right, w, h) || this.findNode(root.down, w, h);\r\n        else if (w <= root.w && h <= root.h)\r\n            return root;\r\n        else\r\n            return null;\r\n    }\r\n    splitNode(node, w, h) {\r\n        node.used = true;\r\n        node.down = {\r\n            x: node.x,\r\n            y: node.y + h,\r\n            w: node.w,\r\n            h: node.h - h,\r\n        };\r\n        node.right = {\r\n            x: node.x + w,\r\n            y: node.y,\r\n            w: node.w - w,\r\n            h: h,\r\n        };\r\n        return node;\r\n    }\r\n    growNode(w, h) {\r\n        const canGrowDown = w <= this.root.w;\r\n        const canGrowRight = h <= this.root.h;\r\n        const shouldGrowRight = canGrowRight && this.root.h >= this.root.w + w; // attempt to keep square-ish by growing right when height is much greater than width\r\n        const shouldGrowDown = canGrowDown && this.root.w >= this.root.h + h; // attempt to keep square-ish by growing down  when width  is much greater than height\r\n        if (shouldGrowRight)\r\n            return this.growRight(w, h);\r\n        else if (shouldGrowDown)\r\n            return this.growDown(w, h);\r\n        else if (canGrowRight)\r\n            return this.growRight(w, h);\r\n        else if (canGrowDown)\r\n            return this.growDown(w, h);\r\n        else\r\n            return null; // need to ensure sensible root starting size to avoid this happening\r\n    }\r\n    growRight(w, h) {\r\n        this.root = {\r\n            used: true,\r\n            x: 0,\r\n            y: 0,\r\n            w: this.root.w + w,\r\n            h: this.root.h,\r\n            down: this.root,\r\n            right: {\r\n                x: this.root.w,\r\n                y: 0,\r\n                w: w,\r\n                h: this.root.h,\r\n            },\r\n        };\r\n        const node = this.findNode(this.root, w, h);\r\n        let res;\r\n        if (node)\r\n            res = this.splitNode(node, w, h);\r\n        const event = new ResizedEvent(this.root.w, this.root.h);\r\n        this.emit('resized', event);\r\n        return res;\r\n    }\r\n    growDown(w, h) {\r\n        this.root = {\r\n            used: true,\r\n            x: 0,\r\n            y: 0,\r\n            w: this.root.w,\r\n            h: this.root.h + h,\r\n            down: {\r\n                x: 0,\r\n                y: this.root.h,\r\n                w: this.root.w,\r\n                h: h,\r\n            },\r\n            right: this.root,\r\n        };\r\n        const node = this.findNode(this.root, w, h);\r\n        let res;\r\n        if (node)\r\n            res = this.splitNode(node, w, h);\r\n        const event = new ResizedEvent(this.root.w, this.root.h);\r\n        this.emit('resized', event);\r\n        return res;\r\n    }\r\n}\r\nexport { GrowingPacker };\r\n//# sourceMappingURL=GrowingPacker.js.map","// import { BaseEvent } from './BaseEvent'\r\nimport { EventEmitter } from './EventEmitter';\r\nimport { MathFunctions } from './MathFunctions';\r\n// TODO:\r\n// class AllocatorResized extends BaseEvent {\r\n//   id: number\r\n//   allocation: any\r\n//   constructor() {\r\n//     super()\r\n//   }\r\n// }\r\n/**\r\n * An Allocation1D represents an allocated block of memory.\r\n *\r\n */\r\nclass Allocation1D {\r\n    /**\r\n     * Initializes the allocation\r\n     * @param start - The start of the allocated block of memory.\r\n     * @param size - The size of the allocated block of memory.\r\n     */\r\n    constructor(start = 0, size = 0) {\r\n        this.start = start;\r\n        this.size = size;\r\n    }\r\n}\r\n/**\r\n * An 1D allocator is used to manage packing multiple smaller blocks of data\r\n * into a single large block of memory, supporting resizing and re-allocating.\r\n * As allocations are changed, fragmentation occurs as blocks must be moved\r\n *\r\n * Example:\r\n * ```javascript\r\n * const allocator = new Allocator1D()\r\n *\r\n * let memory = new Uint32Array(25)\r\n * allocator.on('resize', () => {\r\n *   memory = new Uint32Array(allocator.reservedSpace)\r\n * })\r\n * allocator.on('dataReallocated', (event) => {\r\n *   // during allocation, a defragment might occur, which means\r\n *   // we need to reload some of our data.\r\n * })\r\n *\r\n * allocator.allocate(1, 5)\r\n * allocator.allocate(2, 10)\r\n * allocator.allocate(3, 10)\r\n * allocator.allocate(4, 20)\r\n * allocator.allocate(3, 20) // resize 3 to grow the allocated space.\r\n * allocator.allocate(1, 7) // resize 1 to fit into the previous space of 3, leaving a new free block.\r\n * allocator.allocate(1, 10) // resize 1 to fit into the previous space of 3, consuming the free block.\r\n * ```\r\n *\r\n */\r\nclass Allocator1D extends EventEmitter {\r\n    /**\r\n     * Initializes the allocator ready to start work\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.freeList = [];\r\n        this.allocations = [];\r\n        this.allocationsMap = {}; // A mapping of id to index within the allocations list\r\n        this.allocatedSpace = 0;\r\n        this.reservedSpace = 0;\r\n        this.freeSpace = 0;\r\n    }\r\n    /**\r\n     * Returns the Allocates for the given Id.\r\n     *\r\n     * @param id - The unique numerical identifer for the block.\r\n     * @return - The allocation\r\n     */\r\n    getAllocation(id) {\r\n        return this.allocations[this.allocationsMap[id]];\r\n    }\r\n    /**\r\n     * Allocates space for a new or existing item. The id is a handle that the consuming code uses to\r\n     * track allocations.\r\n     *\r\n     * @param id - The unique numerical identifer for the block.\r\n     * @param size - The name of the event.\r\n     * @return - The new allocation\r\n     */\r\n    allocate(id, size) {\r\n        if (this.allocationsMap[id] != undefined) {\r\n            const index = this.allocationsMap[id];\r\n            const allocation = this.allocations[index];\r\n            // Resizing smaller\r\n            if (size == allocation.size) {\r\n                return allocation;\r\n            }\r\n            else if (size < allocation.size) {\r\n                // Split this block into 2. We use the first one for our item, and the second is put on the free list.\r\n                const splitBlockSize = allocation.size - size;\r\n                // this.allocations.splice(index + 1, 0, new Allocation1D(allocation.start + size, splitBlockSize))\r\n                this.addBlock(index + 1, new Allocation1D(allocation.start + size, splitBlockSize));\r\n                this.freeBlock(index + 1);\r\n                allocation.size = size;\r\n                return allocation;\r\n            }\r\n            else {\r\n                // Try to consume any free blocks directly to our right.\r\n                const nextIndex = index + 1;\r\n                if (this.freeList.includes(nextIndex) && allocation.size + this.allocations[nextIndex].size >= size) {\r\n                    const freeBlock = this.allocations[nextIndex];\r\n                    if (allocation.size + freeBlock.size == size) {\r\n                        // consume this free block\r\n                        allocation.size += freeBlock.size;\r\n                        this.freeSpace -= freeBlock.size;\r\n                        this.freeList.splice(this.freeList.indexOf(nextIndex), 1);\r\n                        // this.allocations.splice(nextIndex, 1)\r\n                        this.removeBlock(nextIndex);\r\n                        return allocation;\r\n                    }\r\n                    else {\r\n                        // We want to shrink the next block by the amount we consumed\r\n                        const consumed = size - allocation.size;\r\n                        allocation.size += consumed;\r\n                        this.freeSpace -= consumed;\r\n                        freeBlock.start += consumed;\r\n                        freeBlock.size -= consumed;\r\n                        return allocation;\r\n                    }\r\n                }\r\n                else {\r\n                    // free up this slot an find a new one\r\n                    // If the slot was at the end of the allocated memory, just decrement\r\n                    // the allocated space making it immediately available for use.\r\n                    delete this.allocationsMap[id];\r\n                    if (allocation.start + allocation.size == this.allocatedSpace) {\r\n                        this.removeBlock(index);\r\n                        this.allocatedSpace -= allocation.size;\r\n                    }\r\n                    else {\r\n                        this.freeBlock(index);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let freeItemIndex = -1;\r\n        for (let i = 0; i < this.freeList.length; i++) {\r\n            const freeIndex = this.freeList[i];\r\n            const allocation = this.allocations[freeIndex];\r\n            if (allocation.size == size) {\r\n                freeItemIndex = freeIndex;\r\n                break;\r\n            }\r\n            else if (allocation.size > size) {\r\n                freeItemIndex = freeIndex;\r\n            }\r\n        }\r\n        if (freeItemIndex != -1) {\r\n            const freeItem = this.allocations[freeItemIndex];\r\n            this.freeSpace -= freeItem.size;\r\n            this.freeList.splice(this.freeList.indexOf(freeItemIndex), 1);\r\n            if (freeItem.size > size) {\r\n                // Split this block into 2. We use the first one for our item, and the second is put on the free list.\r\n                const splitBlockSize = freeItem.size - size;\r\n                // this.allocations.splice(freeItemIndex + 1, 0, new Allocation1D(freeItem.start + size, splitBlockSize))\r\n                this.addBlock(freeItemIndex + 1, new Allocation1D(freeItem.start + size, splitBlockSize));\r\n                this.freeBlock(freeItemIndex + 1);\r\n                // sort the free list from biggest to smallest\r\n                this.freeList.sort((a, b) => this.allocations[b].size - this.allocations[a].size); // TODO: order is untested.\r\n                this.allocations[freeItemIndex].size = size;\r\n            }\r\n            this.allocationsMap[id] = freeItemIndex;\r\n        }\r\n        else {\r\n            const start = this.allocatedSpace;\r\n            const index = this.allocations.length;\r\n            this.allocatedSpace += size;\r\n            const reserved = MathFunctions.nextPow2(this.allocatedSpace);\r\n            if (reserved != this.reservedSpace) {\r\n                this.reservedSpace = reserved;\r\n                this.emit('resized', { reservedSpace: this.reservedSpace });\r\n            }\r\n            this.allocations.push(new Allocation1D(start, size));\r\n            this.allocationsMap[id] = index;\r\n        }\r\n        return this.allocations[this.allocationsMap[id]];\r\n    }\r\n    /**\r\n     * Adds a new block\r\n     * @private\r\n     *\r\n     * @param index - The index where the block should be inserted.\r\n     * @param allocation - The allocation to insert\r\n     */\r\n    addBlock(index, allocation) {\r\n        this.allocations.splice(index, 0, allocation);\r\n        for (const id in this.allocationsMap) {\r\n            if (this.allocationsMap[id] >= index) {\r\n                this.allocationsMap[id]++;\r\n            }\r\n        }\r\n        for (let i = 0; i < this.freeList.length; i++) {\r\n            if (this.freeList[i] >= index) {\r\n                this.freeList[i]++;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Remove a new block\r\n     * @private\r\n     *\r\n     * @param index - The index where the block should be removed\r\n     */\r\n    removeBlock(index) {\r\n        this.allocations.splice(index, 1);\r\n        for (const id in this.allocationsMap) {\r\n            if (this.allocationsMap[id] > index) {\r\n                this.allocationsMap[id]--;\r\n            }\r\n        }\r\n        for (let i = 0; i < this.freeList.length; i++) {\r\n            if (this.freeList[i] > index) {\r\n                this.freeList[i]--;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Frees a block by either growing neighboring blocks or adding a new free block\r\n     * @private\r\n     *\r\n     * @param index - The index of the block to free.\r\n     */\r\n    freeBlock(index) {\r\n        const allocation = this.allocations[index];\r\n        this.freeSpace += allocation.size;\r\n        // check for free blocks on either side of the allocated space\r\n        // and allow them to consume this block intead of adding a new smaller\r\n        // block.\r\n        const prevIndex = index - 1;\r\n        if (this.freeList.includes(prevIndex)) {\r\n            const prevAllocation = this.allocations[prevIndex];\r\n            prevAllocation.size += allocation.size;\r\n            this.removeBlock(index);\r\n            return;\r\n        }\r\n        const nextIndex = index + 1;\r\n        if (this.freeList.includes(nextIndex)) {\r\n            const nextAllocation = this.allocations[nextIndex];\r\n            nextAllocation.start -= allocation.size;\r\n            nextAllocation.size += allocation.size;\r\n            this.removeBlock(index);\r\n            return;\r\n        }\r\n        this.freeList.push(index);\r\n    }\r\n    /**\r\n     * Deallocate space for an existing item, making it free for other uses.\r\n     *\r\n     * @param id - The unique numerical identifer for the block.\r\n     */\r\n    deallocate(id) {\r\n        const index = this.allocationsMap[id];\r\n        if (index == undefined) {\r\n            throw new Error(`allocation ${id} does not exist.`);\r\n        }\r\n        this.freeBlock(index);\r\n        delete this.allocationsMap[id];\r\n    }\r\n    /**\r\n     * Returns the ratio of fragmented memory over reserved memory.\r\n     *\r\n     * @return The fragmentation ratio. Between 0 and some value less than 1\r\n     */\r\n    getFragmentation() {\r\n        return this.freeSpace / this.allocatedSpace;\r\n    }\r\n    /**\r\n     * Defragment the memory space reducing memory requirements.\r\n     * TODO: Implement this method.\r\n     */\r\n    defragment() {\r\n        // move the freeblocks to the end of the memory so that\r\n        // we can then reduce the memory used.\r\n    }\r\n    /**\r\n     * Checks that the allocations are consistent and not corrupt in any way.\r\n     */\r\n    verifyConsistency() {\r\n        if (Object.keys(this.allocationsMap).length + this.freeList.length != this.allocations.length) {\r\n            throw new Error('number of blocks does not match the number of allocations');\r\n        }\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const id in this.allocationsMap) {\r\n            const index = this.allocationsMap[id];\r\n            if (this.freeList.includes(index)) {\r\n                // eslint-disable-next-line no-throw-literal\r\n                throw new Error('block of used memory is also on the free list');\r\n            }\r\n        }\r\n        let size = 0;\r\n        for (let i = 0; i < this.allocations.length; i++) {\r\n            const allocation = this.allocations[i];\r\n            if (allocation.start != size) {\r\n                // eslint-disable-next-line no-throw-literal\r\n                throw 'blocks of memory are not sequential';\r\n            }\r\n            size += allocation.size;\r\n        }\r\n        if (size != this.allocatedSpace) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw `allocated size: ${this.allocatedSpace}  does not match allocated blocks: ${size}`;\r\n        }\r\n        if (this.reservedSpace < this.allocatedSpace) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw `reserved space: ${this.reservedSpace} is less than allocated space: ${this.allocatedSpace}`;\r\n        }\r\n    }\r\n}\r\nexport { Allocator1D, Allocation1D };\r\n//# sourceMappingURL=Allocator1D.js.map","import { BaseEvent } from '../BaseEvent';\r\nconst POINTER_TYPES = {\r\n    mouse: 'mouse',\r\n    touch: 'touch',\r\n    xr: 'xr',\r\n};\r\nlet capturedItem = null;\r\nclass ZeaPointerEvent extends BaseEvent {\r\n    constructor(pointerType) {\r\n        super();\r\n        this.propagating = true;\r\n        this.pointerType = pointerType;\r\n    }\r\n    stopPropagation() {\r\n        this.propagating = false;\r\n    }\r\n    setCapture(item) {\r\n        capturedItem = item;\r\n    }\r\n    getCapture() {\r\n        return capturedItem;\r\n    }\r\n    releaseCapture() {\r\n        capturedItem = null;\r\n    }\r\n}\r\nexport { ZeaPointerEvent, POINTER_TYPES };\r\n//# sourceMappingURL=ZeaPointerEvent.js.map","import { ZeaPointerEvent } from './ZeaPointerEvent';\r\nclass ZeaUIEvent extends ZeaPointerEvent {\r\n    constructor(pointerType) {\r\n        super(pointerType);\r\n    }\r\n}\r\nexport { ZeaUIEvent };\r\n//# sourceMappingURL=ZeaUIEvent.js.map","import { POINTER_TYPES } from './ZeaPointerEvent';\r\nimport { ZeaUIEvent } from './ZeaUIEvent';\r\nclass ZeaMouseEvent extends ZeaUIEvent {\r\n    constructor(sourceEvent, rect) {\r\n        super(POINTER_TYPES.mouse);\r\n        this.sourceEvent = sourceEvent;\r\n        this.button = sourceEvent.button;\r\n        this.clientX = sourceEvent.clientX;\r\n        this.clientY = sourceEvent.clientY;\r\n        // Disabling devicePixelRatio for now. See: __onResize\r\n        const DPR = 1.0; // window.devicePixelRatio\r\n        // Note: the rendererX/Y values are relative to the viewport,\r\n        // but are available outside the viewport. So when a mouse\r\n        // drag occurs, and drags outside the viewport, these values\r\n        // provide consistent coords.\r\n        // offsetX/Y are only valid inside the viewport and so cause\r\n        // jumps when the mouse leaves the viewport.\r\n        this.rendererX = (this.clientX - rect.left) * DPR;\r\n        this.rendererY = (this.clientY - rect.top) * DPR;\r\n        this.altKey = sourceEvent.altKey;\r\n        this.metaKey = sourceEvent.metaKey;\r\n        this.ctrlKey = sourceEvent.ctrlKey;\r\n        this.shiftKey = sourceEvent.shiftKey;\r\n    }\r\n    stopPropagation() {\r\n        super.stopPropagation();\r\n        if (this.sourceEvent)\r\n            this.sourceEvent.stopPropagation();\r\n    }\r\n    preventDefault() {\r\n        if (this.sourceEvent)\r\n            this.sourceEvent.preventDefault();\r\n    }\r\n}\r\nexport { ZeaMouseEvent };\r\n//# sourceMappingURL=ZeaMouseEvent.js.map","import { Ray, Vec2 } from '../../Math';\r\nimport { POINTER_TYPES } from './ZeaPointerEvent';\r\nimport { ZeaUIEvent } from './ZeaUIEvent';\r\nclass Touch {\r\n    constructor(touch, rect) {\r\n        this.clientX = 0;\r\n        this.clientY = 0;\r\n        this.screenX = 0;\r\n        this.screenY = 0;\r\n        this.pageX = 0;\r\n        this.pageY = 0;\r\n        this.radiusX = 0;\r\n        this.radiusY = 0;\r\n        this.rotationAngle = 0;\r\n        this.force = 0;\r\n        this.altitudeAngle = 0;\r\n        this.azimuthAngle = 0;\r\n        this.touchType = 'direct';\r\n        this.identifier = touch.identifier;\r\n        this.clientX = touch.clientX;\r\n        this.clientY = touch.clientY;\r\n        this.screenX = touch.screenX;\r\n        this.screenY = touch.screenY;\r\n        this.pageX = touch.pageX;\r\n        this.pageY = touch.pageY;\r\n        this.radiusX = touch.radiusX;\r\n        this.radiusY = touch.radiusY;\r\n        this.rotationAngle = touch.rotationAngle;\r\n        this.force = touch.force;\r\n        // this.altitudeAngle = touch.altitudeAngle\r\n        // this.azimuthAngle = touch.azimuthAngle\r\n        // this.touchType = touch.touchType\r\n        // Disabling devicePixelRatio for now. See: __onResize\r\n        const DPR = 1.0; // window.devicePixelRatio\r\n        // Note: the rendererX/Y values are relative to the viewport,\r\n        // but are available outside the viewport. So when a mouse\r\n        // drag occurs, and drags outside the viewport, these values\r\n        // provide consistent coords.\r\n        // offsetX/Y are only valid inside the viewport and so cause\r\n        // jumps when the mouse leaves the viewport.\r\n        this.rendererX = (this.clientX - rect.left) * DPR;\r\n        this.rendererY = (this.clientY - rect.top) * DPR;\r\n        this.touchPos = new Vec2();\r\n        this.touchRay = new Ray();\r\n    }\r\n}\r\nclass ZeaTouchEvent extends ZeaUIEvent {\r\n    constructor(sourceEvent, rect) {\r\n        super(POINTER_TYPES.touch);\r\n        this.touches = [];\r\n        this.changedTouches = [];\r\n        this.targetTouches = [];\r\n        this.altKey = false;\r\n        this.metaKey = false;\r\n        this.ctrlKey = false;\r\n        this.shiftKey = false;\r\n        this.sourceEvent = sourceEvent;\r\n        this.sourceEvent.stopPropagation();\r\n        this.altKey = sourceEvent.altKey;\r\n        this.metaKey = sourceEvent.metaKey;\r\n        this.ctrlKey = sourceEvent.ctrlKey;\r\n        this.shiftKey = sourceEvent.shiftKey;\r\n        for (let i = 0; i < sourceEvent.touches.length; i++) {\r\n            this.touches.push(new Touch(sourceEvent.touches[i], rect));\r\n        }\r\n        if (sourceEvent.changedTouches) {\r\n            for (let i = 0; i < sourceEvent.changedTouches.length; i++) {\r\n                this.changedTouches.push(new Touch(sourceEvent.changedTouches[i], rect));\r\n            }\r\n        }\r\n        if (sourceEvent.targetTouches) {\r\n            for (let i = 0; i < sourceEvent.targetTouches.length; i++) {\r\n                this.targetTouches.push(new Touch(sourceEvent.targetTouches[i], rect));\r\n            }\r\n        }\r\n    }\r\n    stopPropagation() {\r\n        super.stopPropagation();\r\n        if (this.sourceEvent)\r\n            this.sourceEvent.stopPropagation();\r\n    }\r\n    // Touch events are passive and so cannot call prevent default\r\n    // replace with a stub here...\r\n    preventDefault() { }\r\n}\r\nexport { ZeaTouchEvent, Touch };\r\n//# sourceMappingURL=ZeaTouchEvent.js.map","import { ZeaMouseEvent } from './ZeaMouseEvent';\r\nclass ZeaWheelEvent extends ZeaMouseEvent {\r\n    constructor(sourceEvent, rect) {\r\n        super(sourceEvent, rect);\r\n        // @ts-ignore\r\n        this.wheelDelta = sourceEvent.wheelDelta;\r\n        this.deltaMode = sourceEvent.deltaMode;\r\n        this.deltaX = sourceEvent.deltaX;\r\n        this.deltaY = sourceEvent.deltaY;\r\n        this.deltaZ = sourceEvent.deltaZ;\r\n    }\r\n}\r\nexport { ZeaWheelEvent };\r\n//# sourceMappingURL=ZeaWheelEvent.js.map","import { ZeaPointerEvent, POINTER_TYPES } from './ZeaPointerEvent';\r\nclass XRControllerEvent extends ZeaPointerEvent {\r\n    constructor(button, controller) {\r\n        super(POINTER_TYPES.xr);\r\n        this.button = button;\r\n        this.controller = controller;\r\n    }\r\n}\r\nexport { XRControllerEvent };\r\n//# sourceMappingURL=XRControllerEvent.js.map","import { ZeaPointerEvent, POINTER_TYPES } from './ZeaPointerEvent';\r\n// TODO: Once we start the migration to AssemblyScript\r\n// we will need to extract the cotroller data and package\r\n// into this struct. Untill then, we will just put the whole\r\n// controller.\r\n// class XRControllerPose {\r\n//   controller: VRController\r\n//   constructor(controller: VRController) {\r\n//     this.controller = controller\r\n//   }\r\n// }\r\nclass XRPoseEvent extends ZeaPointerEvent {\r\n    constructor(viewport, viewXfo, controllers) {\r\n        super(POINTER_TYPES.xr);\r\n        this.controllers = [];\r\n        this.viewport = viewport;\r\n        this.viewXfo = viewXfo;\r\n        controllers.forEach((controller) => {\r\n            this.controllers.push(controller);\r\n        });\r\n    }\r\n}\r\nexport { XRPoseEvent };\r\n//# sourceMappingURL=XRPoseEvent.js.map","import { EventEmitter } from '../Utilities/index';\r\nlet counter = 0;\r\n/** Class representing a ref counted object. RefCounted\r\n *  objects track ownership and allow explicit cleanup\r\n *  of resources. This is necessary when JavaScript\r\n *  objects own references to GPU resources that need to\r\n *  be cleaned up when the JavaScript object is destroyed.\r\n * @private\r\n */\r\nclass RefCounted extends EventEmitter {\r\n    /**\r\n     * Create a ref counted object.\r\n     */\r\n    constructor() {\r\n        super();\r\n        if (this.constructor.name == 'RefCounted') {\r\n            throw new Error('RefCounted should not be instantiated directly.');\r\n        }\r\n        this.__id = ++counter;\r\n        this.__refs = [];\r\n        this.__destroyed = false;\r\n    }\r\n    /**\r\n     * Returns the unique id of the object. Every Object has a unique\r\n     * identifier which is based on a counter that is incremented.\r\n     * @return - The return value.\r\n     */\r\n    getId() {\r\n        return this.__id;\r\n    }\r\n    /**\r\n     * The numRefs method.\r\n     * @return - The return value.\r\n     */\r\n    numRefs() {\r\n        return this.__refs.length;\r\n    }\r\n    /**\r\n     * The addRef method.\r\n     * @param referer - The referer value.\r\n     * @return - The return value.\r\n     */\r\n    addRef(referer) {\r\n        if (!referer)\r\n            throw new Error('Error in RefCounted.addRef: Must provide a referer');\r\n        // Note: an object can be reffeed multiple times.\r\n        // e.g. we can create a temporary ref while we re-attach a tree item to a new parent.\r\n        this.__refs.push(referer);\r\n        return true;\r\n    }\r\n    /**\r\n     * The removeRef method.\r\n     * @param referer - The referer value.\r\n     */\r\n    removeRef(referer) {\r\n        if (!referer)\r\n            throw new Error('Error in RefCounted.removeRef: Must provide a referer');\r\n        const index = this.__refs.indexOf(referer);\r\n        if (index == -1)\r\n            throw new Error('Error in RefCounted.removeRef: referer not found in refs list.');\r\n        this.__refs.splice(index, 1);\r\n        if (this.__refs.length == 0) {\r\n            this.destroy();\r\n        }\r\n    }\r\n    /**\r\n     * The getRefer method.\r\n     * @param index - The index value.\r\n     * @return - The return value.\r\n     */\r\n    getRefer(index) {\r\n        return this.__refs[index];\r\n    }\r\n    /**\r\n     * The getRefIndex method.\r\n     * @param referer - The referer value.\r\n     * @return - The return value.\r\n     */\r\n    getRefIndex(referer) {\r\n        return this.__refs.indexOf(referer);\r\n    }\r\n    /**\r\n     * Returns true if this object has already been destroyed.\r\n     * @return - Returns true or false.\r\n     */\r\n    isDestroyed() {\r\n        return this.__destroyed;\r\n    }\r\n    /**\r\n     * The destroy method is invoked when the last owner\r\n     * is removed from a RefCounted object. Derived objects can\r\n     * override this method to perform explicit cleanup.\r\n     * The destructing signal is triggered so observers can\r\n     * respond to this objects destruction.\r\n     */\r\n    destroy() {\r\n        this.__destroyed = true;\r\n        // console.log(this.constructor.name + \" destructing\");\r\n        this.emit('destructing');\r\n    }\r\n}\r\nexport { RefCounted };\r\n//# sourceMappingURL=RefCounted.js.map","import { BaseEvent } from '../BaseEvent';\r\nclass ParameterAddedEvent extends BaseEvent {\r\n    constructor(name) {\r\n        super();\r\n        this.name = name;\r\n    }\r\n}\r\nexport { ParameterAddedEvent };\r\n//# sourceMappingURL=ParameterAddedEvent.js.map","import { BaseEvent } from '../BaseEvent';\r\nclass ParameterRemovedEvent extends BaseEvent {\r\n    constructor(name) {\r\n        super();\r\n        this.name = name;\r\n    }\r\n}\r\nexport { ParameterRemovedEvent };\r\n//# sourceMappingURL=ParameterRemovedEvent.js.map","/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable guard-for-in */\r\n/* eslint-disable valid-jsdoc */\r\nimport { EventEmitter } from '../Utilities/EventEmitter';\r\nimport { Registry } from '../Registry';\r\nimport { ParameterAddedEvent } from '../Utilities/Events/ParameterAddedEvent';\r\nimport { ParameterRemovedEvent } from '../Utilities/Events/ParameterRemovedEvent';\r\n/**\r\n * Class that allows other classes to be parameterized by `Parameter` type of objects.\r\n * Not only hosting parameters, but their events.\r\n *\r\n * @extends {EventEmitter}\r\n */\r\nclass ParameterOwner extends EventEmitter {\r\n    /**\r\n     * Creates an instance of ParameterOwner by initializing parameter hosting mappings and events.\r\n     *\r\n     * Every Object has a unique identifier which is based on a counter that is incremented.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.paramEventListenerIDs = {};\r\n        this.paramMapping = {};\r\n        this.params = [];\r\n        this.deprecatedParamMapping = {};\r\n    }\r\n    /**\r\n     * Returns the number of parameters current object has.\r\n     *\r\n     * @return - Amount of parameters in current object.\r\n     */\r\n    getNumParameters() {\r\n        return this.params.length;\r\n    }\r\n    /**\r\n     * Returns all the parameters of the object.\r\n     *\r\n     * @return - Parameter List\r\n     */\r\n    getParameters() {\r\n        return this.params;\r\n    }\r\n    /**\r\n     * Returns the index of a parameter in parameter list.\r\n     *\r\n     * @param paramName - Name of the parameter.\r\n     * @return - Position in the array\r\n     */\r\n    getParameterIndex(paramName) {\r\n        return this.paramMapping[paramName];\r\n    }\r\n    /**\r\n     * Returns `Parameter` object in a given index\r\n     *\r\n     * @param index - Position of the parameter in the array\r\n     * @return - Parameter object value\r\n     */\r\n    getParameterByIndex(index) {\r\n        return this.params[index];\r\n    }\r\n    /**\r\n     * Validates if the specified parameter exists in the object.\r\n     *\r\n     * @param paramName - The parameter name.\r\n     * @return - The return value.\r\n     */\r\n    hasParameter(paramName) {\r\n        return paramName in this.paramMapping;\r\n    }\r\n    /**\r\n     * Add a mapping from one name to a new parameter.\r\n     * This is used to handle migrating parameters to new names.\r\n     *\r\n     * @param key - The parameter name.\r\n     * @param paramName - The parameter name.\r\n     * @return - The return value.\r\n     */\r\n    addParameterDeprecationMapping(key, paramName) {\r\n        this.deprecatedParamMapping[key] = paramName;\r\n    }\r\n    /**\r\n     * Returns `Parameter` object using the given name\r\n     *\r\n     * @param paramName - The parameter name.\r\n     * @return - Parameter object value\r\n     */\r\n    getParameter(paramName) {\r\n        let index = this.paramMapping[paramName];\r\n        if (index == undefined) {\r\n            const newParamName = this.deprecatedParamMapping[paramName];\r\n            if (!newParamName) {\r\n                // TODO: Should this method not return null?\r\n                return null;\r\n                // throw Error(`No Parameter with that name exists: ${paramName} `)\r\n            }\r\n            else {\r\n                console.warn(`Parameter name ${paramName} is now deprecated. Please use ${newParamName} instead.`);\r\n                index = this.paramMapping[newParamName];\r\n            }\r\n        }\r\n        return this.params[index];\r\n    }\r\n    /**\r\n     * This method can be overridden in derived classes\r\n     * to perform general updates (see GLPass or BaseItem).\r\n     * @param event - The event object emitted by the parameter.\r\n     * @private\r\n     */\r\n    parameterValueChanged(event) {\r\n        this.emit('parameterValueChanged', event);\r\n    }\r\n    /**\r\n     * Adds `Parameter` object to the owner's parameter list.\r\n     *\r\n     * @emits `parameterAdded` with the name of the param.\r\n     * @param param - The parameter to add.\r\n     * @return - With `owner` and `valueChanged` event set.\r\n     */\r\n    addParameter(param) {\r\n        return this.insertParameter(param, this.params.length);\r\n    }\r\n    /**\r\n     * Adds `Parameter` object to the owner's parameter list using the index.\r\n     * It replaces the event in the specified index.\r\n     *\r\n     *\r\n     * @emits `parameterAdded` with the name of the param.\r\n     * @param param - The parameter to insert.\r\n     * @param index - The index value.\r\n     * @return - With `owner` and `valueChanged` event set.\r\n     */\r\n    insertParameter(param, index) {\r\n        const name = param.getName();\r\n        if (this.paramMapping[name] != undefined) {\r\n            console.warn('Replacing Parameter:' + name);\r\n            this.removeParameter(name);\r\n        }\r\n        param.setOwner(this);\r\n        this.paramEventListenerIDs[name] = param.on('valueChanged', (event) => {\r\n            // Note: spread operators cause errors on iOS 11.\r\n            const newEvent = { param };\r\n            for (const key in event)\r\n                newEvent[key] = event[key];\r\n            this.parameterValueChanged(newEvent);\r\n        });\r\n        this.params.splice(index, 0, param);\r\n        for (let i = index; i < this.params.length; i++) {\r\n            this.paramMapping[this.params[i].getName()] = i;\r\n        }\r\n        const event = new ParameterAddedEvent(name);\r\n        this.emit('parameterAdded', event);\r\n        return param;\r\n    }\r\n    /**\r\n     * Removes `Parameter` from owner, by using parameter's name.\r\n     * @emits `parameterRemoved` with the name of the param.\r\n     * @param name - The parameter name.\r\n     */\r\n    removeParameter(name) {\r\n        if (this.paramMapping[name] == undefined) {\r\n            throw new Error('Unable to remove Parameter:' + name);\r\n        }\r\n        const index = this.paramMapping[name];\r\n        const param = this.params[this.paramMapping[name]];\r\n        param.removeListenerById('valueChanged', this.paramEventListenerIDs[name]);\r\n        this.params.splice(index, 1);\r\n        delete this.paramMapping[name];\r\n        for (let i = index; i < this.params.length; i++) {\r\n            this.paramMapping[this.params[i].getName()] = i;\r\n        }\r\n        const event = new ParameterRemovedEvent(name);\r\n        this.emit('parameterRemoved', event);\r\n    }\r\n    /**\r\n     * Replaces old `Parameter` by passing a new one with the same name.\r\n     *\r\n     * @param param - The parameter to replace.\r\n     * @return - `Parameter` with `valueChanged` event set.\r\n     */\r\n    replaceParameter(param) {\r\n        const name = param.getName();\r\n        if (this.paramMapping[name] == undefined) {\r\n            throw new Error('Unable to replace Parameter:' + name);\r\n        }\r\n        const index = this.paramMapping[name];\r\n        this.removeParameter(name);\r\n        this.insertParameter(param, index);\r\n        return param;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        const json = {\r\n            type: this.getClassName(),\r\n        };\r\n        const paramsJSON = {};\r\n        let savedParams = 0;\r\n        for (const param of this.params) {\r\n            const paramJSON = param.toJSON(context);\r\n            if (paramJSON) {\r\n                paramsJSON[param.getName()] = paramJSON;\r\n                savedParams++;\r\n            }\r\n        }\r\n        if (savedParams > 0)\r\n            json.params = paramsJSON;\r\n        return json;\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param json - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(json, context) {\r\n        if (json.params) {\r\n            for (const key in json.params) {\r\n                const pj = json.params[key];\r\n                const param = this.getParameter(key);\r\n                if (!param)\r\n                    console.warn('Param not found:' + key);\r\n                else {\r\n                    if (pj.paramPath) {\r\n                        context === null || context === void 0 ? void 0 : context.resolvePath(pj.paramPath, (param) => {\r\n                            this.replaceParameter(param);\r\n                        }, () => {\r\n                            console.warn('Unable to resolve shared parameter:' + pj.paramPath);\r\n                        });\r\n                    }\r\n                    else {\r\n                        param.fromJSON(pj, context);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Uses passed in BinReader object(containing an Int32 array with all the parameters) to reconstruct all parameters state.\r\n     *\r\n     * In each iteration of the array, propType and propName are extracted and\r\n     * used to build the right `Parameter` class. Then all of them are added to the object.\r\n     *\r\n     * @emits `parameterAdded` with the name of the param.\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        // TODO: make this work\r\n        if ((context === null || context === void 0 ? void 0 : context.versions['zea-engine'].compare([0, 0, 3])) >= 0) {\r\n            const numProps = reader.loadUInt32();\r\n            for (let i = 0; i < numProps; i++) {\r\n                const propType = reader.loadStr();\r\n                const propName = reader.loadStr();\r\n                let param = this.getParameter(propName);\r\n                if (!param) {\r\n                    param = Registry.constructClass(propType);\r\n                    if (!param) {\r\n                        console.error('Unable to construct prop:' + propName + ' of type:' + propType);\r\n                        continue;\r\n                    }\r\n                    param.setName(propName);\r\n                    this.addParameter(param);\r\n                }\r\n                param.readBinary(reader, context);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Converts object's JSON value and converts it to a string.\r\n     * @param context\r\n     * @return - String of object's parameter list state.\r\n     */\r\n    toString(context) {\r\n        return JSON.stringify(this.toJSON(), null, 2);\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Clone and Destroy\r\n    /**\r\n     * Copies Parameters from another `ParameterOwner` to current object.\r\n     *\r\n     * @param src - The ParameterOwner copy from.\r\n     * @param context - The context value\r\n     */\r\n    copyFrom(src, context) {\r\n        // Note: Loop over the parameters in reverse order,\r\n        // this is because often, parameter dependencies\r\n        // are bottom to top (bottom params dependent on higher params).\r\n        // This means that as a parameter is set with a new value\r\n        // it will dirty the params below it.\r\n        let i = src.getNumParameters();\r\n        while (i--) {\r\n            const srcParam = src.getParameterByIndex(i);\r\n            const param = this.getParameter(srcParam.getName());\r\n            if (param) {\r\n                // Note: we are not cloning the values.\r\n                param.loadValue(srcParam.value);\r\n            }\r\n            else {\r\n                this.addParameter(srcParam.clone());\r\n            }\r\n        }\r\n    }\r\n}\r\nexport { ParameterOwner };\r\n//# sourceMappingURL=ParameterOwner.js.map","import { BaseEvent } from '../BaseEvent';\r\nclass SelectabilityChangedEvent extends BaseEvent {\r\n    constructor(value) {\r\n        super();\r\n        this.value = value;\r\n    }\r\n}\r\nexport { SelectabilityChangedEvent };\r\n//# sourceMappingURL=SelectabilityChangedEvent.js.map","import { BaseEvent } from '../BaseEvent';\r\nclass SelectedEvent extends BaseEvent {\r\n    constructor(selected) {\r\n        super();\r\n        this.selected = selected;\r\n    }\r\n}\r\nexport { SelectedEvent };\r\n//# sourceMappingURL=SelectedEvent.js.map","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { ParameterOwner } from './ParameterOwner';\r\nimport { BaseEvent } from '../Utilities/BaseEvent';\r\nimport { SelectabilityChangedEvent } from '../Utilities/Events/SelectabilityChangedEvent';\r\nimport { SelectedEvent } from '../Utilities/Events/SelectedEvent';\r\nlet numBaseItems = 0;\r\nclass NameChangedEvent extends BaseEvent {\r\n    constructor(oldName, newName) {\r\n        super();\r\n        this.oldName = oldName;\r\n        this.newName = newName;\r\n    }\r\n}\r\n/**\r\n * Base class for Items in the scene. It can be parameterized and can emit events.\r\n *\r\n * **Events**\r\n * * **nameChanged:** Emitted every time the Item's name is change. mostly in `setName` method.\r\n * * **selectedChanged:** Emitted `selected` status changes, mostly in `setSelected` method.\r\n *\r\n * @extends {ParameterOwner}\r\n */\r\nclass BaseItem extends ParameterOwner {\r\n    /**\r\n     * Create a base item by defining its name.\r\n     *\r\n     * @param name - The name of the base item.\r\n     */\r\n    constructor(name = '') {\r\n        super();\r\n        this.__ownerItem = undefined;\r\n        this.__selectable = true;\r\n        this.__selected = false;\r\n        this.__metaData = {};\r\n        this.__name = name;\r\n        this.__path = [this.__name];\r\n        numBaseItems++;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Static Methods\r\n    /**\r\n     * The getNumBaseItems method returns the total number of base items created.\r\n     * This method is used in debugging memory consumption.\r\n     *\r\n     * @return - Returns the total number of base items created.\r\n     */\r\n    static getNumBaseItems() {\r\n        return numBaseItems;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Name and Path\r\n    /**\r\n     * Returns the name of the base item.\r\n     *\r\n     * @return - Returns the base item name.\r\n     */\r\n    getName() {\r\n        return this.__name;\r\n    }\r\n    /**\r\n     * Sets the name of the base item(Updates path).\r\n     *\r\n     * @emits `nameChanged` with `newName` and `oldName` data.\r\n     * @param name - The base item name.\r\n     */\r\n    setName(name) {\r\n        if (this.__name != name) {\r\n            const oldName = this.__name;\r\n            this.__name = name;\r\n            this.updatePath();\r\n            const event = new NameChangedEvent(oldName, name);\r\n            this.emit('nameChanged', event);\r\n        }\r\n    }\r\n    /**\r\n     * When the name or the hierarchy changes, this method\r\n     * recomputes and caches the path of this item.\r\n     * @private\r\n     */\r\n    updatePath() {\r\n        if (this.__ownerItem == undefined)\r\n            this.__path = [this.__name];\r\n        else {\r\n            this.__path = [...this.__ownerItem.getPath(), this.__name];\r\n        }\r\n    }\r\n    /**\r\n     * Returns the current path of the item in the tree as an array of names.\r\n     *\r\n     * @return - Returns an array.\r\n     */\r\n    getPath() {\r\n        return this.__path;\r\n    }\r\n    // Path Traversal\r\n    /**\r\n     * The resolvePath method traverses the subtree from this item down\r\n     * matching each name in the path with a child until it reaches the\r\n     * end of the path.\r\n     *\r\n     * @param path - The path value.\r\n     * @param index - The index value.\r\n     * @return - The return value.\r\n     */\r\n    resolvePath(path, index = 0) {\r\n        if (index == 0) {\r\n            if (path[0] == '.' || path[0] == this.__name)\r\n                index++;\r\n        }\r\n        if (index == path.length) {\r\n            return this;\r\n        }\r\n        if (path[index] == '>' && index == path.length - 1) {\r\n            return this.getParameter(path[index + 1]);\r\n        }\r\n        // Maybe the name is a parameter name.\r\n        const param = this.getParameter(path[index]);\r\n        if (param) {\r\n            return param;\r\n        }\r\n        throw new Error('Invalid path:' + path + '[' + index + '] member not found');\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Owner Item\r\n    /**\r\n     * The getOwner method returns the current owner of the item.\r\n     * The item is a child of the current owner.\r\n     *\r\n     * @return - Returns the current owner.\r\n     */\r\n    getOwner() {\r\n        // return this.__private.get('ownerItem');\r\n        return this.__ownerItem;\r\n    }\r\n    /**\r\n     * The setOwner method assigns a new owner to the item.\r\n     *\r\n     * @param ownerItem - The new owner item.\r\n     */\r\n    setOwner(ownerItem) {\r\n        // this.__private.set(ownerItem, ownerItem);\r\n        if (this.__ownerItem !== ownerItem) {\r\n            this.__ownerItem = ownerItem;\r\n            this.updatePath();\r\n        }\r\n        else if (!ownerItem) {\r\n            this.__ownerItem = undefined;\r\n            this.updatePath();\r\n        }\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Selectability and Selection\r\n    /**\r\n     * Returns a boolean indicating if this item is selectable.\r\n     *\r\n     * @return - Returns a boolean indicating if the item is selectable.\r\n     */\r\n    isSelectable() {\r\n        return this.__selectable;\r\n    }\r\n    /**\r\n     * Modifies the selectability of this item.\r\n     *\r\n     * @param val - A boolean indicating the selectability of the item.\r\n     * @return - Returns true if value changed.\r\n     */\r\n    setSelectable(val) {\r\n        if (this.__selectable != val) {\r\n            this.__selectable = val;\r\n            let event = new SelectabilityChangedEvent(this.__selectable);\r\n            this.emit('selectabilityChanged', event);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * The isSelected method.\r\n     * @return - The return value.\r\n     */\r\n    isSelected() {\r\n        return this.__selected;\r\n    }\r\n    /**\r\n     * Changes the current state of the selection of this item.\r\n     *\r\n     * @emits `selectedChanged` with selected state\r\n     * @param sel - Boolean indicating the new selection state.\r\n     */\r\n    setSelected(sel) {\r\n        this.__selected = sel;\r\n        let event = new SelectedEvent(this.__selected);\r\n        this.emit('selectedChanged', event);\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Metadata\r\n    /**\r\n     * Gets Item's meta-data value by passing the `key` string.\r\n     *\r\n     * @param key - The key value under which to check for metadata.\r\n     * @return - Returns the metadata associated with the given key.\r\n     */\r\n    getMetadata(key) {\r\n        return this.__metaData[key];\r\n    }\r\n    /**\r\n     * Checks to see if there is metadata for a given key.\r\n     *\r\n     * @param key - The key value under which to check for metadata.\r\n     * @return - Returns `true` if metadata exists under the given key, otherwise returns `false`.\r\n     */\r\n    hasMetadata(key) {\r\n        return key in this.__metaData;\r\n    }\r\n    /**\r\n     * Assigns metadata to a given key.\r\n     *\r\n     * @param key - The key value under which the metadata is is going to be saved.\r\n     * @param metaData - The metaData value.\r\n     */\r\n    setMetadata(key, metaData) {\r\n        this.__metaData[key] = metaData;\r\n    }\r\n    /**\r\n     * Removes metadata for a given key.\r\n     *\r\n     * @param key - The key value.\r\n     */\r\n    deleteMetadata(key) {\r\n        delete this.__metaData[key];\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Encodes the current object as a json object.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        const json = super.toJSON(context);\r\n        json.name = this.__name;\r\n        return json;\r\n    }\r\n    /**\r\n     * Decodes a json object for this type.\r\n     *\r\n     * @param json - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(json, context) {\r\n        if (json.name)\r\n            this.__name = json.name;\r\n        super.fromJSON(json, context);\r\n    }\r\n    /**\r\n     * Sets state of current Item(Including parameters) using a binary reader object.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        // read the type, but don't use it. This line must not be removed.\r\n        // as the binary pointer is incremented.\r\n        /*const type = */ reader.loadStr();\r\n        this.setName(reader.loadStr());\r\n        // Note: parameters follow name...\r\n        super.readBinary(reader, context);\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Clone and Destroy\r\n    /**\r\n     * Clones this base item and returns a new base item.\r\n     *\r\n     * **Note:** Each class should implement clone to be clonable.\r\n     * @param context - The context value.\r\n     */\r\n    clone(context) {\r\n        throw new Error(this.constructor.name + ' does not implement its clone method');\r\n    }\r\n    /**\r\n     * When a BaseItem is cloned, initially the constructor is\r\n     * called to generate a new instance. This instance then copies\r\n     * its values from the source using this method.\r\n     * This method copies any relevant data from the source object to\r\n     * ensure that it represents a valid clone.\r\n     * Derived classes override this method to copy any relevant\r\n     * data from the source object.\r\n     *\r\n     * @param src - The BaseItem to copy from.\r\n     * @param context - The context value\r\n     */\r\n    copyFrom(src, context) {\r\n        super.copyFrom(src, context);\r\n        this.setName(src.getName());\r\n    }\r\n}\r\nexport { BaseItem };\r\n//# sourceMappingURL=BaseItem.js.map","const getFileFolder = function (filePath) {\r\n    return filePath.substring(0, filePath.lastIndexOf('/')) + '/';\r\n};\r\nconst loadFile = function (url, responseType, onSucceed, onFail, onProgress = undefined) {\r\n    try {\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.responseType = responseType;\r\n        xhr.addEventListener('timeout', (event) => {\r\n            throw new Error('The request for ' + url + ' timed out.');\r\n        });\r\n        xhr.addEventListener('error', (event) => {\r\n            throw new Error('The request for ' + url + ': xhr.readyState:' + xhr.readyState);\r\n            onFail(xhr.statusText);\r\n        });\r\n        xhr.addEventListener('abort', (event) => {\r\n            throw new Error('The request for ' + url + ': xhr.readyState:' + xhr.readyState);\r\n            onFail(xhr.statusText);\r\n        });\r\n        xhr.addEventListener('progress', (event) => {\r\n            if (onProgress)\r\n                onProgress(event.total, event.loaded);\r\n        });\r\n        xhr.addEventListener('loadend', (event) => {\r\n            if (xhr.status == 200)\r\n                onSucceed(xhr);\r\n            else\r\n                onFail(xhr.statusText);\r\n        });\r\n        xhr.open('GET', url, true);\r\n        xhr.send();\r\n        // xhr.open();\r\n    }\r\n    catch (err) {\r\n        onFail(err);\r\n    }\r\n};\r\nconst loadTextfile = function (url, onSucceed, onFail = undefined, onProgress = undefined) {\r\n    loadFile(url, 'text', (xhr) => {\r\n        onSucceed(xhr.responseText);\r\n    }, (statusText) => {\r\n        if (onFail != undefined)\r\n            onFail(statusText);\r\n        else {\r\n            throw new Error('Unable to XHR File:' + url);\r\n        }\r\n    }, onProgress);\r\n};\r\nconst loadJSONfile = function (url, onSucceed, onFail = undefined, onProgress = undefined) {\r\n    loadFile(url, 'json', (xhr) => {\r\n        onSucceed(xhr.response, xhr);\r\n    }, (statusText) => {\r\n        if (onFail != undefined)\r\n            onFail(statusText);\r\n        else {\r\n            throw new Error('Unable to XHR File:' + url);\r\n        }\r\n    }, onProgress);\r\n};\r\nconst loadXMLfile = function (url, onSucceed, onFail = undefined, onProgress = undefined) {\r\n    loadFile(url, 'document', (xhr) => {\r\n        onSucceed(xhr.responseXML);\r\n    }, (statusText) => {\r\n        if (onFail != undefined)\r\n            onFail(statusText);\r\n        else {\r\n            throw new Error('Unable to XHR File:' + url);\r\n        }\r\n    }, onProgress);\r\n};\r\nconst loadBinfile = function (url, onSucceed, onFail = undefined, onProgress = undefined) {\r\n    loadFile(url, 'arraybuffer', (xhr) => {\r\n        onSucceed(xhr.response);\r\n    }, (statusText) => {\r\n        if (onFail != undefined)\r\n            onFail(statusText);\r\n        else {\r\n            throw new Error('Unable to XHR File:' + url);\r\n        }\r\n    }, onProgress);\r\n};\r\nexport { getFileFolder, loadTextfile, loadJSONfile, loadXMLfile, loadBinfile };\r\n//# sourceMappingURL=Utils.js.map","import { SystemDesc } from '../../SystemDesc';\r\n// @ts-ignore\r\nimport ArchiveUnpackerWorker from 'web-worker:./ArchiveUnpacker-worker.js';\r\n// import ArchiveUnpackerWorker from './ArchiveUnpackerWorker'\r\n// For synchronous loading, uncomment these lines.\r\n// import {\r\n//     ResourceLoaderWorker_onmessage\r\n// } from './ArchiveUnpackerWorker';\r\nfunction checkStatus(response) {\r\n    if (!response.ok) {\r\n        return false;\r\n    }\r\n    return response;\r\n}\r\nconst numCores = SystemDesc.hardwareConcurrency - 1; // always leave one main thread code spare.\r\n/**\r\n * Archive unpacker plugin.\r\n */\r\nclass ArchiveUnpackerPlugin {\r\n    constructor() {\r\n        this.__callbacks = {};\r\n        this.__workers = [];\r\n        this.__nextWorker = 0;\r\n    }\r\n    init(resourceLoader) {\r\n        this.resourceLoader = resourceLoader;\r\n    }\r\n    /**\r\n     * The type of file this plugin handles.\r\n     * @return The type of file.\r\n     */\r\n    getType() {\r\n        return 'archive';\r\n    }\r\n    /**\r\n     * The __getWorker method.\r\n     * @return - The return value.\r\n     * @private\r\n     */\r\n    __getWorker() {\r\n        const __constructWorker = () => {\r\n            return new Promise((resolve, reject) => {\r\n                //@ts-ignore\r\n                const worker = new ArchiveUnpackerWorker();\r\n                worker.postMessage({\r\n                    type: 'init',\r\n                });\r\n                worker.onmessage = (event) => {\r\n                    if (event.data.type === 'WASM_LOADED') {\r\n                        resolve(worker);\r\n                    }\r\n                    else if (event.data.type === 'FINISHED') {\r\n                        // const data = event.data\r\n                        // const text = [\r\n                        //   '==================== ArchiveUnpackerWorker.js ====================',\r\n                        //   `Filename: ${data.resourceId}`,\r\n                        //   '------------------------------------------------------',\r\n                        // ];\r\n                        // for(const file in data.entries) {\r\n                        //   text.push(`${file}:${data.entries[file].byteLength}`);\r\n                        // }\r\n                        // console.log(text.join('\\n'))\r\n                        this.__onFinishedReceiveFileData(event.data);\r\n                    }\r\n                    else if (event.data.type === 'ERROR') {\r\n                        const data = event.data;\r\n                        reject(new Error(`Unable to load Resource: ${data.resourceId}`));\r\n                    }\r\n                };\r\n            });\r\n        };\r\n        this.__nextWorker = (this.__nextWorker + 1) % numCores;\r\n        if (this.__workers[this.__nextWorker] == undefined)\r\n            this.__workers[this.__nextWorker] = __constructWorker();\r\n        return this.__workers[this.__nextWorker];\r\n    }\r\n    /**\r\n     * The __terminateWorkers value.\r\n     * @private\r\n     */\r\n    __terminateWorkers() {\r\n        for (const worker of this.__workers)\r\n            worker.terminate();\r\n        this.__workers = [];\r\n    }\r\n    /**\r\n     * Loads an archive file, returning a promise that resolves to the JSON data value.\r\n     * Note: using the resource loader to centralize data loading enables progress to be tracked and displayed\r\n     * @param url - The url of the data to load.\r\n     * @return - The promise value.\r\n     */\r\n    loadFile(url) {\r\n        this.resourceLoader.incrementWorkload(1); //  start loading.\r\n        const promise = new Promise((resolve, reject) => {\r\n            if (!(url in this.__callbacks))\r\n                this.__callbacks[url] = [];\r\n            this.__callbacks[url].push(resolve);\r\n            fetch(url)\r\n                .then((response) => {\r\n                this.resourceLoader.incrementWorkDone(1); // done loading\r\n                if (checkStatus(response))\r\n                    return response.arrayBuffer();\r\n                else {\r\n                    reject(new Error(`loadArchive: ${response.status} - ${response.statusText} : ${url}`));\r\n                    return null;\r\n                }\r\n            })\r\n                .then((buffer) => {\r\n                const resourceId = url;\r\n                if (!(resourceId in this.__callbacks))\r\n                    this.__callbacks[resourceId] = [];\r\n                this.__callbacks[resourceId].push(resolve);\r\n                this.__getWorker().then((worker) => {\r\n                    worker.postMessage({\r\n                        type: 'unpack',\r\n                        resourceId,\r\n                        buffer,\r\n                    });\r\n                });\r\n            });\r\n        }\r\n        //() => {} TODO: is this ok to remove?\r\n        );\r\n        return promise;\r\n    }\r\n    /**\r\n     * The __onFinishedReceiveFileData method.\r\n     * @param fileData - The fileData value.\r\n     * @private\r\n     */\r\n    __onFinishedReceiveFileData(fileData) {\r\n        const resourceId = fileData.resourceId;\r\n        const callbacks = this.__callbacks[resourceId];\r\n        if (callbacks) {\r\n            for (const callback of callbacks) {\r\n                callback(fileData.entries);\r\n            }\r\n            delete this.__callbacks[resourceId];\r\n        }\r\n    }\r\n    shutDownWorkers() {\r\n        this.__workers.forEach((workerPromise) => {\r\n            workerPromise.then((worker) => {\r\n                worker.terminate();\r\n            });\r\n        });\r\n    }\r\n}\r\nexport { ArchiveUnpackerPlugin };\r\n//# sourceMappingURL=ArchiveUnpackerPlugin.js.map","/* eslint-disable require-jsdoc */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable guard-for-in */\r\nimport { EventEmitter } from '../Utilities/index';\r\n/**\r\n * Class for delegating resource loading, enabling an abstraction of a cloud file system to be implemented.\r\n *\r\n * The resource loader can be used to load data, where it provides central tracking of loading progress and functionality to load various file types, including compressed archives.\r\n * The plugins script must be loaded along with the engine\r\n *\r\n * ```html\r\n *  <script crossorigin src=\"libs/zea-engine/dist/plugins.umd.js\"></script>\r\n * ```\r\n *\r\n * To load a 'text' file.\r\n * ```javascript\r\n *   resourceLoader.loadFile('text', url).then((txt) =>{\r\n *      console.log(txt)\r\n *   })\r\n * ```\r\n *\r\n * To load a 'JSON' file.\r\n * ```javascript\r\n *   resourceLoader.loadFile('json', url).then((txt) =>{\r\n *      console.log(json)\r\n *   })\r\n * ```\r\n *\r\n * To load a 'binary' file.\r\n * ```javascript\r\n *   resourceLoader.loadFile('binary', url).then((arrayBuffer) =>{\r\n *      console.log(arrayBuffer.length)\r\n *   })\r\n * ```\r\n *\r\n * To load an 'archive' file that is a compressed archive containing multiple sub-files.\r\n * ```javascript\r\n *   resourceLoader.loadFile('archive', url).then((entries) =>{\r\n *      console.log(entries)\r\n *   })\r\n * ```\r\n *\r\n * **Events**\r\n * * **loaded:** emitted when a file has finished loading\r\n * * **progressIncremented:** emitted when a loading of processing task has been incremented\r\n * * **allResourcesLoaded:** emitted when all outstanding resources are loaded. This event can be used to signal the completion of load.\r\n */\r\nclass ResourceLoader extends EventEmitter {\r\n    /**\r\n     * Create a resource loader.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.baseUrl = '';\r\n        this.__totalWork = 0;\r\n        this.__doneWork = 0;\r\n        this.plugins = {};\r\n        this.systemUrls = {};\r\n        const baseUrl = 'https://storage.googleapis.com/visualive-tmp/zea-engine-resources';\r\n        this.systemUrls['ZeaEngine/Vive.vla'] = baseUrl + '/Vive.vla';\r\n        this.systemUrls['ZeaEngine/Oculus.vla'] = baseUrl + '/Oculus.vla';\r\n        // Common resources are used by systems such at the renderer and VR controllers.\r\n        // Any asset that will probably be used my multiple different independent objects\r\n        // should be loaded here. (For now, it is being used to load VR Controller assets.)\r\n        this.commonResources = {};\r\n    }\r\n    // /////////////////////////////////////////////////\r\n    // Register plugins.\r\n    registerPlugin(plugin) {\r\n        plugin.init(this);\r\n        this.plugins[plugin.getType()] = plugin;\r\n    }\r\n    /**\r\n     * Loads a  file, returning a promise that resolves to the JSON data value.\r\n     * Note: using the resource loader to centralize data loading enables progress to be tracked and displayed\r\n     * @param url - The url of the data to load.\r\n     * @return - The promise value.\r\n     */\r\n    loadFile(type, url) {\r\n        const plugin = this.plugins[type];\r\n        if (!plugin) {\r\n            throw new Error(`There's no plugin registered for the type of file \"${type}\". Did you add the plugins script? See: https://docs.zea.live/zea-engine/#/adding-default-plugins`);\r\n        }\r\n        this.incrementWorkload();\r\n        const promise = plugin.loadFile(url);\r\n        promise.then(() => {\r\n            this.incrementWorkDone();\r\n            this.emit('loaded', { url });\r\n        }, () => {\r\n            // Error\r\n            this.incrementWorkDone();\r\n        });\r\n        return promise;\r\n    }\r\n    /**\r\n     * Returns a previously stored common resource. Typically this would be a VR asset.\r\n     *\r\n     * @param resourceId - The resourceId value.\r\n     * @return - The common resource if it exists\r\n     */\r\n    getCommonResource(resourceId) {\r\n        return this.commonResources[resourceId];\r\n    }\r\n    /**\r\n     * Saves a common resource for reuse by other tools. Typically this would be a VR asset.\r\n     *\r\n     * @param resourceId - The resourceId value.\r\n     * @param resource - The common resource to store\r\n     */\r\n    setCommonResource(resourceId, resource) {\r\n        this.commonResources[resourceId] = resource;\r\n    }\r\n    // /////////////////////////////////////////////////\r\n    // Work\r\n    /**\r\n     * Increments the amount of work to be done causing a 'progressIncremented' event to be emitted\r\n     * As the workload is incremented, the progress might retract as a lower proportion of the work\r\n     * is then considered done. Only once this work is completed, and the 'incrementWorkDone', the\r\n     * progress will increment.\r\n     *\r\n     * @param amount - The amount value.\r\n     */\r\n    incrementWorkload(amount = 1) {\r\n        this.__totalWork += amount;\r\n        const percent = (this.__doneWork / this.__totalWork) * 100;\r\n        this.emit('progressIncremented', { percent });\r\n    }\r\n    /**\r\n     * Increments the amount of work done causing a 'progressIncremented' event to be emitted.\r\n     * If 5 items of work have been added using #incrementWorkload, and subsequently 3 items have\r\n     * been completed and #incrementWorkDone called. The progress will be at 3/5, or 60%\r\n     *\r\n     * @param amount - The amount value.\r\n     */\r\n    incrementWorkDone(amount = 1) {\r\n        this.__doneWork += amount;\r\n        const percent = (this.__doneWork / this.__totalWork) * 100;\r\n        this.emit('progressIncremented', { percent });\r\n        if (this.__doneWork > this.__totalWork) {\r\n            throw new Error('Mismatch between work loaded and work done.');\r\n        }\r\n    }\r\n}\r\nconst resourceLoader = new ResourceLoader();\r\nimport { ArchiveUnpackerPlugin } from './ResourceLoader/ArchiveUnpackerPlugin';\r\nimport { JsonLoaderPlugin } from './ResourceLoader/JsonLoaderPlugin';\r\nimport { TextLoaderPlugin } from './ResourceLoader/TextLoaderPlugin';\r\nimport { BinaryLoaderPlugin } from './ResourceLoader/BinaryLoaderPlugin';\r\nconst archiveUnpackerPlugin = new ArchiveUnpackerPlugin();\r\nresourceLoader.registerPlugin(archiveUnpackerPlugin);\r\nconst jsonLoaderPlugin = new JsonLoaderPlugin();\r\nresourceLoader.registerPlugin(jsonLoaderPlugin);\r\nconst textLoaderPlugin = new TextLoaderPlugin();\r\nresourceLoader.registerPlugin(textLoaderPlugin);\r\nconst binaryLoaderPlugin = new BinaryLoaderPlugin();\r\nresourceLoader.registerPlugin(binaryLoaderPlugin);\r\nexport { ResourceLoader, resourceLoader };\r\n//# sourceMappingURL=resourceLoader.js.map","function checkStatus(response) {\r\n    if (!response.ok) {\r\n        return false;\r\n    }\r\n    return response;\r\n}\r\n/**\r\n * JSON loader plugin.\r\n */\r\nclass JsonLoaderPlugin {\r\n    init(resourceLoader) {\r\n        this.resourceLoader = resourceLoader;\r\n    }\r\n    /**\r\n     * The type of file this plugin handles.\r\n     * @return The type of file.\r\n     */\r\n    getType() {\r\n        return 'json';\r\n    }\r\n    loadFile(url) {\r\n        this.resourceLoader.incrementWorkload(1);\r\n        const promise = new Promise((resolve, reject) => {\r\n            fetch(url).then((response) => {\r\n                this.resourceLoader.incrementWorkDone(1);\r\n                if (checkStatus(response))\r\n                    resolve(response.json());\r\n                else\r\n                    reject(`loadJSON: ${response.status} - ${response.statusText} : ${url}`);\r\n            });\r\n        }\r\n        // () => {}\r\n        );\r\n        return promise;\r\n    }\r\n}\r\nexport { JsonLoaderPlugin };\r\n//# sourceMappingURL=JsonLoaderPlugin.js.map","function checkStatus(response) {\r\n    if (!response.ok) {\r\n        return false;\r\n    }\r\n    return response;\r\n}\r\n/**\r\n * Text loader plugin.\r\n */\r\nclass TextLoaderPlugin {\r\n    init(resourceLoader) {\r\n        this.resourceLoader = resourceLoader;\r\n    }\r\n    /**\r\n     * The type of file this plugin handles.\r\n     * @return The type of file.\r\n     */\r\n    getType() {\r\n        return 'text';\r\n    }\r\n    loadFile(url) {\r\n        this.resourceLoader.incrementWorkload(1);\r\n        const promise = new Promise((resolve, reject) => {\r\n            fetch(url).then((response) => {\r\n                this.resourceLoader.incrementWorkDone(1);\r\n                if (checkStatus(response))\r\n                    resolve(response.text());\r\n                else\r\n                    reject(`loadText: ${response.status} - ${response.statusText} : ${url}`);\r\n            });\r\n        });\r\n        return promise;\r\n    }\r\n}\r\nexport { TextLoaderPlugin };\r\n//# sourceMappingURL=TextLoaderPlugin.js.map","function checkStatus(response) {\r\n    if (!response.ok) {\r\n        return false;\r\n    }\r\n    return response;\r\n}\r\n/**\r\n * Binary loader plugin.\r\n */\r\nclass BinaryLoaderPlugin {\r\n    init(resourceLoader) {\r\n        this.resourceLoader = resourceLoader;\r\n    }\r\n    /**\r\n     * The type of file this plugin handles.\r\n     * @return The type of file.\r\n     */\r\n    getType() {\r\n        return 'binary';\r\n    }\r\n    loadFile(url) {\r\n        this.resourceLoader.incrementWorkload(1);\r\n        const promise = new Promise((resolve, reject) => {\r\n            fetch(url).then((response) => {\r\n                this.resourceLoader.incrementWorkDone(1);\r\n                if (checkStatus(response))\r\n                    resolve(response.arrayBuffer());\r\n                else\r\n                    reject(`loadBinary: ${response.status} - ${response.statusText} : ${url}`);\r\n            });\r\n        }\r\n        // () => {}\r\n        );\r\n        return promise;\r\n    }\r\n}\r\nexport { BinaryLoaderPlugin };\r\n//# sourceMappingURL=BinaryLoaderPlugin.js.map","/**\r\n * Class designed to store version data. Widely used in the zea engine for backwards compatibility.\r\n */\r\nclass Version {\r\n    /**\r\n     * Creates a version.\r\n     * The version string should have the following structure:\r\n     * major, minor and patch separated by a dot(`.`) and parts separated by a dash(`-`).\r\n     *\r\n     * @param versionStr - The version string value.\r\n     */\r\n    constructor(versionStr = '') {\r\n        this.branch = '';\r\n        if (versionStr) {\r\n            const parts = versionStr.split('-');\r\n            const numbers = parts[0].split('.');\r\n            this.major = parseInt(numbers[0]);\r\n            this.minor = parseInt(numbers[1]);\r\n            this.patch = parseInt(numbers[2]);\r\n            if (parts.length == 2)\r\n                this.branch = parts[1];\r\n        }\r\n        else {\r\n            this.major = 0;\r\n            this.minor = 0;\r\n            this.patch = 0;\r\n        }\r\n    }\r\n    /**\r\n     * Compare a version object against a version numbers array.\r\n     *\r\n     * @param numbers - An array containing 3 version numbers. [Major, Minor, Patch]\r\n     * @return - return positive: v1 > v2, zero:v1 == v2, negative: v1 < v2\r\n     */\r\n    compare(numbers) {\r\n        // https://stackoverflow.com/questions/6832596/how-to-compare-software-version-number-using-js-only-number\r\n        // 2nd answer.\r\n        const v1 = [this.major, this.minor, this.patch];\r\n        for (let i = 0; i < 3; i++) {\r\n            if (v1[i] !== numbers[i])\r\n                return v1[i] - numbers[i];\r\n        }\r\n        return 0;\r\n    }\r\n}\r\nexport { Version };\r\n//# sourceMappingURL=Version.js.map","/* eslint-disable no-unused-vars */\r\nimport { Vec2, Vec3, Quat, Color, Box2, Box3 } from '../Math/index';\r\nimport { MathFunctions } from '../Utilities/MathFunctions';\r\n/**\r\n * Reads binary data in a specific encoding. Used in loading binary data such as zcad files.\r\n */\r\nclass BinReader {\r\n    /**\r\n     * Create a bin reader.\r\n     *\r\n     * @param data - The data buffer.\r\n     * @param byteOffset - The byte offset value to start reading the buffer.\r\n     * @param isMobileDevice - The isMobileDevice value.\r\n     */\r\n    constructor(data, byteOffset = 0, isMobileDevice = true) {\r\n        this.__data = data;\r\n        this.__byteOffset = byteOffset;\r\n        this.__dataView = new DataView(this.__data);\r\n        this.__isMobileDevice = isMobileDevice;\r\n        this.utf8decoder = new TextDecoder();\r\n    }\r\n    /**\r\n     * Returns state of whether or not the `BinReader` object was instantiated from a mobile device.\r\n     *\r\n     * @return - Returns true is a mobile device is detected.\r\n     */\r\n    get isMobileDevice() {\r\n        return this.__isMobileDevice;\r\n    }\r\n    /**\r\n     * Returns the data buffer we're reading from.\r\n     *\r\n     * @return - The data buffer we are reading from,\r\n     */\r\n    get data() {\r\n        return this.__data;\r\n    }\r\n    /**\r\n     * Returns the length of the buffer.\r\n     *\r\n     * @return - The total length of the buffer\r\n     */\r\n    get byteLength() {\r\n        return this.__dataView.byteLength;\r\n    }\r\n    /**\r\n     * Returns remaining length of the buffer to read.\r\n     *\r\n     * @return - The remaining length of the buffer to read.\r\n     */\r\n    get remainingByteLength() {\r\n        return this.__dataView.byteLength - this.__byteOffset;\r\n    }\r\n    /**\r\n     * Returns current byte offset in the buffer.\r\n     * @return - The current offset in the binary buffer\r\n     */\r\n    pos() {\r\n        return this.__byteOffset;\r\n    }\r\n    /**\r\n     * Sets the byte offset value.\r\n     * @param byteOffset - The byteOffset param.\r\n     */\r\n    seek(byteOffset) {\r\n        this.__byteOffset = byteOffset;\r\n    }\r\n    /**\r\n     * Adds offset bytes to current offset value.\r\n     *\r\n     * @param byteOffset - The byte Offset amount.\r\n     */\r\n    advance(byteOffset) {\r\n        this.__byteOffset += byteOffset;\r\n    }\r\n    /**\r\n     * Returns the unsigned Uint8 value at current byte offset position,\r\n     * and adds one byte to the offset.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    loadUInt8() {\r\n        const result = this.__dataView.getUint8(this.__byteOffset);\r\n        this.__byteOffset += 1;\r\n        return result;\r\n    }\r\n    /**\r\n     * Returns the unsigned Uint16 value at current byte offset position,\r\n     * and adds two bytes to the offset.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    loadUInt16() {\r\n        const result = this.__dataView.getUint16(this.__byteOffset, true);\r\n        this.__byteOffset += 2;\r\n        return result;\r\n    }\r\n    /**\r\n     * Returns the unsigned Uint32 value at current byte offset position,\r\n     * and adds four bytes to the offset.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    loadUInt32() {\r\n        const result = this.__dataView.getUint32(this.__byteOffset, true);\r\n        this.__byteOffset += 4;\r\n        return result;\r\n    }\r\n    /**\r\n     * Returns the signed Int32 value at current byte offset position,\r\n     * and adds four bytes to the offset.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    loadSInt32() {\r\n        const result = this.__dataView.getInt32(this.__byteOffset, true);\r\n        this.__byteOffset += 4;\r\n        return result;\r\n    }\r\n    /**\r\n     * Returns the Float16 value at current byte offset position,\r\n     * and adds four bytes to the offset.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    loadFloat16() {\r\n        const uint16 = this.loadUInt16();\r\n        return MathFunctions.decode16BitFloat(uint16);\r\n    }\r\n    /**\r\n     * Returns the Float16 value at current byte offset position,\r\n     * and adds two bytes to the offset.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    loadUFloat16() {\r\n        const result = this.loadFloat16();\r\n        if (result < 0.0) {\r\n            return 2048.0 - result; // Note: subtract a negative number to add it.\r\n        }\r\n        else {\r\n            return result;\r\n        }\r\n    }\r\n    /**\r\n     * Returns a single signed Float16 value at current byte offset position from 2 unsigned Int8 values,\r\n     * and adds two bytes to the offset.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    loadFloat16From2xUInt8() {\r\n        throw Error('loadFloat16From2xUInt8 not implemented!');\r\n        // const result = this.__dataView.getFloat16(this.__byteOffset, true)\r\n        // const uint8s = this.loadUInt8Array(2);\r\n        // return Math.decode16BitFloat(uint8s);\r\n        // this.__byteOffset += 2\r\n        // return result\r\n    }\r\n    /**\r\n     * Loads and returns a single Signed integer value from 2 Unsigned Float16 values.\r\n     * @return - The return value.\r\n     */\r\n    loadUInt32From2xUFloat16() {\r\n        const partA = this.loadUFloat16();\r\n        const partB = this.loadUFloat16();\r\n        return partA + partB * 4096;\r\n    }\r\n    /**\r\n     * Loads and returns a single Signed integer value from 2 signed Float16 values.\r\n     * @return - The return value.\r\n     */\r\n    loadSInt32From2xFloat16() {\r\n        const partA = this.loadFloat16();\r\n        const partB = this.loadFloat16();\r\n        return partA + partB * 2048;\r\n    }\r\n    /**\r\n     * Returns the Float32 value at current byte offset position,\r\n     * and adds four bytes to the offset.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    loadFloat32() {\r\n        const result = this.__dataView.getFloat32(this.__byteOffset, true);\r\n        this.__byteOffset += 4;\r\n        return result;\r\n    }\r\n    /**\r\n     * Reads buffer and return an unsigned Int8 array with the specified size,\r\n     * starting from current byte offset.\r\n     * Byte offset is increased by the specified byte size.\r\n     *\r\n     * @param size - The size param.\r\n     * @param clone - The clone param.\r\n     * @return - The return value.\r\n     */\r\n    loadUInt8Array(size, clone = false) {\r\n        if (size == undefined)\r\n            size = this.loadUInt32();\r\n        const result = new Uint8Array(this.__data, this.__byteOffset, size);\r\n        this.__byteOffset += size;\r\n        return result;\r\n    }\r\n    /**\r\n     * Reads buffer and return an unsigned Int16 array with the specified size,\r\n     * starting from current byte offset.\r\n     * Byte offset is increased by the specified byte size x 2.\r\n     *\r\n     * @param size - The size param.\r\n     * @param clone - The clone param.\r\n     * @return - The return value.\r\n     */\r\n    loadUInt16Array(size, clone = false) {\r\n        if (size == undefined)\r\n            size = this.loadUInt32();\r\n        if (size == 0)\r\n            return new Uint16Array();\r\n        this.readPad(2);\r\n        let result;\r\n        if (this.__isMobileDevice) {\r\n            result = new Uint16Array(size);\r\n            for (let i = 0; i < size; i++) {\r\n                result[i] = this.__dataView.getUint16(this.__byteOffset, true);\r\n                this.__byteOffset += 2;\r\n            }\r\n        }\r\n        else {\r\n            result = new Uint16Array(this.__data, this.__byteOffset, size);\r\n            this.__byteOffset += size * 2;\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Reads buffer and return an unsigned Int32 array with the specified size,\r\n     * starting from current byte offset.\r\n     * Byte offset is increased by the specified byte size x 4.\r\n     *\r\n     * @param size - The size param.\r\n     * @param clone - The clone param.\r\n     * @return - The return value.\r\n     */\r\n    loadUInt32Array(size, clone = false) {\r\n        if (size == undefined)\r\n            size = this.loadUInt32();\r\n        if (size == 0)\r\n            return new Uint32Array();\r\n        this.readPad(4);\r\n        let result;\r\n        if (this.__isMobileDevice) {\r\n            result = new Uint32Array(size);\r\n            for (let i = 0; i < size; i++) {\r\n                result[i] = this.__dataView.getUint32(this.__byteOffset, true);\r\n                this.__byteOffset += 4;\r\n            }\r\n        }\r\n        else {\r\n            result = new Uint32Array(this.__data, this.__byteOffset, size);\r\n            this.__byteOffset += size * 4;\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Reads buffer and return a Float32 array with the specified size,\r\n     * starting from current byte offset.\r\n     * Byte offset is increased by the specified byte size x 4.\r\n     *\r\n     * @param size - The size param.\r\n     * @param clone - The clone param.\r\n     * @return - The return value.\r\n     */\r\n    loadFloat32Array(size, clone = false) {\r\n        if (size == undefined)\r\n            size = this.loadUInt32();\r\n        if (size == 0)\r\n            return new Float32Array();\r\n        this.readPad(4);\r\n        let result;\r\n        if (this.__isMobileDevice) {\r\n            result = new Float32Array(size);\r\n            for (let i = 0; i < size; i++) {\r\n                result[i] = this.__dataView.getFloat32(this.__byteOffset, true);\r\n                this.__byteOffset += 4;\r\n            }\r\n        }\r\n        else {\r\n            result = new Float32Array(this.__data, this.__byteOffset, size);\r\n            this.__byteOffset += size * 4;\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Returns next string.\r\n     * First looks for the string length description in the next four bytes in the buffer(Starting from byte offset).\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    loadStr() {\r\n        const numChars = this.loadUInt32();\r\n        const chars = new Uint8Array(this.__data, this.__byteOffset, numChars);\r\n        this.__byteOffset += numChars;\r\n        return this.utf8decoder.decode(chars);\r\n    }\r\n    /**\r\n     * Returns an array of strings.\r\n     * First reading the size of the array then reading each string.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    loadStrArray() {\r\n        const size = this.loadUInt32();\r\n        const result = [];\r\n        for (let i = 0; i < size; i++) {\r\n            result[i] = this.loadStr();\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Creates and returns a `Vec2` object with the next two signed Int32 values in the buffer.\r\n     *\r\n     * @return - Returns a Vec2.\r\n     */\r\n    loadSInt32Vec2() {\r\n        const x = this.loadSInt32();\r\n        const y = this.loadSInt32();\r\n        return new Vec2(x, y);\r\n    }\r\n    /**\r\n     * Creates and returns a `Vec2` object with the next two unsigned Int32 values in the buffer.\r\n     * @return - Returns a Vec2.\r\n     */\r\n    loadUInt32Vec2() {\r\n        const x = this.loadUInt32();\r\n        const y = this.loadUInt32();\r\n        return new Vec2(x, y);\r\n    }\r\n    /**\r\n     * Creates and returns a `Vec2` object with the next two Float16 values in the buffer.\r\n     *\r\n     * @return - Returns a Vec2.\r\n     */\r\n    loadFloat16Vec2() {\r\n        const x = this.loadFloat16();\r\n        const y = this.loadFloat16();\r\n        return new Vec2(x, y);\r\n    }\r\n    /**\r\n     * Creates and returns a `Vec2` object with the next two Float32 values in the buffer.\r\n     * @return - Returns a Vec2.\r\n     */\r\n    loadFloat32Vec2() {\r\n        const x = this.loadFloat32();\r\n        const y = this.loadFloat32();\r\n        return new Vec2(x, y);\r\n    }\r\n    /**\r\n     * Creates and returns a `Vec3` object with the next three Float16 values in the buffer.\r\n     *\r\n     * @return - Returns a Vec3.\r\n     */\r\n    loadFloat16Vec3() {\r\n        const x = this.loadFloat16();\r\n        const y = this.loadFloat16();\r\n        const z = this.loadFloat16();\r\n        return new Vec3(x, y, z);\r\n    }\r\n    /**\r\n     * Creates and returns a `Vec3` object with the next three Float32 values in the buffer.\r\n     *\r\n     * @return - Returns a Vec3.\r\n     */\r\n    loadFloat32Vec3() {\r\n        const x = this.loadFloat32();\r\n        const y = this.loadFloat32();\r\n        const z = this.loadFloat32();\r\n        return new Vec3(x, y, z);\r\n    }\r\n    /**\r\n     * Creates and returns a `Quat` object with the next four Float16 values in the buffer.\r\n     *\r\n     * @return - Returns a Quat.\r\n     */\r\n    loadFloat16Quat() {\r\n        const x = this.loadFloat16();\r\n        const y = this.loadFloat16();\r\n        const z = this.loadFloat16();\r\n        const w = this.loadFloat16();\r\n        return new Quat(x, y, z, w);\r\n    }\r\n    /**\r\n     * Creates and returns a `Quat` object with the next four Float32 values in the buffer.\r\n     * @return - Returns a Quat.\r\n     */\r\n    loadFloat32Quat() {\r\n        const x = this.loadFloat32();\r\n        const y = this.loadFloat32();\r\n        const z = this.loadFloat32();\r\n        const w = this.loadFloat32();\r\n        return new Quat(x, y, z, w);\r\n    }\r\n    /**\r\n     * Creates and returns a `Color` object with the next three Float32 values in the buffer.\r\n     *\r\n     * @return - Returns a Color.\r\n     */\r\n    loadRGBFloat32Color() {\r\n        const r = this.loadFloat32();\r\n        const g = this.loadFloat32();\r\n        const b = this.loadFloat32();\r\n        return new Color(r, g, b);\r\n    }\r\n    /**\r\n     * Creates and returns a RGBA `Color` object with the next four Float32 values in the buffer.\r\n     * @return - Returns a Color.\r\n     */\r\n    loadRGBAFloat32Color() {\r\n        const r = this.loadFloat32();\r\n        const g = this.loadFloat32();\r\n        const b = this.loadFloat32();\r\n        const a = this.loadFloat32();\r\n        return new Color(r, g, b, a);\r\n    }\r\n    /**\r\n     * Creates and returns a `Color` object with the next three unsigned Int8 values in the buffer.\r\n     * @return - Returns a Color.\r\n     */\r\n    loadRGBUInt8Color() {\r\n        const r = this.loadUInt8();\r\n        const g = this.loadUInt8();\r\n        const b = this.loadUInt8();\r\n        return new Color(r / 255, g / 255, b / 255);\r\n    }\r\n    /**\r\n     * Creates and returns a RGBA `Color` object with the next four unsigned Int8 values in the buffer.\r\n     * @return - Returns a Color.\r\n     */\r\n    loadRGBAUInt8Color() {\r\n        const r = this.loadUInt8();\r\n        const g = this.loadUInt8();\r\n        const b = this.loadUInt8();\r\n        const a = this.loadUInt8();\r\n        return new Color(r / 255, g / 255, b / 255, a / 255);\r\n    }\r\n    /**\r\n     * Creates and returns a `Box2` object with the next four Float32 values in the buffer.\r\n     * Next four because it creates two Vec2.\r\n     *\r\n     * @return - Returns a Box2.\r\n     */\r\n    loadBox2() {\r\n        return new Box2(this.loadFloat32Vec2(), this.loadFloat32Vec2());\r\n    }\r\n    /**\r\n     * Creates and returns a `Box2` object with the next six Float32 values in the buffer.\r\n     * Next four because it creates two Vec3.\r\n     *\r\n     * @return - Returns a Box3.\r\n     */\r\n    loadBox3() {\r\n        return new Box3(this.loadFloat32Vec3(), this.loadFloat32Vec3());\r\n    }\r\n    /**\r\n     * Given a stridee value, advance the pointer to the end of the current stride.\r\n     * @param stride - The stride param.\r\n     */\r\n    readPad(stride) {\r\n        const pad = this.__byteOffset % stride;\r\n        if (pad != 0)\r\n            this.__byteOffset += stride - pad;\r\n    }\r\n}\r\nexport { BinReader };\r\n//# sourceMappingURL=BinReader.js.map","var OperatorOutputMode;\r\n(function (OperatorOutputMode) {\r\n    OperatorOutputMode[OperatorOutputMode[\"OP_WRITE\"] = 0] = \"OP_WRITE\";\r\n    OperatorOutputMode[OperatorOutputMode[\"OP_READ_WRITE\"] = 1] = \"OP_READ_WRITE\";\r\n})(OperatorOutputMode || (OperatorOutputMode = {}));\r\nexport { OperatorOutputMode };\r\n//# sourceMappingURL=OperatorOutputMode.js.map","import { BaseItem } from '../BaseItem';\r\nimport { EventEmitter } from '../../Utilities/EventEmitter';\r\nimport { OperatorOutputMode } from './OperatorOutputMode';\r\n/**\r\n * Represents a reactive type of attribute that can be owned by a `ParameterOwner` class.\r\n *\r\n * **Events**\r\n * * **nameChanged:** Triggered when the name of the parameter changes.\r\n * * **valueChanged:** Triggered when the value of the parameter changes.\r\n */\r\nclass Parameter extends EventEmitter {\r\n    /**\r\n     * When initializing a new parameter, the passed in value could be anything.\r\n     * If it is a new type of value, just ensure you register it in the `Registry`.\r\n     *\r\n     * How to use it:\r\n     *\r\n     * ```javascript\r\n     *  // Creating a parameter object\r\n     *  const param = new Parameter('Title', 'Awesome Parameter Value', 'String')\r\n     *\r\n     *   // Capturing events\r\n     *  param.on('valueChanged', (...params) => console.log('Value changed!'))\r\n     *\r\n     *  // Changing parameter's value will cause `valueChanged` event to trigger.\r\n     *  param.setValue('A New Awesome Parameter Value')\r\n     *  // As result the console log code will execute: Value Changed!\r\n     * ```\r\n     *\r\n     * @param name - The name of the parameter.\r\n     * @param value - The value of the parameter.\r\n     * @param dataType - The data type of the parameter.\r\n     */\r\n    constructor(name = '', value, dataType) {\r\n        super();\r\n        this.dirty = false;\r\n        this.boundInputs = [];\r\n        this.boundOutputs = [];\r\n        this.cleaning = false;\r\n        this.dirtyOpIndex = 0;\r\n        this.firstOP_WRITE = 0;\r\n        this.name = name;\r\n        this.__value = value;\r\n        this.dataType = dataType;\r\n    }\r\n    /**\r\n     * Returns specified name of the parameter.\r\n     *\r\n     * @return - Returns the name.\r\n     */\r\n    getName() {\r\n        return this.name;\r\n    }\r\n    /**\r\n     * Sets the name of the current parameter.\r\n     *\r\n     * @param name - The base parameter name.\r\n     * @return - The instance itself.\r\n     */\r\n    setName(name) {\r\n        if (name === this.name) {\r\n            return;\r\n        }\r\n        const prevName = this.name;\r\n        this.name = name;\r\n        this.emit('nameChanged', { newName: this.name, prevName });\r\n    }\r\n    /**\r\n     * Returns the owner item of the current parameter.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getOwner() {\r\n        return this.ownerItem;\r\n    }\r\n    /**\r\n     * Sets the owner item of the current parameter.\r\n     *\r\n     * @param ownerItem - The ownerItem value.\r\n     */\r\n    setOwner(ownerItem) {\r\n        this.ownerItem = ownerItem;\r\n    }\r\n    /**\r\n     * Returns the parameter's path as an array of strings.\r\n     * Includes owner's path in case it is owned by a `ParameterOwner`.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getPath() {\r\n        if (this.ownerItem && this.ownerItem instanceof BaseItem) {\r\n            return [...this.ownerItem.getPath(), this.name];\r\n        }\r\n        else {\r\n            return [this.name];\r\n        }\r\n    }\r\n    /**\r\n     * Returns parameter's data type.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getDataType() {\r\n        return this.dataType;\r\n    }\r\n    // ////////////////////////////////////////////////\r\n    // Operator bindings\r\n    /**\r\n     * When an Operator is reading from a parameter, it must be dirtied when the parameter value\r\n     * changes. The Parameter maintains a list of bound inputs and will propagate dirty to\r\n     * them explicitly.\r\n     *\r\n     * @param operatorInput - The output that we are unbinding from the Parameter\r\n     * @param index - The index(optional) that the output is being bound at.\r\n     * @return - The index of the bound output.\r\n     */\r\n    bindOperatorInput(operatorInput) {\r\n        this.boundInputs.push(operatorInput);\r\n    }\r\n    /**\r\n     * When an operator is being removed from reading from a Parameter, the Input is removed\r\n     * This means the operator will no longer receive updates when the operator changes.\r\n     *\r\n     * @param operatorInput - The output that we are unbinding from the Parameter\r\n     * @return - The return value.\r\n     */\r\n    unbindOperatorInput(operatorInput) {\r\n        const index = this.boundInputs.indexOf(operatorInput);\r\n        this.boundInputs.splice(index, 1);\r\n    }\r\n    /**\r\n     * When an Operator writes to a parameter, it binds its outputs to the parameter at a given\r\n     * index. Then when the operator is dirtied by one of its inputs, it explicitly dirties\r\n     * the output parameters.\r\n     *\r\n     * @param operatorOutput - The output that we are unbinding from the Parameter\r\n     * @param index - The index(optional) that the output is being bound at.\r\n     * @return - The index of the bound output.\r\n     */\r\n    bindOperatorOutput(operatorOutput, index = -1) {\r\n        if (index == -1)\r\n            index = this.boundOutputs.length;\r\n        this.boundOutputs.splice(index, 0, operatorOutput);\r\n        // Update the remaining binding indices\r\n        for (let i = index; i < this.boundOutputs.length; i++) {\r\n            this.boundOutputs[i].setParamBindIndex(i);\r\n        }\r\n        // If we weren't already dirty, make sure to emit a 'valueChanged' anyway.\r\n        this.__findFirstOP_WRITE();\r\n        // This ensures that the operator stack is considered 'clean'\r\n        // and then we call set dirty to force it to become dirty from the insertion point down.\r\n        // Without this line, the operator is considered already 'dirty', and so won't propagate.\r\n        this.dirtyOpIndex = this.boundOutputs.length;\r\n        this.setDirty(index);\r\n        return index;\r\n    }\r\n    /**\r\n     * When an operator is unbinding from a parameter, it removes its self from the list maintained\r\n     * by the parameter.\r\n     *\r\n     * @param operatorOutput - The output that we are unbinding from the Parameter\r\n     * @return - The return value.\r\n     */\r\n    unbindOperatorOutput(operatorOutput) {\r\n        const index = operatorOutput.getParamBindIndex();\r\n        this.boundOutputs.splice(index, 1);\r\n        // Update the remaining binding indices\r\n        for (let i = index; i < this.boundOutputs.length; i++) {\r\n            this.boundOutputs[i].setParamBindIndex(i);\r\n        }\r\n        this.__findFirstOP_WRITE();\r\n        this.dirtyOpIndex = this.boundOutputs.length;\r\n        this.setDirty(Math.max(0, index - 1));\r\n        return index;\r\n    }\r\n    /**\r\n     * Find the first operator in our stack which writes using an OP_WRITE connection.\r\n     * All operators before this op can be ignored during dirty propagation.\r\n     * @private\r\n     */\r\n    __findFirstOP_WRITE() {\r\n        this.firstOP_WRITE = this.boundOutputs.length;\r\n        if (this.boundOutputs.length > 0) {\r\n            for (this.firstOP_WRITE--; this.firstOP_WRITE > 0; this.firstOP_WRITE--) {\r\n                // Find the first OP_WRITE binding. (Note: we could cache this)\r\n                if (this.boundOutputs[this.firstOP_WRITE].getMode() == OperatorOutputMode.OP_WRITE)\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Dirties this Parameter so subsequent calls to `getValue` will cause an evaluation of its bound operators.\r\n     *\r\n     * @param index - Index of the operator\r\n     * @return - `true` if the Parameter was made dirty, else `false` if it was already dirty.\r\n     */\r\n    setDirty(index) {\r\n        // Determine the first operator in the stack that must evaluate to clean the parameter.\r\n        // Note: if a READ_WRITE op is becoming dirty, then we dirty back up to that op.\r\n        if (index < this.dirtyOpIndex) {\r\n            // If we must dirty all operators in the stack from the last OP_WRITE to the end.\r\n            // Note: If a setDirty call comes from an op that precedes an OP_WRITE operator, we\r\n            // can safely discard it, as its output will have no effect on the value of this parameter.\r\n            let newDirtyIndex = this.firstOP_WRITE;\r\n            if (newDirtyIndex <= index) {\r\n                this.dirtyOpIndex = newDirtyIndex;\r\n                for (newDirtyIndex++; newDirtyIndex < this.boundOutputs.length; newDirtyIndex++) {\r\n                    // Dirty all the other bound ops from the OP_WRITE to the top of the stack.\r\n                    if (newDirtyIndex != index) {\r\n                        // This will cause the other outputs of the operator to become dirty.\r\n                        this.boundOutputs[newDirtyIndex].getOperator().setDirty();\r\n                    }\r\n                }\r\n                for (let i = 0; i < this.boundInputs.length; i++) {\r\n                    this.boundInputs[i].setDirty();\r\n                }\r\n                this.emit('valueChanged');\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Returns true if this parameter is currently dirty and will evaluate its bound\r\n     * operators if its value is requested by a call to getValue.\r\n     *\r\n     * @return - Returns a boolean.\r\n     */\r\n    isDirty() {\r\n        return this.dirtyOpIndex < this.boundOutputs.length;\r\n    }\r\n    /**\r\n     * Returns the index of the first 'dirty' binding in the stack. This will be the index of the\r\n     * first operator that will evaluate when the parameter needs to be cleaned.\r\n     *\r\n     * @return - The index of the dirty binding in the binding stack.\r\n     */\r\n    getDirtyBindingIndex() {\r\n        return this.dirtyOpIndex;\r\n    }\r\n    /**\r\n     * The setCleanFromOp method.\r\n     * @param value - The computed value to be stored in the Parameter.\r\n     * @param index - The index of the bound OperatorOutput.\r\n     */\r\n    setCleanFromOp(value, index) {\r\n        if (index != this.dirtyOpIndex) {\r\n            if (index < this.dirtyOpIndex) {\r\n                // This can happen when an operator in the following case.\r\n                // ParamA [OpC, OpB, OpA]\r\n                // ParamB [OpC, OpA]\r\n                // When OpB dirties ParamA, and is evaluated, ParamB is considered clean because OpA was never dirtied\r\n                // We see this message when parameters are evaluated as soon as a change is detected instead of\r\n                // in batches. Now that all rendering code is pulling data only during the render cycle, we ara\r\n                // not seeing it anymore. However, maybe with a UI open, it will start emitting this warning.\r\n                // Note: this would be caused, if a Parameter is already cleaned by an Operator, and yet the Operator\r\n                // is re-evaluating. I am not sure how this can occur.\r\n                // const op = operatorOutput.getOperator()\r\n                // console.log(\r\n                //   `Operator:: ${\r\n                //     op.constructor.name\r\n                //   } with name: ${op.getName()} is being cleaned immediately, instead of lazily.`\r\n                // )\r\n                console.log(`Parameter is cleaned when it was already clean to that point in the stack:`, this.getPath());\r\n            }\r\n            else if (this.boundOutputs[index].getMode() != OperatorOutputMode.OP_WRITE) {\r\n                // A parameter can become dirty (so __dirtyOpIndex == 0), and then another operator bound on top.\r\n                // if the next op is a WRITE op, then we can fast forward the dirty index.\r\n                const thisClassName = this.getClassName();\r\n                const op = this.boundOutputs[index].getOperator();\r\n                const opClassName = op.getClassName();\r\n                throw new Error(`Parameter: ${thisClassName} with name: ${this.getName()} is not cleaning all outputs during evaluation of op: ${opClassName} with name: ${op.getName()}`);\r\n            }\r\n        }\r\n        else {\r\n            // console.log(`cleaned:`, this.getPath())\r\n        }\r\n        this.__value = value;\r\n        // As each operator writes its value, the dirty value is incremented\r\n        this.dirtyOpIndex = index + 1;\r\n    }\r\n    /**\r\n     * During operator evaluation, operators can use this method to retrieve the existing\r\n     * value of one of their outputs.\r\n     * @param index - The index of the bound OperatorOutput to evaluate up to.\r\n     * @return - The return value.\r\n     */\r\n    getValueFromOp(index) {\r\n        // Note: during evaluation of an Operator that writes to multiple outputs,\r\n        // it can write to an output with an IO setting, which means it retrieves\r\n        // the previous value while calculating the next.\r\n        if (this.dirtyOpIndex < index) {\r\n            this._clean(index);\r\n        }\r\n        return this.__value;\r\n    }\r\n    /**\r\n     * Cleans the parameter up tp the index of the specified index of the bound OperatorOutput\r\n     *\r\n     * @param index - The index of the bound OperatorOutput to evaluate up to.\r\n     */\r\n    _clean(index) {\r\n        if (this.cleaning) {\r\n            throw new Error(`Cycle detected when cleaning: ${this.getPath()}. Operators need to be rebound to fix errors`);\r\n        }\r\n        this.cleaning = true;\r\n        while (this.dirtyOpIndex < index) {\r\n            const tmp = this.dirtyOpIndex;\r\n            const operatorOutput = this.boundOutputs[this.dirtyOpIndex];\r\n            // The op can get the current value and modify it in place\r\n            // and set the output to clean.\r\n            operatorOutput.getOperator().evaluate();\r\n            if (tmp == this.dirtyOpIndex) {\r\n                // During initial configuration of an operator, cleaning outputs might be disabled.\r\n                const op = this.boundOutputs[this.dirtyOpIndex].getOperator();\r\n                const opClassName = op.getClassName();\r\n                console.warn(`Operator: ${opClassName} with name: ${op.getName()} is not cleaning its outputs during evaluation`);\r\n                this.dirtyOpIndex++;\r\n            }\r\n        }\r\n        this.cleaning = false;\r\n    }\r\n    /**\r\n     * Returns parameter's value.\r\n     * @return - The return value.\r\n     */\r\n    getValue() {\r\n        if (this.dirtyOpIndex < this.boundOutputs.length) {\r\n            this._clean(this.boundOutputs.length);\r\n        }\r\n        return this.__value;\r\n    }\r\n    /**\r\n     * Sets value of the parameter.\r\n     *\r\n     * @param value - The value param.\r\n     */\r\n    setValue(value) {\r\n        if (value == undefined) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw 'undefined was passed into the set value for param:' + this.getName();\r\n        }\r\n        if (this.boundOutputs.length > 0) {\r\n            for (let i = this.boundOutputs.length - 1; i >= 0; i--) {\r\n                const operatorOutput = this.boundOutputs[i];\r\n                value = operatorOutput.backPropagateValue(value);\r\n                if (operatorOutput.getMode() == 0 /* OP_WRITE */)\r\n                    return;\r\n            }\r\n        }\r\n        if (typeof value !== 'object') {\r\n            // Note: equality tests on anything but simple values is going to be super expensive.\r\n            if (this.__value == value)\r\n                return;\r\n        }\r\n        this.__value = value;\r\n        // Note: only users call 'setValue'. Operators call 'setCleanFromOp'\r\n        for (let i = 0; i < this.boundInputs.length; i++) {\r\n            this.boundInputs[i].paramValueChanged();\r\n        }\r\n        this.emit('valueChanged');\r\n    }\r\n    get value() {\r\n        return this.getValue();\r\n    }\r\n    set value(value) {\r\n        this.setValue(value);\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The loadValue is used to change the value of a parameter, without triggering a\r\n     * valueChanges, or setting the USER_EDITED state.\r\n     *\r\n     * @param value - The context value.\r\n     */\r\n    loadValue(value) {\r\n        this.__value = value;\r\n    }\r\n    /**\r\n     * The readBinary method.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        console.warn(`TODO: Parameter: ${this.constructor.name} with name: ${this.name} does not implement readBinary`);\r\n    }\r\n    /**\r\n     * The readBinary method.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    destroy() {\r\n        console.warn('nothing destroyed. This method was not overwritten in subclass');\r\n    }\r\n}\r\nexport { Parameter };\r\n//# sourceMappingURL=Parameter.js.map","import { Registry } from '../../Registry';\r\nimport { Parameter } from './Parameter';\r\n/**\r\n * Represents a specific type of parameter, that only stores numeric values.\r\n *\r\n * ```javascript\r\n * const numberParam = new NumberParameter('MyNumber', 15)\r\n * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.\r\n * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.\r\n * myParameterOwnerItem.addParameter(numberParam)\r\n * ```\r\n *\r\n * @extends Parameter\r\n */\r\nclass NumberParameter extends Parameter {\r\n    /**\r\n     * Create a number parameter.\r\n     * @param name - The name of the number parameter.\r\n     * @param value - The value of the parameter.\r\n     * @param range - An array with two numbers. If defined, the parameter value will be clamped.\r\n     * @param step - The step value. If defined, the parameter value will be rounded to the nearest integer.\r\n     */\r\n    constructor(name = '', value = 0, range, step) {\r\n        super(name, value, 'Number');\r\n        this.range = range;\r\n        this.step = step;\r\n    }\r\n    /**\r\n     * Returns the range to which the parameter is restrained.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getRange() {\r\n        return this.range;\r\n    }\r\n    /**\r\n     * Sets the range to which the parameter is restrained.\r\n     *\r\n     * @param range - The range value.\r\n     */\r\n    setRange(range) {\r\n        this.range = range;\r\n    }\r\n    /**\r\n     * Returns the step number, which is the one used for rounding.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getStep() {\r\n        return this.step;\r\n    }\r\n    /**\r\n     * Returns step value.\r\n     *\r\n     * @param step - The step value.\r\n     */\r\n    setStep(step) {\r\n        this.step = step;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        const j = { value: this.__value };\r\n        if (this.range)\r\n            j.range = this.range;\r\n        if (this.step)\r\n            j.step = this.step;\r\n        return j;\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context) {\r\n        this.__value = j.value;\r\n        if (j.range)\r\n            this.range = j.range;\r\n        if (j.step)\r\n            this.step = j.step;\r\n    }\r\n    /**\r\n     * Extracts a number value from a buffer, updating current parameter state.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        this.__value = reader.loadFloat32();\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Clone\r\n    /**\r\n     * The clone method constructs a new number parameter, copies its values\r\n     * from this parameter and returns it.\r\n     *\r\n     * @return - Returns a new number parameter.\r\n     */\r\n    clone() {\r\n        return new NumberParameter(this.name, this.__value, this.range, this.step);\r\n    }\r\n}\r\n// eslint-disable-next-line require-jsdoc\r\nclass Float32Parameter extends NumberParameter {\r\n    // eslint-disable-next-line require-jsdoc\r\n    readBinary(reader, context) {\r\n        this.__value = reader.loadFloat32();\r\n    }\r\n}\r\n// eslint-disable-next-line require-jsdoc\r\nclass SInt32Parameter extends NumberParameter {\r\n    // eslint-disable-next-line require-jsdoc\r\n    readBinary(reader, context) {\r\n        this.__value = reader.loadSInt32();\r\n    }\r\n}\r\n// eslint-disable-next-line require-jsdoc\r\nclass UInt32Parameter extends NumberParameter {\r\n    // eslint-disable-next-line require-jsdoc\r\n    readBinary(reader, context) {\r\n        this.__value = reader.loadUInt32();\r\n    }\r\n}\r\nRegistry.register('NumberParameter', NumberParameter);\r\nRegistry.register('Property_SInt32', SInt32Parameter);\r\nRegistry.register('Property_UInt32', UInt32Parameter);\r\nRegistry.register('Property_Float32', Float32Parameter);\r\nexport { NumberParameter };\r\n//# sourceMappingURL=NumberParameter.js.map","import { Registry } from '../../Registry';\r\nimport { NumberParameter } from './NumberParameter';\r\n/**\r\n * Represents a specific type of parameter, that stores multiple choice(array) values.\r\n *\r\n * i.e.:\r\n * ```javascript\r\n * const multiChoiceParameter =  new MultiChoiceParameter('InitialXfoMode', GROUP_INITIAL_XFO_MODES.average, [\r\n *                                  'manual',\r\n *                                  'first',\r\n *                                  'average',\r\n *                                  'global',\r\n *                                ])\r\n * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.\r\n * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.\r\n * myParameterOwnerItem.addParameter(multiChoiceParameter)\r\n * ```\r\n * @extends NumberParameter\r\n */\r\nclass MultiChoiceParameter extends NumberParameter {\r\n    /**\r\n     * Create a multi choice parameter.\r\n     * @param name - The name of the multi choice parameter.\r\n     * @param index - The index value.\r\n     * @param choices - The choices value.\r\n     */\r\n    constructor(name, index, choices = []) {\r\n        super(name, index, [0, choices.length], 1);\r\n        this.choices = choices;\r\n    }\r\n    /**\r\n     * Returns choices array.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getChoices() {\r\n        return this.choices;\r\n    }\r\n    /**\r\n     * Sets parameter index value.\r\n     *\r\n     * @param value - The value param.\r\n     */\r\n    setValue(value) {\r\n        if (typeof value === 'string') {\r\n            super.setValue(this.choices.indexOf(value));\r\n        }\r\n        else {\r\n            super.setValue(value);\r\n        }\r\n    }\r\n}\r\nRegistry.register('MultiChoiceParameter', MultiChoiceParameter);\r\nexport { MultiChoiceParameter };\r\n//# sourceMappingURL=MultiChoiceParameter.js.map","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Registry } from '../../Registry';\r\nimport { Parameter } from './Parameter';\r\n/**\r\n * Represents a specific type of parameter, that only stores `boolean` values.\r\n *\r\n * i.e.:\r\n * ```javascript\r\n * const booleanParam = new BooleanParameter('MyBoolean', true)\r\n * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.\r\n * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.\r\n * myParameterOwnerItem.addParameter(booleanParam)\r\n * ```\r\n * @extends Parameter\r\n */\r\nclass BooleanParameter extends Parameter {\r\n    /**\r\n     * Creates a new parameter with `Boolean` data type.\r\n     *\r\n     * @param name - The name of the boolean parameter.\r\n     * @param value - The value of the parameter.\r\n     */\r\n    constructor(name = '', value) {\r\n        super(name, value != undefined ? value : false, 'Boolean');\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Loads the boolean values from the binary buffer.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        this.__value = reader.loadUInt8() != 0;\r\n    }\r\n    /**\r\n     * The toJSON method serializes this instance as a JSON.\r\n     * It can be used for persistence, data transfer, etc.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        return { value: this.__value };\r\n    }\r\n    /**\r\n     * The fromJSON method takes a JSON and deserializes into an instance of this type.\r\n     *\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context) {\r\n        this.__value = j.value;\r\n        this.emit('valueChanged', { mode: 0 });\r\n    }\r\n    /**\r\n     * The clone method constructs a new parameter, copies its values\r\n     * from this parameter and returns it.\r\n     *\r\n     * @return - Returns a new cloned parameter.\r\n     */\r\n    clone() {\r\n        return new BooleanParameter(this.name, this.__value);\r\n    }\r\n}\r\nRegistry.register('BooleanParameter', BooleanParameter);\r\nRegistry.register('Property_Boolean', BooleanParameter);\r\nexport { BooleanParameter };\r\n//# sourceMappingURL=BooleanParameter.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Registry } from '../../Registry';\r\nimport { Vec2 } from '../../Math/index';\r\nimport { Parameter } from './Parameter';\r\n/**\r\n * Represents a specific type of parameter, that only stores Vec2(two-dimensional coordinate) values.\r\n *\r\n * i.e.:\r\n * ```javascript\r\n * const vec2Param = new Vec2Parameter('MyVec2', new Vec2(1.2, 3.4))\r\n * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.\r\n * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.\r\n * myParameterOwnerItem.addParameter(vec2Param)\r\n * ```\r\n *\r\n * **Events**\r\n * * **rangeChanged:** Triggered when rage array changes.\r\n *\r\n * @extends Parameter\r\n */\r\nclass Vec2Parameter extends Parameter {\r\n    /**\r\n     * Create a Vec2 parameter.\r\n     *\r\n     * @param name - The name of the Vec2 parameter.\r\n     * @param value - The value of the parameter.\r\n     * @param range - The range value is an array of two `Vec2` objects.\r\n     */\r\n    constructor(name = '', value, range) {\r\n        super(name, value ? value : new Vec2(), 'Vec2');\r\n        this.range = range;\r\n    }\r\n    /**\r\n     * Returns the range of values in which current parameter can be.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getRange() {\r\n        // Range should be an array of 2 vec2s. [min(x,y), max(x,y)]\r\n        return this.range;\r\n    }\r\n    /**\r\n     * The __setRange method.\r\n     * @param range - The range value.\r\n     * @private\r\n     */\r\n    setRange(range) {\r\n        // Should be an array [0, 20]\r\n        this.range = range;\r\n        this.emit('rangeChanged', { range });\r\n    }\r\n    /**\r\n     * Extracts a number value from a buffer, updating current parameter state.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        var _a;\r\n        (_a = this.__value) === null || _a === void 0 ? void 0 : _a.readBinary(reader);\r\n    }\r\n    toJSON(context) {\r\n        var _a;\r\n        return {\r\n            name: this.name,\r\n            value: (_a = this.__value) === null || _a === void 0 ? void 0 : _a.toJSON(),\r\n        };\r\n    }\r\n    fromJSON(j, context) {\r\n        const vec2 = new Vec2();\r\n        vec2.fromJSON(j.value);\r\n        this.__value = vec2;\r\n        if (j.name)\r\n            this.name = j.name;\r\n    }\r\n    /**\r\n     * The clone method constructs a new Vec2 parameter, copies its values\r\n     * from this parameter and returns it.\r\n     *\r\n     * @return - Returns a new Vec2 parameter.\r\n     */\r\n    clone() {\r\n        var _a;\r\n        const clonedParam = new Vec2Parameter(this.name, (_a = this.__value) === null || _a === void 0 ? void 0 : _a.clone());\r\n        if (this.range)\r\n            clonedParam.setRange(this.range);\r\n        return clonedParam;\r\n    }\r\n}\r\nRegistry.register('Vec2Parameter', Vec2Parameter);\r\nRegistry.register('Property_Vec2_32f', Vec2Parameter);\r\nexport { Vec2Parameter };\r\n//# sourceMappingURL=Vec2Parameter.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Registry } from '../../Registry';\r\nimport { Vec3 } from '../../Math/index';\r\nimport { Parameter } from './Parameter';\r\n/**\r\n * Represents a specific type of parameter, that only stores Vec3(three-dimensional coordinate) values.\r\n *\r\n * i.e.:\r\n * ```javascript\r\n * const vec3Param = new Vec3Parameter('MyVec3', new Vec3(1.2, 3.4, 1))\r\n * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.\r\n * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.\r\n * myParameterOwnerItem.addParameter(vec3Param)\r\n * ```\r\n * @extends Parameter\r\n */\r\nclass Vec3Parameter extends Parameter {\r\n    /**\r\n     * Create a Vec3 parameter.\r\n     *\r\n     * @param name - The name of the Vec3 parameter.\r\n     * @param value - The value of the parameter.\r\n     * @param range - The range value is an array of two `Vec3` objects.\r\n     */\r\n    constructor(name = '', value, range) {\r\n        super(name, value ? value : new Vec3(), 'Vec3');\r\n        this.range = range;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Extracts a number value from a buffer, updating current parameter state.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        var _a;\r\n        (_a = this.__value) === null || _a === void 0 ? void 0 : _a.readBinary(reader);\r\n    }\r\n    toJSON(context) {\r\n        var _a;\r\n        return {\r\n            name: this.name,\r\n            value: (_a = this.__value) === null || _a === void 0 ? void 0 : _a.toJSON(),\r\n        };\r\n    }\r\n    fromJSON(j, context) {\r\n        const vec4 = new Vec3();\r\n        vec4.fromJSON(j.value);\r\n        this.__value = vec4;\r\n        if (j.name)\r\n            this.name = j.name;\r\n    }\r\n    /**\r\n     * The clone method constructs a new Vec3 parameter, copies its values\r\n     * from this parameter and returns it.\r\n     *\r\n     * @return - Returns a new Vec3 parameter.\r\n     */\r\n    clone() {\r\n        var _a;\r\n        const clonedParam = new Vec3Parameter(this.name, (_a = this.__value) === null || _a === void 0 ? void 0 : _a.clone());\r\n        return clonedParam;\r\n    }\r\n}\r\nRegistry.register('Vec3Parameter', Vec3Parameter);\r\nRegistry.register('Property_Vec3_32f', Vec3Parameter);\r\nexport { Vec3Parameter };\r\n//# sourceMappingURL=Vec3Parameter.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Registry } from '../../Registry';\r\nimport { Vec4 } from '../../Math/index';\r\nimport { Parameter } from './Parameter';\r\n/**\r\n * Represents a specific type of parameter, that only stores Vec4(four-dimensional coordinate) values.\r\n *\r\n * i.e.:\r\n * ```javascript\r\n * const vec4Param = new Vec4Parameter('MyVec4', new Vec4(1.2, 3.4, 1, 4.2))\r\n * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.\r\n * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.\r\n * myParameterOwnerItem.addParameter(vec4Param)\r\n * ```\r\n *\r\n * @extends Parameter\r\n */\r\nclass Vec4Parameter extends Parameter {\r\n    /**\r\n     * Create a Vec4 parameter.\r\n     * @param name - The name of the Vec4 parameter.\r\n     * @param value - The value of the parameter.\r\n     */\r\n    constructor(name = '', value) {\r\n        super(name, value ? value : new Vec4(), 'Vec4');\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Extracts a number value from a buffer, updating current parameter state.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        var _a;\r\n        (_a = this.__value) === null || _a === void 0 ? void 0 : _a.readBinary(reader);\r\n    }\r\n    toJSON(context) {\r\n        var _a;\r\n        return {\r\n            name: this.name,\r\n            value: (_a = this.__value) === null || _a === void 0 ? void 0 : _a.toJSON(),\r\n        };\r\n    }\r\n    fromJSON(j, context) {\r\n        const vec4 = new Vec4();\r\n        vec4.fromJSON(j.value);\r\n        this.__value = vec4;\r\n        if (j.name)\r\n            this.name = j.name;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Clone\r\n    /**\r\n     * The clone method constructs a new Vec4 parameter, copies its values\r\n     * from this parameter and returns it.\r\n     *\r\n     * @return - Returns a new Vec4 parameter.\r\n     */\r\n    clone() {\r\n        var _a;\r\n        const clonedParam = new Vec4Parameter(this.name, (_a = this.__value) === null || _a === void 0 ? void 0 : _a.clone());\r\n        return clonedParam;\r\n    }\r\n}\r\nRegistry.register('Vec4Parameter', Vec4Parameter);\r\nRegistry.register('Property_Vec4_32f', Vec4Parameter);\r\nexport { Vec4Parameter };\r\n//# sourceMappingURL=Vec4Parameter.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Registry } from '../../Registry';\r\nimport { Color } from '../../Math/index';\r\nimport { Parameter } from './Parameter';\r\n/**\r\n * Represents a specific type of parameter, that only stores `Color` values.\r\n *\r\n * i.e.:\r\n * ```javascript\r\n * const colorParam = new ColorParameter('MyColor', new Color(0, 254, 2))\r\n * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.\r\n * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.\r\n * myParameterOwnerItem.addParameter(colorParam)\r\n * ```\r\n *\r\n * @extends Parameter\r\n */\r\nclass ColorParameter extends Parameter {\r\n    /**\r\n     * Create a color parameter.\r\n     * @param name - The name of the color parameter.\r\n     * @param value - The value of the parameter.\r\n     */\r\n    constructor(name = '', value) {\r\n        super(name, value ? value : new Color(), 'Color');\r\n    }\r\n    /**\r\n     * Extracts `Color` values from a buffer, updating current parameter state.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        const value = reader.loadRGBAFloat32Color();\r\n        // If the value is in linear space, then we should convert it to gamma space.\r\n        // Note: !! this should always be done in preprocessing...\r\n        value.applyGamma(2.2);\r\n        this.__value = value;\r\n    }\r\n    toJSON(context) {\r\n        var _a;\r\n        return {\r\n            value: (_a = this.__value) === null || _a === void 0 ? void 0 : _a.toJSON(),\r\n        };\r\n    }\r\n    fromJSON(j, context) {\r\n        var _a;\r\n        // if (j.value.type) this.__value = Registry.constructClass('Color') as Color // TODO: commented out Registry.constructClass\r\n        (_a = this.__value) === null || _a === void 0 ? void 0 : _a.fromJSON(j.value);\r\n    }\r\n    /**\r\n     * The clone method constructs a new color parameter,\r\n     * copies its values from this parameter and returns it.\r\n     *\r\n     * @return - Returns a new cloned color parameter.\r\n     */\r\n    clone() {\r\n        var _a;\r\n        const clonedParam = new ColorParameter(this.name, (_a = this.__value) === null || _a === void 0 ? void 0 : _a.clone());\r\n        return clonedParam;\r\n    }\r\n}\r\nRegistry.register('ColorParameter', ColorParameter);\r\nRegistry.register('Property_Color_32f', ColorParameter);\r\nexport { ColorParameter };\r\n//# sourceMappingURL=ColorParameter.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport { Registry } from '../../Registry';\r\nimport { Quat } from '../../Math/index';\r\nimport { Parameter } from './Parameter';\r\n/**\r\n * Represents a specific type of parameter, that only stores Vec3(four-dimensional coordinate) values.\r\n *\r\n * i.e.:\r\n * ```javascript\r\n * const quatParam = new QuatParameter('MyQuat', new Quat(1.2, 3.4, 1, 4.2))\r\n * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.\r\n * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.\r\n * myParameterOwnerItem.addParameter(quatParam)\r\n * ```\r\n *\r\n * @extends Parameter\r\n */\r\nclass QuatParameter extends Parameter {\r\n    /**\r\n     * Create a Quat parameter.\r\n     * @param name - The name of the Quat parameter.\r\n     * @param value - The value of the parameter.\r\n     */\r\n    constructor(name = '', value) {\r\n        super(name, value ? value : new Quat(), 'Quat');\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Extracts a number value from a buffer, updating current parameter state.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        var _a;\r\n        (_a = this.__value) === null || _a === void 0 ? void 0 : _a.readBinary(reader);\r\n    }\r\n    toJSON(context) {\r\n        var _a;\r\n        return {\r\n            value: (_a = this.__value) === null || _a === void 0 ? void 0 : _a.toJSON(),\r\n        };\r\n    }\r\n    fromJSON(j, context) {\r\n        const quat = new Quat();\r\n        quat.fromJSON(j.value);\r\n        this.__value = quat;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Clone\r\n    /**\r\n     * The clone method constructs a new Quat parameter, copies its values\r\n     * from this parameter and returns it.\r\n     *\r\n     * @return - Returns a new Quat parameter.\r\n     */\r\n    clone() {\r\n        var _a;\r\n        const clonedParam = new QuatParameter(this.name, (_a = this.__value) === null || _a === void 0 ? void 0 : _a.clone());\r\n        return clonedParam;\r\n    }\r\n}\r\nRegistry.register('QuatParameter', QuatParameter);\r\nRegistry.register('Property_Quat_32f', QuatParameter);\r\nexport { QuatParameter };\r\n//# sourceMappingURL=QuatParameter.js.map","/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { Registry } from '../../Registry';\r\nimport { Mat3 } from '../../Math/index';\r\nimport { Parameter } from './Parameter';\r\n/**\r\n * Represents a specific type of parameter, that only stores Mat3(3x3 matrix) values.\r\n *\r\n * i.e.:\r\n * ```javascript\r\n * const mat3Param = new Ma3Parameter('MyMat3', new Mat3(...args))\r\n * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.\r\n * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.\r\n * myParameterOwnerItem.addParameter(mat3Param)\r\n * ```\r\n *\r\n * @extends Parameter\r\n */\r\nclass Mat3Parameter extends Parameter {\r\n    /**\r\n     * Create a Mat3 parameter.\r\n     * @param name - The name of the Mat3 parameter.\r\n     * @param value - The value of the parameter.\r\n     */\r\n    constructor(name = '', value) {\r\n        super(name, value ? value : new Mat3(), 'Mat3');\r\n    }\r\n    /**\r\n     * Extracts a number value from a buffer, updating current parameter state.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        var _a;\r\n        (_a = this.__value) === null || _a === void 0 ? void 0 : _a.readBinary(reader);\r\n    }\r\n    toJSON(context) {\r\n        var _a;\r\n        return {\r\n            value: (_a = this.__value) === null || _a === void 0 ? void 0 : _a.toJSON(),\r\n        };\r\n    }\r\n    fromJSON(j, context) {\r\n        const mat3 = new Mat3();\r\n        mat3.fromJSON(j.value);\r\n        this.__value = mat3;\r\n    }\r\n    /**\r\n     * The clone method constructs a new Mat3 parameter,\r\n     * copies its values from this parameter and returns it.\r\n     *\r\n     * @return - Returns a new cloned Mat3 parameter.\r\n     */\r\n    clone() {\r\n        var _a;\r\n        const clonedParam = new Mat3Parameter(this.name, (_a = this.__value) === null || _a === void 0 ? void 0 : _a.clone());\r\n        return clonedParam;\r\n    }\r\n}\r\nRegistry.register('Mat3Parameter', Mat3Parameter);\r\nRegistry.register('Property_Mat3_32f', Mat3Parameter);\r\nexport { Mat3Parameter };\r\n//# sourceMappingURL=Mat3Parameter.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Registry } from '../../Registry';\r\nimport { Mat4 } from '../../Math/Mat4';\r\nimport { Parameter } from './Parameter';\r\n/**\r\n * Represents a specific type of parameter, that only stores Mat4(4x4 matrix) values.\r\n *\r\n * i.e.:\r\n * ```javascript\r\n * const mat4Param = new Ma3Parameter('MyMat4', new Mat4(...args))\r\n * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.\r\n * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.\r\n * myParameterOwnerItem.addParameter(mat4Param)\r\n * ```\r\n *\r\n * @extends Parameter\r\n */\r\nclass Mat4Parameter extends Parameter {\r\n    /**\r\n     * Create a Mat4 parameter.\r\n     *\r\n     * @param name - The name of the Mat4 parameter.\r\n     * @param value - The value of the parameter.\r\n     */\r\n    constructor(name = '', value) {\r\n        super(name, value ? value : new Mat4(), 'Mat4');\r\n    }\r\n    /**\r\n     * Extracts a number value from a buffer, updating current parameter state.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        var _a;\r\n        (_a = this.__value) === null || _a === void 0 ? void 0 : _a.readBinary(reader);\r\n    }\r\n    toJSON(context) {\r\n        var _a;\r\n        return {\r\n            value: (_a = this.__value) === null || _a === void 0 ? void 0 : _a.toJSON(),\r\n        };\r\n    }\r\n    fromJSON(j, context) {\r\n        const mat4 = new Mat4();\r\n        mat4.fromJSON(j.value);\r\n        this.__value = mat4;\r\n    }\r\n    /**\r\n     * The clone method constructs a new Mat4 parameter,\r\n     * copies its values from this parameter and returns it.\r\n     *\r\n     * @return - Returns a new cloned Mat4 parameter.\r\n     */\r\n    clone() {\r\n        var _a;\r\n        const clonedParam = new Mat4Parameter(this.name, (_a = this.__value) === null || _a === void 0 ? void 0 : _a.clone());\r\n        return clonedParam;\r\n    }\r\n}\r\nRegistry.register('Mat4Parameter', Mat4Parameter);\r\nRegistry.register('Property_Mat4_32f', Mat4Parameter);\r\nexport { Mat4Parameter };\r\n//# sourceMappingURL=Mat4Parameter.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Registry } from '../../Registry';\r\nimport { Xfo } from '../../Math/index';\r\nimport { Parameter } from './Parameter';\r\n/**\r\n * Represents a specific type of parameter, that only stores `Xfo` transform values.\r\n *\r\n * ```javascript\r\n * const xfoParam = new XfoParameter('MyXfo', new Xfo(new Vec3(1.2, 3.4, 1)))\r\n * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.\r\n * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.\r\n * myParameterOwnerItem.addParameter(xfoParam)\r\n * ```\r\n *\r\n * @extends Parameter\r\n */\r\nclass XfoParameter extends Parameter {\r\n    /**\r\n     * Create a Xfo parameter.\r\n     * @param name - The name of the Xfo parameter.\r\n     * @param value - The value of the parameter.\r\n     */\r\n    constructor(name = '', value) {\r\n        super(name, value ? value : new Xfo(), 'Xfo');\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Extracts a number value from a buffer, updating current parameter state.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        this.__value.readBinary(reader);\r\n    }\r\n    toJSON(context) {\r\n        return {\r\n            name: this.name,\r\n            value: this.__value.toJSON(),\r\n        };\r\n    }\r\n    fromJSON(j, context) {\r\n        const xfo = new Xfo();\r\n        xfo.fromJSON(j.value);\r\n        this.__value = xfo;\r\n        if (j.name)\r\n            this.name = j.name;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Clone\r\n    /**\r\n     * The clone method constructs a new Xfo parameter, copies its values\r\n     * from this parameter and returns it.\r\n     *\r\n     * @return - Returns a new Xfo parameter.\r\n     */\r\n    clone() {\r\n        const clonedParam = new XfoParameter(this.name, this.__value.clone());\r\n        return clonedParam;\r\n    }\r\n}\r\nRegistry.register('XfoParameter', XfoParameter);\r\nRegistry.register('Property_Xfo_32f', XfoParameter);\r\nexport { XfoParameter };\r\n//# sourceMappingURL=XfoParameter.js.map","/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { Registry } from '../../Registry';\r\nimport { Parameter } from './Parameter';\r\n/**\r\n * Represents a specific type of parameter, that only stores `BaseImage` values.\r\n *\r\n * i.e.:\r\n * ```javascript\r\n * // Since `Label` is a `BaseImage` implementation, it helps us with the example.\r\n * const label = new Label('My awesome label', 'LabelPack')\r\n * const imageParam = new ImageParameter('MyImage', label)\r\n * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.\r\n * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.\r\n * myParameterOwnerItem.addParameter(imageParam)\r\n * ```\r\n *\r\n * @extends Parameter\r\n */\r\nclass ImageParameter extends Parameter {\r\n    /**\r\n     * Create an image parameter.\r\n     *\r\n     * @param name - The name of the image parameter.\r\n     * @param value - The value of the parameter.\r\n     */\r\n    constructor(name = '', value) {\r\n        super(name, value, 'BaseImage');\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        const j = {\r\n            name: this.name,\r\n        };\r\n        if (this.__value) {\r\n            j.imageType = this.__value.getClassName();\r\n            j.value = this.__value.toJSON();\r\n        }\r\n        return j;\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    fromJSON(j, context) {\r\n        var _a;\r\n        if (j.imageType) {\r\n            this.__value = Registry.constructClass(j.imageType);\r\n            if (j.value)\r\n                (_a = this.__value) === null || _a === void 0 ? void 0 : _a.fromJSON(j.value, context);\r\n        }\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Clone\r\n    /**\r\n     * The clone method constructs a new image parameter,\r\n     * copies its values from this parameter and returns it.\r\n     *\r\n     * @return - Returns a new cloned image parameter.\r\n     */\r\n    clone() {\r\n        const clonedParam = new ImageParameter(this.name, this.__value);\r\n        return clonedParam;\r\n    }\r\n}\r\nRegistry.register('ImageParameter', ImageParameter);\r\nexport { ImageParameter };\r\n//# sourceMappingURL=ImageParameter.js.map","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Registry } from '../../Registry';\r\nimport { Parameter } from './Parameter';\r\n/**\r\n * Represents a specific type of parameter, that only stores Mat4(4x4 matrix) values.\r\n *\r\n * i.e.:\r\n * ```javascript\r\n * const stringParam = new StringParameter('MyString', 'A String value goes here')\r\n * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.\r\n * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.\r\n * myParameterOwnerItem.addParameter(stringParam)\r\n * ```\r\n *\r\n * @extends Parameter\r\n */\r\nclass StringParameter extends Parameter {\r\n    /**\r\n     * Create a string parameter.\r\n     * @param name - The name of the material color parameter.\r\n     * @param value - The value of the parameter.\r\n     */\r\n    constructor(name = '', value = '') {\r\n        super(name, value, 'String');\r\n        this.multiLine = false;\r\n    }\r\n    /**\r\n     * Sets flag that indicates if the string contains new line feeds.\r\n     *\r\n     * @param multiLine - The multiLine value.\r\n     */\r\n    setMultiLine(multiLine) {\r\n        this.multiLine = multiLine;\r\n    }\r\n    /**\r\n     * Returns multi-line flag value.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getMultiLine() {\r\n        return this.multiLine;\r\n    }\r\n    /**\r\n     * Extracts the string value from a buffer, updating current parameter state.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        this.__value = reader.loadStr();\r\n    }\r\n    /**\r\n     * The toJSON method serializes this instance as a JSON.\r\n     * It can be used for persistence, data transfer, etc.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        return { value: this.__value };\r\n    }\r\n    /**\r\n     * The fromJSON method takes a JSON and deserializes into an instance of this type.\r\n     *\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context) {\r\n        this.__value = j.value ? j.value : '';\r\n        this.emit('valueChanged', { mode: 0 });\r\n    }\r\n    /**\r\n     * The clone method constructs a new string parameter, copies its values\r\n     * from this parameter and returns it.\r\n     *\r\n     * @return - Returns a new string parameter.\r\n     */\r\n    clone() {\r\n        return new StringParameter(this.name, this.__value);\r\n    }\r\n}\r\nRegistry.register('StringParameter', StringParameter);\r\nRegistry.register('Property_String', StringParameter);\r\nexport { StringParameter };\r\n//# sourceMappingURL=StringParameter.js.map","import { Parameter } from './Parameter';\r\nimport { Registry } from '../../Registry';\r\n/**\r\n * A parameter for storing an array of string values.\r\n *\r\n * @extends Parameter\r\n */\r\nclass StringListParameter extends Parameter {\r\n    /**\r\n     * Create a string parameter.\r\n     * @param {string} name - The name of the material color parameter.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    constructor(name = '', value = []) {\r\n        super(name, value, 'String[]');\r\n    }\r\n    /**\r\n     * Extracts the string value from a buffer, updating current parameter state.\r\n     *\r\n     * @param {BinReader} reader - The reader value.\r\n     * @param {object} context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        this.__value = reader.loadStrArray();\r\n    }\r\n    /**\r\n     * The toJSON method serializes this instance as a JSON.\r\n     * It can be used for persistence, data transfer, etc.\r\n     *\r\n     * @param {Record<string, unknown>} context - The context value.\r\n     * @return {Record<string, boolean | undefined>} - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        return { value: this.__value };\r\n    }\r\n    /**\r\n     * The fromJSON method takes a JSON and deserializes into an instance of this type.\r\n     *\r\n     * @param {Record<string, boolean | undefined>} j - The json object this item must decode.\r\n     * @param {Record<string, unknown>} context - The context value.\r\n     */\r\n    fromJSON(j, context) {\r\n        this.__value = j.value;\r\n        this.emit('valueChanged', { mode: 0 });\r\n    }\r\n    /**\r\n     * The clone method constructs a new string parameter, copies its values\r\n     * from this parameter and returns it.\r\n     *\r\n     * @return {StringListParameter} - Returns a new string parameter.\r\n     */\r\n    clone() {\r\n        const clonedParam = new StringListParameter(this.name, this.__value);\r\n        return clonedParam;\r\n    }\r\n}\r\nRegistry.register('StringListParameter', StringListParameter);\r\nRegistry.register('Property_StringList', StringListParameter);\r\nexport { StringListParameter };\r\n//# sourceMappingURL=StringListParameter.js.map","/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { Registry } from '../../Registry';\r\nimport { Parameter } from './Parameter';\r\n/**\r\n * A Parameter for storing list(array) values.\r\n *\r\n * i.e.:\r\n * ```javascript\r\n * const listParam = new ListParameter('MyList', GearParameter)\r\n * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.\r\n * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.\r\n * myParameterOwnerItem.addParameter(listParam)\r\n * ```\r\n *\r\n * **Events**\r\n * * **valueChanged:** Triggered when setting a value changes in the array(insert, add, remove).\r\n * * **elementAdded:** Triggered when an element is added to the array(add, insert).\r\n * * **elementRemoved:** Triggered when an element is removed from the array\r\n *\r\n * @extends Parameter\r\n */\r\nclass ListParameter extends Parameter {\r\n    /**\r\n     * Create a list parameter.\r\n     * @param name - The name of the list parameter.\r\n     * @param dataType - The dataType value.\r\n     */\r\n    constructor(name = '', dataType) {\r\n        super(name, [], dataType);\r\n    }\r\n    /**\r\n     * The filter method.\r\n     * @param item - The item value.\r\n     * @return - The return value.\r\n     *\r\n     * @private\r\n     */\r\n    filter(item) {\r\n        return true;\r\n    }\r\n    /**\r\n     * Returns the count of items in the array.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getCount() {\r\n        var _a;\r\n        return ((_a = this.__value) === null || _a === void 0 ? void 0 : _a.length) || 0;\r\n    }\r\n    /**\r\n     * Returns value from the array in the specified index.\r\n     *\r\n     * @param index - The index value.\r\n     * @return - The return value.\r\n     */\r\n    getElement(index) {\r\n        if (!this.__value)\r\n            return;\r\n        return this.__value[index];\r\n    }\r\n    /**\r\n     * Sets a value in the specified array's index.\r\n     *\r\n     * @param index - The index value.\r\n     * @param value - The value value.\r\n     */\r\n    setElement(index, value) {\r\n        if (!this.__value)\r\n            this.__value = [];\r\n        this.__value[index] = value;\r\n        this.emit('valueChanged');\r\n    }\r\n    /**\r\n     * Adds a new element at the end of the array pile.\r\n     *\r\n     * @param elem - The elem value.\r\n     * @return - The return value.\r\n     */\r\n    addElement(elem) {\r\n        if ((!elem && elem != 0) || !this.filter(elem))\r\n            return;\r\n        if (!this.__value)\r\n            this.__value = [];\r\n        this.__value.push(elem);\r\n        this.emit('elementAdded', { elem, index: this.__value.length - 1 });\r\n        this.emit('valueChanged');\r\n        return elem;\r\n    }\r\n    /**\r\n     * Removes an array element from the specified index\r\n     *\r\n     * @param index - The index value.\r\n     */\r\n    removeElement(index) {\r\n        if (!this.__value)\r\n            this.__value = [];\r\n        const elem = this.__value[index];\r\n        this.__value.splice(index, 1);\r\n        this.emit('elementRemoved', { elem, index });\r\n        this.emit('valueChanged');\r\n    }\r\n    /**\r\n     * Inserts a new element in the specified index.\r\n     *\r\n     * @param index - The index value.\r\n     * @param elem - The elem value.\r\n     */\r\n    insertElement(index, elem) {\r\n        if (!this.__value || !this.filter(elem))\r\n            return;\r\n        this.__value.splice(index, 0, elem);\r\n        this.emit('elementAdded', { elem, index });\r\n        this.emit('valueChanged');\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        const items = [];\r\n        if (this.__value) {\r\n            for (const p of this.__value) {\r\n                if (typeof this.dataType === 'string')\r\n                    items.push(p);\r\n                else\r\n                    items.push(p.toJSON(context));\r\n            }\r\n        }\r\n        return {\r\n            value: items,\r\n        };\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context) {\r\n        if (j.items == undefined) {\r\n            console.warn('Invalid Parameter JSON');\r\n            return;\r\n        }\r\n        this.__value = [];\r\n        for (let i = 0; i < j.items.length; i++) {\r\n            let elem;\r\n            if (typeof this.dataType === 'string') {\r\n                elem = j.items[i];\r\n            }\r\n            else {\r\n                if (!this.dataType)\r\n                    throw 'No DataType';\r\n                elem = Registry.constructClass(this.dataType);\r\n                elem.fromJSON(j.items[i], context);\r\n            }\r\n            this.__value.push(elem);\r\n            this.emit('elementAdded', { elem, index: this.__value.length - 1 });\r\n        }\r\n        this.emit('valueChanged', { mode: 0 });\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Clone and Destroy\r\n    /**\r\n     * The clone method constructs a new list parameter, copies its values\r\n     * from this parameter and returns it.\r\n     *\r\n     * @return - Returns a new list parameter.\r\n     */\r\n    clone() {\r\n        const clonedValue = this.__value ? this.__value.slice(0) : [];\r\n        if (!this.dataType)\r\n            throw 'This parameter does not have a DataType';\r\n        const clonedParam = new ListParameter(this.name, this.dataType);\r\n        clonedParam.setValue(clonedValue);\r\n        return clonedParam;\r\n    }\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() {\r\n        if (!this.__value)\r\n            return;\r\n        for (let i = 0; i < this.__value.length; i++) {\r\n            if (this.__value[i] instanceof Parameter)\r\n                this.__value[i].destroy();\r\n            this.removeElement(i);\r\n        }\r\n    }\r\n}\r\n// Registry.register('ListParameter', ListParameter)\r\nexport { ListParameter };\r\n//# sourceMappingURL=ListParameter.js.map","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { Registry } from '../../Registry';\r\nimport { Parameter } from './Parameter';\r\n/**\r\n * Represents a specific type of parameter, that stores multiple parameters in object format.\r\n *\r\n * i.e.:\r\n * ```javascript\r\n * const structParam = new StructParameter('MyStructParam')\r\n * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.\r\n * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.\r\n * myParameterOwnerItem.addParameter(structParam)\r\n * ```\r\n *\r\n * **Events**\r\n * * **valueChanged:** Triggered whenever parameter's value changes.\r\n *\r\n * @extends Parameter\r\n */\r\nclass StructParameter extends Parameter {\r\n    /**\r\n     * Create a struct parameter.\r\n     * @param name - The name of the struct parameter.\r\n     */\r\n    constructor(name) {\r\n        super(name, {}, 'Struct');\r\n        this.members = [];\r\n    }\r\n    /**\r\n     * The _addMember method.\r\n     * @param parameter - The parameter value.\r\n     * @return - The return value.\r\n     * @private\r\n     */\r\n    addMember(parameter) {\r\n        if (this.__value)\r\n            this.__value[parameter.getName()] = parameter.value;\r\n        parameter.on('valueChanged', () => {\r\n            if (this.__value)\r\n                this.__value[parameter.getName()] = parameter.value;\r\n        });\r\n        this.members.push(parameter);\r\n        this.emit('valueChanged');\r\n        return parameter;\r\n    }\r\n    /**\r\n     * The getParameter method.\r\n     *\r\n     * @private\r\n     * @param name - The parameter name.\r\n     * @return - The return value.\r\n     */\r\n    getParameter(name) {\r\n        for (const p of this.members) {\r\n            if (p.getName() == name)\r\n                return p;\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Looks for a member parameter with the specified name and returns it.\r\n     *\r\n     * @param name - The parameter name.\r\n     * @return - The return value.\r\n     */\r\n    getMember(name) {\r\n        return this.getParameter(name);\r\n    }\r\n    /**\r\n     * Returns the name of all parameters in StructParameter.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getMemberNames() {\r\n        const names = [];\r\n        for (let i = 0; i < this.members.length; i++) {\r\n            const member = this.members[i];\r\n            if (member != null)\r\n                names[i] = member.getName();\r\n        }\r\n        return names;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        const j = {};\r\n        const members = [];\r\n        for (const p of this.members)\r\n            members.push(p.toJSON(context));\r\n        j.members = members;\r\n        j.name = this.name;\r\n        return j;\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context) {\r\n        if (j.members == undefined) {\r\n            console.warn('Invalid Parameter JSON');\r\n            return;\r\n        }\r\n        for (let i = 0; i < j.members.length; i++) {\r\n            if (j.members[i]) {\r\n                this.members[i].fromJSON(j.members[i], context);\r\n            }\r\n        }\r\n        this.name = j.name;\r\n    }\r\n    clone() {\r\n        const clonedParam = new StructParameter(this.name);\r\n        return clonedParam;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Destroy\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() {\r\n        for (const p of this.members) {\r\n            // TODO: not sure about this. I added a do-nothing destroy method in Parameter<T> to be overwritten\r\n            // since only some subclasses use destroy.\r\n            p.destroy();\r\n        }\r\n    }\r\n}\r\nRegistry.register('StructParameter', StructParameter);\r\nexport { StructParameter };\r\n//# sourceMappingURL=StructParameter.js.map","import { EventEmitter } from '../../Utilities/EventEmitter';\r\nimport { OperatorOutputMode } from '../Parameters/OperatorOutputMode';\r\n/** Class representing an operator output.\r\n * @extends EventEmitter\r\n */\r\nclass OperatorOutput extends EventEmitter {\r\n    /**\r\n     * Create an operator output.\r\n     * @param name - The name value.\r\n     * @param operatorOutputMode - The mode which the OperatorOutput uses to bind to its target parameter.\r\n     */\r\n    constructor(name, operatorOutputMode = OperatorOutputMode.OP_WRITE) {\r\n        super();\r\n        this._op = null;\r\n        this.__name = name;\r\n        this._mode = operatorOutputMode;\r\n        this._param = undefined;\r\n        this._paramBindIndex = -1;\r\n        this.detached = false;\r\n    }\r\n    /**\r\n     * Returns name of the output.\r\n     * @return - The name string.\r\n     */\r\n    getName() {\r\n        return this.__name;\r\n    }\r\n    /**\r\n     * Sets operator that owns this output. Called by the operator when adding outputs\r\n     * @param op - The operator object.\r\n     */\r\n    setOperator(op) {\r\n        this._op = op;\r\n    }\r\n    /**\r\n     * Returns operator that owns this output.\r\n     * @return - The operator object.\r\n     */\r\n    getOperator() {\r\n        return this._op;\r\n    }\r\n    /**\r\n     * Returns mode that the output writes to be parameter. Must be a number from OperatorOutputMode\r\n     * @return - The mode value.\r\n     */\r\n    getMode() {\r\n        return this._mode;\r\n    }\r\n    /**\r\n     * Returns true if this output is connected to a parameter.\r\n     * @return - The return value.\r\n     */\r\n    isConnected() {\r\n        return this._param != undefined;\r\n    }\r\n    /**\r\n     * The getParam method.\r\n     * @return - The return value.\r\n     */\r\n    getParam() {\r\n        return this._param;\r\n    }\r\n    /**\r\n     * Sets the Parameter for this output to write to.\r\n     * @param param - The param value.\r\n     * @param index - The index to bind at in the Parameter.\r\n     */\r\n    setParam(param, index = -1) {\r\n        if (this._param) {\r\n            this._param.unbindOperatorOutput(this);\r\n        }\r\n        this._param = param;\r\n        if (this._param) {\r\n            this._paramBindIndex = this._param.bindOperatorOutput(this, index);\r\n        }\r\n        this.emit('paramSet', { param: this._param });\r\n    }\r\n    /**\r\n     * Returns the index of the binding on the parameter of this OperatorOutput\r\n     * up to date.\r\n     * @return index - The index of the binding on the parameter.\r\n     */\r\n    getParamBindIndex() {\r\n        return this._paramBindIndex;\r\n    }\r\n    /**\r\n     * If bindings change on a Parameter, it will call this method to ensure the output index is\r\n     * up to date.\r\n     * @param index - The index of the binding on the parameter.\r\n     */\r\n    setParamBindIndex(index) {\r\n        this._paramBindIndex = index;\r\n    }\r\n    /**\r\n     * Propagates dirty to the connected parameter.\r\n     */\r\n    setDirty() {\r\n        if (this._param) {\r\n            this._param.setDirty(this._paramBindIndex);\r\n        }\r\n    }\r\n    /**\r\n     * The getValue method.\r\n     * @return - The return value.\r\n     */\r\n    getValue() {\r\n        if (this._param) {\r\n            return this._param.getValueFromOp(this._paramBindIndex);\r\n        }\r\n        else {\r\n            // @ts-expect-error ts-migrate(2554) FIXME: Expected 0-1 arguments, but got 2.\r\n            throw new Error('Cannot call getValue on OperatorOutput that is not connected:', this.__name);\r\n        }\r\n    }\r\n    /**\r\n     * When the value on a Parameter is modified by a user by calling 'setValue,\r\n     * then if any operators are bound, the value of the Parameter cannot be modified\r\n     * directly as it is the result of a computation. Instead, the Parameter calls\r\n     * 'backPropagateValue' on the Operator to cause the Operator to handle propagating\r\n     * the value to one or more of its inputs.\r\n     * to its inputs.\r\n     * @param value - The value param.\r\n     * @return - The modified value.\r\n     */\r\n    backPropagateValue(value) {\r\n        if (this._op) {\r\n            value = this._op.backPropagateValue(value);\r\n        }\r\n        return value;\r\n    }\r\n    /**\r\n     * The setClean method.\r\n     * @param value - The value param.\r\n     */\r\n    setClean(value) {\r\n        if (this._param) {\r\n            this._param.setCleanFromOp(value, this._paramBindIndex);\r\n        }\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        const paramPath = this._param ? this._param.getPath() : '';\r\n        return {\r\n            name: this.__name,\r\n            paramPath: context && context.makeRelative ? context.makeRelative(paramPath) : paramPath,\r\n            paramBindIndex: this._paramBindIndex,\r\n        };\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context) {\r\n        if (j.paramPath) {\r\n            // Note: the tree should have fully loaded by the time we are loading operators\r\n            // even new items and groups should have been created. Operators and state machines\r\n            // are loaded last.\r\n            context === null || context === void 0 ? void 0 : context.resolvePath(j.paramPath, (param) => {\r\n                this.setParam(param, j.paramBindIndex);\r\n            }, (reason) => {\r\n                console.warn(\"OperatorOutput: '\" + this.getName() + \"'. Unable to connect to:\" + j.paramPath);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * The detach method is called when an operator is being removed from the scene tree.\r\n     * It removes all connections to parameters in the scene.\r\n     */\r\n    detach() {\r\n        // This function is called when we want to suspend an operator\r\n        // from functioning because it is deleted and on the undo stack.\r\n        // Once operators have persistent connections,\r\n        // we will simply uninstall the output from the parameter.\r\n        this.detached = true;\r\n        this._paramBindIndex = this._param ? this._param.unbindOperatorOutput(this) : -1;\r\n    }\r\n    /**\r\n     * The reattach method can be called when re-instating an operator in the scene.\r\n     */\r\n    reattach() {\r\n        this.detached = false;\r\n        if (this._param) {\r\n            this._paramBindIndex = this._param.bindOperatorOutput(this, this._paramBindIndex);\r\n        }\r\n    }\r\n    /**\r\n     * The rebind rebinds the outputs to be at the top of the stack for its parameter.\r\n     */\r\n    rebind() {\r\n        if (this._param) {\r\n            this._param.unbindOperatorOutput(this);\r\n            this._paramBindIndex = this._param.bindOperatorOutput(this);\r\n        }\r\n    }\r\n}\r\nclass BooleanOperatorOutput extends OperatorOutput {\r\n}\r\nclass NumberOperatorOutput extends OperatorOutput {\r\n}\r\nclass Vec2OperatorOutput extends OperatorOutput {\r\n}\r\nclass Vec3OperatorOutput extends OperatorOutput {\r\n}\r\nclass Vec4OperatorOutput extends OperatorOutput {\r\n}\r\nclass ColorOperatorOutput extends OperatorOutput {\r\n}\r\nclass QuatOperatorOutput extends OperatorOutput {\r\n}\r\nclass XfoOperatorOutput extends OperatorOutput {\r\n}\r\nclass Mat3OperatorOutput extends OperatorOutput {\r\n}\r\nclass Mat4OperatorOutput extends OperatorOutput {\r\n}\r\nexport { OperatorOutput, BooleanOperatorOutput, NumberOperatorOutput, Vec2OperatorOutput, Vec3OperatorOutput, Vec4OperatorOutput, ColorOperatorOutput, QuatOperatorOutput, XfoOperatorOutput, Mat3OperatorOutput, Mat4OperatorOutput, };\r\n//# sourceMappingURL=OperatorOutput.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { BaseItem } from '../BaseItem';\r\nimport { OperatorOutput } from './OperatorOutput';\r\n/**\r\n * Class representing an operator.\r\n *\r\n * @extends BaseItem\r\n */\r\nclass Operator extends BaseItem {\r\n    /**\r\n     * Create an operator.\r\n     * @param name - The name value.\r\n     */\r\n    constructor(name = '') {\r\n        super(name);\r\n        this.__inputs = new Map();\r\n        this.__outputs = new Map();\r\n    }\r\n    /**\r\n     * This method sets the state of the operator to dirty which propagates\r\n     * to the outputs of this operator, and which may then propagate to other\r\n     * operators. When the scene is cleaned, which usually is caused by rendering\r\n     * then the chain of operators are cleaned by triggering evaluation.\r\n     * @private\r\n     */\r\n    setDirty() {\r\n        this.__outputs.forEach((output) => output.setDirty());\r\n    }\r\n    /**\r\n     * This method can be overridden in derived classes\r\n     * to perform general updates (see GLPass or BaseItem).\r\n     *\r\n     * @param event\r\n     * @private\r\n     */\r\n    parameterValueChanged(event) {\r\n        super.parameterValueChanged(event);\r\n        this.setDirty();\r\n    }\r\n    /**\r\n     * The addInput method.\r\n     * @param input - The name of the input, or the input object\r\n     * @return - The return value.\r\n     */\r\n    addInput(input) {\r\n        input.setOperator(this);\r\n        this.__inputs.set(input.getName(), input);\r\n        this.setDirty();\r\n        return input;\r\n    }\r\n    /**\r\n     * The removeInput method.\r\n     * @param input - The name of the input, or the input object\r\n     */\r\n    removeInput(input) {\r\n        if (typeof input == 'string')\r\n            input = this.getInput(input);\r\n        if (input.getParam())\r\n            input.setParam(undefined);\r\n        this.__inputs.delete(input.getName());\r\n    }\r\n    /**\r\n     * Getter for the number of inputs in this operator.\r\n     * @return - Returns the number of inputs.\r\n     */\r\n    getNumInputs() {\r\n        return this.__inputs.size;\r\n    }\r\n    /**\r\n     * The getInputByIndex method.\r\n     * @param index - The index value.\r\n     * @return - The return value.\r\n     */\r\n    getInputByIndex(index) {\r\n        return Array.from(this.__inputs.values())[index];\r\n    }\r\n    /**\r\n     * The getInput method.\r\n     * @param name - The name value.\r\n     * @return - The return value.\r\n     */\r\n    getInput(name) {\r\n        const input = this.__inputs.get(name);\r\n        if (!input)\r\n            throw `Couldn't find an Input with the name of '${name}'`;\r\n        return input;\r\n    }\r\n    /**\r\n     * The addOutput method.\r\n     * @param output - The name of the output, or the output object\r\n     * @return - The return value.\r\n     */\r\n    addOutput(output) {\r\n        output.setOperator(this);\r\n        // if (this.getOutput(output.getName())) throw new Error(`Operator output already exists ${output.getName()}`)\r\n        this.__outputs.set(output.getName(), output);\r\n        this.setDirty();\r\n        return output;\r\n    }\r\n    /**\r\n     * The removeOutput method.\r\n     * @param output - The name of the output, or the output object\r\n     */\r\n    removeOutput(output) {\r\n        if (typeof output == 'string')\r\n            output = this.getOutput(output);\r\n        if (!(output instanceof OperatorOutput)) {\r\n            throw new Error(`removeOutput only accepts string or OperatorInput`);\r\n        }\r\n        if (output.getParam())\r\n            output.setParam();\r\n        this.__outputs.delete(output.getName());\r\n    }\r\n    /**\r\n     * Getter for the number of outputs in this operator.\r\n     * @return - Returns the number of outputs.\r\n     */\r\n    getNumOutputs() {\r\n        return this.__outputs.size;\r\n    }\r\n    /**\r\n     * The getOutputByIndex method.\r\n     * @param index - The index value.\r\n     * @return - The return value.\r\n     */\r\n    getOutputByIndex(index) {\r\n        return Array.from(this.__outputs.values())[index];\r\n    }\r\n    /**\r\n     * The getOutput method.\r\n     * @param name - The name value.\r\n     * @return - The return value.\r\n     */\r\n    getOutput(name) {\r\n        const output = this.__outputs.get(name);\r\n        if (!output)\r\n            throw new Error(`Couldn't find an Output with the name of '${name}'`);\r\n        return output;\r\n    }\r\n    /**\r\n     * The evaluate method.\r\n     * Computes the values of each of the outputs based on the values of the inputs\r\n     * and the values of outputs with mode OP_READ_WRITE.\r\n     * This method must be implemented by all Operators.\r\n     */\r\n    evaluate() {\r\n        throw new Error('Not yet implemented');\r\n    }\r\n    /**\r\n     * When the value on a Parameter is modified by a user by calling 'setValue,\r\n     * then if any operators are bound, the value of the Parameter cannot be modified\r\n     * directly as it is the result of a computation. Instead, the Parameter calls\r\n     * 'backPropagateValue' on the Operator to cause the Operator to handle propagating\r\n     * the value to one or more of its inputs.\r\n     * to its inputs.\r\n     * @param value - The value param.\r\n     * @return - The modified value.\r\n     */\r\n    backPropagateValue(value) {\r\n        // TODO: Implement me for custom manipulations.\r\n        return value;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        const j = super.toJSON(context);\r\n        j.type = this.getClassName();\r\n        const inputs = [];\r\n        this.__inputs.forEach((input) => {\r\n            inputs.push(input.toJSON(context));\r\n        });\r\n        j.inputs = inputs;\r\n        const outputs = [];\r\n        this.__outputs.forEach((output) => {\r\n            outputs.push(output.toJSON(context));\r\n        });\r\n        j.outputs = outputs;\r\n        return j;\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context) {\r\n        super.fromJSON(j, context);\r\n        if (j.inputs) {\r\n            j.inputs.forEach((inputJson, index) => {\r\n                let input;\r\n                if (inputJson.name) {\r\n                    input = this.getInput(inputJson.name);\r\n                    if (!input) {\r\n                        input = this.addInput(inputJson.name);\r\n                    }\r\n                }\r\n                else {\r\n                    input = this.getInputByIndex(index);\r\n                }\r\n                ;\r\n                input.fromJSON(inputJson, context);\r\n            });\r\n        }\r\n        if (j.outputs) {\r\n            j.outputs.forEach((outputJson, index) => {\r\n                let output;\r\n                if (outputJson.name) {\r\n                    output = this.getOutput(outputJson.name);\r\n                    if (!output) {\r\n                        output = this.addOutput(outputJson.name);\r\n                    }\r\n                }\r\n                else {\r\n                    output = this.getOutputByIndex(index);\r\n                }\r\n                ;\r\n                output.fromJSON(outputJson, context);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * The detach method.\r\n     */\r\n    detach() {\r\n        this.__inputs.forEach((input) => input.detach());\r\n        this.__outputs.forEach((output) => output.detach());\r\n    }\r\n    /**\r\n     * The reattach method.\r\n     */\r\n    reattach() {\r\n        this.__inputs.forEach((input) => input.reattach());\r\n        this.__outputs.forEach((output) => output.reattach());\r\n    }\r\n    /**\r\n     * The rebind method.\r\n     */\r\n    rebind() {\r\n        this.__outputs.forEach((output) => output.rebind());\r\n    }\r\n}\r\nexport { Operator };\r\n//# sourceMappingURL=Operator.js.map","import { EventEmitter } from '../../Utilities/EventEmitter';\r\n/** Class representing an operator input.\r\n * @extends EventEmitter\r\n */\r\nclass OperatorInput extends EventEmitter {\r\n    /**\r\n     * Create an operator input.\r\n     * @param name - The name value.\r\n     */\r\n    constructor(name) {\r\n        super();\r\n        this.detached = false;\r\n        this.name = name;\r\n    }\r\n    /**\r\n     * The getName method.\r\n     * @return - The return value.\r\n     */\r\n    getName() {\r\n        return this.name;\r\n    }\r\n    /**\r\n     * Sets operator that owns this input. Called by the operator when adding inputs\r\n     * @param op - The operator object.\r\n     */\r\n    setOperator(op) {\r\n        this._op = op;\r\n    }\r\n    /**\r\n     * Returns operator that owns this input.\r\n     * @return - The operator object.\r\n     */\r\n    getOperator() {\r\n        return this._op;\r\n    }\r\n    /**\r\n     * Returns true if this input is connected to a parameter.\r\n     * @return - The return value.\r\n     */\r\n    isConnected() {\r\n        return this.param != null;\r\n    }\r\n    /**\r\n     * The getParam method.\r\n     * @return - The return value.\r\n     */\r\n    getParam() {\r\n        return this.param;\r\n    }\r\n    /**\r\n     * @private\r\n     * The handler function for when the input paramter changes.\r\n     * @param event - The event object.\r\n     */\r\n    paramValueChanged() {\r\n        if (this._op)\r\n            this._op.setDirty();\r\n    }\r\n    /**\r\n     * Assigns the Paramter to be used to provide the input value.\r\n     * @param param - The param value.\r\n     */\r\n    setParam(param) {\r\n        if (this.param) {\r\n            this.param.unbindOperatorInput(this);\r\n        }\r\n        this.param = param;\r\n        if (this.param) {\r\n            this.param.bindOperatorInput(this);\r\n        }\r\n        this.emit('paramSet', { param: this.param });\r\n    }\r\n    /**\r\n     * The getValue method.\r\n     * @return - The return value.\r\n     */\r\n    getValue() {\r\n        if (this.param)\r\n            return this.param.value;\r\n        throw new Error('Unable to getValue');\r\n    }\r\n    /**\r\n     * The setValue method.\r\n     * @param value - The value param.\r\n     */\r\n    setValue(value) {\r\n        if (this.param) {\r\n            this.param.setValue(value);\r\n        }\r\n    }\r\n    /**\r\n     * Propagates from the upstream parameter to the connected operator.\r\n     */\r\n    setDirty() {\r\n        if (this._op) {\r\n            this._op.setDirty();\r\n        }\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        const absPath = this.param ? this.param.getPath() : [];\r\n        const paramPath = (context && context.makeRelative ? context.makeRelative(absPath) : absPath);\r\n        return {\r\n            name: this.name,\r\n            paramPath: paramPath,\r\n        };\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context) {\r\n        if (j.paramPath) {\r\n            // Note: the tree should have fully loaded by the time we are loading operators\r\n            // even new items and groups should have been created. Operators and state machines\r\n            // are loaded last.\r\n            context === null || context === void 0 ? void 0 : context.resolvePath(j.paramPath, (param) => {\r\n                this.setParam(param);\r\n            }, () => {\r\n                console.warn(\"OperatorInput: '\" + this.getName() + \"'. Unable to connect to:\" + j.paramPath);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * The detach method is called when an operator is being removed from the scene tree.\r\n     * It removes all connections to parameters in the scene.\r\n     */\r\n    detach() {\r\n        // This function is called when we want to suspend an operator\r\n        // from functioning because it is deleted and on the undo stack.\r\n        // Once operators have persistent connections,\r\n        // we will simply uninstall the output from the parameter.\r\n        if (this.param) {\r\n            this.param.unbindOperatorInput(this);\r\n        }\r\n    }\r\n    /**\r\n     * The reattach method can be called when re-instating an operator in the scene.\r\n     */\r\n    reattach() {\r\n        this.detached = false;\r\n        if (this.param) {\r\n            this.param.bindOperatorInput(this);\r\n        }\r\n    }\r\n}\r\nclass BooleanOperatorInput extends OperatorInput {\r\n}\r\nclass NumberOperatorInput extends OperatorInput {\r\n}\r\nclass Vec2OperatorInput extends OperatorInput {\r\n}\r\nclass Vec3OperatorInput extends OperatorInput {\r\n}\r\nclass Vec4OperatorInput extends OperatorInput {\r\n}\r\nclass ColorOperatorInput extends OperatorInput {\r\n}\r\nclass QuatOperatorInput extends OperatorInput {\r\n}\r\nclass XfoOperatorInput extends OperatorInput {\r\n}\r\nclass Mat3OperatorInput extends OperatorInput {\r\n}\r\nclass Mat4OperatorInput extends OperatorInput {\r\n}\r\nexport { OperatorInput, BooleanOperatorInput, NumberOperatorInput, Vec2OperatorInput, Vec3OperatorInput, Vec4OperatorInput, ColorOperatorInput, QuatOperatorInput, XfoOperatorInput, Mat3OperatorInput, Mat4OperatorInput, };\r\n//# sourceMappingURL=OperatorInput.js.map","import { Registry } from '../../Registry';\r\nimport { Operator } from './Operator';\r\nimport { XfoOperatorInput } from './OperatorInput';\r\nimport { XfoOperatorOutput } from './OperatorOutput';\r\n/** The operator the calculates the global Xfo of a TreeItem based on its parents GlobalXfo and its own LocalXfo\r\n * @extends Operator\r\n * @private\r\n */\r\nclass CalcGlobalXfoOperator extends Operator {\r\n    /**\r\n     * Create a CalcGlobalXfoOperator operator.\r\n     *\r\n     * @param groupGlobalXfoParam - The GlobalXfo param found on the Group.\r\n     * @param cuttingPlaneParam - The parameter on the Group which defines the displacement to apply to the members.\r\n     */\r\n    // TODO: adding new XfoP... to make inheritence work\r\n    constructor(globalXfoParam, localXfoParam) {\r\n        super('CalcGlobalXfoOperator');\r\n        this.parentGlobal = new XfoOperatorInput('ParentGlobal');\r\n        this.localXfo = new XfoOperatorInput('LocalXfo');\r\n        this.globalXfo = new XfoOperatorOutput('GlobalXfo');\r\n        this.localXfo.setParam(localXfoParam);\r\n        this.globalXfo.setParam(globalXfoParam);\r\n        this.addInput(this.parentGlobal);\r\n        this.addInput(this.localXfo);\r\n        this.addOutput(this.globalXfo);\r\n    }\r\n    /**\r\n     * The backPropagateValue method inverts the mathematics of the 'evaluate'\r\n     * method so it can propagate the value backwards to its inputs.\r\n     * @param value - the new value being set on the output GlobalXfo\r\n     */\r\n    backPropagateValue(value) {\r\n        if (this.parentGlobal.isConnected()) {\r\n            const parentGlobalXfo = this.parentGlobal.getValue();\r\n            this.localXfo.setValue(parentGlobalXfo.inverse().multiply(value));\r\n        }\r\n        else {\r\n            this.localXfo.setValue(value);\r\n        }\r\n    }\r\n    /**\r\n     * The evaluate method calculates a new global Xfo based on the parents Global Xfo,\r\n     * and the local Xfo value.\r\n     */\r\n    evaluate() {\r\n        const localXfo = this.localXfo.getValue();\r\n        if (this.parentGlobal.isConnected()) {\r\n            const parentGlobalXfo = this.parentGlobal.getValue();\r\n            this.globalXfo.setClean(parentGlobalXfo.multiply(localXfo));\r\n        }\r\n        else {\r\n            this.globalXfo.setClean(localXfo);\r\n        }\r\n    }\r\n}\r\nRegistry.register('CalcGlobalXfoOperator', CalcGlobalXfoOperator);\r\nexport { CalcGlobalXfoOperator };\r\n//# sourceMappingURL=CalcGlobalXfoOperator.js.map","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Parameter } from './Parameter';\r\nimport { Box3 } from '../../Math/Box3';\r\n/**\r\n * Represents a specific type of parameter, that only stores `Box3` values.\r\n *\r\n * i.e.:\r\n * ```javascript\r\n * const boundingBox = new BoundingBoxParameter('MyBBox', new TreeItem())\r\n * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.\r\n * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.\r\n * myParameterOwnerItem.addParameter(boundingBox)\r\n * ```\r\n * @extends Parameter\r\n */\r\nclass BoundingBoxParameter extends Parameter {\r\n    /**\r\n     * Creates an instance of BoundingBoxParameter.\r\n     * @param name - Name of the parameter\r\n     * @param treeItem - `TreeItem` that contains `Box3` representing the Bounding Box\r\n     */\r\n    constructor(name = '', treeItem) {\r\n        super(name, new Box3(), 'Box3');\r\n        this.treeItem = treeItem;\r\n        this.dirty = true;\r\n    }\r\n    setParameterAsDirty() {\r\n        this.dirty = true;\r\n    }\r\n    /**\r\n     * Makes parameter value be dirty, so when `getValue` is called,\r\n     * an evaluation is then executed to re-calculate the BoundingBox\r\n     *\r\n     * @memberof BoundingBoxParameter\r\n     */\r\n    setDirty(index) {\r\n        const result = super.setDirty(index);\r\n        if (result) {\r\n            this.dirty = true;\r\n        }\r\n        // console.warn('check this if this method needs to be overloaded')\r\n        return result;\r\n    }\r\n    /**\r\n     * Returns bounding box value\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getValue() {\r\n        if (this.dirty) {\r\n            this.__value = this.treeItem._cleanBoundingBox(this.__value);\r\n        }\r\n        return this.__value;\r\n    }\r\n    toJSON(context) {\r\n        var _a;\r\n        return {\r\n            value: (_a = this.__value) === null || _a === void 0 ? void 0 : _a.toJSON(),\r\n        };\r\n    }\r\n    fromJSON(j, context) {\r\n        var _a;\r\n        // if (j.value.type) this.__value = Registry.constructClass('Box3') as Box3 // TODO: this is now broken\r\n        (_a = this.__value) === null || _a === void 0 ? void 0 : _a.fromJSON(j.value);\r\n    }\r\n    readBinary(reader, context) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    clone() {\r\n        var _a;\r\n        const bBox3Clone = new BoundingBoxParameter(this.name, this.treeItem);\r\n        bBox3Clone.value = (_a = this.__value) === null || _a === void 0 ? void 0 : _a.clone();\r\n        return bBox3Clone;\r\n    }\r\n}\r\nexport { BoundingBoxParameter };\r\n//# sourceMappingURL=BoundingBoxParameter.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Xfo, Box3 } from '../Math/index';\r\nimport { Registry } from '../Registry';\r\n// import { BooleanParameter, Parameter, XfoParameter } from './Parameters/index'\r\nimport { BooleanParameter } from './Parameters/BooleanParameter';\r\nimport { XfoParameter } from './Parameters/XfoParameter';\r\nimport { BaseItem } from './BaseItem';\r\nimport { CalcGlobalXfoOperator } from './Operators/CalcGlobalXfoOperator';\r\nimport { BoundingBoxParameter } from './Parameters/BoundingBoxParameter';\r\n/**\r\n * Class representing an Item in the scene tree with hierarchy capabilities (has children).\r\n * It has the capability to add and remove children.\r\n * **Parameters**\r\n * * **Visible(`BooleanParameter`):** Shows/Hides the item.\r\n * * **LocalXfo(`XfoParameter`):** Specifies the offset of this tree item from its parent.\r\n * * **GlobalXfo(`XfoParameter`):** Provides the computed world Xfo of this tree item.\r\n * * **BoundingBox(`BoundingBox`):** Provides the bounding box for the tree item and all of its children in the 3d scene.\r\n *\r\n * **Events**\r\n * * **globalXfoChanged:** Emitted when the value of GlobalXfo parameter changes.\r\n * * **visibilityChanged:** Emitted when the visibility on the tree item changes.\r\n * * **highlightChanged:** Emitted when the highlight on the tree item changes.\r\n * * **childAdded:** Emitted when a item is added as a child.\r\n * * **childRemoved:** Emitted when an item is removed from the child nodes.\r\n * * **pointerDown:** Emitted when a pointerDown event happens in an item.\r\n * * **pointerUp:** Emitted when a pointerUp event happens in an item.\r\n * * **pointerMove:** Emitted when a pointerMove event happens in an item.\r\n * * **pointerEnter:** Emitted when a pointerEnter event happens in an item.\r\n *\r\n * @extends {BaseItem}\r\n */\r\nclass TreeItem extends BaseItem {\r\n    /**\r\n     * Creates a tree item with the specified name.\r\n     *\r\n     * @param name - The name of the tree item. It's the identifier of the tree item.\r\n     * It's an identifier intended to be human readable.\r\n     * It's included in the path that we use to access a particular item.\r\n     * It's used to display it in the tree.\r\n     */\r\n    constructor(name) {\r\n        super(name);\r\n        // Controls if this TreeItem or its children contribute to the bounding boxes\r\n        // in the scene. If set to false, Camera framing will ignore this item,\r\n        this.disableBoundingBox = false;\r\n        this.__childItems = [];\r\n        this.__childItemsEventHandlers = [];\r\n        this.__childItemsMapping = {};\r\n        /**\r\n         * @member globalXfoParam - Stores the global Xfo for this tree item.\r\n         * global xfos are calculated from the localXfo and parentXfo.\r\n         */\r\n        this.globalXfoParam = new XfoParameter('GlobalXfo', new Xfo());\r\n        /**\r\n         * @member localXfoParam - Stores the local Xfo for this tree item.\r\n         * local Xfos are the offset from the parent's coordinate frame.\r\n         */\r\n        this.localXfoParam = new XfoParameter('LocalXfo', new Xfo());\r\n        /**\r\n         * @member boundingBoxParam - Stores the bounding box for this tree item\r\n         */\r\n        this.boundingBoxParam = new BoundingBoxParameter('BoundingBox', this);\r\n        /**\r\n         * @member visibleParam - Whether this tree item is visible or not.\r\n         * Any given tree item is also is affected by parent's visibility.\r\n         */\r\n        this.visibleParam = new BooleanParameter('Visible', true);\r\n        this.__highlightMapping = {};\r\n        this.__highlights = [];\r\n        this.__visible = true;\r\n        this.__visibleCounter = 1; // Visible by Default.\r\n        // /////////////////////////////////////\r\n        // Add parameters.\r\n        this.addParameter(this.visibleParam);\r\n        this.addParameter(this.localXfoParam);\r\n        this.addParameter(this.globalXfoParam);\r\n        this.addParameter(this.boundingBoxParam);\r\n        this.globalXfoOp = new CalcGlobalXfoOperator(this.globalXfoParam, this.localXfoParam);\r\n        this.globalXfoParam.on('valueChanged', (event) => {\r\n            this.setBoundingBoxDirty();\r\n            // Note: deprecate this event.\r\n            this.emit('globalXfoChanged', event);\r\n        });\r\n        this.visibleParam.on('valueChanged', () => {\r\n            this.__visibleCounter += this.visibleParam.value ? 1 : -1;\r\n            this.updateVisibility();\r\n        });\r\n    }\r\n    /**\r\n     * Sets the owner (another TreeItem) of the current TreeItem.\r\n     * @param parentItem - The parent item.\r\n     */\r\n    setOwner(parentItem) {\r\n        if (this.__ownerItem) {\r\n            const owner_TreeItem = this.__ownerItem;\r\n            if (owner_TreeItem && owner_TreeItem instanceof TreeItem) {\r\n                // The effect of the invisible owner is removed.\r\n                if (!owner_TreeItem.isVisible())\r\n                    this.__visibleCounter++;\r\n                const index = owner_TreeItem.getChildIndex(this);\r\n                if (index >= 0)\r\n                    owner_TreeItem.unbindChild(index, this);\r\n            }\r\n        }\r\n        super.setOwner(parentItem);\r\n        if (this.__ownerItem) {\r\n            const owner_TreeItem = this.__ownerItem;\r\n            if (owner_TreeItem) {\r\n                // The effect of the invisible owner is added.\r\n                if (!owner_TreeItem.isVisible())\r\n                    this.__visibleCounter--;\r\n                this.globalXfoOp.getInput('ParentGlobal').setParam(owner_TreeItem.globalXfoParam);\r\n            }\r\n        }\r\n        else {\r\n            this.globalXfoOp.getInput('ParentGlobal').setParam(undefined);\r\n        }\r\n        this.updateVisibility();\r\n    }\r\n    /**\r\n     * The updatePath method.\r\n     * @private\r\n     */\r\n    updatePath() {\r\n        super.updatePath();\r\n        for (const childItem of this.__childItems) {\r\n            if (childItem)\r\n                childItem.updatePath();\r\n        }\r\n    }\r\n    /**\r\n     * Returns the parent of current TreeItem.\r\n     *\r\n     * @return - Returns the parent item.\r\n     */\r\n    getParentItem() {\r\n        return this.getOwner(); // TODO: TreeItem cast\r\n    }\r\n    /**\r\n     * Sets the parent of current TreeItem.\r\n     *\r\n     * @param parentItem - The parent item.\r\n     */\r\n    setParentItem(parentItem) {\r\n        this.setOwner(parentItem);\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Visibility\r\n    /**\r\n     * Returns visible parameter value for current TreeItem.\r\n     *\r\n     * @return - The visible param value.\r\n     */\r\n    isVisible() {\r\n        // Should never be more than 1, but can be less than 0.\r\n        return this.__visibleCounter > 0;\r\n    }\r\n    /**\r\n     * Sets visible parameter value.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    setVisible(visible) {\r\n        this.visibleParam.value = visible;\r\n    }\r\n    /**\r\n     * Updates current TreeItem visible state and propagates its value to children elements.\r\n     *\r\n     * @param val - The val param.\r\n     */\r\n    propagateVisibility(val) {\r\n        this.__visibleCounter += val;\r\n        this.updateVisibility();\r\n    }\r\n    /**\r\n     * The updateVisibility method.\r\n     * @return - Returns a boolean.\r\n     * @private\r\n     */\r\n    updateVisibility() {\r\n        const visible = this.__visibleCounter > 0;\r\n        if (visible != this.__visible) {\r\n            this.__visible = visible;\r\n            for (const childItem of this.__childItems) {\r\n                childItem.propagateVisibility(this.__visible ? 1 : -1);\r\n            }\r\n            this.emit('visibilityChanged', { visible });\r\n            // Note: we used to handle this by listening to a 'valueChanged' event on the\r\n            // parameter.\r\n            const owner_TreeItem = this.__ownerItem;\r\n            if (owner_TreeItem && owner_TreeItem instanceof TreeItem) {\r\n                owner_TreeItem.setBoundingBoxDirty();\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Highlights\r\n    /**\r\n     * Adds a highlight to the tree item.\r\n     *\r\n     * @param name - The name of the tree item.\r\n     * @param color - The color of the highlight.\r\n     * @param propagateToChildren - A boolean indicating whether to propagate to children.\r\n     */\r\n    addHighlight(name, color, propagateToChildren = false) {\r\n        // If the highlight was already in the list,\r\n        // remove it and put it at the top.\r\n        if (name in this.__highlightMapping) {\r\n            if (this.__highlights[this.__highlights.length - 1] != name) {\r\n                // The highlight was already in the list, but not at the top. Move it to the top.\r\n                const id = this.__highlights.indexOf(name);\r\n                this.__highlights.splice(id, 1);\r\n                this.__highlights.push(name);\r\n                this.emit('highlightChanged', { name, color });\r\n            }\r\n            else {\r\n                // This item is already highlighted with this highlight\r\n                if (!this.__highlightMapping[name].isEqual(color)) {\r\n                    this.__highlightMapping[name] = color;\r\n                    this.emit('highlightChanged', { name, color });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.__highlights.push(name);\r\n            this.__highlightMapping[name] = color;\r\n            this.emit('highlightChanged', { name, color });\r\n        }\r\n        if (propagateToChildren) {\r\n            this.__childItems.forEach((childItem) => {\r\n                childItem.addHighlight(name, color, propagateToChildren);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Removes a highlight to the tree item.\r\n     *\r\n     * @param name - The name of the tree item.\r\n     * @param propagateToChildren - A boolean indicating whether to propagate to children.\r\n     */\r\n    removeHighlight(name, propagateToChildren = false) {\r\n        if (name in this.__highlightMapping) {\r\n            if (this.__highlights[this.__highlights.length - 1] == name) {\r\n                this.__highlights.pop();\r\n                delete this.__highlightMapping[name];\r\n                if (this.__highlights.length > 0) {\r\n                    const nextName = this.__highlights[this.__highlights.length - 1];\r\n                    const nextColor = this.__highlightMapping[nextName];\r\n                    this.emit('highlightChanged', { name: nextName, color: nextColor });\r\n                }\r\n                else {\r\n                    // The last highlight was removed, so emit an event saying we are no longer highlighted.\r\n                    this.emit('highlightChanged');\r\n                }\r\n            }\r\n            else {\r\n                // The removed highlight was not the current highlight, so no change needs to be shown.\r\n                const id = this.__highlights.indexOf(name);\r\n                this.__highlights.splice(id, 1);\r\n                delete this.__highlightMapping[name];\r\n                this.emit('highlightChanged');\r\n            }\r\n            if (propagateToChildren) {\r\n                this.__childItems.forEach((childItem) => {\r\n                    childItem.removeHighlight(name, propagateToChildren);\r\n                });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns the color of the current highlight.\r\n     *\r\n     * @return - The color value.\r\n     */\r\n    getHighlight() {\r\n        const check = this.__highlights.length > 0;\r\n        if (!check) {\r\n            throw Error('highlight length > 0');\r\n        }\r\n        return this.__highlightMapping[this.__highlights[this.__highlights.length - 1]];\r\n    }\r\n    /**\r\n     * Returns `true` if this items has a highlight color assigned.\r\n     *\r\n     * @return - `True` if this item is highlighted.\r\n     */\r\n    isHighlighted() {\r\n        return this.__highlights.length > 0;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Bounding Box\r\n    /**\r\n     * The _cleanBoundingBox method.\r\n     * @param bbox - The bounding box value.\r\n     * @return - The return value.\r\n     * @private\r\n     */\r\n    _cleanBoundingBox(bbox) {\r\n        bbox.reset();\r\n        this.__childItems.forEach((childItem) => {\r\n            if (childItem.isVisible()) {\r\n                // console.log(\" - \", childItem.constructor.name, childItem.getName(), childItem.globalXfoParam.value.sc.x, childItem.getBoundingBox().toString())\r\n                const box3 = childItem.boundingBoxParam.value;\r\n                if (box3)\r\n                    bbox.addBox3(box3);\r\n            }\r\n        });\r\n        // console.log(this.getName(), bbox.toString())\r\n        return bbox;\r\n    }\r\n    /**\r\n     * The _childBBoxChanged method.\r\n     * @private\r\n     */\r\n    childBBoxChanged() {\r\n        this.setBoundingBoxDirty();\r\n    }\r\n    /**\r\n     * The setBoundingBoxDirty method.\r\n     * @private\r\n     */\r\n    setBoundingBoxDirty() {\r\n        if (this.boundingBoxParam) {\r\n            // Will cause boundingChanged to emit\r\n            this.boundingBoxParam.setDirty(-1);\r\n        }\r\n        // Note: we used to handle this by listening to a 'valueChanged' event on the\r\n        // parameter.\r\n        const owner_TreeItem = this.__ownerItem;\r\n        if (owner_TreeItem && owner_TreeItem instanceof TreeItem) {\r\n            owner_TreeItem.setBoundingBoxDirty();\r\n        }\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Children\r\n    /**\r\n     * Returns children list, but children are not required to have hierarchy structure(`TreeItem`).\r\n     * Meaning that it could be another kind of item than `TreeItem`.\r\n     *\r\n     * i.e. **BaseImage**\r\n     *\r\n     * @return - List of `TreeItem` owned by current TreeItem.\r\n     */\r\n    getChildren() {\r\n        return this.__childItems;\r\n    }\r\n    /**\r\n     * Returns the number of child elements current `TreeItem` has.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getNumChildren() {\r\n        return this.__childItems.length;\r\n    }\r\n    /**\r\n     * Verifies if there's a child with the specified name.\r\n     * If there's one, modifiers are applied to the name and returned.\r\n     *\r\n     * @param name - The name value.\r\n     * @return - Returns a unique name.\r\n     */\r\n    generateUniqueName(name) {\r\n        if (!(name in this.__childItemsMapping))\r\n            return name;\r\n        let index = 1;\r\n        if (name.length > 4 && !Number.isNaN(parseInt(name.substring(name.length - 4))))\r\n            index = parseInt(name.substr(name.length - 4));\r\n        else if (name.length > 3 && !Number.isNaN(parseInt(name.substring(name.length - 3))))\r\n            index = parseInt(name.substr(name.length - 3));\r\n        else if (name.length > 2 && !Number.isNaN(parseInt(name.substring(name.length - 2))))\r\n            index = parseInt(name.substr(name.length - 2));\r\n        const names = [];\r\n        for (const c of this.__childItems) {\r\n            // Sometimes we have an empty child slot.\r\n            // We resize the child vector, and then populate it.\r\n            if (c) {\r\n                names.push(c.getName());\r\n            }\r\n        }\r\n        let uniqueName = name;\r\n        while (true) {\r\n            let suffix = '' + index;\r\n            while (suffix.length < 2) {\r\n                suffix = '0' + suffix;\r\n            }\r\n            uniqueName = name + suffix;\r\n            if (!names.includes(uniqueName))\r\n                break;\r\n            index++;\r\n        }\r\n        return uniqueName;\r\n    }\r\n    /**\r\n     * Updates the internal acceleration structure that speeds up looking up children by name.\r\n     * @param start - The start value.\r\n     * @private\r\n     */\r\n    updateChildNameMapping(start) {\r\n        // If a child has been added or removed from the\r\n        // tree item, we need to update the acceleration structure.\r\n        for (let i = start; i < this.__childItems.length; i++) {\r\n            this.__childItemsMapping[this.__childItems[i].getName()] = i;\r\n        }\r\n    }\r\n    /**\r\n     * When a child's name changed, we update our acceleration structure.\r\n     * @param event - The start value.\r\n     * @private\r\n     */\r\n    childNameChanged(event) {\r\n        // Update the acceleration structure.\r\n        const index = this.__childItemsMapping[event.oldName];\r\n        delete this.__childItemsMapping[event.oldName];\r\n        this.__childItemsMapping[event.newName] = index;\r\n    }\r\n    /**\r\n     * Inserts a child. It accepts all kind of `TreeItem`, not only `TreeItem`.\r\n     *\r\n     * @param childItem - The child TreeItem to insert.\r\n     * @param index - The index to add the child item.\r\n     * @param maintainXfo - Boolean that determines if the Xfo value is maintained.\r\n     * @param fixCollisions - Modify the name of the item to avoid name collisions.\r\n     * If false, an exception wll be thrown instead if a name collision occurs.\r\n     * @return - The index of the child item in this items children array.\r\n     */\r\n    insertChild(childItem, index, maintainXfo = false, fixCollisions = true) {\r\n        if (childItem.getName() in this.__childItemsMapping) {\r\n            if (fixCollisions) {\r\n                childItem.setName(this.generateUniqueName(childItem.getName()));\r\n            }\r\n            else {\r\n                throw new Error(\"Item '\" + childItem.getName() + \"' is already a child of :\" + this.getPath());\r\n            }\r\n        }\r\n        if (!(childItem instanceof TreeItem)) {\r\n            throw new Error('Object is is not a tree item :' + childItem); // TODO: need better output here+ childItem.constructor.name)\r\n        }\r\n        const listenerIDs = {};\r\n        listenerIDs['nameChanged'] = childItem.on('nameChanged', (event) => {\r\n            this.childNameChanged(event);\r\n        });\r\n        if (maintainXfo) {\r\n            const globalXfo = this.globalXfoParam.value;\r\n            const childGlobalXfo = childItem.globalXfoParam.value;\r\n            const newLocalXfo = globalXfo.inverse().multiply(childGlobalXfo);\r\n            childItem.localXfoParam.value = newLocalXfo;\r\n        }\r\n        this.setBoundingBoxDirty();\r\n        this.__highlights.forEach((name) => {\r\n            const color = this.__highlightMapping[name];\r\n            childItem.addHighlight(name, color, true);\r\n        });\r\n        this.__childItems.splice(index, 0, childItem);\r\n        this.__childItemsEventHandlers.splice(index, 0, listenerIDs);\r\n        this.__childItemsMapping[childItem.getName()] = index;\r\n        this.updateChildNameMapping(index);\r\n        childItem.setOwner(this);\r\n        this.emit('childAdded', { childItem, index });\r\n        return childItem;\r\n    }\r\n    /**\r\n     * Adds a child.\r\n     *\r\n     * @param childItem - The child TreeItem to add.\r\n     * @param maintainXfo - Boolean that determines if\r\n     * the Global Xfo value is maintained. If true, when moving\r\n     * items in the hierarchy from one parent to another, the local Xfo\r\n     * of the item will be modified to maintain and the Global Xfo.\r\n     * Note: this option defaults to false because we expect that is the\r\n     * behavior users would expect when manipulating the tree in code.\r\n     * To be safe and unambiguous, always try to specify this value.\r\n     * @param fixCollisions - Modify the name of the item to avoid\r\n     * name collisions with other children of the same parent.\r\n     * If false, an exception wll be thrown instead if a name collision occurs.\r\n     * @return childItem - The child TreeItem that was added.\r\n     */\r\n    addChild(childItem, maintainXfo = true, fixCollisions = true) {\r\n        const index = this.__childItems.length;\r\n        this.insertChild(childItem, index, maintainXfo, fixCollisions);\r\n        return childItem;\r\n    }\r\n    /**\r\n     * Returns child element in the specified index.\r\n     *\r\n     * @param index - The index to remove the child TreeItem.\r\n     * @return - Return the child TreeItem.\r\n     */\r\n    getChild(index) {\r\n        return this.__childItems[index];\r\n    }\r\n    /**\r\n     * Returns child element with the specified name.\r\n     *\r\n     * @param name - The name value.\r\n     * @return - Return the child TreeItem.\r\n     */\r\n    getChildByName(name) {\r\n        const index = this.__childItemsMapping[name];\r\n        if (index != undefined) {\r\n            return this.__childItems[index];\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns children names as an array of strings.\r\n     *\r\n     * @return - An array of names for each child.\r\n     */\r\n    getChildNames() {\r\n        const names = [];\r\n        for (let i = 0; i < this.__childItems.length; i++) {\r\n            const childItem = this.__childItems[i];\r\n            if (childItem != null)\r\n                names[i] = childItem.getName();\r\n        }\r\n        return names;\r\n    }\r\n    /**\r\n     * UnBind an item from the group. This method is called\r\n     * automatically when an item is removed from the group.\r\n     * @param index - The index value.\r\n     * @param childItem - item to unbind.\r\n     * @private\r\n     */\r\n    unbindChild(index, childItem) {\r\n        const listenerIDs = this.__childItemsEventHandlers[index];\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const key in listenerIDs) {\r\n            childItem.removeListenerById(key, listenerIDs[key]);\r\n        }\r\n        this.__childItems.splice(index, 1);\r\n        this.__childItemsEventHandlers.splice(index, 1);\r\n        delete this.__childItemsMapping[childItem.getName()];\r\n        this.updateChildNameMapping(index);\r\n        this.setBoundingBoxDirty();\r\n        this.emit('childRemoved', { childItem, index });\r\n    }\r\n    /**\r\n     * Removes a child TreeItem by specifying its index.\r\n     *\r\n     * @param index - The index value.\r\n     */\r\n    removeChild(index) {\r\n        const childItem = this.__childItems[index];\r\n        if (!childItem) {\r\n            return;\r\n        }\r\n        this.unbindChild(index, childItem);\r\n        childItem.setOwner(undefined);\r\n    }\r\n    /**\r\n     * Removes a child TreeItem by specifying its name.\r\n     *\r\n     * @param name - The name param.\r\n     * @return - Return the child TreeItem.\r\n     */\r\n    removeChildByName(name) {\r\n        const index = this.__childItemsMapping[name];\r\n        if (index != undefined) {\r\n            return this.removeChild(index);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the provided item from this TreeItem if it is one of its children.\r\n     * An exception is thrown if the item is not a child of this tree item.\r\n     *\r\n     * @param childItem - The child TreeItem to remove.\r\n     */\r\n    removeChildByHandle(childItem) {\r\n        const index = this.__childItems.indexOf(childItem);\r\n        if (index == -1)\r\n            throw new Error('Error in removeChildByHandle. Child not found:' + childItem.getName());\r\n        this.removeChild(index);\r\n    }\r\n    /**\r\n     * Removes all children Items.\r\n     */\r\n    removeAllChildren() {\r\n        let index = this.__childItems.length;\r\n        while (index--) {\r\n            this.removeChild(index);\r\n        }\r\n        this.setBoundingBoxDirty();\r\n    }\r\n    /**\r\n     * Returns index position of the specified item.\r\n     *\r\n     * @param childItem - The child TreeItem value.\r\n     * @return - Child index in children array.\r\n     */\r\n    getChildIndex(childItem) {\r\n        return this.__childItems.indexOf(childItem);\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Path Traversal\r\n    // Note: Path resolution starts at the root of the\r\n    // tree the path was generated from (so index=1, because we don't resolve root).\r\n    // Note: When a path is made relative to an item in its tree, the path\r\n    // starts with the child elements.\r\n    /**\r\n     * The resolvePath method traverses the subtree from this item down\r\n     * matching each name in the path with a child until it reaches the\r\n     * end of the path.\r\n     *\r\n     * @param path - The path value.\r\n     * @param index - The index value.\r\n     * @return - The return value.\r\n     */\r\n    resolvePath(path, index = 0, displayError = false) {\r\n        if (typeof path == 'string')\r\n            path = path.split('/');\r\n        if (index == 0) {\r\n            if (path[0] == '.' || path[0] == this.__name)\r\n                index++;\r\n            else if (path[0] == '..') {\r\n                if (this.__ownerItem) {\r\n                    return this.__ownerItem.resolvePath(path, index + 1);\r\n                }\r\n                else if (displayError) {\r\n                    throw Error('this.__ownerItem is undefined');\r\n                }\r\n                else {\r\n                    console.warn('this.__ownerItem is undefined');\r\n                }\r\n            }\r\n            else {\r\n                // Note: new paths should be generated starting with the name of the root object.\r\n                // Re-enable this to debug path issues.\r\n                // console.warn(\"Paths should start with the name of the root item or '.'\")\r\n            }\r\n        }\r\n        if (index == path.length) {\r\n            return this;\r\n        }\r\n        const childName = path[index];\r\n        const childItem = this.getChildByName(childName);\r\n        if (childItem == undefined) {\r\n            // Maybe the name is a parameter name.\r\n            const param = this.getParameter(path[index]);\r\n            if (param) {\r\n                return param;\r\n            }\r\n            // Note: consuming code should catch and display errors if necessary.\r\n            // Silent failures are extremely difficult to debug.\r\n            throw new Error(`Unable to resolve path : [${path.toString()}] after: ${this.getName()} \\nNo child or parameter called : \"${path[index]}\"`);\r\n        }\r\n        return childItem.resolvePath(path, index + 1);\r\n    }\r\n    /**\r\n     * Traverse the tree structure from this point down\r\n     * and fire the callback for each visited item.\r\n     * Note: Depth only used by selection sets for now.\r\n     *\r\n     * @param callback - The callback value.\r\n     * @param includeThis - Fire the callback for this item.\r\n     */\r\n    traverse(callback, includeThis = true) {\r\n        const __c = (treeItem, depth) => {\r\n            const children = treeItem.getChildren();\r\n            for (const childItem of children) {\r\n                if (childItem && childItem instanceof TreeItem)\r\n                    __t(childItem, depth + 1);\r\n            }\r\n        };\r\n        const __t = (treeItem, depth) => {\r\n            if (callback(treeItem, depth) == false)\r\n                return;\r\n            if (treeItem instanceof TreeItem)\r\n                __c(treeItem, depth);\r\n        };\r\n        if (includeThis) {\r\n            __t(this, 1);\r\n        }\r\n        else {\r\n            __c(this, 0);\r\n        }\r\n    }\r\n    // ///////////////////////\r\n    // Events\r\n    /**\r\n     * Called by the Viewport when events are received by the canvas element.\r\n     * The event is propagated to a TreeItem if it is under the pointer at the time.\r\n     * The ZeaPointerEvent abstracts the Mouse, touch and our custom XR events.\r\n     * This method emits the ZeaPointerEvent with the key 'pointerDown', and\r\n     * propagates it up to the TreeItem's owner.\r\n     *\r\n     * @param event - The event value\r\n     */\r\n    onPointerDown(event) {\r\n        this.emit('pointerDown', event);\r\n        const owner_TreeItem = this.__ownerItem;\r\n        if (event.propagating && owner_TreeItem) {\r\n            owner_TreeItem.onPointerDown(event);\r\n        }\r\n    }\r\n    /**\r\n     * Called by the Viewport when events are received by the canvas element.\r\n     * The event is propagated to a TreeItem if it is under the pointer at the time.\r\n     * The ZeaPointerEvent abstracts the Mouse, touch and our custom XR events.\r\n     * This method emits the ZeaPointerEvent with the key 'pointerDown', and\r\n     * propagates it up to the TreeItem's owner.\r\n     *\r\n     * @param event - The pointer event that was generated from the user interaction\r\n     */\r\n    onPointerUp(event) {\r\n        this.emit('pointerUp', event);\r\n        const owner_TreeItem = this.__ownerItem;\r\n        if (event.propagating && owner_TreeItem) {\r\n            owner_TreeItem.onPointerUp(event);\r\n        }\r\n    }\r\n    /**\r\n     * Called by the Viewport when events are received by the canvas element.\r\n     * The event is propagated to a TreeItem if it is under the pointer at the time.\r\n     * The ZeaPointerEvent abstracts the Mouse, touch and our custom XR events.\r\n     * This method emits the ZeaPointerEvent with the key 'pointerMove', and\r\n     * propagates it up to the TreeItem's owner.\r\n     *\r\n     * @param event - The pointer event that was generated from the user interaction\r\n     */\r\n    onPointerMove(event) {\r\n        this.emit('pointerMove', event);\r\n        const owner_TreeItem = this.__ownerItem;\r\n        if (event.propagating && owner_TreeItem) {\r\n            owner_TreeItem.onPointerMove(event);\r\n        }\r\n    }\r\n    /**\r\n     * Called by the Viewport when the mouse or other pointer enters the canvas element.\r\n     * The event is propagated to a TreeItem if it is under the pointer at the time.\r\n     * The ZeaPointerEvent abstracts the Mouse, touch and our custom XR events.\r\n     * This method emits the ZeaPointerEvent with the key 'pointerEnter', and\r\n     * propagates it up to the TreeItem's owner.\r\n     *\r\n     * @param event - The pointer event that was generated from the user interaction\r\n     */\r\n    onPointerEnter(event) {\r\n        this.emit('pointerEnter', event);\r\n        const owner_TreeItem = this.__ownerItem;\r\n        if (event.propagating && owner_TreeItem) {\r\n            owner_TreeItem.onPointerEnter(event);\r\n        }\r\n    }\r\n    /**\r\n     * Called by the Viewport when the mouse or other pointer leaves the canvas element.\r\n     * The event is propagated to a TreeItem if it is under the pointer at the time.\r\n     * The ZeaPointerEvent abstracts the Mouse, touch and our custom XR events.\r\n     * This method emits the ZeaPointerEvent with the key 'pointerLeave', and\r\n     * propagates it up to the TreeItem's owner.\r\n     *\r\n     * @param event - The pointer event that was generated from the user interaction\r\n     */\r\n    onPointerLeave(event) {\r\n        this.emit('pointerLeave', event);\r\n        const owner_TreeItem = this.__ownerItem;\r\n        if (event.propagating && owner_TreeItem) {\r\n            owner_TreeItem.onPointerLeave(event);\r\n        }\r\n    }\r\n    /**\r\n     * Called by the Viewport when the mouse wheel event is received by the canvas element.\r\n     * Emits the ZeaWheelEvent with the key 'mouseWheel', and Propagates is up to the TreeItem's owner.\r\n     *\r\n     * @param event - The wheel event that occurs.\r\n     */\r\n    onWheel(event) {\r\n        this.emit('mouseWheel', event);\r\n        const owner_TreeItem = this.__ownerItem;\r\n        if (event.propagating && owner_TreeItem) {\r\n            owner_TreeItem.onWheel(event);\r\n        }\r\n    }\r\n    /**\r\n     * Called by the Viewport when the touch cancel event is received by the canvas element.\r\n     * Emits the ZeaTouchEvent with the key 'touchCancel', and Propagates is up to the TreeItem's owner.\r\n     *\r\n     * @param event - The wheel event that occurs.\r\n     */\r\n    onTouchCancel(event) {\r\n        this.emit('touchCancel', event);\r\n        const owner_TreeItem = this.__ownerItem;\r\n        if (event.propagating && owner_TreeItem) {\r\n            owner_TreeItem.onTouchCancel(event);\r\n        }\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method serializes this instance as a JSON.\r\n     * It can be used for persistence, data transfer, etc.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        let j = super.toJSON(context);\r\n        // Some Items, such as the SliderSceneWidget do not need their children\r\n        // to be saved.\r\n        const childItemsJSON = {};\r\n        for (const childItem of this.__childItems) {\r\n            if (childItem) {\r\n                const childJSON = childItem.toJSON(context);\r\n                if (childJSON)\r\n                    childItemsJSON[childItem.getName()] = childJSON;\r\n            }\r\n        }\r\n        if (Object.keys(childItemsJSON).length > 0) {\r\n            if (j) {\r\n                ;\r\n                j.children = childItemsJSON;\r\n            }\r\n            else {\r\n                j = {\r\n                    name: this.__name,\r\n                    children: childItemsJSON,\r\n                };\r\n            }\r\n        }\r\n        return j;\r\n    }\r\n    /**\r\n     * The fromJSON method takes a JSON and deserializes into an instance of this type.\r\n     *\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context, onDone) {\r\n        super.fromJSON(j, context);\r\n        if (context && !Number.isNaN(context.numTreeItems))\r\n            context.numTreeItems++;\r\n        // if ('bbox' in j){\r\n        //     let box = new Box3();\r\n        //     box.fromJSON(j.bbox);\r\n        //     this.boundingBoxParam.value = box)\r\n        // }\r\n        if (j.children != null) {\r\n            const childrenJson = j.children;\r\n            if (Array.isArray(childrenJson)) {\r\n                for (const childJson of childrenJson) {\r\n                    // Note: During loading of asset trees, we have an\r\n                    // existing tree generated by loading a bin data file.\r\n                    let childItem = this.getChildByName(childJson.name);\r\n                    if (childItem) {\r\n                        childItem.fromJSON(childJson, context);\r\n                    }\r\n                    else {\r\n                        if (childJson.type) {\r\n                            childItem = Registry.constructClass(childJson.type);\r\n                            if (childItem) {\r\n                                // Note: we should load the json first, as it\r\n                                // may contain the unique name of the item.\r\n                                childItem.fromJSON(childJson, context);\r\n                                this.addChild(childItem, false, false);\r\n                            }\r\n                        }\r\n                        else {\r\n                            // Note: no need to log a warning. A child might not exist\r\n                            // if the binary tree has changed, and so the JSON data\r\n                            // can no longer be mapped.\r\n                            // console.warn(\"Child not found:\", childName, \" within \", this.getNumChildren() + \" of:\" + this.getPath())\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // eslint-disable-next-line guard-for-in\r\n                for (const childName in childrenJson) {\r\n                    const childJson = childrenJson[childName];\r\n                    // Note: During loading of asset trees, we have an\r\n                    // existing tree generated by loading a bin data file.\r\n                    let childItem = this.getChildByName(childName);\r\n                    if (childItem) {\r\n                        childItem.fromJSON(childJson, context);\r\n                    }\r\n                    else if (childJson.type) {\r\n                        childItem = Registry.constructClass(childJson.type);\r\n                        if (childItem) {\r\n                            // Note: we add the child now before loading.\r\n                            // This is because certain items. (e.g. Groups)\r\n                            // Calculate their global Xfo, and use it to modify\r\n                            // the transform of their members.\r\n                            // Note: Groups bind to items in the scene which are\r\n                            // already added as children, and so have global Xfos.\r\n                            // We prefer to add a child after its loaded, because sometimes\r\n                            // In the tree is asset items, who will only toggled as\r\n                            // unloaded once they are loaded(else they are considered inline assets.)\r\n                            childItem.fromJSON(childJson, context);\r\n                            this.addChild(childItem, false, false);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Note: When saving a bin tree, we no longer save the 'type' value\r\n                        // so that those nodes can no longer be re-created by loading the JSON\r\n                        // file. We don't want the json tree\r\n                        // to re-instate ghost tree items that have been removed from the bin tree.\r\n                        //  (as has happened in testing.)\r\n                        // console.warn(\"Warning loading JSON. Child not found:\" + childName);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // if (j.components) {\r\n        //   for (const cj of j.components) {\r\n        //     const component = Registry.constructClass(cj.type ? cj.type : cj.name)\r\n        //     if (component) {\r\n        //       component.fromJSON(cj, context)\r\n        //       this.addComponent(component)\r\n        //     }\r\n        //   }\r\n        // }\r\n    }\r\n    /**\r\n     * Sets state of current Item(Including parameters & children) using a binary reader object.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        super.readBinary(reader, context);\r\n        context.numTreeItems++;\r\n        const itemFlags = reader.loadUInt8();\r\n        const visibilityFlag = 1 << 1;\r\n        this.setVisible((itemFlags & visibilityFlag) != 0);\r\n        // Note: to save space, some values are skipped if they are identity values\r\n        const localXfoFlag = 1 << 2;\r\n        const localXfoIndependentScFlag = 1 << 5;\r\n        if (itemFlags & localXfoFlag) {\r\n            const xfo = new Xfo();\r\n            xfo.tr = reader.loadFloat32Vec3();\r\n            xfo.ori = reader.loadFloat32Quat();\r\n            if (itemFlags & localXfoIndependentScFlag) {\r\n                xfo.sc = reader.loadFloat32Vec3();\r\n            }\r\n            else {\r\n                const sc = reader.loadFloat32();\r\n                xfo.sc.set(sc, sc, sc);\r\n            }\r\n            this.localXfoParam.value = xfo;\r\n        }\r\n        const bboxFlag = 1 << 3;\r\n        if (itemFlags & bboxFlag) {\r\n            this.boundingBoxParam.loadValue(new Box3(reader.loadFloat32Vec3(), reader.loadFloat32Vec3()));\r\n        }\r\n        const numChildren = reader.loadUInt32();\r\n        if (numChildren > 0) {\r\n            const toc = reader.loadUInt32Array(numChildren);\r\n            for (let i = 0; i < numChildren; i++) {\r\n                try {\r\n                    reader.seek(toc[i]); // Reset the pointer to the start of the item data.\r\n                    let childType = reader.loadStr();\r\n                    const childItem = Registry.constructClass(childType);\r\n                    if (!childItem) {\r\n                        const childName = reader.loadStr();\r\n                        console.warn('Unable to construct child:' + childName + ' of type:' + childType);\r\n                        continue;\r\n                    }\r\n                    reader.seek(toc[i]); // Reset the pointer to the start of the item data.\r\n                    childItem.readBinary(reader, context);\r\n                    this.addChild(childItem, false, true);\r\n                }\r\n                catch (e) {\r\n                    console.warn('Error loading tree item: ', e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Clone and Destroy\r\n    /**\r\n     * The clone method constructs a new tree item, copies its values\r\n     * from this item and returns it.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns a new cloned tree item.\r\n     */\r\n    clone(context) {\r\n        const cloned = new TreeItem('');\r\n        cloned.copyFrom(this, context);\r\n        return cloned;\r\n    }\r\n    /**\r\n     * Copies current TreeItem with all its children.\r\n     *\r\n     * @param src - The tree item to copy from.\r\n     * @param context - The context value.\r\n     */\r\n    copyFrom(src, context) {\r\n        super.copyFrom(src, context);\r\n        // Share a local Xfo\r\n        // Note: disabled for now.\r\n        // When cloning instanced trees, the root item should\r\n        // have a unique LocalXfoParam, as it must be re-set.\r\n        // (The root of the tree is a cloned and attached to an Instance node that provides the transform)\r\n        src.getChildren().forEach((srcChildItem) => {\r\n            if (srcChildItem)\r\n                this.addChild(srcChildItem.clone(), false, false);\r\n        });\r\n    }\r\n}\r\nRegistry.register('TreeItem', TreeItem);\r\nexport { TreeItem };\r\n//# sourceMappingURL=TreeItem.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\n/* eslint-disable require-jsdoc */\r\nimport { TreeItem } from '../../SceneTree/TreeItem';\r\nimport { Registry } from '../../Registry';\r\nimport { Parameter } from './Parameter';\r\n/**\r\n * Represents a specific type of parameter, that only stores `TreeItem` values.\r\n *\r\n * i.e.:\r\n * ```javascript\r\n * const treeItem = new TreeItem('tree1')\r\n * const treeItemParam = new TreeItemParameter('MyTreeItem', treeItem)\r\n * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.\r\n * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.\r\n * myParameterOwnerItem.addParameter(treeItemParam)\r\n * ```\r\n *\r\n * **Events**\r\n * * **treeItemGlobalXfoChanged:** Triggered when computed world Xfo of parameter's `TreeItem` changes.\r\n * * **valueChanged:** Triggered when parameter's value changes.\r\n *\r\n * @extends Parameter\r\n */\r\nclass TreeItemParameter extends Parameter {\r\n    /**\r\n     * Create a tree item parameter.\r\n     * @param name - The name of the tree item parameter.\r\n     * @param filterFn - The filterFn value.\r\n     */\r\n    constructor(name = '', filterFn) {\r\n        super(name, undefined, 'TreeItem');\r\n        this.listenerIDs = {};\r\n        this.owner = new TreeItem(''); // TODO:(review) should this be initialize by arguments or is this ok?\r\n        this.filterFn = filterFn;\r\n    }\r\n    emitTreeItemGlobalXfoChanged(event) {\r\n        this.emit('treeItemGlobalXfoChanged', event);\r\n    }\r\n    /**\r\n     * Sets parameter value's owner `TreeItem`.\r\n     *\r\n     * @param owner - The owner value.\r\n     */\r\n    setOwner(owner) {\r\n        this.owner = owner;\r\n    }\r\n    /**\r\n     * Returns parameter value's owner `TreeItem`.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getOwner() {\r\n        return this.owner;\r\n    }\r\n    /**\r\n     * The setFilterFn method.\r\n     * @param filterFn - The filterFn value.\r\n     */\r\n    setFilterFn(filterFn) {\r\n        this.filterFn = filterFn;\r\n    }\r\n    /**\r\n     * The getFilterFn method.\r\n     * @return - The return value.\r\n     */\r\n    getFilterFn() {\r\n        return this.filterFn;\r\n    }\r\n    /**\r\n     * Sets parameter's `TreeItem` value.\r\n     *\r\n     * @param treeItem - The treeItem value\r\n     * @return - The return value.\r\n     */\r\n    setValue(treeItem) {\r\n        // 0 == normal set. 1 = changed via cleaner fn, 2=change by loading/cloning code.\r\n        if (this.filterFn && !this.filterFn(treeItem))\r\n            return;\r\n        if (this.__value !== treeItem) {\r\n            if (this.__value) {\r\n                this.__value.removeListenerById('globalXfoChanged', this.listenerIDs['globalXfoChanged']);\r\n            }\r\n            this.__value = treeItem;\r\n            if (this.__value) {\r\n                this.listenerIDs['globalXfoChanged'] = this.__value.on('globalXfoChanged', (event) => {\r\n                    this.emitTreeItemGlobalXfoChanged(event);\r\n                });\r\n            }\r\n            this.emit('valueChanged');\r\n        }\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        var _a;\r\n        return {\r\n            value: context.makeRelative((_a = this.__value) === null || _a === void 0 ? void 0 : _a.getPath()),\r\n        };\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context) {\r\n        if (j.value == undefined) {\r\n            console.warn('Invalid Parameter JSON');\r\n            return;\r\n        }\r\n        context.resolvePath(j.value, (treeItem) => {\r\n            this.setValue(treeItem);\r\n        }, () => {\r\n            console.warn('Unable to resolve tree item parameter value:' + j.paramPath);\r\n        });\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Clone and Destroy\r\n    /**\r\n     * The clone method constructs a new tree item parameter, copies its values\r\n     * from this parameter and returns it.\r\n     *\r\n     * @return - Returns a new tree item parameter.\r\n     */\r\n    clone(context) {\r\n        const clonedParam = new TreeItemParameter(this.name, this.filterFn);\r\n        if (this.__value)\r\n            clonedParam.setValue(this.__value.clone(context));\r\n        return clonedParam;\r\n    }\r\n}\r\nRegistry.register('TreeItemParameter', TreeItemParameter);\r\nexport { TreeItemParameter };\r\n//# sourceMappingURL=TreeItemParameter.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Parameter } from './Parameter';\r\nimport { BaseEvent } from '../../Utilities/BaseEvent';\r\nclass ItemEvent extends BaseEvent {\r\n    constructor(item, index) {\r\n        super();\r\n        this.index = index;\r\n        this.item = item;\r\n    }\r\n}\r\n/** Class representing an item set parameter.\r\n * @extends Parameter\r\n * @private\r\n */\r\nclass ItemSetParameter extends Parameter {\r\n    /**\r\n     * Create an item set parameter.\r\n     * @param name - The name of the item set parameter.\r\n     * @param filterFn - The filterFn value.\r\n     */\r\n    constructor(name = '', filterFn) {\r\n        super(name, new Set(), 'TreeItem');\r\n        this.filterFn = filterFn; // Note: the filter Fn indicates that users will edit the set.\r\n    }\r\n    /**\r\n     * The setFilterFn method.\r\n     * @param filterFn - The filterFn value.\r\n     */\r\n    setFilterFn(filterFn) {\r\n        this.filterFn = filterFn;\r\n    }\r\n    /**\r\n     * The getFilterFn method.\r\n     * @return - The return value.\r\n     */\r\n    getFilterFn() {\r\n        return this.filterFn;\r\n    }\r\n    /**\r\n     * The getItem method.\r\n     * @param index - The index param.\r\n     * @return - The return value.\r\n     */\r\n    getItem(index) {\r\n        // if (!this.__items) return undefined\r\n        return Array.from(this.__value)[index];\r\n    }\r\n    /**\r\n     * The addItem method.\r\n     * @param item - The item value.\r\n     * @param emitValueChanged - The emit value.\r\n     * @return - The return value.\r\n     */\r\n    addItem(item, emitValueChanged = true) {\r\n        if (this.filterFn && !this.filterFn(item)) {\r\n            console.warn('ItemSet __filterFn rejecting item:', item.getPath());\r\n            return;\r\n        }\r\n        this.__value.add(item);\r\n        const index = Array.from(this.__value).indexOf(item);\r\n        this.emit('itemAdded', new ItemEvent(item, index));\r\n        if (emitValueChanged)\r\n            this.emit('valueChanged');\r\n        return index;\r\n    }\r\n    /**\r\n     * Adds items to the parameter value\r\n     *\r\n     * @param items - list of items to add to the parameter\r\n     * @param emitValueChanged\r\n     * @memberof ItemSetParameter\r\n     */\r\n    addItems(items, emitValueChanged = true) {\r\n        items.forEach((item) => this.addItem(item, false));\r\n        if (emitValueChanged)\r\n            this.emit('valueChanged');\r\n    }\r\n    /**\r\n     * The removeItem method.\r\n     * @param index - The index value.\r\n     * @param emitValueChanged - The emit param.\r\n     * @return - The return value.\r\n     */\r\n    removeItem(index, emitValueChanged = true) {\r\n        const item = Array.from(this.__value)[index];\r\n        this.__value.delete(item);\r\n        this.emit('itemRemoved', new ItemEvent(item, index));\r\n        if (emitValueChanged)\r\n            this.emit('valueChanged');\r\n        return item;\r\n    }\r\n    /**\r\n     * The setItems method.\r\n     * @param items - The item param.\r\n     * @param emit - The emit param.\r\n     */\r\n    setItems(items, emit = true) {\r\n        const values = Array.from(this.__value);\r\n        for (let i = values.length - 1; i >= 0; i--) {\r\n            const item = values[i];\r\n            if (!items.has(item)) {\r\n                this.removeItem(i, false);\r\n            }\r\n        }\r\n        for (const item of items) {\r\n            if (!this.__value.has(item)) {\r\n                this.addItem(item, false);\r\n            }\r\n        }\r\n        if (emit)\r\n            this.emit('valueChanged');\r\n    }\r\n    /**\r\n     * The clearItems method.\r\n     * @param emit - The emit value.\r\n     */\r\n    clearItems(emitValueChanged = true) {\r\n        this.__value.clear();\r\n        if (emitValueChanged)\r\n            this.emit('valueChanged');\r\n    }\r\n    /**\r\n     * The getNumItems method.\r\n     * @return - The return value.\r\n     */\r\n    getNumItems() {\r\n        return this.__value.size; // might be faster\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     * @param context - The context value.\r\n     * @return - The return value.\r\n     */\r\n    toJSON(context) {\r\n        if (!this.__value)\r\n            this.__value = new Set();\r\n        const items = [];\r\n        if (context) {\r\n            for (const item of this.__value) {\r\n                // TODO: Make relative path...\r\n                items.push(item.getPath());\r\n            }\r\n        }\r\n        return {\r\n            value: items,\r\n        };\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context) {\r\n        if (context) {\r\n            for (const itemPath in j.value) {\r\n                const item = context.resolvePath(itemPath);\r\n                this.__value.add(item);\r\n            }\r\n        }\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Clone\r\n    /**\r\n     * The clone method constructs a item set new parameter, copies its values\r\n     * from this parameter and returns it.\r\n     *\r\n     * @return - Returns a new item set parameter.\r\n     */\r\n    clone() {\r\n        const clonedParam = new ItemSetParameter(this.name, this.filterFn);\r\n        return clonedParam;\r\n    }\r\n}\r\nexport { ItemSetParameter, ItemEvent };\r\n//# sourceMappingURL=ItemSetParameter.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport { Registry } from '../../Registry';\r\nimport { Parameter } from './Parameter';\r\n/** Class representing a geometry parameter.\r\n * @extends Parameter\r\n * @private\r\n */\r\nclass GeometryParameter extends Parameter {\r\n    /**\r\n     * Create a geometry parameter.\r\n     * @param name - The name of the color parameter.\r\n     * @param value - The value of the parameter.\r\n     */\r\n    constructor(name = '', value) {\r\n        super(name, value, 'Geometry');\r\n        this.listenerIDs = {};\r\n        if (value)\r\n            this.setValue(value);\r\n    }\r\n    emitBoundingBoxDirtied(event) {\r\n        this.emit('boundingBoxChanged', event);\r\n    }\r\n    /**\r\n     * The setValue method.\r\n     * @param value - The geom value.\r\n     */\r\n    setValue(value) {\r\n        // 0 == normal set. 1 = changed via cleaner fn, 2 = change by loading/cloning code.\r\n        if (this.__value !== value) {\r\n            if (this.__value) {\r\n                this.__value.removeListenerById('boundingBoxChanged', this.listenerIDs['boundingBoxChanged']);\r\n            }\r\n            this.__value = value;\r\n            if (this.__value) {\r\n                this.listenerIDs['boundingBoxChanged'] = this.__value.on('boundingBoxChanged', (event) => {\r\n                    this.emitBoundingBoxDirtied(event);\r\n                });\r\n            }\r\n            this.emit('valueChanged');\r\n        }\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The loadValue is used to change the value of a parameter, without triggering a\r\n     * valueChanges, or setting the USER_EDITED state.\r\n     *\r\n     * @param value - The context value.\r\n     */\r\n    loadValue(value) {\r\n        if (this.__value) {\r\n            this.__value.removeListenerById('boundingBoxChanged', this.listenerIDs['boundingBoxChanged']);\r\n        }\r\n        this.__value = value;\r\n        if (this.__value) {\r\n            this.listenerIDs['boundingBoxChanged'] = this.__value.on('boundingBoxChanged', (event) => {\r\n                this.emitBoundingBoxDirtied(event);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        var _a;\r\n        return {\r\n            name: this.name,\r\n            value: (_a = this.__value) === null || _a === void 0 ? void 0 : _a.toJSON(context),\r\n        };\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context) {\r\n        if (j.name)\r\n            this.name = j.name;\r\n        const geometry = Registry.constructClass(j.value.type);\r\n        geometry.fromJSON(j.value, context);\r\n        this.__value = geometry;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Clone and Destroy\r\n    /**\r\n     * The clone method constructs a new geometry parameter, copies its values\r\n     * from this parameter and returns it.\r\n     * @return - Returns a new geometry parameter.\r\n     */\r\n    clone() {\r\n        const clonedParam = new GeometryParameter(this.name, this.__value);\r\n        return clonedParam;\r\n    }\r\n}\r\nRegistry.register('GeometryParameter', GeometryParameter);\r\nexport { GeometryParameter };\r\n//# sourceMappingURL=GeometryParameter.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Registry } from '../../Registry';\r\nimport { Parameter } from './Parameter';\r\n/**\r\n * Represents a specific type of parameter, that only stores file data values.\r\n *\r\n * **Events**\r\n * * **valueChanged:** Triggered when setting file's URL.\r\n * * **fileUpdated:** Triggered when parameter's value is updated.\r\n *\r\n * @extends Parameter\r\n */\r\nclass FilePathParameter extends Parameter {\r\n    /**\r\n     * Create a file path parameter.\r\n     *\r\n     * @param name - The name of the file path parameter.\r\n     * @param exts - The exts value.\r\n     */\r\n    constructor(name = '') {\r\n        super(name, '', 'FilePath');\r\n    }\r\n    /**\r\n     * Returns parameter's file name\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getFilename() {\r\n        if (!this.__value)\r\n            throw 'No file value';\r\n        return this.__value.lastIndexOf('/') > -1 ? this.__value.substring(this.__value.lastIndexOf('/') + 1) : '';\r\n    }\r\n    /**\r\n     * Returns parameter's file extension\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getExt() {\r\n        const filename = this.getFilename();\r\n        const suffixSt = filename.lastIndexOf('.');\r\n        if (suffixSt != -1)\r\n            return filename.substring(suffixSt).toLowerCase();\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Returns parameter's file name without extension\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getStem() {\r\n        const filename = this.getFilename();\r\n        if (filename) {\r\n            const parts = filename.split('.');\r\n            if (parts.length == 2)\r\n                return parts[0];\r\n            else\r\n                return filename;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Sets file parameter value\r\n     *\r\n     * @param value - The value param.\r\n     */\r\n    setValue(value) {\r\n        if (!value) {\r\n            throw new Error('Invalid value for setValue.');\r\n        }\r\n        // Important here because file changes cause reloads.\r\n        // Note: equality tests only work on simple types.\r\n        if (value == this.__value) {\r\n            return;\r\n        }\r\n        this.__value = value;\r\n        this.emit('valueChanged');\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        return { value: this.__value };\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context) {\r\n        if (j.value) {\r\n            this.__value = j.value;\r\n        }\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Clone and Destroy\r\n    /**\r\n     * The clone method constructs a new file path parameter,\r\n     * copies its values from this parameter and returns it.\r\n     *\r\n     * @return - Returns a new cloned file path parameter.\r\n     */\r\n    clone() {\r\n        const clone = new FilePathParameter(this.name);\r\n        if (this.__value)\r\n            clone.setValue(this.__value);\r\n        return clone;\r\n    }\r\n}\r\nRegistry.register('FilePathParameter', FilePathParameter);\r\nexport { FilePathParameter };\r\n//# sourceMappingURL=FilePathParameter.js.map","import { BaseItem } from './BaseItem';\r\n/**\r\n * Represents a 2D image item, containing width and height.\r\n *\r\n * **Events**\r\n * * **updated:** Triggered when the value of any of the parameters listed above changes.\r\n *\r\n * @extends BaseItem\r\n */\r\nclass BaseImage extends BaseItem {\r\n    /**\r\n     * Creates an instance of BaseImage.\r\n     * @param name - name of the item\r\n     */\r\n    constructor(name) {\r\n        super(name);\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.format = 'RGB';\r\n        this.type = 'UNSIGNED_BYTE';\r\n        this.mipMapped = true;\r\n        this.wrapS = 'REPEAT';\r\n        this.wrapT = 'REPEAT';\r\n        this.minFilter = 'LINEAR';\r\n        this.magFilter = 'LINEAR';\r\n        this.loaded = false;\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.format = 'RGB';\r\n        this.type = 'UNSIGNED_BYTE';\r\n        this.wrapS = 'CLAMP_TO_EDGE';\r\n        this.wrapT = 'CLAMP_TO_EDGE';\r\n        this.minFilter = 'LINEAR';\r\n        this.magFilter = 'LINEAR';\r\n        this.on('parameterValueChanged', () => {\r\n            this.emit('updated');\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if loaded.\r\n     * @private\r\n     * @return - Returns a boolean.\r\n     */\r\n    isLoaded() {\r\n        return this.loaded;\r\n    }\r\n    /**\r\n     * Returns all parameters and class state values.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getParams() {\r\n        return {\r\n            type: this.type,\r\n            format: this.format,\r\n            width: this.width,\r\n            height: this.height,\r\n            wrapS: this.wrapS,\r\n            wrapT: this.wrapT,\r\n            minFilter: this.minFilter,\r\n            magFilter: this.magFilter,\r\n            mipMapped: this.mipMapped,\r\n        };\r\n    }\r\n}\r\nexport { BaseImage };\r\n//# sourceMappingURL=BaseImage.js.map","import { Registry } from '../../Registry';\r\nimport { NumberParameter } from './NumberParameter';\r\nimport { BaseImage } from '../BaseImage';\r\n/**\r\n * Represents a specific type of parameter, that stores `number` and `BaseImage` texture values.\r\n *\r\n * i.e.:\r\n * ```javascript\r\n * const image = new LDRImage();\r\n * image.load(\"https://storage.googleapis.com/zea-playground-assets/zea-engine/texture.png\")\r\n *\r\n * const numberParam = new MaterialFloatParam('MyMaterialFloat', 15.5)\r\n * numberParam.setImage(image)\r\n * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.\r\n * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.\r\n * myParameterOwnerItem.addParameter(numberParam)\r\n * ```\r\n *\r\n * * **Events**\r\n * * **valueChanged:** Triggered every time the Image value changes\r\n * * **textureDisconnected:** Triggered when Image value is cleaned/removed.\r\n * * **textureConnected:** Triggered when the Image value is set.\r\n *\r\n * @extends NumberParameter\r\n */\r\nclass MaterialFloatParam extends NumberParameter {\r\n    /**\r\n     * Create a material float parameter.\r\n     * @param name - The name of the material color parameter.\r\n     * @param value - The value of the parameter.\r\n     * @param range - An array with two numbers. If defined, the parameter value will be clamped.\r\n     */\r\n    constructor(name = '', value, range) {\r\n        super(name, value, range);\r\n    }\r\n    toJSON(context) {\r\n        const j = super.toJSON(context);\r\n        return j;\r\n    }\r\n    /**\r\n     * Returns `BaseImage` texture of the Material.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getImage() {\r\n        return this.image;\r\n    }\r\n    /**\r\n     * Sets `BaseImage` texture value in parameter.\r\n     *\r\n     * @param value - The value value.\r\n     */\r\n    setImage(value) {\r\n        const disconnectImage = () => {\r\n            this.emit('textureDisconnected');\r\n        };\r\n        if (value) {\r\n            if (this.image != undefined && this.image !== value) {\r\n                disconnectImage();\r\n            }\r\n            this.image = value;\r\n            this.emit('textureConnected');\r\n            this.emit('valueChanged', { mode: 0 });\r\n        }\r\n        else {\r\n            if (this.image != undefined) {\r\n                disconnectImage();\r\n                this.image = undefined;\r\n                this.emit('textureDisconnected');\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets `number` or the `BaseImage` texture value in parameter.\r\n     *\r\n     * @param value - The value param.\r\n     */\r\n    setValue(value) {\r\n        if (value instanceof BaseImage) {\r\n            this.setImage(value);\r\n        }\r\n        else {\r\n            super.setValue(value);\r\n        }\r\n    }\r\n    /**\r\n     * Extracts `number` and `Image` values from a buffer, updating current parameter state.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        super.readBinary(reader, context);\r\n        const textureName = reader.loadStr();\r\n        if (textureName != '') {\r\n            console.log('Load Texture');\r\n            this.setImage(context.materialLibrary.getImage(textureName));\r\n        }\r\n    }\r\n    /**\r\n     * The clone method constructs a new material float parameter,\r\n     * copies its values from this parameter and returns it.\r\n     *\r\n     * @return - Returns a new cloned material float parameter.\r\n     */\r\n    clone() {\r\n        const clonedParam = new MaterialFloatParam(this.name, this.__value, this.range);\r\n        return clonedParam;\r\n    }\r\n}\r\nRegistry.register('MaterialFloatParam', MaterialFloatParam);\r\nexport { MaterialFloatParam };\r\n//# sourceMappingURL=MaterialFloatParam.js.map","import { Registry } from '../../Registry';\r\nimport { ColorParameter } from './ColorParameter';\r\nimport { BaseImage } from '../BaseImage';\r\n/**\r\n * Represents a specific type of parameter, that stores `Color` and `BaseImage` texture values.\r\n *\r\n * i.e.:\r\n * ```javascript\r\n * const image = new LDRImage();\r\n * image.load(\"https://storage.googleapis.com/zea-playground-assets/zea-engine/texture.png\")\r\n *\r\n * const matColorParam = new MaterialColorParam('MyMaterialColor', new Color(0, 254, 2))\r\n * matColorParam.setImage(image)\r\n * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.\r\n * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.\r\n * myParameterOwnerItem.addParameter(matColorParam)\r\n * ```\r\n *\r\n * **Events**\r\n * * **valueChanged:** Triggered every time the Image value changes\r\n * * **textureDisconnected:** Triggered when Image value is cleaned/removed.\r\n * * **textureConnected:** Triggered when the Image value is set.\r\n *\r\n * @extends ColorParameter\r\n */\r\n// TODO: should MaterialColorParam have these parameters below? I'm assuming no.\r\n// class MaterialColorParam extends Parameter {\r\n//   constructor() {\r\n//     super()\r\n//     this.__shaderName = 'StandardSurfaceShader'\r\n//     this.addParameter('BaseColor', new MaterialColorParam(1.0, 1, 0.5))\r\n//     this.addParameter('AmbientOcclusion', new MaterialFloatParam(1, [0, 1]))\r\n//     this.addParameter('Metallic', new MaterialFloatParam(0.5, [0, 1]))\r\n//     this.addParameter('Reflectance', new NumberParameter(0.5, [0, 1]))\r\n//     this.addParameter('Normal', new MaterialColorParam(1.0, 1, 0.5))\r\n//     this.addParameter('EmissiveStrength', new NumberParameter(0.5, [0, 1]))\r\n//     this.addParameter('Opacity', new MaterialFloatParam(0.5, [0, 1]))\r\n//   }\r\n//   get value() : Color {\r\n//     return this.__value\r\n//   }\r\n//   set value() : Color {\r\n//     return this.__value\r\n//   }\r\n// }\r\nclass MaterialColorParam extends ColorParameter {\r\n    /**\r\n     * Create a material color parameter.\r\n     * @param name - The name of the material color parameter.\r\n     * @param value - The value of the parameter.\r\n     */\r\n    constructor(name, value) {\r\n        super(name, value);\r\n        this.listenerIDs = {};\r\n    }\r\n    /**\r\n     * Returns `BaseImage` texture of the Material.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getImage() {\r\n        return this.image;\r\n    }\r\n    /**\r\n     * The imageUpdated method.\r\n     * @private\r\n     */\r\n    imageUpdated() {\r\n        this.emit('valueChanged');\r\n    }\r\n    /**\r\n     * Sets `BaseImage` texture value in parameter.\r\n     *\r\n     * @param value - The value param.\r\n     */\r\n    setImage(value) {\r\n        const disconnectImage = () => {\r\n            if (this.image) {\r\n                this.image.removeListenerById('loaded', this.listenerIDs['loaded']);\r\n                this.image.removeListenerById('updated', this.listenerIDs['updated']);\r\n                this.image = undefined;\r\n            }\r\n            this.emit('textureDisconnected');\r\n        };\r\n        if (value) {\r\n            if (this.image != undefined && this.image !== value) {\r\n                disconnectImage();\r\n            }\r\n            this.image = value;\r\n            this.listenerIDs['updated'] = this.image.on('updated', () => {\r\n                this.imageUpdated();\r\n            });\r\n            this.emit('textureConnected');\r\n            this.emit('valueChanged');\r\n        }\r\n        else {\r\n            if (this.image != undefined) {\r\n                disconnectImage();\r\n                this.image = undefined;\r\n                this.emit('textureDisconnected');\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets `Color` or the `BaseImage` texture value in parameter.\r\n     *\r\n     * @param value - The value param.\r\n     */\r\n    setValue(value) {\r\n        // Note: instead of supporting images or colors, we should replace the ColorParameter with an ImageParameter when assigning textures\r\n        // console.warn('@todo-review: Should we accept different type of values?')\r\n        if (value instanceof BaseImage) {\r\n            this.setImage(value);\r\n        }\r\n        else {\r\n            super.setValue(value);\r\n        }\r\n    }\r\n    /**\r\n     * Extracts `Color` and `Image` values from a buffer, updating current parameter state.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        super.readBinary(reader, context);\r\n        const textureName = reader.loadStr();\r\n        if (textureName != '') {\r\n            this.setImage(context.materialLibrary.getImage(textureName));\r\n        }\r\n    }\r\n    /**\r\n     * The clone method constructs a new material color parameter,\r\n     * copies its values from this parameter and returns it.\r\n     *\r\n     * @return - Returns a new cloned material color parameter.\r\n     */\r\n    clone() {\r\n        var _a;\r\n        const clonedParam = new MaterialColorParam(this.name, (_a = this.__value) === null || _a === void 0 ? void 0 : _a.clone());\r\n        return clonedParam;\r\n    }\r\n}\r\nRegistry.register('MaterialColorParam', MaterialColorParam);\r\nexport { MaterialColorParam };\r\n//# sourceMappingURL=MaterialColorParam.js.map","import { BaseEvent } from '../BaseEvent';\r\nclass ShaderNameChangedEvent extends BaseEvent {\r\n    constructor(shaderName) {\r\n        super();\r\n        this.shaderName = shaderName;\r\n    }\r\n}\r\nexport { ShaderNameChangedEvent };\r\n//# sourceMappingURL=ShaderNameChangedEvent.js.map","import { BaseEvent } from '../BaseEvent';\r\nclass TransparencyChangedEvent extends BaseEvent {\r\n    constructor(isTransparent) {\r\n        super();\r\n        this.isTransparent = isTransparent;\r\n    }\r\n}\r\nexport { TransparencyChangedEvent };\r\n//# sourceMappingURL=TransparencyChangedEvent.js.map","import { BaseEvent } from '../BaseEvent';\r\n//{ isTextured, param }\r\nclass TexturedChangedEvent extends BaseEvent {\r\n    constructor(isTextured, param) {\r\n        super();\r\n        this.isTextured = isTextured;\r\n        this.param = param;\r\n    }\r\n}\r\nexport { TexturedChangedEvent };\r\n//# sourceMappingURL=TexturedChangedEvent.js.map","/* eslint-disable require-jsdoc */\r\n/* eslint-disable guard-for-in */\r\nimport { BaseItem } from './BaseItem';\r\nimport { Registry } from '../Registry';\r\n// Explicit export of parameters that are not included in the\r\n// module defined by the index file in the folder. (see Parameters/index.js)\r\n// These parameters depend on classes that ar ParameterOwners.\r\n// TODO: Move to this folder.\r\nimport { MaterialFloatParam } from './Parameters/MaterialFloatParam';\r\nimport { MaterialColorParam } from './Parameters/MaterialColorParam';\r\nimport { ShaderNameChangedEvent } from '../Utilities/Events/ShaderNameChangedEvent';\r\nimport { TransparencyChangedEvent } from '../Utilities/Events/TransparencyChangedEvent';\r\nimport { TexturedChangedEvent } from '../Utilities/Events/TexturedChangedEvent';\r\n/**\r\n * Represents a type of `BaseItem` class that holds material configuration.\r\n * Use this to apply materials to your assets or item parts.\r\n *\r\n * **Events**\r\n * * **shaderNameChanged:** Triggered when the shader's name is set through `setShaderName` method.\r\n *\r\n * @extends BaseItem\r\n */\r\n// TODO: make abstract after subclasses checked\r\nclass Material extends BaseItem {\r\n    /**\r\n     * Create a material\r\n     * @param name - The name of the material.\r\n     * @param shaderName - Shader's class name.\r\n     */\r\n    constructor(name, shaderName) {\r\n        super(name);\r\n        this.__isTransparent = false;\r\n        this.__isTextured = false;\r\n        this.__shaderName = '';\r\n        if (shaderName)\r\n            this.setShaderName(shaderName);\r\n    }\r\n    /**\r\n     * Getter for the shader name.\r\n     * @return - Returns the shader name.\r\n     */\r\n    getShaderName() {\r\n        return this.__shaderName;\r\n    }\r\n    /**\r\n     * Sets shader by using the name of the class with the script.\r\n     * It is important that the shader is registered in `Registry`, otherwise it will error.\r\n     * See all classes that extend from `GLShader`.\r\n     *\r\n     * @param shaderName - The shader name.\r\n     */\r\n    setShaderName(shaderName) {\r\n        if (this.__shaderName == shaderName)\r\n            return;\r\n        this.__shaderName = shaderName;\r\n        const shaderClass = Registry.getClassDefinition(shaderName);\r\n        const materialTemplate = shaderClass.getMaterialTemplate();\r\n        if (!materialTemplate)\r\n            throw new Error('Error setting Shader. Material template not registered found:' + shaderName);\r\n        const paramMap = {};\r\n        let i = materialTemplate.getNumParameters();\r\n        while (i--) {\r\n            const srcParam = materialTemplate.getParameterByIndex(i);\r\n            const param = this.getParameter(srcParam.getName());\r\n            if (param) {\r\n            }\r\n            else {\r\n                this.addParameter(srcParam.clone());\r\n            }\r\n            paramMap[srcParam.getName()] = true;\r\n        }\r\n        // Remove redundant Params.\r\n        for (const param of this.params) {\r\n            if (!paramMap[param.getName()]) {\r\n                this.removeParameter(param.getName());\r\n            }\r\n        }\r\n        this.__shaderName = shaderName;\r\n        this.__checkTransparency({});\r\n        const event = new ShaderNameChangedEvent(shaderName);\r\n        this.emit('shaderNameChanged', event);\r\n    }\r\n    /**\r\n     * Remove all textures from Material's parameters.\r\n     */\r\n    removeAllTextures() {\r\n        for (const param of this.params) {\r\n            if (param instanceof MaterialColorParam) {\r\n                if (param.getImage())\r\n                    param.setImage(null);\r\n            }\r\n            else if (param instanceof MaterialFloatParam) {\r\n                if (param.getImage())\r\n                    param.setImage(null);\r\n            }\r\n        }\r\n    }\r\n    // /////////////////////////////\r\n    // Parameters\r\n    /**\r\n     * Returns all texture parameters in current Material.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getParamTextures() {\r\n        const textures = {};\r\n        for (const param of this.params) {\r\n            if (param instanceof MaterialColorParam) {\r\n                if (param.getImage())\r\n                    textures[param.getName()] = param.getImage();\r\n            }\r\n            else if (param instanceof MaterialFloatParam) {\r\n                if (param.getImage())\r\n                    textures[param.getName()] = param.getImage();\r\n            }\r\n        }\r\n        return textures;\r\n    }\r\n    /**\r\n     * Checks if the material is transparent by checking the `Opacity` parameter.\r\n     *\r\n     * @return - Returns true if the material is transparent.\r\n     */\r\n    isTransparent() {\r\n        return this.__isTransparent;\r\n    }\r\n    __checkTransparency(event) {\r\n        let isTransparent = false;\r\n        try {\r\n            const shaderClass = this.getShaderClass();\r\n            if (shaderClass.isTransparent()) {\r\n                isTransparent = true;\r\n            }\r\n        }\r\n        catch (e) { }\r\n        if (!isTransparent) {\r\n            const opacity = this.getParameter('Opacity');\r\n            if (opacity && (opacity.value < 0.99 || (opacity instanceof MaterialFloatParam && opacity.getImage()))) {\r\n                isTransparent = true;\r\n            }\r\n            else {\r\n                const baseColorParam = this.getParameter('BaseColor');\r\n                if (baseColorParam) {\r\n                    if (baseColorParam instanceof MaterialColorParam) {\r\n                        const image = baseColorParam.getImage();\r\n                        if (image && image.format == 'RGBA') {\r\n                            isTransparent = true;\r\n                        }\r\n                    }\r\n                    if (!isTransparent && baseColorParam.value) {\r\n                        const color_val = baseColorParam.value;\r\n                        if (color_val.a < 1)\r\n                            isTransparent = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (isTransparent != this.__isTransparent) {\r\n            this.__isTransparent = isTransparent;\r\n            const event = new TransparencyChangedEvent(isTransparent);\r\n            this.emit('transparencyChanged', event);\r\n        }\r\n    }\r\n    /**\r\n     * Checks if the material has a texture applied. The renderer can use this to optimize rendering of non-textured objects\r\n     *\r\n     * @return - Returns true if the material is textured.\r\n     */\r\n    isTextured() {\r\n        return this.__isTextured;\r\n    }\r\n    __checkTextures(event) {\r\n        // console.log('__checkTextures')\r\n        const param = event ? event : {};\r\n        let isTextured = false;\r\n        for (const param of this.params) {\r\n            if (param instanceof MaterialColorParam) {\r\n                if (param.getImage()) {\r\n                    isTextured = true;\r\n                    break;\r\n                }\r\n            }\r\n            else if (param instanceof MaterialFloatParam) {\r\n                if (param.getImage()) {\r\n                    isTextured = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (isTextured != this.__isTextured) {\r\n            this.__isTextured = isTextured;\r\n            let event = new TexturedChangedEvent(isTextured, param);\r\n            this.emit('texturedChanged', event);\r\n        }\r\n    }\r\n    /**\r\n     * This method can be overridden in derived classes\r\n     * to perform general updates (see GLPass or BaseItem).\r\n     * @param event - The event object emitted by the parameter.\r\n     * @private\r\n     */\r\n    parameterValueChanged(event) {\r\n        this.__checkTransparency(event);\r\n        this.__checkTextures(event);\r\n        super.parameterValueChanged(event);\r\n    }\r\n    /**\r\n     * Returns shaders class of current material, if set. Otherwise it returns `undefined`\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getShaderClass() {\r\n        return Registry.getClassDefinition(this.getShaderName());\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes the current object as a json object.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        const j = super.toJSON(context);\r\n        j.shader = this.__shaderName;\r\n        return j;\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context = {}) {\r\n        if (!j.shader) {\r\n            console.warn('Invalid Material JSON');\r\n            return;\r\n        }\r\n        this.setShaderName(j.shader);\r\n        super.fromJSON(j, context);\r\n        // let props = this.params;\r\n        // for (let key in j) {\r\n        //     let value;\r\n        //     if (j[key] instanceof Object) {\r\n        //         value = new Color();\r\n        //         value.fromJSON(j[key]);\r\n        //     } else {\r\n        //         value = j[key];\r\n        //     }\r\n        //     this.addParameter(paramName, value);\r\n        // }\r\n    }\r\n    /**\r\n     * Sets state of current Item(Including Shaders and Materials) using a binary reader object.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        let shaderName = reader.loadStr();\r\n        if (shaderName == 'StandardMaterial') {\r\n            shaderName = 'StandardSurfaceShader';\r\n        }\r\n        if (shaderName == 'TransparentMaterial') {\r\n            shaderName = 'StandardSurfaceShader';\r\n        }\r\n        this.setShaderName(shaderName);\r\n        if (context.versions['zea-engine'].compare([0, 0, 3]) < 0) {\r\n            throw `Loading zcad files of version ${context.versions['zea-engine']} is not longer support`;\r\n            this.setName(reader.loadStr());\r\n            const capitalizeFirstLetter = function (string) {\r\n                return string.charAt(0).toUpperCase() + string.slice(1);\r\n            };\r\n            const numParams = reader.loadUInt32();\r\n            for (let i = 0; i < numParams; i++) {\r\n                const paramName = capitalizeFirstLetter(reader.loadStr());\r\n                const paramType = reader.loadStr();\r\n                let value;\r\n                if (paramType == 'MaterialColorParam') {\r\n                    value = reader.loadRGBAFloat32Color();\r\n                    // If the value is in linear space, then we should convert it to gamma space.\r\n                    // Note: !! this should always be done in preprocessing...\r\n                    value.applyGamma(2.2);\r\n                }\r\n                else {\r\n                    value = reader.loadFloat32();\r\n                }\r\n                const textureName = reader.loadStr();\r\n                // console.log(paramName +\":\" + value);\r\n                let param = this.getParameter(paramName);\r\n                if (param instanceof MaterialColorParam) {\r\n                    ;\r\n                    param.setValue(value);\r\n                }\r\n                else {\r\n                    // param = <MaterialColorParam | MaterialFloatParam>(\r\n                    //   // this.addParameter(generateParameterInstance(paramName, value))\r\n                    // )\r\n                }\r\n                if (textureName != '' && param.setImage) {\r\n                    if (context.materialLibrary.hasImage(textureName)) {\r\n                        // console.log(paramName +\":\" + textureName + \":\" + context.materialLibrary[textureName].resourcePath);\r\n                        param.setImage(context.materialLibrary.getImage(textureName));\r\n                    }\r\n                    else {\r\n                        console.warn('Missing Texture:' + textureName);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            super.readBinary(reader, context);\r\n        }\r\n        this.__checkTransparency();\r\n        this.__checkTextures();\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Clone and Destroy\r\n    /**\r\n     * The clone method constructs a new material, copies its values\r\n     * from this material and returns it.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns a new cloned material.\r\n     */\r\n    clone(context) {\r\n        const cloned = new Material('clone', ''); // TODO: what should the arguemnts be here?\r\n        cloned.copyFrom(this, context);\r\n        return cloned;\r\n    }\r\n    /**\r\n     * When a Material is copied, first runs `BaseItem` copyFrom method, then sets shader.\r\n     *\r\n     * @param src - The material to copy from.\r\n     * @param context - The context value.\r\n     */\r\n    copyFrom(src, context) {\r\n        this.setShaderName(src.getShaderName());\r\n        super.copyFrom(src, context);\r\n    }\r\n}\r\nRegistry.register('Material', Material);\r\nexport { Material };\r\n//# sourceMappingURL=Material.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { Registry } from '../../Registry';\r\nimport { Parameter } from './Parameter';\r\nimport { Material } from '../Material';\r\n/**\r\n * Represents a specific type of parameter, that only stores `Material` values.\r\n *\r\n * i.e.:\r\n * ```javascript\r\n * const material = new Material('itemMaterial', 'SimpleSurfaceShader')\r\n * material.getParameter('BaseColor').setValue(new Color(89 / 255, 182 / 255, 92 / 255))\r\n *\r\n * const materialParam = new MaterialParameter('MyMaterial', material)\r\n * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.\r\n * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.\r\n * myParameterOwnerItem.addParameter(materialParam)\r\n * ```\r\n * **Events**\r\n * * **valueParameterValueChanged:** Triggered when parameter's value changes.\r\n * * **valueChanged:** Triggered when parameter's value changes, except on cleaning processes.\r\n *\r\n * @extends Parameter\r\n */\r\nclass MaterialParameter extends Parameter {\r\n    /**\r\n     * Create a material parameter.\r\n     * @param name - The name of the material parameter.\r\n     * @param value - The value of the parameter.\r\n     */\r\n    constructor(name = '', value) {\r\n        super(name, value, 'Material');\r\n        this.listenerIDs = {};\r\n        if (value)\r\n            this.setValue(value);\r\n    }\r\n    valueParameterValueChanged(event) {\r\n        this.emit('valueParameterValueChanged', event);\r\n    }\r\n    /**\r\n     * Sets `Material` value of the parameter.\r\n     *\r\n     * @param material - The material param.\r\n     */\r\n    setValue(material) {\r\n        // 0 == normal set. 1 = changed via cleaner fn, 2 = change by loading/cloning code.\r\n        if (this.__value !== material) {\r\n            if (this.__value) {\r\n                this.__value.removeListenerById('parameterValueChanged', this.listenerIDs['parameterValueChanged']);\r\n            }\r\n            this.__value = material;\r\n            if (this.__value) {\r\n                this.listenerIDs['parameterValueChanged'] = this.__value.on('parameterValueChanged', (event) => {\r\n                    this.valueParameterValueChanged(event);\r\n                });\r\n            }\r\n            // During the cleaning process, we don't want notifications.\r\n            this.emit('valueChanged');\r\n        }\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The loadValue is used to change the value of a parameter, without triggering a\r\n     * valueChanges, or setting the USER_EDITED state.\r\n     *\r\n     * @param value - The context value.\r\n     */\r\n    //TODO: remove?\r\n    loadValue(value) {\r\n        if (this.__value) {\r\n            this.__value.removeListenerById('parameterValueChanged', this.listenerIDs['parameterValueChanged']);\r\n        }\r\n        this.__value = value;\r\n        if (this.__value) {\r\n            this.listenerIDs['parameterValueChanged'] = this.__value.on('parameterValueChanged', (event) => {\r\n                this.valueParameterValueChanged(event);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        let j = {};\r\n        j.name = this.name;\r\n        if (this.__value) {\r\n            j = {\r\n                value: !context || !context.onlyPath ? this.__value.toJSON(context) : this.__value.getPath(),\r\n            };\r\n        }\r\n        return j;\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context) {\r\n        if (j.value == undefined) {\r\n            console.warn('Invalid Parameter JSON');\r\n            return;\r\n        }\r\n        if (j.value instanceof Array || j.value instanceof String) {\r\n            if (context && context.assetItem) {\r\n                const materialLibrary = context.assetItem.getMaterialLibrary();\r\n                const material = materialLibrary.getMaterial(j.value instanceof Array ? j.value[1] : j.value);\r\n                if (material) {\r\n                    this.loadValue(material);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            const material = new Material();\r\n            if (j.value)\r\n                material.fromJSON(j.value, context);\r\n            this.loadValue(material);\r\n        }\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Clone and Destroy\r\n    /**\r\n     * The clone method constructs a new material parameter, copies its values\r\n     * from this parameter and returns it.\r\n     *\r\n     * @return - Returns a new material parameter.\r\n     */\r\n    clone() {\r\n        const clonedParam = new MaterialParameter(this.name, this.__value);\r\n        return clonedParam;\r\n    }\r\n}\r\nRegistry.register('MaterialParameter', MaterialParameter);\r\nexport { MaterialParameter };\r\n//# sourceMappingURL=MaterialParameter.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable require-jsdoc */\r\nimport { BaseClass } from '../../Utilities/BaseClass';\r\nimport { MathFunctions } from '../../Utilities/MathFunctions';\r\nfunction approxEqual(a, b) {\r\n    return !a.some((value, index) => Math.abs(b[index] - value) > 0.001);\r\n}\r\nfunction isInitialized(a) {\r\n    for (let i = 0; i < a.length; i++) {\r\n        if (!Number.isNaN(a[i]))\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\nclass Attribute extends BaseClass {\r\n    constructor(dataTypeName, stride) {\r\n        super();\r\n        this.data = new Float32Array(0);\r\n        this.dataTypeName = dataTypeName;\r\n        this.stride = stride;\r\n        this.initRange(0);\r\n        this.splits = {};\r\n        this.splitValues = [];\r\n    }\r\n    /**\r\n     * Sets the Mesh reference to the VertexAttribute. This is needed for attributes\r\n     * assigned to meshes, and is used to calculate face vertex indices.\r\n     * > Note: the mesh automatically calls this method when a vertex attribute is assigned.\r\n     *\r\n     * @param mesh - The mesh object\r\n     */\r\n    setMesh(mesh) {\r\n        this.mesh = mesh;\r\n    }\r\n    /**\r\n     * Returns the backing array for this attribute\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    asArray() {\r\n        return this.data;\r\n    }\r\n    /**\r\n     * Returns the name of the math type this attribute stores.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getDataTypeName() {\r\n        return this.dataTypeName;\r\n    }\r\n    /**\r\n     * Returns the count of attribute values in the data.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getCount() {\r\n        return this.data.length / this.stride;\r\n    }\r\n    /**\r\n     * Sets the count of attribute values in the data.\r\n     *\r\n     * @param size - The size value.\r\n     */\r\n    setCount(count) {\r\n        const prevLength = this.data.length;\r\n        const newLength = count * this.stride;\r\n        if (newLength > prevLength) {\r\n            const data = new Float32Array(newLength);\r\n            data.set(this.data, 0);\r\n            this.data = data;\r\n            this.initRange(prevLength);\r\n        }\r\n        else if (newLength < prevLength) {\r\n            this.data = this.data.slice(0, newLength);\r\n        }\r\n        else {\r\n            // No change in size. (this can happen when an attribute was already loaded with data.)\r\n        }\r\n        this.splits = {};\r\n        this.splitValues = [];\r\n    }\r\n    /**\r\n     * Fills up data values with default ones starting from the specified index.\r\n     *\r\n     * @param start - The start value.\r\n     */\r\n    initRange(start) {\r\n        // Initialize the values to invalid values.\r\n        for (let i = start; i < this.data.length; i++) {\r\n            this.data[i] = Number.NaN;\r\n        }\r\n    }\r\n    /**\r\n     * Returns the number of elements stored in each `T`.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    get numElements() {\r\n        return this.stride;\r\n    }\r\n    /**\r\n     * Returns data value of the specified index.\r\n     *\r\n     * @param index - The index value.\r\n     * @return - The return value.\r\n     */\r\n    getFloat32Value(index) {\r\n        return this.data[index];\r\n    }\r\n    /**\r\n     * Sets data value in the specified index.\r\n     *\r\n     * @param index - The index value.\r\n     * @param value - The value param.\r\n     */\r\n    setFloat32Value(index, value) {\r\n        this.data[index] = value;\r\n    }\r\n    // //////////////////////////////////////////////////\r\n    // Face Vertex Values\r\n    /**\r\n     * The getSplits method.\r\n     * @return - The return value.\r\n     */\r\n    getSplits() {\r\n        return this.splits;\r\n    }\r\n    /**\r\n     * Gets the value of a corner vertex of a face.\r\n     * @param face - The face index.\r\n     * @param faceVertex - The index of vertex within the face. [0... num face vertices]\r\n     * @return - The return value.\r\n     */\r\n    getFaceVertexValueRef_array(face, faceVertex) {\r\n        const vertex = this.mesh.getFaceVertexIndex(face, faceVertex);\r\n        if (vertex in this.splits && face in this.splits[vertex]) {\r\n            return this.splitValues[this.splits[vertex][face]];\r\n        }\r\n        return this.data.subarray(vertex * this.stride, (vertex + 1) * this.stride);\r\n    }\r\n    /**\r\n     * Sets the value of a corner vertex of a face.\r\n     * @param face - The face index.\r\n     * @param faceVertex - The index of vertex within the face. [0... num face vertices]\r\n     * @param value - The value value.\r\n     */\r\n    setFaceVertexValue_array(face, faceVertex, value) {\r\n        const vertex = this.mesh.getFaceVertexIndex(face, faceVertex);\r\n        this.setFaceVertexValue_ByVertexIndex(face, vertex, value);\r\n    }\r\n    /**\r\n     * The setFaceVertexValue_ByVertexIndex method.\r\n     * @param face - The face index.\r\n     * @param vertex - The vertex value.\r\n     * @param value - The value value.\r\n     */\r\n    setFaceVertexValue_ByVertexIndex(face, vertex, value) {\r\n        const currValue = this.data.subarray(vertex * this.stride, (vertex + 1) * this.stride);\r\n        if (!isInitialized(currValue)) {\r\n            // the value is uninitialized. Initialize it.\r\n            currValue.set(value);\r\n        }\r\n        else if (approxEqual(currValue, value)) {\r\n            // Reusing vertex value. Do nothing\r\n        }\r\n        else {\r\n            // The new value is different from the existing value\r\n            if (vertex in this.splits) {\r\n                // Now check if any existing splits for this vertex match the value being set.\r\n                // i.e. for faces around a vertex, there will often be a seam along 2 edges\r\n                // where the values differ. On each side of the seam, all faces can use the same\r\n                // value. We should see then only one split value for the vertex.\r\n                const vertexSplitIds = this.splits[vertex];\r\n                for (const fid in vertexSplitIds) {\r\n                    const splitId = vertexSplitIds[fid];\r\n                    if (approxEqual(this.splitValues[splitId], value)) {\r\n                        // re-use this split value\r\n                        vertexSplitIds[face] = splitId;\r\n                        return;\r\n                    }\r\n                }\r\n                // If a split already exists for this face, re-use it.\r\n                if (face in this.splits[vertex]) {\r\n                    this.splitValues[this.splits[vertex][face]] = value;\r\n                    return;\r\n                }\r\n            }\r\n            else {\r\n                this.splits[vertex] = {};\r\n            }\r\n            this.splits[vertex][face] = this.splitValues.length;\r\n            this.splitValues.push(value);\r\n        }\r\n    }\r\n    /**\r\n     * The setSplitVertexValue method.\r\n     * @param vertex - The vertex value.\r\n     * @param face - The face index.\r\n     * @param value - The value value.\r\n     */\r\n    setSplitVertexValue_array(vertex, face, value) {\r\n        if (!(vertex in this.splits))\r\n            this.splits[vertex] = {};\r\n        if (face in this.splits[vertex]) {\r\n            const currValue = this.splitValues[this.splits[vertex][face]];\r\n            if (approxEqual(currValue, value))\r\n                return;\r\n            console.warn('Face Vertex Already Split with different value');\r\n        }\r\n        this.splits[vertex][face] = this.splitValues.length;\r\n        this.splitValues.push(value);\r\n    }\r\n    /**\r\n     * The setSplitVertexValues method.\r\n     * @param vertex - The vertex value.\r\n     * @param faceGroup - The faceGroup value.\r\n     * @param value - The value value.\r\n     */\r\n    setSplitVertexValues(vertex, faceGroup, value) {\r\n        if (!(vertex in this.splits))\r\n            this.splits[vertex] = {};\r\n        const splitIndex = this.splitValues.length;\r\n        this.splitValues.push(value);\r\n        for (const face of faceGroup) {\r\n            // if (face in this.splits[vertex]) {\r\n            //     let currValue = this.splitValues[this.splits[vertex][face]];\r\n            //     if (currValue.approxEqual(value))\r\n            //         return;\r\n            //     console.warn(\"Face Vertex Already Split with different value\");\r\n            // }\r\n            this.splits[vertex][face] = splitIndex;\r\n        }\r\n    }\r\n    /**\r\n     * The generateSplitValues method.\r\n     * @param splitIndices - The splitIndices value.\r\n     * @param splitCount - The splitCount value.\r\n     * @return - The return value.\r\n     */\r\n    generateSplitValues(splitIndices, splitCount) {\r\n        if (splitCount == 0)\r\n            return this.data;\r\n        const numUnSplitValues = this.getCount();\r\n        const data = new Float32Array((numUnSplitValues + splitCount) * this.stride);\r\n        data.set(this.data);\r\n        // Now duplicate the split values to generate an attributes array\r\n        // using the shared splits across all attributes.\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const vertex in splitIndices) {\r\n            const faces = splitIndices[vertex];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const face in faces) {\r\n                const tgt = numUnSplitValues + faces[face];\r\n                if (vertex in this.splits && face in this.splits[vertex]) {\r\n                    // this attribute has a split value in its array.\r\n                    // we must use that value...\r\n                    const src = this.splits[vertex][face];\r\n                    this.splitValues[src].forEach((value, index) => {\r\n                        data[tgt * this.stride + index] = value;\r\n                    });\r\n                }\r\n                else {\r\n                    // Copy each scalar value to the new place in the array.\r\n                    const src = parseInt(vertex);\r\n                    for (let e = 0; e < this.stride; e++) {\r\n                        data[tgt * this.stride + e] = this.data[src * this.stride + e];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        return {\r\n            data: this.data,\r\n            dataType: this.dataTypeName,\r\n            length: this.data.length / this.stride,\r\n        };\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param j - The json object this item must decode.\r\n     */\r\n    fromJSON(j) {\r\n        const data = j.data.map((dataElement) => MathFunctions.isNumeric(dataElement) ? dataElement : Number.POSITIVE_INFINITY);\r\n        this.data = Float32Array.from(data);\r\n    }\r\n    /**\r\n     * The loadSplitValues method.\r\n     * @param reader - The reader value.\r\n     */\r\n    loadSplitValues(reader) {\r\n        const splitIndices = reader.loadUInt32Array();\r\n        if (splitIndices.length == 0)\r\n            return;\r\n        let offset = 0;\r\n        let numSplitValues = 0;\r\n        while (true) {\r\n            const vertexId = splitIndices[offset++];\r\n            const numSplits = splitIndices[offset++];\r\n            const splits = {};\r\n            for (let i = 0; i < numSplits; i++) {\r\n                const faceId = splitIndices[offset++];\r\n                const splitId = splitIndices[offset++];\r\n                splits[faceId] = splitId;\r\n                if (splitId >= numSplitValues)\r\n                    numSplitValues = splitId + 1;\r\n            }\r\n            this.splits[vertexId] = splits;\r\n            if (offset >= splitIndices.length)\r\n                break;\r\n        }\r\n        const dim = this.stride;\r\n        const splitValues = reader.loadFloat32Array(numSplitValues * dim);\r\n        this.splitValues = [];\r\n        for (let i = 0; i < numSplitValues; i++) {\r\n            const val = splitValues.slice(i * dim, i * dim + dim);\r\n            this.splitValues.push(val);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the string representation of the object's state.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    toString() {\r\n        return JSON.stringify(this.toJSON(), null, 2);\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Memory\r\n    /**\r\n     * Returns vertex attributes buffers and its count.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    genBuffer() {\r\n        return {\r\n            values: this.data,\r\n            count: this.getCount(),\r\n            dataType: this.dataTypeName,\r\n            normalized: this.normalized,\r\n        };\r\n    }\r\n}\r\nexport { Attribute };\r\n//# sourceMappingURL=Attribute.js.map","import { Attribute } from './Attribute';\r\nimport { Vec3 } from '../../Math/Vec3';\r\nimport { Registry } from '../../Registry';\r\n/**\r\n * Class representing an attribute.\r\n */\r\nclass Vec3Attribute extends Attribute {\r\n    /**\r\n     * Create a Vec2Attribute.\r\n     */\r\n    constructor() {\r\n        super('Vec3', 3);\r\n        this.normalized = false;\r\n    }\r\n    /**\r\n     * Returns the Vec3 value at the specified index.\r\n     *\r\n     * > Note: 'Ref' means that the value contains a reference to the data in the attribute.\r\n     * > The components of the value can be changed causing the attributes data is changed.\r\n     * > No need to call 'setValue'.\r\n     *\r\n     * @param index - The index value.\r\n     * @returns Vec3 - The value at the specified index.\r\n     */\r\n    getValueRef(index) {\r\n        if (index >= this.data.length / this.stride)\r\n            throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);\r\n        const offset = index * this.stride;\r\n        const valueData = this.data.subarray(offset, offset + this.stride);\r\n        return new Vec3(valueData);\r\n    }\r\n    /**\r\n     * Returns a copy of the Vec3 value at the specified index.\r\n     *\r\n     * @param index - The index value.\r\n     * @return Vec3 - The value at the specified index.\r\n     */\r\n    getValue(index) {\r\n        if (index >= this.data.length / this.stride)\r\n            throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);\r\n        const offset = index * this.stride;\r\n        const valueData = this.data.slice(offset, offset + this.stride);\r\n        return new Vec3(valueData);\r\n    }\r\n    /**\r\n     * Sets Vec3 at the specified index.\r\n     *\r\n     * @param index - The index value.\r\n     * @param value - The value param.\r\n     */\r\n    setValue(index, value) {\r\n        if (index >= this.data.length / this.stride)\r\n            throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);\r\n        const offset = index * this.stride;\r\n        this.data.set(value.asArray(), offset);\r\n    }\r\n    /**\r\n     * Gets the value of a corner vertex of a face.\r\n     * > Note: 'Ref' means that the value contains a reference to the data in the attribute.\r\n     * > The components of the value can be changed causing the attributes data is changed.\r\n     * > No need to call 'setFaceVertexValue'.\r\n     * @param face - The face index.\r\n     * @param faceVertex - The index of vertex within the face. [0... num face vertices]\r\n     * @return - The return value.\r\n     */\r\n    getFaceVertexValueRef(face, faceVertex) {\r\n        const array = this.getFaceVertexValueRef_array(face, faceVertex);\r\n        return new Vec3(array);\r\n    }\r\n    /**\r\n     * Sets the value of a corner vertex of a face.\r\n     * @param face - The face index.\r\n     * @param faceVertex - The index of vertex within the face. [0... num face vertices]\r\n     * @param value - The value value.\r\n     */\r\n    setFaceVertexValue(face, faceVertex, value) {\r\n        this.setFaceVertexValue_array(face, faceVertex, value.asArray());\r\n    }\r\n    /**\r\n     * The setSplitVertexValue method.\r\n     * @param vertex - The vertex value.\r\n     * @param face - The face index.\r\n     * @param value - The value value.\r\n     */\r\n    setSplitVertexValue(vertex, face, value) {\r\n        this.setSplitVertexValue_array(vertex, face, value.asArray());\r\n    }\r\n}\r\nRegistry.register('Vec3Attribute', Vec3Attribute);\r\nexport { Vec3Attribute };\r\n//# sourceMappingURL=Vec3Attribute.js.map","import { Attribute } from './Attribute';\r\nimport { Vec2 } from '../../Math/Vec2';\r\nimport { Registry } from '../../Registry';\r\n/**\r\n * Class representing an attribute.\r\n */\r\nclass Vec2Attribute extends Attribute {\r\n    /**\r\n     * Create a Vec2Attribute.\r\n     */\r\n    constructor() {\r\n        super('Vec2', 2);\r\n        this.normalized = false;\r\n    }\r\n    /**\r\n     * Returns the Vec2 value at the specified index.\r\n     *\r\n     * > Note: 'Ref' means that the value contains a reference to the data in the attribute.\r\n     * > The components of the value can be changed causing the attributes data is changed.\r\n     * > No need to call 'setValue'.\r\n     *\r\n     * @param index - The index value.\r\n     * @returns Vec2 - The value at the specified index.\r\n     */\r\n    getValueRef(index) {\r\n        if (index >= this.data.length / this.stride)\r\n            throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);\r\n        const offset = index * this.stride;\r\n        const valueData = this.data.subarray(offset, offset + this.stride);\r\n        return new Vec2(valueData);\r\n    }\r\n    /**\r\n     * Returns the Vec2 from the specified index.\r\n     *\r\n     * @param index - The index value.\r\n     * @return Vec2 - The return value.\r\n     */\r\n    getValue(index) {\r\n        if (index >= this.data.length / this.stride)\r\n            throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);\r\n        const offset = index * this.stride;\r\n        const valueData = this.data.slice(offset, offset + this.stride);\r\n        return new Vec2(valueData);\r\n    }\r\n    /**\r\n     * Sets Vec2 at the specified index.\r\n     *\r\n     * @param index - The index value.\r\n     * @param value - The value param.\r\n     */\r\n    setValue(index, value) {\r\n        if (index >= this.data.length / this.stride)\r\n            throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);\r\n        const offset = index * this.stride;\r\n        this.data.set(value.asArray(), offset);\r\n    }\r\n    /**\r\n     * Gets the value of a corner vertex of a face.\r\n     * > Note: 'Ref' means that the value contains a reference to the data in the attribute.\r\n     * > The components of the value can be changed causing the attributes data is changed.\r\n     * > No need to call 'setFaceVertexValue'.\r\n     * @param face - The face index.\r\n     * @param faceVertex - The index of vertex within the face. [0... num face vertices]\r\n     * @return - The return value.\r\n     */\r\n    getFaceVertexValueRef(face, faceVertex) {\r\n        const array = this.getFaceVertexValueRef_array(face, faceVertex);\r\n        return new Vec2(array);\r\n    }\r\n    /**\r\n     * Sets the value of a corner vertex of a face.\r\n     * @param face - The face index.\r\n     * @param faceVertex - The index of vertex within the face. [0... num face vertices]\r\n     * @param value - The value value.\r\n     */\r\n    setFaceVertexValue(face, faceVertex, value) {\r\n        this.setFaceVertexValue_array(face, faceVertex, value.asArray());\r\n    }\r\n    /**\r\n     * The setSplitVertexValue method.\r\n     * @param vertex - The vertex value.\r\n     * @param face - The face index.\r\n     * @param value - The value value.\r\n     */\r\n    setSplitVertexValue(vertex, face, value) {\r\n        this.setSplitVertexValue_array(vertex, face, value.asArray());\r\n    }\r\n}\r\nRegistry.register('Vec2Attribute', Vec2Attribute);\r\nexport { Vec2Attribute };\r\n//# sourceMappingURL=Vec2Attribute.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { Vec2, Vec3, Box2, Box3, Color } from '../../Math/index';\r\nimport { ParameterOwner } from '../ParameterOwner';\r\nimport { Vec3Attribute } from './Vec3Attribute';\r\nimport { Vec2Attribute } from './Vec2Attribute';\r\n/**\r\n * Represents a base class for 3D geometry items.\r\n *\r\n * **Events**\r\n * * **boundingBoxChanged:** Triggered when the bounding box changes.\r\n * * **geomDataChanged:** Emitted when the geometry attributes have changed. The topology did not change. The Renderer will upload the new attributes to the GPU.\r\n * * **geomDataTopologyChanged:** Emitted when the geometry attributes and topology have changed.  The Renderer will upload the new attributes and topology to the GPU.\r\n *\r\n * @extends ParameterOwner\r\n */\r\nclass BaseGeom extends ParameterOwner {\r\n    /**\r\n     * Create a base geom.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.__boundingBox = new Box3();\r\n        this.__boundingBoxDirty = true;\r\n        this.__metaData = new Map();\r\n        this.__name = '';\r\n        this.__numVertices = 0;\r\n        this.__vertexAttributes = new Map();\r\n        this.debugColor = new Color(1, 0, 0, 1);\r\n        this.name = '';\r\n        this.addVertexAttribute('positions', new Vec3Attribute());\r\n    }\r\n    /**\r\n     * The clear method.\r\n     */\r\n    clear() {\r\n        this.setNumVertices(0);\r\n    }\r\n    /**\r\n     * Establishes a name for the geometry.\r\n     *\r\n     * @param name - The debug name value.\r\n     */\r\n    setDebugName(name) {\r\n        this.name = name;\r\n    }\r\n    /**\r\n     * Adds a new vertex attribute to the geometry.\r\n     *\r\n     * @param name - The name of the vertex attribute.\r\n     * @param dataType - The dataType value. // TODO: is any ok vs. AttrValue | number. Unsure about how dataType is used\r\n     * @return - Returns an attribute.\r\n     */\r\n    addVertexAttribute(name, attr) {\r\n        attr.setCount(this.__numVertices);\r\n        this.__vertexAttributes.set(name, attr);\r\n    }\r\n    /**\r\n     * Checks if the the geometry has an attribute with the specified name.\r\n     *\r\n     * @param name - The name of the vertex attribute.\r\n     * @return - The return value.\r\n     */\r\n    hasVertexAttribute(name) {\r\n        return this.__vertexAttributes.has(name);\r\n    }\r\n    /**\r\n     * Returns vertex attribute with the specified name.\r\n     *\r\n     * @param name - The name of the vertex attribute.\r\n     * @return - The return value.\r\n     */\r\n    getVertexAttribute(name) {\r\n        return this.__vertexAttributes.get(name);\r\n    }\r\n    /**\r\n     * Returns all vertex attributes in an object with their names.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getVertexAttributes() {\r\n        const vertexAttributes = {};\r\n        for (const [key, attr] of this.__vertexAttributes.entries())\r\n            vertexAttributes[key] = attr;\r\n        return vertexAttributes;\r\n    }\r\n    /**\r\n     * Returns 'positions' vertex attribute.\r\n     */\r\n    get positions() {\r\n        return this.__vertexAttributes.get('positions');\r\n    }\r\n    /**\r\n     * Returns the number of vertex attributes.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    numVertices() {\r\n        return this.__numVertices;\r\n    }\r\n    /**\r\n     * Returns the number of vertex attributes.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getNumVertices() {\r\n        return this.__numVertices;\r\n    }\r\n    /**\r\n     * Sets the number of vertices the geometry has.\r\n     *\r\n     * @param count - The count value.\r\n     */\r\n    setNumVertices(count) {\r\n        this.__numVertices = count;\r\n        // Resizes each of the vertex attributes to match the new count.\r\n        this.__vertexAttributes.forEach((attr) => attr.setCount(this.__numVertices));\r\n        this.setBoundingBoxDirty();\r\n    }\r\n    // ////////////////////////////////////////\r\n    // BoundingBox\r\n    /**\r\n     * Returns the bounding box for geometry.\r\n     * @return - The return value.\r\n     */\r\n    getBoundingBox() {\r\n        if (this.__boundingBoxDirty)\r\n            this.updateBoundingBox();\r\n        return this.__boundingBox;\r\n    }\r\n    /**\r\n     * The setBoundingBoxDirty method.\r\n     */\r\n    setBoundingBoxDirty() {\r\n        this.__boundingBoxDirty = true;\r\n        this.emit('boundingBoxChanged');\r\n    }\r\n    /**\r\n     * The updateBoundingBox method.\r\n     */\r\n    updateBoundingBox() {\r\n        const positions = this.positions;\r\n        const bbox = new Box3();\r\n        if (positions) {\r\n            const numVerts = positions.getCount();\r\n            for (let i = 0; i < numVerts; i++)\r\n                bbox.addPoint(positions.getValueRef(i));\r\n        }\r\n        this.__boundingBox = bbox;\r\n        this.__boundingBoxDirty = false;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Metadata\r\n    /**\r\n     * Returns metadata value of the specified name.\r\n     *\r\n     * @param key - The key value.\r\n     * @return - The return value.\r\n     */\r\n    getMetadata(key) {\r\n        return this.__metaData.get(key);\r\n    }\r\n    /**\r\n     * Verifies if geometry's metadata contains a value with the specified key.\r\n     *\r\n     * @param key - The key value.\r\n     * @return - The return value.\r\n     */\r\n    hasMetadata(key) {\r\n        return this.__metaData.has(key);\r\n    }\r\n    /**\r\n     * Sets metadata value to the geometry.\r\n     *\r\n     * @param key - The key value.\r\n     * @param metaData - The metaData value.\r\n     */\r\n    setMetadata(key, metaData) {\r\n        this.__metaData.set(key, metaData);\r\n    }\r\n    /**\r\n     * Removes metadata value from the geometry with the specified key.\r\n     *\r\n     * @param key - The key value.\r\n     */\r\n    deleteMetadata(key) {\r\n        this.__metaData.delete(key);\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Memory\r\n    /**\r\n     * Returns vertex attributes buffers and its count.\r\n     * @return - The return value.\r\n     */\r\n    genBuffers(opts) {\r\n        const attrBuffers = {};\r\n        for (const [attrName, attr] of this.__vertexAttributes) {\r\n            attrBuffers[attrName] = attr.genBuffer();\r\n        }\r\n        return {\r\n            numVertices: this.numVertices(),\r\n            attrBuffers,\r\n        };\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Sets state of current Geometry(Including Vertices and Bounding Box) using a binary reader object.\r\n     *\r\n     * @param reader - The reader value.\r\n     */\r\n    loadBaseGeomBinary(reader) {\r\n        this.name = reader.loadStr();\r\n        const flags = reader.loadUInt8();\r\n        this.debugColor = reader.loadRGBFloat32Color();\r\n        const numVerts = reader.loadUInt32();\r\n        this.__boundingBox.set(reader.loadFloat32Vec3(), reader.loadFloat32Vec3());\r\n        this.setNumVertices(numVerts);\r\n        const positionsAttr = this.positions;\r\n        let normalsAttr;\r\n        let texCoordsAttr;\r\n        if (flags & (1 << 1)) {\r\n            normalsAttr = this.getVertexAttribute('normals');\r\n            if (!normalsAttr) {\r\n                normalsAttr = new Vec3Attribute();\r\n                this.addVertexAttribute('normals', normalsAttr);\r\n            }\r\n        }\r\n        if (flags & (1 << 2)) {\r\n            texCoordsAttr = this.getVertexAttribute('texCoords');\r\n            if (!texCoordsAttr) {\r\n                texCoordsAttr = new Vec2Attribute();\r\n                this.addVertexAttribute('texCoords', texCoordsAttr);\r\n            }\r\n        }\r\n        const parse8BitPositionsArray = (range, offset, sclVec, positions_8bit) => {\r\n            for (let i = range[0]; i < range[1]; i++) {\r\n                const pos = new Vec3(positions_8bit[i * 3 + 0] / 255.0, positions_8bit[i * 3 + 1] / 255.0, positions_8bit[i * 3 + 2] / 255.0);\r\n                pos.multiplyInPlace(sclVec);\r\n                pos.addInPlace(offset);\r\n                if (positionsAttr)\r\n                    positionsAttr.setValue(i, pos);\r\n            }\r\n        };\r\n        const parse8BitNormalsArray = (range, offset, sclVec, normals_8bit) => {\r\n            if (sclVec.isNull())\r\n                sclVec.set(1, 1, 1);\r\n            for (let i = range[0]; i < range[1]; i++) {\r\n                const normal = new Vec3(normals_8bit[i * 3 + 0] / 255.0, normals_8bit[i * 3 + 1] / 255.0, normals_8bit[i * 3 + 2] / 255.0);\r\n                normal.multiplyInPlace(sclVec);\r\n                normal.addInPlace(offset);\r\n                normal.normalizeInPlace();\r\n                normalsAttr.setValue(i, normal);\r\n            }\r\n        };\r\n        const parse8BitTextureCoordsArray = (range, offset, sclVec, texCoords_8bit) => {\r\n            // if (sclVec.isNull())\r\n            //     sclVec.set(1, 1, 1);\r\n            for (let i = range[0]; i < range[1]; i++) {\r\n                const textureCoord = new Vec2(texCoords_8bit[i * 2 + 0] / 255.0, texCoords_8bit[i * 2 + 1] / 255.0);\r\n                textureCoord.multiplyInPlace(sclVec);\r\n                textureCoord.addInPlace(offset);\r\n                texCoordsAttr.setValue(i, textureCoord);\r\n            }\r\n        };\r\n        const numClusters = reader.loadUInt32();\r\n        if (numClusters == 1) {\r\n            {\r\n                const box3 = this.__boundingBox;\r\n                const positions_8bit = reader.loadUInt8Array(numVerts * 3);\r\n                parse8BitPositionsArray([0, numVerts], box3.p0, box3.diagonal(), positions_8bit);\r\n            }\r\n            if (normalsAttr) {\r\n                const box3 = new Box3(reader.loadFloat32Vec3(), reader.loadFloat32Vec3());\r\n                const normals_8bit = reader.loadUInt8Array(numVerts * 3);\r\n                parse8BitNormalsArray([0, numVerts], box3.p0, box3.diagonal(), normals_8bit);\r\n                normalsAttr.loadSplitValues(reader);\r\n            }\r\n            if (texCoordsAttr) {\r\n                const box2 = new Box2(reader.loadFloat32Vec2(), reader.loadFloat32Vec2());\r\n                const texCoords_8bit = reader.loadUInt8Array(numVerts * 2);\r\n                parse8BitTextureCoordsArray([0, numVerts], box2.p0, box2.diagonal(), texCoords_8bit);\r\n                texCoordsAttr.loadSplitValues(reader);\r\n            }\r\n        }\r\n        else {\r\n            const clusters = [];\r\n            let offset = 0;\r\n            for (let i = 0; i < numClusters; i++) {\r\n                const count = reader.loadUInt32();\r\n                const clusterData = {\r\n                    range: [offset, offset + count],\r\n                    bbox: new Box3(reader.loadFloat32Vec3(), reader.loadFloat32Vec3()),\r\n                    normalsRange: new Box3(),\r\n                    texCoordsRange: new Box2(),\r\n                };\r\n                if (normalsAttr) {\r\n                    clusterData.normalsRange.set(reader.loadFloat32Vec3(), reader.loadFloat32Vec3());\r\n                }\r\n                if (texCoordsAttr) {\r\n                    clusterData.texCoordsRange.set(reader.loadFloat32Vec2(), reader.loadFloat32Vec2());\r\n                }\r\n                clusters.push(clusterData);\r\n                offset += count;\r\n            }\r\n            const positions_8bit = reader.loadUInt8Array(numVerts * 3);\r\n            let normals_8bit = null;\r\n            let texCoords_8bit = null;\r\n            if (normalsAttr) {\r\n                normals_8bit = reader.loadUInt8Array(numVerts * 3);\r\n            }\r\n            if (texCoordsAttr) {\r\n                texCoords_8bit = reader.loadUInt8Array(numVerts * 2);\r\n            }\r\n            for (let i = 0; i < numClusters; i++) {\r\n                {\r\n                    const box3 = clusters[i].bbox;\r\n                    parse8BitPositionsArray(clusters[i].range, box3.p0, box3.diagonal(), positions_8bit);\r\n                }\r\n                if (normalsAttr) {\r\n                    const box3 = clusters[i].normalsRange;\r\n                    parse8BitNormalsArray(clusters[i].range, box3.p0, box3.diagonal(), normals_8bit);\r\n                }\r\n                if (texCoordsAttr) {\r\n                    const box2 = clusters[i].texCoordsRange;\r\n                    parse8BitTextureCoordsArray(clusters[i].range, box2.p0, box2.diagonal(), texCoords_8bit);\r\n                }\r\n            }\r\n            if (normalsAttr) {\r\n                normalsAttr.loadSplitValues(reader);\r\n            }\r\n            if (texCoordsAttr) {\r\n                texCoordsAttr.loadSplitValues(reader);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        const json = super.toJSON(context);\r\n        if (!context || !context.skipTopology) {\r\n            json.numVertices = this.__numVertices || 0;\r\n        }\r\n        const vertexAttributes = {};\r\n        for (const [key, attr] of this.__vertexAttributes.entries()) {\r\n            if (!context || !('skipAttributes' in context) || !context.skipAttributes.includes(key))\r\n                vertexAttributes[key] = attr.toJSON(context);\r\n        }\r\n        json.vertexAttributes = vertexAttributes;\r\n        return json;\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param json - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(json, context) {\r\n        this.clear();\r\n        super.fromJSON(json, context);\r\n        this.setNumVertices(json.numVertices);\r\n        for (const name in json.vertexAttributes) {\r\n            let attr = this.__vertexAttributes.get(name);\r\n            const attrJSON = json.vertexAttributes[name];\r\n            if (!attr) {\r\n                // switch(attrJSON.dataType) {\r\n                //   case 'Vec3' attr = new Vec3Attribute( attrJSON.defaultScalarValue)\r\n                // }\r\n                // const dataType = Registry.getClassDefinition(attrJSON.dataType)\r\n                // attr = new VertexAttribute(this, dataType, 0, attrJSON.defaultScalarValue)\r\n                // if (attr) this.__vertexAttributes.set(name, attr)\r\n            }\r\n            if (attr) {\r\n                attr.fromJSON(attrJSON);\r\n            }\r\n            else {\r\n                console.warn('attr undefined, cannot execute fromJSON()');\r\n            }\r\n        }\r\n        this.emit('geomDataTopologyChanged');\r\n    }\r\n    /**\r\n     * Returns geometry data value in json format.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    toString() {\r\n        return JSON.stringify(this.toJSON(), null, 2);\r\n    }\r\n}\r\nexport { BaseGeom };\r\n//# sourceMappingURL=BaseGeom.js.map","import { Attribute } from './Attribute';\r\nimport { Vec4 } from '../../Math/Vec4';\r\nimport { Registry } from '../../Registry';\r\n/**\r\n * Class representing an attribute.\r\n */\r\nclass Vec4Attribute extends Attribute {\r\n    /**\r\n     * Create a Vec4Attribute.\r\n     */\r\n    constructor() {\r\n        super('Vec4', 4);\r\n        this.normalized = false;\r\n    }\r\n    /**\r\n     * Returns the Vec4 value at the specified index.\r\n     *\r\n     * > Note: 'Ref' means that the value contains a reference to the data in the attribute.\r\n     * > The components of the value can be changed causing the attributes data is changed.\r\n     * > No need to call 'setValue'.\r\n     *\r\n     * @param index - The index value.\r\n     * @returns Vec4 - The value at the specified index.\r\n     */\r\n    getValueRef(index) {\r\n        if (index >= this.data.length / this.stride)\r\n            throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);\r\n        const offset = index * this.stride;\r\n        const valueData = this.data.subarray(offset, offset + this.stride);\r\n        return new Vec4(valueData);\r\n    }\r\n    /**\r\n     * Returns a copy of the Vec4 value at the specified index.\r\n     *\r\n     * @param index - The index value.\r\n     * @return Vec4 - The value at the specified index.\r\n     */\r\n    getValue(index) {\r\n        if (index >= this.data.length / this.stride)\r\n            throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);\r\n        const offset = index * this.stride;\r\n        const valueData = this.data.slice(offset, offset + this.stride);\r\n        return new Vec4(valueData);\r\n    }\r\n    /**\r\n     * Sets Vec4 at the specified index.\r\n     *\r\n     * @param index - The index value.\r\n     * @param value - The value param.\r\n     */\r\n    setValue(index, value) {\r\n        if (index >= this.data.length / this.stride)\r\n            throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);\r\n        const offset = index * this.stride;\r\n        this.data.set(value.asArray(), offset);\r\n    }\r\n    /**\r\n     * Gets the value of a corner vertex of a face.\r\n     * > Note: 'Ref' means that the value contains a reference to the data in the attribute.\r\n     * > The components of the value can be changed causing the attributes data is changed.\r\n     * > No need to call 'setFaceVertexValue'.\r\n     * @param face - The face index.\r\n     * @param faceVertex - The index of vertex within the face. [0... num face vertices]\r\n     * @return - The return value.\r\n     */\r\n    getFaceVertexValueRef(face, faceVertex) {\r\n        const array = this.getFaceVertexValueRef_array(face, faceVertex);\r\n        return new Vec4(array);\r\n    }\r\n    /**\r\n     * Sets the value of a corner vertex of a face.\r\n     * @param face - The face index.\r\n     * @param faceVertex - The index of vertex within the face. [0... num face vertices]\r\n     * @param value - The value value.\r\n     */\r\n    setFaceVertexValue(face, faceVertex, value) {\r\n        this.setFaceVertexValue_array(face, faceVertex, value.asArray());\r\n    }\r\n    /**\r\n     * The setSplitVertexValue method.\r\n     * @param vertex - The vertex value.\r\n     * @param face - The face index.\r\n     * @param value - The value value.\r\n     */\r\n    setSplitVertexValue(vertex, face, value) {\r\n        this.setSplitVertexValue_array(vertex, face, value.asArray());\r\n    }\r\n}\r\nRegistry.register('Vec4Attribute', Vec4Attribute);\r\nexport { Vec4Attribute };\r\n//# sourceMappingURL=Vec4Attribute.js.map","import { Attribute } from './Attribute';\r\nimport { Color } from '../../Math/Color';\r\nimport { Registry } from '../../Registry';\r\n/**\r\n * Class representing an attribute.\r\n */\r\nclass ColorAttribute extends Attribute {\r\n    /**\r\n     * Create a ColorAttribute.\r\n     */\r\n    constructor() {\r\n        super('Color', 4);\r\n        this.normalized = false;\r\n    }\r\n    /**\r\n     * Returns the Color value at the specified index.\r\n     *\r\n     * > Note: 'Ref' means that the value contains a reference to the data in the attribute.\r\n     * > The components of the value can be changed causing the attributes data is changed.\r\n     * > No need to call 'setValue'.\r\n     *\r\n     * @param index - The index value.\r\n     * @returns Color - The value at the specified index.\r\n     */\r\n    getValueRef(index) {\r\n        if (index >= this.data.length / this.stride)\r\n            throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);\r\n        const offset = index * this.stride;\r\n        const valueData = this.data.subarray(offset, offset + this.stride);\r\n        return new Color(valueData);\r\n    }\r\n    /**\r\n     * Returns a copy of the Color value at the specified index.\r\n     *\r\n     * @param index - The index value.\r\n     * @return Color - The return value.\r\n     */\r\n    getValue(index) {\r\n        if (index >= this.data.length / this.stride)\r\n            throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);\r\n        const offset = index * this.stride;\r\n        const valueData = this.data.slice(offset, offset + this.stride);\r\n        return new Color(valueData);\r\n    }\r\n    /**\r\n     * Sets Color at the specified index.\r\n     *\r\n     * @param index - The index value.\r\n     * @param value - The value param.\r\n     */\r\n    setValue(index, value) {\r\n        if (index >= this.data.length / this.stride)\r\n            throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);\r\n        const offset = index * this.stride;\r\n        this.data.set(value.asArray(), offset);\r\n    }\r\n    /**\r\n     * Gets the value of a corner vertex of a face.\r\n     * > Note: 'Ref' means that the value contains a reference to the data in the attribute.\r\n     * > The components of the value can be changed causing the attributes data is changed.\r\n     * > No need to call 'setFaceVertexValue'.\r\n     * @param face - The face index.\r\n     * @param faceVertex - The index of vertex within the face. [0... num face vertices]\r\n     * @return - The return value.\r\n     */\r\n    getFaceVertexValueRef(face, faceVertex) {\r\n        const array = this.getFaceVertexValueRef_array(face, faceVertex);\r\n        return new Color(array);\r\n    }\r\n    /**\r\n     * Sets the value of a corner vertex of a face.\r\n     * @param face - The face index.\r\n     * @param faceVertex - The index of vertex within the face. [0... num face vertices]\r\n     * @param value - The value value.\r\n     */\r\n    setFaceVertexValue(face, faceVertex, value) {\r\n        this.setFaceVertexValue_array(face, faceVertex, value.asArray());\r\n    }\r\n    /**\r\n     * The setSplitVertexValue method.\r\n     * @param vertex - The vertex value.\r\n     * @param face - The face index.\r\n     * @param value - The value value.\r\n     */\r\n    setSplitVertexValue(vertex, face, value) {\r\n        this.setSplitVertexValue_array(vertex, face, value.asArray());\r\n    }\r\n}\r\nRegistry.register('ColorAttribute', ColorAttribute);\r\nexport { ColorAttribute };\r\n//# sourceMappingURL=ColorAttribute.js.map","import { BaseGeom } from './BaseGeom';\r\nimport { Registry } from '../../Registry';\r\nimport { Vec3 } from '../../Math/Vec3';\r\nimport { Box3 } from '../../Math/Box3';\r\n/**\r\n * Class representing a point primitive drawing type, every vertex specified is a point.\r\n *\r\n * ```\r\n * const points = new Points()\r\n * ```\r\n *\r\n * * **Events**\r\n * * **boundingBoxChanged:** Triggered when the bounding box changes.\r\n *\r\n * @extends BaseGeom\r\n */\r\nclass Points extends BaseGeom {\r\n    /**\r\n     * Create points.\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n    /**\r\n     * The clear method.\r\n     */\r\n    clear() {\r\n        this.setNumVertices(0);\r\n        this.emit('geomDataTopologyChanged');\r\n    }\r\n    /**\r\n     * Loads and populates `Points` object from a binary reader.\r\n     *\r\n     * @param reader - The reader value.\r\n     */\r\n    loadBin(reader) {\r\n        this.name = reader.loadStr();\r\n        const numVerts = reader.loadUInt32();\r\n        this.__boundingBox.set(reader.loadFloat32Vec3(), reader.loadFloat32Vec3());\r\n        this.setNumVertices(numVerts);\r\n        const positions = this.getVertexAttribute('positions');\r\n        if (!positions) {\r\n            throw Error('positions is undefined');\r\n        }\r\n        if (numVerts < 256) {\r\n            const bboxMat = this.__boundingBox.toMat4();\r\n            const posAttr8bit = reader.loadUInt8Array(numVerts * 3);\r\n            for (let i = 0; i < numVerts; i++) {\r\n                const pos = new Vec3(posAttr8bit[i * 3 + 0] / 255.0, posAttr8bit[i * 3 + 1] / 255.0, posAttr8bit[i * 3 + 2] / 255.0);\r\n                positions.setValue(i, bboxMat.transformVec3(pos));\r\n            }\r\n        }\r\n        else {\r\n            const numClusters = reader.loadUInt32();\r\n            const clusters = [];\r\n            for (let i = 0; i < numClusters; i++) {\r\n                const range = reader.loadUInt32Vec2();\r\n                const p0 = reader.loadFloat32Vec3();\r\n                const p1 = reader.loadFloat32Vec3();\r\n                clusters.push({\r\n                    range: range,\r\n                    bbox: new Box3(p0, p1),\r\n                });\r\n            }\r\n            const posAttr8bit = reader.loadUInt8Array(numVerts * 3);\r\n            for (let i = 0; i < numClusters; i++) {\r\n                const bboxMat = clusters[i]['bbox'].toMat4();\r\n                for (let j = clusters[i]['range'].x; j < clusters[i]['range'].y; j++) {\r\n                    const pos = new Vec3(posAttr8bit[j * 3 + 0] / 255.0, posAttr8bit[j * 3 + 1] / 255.0, posAttr8bit[j * 3 + 2] / 255.0);\r\n                    positions.setValue(j, bboxMat.transformVec3(pos));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Sets state of current geometry(Including line segments) using a binary reader object.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        super.loadBaseGeomBinary(reader);\r\n        // this.computeVertexNormals();\r\n        this.emit('geomDataChanged');\r\n    }\r\n}\r\nRegistry.register('Points', Points);\r\nexport { Points };\r\n//# sourceMappingURL=Points.js.map","/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { BaseGeom } from './BaseGeom';\r\nimport { Registry } from '../../Registry';\r\n/**\r\n *\r\n * Class representing lines primitive drawing type, connecting vertices using the specified indices.\r\n * i.e. We have 4 points(vertices) but we don't know how they connect to each other,\r\n * and that's why we need indices(Numbers indicating which vertex connects to which).\r\n * In this case if we say that `indices` is `[0,1,2,3]`, it would connect the first vertex to the second,\r\n * and the third to the fourth.\r\n *\r\n * ```\r\n * const lines = new Lines()\r\n * ```\r\n *\r\n * **Events**\r\n * * **geomDataChanged:** Triggered when the data value of the geometry is set(This includes reading binary)\r\n *\r\n * @extends BaseGeom\r\n */\r\nclass Lines extends BaseGeom {\r\n    /**\r\n     * Create lines.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.__indices = new Uint32Array();\r\n    }\r\n    /**\r\n     * The clear method.\r\n     */\r\n    clear() {\r\n        this.setNumSegments(0);\r\n        this.setNumVertices(0);\r\n        this.emit('geomDataTopologyChanged');\r\n    }\r\n    /**\r\n     * Returns the specified indices(Vertex connectors)\r\n     *\r\n     * @return - The indices index array.\r\n     */\r\n    getIndices() {\r\n        return this.__indices;\r\n    }\r\n    /**\r\n     * Returns the number of line segments.\r\n     *\r\n     * @return - Returns the number of segments.\r\n     */\r\n    getNumSegments() {\r\n        return this.__indices.length / 2;\r\n    }\r\n    /**\r\n     * Sets the number of line segments in the lines geometry.\r\n     * **Important:** It resets indices values.\r\n     *\r\n     * @param numOfSegments - The count value.\r\n     */\r\n    setNumSegments(numOfSegments) {\r\n        if (numOfSegments > this.getNumSegments()) {\r\n            const indices = new Uint32Array(numOfSegments * 2);\r\n            indices.set(this.__indices);\r\n            this.__indices = indices;\r\n        }\r\n        else {\r\n            this.__indices = this.__indices.slice(0, numOfSegments * 2);\r\n        }\r\n    }\r\n    /**\r\n     * Sets segment values in the specified index.\r\n     *\r\n     * @param index - The index value.\r\n     * @param p0 - The p0 value.\r\n     * @param p1 - The p1 value.\r\n     */\r\n    setSegmentVertexIndices(index, p0, p1) {\r\n        if (index >= this.__indices.length / 2)\r\n            throw new Error('Invalid line index:' + index + '. Num Segments:' + this.__indices.length / 2);\r\n        this.__indices[index * 2 + 0] = p0;\r\n        this.__indices[index * 2 + 1] = p1;\r\n    }\r\n    /**\r\n     * The getSegmentVertexIndex method.\r\n     *\r\n     * @param line - The line value.\r\n     * @param lineVertex - The lineVertex value.\r\n     * @return - The return value.\r\n     * @private\r\n     */\r\n    getSegmentVertexIndex(line, lineVertex) {\r\n        const numSegments = this.getNumSegments();\r\n        if (line < numSegments)\r\n            return this.__indices[line * 2 + lineVertex];\r\n        return -1;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Memory\r\n    /**\r\n     * Returns vertex attributes buffers and its count.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    genBuffers(opts) {\r\n        const buffers = super.genBuffers();\r\n        let indices;\r\n        if (buffers.numVertices < Math.pow(2, 8)) {\r\n            indices = new Uint8Array(this.__indices);\r\n        }\r\n        else if (buffers.numVertices < Math.pow(2, 16)) {\r\n            indices = new Uint16Array(this.__indices);\r\n        }\r\n        else {\r\n            indices = this.__indices;\r\n        }\r\n        ;\r\n        buffers.indices = indices;\r\n        return buffers;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Sets state of current geometry(Including line segments) using a binary reader object.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        super.loadBaseGeomBinary(reader);\r\n        this.setNumSegments(reader.loadUInt32());\r\n        const bytes = reader.loadUInt8();\r\n        if (bytes == 1)\r\n            this.__indices = reader.loadUInt8Array();\r\n        else if (bytes == 2)\r\n            this.__indices = reader.loadUInt16Array();\r\n        else if (bytes == 4)\r\n            this.__indices = reader.loadUInt32Array();\r\n        this.emit('geomDataChanged');\r\n    }\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        const j = super.toJSON(context);\r\n        if (!context || !context.skipTopology)\r\n            j.indices = Array.from(this.__indices);\r\n        return j;\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context) {\r\n        super.fromJSON(j, context);\r\n        if (j.indices)\r\n            this.__indices = Uint32Array.from(j.indices);\r\n    }\r\n}\r\nRegistry.register('Lines', Lines);\r\nexport { Lines };\r\n//# sourceMappingURL=Lines.js.map","/* eslint-disable prefer-rest-params */\r\n/* eslint-disable guard-for-in */\r\n/* eslint-disable no-unused-vars */\r\nimport { Vec3 } from '../../Math/Vec3';\r\nimport { BaseGeom } from './BaseGeom';\r\nimport { Registry } from '../../Registry';\r\nimport { Vec3Attribute } from './Vec3Attribute';\r\n/**\r\n * The Mesh class provides a flexible and fast polygon mesh representation. It supports polygons of arbitrary complexity,\r\n * from basic triangles and quads to pentagons more.\r\n * It supports storing per face attributes, and per edge attributes.\r\n * The Mesh class handles converting its internal representation of polygons into a simpler triangles representation for rendering.\r\n *\r\n * ```\r\n * const mesh = new Mesh()\r\n * ```\r\n *\r\n * **Events**\r\n * * **geomDataTopologyChanged:** Triggered when the topology of the mesh has been changed.\r\n * * **geomDataChanged:** Triggered when the vertices of the mesh have changed, but not necessarily the topology.\r\n *\r\n * @extends BaseGeom\r\n */\r\nclass Mesh extends BaseGeom {\r\n    /**\r\n     * Creates an instance of Mesh.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.edgeFaces = [];\r\n        this.faceEdges = [[]];\r\n        this.faceCounts = [];\r\n        this.__faceVertexIndices = new Uint32Array();\r\n        this.__logTopologyWarnings = false;\r\n        this.__edgeAttributes = new Map();\r\n        this.__faceAttributes = new Map();\r\n        this.numEdges = 0;\r\n        this.edgeVerts = [];\r\n        this.vertexEdges = [];\r\n        this.edgeAngles = new Float32Array();\r\n        this.edgeVecs = [];\r\n    }\r\n    /**\r\n     * The init method.\r\n     * @private\r\n     */\r\n    init() { }\r\n    /**\r\n     * The clear method.\r\n     */\r\n    clear() {\r\n        super.clear();\r\n        //this.init()\r\n        //this.setNumVertices(0)\r\n        // clear edge and face normals.\r\n        this.edgeVerts = [];\r\n        this.vertexEdges = [];\r\n        this.numEdges = 0;\r\n        this.edgeAngles = new Float32Array();\r\n        this.emit('geomDataTopologyChanged');\r\n    }\r\n    /**\r\n     * Adds a new vertex attribute to the geometry.\r\n     *\r\n     * @param name - The name of the vertex attribute.\r\n     * @param attr - The attribute to add to the geometry\r\n     */\r\n    addVertexAttribute(name, attr) {\r\n        super.addVertexAttribute(name, attr);\r\n        attr.setMesh(this);\r\n    }\r\n    /**\r\n     * The getFaceCounts method.\r\n     * @return - The return value.\r\n     */\r\n    getFaceCounts() {\r\n        return this.faceCounts;\r\n    }\r\n    /**\r\n     * The getNumFaces method.\r\n     * @return - The return value.\r\n     */\r\n    getNumFaces() {\r\n        return this.faceCounts.length == 0 ? 0 : this.faceCounts.reduce((numFaces, fc) => (numFaces += fc));\r\n    }\r\n    /**\r\n     * Sets the number of faces on the mesh using an array specifying the counts per polygon size.\r\n     * The first item in the array specifies the number of triangles, the second, the number of quads, the 3rd, the number of 5 sided polygons etc..\r\n     * e.g. to specify 2 triangles, and 7 quads, we would pass [2, 7]\r\n     * @param faceCounts - The faceCounts value.\r\n     */\r\n    setFaceCounts(faceCounts) {\r\n        // let numFaces = 0\r\n        let numFacesVertices = 0;\r\n        let numVertsPerFace = 3;\r\n        for (const fc of faceCounts) {\r\n            // numFaces += fc\r\n            numFacesVertices += fc * numVertsPerFace;\r\n            numVertsPerFace++;\r\n        }\r\n        const prevNumFaces = this.getNumFaces();\r\n        if (prevNumFaces == 0) {\r\n            this.__faceVertexIndices = new Uint32Array(numFacesVertices);\r\n        }\r\n        else {\r\n            const faceVertexIndices = new Uint32Array(numFacesVertices);\r\n            // Now we preserve the existing indices if they fit within the new faceVertexIndices array.\r\n            let startSrc = 0;\r\n            let startTgt = 0;\r\n            numFacesVertices = 0;\r\n            numVertsPerFace = 3;\r\n            faceCounts.forEach((fc, index) => {\r\n                const endSrc = startSrc + Math.min(fc, this.faceCounts[index]) * numVertsPerFace;\r\n                faceVertexIndices.set(this.__faceVertexIndices.slice(startSrc, endSrc), startTgt);\r\n                startSrc += this.faceCounts[index] * numVertsPerFace;\r\n                startTgt += fc * numVertsPerFace;\r\n                numVertsPerFace++;\r\n            });\r\n            this.__faceVertexIndices = faceVertexIndices;\r\n        }\r\n        this.faceCounts = faceCounts;\r\n    }\r\n    /**\r\n     * Returns the number of vertices indexed by this face\r\n     * @param faceIndex - The faceIndex value.\r\n     * @return - The return value.\r\n     */\r\n    getFaceVertexCount(faceIndex) {\r\n        let idx = 0;\r\n        let count = 0;\r\n        this.faceCounts.some((fc, index) => {\r\n            idx += fc;\r\n            if (idx > faceIndex) {\r\n                count = index + 3;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        return count;\r\n    }\r\n    /**\r\n     * Returns the offset of the face indices within the entire index array.\r\n     * @param faceIndex - The faceIndex value.\r\n     * @return - The return value.\r\n     */\r\n    getFaceVertexOffset(faceIndex) {\r\n        let idx = 0;\r\n        let offset = 0;\r\n        this.faceCounts.some((fc, index) => {\r\n            if (idx + fc > faceIndex) {\r\n                offset += (faceIndex - idx) * (index + 3);\r\n                return true;\r\n            }\r\n            idx += fc;\r\n            offset += fc * (index + 3);\r\n            return false;\r\n        });\r\n        return offset;\r\n    }\r\n    /**\r\n     * The setFaceVertexIndices method.\r\n     * @param faceIndex - The faceIndex value.\r\n     * @param vertexIndices - The array of vertex indices for this face value.\r\n     */\r\n    setFaceVertexIndices(faceIndex, vertexIndices) {\r\n        const faceVertexCount = this.getFaceVertexCount(faceIndex);\r\n        if (vertexIndices.length != faceVertexCount) {\r\n            throw new Error(`Invalid indices for face:${faceIndex} vertexIndices:${vertexIndices}. Expected ${faceVertexCount} indices`);\r\n        }\r\n        const offset = this.getFaceVertexOffset(faceIndex);\r\n        this.__faceVertexIndices.set(vertexIndices, offset);\r\n    }\r\n    /**\r\n     * Adds a new face to the mesh\r\n     * @param vertexIndices - The vertex indices of the face.\r\n     * @return - The index of the face in the mesh.\r\n     */\r\n    addFace(vertexIndices) {\r\n        const faceCounts = [...this.faceCounts];\r\n        if (faceCounts.length <= vertexIndices.length - 3) {\r\n            for (let i = faceCounts.length; i < vertexIndices.length - 3; i++)\r\n                faceCounts[i] = 0;\r\n            faceCounts[vertexIndices.length - 3] = 1;\r\n        }\r\n        else {\r\n            faceCounts[vertexIndices.length - 3]++;\r\n        }\r\n        this.setFaceCounts(faceCounts);\r\n        // Calculate the offset in the faceVertexIndices of this new face.\r\n        let faceIndex = 0;\r\n        let offset = 0;\r\n        this.faceCounts.some((fc, index) => {\r\n            if (index + 3 == vertexIndices.length) {\r\n                faceIndex += fc - 1;\r\n                offset += (fc - 1) * (index + 3);\r\n                return true;\r\n            }\r\n            faceIndex += fc;\r\n            offset += fc * (index + 3);\r\n            return false;\r\n        });\r\n        this.__faceVertexIndices.set(vertexIndices, offset);\r\n        return faceIndex;\r\n    }\r\n    /**\r\n     * Returns the vertex indices of the specified face.\r\n     * @param faceIndex - The index of the specified face\r\n     * @return - An array of indices into the vertex attributes\r\n     */\r\n    getFaceVertexIndices(faceIndex) {\r\n        const vertexIndices = [];\r\n        const offset = this.getFaceVertexOffset(faceIndex);\r\n        const count = this.getFaceVertexCount(faceIndex);\r\n        for (let i = 0; i < count; i++) {\r\n            vertexIndices.push(this.__faceVertexIndices[offset + i]);\r\n        }\r\n        return vertexIndices;\r\n    }\r\n    /**\r\n     * Returns a single vertex index for a given face and faceVertex.\r\n     * @param faceIndex - The faceIndex value.\r\n     * @param faceVertex - The face vertex is the index within the face. So the first vertex index is 0.\r\n     * @return - The vertex index\r\n     */\r\n    getFaceVertexIndex(faceIndex, faceVertex) {\r\n        const offset = this.getFaceVertexOffset(faceIndex);\r\n        return this.__faceVertexIndices[offset + faceVertex];\r\n    }\r\n    // ///////////////////////////\r\n    // Face Attributes\r\n    /**\r\n     * The addFaceAttribute method.\r\n     * @param name - The name of the face attribute to add.\r\n     * @param attr - The attr value\r\n     */\r\n    addFaceAttribute(name, attr) {\r\n        attr.setCount(this.getNumFaces());\r\n        this.__faceAttributes.set(name, attr);\r\n        return attr;\r\n    }\r\n    /**\r\n     * The hasFaceAttribute method.\r\n     * @param name - The name of the face attribute.\r\n     * @return - The return value.\r\n     */\r\n    hasFaceAttribute(name) {\r\n        return this.__faceAttributes.has(name);\r\n    }\r\n    /**\r\n     * The getFaceAttribute method.\r\n     * @param name - The name of the face attribute.\r\n     * @return - The return value.\r\n     */\r\n    getFaceAttribute(name) {\r\n        return this.__faceAttributes.get(name);\r\n    }\r\n    // /////////////////////////\r\n    // Edge Attributes\r\n    /**\r\n     * The addEdgeAttribute method.\r\n     * @param name - The name of the edge attribute to add.\r\n     * @param attr - The attr value\r\n     */\r\n    addEdgeAttribute(name, attr) {\r\n        attr.setCount(this.numEdges);\r\n        this.__edgeAttributes.set(name, attr);\r\n    }\r\n    /**\r\n     * The hasEdgeAttribute method.\r\n     * @param name - The name of the edge attribute.\r\n     * @return - The return value.\r\n     */\r\n    hasEdgeAttribute(name) {\r\n        return this.__edgeAttributes.has(name);\r\n    }\r\n    /**\r\n     * The getEdgeAttribute method.\r\n     * @param name - The name of the edge attribute.\r\n     * @return - The return value.\r\n     */\r\n    getEdgeAttribute(name) {\r\n        return this.__edgeAttributes.get(name);\r\n    }\r\n    // ///////////////////////////\r\n    /**\r\n     * The genTopologyInfo method.\r\n     */\r\n    genTopologyInfo() {\r\n        let connectedVertices = {}; // acceleration structure.\r\n        this.vertexEdges = []; // 2d array of vertex to edges.\r\n        // this.vertexFaces = []; // 2d array of vertex to faces.\r\n        this.edgeFaces = []; // flat array of 2 face indices per edge\r\n        this.edgeVerts = []; // flat array of 2 vert indices per edge\r\n        this.faceEdges = []; // the edges bordering each face.\r\n        this.numEdges = 0;\r\n        const positions = this.positions;\r\n        const getEdgeIndex = (v0, v1) => {\r\n            let tmp0 = v0;\r\n            let tmp1 = v1;\r\n            if (tmp1 < tmp0) {\r\n                const tmp = tmp0;\r\n                tmp0 = tmp1;\r\n                tmp1 = tmp;\r\n            }\r\n            const key = tmp0 + '>' + tmp1;\r\n            if (key in connectedVertices) {\r\n                // console.log(key + ':' + connectedVertices[key] + \" face:\" + ( v0 < v1 ? 0 : 1) );\r\n                return connectedVertices[key];\r\n            }\r\n            const p0 = positions.getValueRef(tmp0);\r\n            const p1 = positions.getValueRef(tmp1);\r\n            const edgeVec = p1.subtract(p0);\r\n            const edgeIndex = this.edgeFaces.length / 2;\r\n            const edgeData = {\r\n                edgeIndex: edgeIndex,\r\n                edgeVec: edgeVec,\r\n            };\r\n            connectedVertices[key] = edgeData;\r\n            this.edgeFaces.push(-1);\r\n            this.edgeFaces.push(-1);\r\n            this.edgeVerts.push(tmp0);\r\n            this.edgeVerts.push(tmp1);\r\n            // console.log(key + ':' + connectedVertices[key] + \" face:\" + ( v0 < v1 ? 0 : 1));\r\n            this.numEdges++;\r\n            return edgeData;\r\n        };\r\n        const addEdge = (v0, v1, faceIndex) => {\r\n            // console.log('addEdge:' + v0 + \" :\" + v1 + \" faceIndex:\" + faceIndex );\r\n            const edgeData = getEdgeIndex(v0, v1);\r\n            const edgeIndex = edgeData.edgeIndex;\r\n            if (v1 < v0) {\r\n                const edgeFaceIndex = edgeIndex * 2 + 0;\r\n                if (this.__logTopologyWarnings && this.edgeFaces[edgeFaceIndex] != -1)\r\n                    console.warn('Edge poly 0 already set. Mesh is non-manifold.');\r\n                this.edgeFaces[edgeFaceIndex] = faceIndex;\r\n            }\r\n            else {\r\n                const edgeFaceIndex = edgeIndex * 2 + 1;\r\n                if (this.__logTopologyWarnings && this.edgeFaces[edgeFaceIndex] != -1)\r\n                    console.warn('Edge poly 1 already set. Mesh is non-manifold.');\r\n                this.edgeFaces[edgeFaceIndex] = faceIndex;\r\n            }\r\n            if (!(faceIndex in this.faceEdges))\r\n                this.faceEdges[faceIndex] = [];\r\n            this.faceEdges[faceIndex].push(edgeIndex);\r\n            // Push the edge index onto both vertex edge lists.\r\n            // We use Sets to avoid adding the same edge 2x to the same vertex.\r\n            if (this.vertexEdges[v0] == undefined) {\r\n                this.vertexEdges[v0] = new Set();\r\n            }\r\n            if (this.vertexEdges[v1] == undefined) {\r\n                this.vertexEdges[v1] = new Set();\r\n            }\r\n            this.vertexEdges[v0].add(edgeIndex);\r\n            this.vertexEdges[v1].add(edgeIndex);\r\n            // if (this.vertexFaces[v0] == undefined) {\r\n            //     this.vertexFaces[v0] = [];\r\n            // }\r\n            // this.vertexFaces[v0].push(faceIndex);\r\n        };\r\n        const numFaces = this.getNumFaces();\r\n        for (let faceIndex = 0; faceIndex < numFaces; faceIndex++) {\r\n            const faceVerts = this.getFaceVertexIndices(faceIndex);\r\n            for (let j = 0; j < faceVerts.length; j++) {\r\n                const v0 = faceVerts[j];\r\n                const v1 = faceVerts[(j + 1) % faceVerts.length];\r\n                addEdge(v0, v1, faceIndex);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Computes a normal value per face by averaging the triangle normals of the face.\r\n     */\r\n    computeFaceNormals() {\r\n        const positions = this.positions;\r\n        const faceNormals = new Vec3Attribute();\r\n        this.addFaceAttribute('normals', faceNormals);\r\n        const numFaces = this.getNumFaces();\r\n        for (let faceIndex = 0; faceIndex < numFaces; faceIndex++) {\r\n            const faceVerts = this.getFaceVertexIndices(faceIndex);\r\n            const p0 = positions.getValueRef(faceVerts[0]);\r\n            const p1 = positions.getValueRef(faceVerts[1]);\r\n            let prev = p1;\r\n            const faceNormal = new Vec3();\r\n            for (let j = 2; j < faceVerts.length; j++) {\r\n                const pn = positions.getValueRef(faceVerts[j]);\r\n                const v0 = prev.subtract(p0);\r\n                const v1 = pn.subtract(p0);\r\n                faceNormal.addInPlace(v0.cross(v1).normalize());\r\n                prev = pn;\r\n            }\r\n            if (faceNormal.lengthSquared() < Number.EPSILON) {\r\n                // Note: we are getting many faces with no surface area.\r\n                // This is simply an authoring issue.\r\n                // console.warn(\"Invalid Mesh topology\");\r\n            }\r\n            else {\r\n                faceNormals.setValue(faceIndex, faceNormal.normalize());\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calculates the angles at each edge between the adjoining faces\r\n     */\r\n    calculateEdgeAngles() {\r\n        if (this.vertexEdges.length == 0)\r\n            this.genTopologyInfo();\r\n        this.computeFaceNormals();\r\n        const positions = this.positions;\r\n        const faceNormals = this.getFaceAttribute('normals');\r\n        this.edgeVecs = [];\r\n        this.edgeAngles = new Float32Array(this.numEdges);\r\n        for (let i = 0; i < this.edgeFaces.length; i += 2) {\r\n            const v0 = this.edgeVerts[i];\r\n            const v1 = this.edgeVerts[i + 1];\r\n            const edgeVec = positions.getValueRef(v1).subtract(positions.getValueRef(v0));\r\n            edgeVec.normalizeInPlace();\r\n            this.edgeVecs.push(edgeVec);\r\n            const p0 = this.edgeFaces[i];\r\n            const p1 = this.edgeFaces[i + 1];\r\n            if (p0 == -1 || p1 == -1) {\r\n                // Flag the edge as a border edge....\r\n                this.edgeAngles[i / 2] = Math.PI * 2.0;\r\n                continue;\r\n            }\r\n            const n0 = faceNormals.getValueRef(p0);\r\n            const n1 = faceNormals.getValueRef(p1);\r\n            this.edgeAngles[i / 2] = n0.angleTo(n1);\r\n        }\r\n    }\r\n    /**\r\n     * Compute vertex normals.\r\n     * @param hardAngle - The hardAngle value in radians.\r\n     * @return - The return value.\r\n     */\r\n    computeVertexNormals(hardAngle = 1.0 /* radians */) {\r\n        this.calculateEdgeAngles();\r\n        const faceNormals = this.getFaceAttribute('normals');\r\n        const normalsAttr = new Vec3Attribute();\r\n        this.addVertexAttribute('normals', normalsAttr);\r\n        // these methods are faster versions than using the methods\r\n        // provided on the attributes. We cache values and use hard coded constants.\r\n        // const faceNormalsBuffer = faceNormals.data.buffer\r\n        const getFaceNormal = (index) => {\r\n            return faceNormals.getValueRef(index);\r\n        };\r\n        const setVertexNormal = (index, value) => {\r\n            normalsAttr.setValue(index, value);\r\n        };\r\n        const getConnectedEdgeVecs = (faceIndex, vertexIndex) => {\r\n            let e0;\r\n            let e1;\r\n            const faceEdges = this.faceEdges[faceIndex];\r\n            for (const e of faceEdges) {\r\n                if (this.edgeVerts[e * 2] == vertexIndex) {\r\n                    if (!e0)\r\n                        e0 = this.edgeVecs[e];\r\n                    else\r\n                        e1 = this.edgeVecs[e];\r\n                }\r\n                else if (this.edgeVerts[e * 2 + 1] == vertexIndex) {\r\n                    if (!e0)\r\n                        e0 = this.edgeVecs[e];\r\n                    else\r\n                        e1 = this.edgeVecs[e];\r\n                }\r\n            }\r\n            return [e0, e1];\r\n        };\r\n        for (let i = 0; i < this.vertexEdges.length; i++) {\r\n            // If this face indexing doesn't start at 0, then the vertexEdges don't either.\r\n            if (this.vertexEdges[i] == undefined)\r\n                continue;\r\n            const edges = this.vertexEdges[i];\r\n            // Groups of faces having a smooth normal at the current vertex.\r\n            const faceGroups = [];\r\n            const addFaceToGroup = (face) => {\r\n                let inGroup = false;\r\n                for (const faceGroup of faceGroups) {\r\n                    inGroup = faceGroup.includes(face);\r\n                    if (inGroup)\r\n                        break;\r\n                }\r\n                if (!inGroup)\r\n                    faceGroups.push([face]);\r\n            };\r\n            for (const e of edges) {\r\n                const f0 = this.edgeFaces[e * 2];\r\n                const f1 = this.edgeFaces[e * 2 + 1];\r\n                if (f0 != -1 && f1 != -1 && this.edgeAngles[e] < hardAngle) {\r\n                    // if (f0 != -1 && f1 == -1 && this.edgeAngles[e] < hardAngle) {\r\n                    let f0groupIndex = -1;\r\n                    let f1groupIndex = -1;\r\n                    for (let groupIndex = 0; groupIndex < faceGroups.length; groupIndex++) {\r\n                        if (f0groupIndex == -1 && faceGroups[groupIndex].includes(f0))\r\n                            f0groupIndex = groupIndex;\r\n                        if (f1groupIndex == -1 && faceGroups[groupIndex].includes(f1))\r\n                            f1groupIndex = groupIndex;\r\n                    }\r\n                    if (f0groupIndex == -1 && f1groupIndex == -1) {\r\n                        faceGroups.push([f0, f1]);\r\n                    }\r\n                    else if (f0groupIndex != -1 && f1groupIndex != -1) {\r\n                        if (f0groupIndex != f1groupIndex) {\r\n                            // Merge the 2 groups that the smooth edge joins.\r\n                            faceGroups[f0groupIndex] = faceGroups[f0groupIndex].concat(faceGroups[f1groupIndex]);\r\n                            faceGroups.splice(f1groupIndex, 1);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (f0groupIndex == -1) {\r\n                            faceGroups[f1groupIndex].push(f0);\r\n                        }\r\n                        if (f1groupIndex == -1) {\r\n                            faceGroups[f0groupIndex].push(f1);\r\n                        }\r\n                    }\r\n                    continue;\r\n                }\r\n                // This is a hard edge or a border edge... Add faces separately group.\r\n                if (f0 != -1)\r\n                    addFaceToGroup(f0);\r\n                if (f1 != -1)\r\n                    addFaceToGroup(f1);\r\n            }\r\n            // Sort the groups to have the biggest group first.\r\n            faceGroups.sort((a, b) => (a.length < b.length ? 1 : a.length > b.length ? -1 : 0));\r\n            let firstVertex = true;\r\n            for (const faceGroup of faceGroups) {\r\n                const normal = new Vec3();\r\n                for (const faceIndex of faceGroup) {\r\n                    const faceEdges = getConnectedEdgeVecs(faceIndex, i);\r\n                    let weight;\r\n                    if (faceEdges[0] && faceEdges[1]) {\r\n                        weight = faceEdges[0].angleTo(faceEdges[1]);\r\n                        normal.addInPlace(getFaceNormal(faceIndex).scale(weight));\r\n                    }\r\n                    else {\r\n                        console.warn('variable weight is undefined because faceEdges[0] or faceEdges[1] is undefined');\r\n                    }\r\n                    // if (i == 1)\r\n                    //     console.log(\"FaceNormal:\" + faceIndex + \":\" + getFaceNormal(faceIndex).toString());\r\n                }\r\n                normal.normalizeInPlace();\r\n                if (firstVertex) {\r\n                    setVertexNormal(i, normal);\r\n                    firstVertex = false;\r\n                }\r\n                else {\r\n                    normalsAttr.setSplitVertexValues(i, faceGroup, normal.asArray());\r\n                }\r\n            }\r\n        }\r\n        return normalsAttr;\r\n    }\r\n    /**\r\n     * The computeHardEdgesIndices method.\r\n     * @param hardAngle - The hardAngle value in radians.\r\n     * @return - The return value.\r\n     */\r\n    computeHardEdgesIndices(hardAngle = 1.0) {\r\n        if (this.edgeVerts.length == 0)\r\n            this.calculateEdgeAngles();\r\n        const hardEdges = [];\r\n        const addEdge = (index) => {\r\n            hardEdges.push(this.edgeVerts[index]);\r\n            hardEdges.push(this.edgeVerts[index + 1]);\r\n        };\r\n        for (let i = 0; i < this.edgeAngles.length; i++) {\r\n            if (this.edgeAngles[i] > hardAngle) {\r\n                addEdge(i * 2);\r\n            }\r\n        }\r\n        return Uint32Array.from(hardEdges);\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Rendering\r\n    /**\r\n     * The genBuffers method.\r\n     * @param opts - The opts value.\r\n     * @return - The return value.\r\n     */\r\n    genBuffers(opts) {\r\n        // Compute the normals on demand.\r\n        // if (!('normals' in this.__vertexAttributes)) {\r\n        //     // this.__geom.computeVertexNormals();\r\n        //     this.addVertexAttribute(\"normals\", Vec3, 0.0);\r\n        // }\r\n        const splitIndices = {};\r\n        let splitCount = 0;\r\n        for (const [, attr] of this.__vertexAttributes) {\r\n            const attrSplits = attr.getSplits();\r\n            for (const polygon in attrSplits) {\r\n                if (!(polygon in splitIndices))\r\n                    splitIndices[polygon] = {};\r\n                const vertices = attrSplits[polygon];\r\n                for (const v in vertices) {\r\n                    const vertex = parseInt(v);\r\n                    if (!(vertex in splitIndices[polygon])) {\r\n                        splitIndices[polygon][vertex] = splitCount;\r\n                        splitCount++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const positions = this.positions;\r\n        const numUnSplitVertices = positions.getCount();\r\n        const totalNumVertices = numUnSplitVertices + splitCount;\r\n        let indices;\r\n        if (!opts || opts.includeIndices != false) {\r\n            indices = this.generateTriangulatedIndices(totalNumVertices, numUnSplitVertices, splitIndices);\r\n        }\r\n        // let maxIndex;\r\n        // if (debugAttrValues)\r\n        //     maxIndex = Math.max(...indices);\r\n        const attrBuffers = {};\r\n        for (const [attrName, attr] of this.__vertexAttributes) {\r\n            let values;\r\n            if (splitCount == 0)\r\n                values = attr.asArray();\r\n            else\r\n                values = attr.generateSplitValues(splitIndices, splitCount);\r\n            const dimension = attr.stride;\r\n            const count = values.length / dimension;\r\n            // if (debugAttrValues) {\r\n            //     if (count <= maxIndex)\r\n            //         console.warn(\"Invalid indexing. Attr value is insufficient for indexing:\" + attrName + \". Max Index:\" + maxIndex + \" Attr Size:\" + count);\r\n            // }\r\n            attrBuffers[attrName] = {\r\n                values: values,\r\n                count: count,\r\n                dimension: dimension,\r\n                normalized: attrName == 'normals',\r\n                dataType: attr.getDataTypeName(),\r\n            };\r\n        }\r\n        const result = {\r\n            numVertices: this.numVertices(),\r\n            numRenderVerts: totalNumVertices,\r\n            indices,\r\n            attrBuffers,\r\n        };\r\n        /* Disabled during TS migration.\r\n        if (opts && opts.includeVertexNeighbors) {\r\n          if (this.vertexEdges == undefined) this.genTopologyInfo()\r\n    \r\n          let count = 0\r\n          for (let i = 0; i < this.vertexEdges.length; i++) {\r\n            // If this face indexing doesn't start at 0, then the vertexEdges don't either.\r\n            if (this.vertexEdges[i]) count += this.vertexEdges[i].size\r\n          }\r\n          // The array will be structured as a start+offset for each vertex, followed\r\n          // by a 2d array of neighbor indices.\r\n          const vertexNeighbors = new Uint32Array(this.vertexEdges.length * 2 + count)\r\n          const sortFanEdges = (fanEdges: any) => {\r\n            for (let i = 0; i < fanEdges.length; i++) {\r\n              const feA = fanEdges[i]\r\n              for (let j = 0; j < i; j++) {\r\n                const feB = fanEdges[j]\r\n                if (feA[0] != -1 && feA[0] == feB[1]) {\r\n                  //  move feA after feB;\r\n                  if (i != j + 1) {\r\n                    fanEdges.splice(i, 1)\r\n                    fanEdges.splice(j + 1, 0, feA)\r\n                  }\r\n                  break\r\n                }\r\n                if (feA[1] != -1 && feA[1] == feB[0]) {\r\n                  //  move feA before feB;\r\n                  fanEdges.splice(i, 1)\r\n                  fanEdges.splice(j, 0, feA)\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n          const checkFanEdges = (fanEdges: any) => {\r\n            // now check that the faces all build a fan. Maybe starting and ending with -1\r\n            if (fanEdges[0][0] == -1 || fanEdges[fanEdges.length - 1][1] == -1) {\r\n              if (fanEdges[0][0] != -1 || fanEdges[fanEdges.length - 1][1] != -1) {\r\n                throw new Error('If fan starts with -1, it must also end with -1')\r\n              }\r\n            }\r\n            for (let i = 0; i < fanEdges.length; i++) {\r\n              const fe = fanEdges[i]\r\n              if (fe[0] == -1 || fe[1] == -1) {\r\n                if (i != 0 && i != fanEdges.length - 1) {\r\n                  throw new Error('-1 only allowed at the beginning and end of a fan.')\r\n                }\r\n              }\r\n              if (fe[0] != -1) {\r\n                let prev = i - 1\r\n                if (prev < 0) prev += fanEdges.length\r\n                if (fe[0] != fanEdges[prev][1]) {\r\n                  throw new Error('Faces are not sequential')\r\n                }\r\n              }\r\n              if (fe[1] != -1) {\r\n                const next = (i + 1) % fanEdges.length\r\n                if (fe[1] != fanEdges[next][0]) {\r\n                  throw new Error('Faces are not sequential')\r\n                }\r\n              }\r\n            }\r\n          }\r\n    \r\n          // Populate the start and offset values.\r\n          let offset = this.vertexEdges.length * 2\r\n          for (let i = 0; i < this.vertexEdges.length; i++) {\r\n            if (this.vertexEdges[i] == undefined) continue\r\n            const edges = this.vertexEdges[i]\r\n    \r\n            // Build a sorted list of faces based on a fan around\r\n            // the vertex.\r\n            const fanEdges = []\r\n            for (const e of edges) {\r\n              const v0 = this.edgeVerts[e * 2]\r\n              const v1 = this.edgeVerts[e * 2 + 1]\r\n              let f0 = this.edgeFaces[e * 2]\r\n              let f1 = this.edgeFaces[e * 2 + 1]\r\n              let neigVert\r\n              if (v0 == i) {\r\n                neigVert = v1\r\n              } else if (v1 == i) {\r\n                neigVert = v0\r\n                // swap the faces\r\n                const tmp = f0\r\n                f0 = f1\r\n                f1 = tmp\r\n              } else {\r\n                throw new Error('Invalid topology')\r\n              }\r\n              fanEdges.push([f0, f1, neigVert])\r\n            }\r\n            sortFanEdges(fanEdges)\r\n            checkFanEdges(fanEdges)\r\n            const closed = fanEdges[0][0] != -1 || fanEdges[fanEdges.length - 1][1] != -1\r\n            let flags = 0\r\n            if (closed) flags += 1\r\n            vertexNeighbors[i * 2] = offset\r\n            vertexNeighbors[i * 2 + 1] = edges.size + (flags << 8)\r\n            for (const fe of fanEdges) {\r\n              vertexNeighbors[offset] = fe[2]\r\n              offset++\r\n            }\r\n          }\r\n          ;(result as any).vertexNeighbors = vertexNeighbors\r\n        }\r\n        */\r\n        return result;\r\n    }\r\n    /**\r\n     * Compute the number of triangles. For higher degree polygons, they are divided into multiple triangles for rendering.\r\n     * @return - Returns the number of triangles.\r\n     */\r\n    computeNumTriangles() {\r\n        let numVertsPerFace = 3;\r\n        let trisCount = 0;\r\n        for (const fc of this.faceCounts) {\r\n            trisCount += fc * (numVertsPerFace - 2);\r\n            numVertsPerFace++;\r\n        }\r\n        return trisCount;\r\n    }\r\n    /**\r\n     * To prepare data for rendering, the indices for the polygons is used to compute a new index buffer based on\r\n     * only triangles. This is used during rendering and the resulting indices uploaded ot the GPU  by GLMesh class.\r\n     *\r\n     * @param totalNumVertices - The total number of vertices.\r\n     * @param numUnSplitVertices - The total number of un-split vertices.\r\n     * @param splitIndices - The splitIndices value.\r\n     * @return - Returns a typed array containing the triangulated indices.\r\n     */\r\n    generateTriangulatedIndices(totalNumVertices, numUnSplitVertices, splitIndices) {\r\n        const trisCount = this.computeNumTriangles();\r\n        let triangulatedIndices;\r\n        if (totalNumVertices < Math.pow(2, 8))\r\n            triangulatedIndices = new Uint8Array(trisCount * 3);\r\n        else if (totalNumVertices < Math.pow(2, 16))\r\n            triangulatedIndices = new Uint16Array(trisCount * 3);\r\n        else\r\n            triangulatedIndices = new Uint32Array(trisCount * 3);\r\n        let triangleVertex = 0;\r\n        const addTriangleVertexIndex = function (vertex, faceIndex) {\r\n            if (vertex in splitIndices && faceIndex in splitIndices[vertex])\r\n                vertex = numUnSplitVertices + splitIndices[vertex][faceIndex];\r\n            triangulatedIndices[triangleVertex] = vertex;\r\n            triangleVertex++;\r\n        };\r\n        const numFaces = this.getNumFaces();\r\n        for (let faceIndex = 0; faceIndex < numFaces; faceIndex++) {\r\n            const faceVerts = this.getFaceVertexIndices(faceIndex);\r\n            for (let j = 0; j < faceVerts.length; j++) {\r\n                if (j >= 3) {\r\n                    // For each additional triangle, we have to add 2 indices.\r\n                    addTriangleVertexIndex(faceVerts[0], faceIndex);\r\n                    addTriangleVertexIndex(faceVerts[j - 1], faceIndex);\r\n                }\r\n                addTriangleVertexIndex(faceVerts[j], faceIndex);\r\n            }\r\n        }\r\n        return triangulatedIndices;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Restores mesh properties from a binary reader.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        super.loadBaseGeomBinary(reader);\r\n        this.setFaceCounts(Array.from(reader.loadUInt32Array()));\r\n        const numFaces = this.getNumFaces();\r\n        // Note: we can remove this. We can infer this from the above faceCounts array.\r\n        const faceVertexCounts = reader.loadUInt8Array(numFaces);\r\n        const offsetRange = reader.loadSInt32Vec2();\r\n        const bytes = reader.loadUInt8();\r\n        let faceVertexIndexDeltas;\r\n        if (bytes == 1)\r\n            faceVertexIndexDeltas = reader.loadUInt8Array();\r\n        else if (bytes == 2)\r\n            faceVertexIndexDeltas = reader.loadUInt16Array();\r\n        else if (bytes == 4)\r\n            faceVertexIndexDeltas = reader.loadUInt32Array();\r\n        else {\r\n            throw Error('faceVertexIndexDeltas undefined');\r\n        }\r\n        // ///////////////////////////////////////////////////\r\n        // Note: The Mesh compression system needs a thorough review.\r\n        // The C++ classes are not storing face indices in a sorted manner.\r\n        // So quads precede triangles in the indexing, which isn't supposed to happen.\r\n        // We should force the C++ code to store quads and triangles in order.\r\n        // e.g. implement the 'addFace' method in C++ so it automatically does this.\r\n        let numFaceVerts = 3;\r\n        let offset = 0;\r\n        const faceOffsetsByCount = this.faceCounts.map((fc, index) => {\r\n            const result = offset;\r\n            offset += fc * numFaceVerts;\r\n            numFaceVerts++;\r\n            return result;\r\n        });\r\n        let srcOffset = 0;\r\n        let prevCount = 0;\r\n        const faceOffsets = [];\r\n        for (let faceIndex = 0; faceIndex < numFaces; faceIndex++) {\r\n            const fc = faceVertexCounts[faceIndex];\r\n            const offset = faceOffsetsByCount[fc];\r\n            const count = fc + 3;\r\n            faceOffsets[faceIndex] = offset;\r\n            for (let j = 0; j < count; j++) {\r\n                const srcFaceVertex = srcOffset + j;\r\n                const faceVertex = offset + j;\r\n                const delta = faceVertexIndexDeltas[srcFaceVertex] + offsetRange.x;\r\n                if (faceIndex == 0)\r\n                    this.__faceVertexIndices[faceVertex] = delta;\r\n                else {\r\n                    let prevFaceVertex = faceOffsets[faceIndex - 1];\r\n                    prevFaceVertex += j < prevCount ? j : prevCount - 1;\r\n                    this.__faceVertexIndices[faceVertex] = this.__faceVertexIndices[prevFaceVertex] + delta;\r\n                }\r\n            }\r\n            srcOffset += count;\r\n            faceOffsetsByCount[fc] += count;\r\n            prevCount = count;\r\n        }\r\n        if (!this.hasVertexAttribute('normals')) {\r\n            this.computeVertexNormals();\r\n        }\r\n        // this.computeVertexNormals();\r\n        this.emit('geomDataChanged');\r\n    }\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        const j = super.toJSON(context);\r\n        if (!context || !context.skipTopology) {\r\n            ;\r\n            j.faceCounts = Array.from(this.faceCounts);\r\n            j.faceVertexIndices = Array.from(this.__faceVertexIndices);\r\n        }\r\n        return j;\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * e.g. to load data into the mesh class, provide a json structure similar to the following.\r\n     * Note: faceCounts is an array of count values, starting with the number of triangles, then the number of quads. See #setFaceCounts\r\n     * The faceVertexIndices array should also be sorted to contain all the triangles first, followed by the quads, and then the pentagons etc..\r\n     * ```json\r\n     * // This code will define a mesh made up of 2 triangles and then a quad.\r\n     * const mesh = new Mesh()\r\n     * mesh.fromJSON({\r\n     *   faceCounts:[2, 1],\r\n     *   faceVertexIndices: [0, 1, 2, 0, 2, 3, 3, 2, 4, 5],\r\n     *   numVertices: 6,\r\n     *   vertexAttributes: {\r\n     *     positions: {\r\n     *       dataType: 'Vec3'\r\n     *       defaultScalarValue: 0.0,\r\n     *       data: [0,0,0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 2, 1, 0, 2, 0, 0]\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context) {\r\n        super.fromJSON(j, context);\r\n        if (j.faceCounts)\r\n            this.faceCounts = j.faceCounts;\r\n        if (j.faceVertexIndices)\r\n            this.__faceVertexIndices = Uint32Array.from(j.faceVertexIndices);\r\n    }\r\n}\r\nRegistry.register('Mesh', Mesh);\r\nexport { Mesh };\r\n//# sourceMappingURL=Mesh.js.map","import { Box3 } from '../../Math/index';\r\nimport { EventEmitter } from '../../Utilities/EventEmitter';\r\n/** ProxyGeometries are pupulated from data unpacked using a webworker while loading zcad files.\r\n * These geometries represent readonly geometries with very basic topologies.\r\n * @extends EventEmitter\r\n * @private\r\n */\r\nclass BaseProxy extends EventEmitter {\r\n    /**\r\n     * Create a base proxy.\r\n     * @param data - The data value.\r\n     */\r\n    constructor(data) {\r\n        super();\r\n        this.name = data.name;\r\n        this.__buffers = data.geomBuffers;\r\n        if (this.__buffers.attrBuffers) {\r\n            // eslint-disable-next-line guard-for-in\r\n            // for (const attrName in this.__buffers.attrBuffers) {\r\n            //   const attrData = this.__buffers.attrBuffers[attrName]\r\n            //   const dataType = Registry.getBlueprint(attrData.dataType)\r\n            //   attrData.dataType = dataType\r\n            // }\r\n        }\r\n        this.boundingBox = new Box3();\r\n        this.boundingBox.p0.__data = data.bbox.p0.__data;\r\n        this.boundingBox.p1.__data = data.bbox.p1.__data;\r\n        this.__metaData = new Map();\r\n    }\r\n    /**\r\n     * Returns the number of vertex attributes.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getNumVertices() {\r\n        return this.__buffers.numVertices;\r\n    }\r\n    /**\r\n     * Returns the bounding box for geometry.\r\n     * @return - The return value.\r\n     */\r\n    getBoundingBox() {\r\n        return this.boundingBox;\r\n    }\r\n    /**\r\n     * The genBuffers method.\r\n     * @return - The return value.\r\n     */\r\n    genBuffers() {\r\n        return this.__buffers;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Metadata\r\n    /**\r\n     * The getMetadata method.\r\n     * @param key - The key value.\r\n     * @return - The return value.\r\n     */\r\n    getMetadata(key) {\r\n        return this.__metaData.get(key);\r\n    }\r\n    /**\r\n     * The hasMetadata method.\r\n     * @param key - The key value.\r\n     * @return - The return value.\r\n     */\r\n    hasMetadata(key) {\r\n        return this.__metaData.has(key);\r\n    }\r\n    /**\r\n     * The setMetadata method.\r\n     * @param key - The key value.\r\n     * @param metaData - The metaData value.\r\n     */\r\n    setMetadata(key, metaData) {\r\n        this.__metaData.set(key, metaData);\r\n    }\r\n    /**\r\n     * Removes metadata for a given key.\r\n     *\r\n     * @param key - The key value.\r\n     */\r\n    deleteMetadata(key) {\r\n        this.__metaData.delete(key);\r\n    }\r\n}\r\n/** Class representing a points proxy.\r\n * @extends BaseProxy\r\n * @private\r\n */\r\nclass PointsProxy extends BaseProxy {\r\n    /**\r\n     * Create a points proxy.\r\n     * @param data - The data value.\r\n     */\r\n    constructor(data) {\r\n        super(data);\r\n    }\r\n}\r\n/** Class representing a lines proxy.\r\n * @extends BaseProxy\r\n * @private\r\n */\r\nclass LinesProxy extends BaseProxy {\r\n    /**\r\n     * Create a lines proxy.\r\n     * @param data - The data value.\r\n     */\r\n    constructor(data) {\r\n        super(data);\r\n    }\r\n    /**\r\n     * Returns the number line segments in this lines proxy geometry\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getNumLineSegments() {\r\n        return this.__buffers.indices.length / 2;\r\n    }\r\n}\r\n/** Class representing a mesh proxy.\r\n * @extends BaseProxy\r\n * @private\r\n */\r\nclass MeshProxy extends BaseProxy {\r\n    /**\r\n     * Create a mesh proxy.\r\n     * @param data - The data value.\r\n     */\r\n    constructor(data) {\r\n        super(data);\r\n    }\r\n    /**\r\n     * Returns the number of triangles in this mesh proxy geometry.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getNumTriangles() {\r\n        return this.__buffers.indices.length / 3;\r\n    }\r\n}\r\nexport { BaseProxy, PointsProxy, LinesProxy, MeshProxy };\r\n//# sourceMappingURL=GeomProxies.js.map","import { Points } from '../Points';\r\n/**\r\n * Base Class for procedural points generated by mathematical functions.\r\n *\r\n * @extends {Points}\r\n */\r\nclass ProceduralPoints extends Points {\r\n    /**\r\n     * Creates an instance of ProceduralPoints.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.dirtyTopology = true;\r\n        this.dirtyVertices = true;\r\n        // Parameters that specify topology settings.\r\n        // Add parameters to this list to ensure the topology is recomputed.\r\n        // All other param changes will only trigger a resize\r\n        this.topologyParams = [];\r\n    }\r\n    /**\r\n     * This method can be overridden in derived classes\r\n     * to perform general updates (see GLPass or BaseItem).\r\n     * @param event - The event object emitted by the parameter.\r\n     * @private\r\n     */\r\n    parameterValueChanged(event) {\r\n        this.setBoundingBoxDirty();\r\n        if (this.topologyParams.includes(event.param.getName())) {\r\n            this.dirtyTopology = true;\r\n            this.emit('geomDataTopologyChanged');\r\n        }\r\n        else {\r\n            this.dirtyVertices = true;\r\n            this.setBoundingBoxDirty();\r\n            // Let the renderer know that the geometry has changed and must be re-uploaded to the GPU.\r\n            this.emit('geomDataChanged');\r\n        }\r\n        super.parameterValueChanged(event);\r\n    }\r\n    /**\r\n     * If the Procedural geometry is out of date, for example if a parameter has been changed,\r\n     * this method explicitly forces the geometry to be recomputed.\r\n     */\r\n    update() {\r\n        if (this.dirtyTopology) {\r\n            this.rebuild();\r\n            this.dirtyTopology = false;\r\n            this.dirtyVertices = false;\r\n            this.rebuild();\r\n        }\r\n        else if (this.dirtyVertices) {\r\n            this.dirtyVertices = false;\r\n            this.resize();\r\n            this.dirtyVertices = false;\r\n        }\r\n    }\r\n    /**\r\n     * Returns the bounding box for geometry.\r\n     * @return - The return value.\r\n     */\r\n    getBoundingBox() {\r\n        this.update();\r\n        return super.getBoundingBox();\r\n    }\r\n    /**\r\n     * Returns the number of vertex attributes.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getNumVertices() {\r\n        this.update();\r\n        return super.getNumVertices();\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Rendering\r\n    /**\r\n     * The genBuffers method.\r\n     * @param opts - The opts value.\r\n     * @return - The return value.\r\n     */\r\n    genBuffers(opts) {\r\n        this.update();\r\n        return super.genBuffers(opts);\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        if (!context)\r\n            context = {};\r\n        context.skipTopology = true;\r\n        context.skipAttributes = ['positions', 'normals', 'texCoords'];\r\n        const j = super.toJSON(context);\r\n        context.skipTopology = false;\r\n        context.skipAttributes = [];\r\n        return j;\r\n    }\r\n}\r\nexport { ProceduralPoints };\r\n//# sourceMappingURL=ProceduralPoints.js.map","import { Lines } from '../Lines';\r\n/**\r\n * Base Class for procedural lines generated by mathematical functions.\r\n *\r\n * @extends {Lines}\r\n */\r\nclass ProceduralLines extends Lines {\r\n    /**\r\n     * Creates an instance of ProceduralLines.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.dirtyTopology = true;\r\n        this.dirtyVertices = true;\r\n        // Parameters that specify topology settings.\r\n        // Add parameters to this list to ensure the topology is recomputed.\r\n        // All other param changes will only trigger a resize\r\n        this.topologyParams = [];\r\n    }\r\n    /**\r\n     * This method can be overridden in derived classes\r\n     * to perform general updates (see GLPass or BaseItem).\r\n     * @param event - The event object emitted by the parameter.\r\n     * @private\r\n     */\r\n    parameterValueChanged(event) {\r\n        this.setBoundingBoxDirty();\r\n        if (this.topologyParams.includes(event.param.getName())) {\r\n            this.dirtyTopology = true;\r\n            this.emit('geomDataTopologyChanged');\r\n        }\r\n        else {\r\n            this.dirtyVertices = true;\r\n            this.setBoundingBoxDirty();\r\n            // Let the renderer know that the geometry has changed and must be re-uploaded to the GPU.\r\n            this.emit('geomDataChanged');\r\n        }\r\n        super.parameterValueChanged(event);\r\n    }\r\n    /**\r\n     * If the Procedural geometry is out of date, for example if a parameter has been changed,\r\n     * this method explicitly forces the geometry to be recomputed.\r\n     */\r\n    update() {\r\n        if (this.dirtyTopology) {\r\n            this.rebuild();\r\n            this.dirtyTopology = false;\r\n            this.dirtyVertices = false;\r\n            this.rebuild();\r\n        }\r\n        else if (this.dirtyVertices) {\r\n            this.resize();\r\n            this.dirtyVertices = false;\r\n            this.resize();\r\n        }\r\n    }\r\n    /**\r\n     * Returns the bounding box for geometry.\r\n     * @return - The return value.\r\n     */\r\n    getBoundingBox() {\r\n        this.update();\r\n        return super.getBoundingBox();\r\n    }\r\n    /**\r\n     * Returns the number of vertex attributes.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getNumVertices() {\r\n        this.update();\r\n        return super.getNumVertices();\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Rendering\r\n    /**\r\n     * The genBuffers method.\r\n     * @param opts - The opts value.\r\n     * @return - The return value.\r\n     */\r\n    genBuffers(opts) {\r\n        this.update();\r\n        return super.genBuffers();\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        if (!context)\r\n            context = {};\r\n        context.skipTopology = true;\r\n        context.skipAttributes = ['positions', 'normals', 'texCoords'];\r\n        const j = super.toJSON(context);\r\n        context.skipTopology = false;\r\n        context.skipAttributes = [];\r\n        return j;\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context) {\r\n        super.fromJSON(j, context);\r\n    }\r\n}\r\nexport { ProceduralLines };\r\n//# sourceMappingURL=ProceduralLines.js.map","import { Mesh } from '../Mesh';\r\n/**\r\n * Base Class for procedural meshes generated by mathematical functions.\r\n *\r\n * @extends {Mesh}\r\n */\r\nclass ProceduralMesh extends Mesh {\r\n    /**\r\n     * Creates an instance of ProceduralMesh.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.dirtyTopology = true;\r\n        this.dirtyVertices = true;\r\n        // Parameters that specify topology settings.\r\n        // Add parameters to this list to ensure the topology is recomputed.\r\n        // All other param changes will only trigger a resize\r\n        this.topologyParams = [];\r\n    }\r\n    /**\r\n     * This method can be overridden in derived classes\r\n     * to perform general updates (see GLPass or BaseItem).\r\n     * @param event - The event object emitted by the parameter.\r\n     * @private\r\n     */\r\n    parameterValueChanged(event) {\r\n        this.setBoundingBoxDirty();\r\n        if (this.topologyParams.includes(event.param.getName())) {\r\n            this.dirtyTopology = true;\r\n            this.emit('geomDataTopologyChanged');\r\n        }\r\n        else {\r\n            this.dirtyVertices = true;\r\n            this.setBoundingBoxDirty();\r\n            // Let the renderer know that the geometry has changed and must be re-uploaded to the GPU.\r\n            this.emit('geomDataChanged');\r\n        }\r\n        super.parameterValueChanged(event);\r\n    }\r\n    /**\r\n     * If the Procedural geometry is out of date, for example if a parameter has been changed,\r\n     * this method explicitly forces the geometry to be recomputed.\r\n     */\r\n    update() {\r\n        if (this.dirtyTopology) {\r\n            // Clear the topology so that vertex normals can be recomputed.\r\n            this.vertexEdges = [];\r\n            this.dirtyTopology = false;\r\n            this.dirtyVertices = false;\r\n            this.rebuild();\r\n        }\r\n        else if (this.dirtyVertices) {\r\n            this.dirtyVertices = false;\r\n            this.resize();\r\n        }\r\n    }\r\n    /**\r\n     * Returns the bounding box for geometry.\r\n     * @return - The return value.\r\n     */\r\n    getBoundingBox() {\r\n        this.update();\r\n        return super.getBoundingBox();\r\n    }\r\n    /**\r\n     * Returns the number of vertex attributes.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getNumVertices() {\r\n        this.update();\r\n        return super.getNumVertices();\r\n    }\r\n    /**\r\n     * Compute vertex normals.\r\n     * @param hardAngle - The hardAngle value in radians.\r\n     * @return - The return value.\r\n     */\r\n    computeVertexNormals(hardAngle = 1.0 /* radians */) {\r\n        this.update();\r\n        return super.computeVertexNormals(hardAngle);\r\n    }\r\n    /**\r\n     * The computeHardEdgesIndices method.\r\n     * @param hardAngle - The hardAngle value in radians.\r\n     * @return - The return value.\r\n     */\r\n    computeHardEdgesIndices(hardAngle = 1.0) {\r\n        this.update();\r\n        return super.computeHardEdgesIndices(hardAngle);\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Rendering\r\n    /**\r\n     * The genBuffers method.\r\n     * @param opts - The opts value.\r\n     * @return - The return value.\r\n     */\r\n    genBuffers(opts) {\r\n        this.update();\r\n        return super.genBuffers(opts);\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        if (!context)\r\n            context = {};\r\n        context.skipTopology = true;\r\n        context.skipAttributes = ['positions', 'normals', 'texCoords'];\r\n        const j = super.toJSON(context);\r\n        context.skipTopology = false;\r\n        context.skipAttributes = [];\r\n        return j;\r\n    }\r\n}\r\nexport { ProceduralMesh };\r\n//# sourceMappingURL=ProceduralMesh.js.map","import { ProceduralPoints } from './ProceduralPoints';\r\nimport { NumberParameter } from '../../Parameters/NumberParameter';\r\nimport { Registry } from '../../../Registry';\r\nimport { Vec2Attribute } from '../Vec2Attribute';\r\n/**\r\n * Represents an ordered grid of points along `X` and `Y` axes.\r\n *\r\n * ```\r\n * const pointGrid = new PointGrid(2.2, 1.5, 12, 12)\r\n * ```\r\n *\r\n * **Parameters**\r\n * * **X(`NumberParameter`):** Length of the grid along the `X` axis.\r\n * * **Y(`NumberParameter`):** Length of the grid along the `Y` axis.\r\n * * **XDivisions(`NumberParameter`):** Number of divisions along `X` axis\r\n * * **YDivisions(`NumberParameter`):** Number of divisions along `Y` axis\r\n * @extends {ProceduralPoints}\r\n */\r\nclass PointGrid extends ProceduralPoints {\r\n    // topologyParams: string[]\r\n    /**\r\n     * Creates an instance of PointGrid.\r\n     *\r\n     * @param x - The length of the point grid along the X axis.\r\n     * @param y - The length of the point grid along the Y axis.\r\n     * @param xDivisions - The number of divisions along the X axis.\r\n     * @param yDivisions - The number of divisions along the Y axis.\r\n     * @param addTextureCoords - The addTextureCoords value.\r\n     */\r\n    constructor(x = 1.0, y = 1.0, xDivisions = 1, yDivisions = 1, addTextureCoords = false) {\r\n        super();\r\n        this.topologyParams = [];\r\n        if (isNaN(x) || isNaN(y) || isNaN(xDivisions) || isNaN(yDivisions))\r\n            throw new Error('Invalid geom args');\r\n        this.sizeXParam = this.addParameter(new NumberParameter('X', x));\r\n        this.sizeYParam = this.addParameter(new NumberParameter('Y', y));\r\n        this.divisionsXParam = this.addParameter(new NumberParameter('XDivisions', xDivisions));\r\n        this.divisionsYParam = this.addParameter(new NumberParameter('YDivisions', yDivisions));\r\n        if (addTextureCoords)\r\n            this.addVertexAttribute('texCoords', new Vec2Attribute());\r\n        this.topologyParams.push('XDivisions');\r\n        this.topologyParams.push('YDivisions');\r\n    }\r\n    /**\r\n     * The rebuild method.\r\n     * @private\r\n     */\r\n    rebuild() {\r\n        const xDivisions = this.divisionsXParam.value;\r\n        const yDivisions = this.divisionsYParam.value;\r\n        this.setNumVertices(xDivisions * yDivisions);\r\n        const texCoords = this.getVertexAttribute('texCoords');\r\n        if (texCoords) {\r\n            for (let i = 0; i < yDivisions; i++) {\r\n                const y = i / (yDivisions - 1);\r\n                for (let j = 0; j < xDivisions; j++) {\r\n                    const x = j / (xDivisions - 1);\r\n                    texCoords.getValueRef(i * xDivisions + j).set(x, y);\r\n                }\r\n            }\r\n        }\r\n        this.resize();\r\n    }\r\n    /**\r\n     * The resize method.\r\n     * @private\r\n     */\r\n    resize() {\r\n        const xDivisions = this.divisionsXParam.value;\r\n        const yDivisions = this.divisionsYParam.value;\r\n        const x = this.sizeXParam.value;\r\n        const y = this.sizeYParam.value;\r\n        const positions = this.getVertexAttribute('positions');\r\n        if (!positions)\r\n            return;\r\n        for (let i = 0; i < yDivisions; i++) {\r\n            const newY = (i / (yDivisions - 1) - 0.5) * y;\r\n            for (let j = 0; j < xDivisions; j++) {\r\n                const newX = (j / (xDivisions - 1) - 0.5) * x;\r\n                positions.getValueRef(i * xDivisions + j).set(newX, newY, 0.0);\r\n            }\r\n        }\r\n    }\r\n}\r\nRegistry.register('PointGrid', PointGrid);\r\nexport { PointGrid };\r\n//# sourceMappingURL=PointGrid.js.map","import { ProceduralLines } from './ProceduralLines';\r\nimport { NumberParameter } from '../../Parameters/NumberParameter';\r\nimport { Registry } from '../../../Registry';\r\n/**\r\n * A class for generating a rectangle shape.\r\n *\r\n * ```\r\n * const rect = new Rect(1.5, 2.0)\r\n * ```\r\n *\r\n * **Parameters**\r\n * * **X(`NumberParameter`):** Length of the rectangle along the `X` axis.\r\n * * **Y(`NumberParameter`):** Length of the rectangle along the `Y` axis.\r\n *\r\n *\r\n * @extends {ProceduralLines}\r\n */\r\nclass Rect extends ProceduralLines {\r\n    /**\r\n     * Create a rect.\r\n     * @param x - The length of the rect along the `X` axis.\r\n     * @param y - The length of the rect along the `Y` axis.\r\n     */\r\n    constructor(x = 1.0, y = 1.0) {\r\n        super();\r\n        if (isNaN(x) || isNaN(y))\r\n            throw new Error('Invalid geom args');\r\n        this.sizeXParam = this.addParameter(new NumberParameter('X', x));\r\n        this.sizeXParam.on('valueChanged', this.resize.bind(this));\r\n        this.sizeYParam = this.addParameter(new NumberParameter('Y', y));\r\n        this.sizeYParam.on('valueChanged', this.resize.bind(this));\r\n        this.rebuild();\r\n    }\r\n    /**\r\n     * The rebuild method.\r\n     * @private\r\n     */\r\n    rebuild() {\r\n        this.setNumVertices(4);\r\n        this.setNumSegments(4);\r\n        this.setSegmentVertexIndices(0, 0, 1);\r\n        this.setSegmentVertexIndices(1, 1, 2);\r\n        this.setSegmentVertexIndices(2, 2, 3);\r\n        this.setSegmentVertexIndices(3, 3, 0);\r\n        // @ts-expect-error ts-migrate(2554) FIXME: Expected 0 arguments, but got 1.\r\n        this.resize(false);\r\n    }\r\n    /**\r\n     * The resize method.\r\n     * @private\r\n     */\r\n    resize() {\r\n        const x = this.sizeXParam.value;\r\n        const y = this.sizeYParam.value;\r\n        const positions = this.getVertexAttribute('positions');\r\n        if (!positions)\r\n            return;\r\n        positions.getValueRef(0).set(-0.5 * x, -0.5 * y, 0.0);\r\n        positions.getValueRef(1).set(0.5 * x, -0.5 * y, 0.0);\r\n        positions.getValueRef(2).set(0.5 * x, 0.5 * y, 0.0);\r\n        positions.getValueRef(3).set(-0.5 * x, 0.5 * y, 0.0);\r\n    }\r\n}\r\nRegistry.register('Rect', Rect);\r\nexport { Rect };\r\n//# sourceMappingURL=Rect.js.map","import { NumberParameter } from '../../Parameters/index';\r\nimport { Registry } from '../../../Registry';\r\nimport { ProceduralLines } from './ProceduralLines';\r\n/**\r\n * A class for generating a circle shape using line segments.\r\n *\r\n * ```\r\n * const circle = new Circle(2.2, 12)\r\n * ```\r\n *\r\n * **Parameters**\r\n * * **Radius(`NumberParameter`):** Radius of the circle.\r\n * * **Angle(`NumberParameter`):** Number of segments used to build the circle.\r\n * * **Sides(`NumberParameter`):** Segments angle in radiants.\r\n *\r\n * @extends {ProceduralLines}\r\n */\r\nclass Circle extends ProceduralLines {\r\n    // topologyParams: string[]\r\n    /**\r\n     * Creates an instance of Circle.\r\n     * @param radius - The radius of the circle.\r\n     * @param sides - The number of segments.\r\n     * @param angle - Arc segments angle(radians)\r\n     */\r\n    constructor(radius = 1.0, sides = 32, angle = Math.PI * 2) {\r\n        super();\r\n        this.topologyParams = [];\r\n        if (isNaN(radius) || isNaN(sides))\r\n            throw new Error('Invalid geom args');\r\n        this.radiusParam = this.addParameter(new NumberParameter('Radius', radius));\r\n        this.angleParam = this.addParameter(new NumberParameter('Angle', angle));\r\n        this.sidesParam = this.addParameter(new NumberParameter('Sides', sides >= 3 ? sides : 3, [3, 200], 1));\r\n        this.topologyParams.push('Sides');\r\n    }\r\n    /**\r\n     * The rebuild method.\r\n     * @private\r\n     */\r\n    rebuild() {\r\n        const segs = this.sidesParam.value;\r\n        this.setNumVertices(segs);\r\n        const angle = this.angleParam.value;\r\n        const arc = angle < Math.PI * 2;\r\n        if (arc)\r\n            this.setNumSegments(segs - 1);\r\n        else\r\n            this.setNumSegments(segs);\r\n        for (let i = 0; i < (arc ? segs - 1 : segs); i++)\r\n            this.setSegmentVertexIndices(i, i, (i + 1) % segs);\r\n        this.resize();\r\n    }\r\n    /**\r\n     * The resize method.\r\n     * @private\r\n     */\r\n    resize() {\r\n        const radius = this.radiusParam.value;\r\n        const segs = this.sidesParam.value;\r\n        const angle = this.angleParam.value;\r\n        const step = angle / segs;\r\n        const positions = this.getVertexAttribute('positions');\r\n        if (positions) {\r\n            for (let i = 0; i < segs; i++) {\r\n                positions.getValueRef(i).set(Math.cos(step * i) * radius, Math.sin(step * i) * radius, 0.0);\r\n            }\r\n        }\r\n    }\r\n}\r\nRegistry.register('Circle', Circle);\r\nexport { Circle };\r\n//# sourceMappingURL=Circle.js.map","import { ProceduralLines } from './ProceduralLines';\r\nimport { Registry } from '../../../Registry';\r\nimport { NumberParameter } from '../../../SceneTree/Parameters/NumberParameter';\r\n/**\r\n * A class for generating a cross shape, drawing a line on the `X,Y,Z` axes.\r\n * The axis line length is the `size` you specify, but the middle of the line is positioned in the coordinate `(0, 0, 0)` .\r\n * Meaning that half of the line goes negative and half goes positive.\r\n *\r\n * ```\r\n * const cross = new Cross(1.5)\r\n * ```\r\n *\r\n * **Parameters**\r\n * * **Size(`NumberParameter`):** Specifies the size of the cross.\r\n *\r\n * @extends {ProceduralLines}\r\n */\r\nclass Cross extends ProceduralLines {\r\n    /**\r\n     * Create a cross.\r\n     * @param size - The size of the cross.\r\n     */\r\n    constructor(size = 1.0) {\r\n        super();\r\n        if (isNaN(size))\r\n            throw new Error('Invalid geom args');\r\n        this.sizeParam = this.addParameter(new NumberParameter('Size', size));\r\n    }\r\n    /**\r\n     * The rebuild method.\r\n     * @private\r\n     */\r\n    rebuild() {\r\n        this.setNumVertices(6);\r\n        this.setNumSegments(3);\r\n        this.setSegmentVertexIndices(0, 0, 1);\r\n        this.setSegmentVertexIndices(1, 2, 3);\r\n        this.setSegmentVertexIndices(2, 4, 5);\r\n        this.resize();\r\n    }\r\n    /**\r\n     * The resize method.\r\n     * @private\r\n     */\r\n    resize() {\r\n        const size = this.sizeParam.value;\r\n        const positions = this.getVertexAttribute('positions');\r\n        if (!positions)\r\n            return;\r\n        positions.getValueRef(0).set(-0.5 * size, 0, 0);\r\n        positions.getValueRef(1).set(0.5 * size, 0, 0);\r\n        positions.getValueRef(2).set(0, 0.5 * size, 0);\r\n        positions.getValueRef(3).set(0, -0.5 * size, 0);\r\n        positions.getValueRef(4).set(0, 0, 0.5 * size);\r\n        positions.getValueRef(5).set(0, 0, -0.5 * size);\r\n    }\r\n}\r\nRegistry.register('Cross', Cross);\r\nexport { Cross };\r\n//# sourceMappingURL=Cross.js.map","import { NumberParameter } from '../../Parameters/NumberParameter';\r\nimport { Registry } from '../../../Registry';\r\nimport { ProceduralLines } from './ProceduralLines';\r\nimport { BooleanParameter } from '../../../SceneTree/Parameters';\r\n/**\r\n * A class for generating a lines cuboid shape(Without faces).\r\n *\r\n * **Parameters**\r\n * * **X(`NumberParameter`):** Length of the line cuboid along the `X` axis\r\n * * **Y(`NumberParameter`):** Length of the line cuboid along the `Y` axis\r\n * * **Z(`NumberParameter`):** Length of the line cuboid along the `Z` axis\r\n * * **BaseZAtZero(`NumberParameter`):** Property to start or not `Z` axis from position `0.\r\n *\r\n * @extends {ProceduralLines}\r\n */\r\nclass LinesCuboid extends ProceduralLines {\r\n    /**\r\n     * Create a lines cuboid.\r\n     * @param x - The length of the line cuboid along the X axis.\r\n     * @param y - The length of the line cuboid along the Y axis.\r\n     * @param z - The length of the line cuboid along the Z axis.\r\n     * @param baseZAtZero - The baseZAtZero value.\r\n     */\r\n    constructor(x = 1.0, y = 1.0, z = 1.0, baseZAtZero = false) {\r\n        super();\r\n        this.sizeXParam = this.addParameter(new NumberParameter('X', x));\r\n        this.sizeYParam = this.addParameter(new NumberParameter('Y', y));\r\n        this.sizeZParam = this.addParameter(new NumberParameter('Z', z));\r\n        this.baseZAtZeroParam = this.addParameter(new BooleanParameter('BaseZAtZero', baseZAtZero));\r\n    }\r\n    /**\r\n     * The rebuild method.\r\n     * @private\r\n     */\r\n    rebuild() {\r\n        this.setNumVertices(8);\r\n        this.setNumSegments(12);\r\n        this.setSegmentVertexIndices(0, 0, 1);\r\n        this.setSegmentVertexIndices(1, 1, 2);\r\n        this.setSegmentVertexIndices(2, 2, 3);\r\n        this.setSegmentVertexIndices(3, 3, 0);\r\n        this.setSegmentVertexIndices(4, 4, 5);\r\n        this.setSegmentVertexIndices(5, 5, 6);\r\n        this.setSegmentVertexIndices(6, 6, 7);\r\n        this.setSegmentVertexIndices(7, 7, 4);\r\n        this.setSegmentVertexIndices(8, 0, 4);\r\n        this.setSegmentVertexIndices(9, 1, 5);\r\n        this.setSegmentVertexIndices(10, 2, 6);\r\n        this.setSegmentVertexIndices(11, 3, 7);\r\n        this.resize();\r\n    }\r\n    /**\r\n     * The resize method.\r\n     *\r\n     * @private\r\n     */\r\n    resize() {\r\n        const x = this.sizeXParam.value;\r\n        const y = this.sizeYParam.value;\r\n        const z = this.sizeZParam.value;\r\n        const baseZAtZero = this.baseZAtZeroParam.value;\r\n        const positions = this.getVertexAttribute('positions');\r\n        if (positions) {\r\n            let zoff = 0.5;\r\n            if (baseZAtZero)\r\n                zoff = 1.0;\r\n            positions.getValueRef(0).set(0.5 * x, -0.5 * y, zoff * z);\r\n            positions.getValueRef(1).set(0.5 * x, 0.5 * y, zoff * z);\r\n            positions.getValueRef(2).set(-0.5 * x, 0.5 * y, zoff * z);\r\n            positions.getValueRef(3).set(-0.5 * x, -0.5 * y, zoff * z);\r\n            zoff = -0.5;\r\n            if (baseZAtZero)\r\n                zoff = 0.0;\r\n            positions.getValueRef(4).set(0.5 * x, -0.5 * y, zoff * z);\r\n            positions.getValueRef(5).set(0.5 * x, 0.5 * y, zoff * z);\r\n            positions.getValueRef(6).set(-0.5 * x, 0.5 * y, zoff * z);\r\n            positions.getValueRef(7).set(-0.5 * x, -0.5 * y, zoff * z);\r\n        }\r\n    }\r\n}\r\nRegistry.register('LinesCuboid', LinesCuboid);\r\nexport { LinesCuboid };\r\n//# sourceMappingURL=LinesCuboid.js.map","import { BooleanParameter, NumberParameter } from '../../Parameters/index';\r\nimport { Registry } from '../../../Registry';\r\nimport { ProceduralLines } from './ProceduralLines';\r\n/**\r\n * Represents a network of lines that cross each other to form a series of squares or rectangles.\r\n *\r\n * ```\r\n * const grid = new Grid(5, 5, 50, 50, true)\r\n * ```\r\n *\r\n * **Parameters**\r\n * * **X(`NumberParameter`):** Length of the grid along the `X` axis.\r\n * * **Y(`NumberParameter`):** Length of the grid along the `Y` axis.\r\n * * **XDivisions(`NumberParameter`):** Number of divisions along `X` axis\r\n * * **YDivisions(`NumberParameter`):** Number of divisions along `Y` axis\r\n * * **SkipCenterLines(`BooleanParameter`):** Property that indicates whether to display the center grid lines or not\r\n *\r\n * @extends {ProceduralLines}\r\n */\r\nclass Grid extends ProceduralLines {\r\n    // topologyParams: string[]\r\n    /**\r\n     * Create a grid.\r\n     * @param x - The length of the grid along the `X` axis.\r\n     * @param y - The length of the grid along the `Y` axis.\r\n     * @param xDivisions - The number of divisions along `X` axis.\r\n     * @param yDivisions - The number of divisions along `Y` axis.\r\n     * @param skipCenterLines - A boolean indicating whether to display the center grid lines or not.\r\n     */\r\n    constructor(x = 1.0, y = 1.0, xDivisions = 10, yDivisions = 10, skipCenterLines = false) {\r\n        super();\r\n        this.topologyParams = [];\r\n        if (isNaN(x) || isNaN(y) || isNaN(xDivisions) || isNaN(yDivisions))\r\n            throw new Error('Invalid geom args');\r\n        this.xParam = this.addParameter(new NumberParameter('X', x));\r\n        this.yParam = this.addParameter(new NumberParameter('Y', y));\r\n        this.xDivisionsParam = this.addParameter(new NumberParameter('XDivisions', xDivisions));\r\n        this.yDivisionsParam = this.addParameter(new NumberParameter('YDivisions', yDivisions));\r\n        this.skipCenterLinesParam = this.addParameter(new BooleanParameter('SkipCenterLines', skipCenterLines));\r\n        this.topologyParams.push('XDivisions');\r\n        this.topologyParams.push('YDivisions');\r\n        this.topologyParams.push('SkipCenterLines');\r\n    }\r\n    /**\r\n     * The rebuild method.\r\n     * @private\r\n     */\r\n    rebuild() {\r\n        const xDivisions = this.xDivisionsParam.value;\r\n        const yDivisions = this.yDivisionsParam.value;\r\n        const skipCenterLines = this.skipCenterLinesParam.value && xDivisions % 2 == 0 && yDivisions % 2 == 0;\r\n        this.setNumVertices((xDivisions + yDivisions + 2 - (skipCenterLines ? 1 : 0)) * 2);\r\n        this.setNumSegments(xDivisions + yDivisions + 2 - (skipCenterLines ? 1 : 0));\r\n        let idx = 0;\r\n        for (let i = 0; i <= xDivisions; i++) {\r\n            if (skipCenterLines && i == xDivisions / 2)\r\n                continue;\r\n            const v0 = idx * 2;\r\n            const v1 = idx * 2 + 1;\r\n            this.setSegmentVertexIndices(idx, v0, v1);\r\n            idx++;\r\n        }\r\n        for (let i = 0; i <= yDivisions; i++) {\r\n            if (skipCenterLines && i == xDivisions / 2)\r\n                continue;\r\n            const v0 = idx * 2;\r\n            const v1 = idx * 2 + 1;\r\n            this.setSegmentVertexIndices(idx, v0, v1);\r\n            idx++;\r\n        }\r\n        this.resize();\r\n    }\r\n    /**\r\n     * The resize method.\r\n     * @private\r\n     */\r\n    resize() {\r\n        const positions = this.getVertexAttribute('positions');\r\n        const xDivisions = this.xDivisionsParam.value;\r\n        const yDivisions = this.yDivisionsParam.value;\r\n        const xSize = this.xParam.value;\r\n        const ySize = this.yParam.value;\r\n        const skipCenterLines = this.skipCenterLinesParam.value && xDivisions % 2 == 0 && yDivisions % 2 == 0;\r\n        let idx = 0;\r\n        for (let i = 0; i <= xDivisions; i++) {\r\n            if (skipCenterLines && i == xDivisions / 2)\r\n                continue;\r\n            const v0 = idx * 2;\r\n            const v1 = idx * 2 + 1;\r\n            const x = (i / xDivisions - 0.5) * xSize;\r\n            if (positions) {\r\n                positions.getValueRef(v0).set(x, -0.5 * ySize, 0.0);\r\n                positions.getValueRef(v1).set(x, 0.5 * ySize, 0.0);\r\n            }\r\n            idx++;\r\n        }\r\n        for (let i = 0; i <= yDivisions; i++) {\r\n            if (skipCenterLines && i == xDivisions / 2)\r\n                continue;\r\n            const v0 = idx * 2;\r\n            const v1 = idx * 2 + 1;\r\n            const y = (i / yDivisions - 0.5) * ySize;\r\n            if (positions) {\r\n                positions.getValueRef(v0).set(-0.5 * xSize, y, 0.0);\r\n                positions.getValueRef(v1).set(0.5 * xSize, y, 0.0);\r\n            }\r\n            idx++;\r\n        }\r\n    }\r\n}\r\nRegistry.register('Grid', Grid);\r\nexport { Grid };\r\n//# sourceMappingURL=Grid.js.map","/* eslint-disable no-unused-vars */\r\nimport { Vec2 } from '../../../Math/Vec2';\r\nimport { BooleanParameter, NumberParameter } from '../../../SceneTree/Parameters/index';\r\nimport { Registry } from '../../../Registry';\r\nimport { ProceduralMesh } from './ProceduralMesh';\r\nimport { Vec3Attribute } from '../Vec3Attribute';\r\nimport { Vec2Attribute } from '../Vec2Attribute';\r\n/**\r\n * Represents a cone geometry.\r\n *\r\n * ```\r\n * const cone = new Cone(1.2, 4.0)\r\n * ```\r\n *\r\n * **Parameters**\r\n * * **Radius(`NumberParameter`):** Specifies the radius of the base of the cone.\r\n * * **Height(`NumberParameter`):** Specifies the height of the cone.\r\n * * **Detail(`NumberParameter`):** Specifies the number of subdivisions around the `Z` axis.\r\n * * **Cap(`BooleanParameter`):** Specifies whether the base of the cone is capped or open.\r\n *\r\n * @extends {ProceduralMesh}\r\n */\r\nclass Cone extends ProceduralMesh {\r\n    // topologyParams: string[]\r\n    /**\r\n     * Create a cone.\r\n     * @param radius - The radius of the base of the cone.\r\n     * @param height - The height of the cone.\r\n     * @param detail - The detail of the cone.\r\n     * @param cap -  A boolean indicating whether the base of the cone is capped or open.\r\n     * @param addNormals - Compute vertex normals for the geometry\r\n     * @param addTextureCoords - Compute texture coordinates for the geometry\r\n     */\r\n    constructor(radius = 0.5, height = 1.0, detail = 32, cap = true, addNormals = true, addTextureCoords = true) {\r\n        super();\r\n        this.topologyParams = [];\r\n        if (isNaN(radius) || isNaN(height) || isNaN(detail))\r\n            throw new Error('Invalid geom args');\r\n        this.radiusParam = this.addParameter(new NumberParameter('Radius', radius));\r\n        this.heightParam = this.addParameter(new NumberParameter('Height', height));\r\n        this.detailParam = this.addParameter(new NumberParameter('Detail', detail >= 3 ? detail : 3, [3, 200], 1));\r\n        this.capParam = this.addParameter(new BooleanParameter('Cap', cap));\r\n        if (addNormals)\r\n            this.addVertexAttribute('normals', new Vec3Attribute());\r\n        if (addTextureCoords)\r\n            this.addVertexAttribute('texCoords', new Vec2Attribute());\r\n        this.topologyParams.push('Detail');\r\n        this.topologyParams.push('Cap');\r\n    }\r\n    /**\r\n     * The rebuild method.\r\n     * @private\r\n     */\r\n    rebuild() {\r\n        const nbSides = this.detailParam.value;\r\n        const radius = this.radiusParam.value;\r\n        const height = this.heightParam.value;\r\n        const cap = this.capParam.value;\r\n        let numVertices = nbSides + 1;\r\n        if (cap) {\r\n            numVertices += 1;\r\n        }\r\n        this.setNumVertices(numVertices);\r\n        const tipPoint = nbSides;\r\n        const basePoint = nbSides + 1;\r\n        // ////////////////////////////\r\n        // Set Vertex Positions\r\n        const positions = this.getVertexAttribute('positions');\r\n        if (positions) {\r\n            positions.getValueRef(tipPoint).set(0.0, 0.0, height);\r\n            for (let i = 0; i < nbSides; i++) {\r\n                const theta = -((i / nbSides) * 2.0 * Math.PI);\r\n                positions.getValueRef(i).set(radius * Math.cos(theta), radius * Math.sin(theta), 0.0);\r\n            }\r\n            if (cap) {\r\n                positions.getValueRef(basePoint).set(0.0, 0.0, 0.0);\r\n            }\r\n        }\r\n        // ////////////////////////////\r\n        // Build the topology\r\n        this.setFaceCounts([nbSides + (cap ? nbSides : 0)]);\r\n        for (let i = 0; i < nbSides; i++) {\r\n            const j = (i + 1) % nbSides;\r\n            this.setFaceVertexIndices(i, [j, i, tipPoint]);\r\n        }\r\n        if (cap) {\r\n            for (let i = 0; i < nbSides; i++) {\r\n                const j = (i + 1) % nbSides;\r\n                this.setFaceVertexIndices(nbSides + i, [i, j, basePoint]);\r\n            }\r\n        }\r\n        // ////////////////////////////\r\n        // setUVs\r\n        const texCoords = this.getVertexAttribute('texCoords');\r\n        if (texCoords) {\r\n            // Now set the attrbute values\r\n            let tri = 0;\r\n            for (let i = 0; i < nbSides; i++) {\r\n                if ('setFaceVertexValue' in texCoords) {\r\n                    texCoords.setFaceVertexValue(tri, 0, new Vec2((i + 1) / nbSides, 0.0));\r\n                    texCoords.setFaceVertexValue(tri, 1, new Vec2(i / nbSides, 0.0));\r\n                    texCoords.setFaceVertexValue(tri, 2, new Vec2((i + 0.5) / nbSides, 1.0));\r\n                }\r\n            }\r\n            if (cap) {\r\n                for (let i = 0; i < nbSides; i++) {\r\n                    texCoords.setFaceVertexValue(tri, 0, new Vec2(i / nbSides, 0.0));\r\n                    texCoords.setFaceVertexValue(tri, 1, new Vec2((i + 1) / nbSides, 0.0));\r\n                    texCoords.setFaceVertexValue(tri, 2, new Vec2((i + 0.5) / nbSides, 1.0));\r\n                    tri++;\r\n                }\r\n            }\r\n        }\r\n        this.resize();\r\n    }\r\n    /**\r\n     * The resize method.\r\n     * @private\r\n     */\r\n    resize() {\r\n        const nbSides = this.detailParam.value;\r\n        const radius = this.radiusParam.value;\r\n        const height = this.heightParam.value;\r\n        const tipPoint = nbSides;\r\n        const basePoint = nbSides + 1;\r\n        const positions = this.getVertexAttribute('positions');\r\n        if (positions) {\r\n            positions.getValueRef(tipPoint).set(0.0, 0.0, height);\r\n            for (let i = 0; i < nbSides; i++) {\r\n                const theta = -((i / nbSides) * 2.0 * Math.PI);\r\n                positions.getValueRef(i).set(radius * Math.cos(theta), radius * Math.sin(theta), 0.0);\r\n            }\r\n            if (this.capParam.value) {\r\n                positions.getValueRef(basePoint).set(0.0, 0.0, 0.0);\r\n            }\r\n        }\r\n        // Note: this breaks an infinite loop where computeVertexNormals calls update which calls rebuild.\r\n        this.dirtyTopology = false;\r\n        this.dirtyVertices = false;\r\n        const normals = this.getVertexAttribute('normals');\r\n        if (normals) {\r\n            this.computeVertexNormals();\r\n        }\r\n    }\r\n}\r\nRegistry.register('Cone', Cone);\r\nexport { Cone };\r\n//# sourceMappingURL=Cone.js.map","import { BooleanParameter } from '../../../SceneTree/Parameters/BooleanParameter';\r\nimport { NumberParameter } from '../../../SceneTree/Parameters/NumberParameter';\r\nimport { Vec3 } from '../../../Math/Vec3';\r\nimport { ProceduralMesh } from './ProceduralMesh';\r\nimport { Registry } from '../../../Registry';\r\nimport { Vec3Attribute } from '../Vec3Attribute';\r\n// import { Vec2 } from '../../../Math/Vec2'\r\n// import { Vec2Attribute } from '../Vec2Attribute'\r\n/**\r\n * A class for generating a cuboid geometry.\r\n *\r\n * **Parameters**\r\n * * **x(`NumberParameter`):** Length of the line cuboid along the `X` axis\r\n * * **y(`NumberParameter`):** Length of the line cuboid along the `Y` axis\r\n * * **z(`NumberParameter`):** Length of the line cuboid along the `Z` axis\r\n * * **BaseZAtZero(`NumberParameter`):** Property to start or not `Z` axis from position `0.\r\n *\r\n * @extends {ProceduralMesh}\r\n */\r\nclass Cuboid extends ProceduralMesh {\r\n    /**\r\n     * Create a cuboid.\r\n     * @param x - The length of the cuboid along the X axis.\r\n     * @param y - The length of the cuboid along the Y axis.\r\n     * @param z - The length of the cuboid along the Z axis.\r\n     * @param baseZAtZero - The baseZAtZero value.\r\n     */\r\n    constructor(x = 1.0, y = 1.0, z = 1.0, baseZAtZero = false) {\r\n        super();\r\n        if (isNaN(x) || isNaN(y) || isNaN(z))\r\n            throw new Error('Invalid geom args');\r\n        this.sizeXParam = this.addParameter(new NumberParameter('X', x));\r\n        this.sizeYParam = this.addParameter(new NumberParameter('Y', y));\r\n        this.sizeZParam = this.addParameter(new NumberParameter('Z', z));\r\n        this.baseZAtZeroParam = this.addParameter(new BooleanParameter('BaseZAtZero', baseZAtZero));\r\n        this.setFaceCounts([0, 6]);\r\n        this.setFaceVertexIndices(0, [0, 1, 2, 3]);\r\n        this.setFaceVertexIndices(1, [7, 6, 5, 4]);\r\n        this.setFaceVertexIndices(2, [1, 0, 4, 5]);\r\n        this.setFaceVertexIndices(3, [3, 2, 6, 7]);\r\n        this.setFaceVertexIndices(4, [0, 3, 7, 4]);\r\n        this.setFaceVertexIndices(5, [2, 1, 5, 6]);\r\n        this.setNumVertices(8);\r\n        this.addVertexAttribute('normals', new Vec3Attribute());\r\n        // this.addVertexAttribute('texCoords', new Vec2Attribute())\r\n    }\r\n    /**\r\n     * The rebuild method.\r\n     * @private\r\n     */\r\n    rebuild() {\r\n        const normals = this.getVertexAttribute('normals');\r\n        if (normals) {\r\n            for (let i = 0; i < 6; i++) {\r\n                let normal;\r\n                switch (i) {\r\n                    case 0:\r\n                        normal = new Vec3(0, 0, 1);\r\n                        break;\r\n                    case 1:\r\n                        normal = new Vec3(0, 0, -1);\r\n                        break;\r\n                    case 2:\r\n                        normal = new Vec3(1, 0, 0);\r\n                        break;\r\n                    case 3:\r\n                        normal = new Vec3(-1, 0, 0);\r\n                        break;\r\n                    case 4:\r\n                        normal = new Vec3(0, -1, 0);\r\n                        break;\r\n                    //case 5:\r\n                    default:\r\n                        normal = new Vec3(0, 1, 0);\r\n                        break;\r\n                }\r\n                normals.setFaceVertexValue(i, 0, normal);\r\n                normals.setFaceVertexValue(i, 1, normal);\r\n                normals.setFaceVertexValue(i, 2, normal);\r\n                normals.setFaceVertexValue(i, 3, normal);\r\n            }\r\n        } /*\r\n        const texCoords = <Vec2Attribute>this.getVertexAttribute('texCoords')\r\n        if (texCoords) {\r\n          for (let i = 0; i < 6; i++) {\r\n            texCoords.setFaceVertexValue(i, 0, new Vec2(0, 0))\r\n            texCoords.setFaceVertexValue(i, 1, new Vec2(1, 0))\r\n            texCoords.setFaceVertexValue(i, 2, new Vec2(1, 1))\r\n            texCoords.setFaceVertexValue(i, 3, new Vec2(0, 1))\r\n          }\r\n        }\r\n        */\r\n        this.resize();\r\n    }\r\n    /**\r\n     * The resize method.\r\n     * @private\r\n     */\r\n    resize() {\r\n        const x = this.sizeXParam.value;\r\n        const y = this.sizeYParam.value;\r\n        const z = this.sizeZParam.value;\r\n        const baseZAtZero = this.baseZAtZeroParam.value;\r\n        let zoff = 0.5;\r\n        const positions = this.getVertexAttribute('positions');\r\n        if (baseZAtZero)\r\n            zoff = 1.0;\r\n        if (!positions)\r\n            return;\r\n        positions.getValueRef(0).set(0.5 * x, -0.5 * y, zoff * z);\r\n        positions.getValueRef(1).set(0.5 * x, 0.5 * y, zoff * z);\r\n        positions.getValueRef(2).set(-0.5 * x, 0.5 * y, zoff * z);\r\n        positions.getValueRef(3).set(-0.5 * x, -0.5 * y, zoff * z);\r\n        zoff = -0.5;\r\n        if (baseZAtZero)\r\n            zoff = 0.0;\r\n        positions.getValueRef(4).set(0.5 * x, -0.5 * y, zoff * z);\r\n        positions.getValueRef(5).set(0.5 * x, 0.5 * y, zoff * z);\r\n        positions.getValueRef(6).set(-0.5 * x, 0.5 * y, zoff * z);\r\n        positions.getValueRef(7).set(-0.5 * x, -0.5 * y, zoff * z);\r\n    }\r\n}\r\nRegistry.register('Cuboid', Cuboid);\r\nexport { Cuboid };\r\n//# sourceMappingURL=Cuboid.js.map","import { Vec2 } from '../../../Math/Vec2';\r\nimport { Vec3 } from '../../../Math/Vec3';\r\nimport { BooleanParameter, NumberParameter } from '../../Parameters/index';\r\nimport { Registry } from '../../../Registry';\r\nimport { ProceduralMesh } from './ProceduralMesh';\r\nimport { Vec3Attribute } from '../Vec3Attribute';\r\nimport { Vec2Attribute } from '../Vec2Attribute';\r\n/**\r\n * A class for generating a cylinder geometry. It is very much like a cuboid but with `N` number of sides.\r\n *\r\n * ```\r\n * const cylinder = new Cylinder(1.5, 2.0, 6)\r\n * ```\r\n *\r\n * **Parameters**\r\n * * **Radius(`NumberParameter`):** Specifies the radius of the cylinder.\r\n * * **Height(`NumberParameter`):** Specifies the height of the cone.\r\n * * **Sides(`NumberParameter`):** Specifies the number of subdivisions around the `Z` axis.\r\n * * **Loops(`NumberParameter`):** Specifies the number of subdivisions(stacks) on the `Z` axis.\r\n * * **Caps(`BooleanParameter`):** Specifies whether the ends of the cylinder are capped or open.\r\n * * **BaseZAtZero(`BooleanParameter`):** Property to start or not `Z` axis from position `0.\r\n *\r\n * @extends {ProceduralMesh}\r\n */\r\nclass Cylinder extends ProceduralMesh {\r\n    // topologyParams: string[]\r\n    /**\r\n     * Create a cylinder.\r\n     * @param radius - The radius of the cylinder.\r\n     * @param height - The height of the cylinder.\r\n     * @param sides - The number of sides.\r\n     * @param loops - The number of loops.\r\n     * @param caps - A boolean indicating whether the ends of the cylinder are capped or open.\r\n     * @param baseZAtZero - The baseZAtZero value.\r\n     */\r\n    constructor(radius = 0.5, height = 1.0, sides = 32, loops = 2, caps = true, baseZAtZero = false) {\r\n        super();\r\n        this.topologyParams = [];\r\n        if (isNaN(radius) || isNaN(height) || isNaN(sides) || isNaN(loops))\r\n            throw new Error('Invalid geom args');\r\n        this.radiusParam = this.addParameter(new NumberParameter('Radius', radius));\r\n        this.heightParam = this.addParameter(new NumberParameter('Height', height));\r\n        this.sidesParam = this.addParameter(new NumberParameter('Sides', sides >= 3 ? sides : 3, [3, 200], 1));\r\n        this.loopsParam = this.addParameter(new NumberParameter('Loops', loops >= 2 ? loops : 2, [1, 200], 1));\r\n        this.capsParam = this.addParameter(new BooleanParameter('Caps', caps));\r\n        this.baseZAtZeroParam = this.addParameter(new BooleanParameter('BaseZAtZero', baseZAtZero));\r\n        this.addVertexAttribute('texCoords', new Vec2Attribute());\r\n        this.addVertexAttribute('normals', new Vec3Attribute()); // TODO: review args/params.\r\n        this.topologyParams.push('Sides');\r\n        this.topologyParams.push('Loops');\r\n        this.topologyParams.push('Caps');\r\n    }\r\n    /**\r\n     * The rebuild method.\r\n     * @private\r\n     */\r\n    rebuild() {\r\n        const nbSides = this.sidesParam.value;\r\n        const nbLoops = this.loopsParam.value;\r\n        const caps = this.capsParam.value;\r\n        let numVertices = nbSides * nbLoops;\r\n        if (caps) {\r\n            numVertices += 2;\r\n        }\r\n        this.setNumVertices(numVertices);\r\n        if (caps)\r\n            this.setFaceCounts([nbSides * 2, nbSides]);\r\n        else\r\n            this.setFaceCounts([0, nbSides]);\r\n        // ////////////////////////////\r\n        // Build the topology\r\n        let faceIndex = 0;\r\n        if (caps) {\r\n            // Bottom caps topology\r\n            for (let j = 0; j < nbSides; j++) {\r\n                const v0 = numVertices - 1;\r\n                const v1 = j;\r\n                const v2 = (j + 1) % nbSides;\r\n                this.setFaceVertexIndices(faceIndex++, [v0, v1, v2]);\r\n            }\r\n            // Top caps topology\r\n            for (let j = 0; j < nbSides; j++) {\r\n                const v0 = nbSides * (nbLoops - 1) + j;\r\n                const v1 = numVertices - 2;\r\n                const v2 = nbSides * (nbLoops - 1) + ((j + 1) % nbSides);\r\n                this.setFaceVertexIndices(faceIndex++, [v0, v1, v2]);\r\n            }\r\n        }\r\n        // build the topology for the body of the cylinder\r\n        for (let i = 0; i < nbLoops - 1; i++) {\r\n            for (let j = 0; j < nbSides; j++) {\r\n                const v0 = nbSides * i + ((j + 1) % nbSides);\r\n                const v1 = nbSides * i + j;\r\n                const v2 = nbSides * (i + 1) + j;\r\n                const v3 = nbSides * (i + 1) + ((j + 1) % nbSides);\r\n                this.setFaceVertexIndices(faceIndex++, [v0, v1, v2, v3]);\r\n            }\r\n        }\r\n        // ////////////////////////////\r\n        // setNormals\r\n        const normals = this.getVertexAttribute('normals');\r\n        if (normals) {\r\n            // Now set the attribute values\r\n            faceIndex = 0;\r\n            if (caps) {\r\n                const normal = new Vec3(0.0, 0.0, -1.0);\r\n                for (let i = 0; i < nbSides; i++) {\r\n                    normals.setFaceVertexValue(faceIndex, 0, normal);\r\n                    normals.setFaceVertexValue(faceIndex, 1, normal);\r\n                    normals.setFaceVertexValue(faceIndex, 2, normal);\r\n                    faceIndex++;\r\n                }\r\n                normal.set(0.0, 0.0, 1.0);\r\n                for (let i = 0; i < nbSides; i++) {\r\n                    normals.setFaceVertexValue(faceIndex, 0, normal);\r\n                    normals.setFaceVertexValue(faceIndex, 1, normal);\r\n                    normals.setFaceVertexValue(faceIndex, 2, normal);\r\n                    faceIndex++;\r\n                }\r\n            }\r\n            for (let i = 0; i < nbLoops - 1; i++) {\r\n                for (let j = 0; j < nbSides; j++) {\r\n                    let phi = (j / nbSides) * 2.0 * Math.PI;\r\n                    const normal1 = new Vec3(Math.sin(phi), Math.cos(phi), 0.0);\r\n                    normals.setFaceVertexValue(faceIndex, 0, normal1);\r\n                    normals.setFaceVertexValue(faceIndex, 1, normal1);\r\n                    phi = ((j + 1) / nbSides) * 2.0 * Math.PI;\r\n                    const normal2 = new Vec3(Math.sin(phi), Math.cos(phi), 0.0);\r\n                    normals.setFaceVertexValue(faceIndex, 2, normal2);\r\n                    normals.setFaceVertexValue(faceIndex, 3, normal2);\r\n                    faceIndex++;\r\n                }\r\n            }\r\n        }\r\n        // ////////////////////////////\r\n        // setUVs\r\n        const texCoords = this.getVertexAttribute('texCoords');\r\n        if (texCoords) {\r\n            // Now set the attrbute values\r\n            faceIndex = 0;\r\n            if (caps) {\r\n                for (let i = 0; i < nbSides; i++) {\r\n                    texCoords.setFaceVertexValue(faceIndex, 0, new Vec2(i / nbSides, 0.0));\r\n                    texCoords.setFaceVertexValue(faceIndex, 1, new Vec2((i + 1) / nbSides, 0.0));\r\n                    texCoords.setFaceVertexValue(faceIndex, 2, new Vec2((i + 0.5) / nbSides, 1.0));\r\n                    faceIndex++;\r\n                }\r\n                for (let i = 0; i < nbSides; i++) {\r\n                    texCoords.setFaceVertexValue(faceIndex, 0, new Vec2(i / nbSides, 0.0));\r\n                    texCoords.setFaceVertexValue(faceIndex, 1, new Vec2((i + 1) / nbSides, 0.0));\r\n                    texCoords.setFaceVertexValue(faceIndex, 2, new Vec2((i + 0.5) / nbSides, 1.0));\r\n                    faceIndex++;\r\n                }\r\n            }\r\n            for (let i = 0; i < nbSides; i++) {\r\n                texCoords.setFaceVertexValue(faceIndex, 0, new Vec2((i + 1) / nbSides, 0.0));\r\n                texCoords.setFaceVertexValue(faceIndex, 2, new Vec2((i + 1) / nbSides, 1.0));\r\n                texCoords.setFaceVertexValue(faceIndex, 1, new Vec2(i / nbSides, 0.0));\r\n                texCoords.setFaceVertexValue(faceIndex, 3, new Vec2(i / nbSides, 1.0));\r\n                faceIndex++;\r\n            }\r\n        }\r\n        this.resize();\r\n    }\r\n    /**\r\n     * The resize method.\r\n     * @private\r\n     */\r\n    resize() {\r\n        const nbSides = this.sidesParam.value;\r\n        const nbLoops = this.loopsParam.value;\r\n        const radius = this.radiusParam.value;\r\n        const height = this.heightParam.value;\r\n        const caps = this.capsParam.value;\r\n        const baseZAtZero = this.baseZAtZeroParam.value;\r\n        let numVertices = nbSides * nbLoops;\r\n        if (caps) {\r\n            numVertices += 2;\r\n        }\r\n        let vertex = 0;\r\n        let zoff = 0.5;\r\n        if (baseZAtZero)\r\n            zoff = 0.0;\r\n        const positions = this.getVertexAttribute('positions');\r\n        if (positions) {\r\n            for (let i = 0; i < nbLoops; i++) {\r\n                const z = (i / (nbLoops - 1)) * height - height * zoff;\r\n                for (let j = 0; j < nbSides; j++) {\r\n                    const phi = (j / nbSides) * 2.0 * Math.PI;\r\n                    positions.getValueRef(vertex).set(Math.sin(phi) * radius, Math.cos(phi) * radius, z);\r\n                    vertex++;\r\n                }\r\n            }\r\n            if (caps) {\r\n                positions.getValueRef(numVertices - 1).set(0.0, 0.0, height * (baseZAtZero ? 0.0 : -0.5));\r\n                positions.getValueRef(numVertices - 2).set(0.0, 0.0, height * (baseZAtZero ? 1.0 : 0.5));\r\n            }\r\n        }\r\n        this.dirtyTopology = false;\r\n        this.dirtyVertices = false;\r\n        this.computeVertexNormals();\r\n    }\r\n}\r\nRegistry.register('Cylinder', Cylinder);\r\nexport { Cylinder };\r\n//# sourceMappingURL=Cylinder.js.map","import { Vec3 } from '../../../Math/Vec3';\r\nimport { NumberParameter } from '../../Parameters/index';\r\nimport { Registry } from '../../../Registry';\r\nimport { ProceduralMesh } from './ProceduralMesh';\r\nimport { Vec2Attribute } from '../Vec2Attribute';\r\nimport { Vec3Attribute } from '../Vec3Attribute';\r\n/**\r\n * A class for generating a disc geometry.\r\n *\r\n * ```\r\n * const disc = new Disc(2.0, 22)\r\n * ```\r\n *\r\n * **Parameters**\r\n * * **Radius(`NumberParameter`):** Specifies the radius of the disc.\r\n * * **Sides(`NumberParameter`):** Specifies the resolution, or the disc subdivisions around `Z` axis.\r\n *\r\n * @extends {ProceduralMesh}\r\n */\r\nclass Disc extends ProceduralMesh {\r\n    // topologyParams: string[]\r\n    /**\r\n     * Creates an instance of Disc.\r\n     *\r\n     * @param radius - The radius of the disc.\r\n     * @param sides - The number of sides.\r\n     */\r\n    constructor(radius = 0.5, sides = 32) {\r\n        super();\r\n        this.topologyParams = [];\r\n        if (isNaN(radius) || isNaN(sides))\r\n            throw new Error('Invalid geom args');\r\n        this.radiusParam = this.addParameter(new NumberParameter('Radius', radius));\r\n        this.sidesParam = this.addParameter(new NumberParameter('Sides', sides >= 3 ? sides : 3, [3, 200], 1));\r\n        this.addVertexAttribute('texCoords', new Vec2Attribute());\r\n        this.addVertexAttribute('normals', new Vec3Attribute());\r\n        this.topologyParams.push('Sides');\r\n    }\r\n    /**\r\n     * The rebuild method.\r\n     * @private\r\n     */\r\n    rebuild() {\r\n        const nbSides = this.sidesParam.value;\r\n        this.setNumVertices(nbSides + 1);\r\n        this.setFaceCounts([nbSides]);\r\n        // ////////////////////////////\r\n        // Set Vertex Positions\r\n        const positions = this.getVertexAttribute('positions');\r\n        if (positions)\r\n            positions.getValueRef(0).set(0.0, 0.0, 0.0);\r\n        // ////////////////////////////\r\n        // Build the topology\r\n        for (let j = 0; j < nbSides; j++) {\r\n            const v1 = (j % nbSides) + 1;\r\n            const v2 = ((j + 1) % nbSides) + 1;\r\n            this.setFaceVertexIndices(j, [0, v1, v2]);\r\n        }\r\n        // ////////////////////////////\r\n        // setNormals\r\n        const normals = this.getVertexAttribute('normals');\r\n        if (normals) {\r\n            // Now set the attrbute values\r\n            const normal = new Vec3(0, 0, 1);\r\n            normals.setValue(0, normal);\r\n            for (let i = 0; i < nbSides; i++) {\r\n                normals.setValue(i + 1, normal);\r\n            }\r\n        }\r\n        // ////////////////////////////\r\n        // setUVs\r\n        const texCoords = this.getVertexAttribute('texCoords');\r\n        if (texCoords) {\r\n            texCoords.getValueRef(0).set(0.5, 0.5);\r\n            for (let i = 0; i < nbSides; i++) {\r\n                const phi = (i / nbSides) * 2.0 * Math.PI;\r\n                texCoords.getValueRef(i + 1).set(Math.sin(phi) * 0.5 + 0.5, Math.cos(phi) * 0.5 + 0.5);\r\n            }\r\n        }\r\n        this.resize();\r\n    }\r\n    /**\r\n     * The resize method.\r\n     * @private\r\n     */\r\n    resize() {\r\n        const nbSides = this.sidesParam.value;\r\n        const radius = this.radiusParam.value;\r\n        const positions = this.getVertexAttribute('positions');\r\n        if (positions) {\r\n            for (let i = 0; i < nbSides; i++) {\r\n                const phi = (i / nbSides) * 2.0 * Math.PI;\r\n                positions.getValueRef(i + 1).set(Math.sin(phi) * radius, Math.cos(phi) * radius, 0.0);\r\n            }\r\n        }\r\n    }\r\n}\r\nRegistry.register('Disc', Disc);\r\nexport { Disc };\r\n//# sourceMappingURL=Disc.js.map","import { NumberParameter } from '../../Parameters/index';\r\nimport { Registry } from '../../../Registry';\r\nimport { ProceduralMesh } from './ProceduralMesh';\r\nimport { Vec3Attribute } from '../Vec3Attribute';\r\nimport { Vec2Attribute } from '../Vec2Attribute';\r\n/**\r\n * A class for generating a plane geometry.\r\n *\r\n * ```\r\n * const plane = new Plane(2.0, 1.5, 10, 10)\r\n * ```\r\n *\r\n * **Parameters**\r\n * * **SizeX(`NumberParameter`):** Length of the plane along `X` axis.\r\n * * **SizeY(`NumberParameter`):** Length of the plane along `Y` axis.\r\n * * **DetailX(`NumberParameter`):** Number of divisions along `X`axis.\r\n * * **DetailY(`NumberParameter`):** Number of divisions along `Y`axis.\r\n *\r\n * @extends {ProceduralMesh}\r\n */\r\nclass Plane extends ProceduralMesh {\r\n    // topologyParams: string[]\r\n    /**\r\n     * Create a plane.\r\n     * @param SizeX - The length of the plane along the X axis.\r\n     * @param SizeY - The length of the plane along the Y axis.\r\n     * @param DetailX - The number of divisions along the X axis.\r\n     * @param DetailY - The number of divisions along the Y axis.\r\n     * @param addNormals - The addNormals value.\r\n     * @param addTextureCoords - The addTextureCoords value.\r\n     */\r\n    constructor(SizeX = 1.0, SizeY = 1.0, DetailX = 1, DetailY = 1, addNormals = true, addTextureCoords = true) {\r\n        super();\r\n        this.topologyParams = [];\r\n        if (isNaN(SizeX) || isNaN(SizeY) || isNaN(DetailX) || isNaN(DetailY))\r\n            throw new Error('Invalid geom args');\r\n        this.sizeXParam = this.addParameter(new NumberParameter('SizeX', SizeX));\r\n        this.sizeYParam = this.addParameter(new NumberParameter('SizeY', SizeY));\r\n        this.detailXParam = this.addParameter(new NumberParameter('DetailX', DetailX));\r\n        this.detailYParam = this.addParameter(new NumberParameter('DetailY', DetailY));\r\n        if (addNormals)\r\n            this.addVertexAttribute('normals', new Vec3Attribute());\r\n        if (addTextureCoords)\r\n            this.addVertexAttribute('texCoords', new Vec2Attribute());\r\n        this.topologyParams.push('DetailX');\r\n        this.topologyParams.push('DetailY');\r\n    }\r\n    /**\r\n     * The rebuild method.\r\n     * @private\r\n     */\r\n    rebuild() {\r\n        const detailX = this.detailXParam.value;\r\n        const detailY = this.detailYParam.value;\r\n        this.setNumVertices((detailX + 1) * (detailY + 1));\r\n        this.setFaceCounts([0, detailX * detailY]);\r\n        let quadId = 0;\r\n        for (let i = 0; i < detailY; i++) {\r\n            for (let j = 0; j < detailX; j++) {\r\n                const v0 = (detailX + 1) * (i + 1) + j;\r\n                const v1 = (detailX + 1) * i + j;\r\n                const v2 = (detailX + 1) * i + (j + 1);\r\n                const v3 = (detailX + 1) * (i + 1) + (j + 1);\r\n                this.setFaceVertexIndices(quadId, [v0, v1, v2, v3]);\r\n                quadId = quadId + 1;\r\n            }\r\n        }\r\n        let voff = 0;\r\n        const normals = this.getVertexAttribute('normals');\r\n        if (normals) {\r\n            for (let i = 0; i <= detailY; i++) {\r\n                for (let j = 0; j <= detailX; j++) {\r\n                    normals.getValueRef(voff).set(0, 0, 1);\r\n                    voff++;\r\n                }\r\n            }\r\n        }\r\n        voff = 0;\r\n        const texCoords = this.getVertexAttribute('texCoords');\r\n        if (texCoords) {\r\n            for (let i = 0; i <= detailY; i++) {\r\n                const y = i / detailY;\r\n                for (let j = 0; j <= detailX; j++) {\r\n                    const x = j / detailX;\r\n                    texCoords.getValueRef(voff).set(x, y);\r\n                    voff++;\r\n                }\r\n            }\r\n        }\r\n        this.resize();\r\n    }\r\n    /**\r\n     * The resize method.\r\n     *\r\n     * @private\r\n     */\r\n    resize() {\r\n        const sizeX = this.sizeXParam.value;\r\n        const sizeY = this.sizeYParam.value;\r\n        const detailX = this.detailXParam.value;\r\n        const detailY = this.detailYParam.value;\r\n        const positions = this.getVertexAttribute('positions');\r\n        if (!positions)\r\n            return;\r\n        let voff = 0;\r\n        for (let i = 0; i <= detailY; i++) {\r\n            const y = (i / detailY - 0.5) * sizeY;\r\n            for (let j = 0; j <= detailX; j++) {\r\n                const x = (j / detailX - 0.5) * sizeX;\r\n                positions.getValueRef(voff).set(x, y, 0.0);\r\n                voff++;\r\n            }\r\n        }\r\n    }\r\n}\r\nRegistry.register('Plane', Plane);\r\nexport { Plane };\r\n//# sourceMappingURL=Plane.js.map","import { Vec2, Vec3 } from '../../../Math/index';\r\nimport { NumberParameter } from '../../Parameters/NumberParameter';\r\nimport { Registry } from '../../../Registry';\r\nimport { ProceduralMesh } from './ProceduralMesh';\r\nimport { Vec3Attribute } from '../Vec3Attribute';\r\nimport { Vec2Attribute } from '../Vec2Attribute';\r\n/**\r\n * A class for generating a sphere geometry.\r\n *\r\n * ```\r\n * const sphere = new Sphere(1.4, 13)\r\n * ```\r\n *\r\n * **Parameters**\r\n * * **Radius(`NumberParameter`):** Radius of the sphere.\r\n * * **Sides(`NumberParameter`):** Specifies the number of subdivisions around the `Z` axis.\r\n * * **Loops(`NumberParameter`):** Specifies the number of subdivisions(stacks) along the `Z` axis.\r\n *\r\n * @extends {ProceduralMesh}\r\n */\r\nclass Sphere extends ProceduralMesh {\r\n    /**\r\n     * Creates an instance of Sphere.\r\n     * @param radius - The radius of the sphere.\r\n     * @param sides - The number of sides.\r\n     * @param loops - The number of loops.\r\n     * @param addNormals - Compute vertex normals for the geometry\r\n     * @param addTextureCoords - Compute texture coordinates for the geometry\r\n     */\r\n    constructor(radius = 1.0, sides = 12, loops = 12, addNormals = true, addTextureCoords = true) {\r\n        super();\r\n        /**\r\n         * @member radiusParam - Radius of the sphere.\r\n         */\r\n        this.radiusParam = new NumberParameter('Radius', 1.0);\r\n        /**\r\n         * @member sidesParam - Specifies the number of subdivisions around the `Z` axis.\r\n         */\r\n        this.sidesParam = new NumberParameter('Sides', 12, [3, 200], 1);\r\n        /**\r\n         * @member loopsParam - Specifies the number of subdivisions(stacks) along the `Z` axis.\r\n         */\r\n        this.loopsParam = new NumberParameter('Loops', 6, [3, 200], 1);\r\n        if (isNaN(radius) || isNaN(sides) || isNaN(loops))\r\n            throw new Error('Invalid geom args');\r\n        this.addParameter(this.radiusParam);\r\n        this.addParameter(this.sidesParam);\r\n        this.addParameter(this.loopsParam);\r\n        this.radiusParam.value = radius;\r\n        this.sidesParam.value = sides;\r\n        this.loopsParam.value = loops;\r\n        if (addNormals)\r\n            this.addVertexAttribute('normals', new Vec3Attribute());\r\n        if (addTextureCoords)\r\n            this.addVertexAttribute('texCoords', new Vec2Attribute());\r\n        this.topologyParams.push('Sides');\r\n        this.topologyParams.push('Loops');\r\n    }\r\n    /**\r\n     * The rebuild method.\r\n     * @private\r\n     */\r\n    rebuild() {\r\n        const radius = this.radiusParam.value;\r\n        const nbSides = this.sidesParam.value;\r\n        const nbLoops = this.loopsParam.value;\r\n        const numVertices = 2 + nbSides * nbLoops;\r\n        const numTris = nbSides * 2;\r\n        const numQuads = nbSides * nbLoops;\r\n        this.setNumVertices(numVertices);\r\n        this.setFaceCounts([numTris, numQuads]);\r\n        // ////////////////////////////\r\n        // Set Vertex Positions\r\n        const positions = this.getVertexAttribute('positions');\r\n        const normals = this.getVertexAttribute('normals');\r\n        const normal = new Vec3(0.0, 0.0, 1.0);\r\n        let vertex = 0;\r\n        if (!positions)\r\n            return;\r\n        positions.getValueRef(vertex).set(0.0, 0.0, radius);\r\n        if (normals)\r\n            normals.getValueRef(vertex).set(0.0, 0.0, 1.0);\r\n        vertex++;\r\n        for (let i = 0; i < nbLoops; i++) {\r\n            const theta = ((i + 1) / (nbLoops + 1)) * Math.PI;\r\n            for (let j = 0; j < nbSides; j++) {\r\n                const phi = -((j / nbSides) * 2.0 * Math.PI);\r\n                normal.set(Math.sin(theta) * Math.cos(phi), Math.sin(theta) * Math.sin(phi), Math.cos(theta));\r\n                // Set positions and normals at the same time.\r\n                positions.getValueRef(vertex).setFromOther(normal.scale(radius));\r\n                if (normals)\r\n                    normals.getValueRef(vertex).setFromOther(normal);\r\n                vertex++;\r\n            }\r\n        }\r\n        positions.getValueRef(vertex).set(0.0, 0.0, -radius);\r\n        if (normals)\r\n            normals.getValueRef(vertex).set(0.0, 0.0, -1.0);\r\n        vertex++;\r\n        // ////////////////////////////\r\n        // Build the topology\r\n        const texCoords = this.getVertexAttribute('texCoords');\r\n        // build the fan at the first pole.\r\n        let faceIndex = 0;\r\n        for (let j = 0; j < nbSides; j++) {\r\n            const v0 = 0;\r\n            const v1 = ((j + 1) % nbSides) + 1;\r\n            const v2 = j + 1;\r\n            this.setFaceVertexIndices(faceIndex, [v0, v1, v2]);\r\n            if (texCoords) {\r\n                const uv0 = new Vec2(0.5, 0.0);\r\n                const uv1 = new Vec2((j + 1) / (nbSides - 1), 1 / (nbLoops + 1));\r\n                const uv2 = new Vec2(j / (nbSides - 1), 1 / (nbLoops + 1));\r\n                texCoords.setFaceVertexValue(faceIndex, 0, uv0);\r\n                texCoords.setFaceVertexValue(faceIndex, 1, uv1);\r\n                texCoords.setFaceVertexValue(faceIndex, 2, uv2);\r\n            }\r\n            faceIndex++;\r\n        }\r\n        // Build the fan at the second pole.\r\n        for (let j = 0; j < nbSides; j++) {\r\n            const v0 = numVertices - 1;\r\n            const v2 = nbSides * (nbLoops - 1) + ((j + 1) % nbSides) + 1;\r\n            const v1 = nbSides * (nbLoops - 1) + j + 1;\r\n            this.setFaceVertexIndices(faceIndex, [v0, v1, v2]);\r\n            if (texCoords) {\r\n                const uv0 = new Vec2(0.5, 1.0);\r\n                const uv1 = new Vec2((j + 1) / (nbSides - 1), 1 - 1 / (nbLoops + 1));\r\n                const uv2 = new Vec2(j / (nbSides - 1), 1 - 1 / (nbLoops + 1));\r\n                texCoords.setFaceVertexValue(faceIndex, 0, uv0);\r\n                texCoords.setFaceVertexValue(faceIndex, 1, uv1);\r\n                texCoords.setFaceVertexValue(faceIndex, 2, uv2);\r\n            }\r\n            faceIndex++;\r\n        }\r\n        for (let i = 0; i < nbLoops - 1; i++) {\r\n            for (let j = 0; j < nbSides; j++) {\r\n                const v0 = nbSides * i + j + 1;\r\n                const v1 = nbSides * i + ((j + 1) % nbSides) + 1;\r\n                const v2 = nbSides * (i + 1) + ((j + 1) % nbSides) + 1;\r\n                const v3 = nbSides * (i + 1) + j + 1;\r\n                this.setFaceVertexIndices(faceIndex, [v0, v1, v2, v3]);\r\n                if (texCoords) {\r\n                    texCoords.setFaceVertexValue(faceIndex, 0, new Vec2(j / nbSides, (i + 1) / nbLoops));\r\n                    texCoords.setFaceVertexValue(faceIndex, 1, new Vec2((j + 1) / nbSides, (i + 1) / nbLoops));\r\n                    texCoords.setFaceVertexValue(faceIndex, 2, new Vec2((j + 1) / nbSides, (i + 2) / nbLoops));\r\n                    texCoords.setFaceVertexValue(faceIndex, 3, new Vec2(j / nbSides, (i + 2) / nbLoops));\r\n                }\r\n                faceIndex++;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * The resize method.\r\n     * @private\r\n     */\r\n    resize() {\r\n        const radius = this.radiusParam.value;\r\n        const nbSides = this.sidesParam.value;\r\n        const nbLoops = this.loopsParam.value;\r\n        if (!nbSides || !nbLoops) {\r\n            console.warn('resize() failed');\r\n            return;\r\n        }\r\n        // ////////////////////////////\r\n        // Set Vertex Positions\r\n        const positions = this.getVertexAttribute('positions');\r\n        const normals = this.getVertexAttribute('normals');\r\n        let vertex = 0;\r\n        const normal = new Vec3(0.0, 0.0, 1.0);\r\n        positions.getValueRef(vertex).set(0.0, 0.0, radius);\r\n        if (normals)\r\n            normals.getValueRef(vertex).set(0.0, 0.0, 1.0);\r\n        vertex++;\r\n        for (let i = 0; i < nbLoops; i++) {\r\n            const theta = ((i + 1) / (nbLoops + 1)) * Math.PI;\r\n            for (let j = 0; j < nbSides; j++) {\r\n                const phi = -((j / nbSides) * 2.0 * Math.PI);\r\n                normal.set(Math.sin(theta) * Math.cos(phi), Math.sin(theta) * Math.sin(phi), Math.cos(theta));\r\n                // Set positions and normals at the same time.\r\n                positions.getValueRef(vertex).setFromOther(normal.scale(radius));\r\n                if (normals)\r\n                    normals.getValueRef(vertex).setFromOther(normal);\r\n                vertex++;\r\n            }\r\n        }\r\n        positions.getValueRef(vertex).set(0.0, 0.0, -radius);\r\n        if (normals)\r\n            normals.getValueRef(vertex).set(0.0, 0.0, -1.0);\r\n        vertex++;\r\n    }\r\n}\r\nRegistry.register('Sphere', Sphere);\r\nexport { Sphere };\r\n//# sourceMappingURL=Sphere.js.map","import { Vec2 } from '../../../Math/Vec2';\r\nimport { ProceduralMesh } from './ProceduralMesh';\r\nimport { Registry } from '../../../Registry';\r\nimport { NumberParameter } from '../../Parameters/NumberParameter';\r\nimport { Vec3Attribute } from '../Vec3Attribute';\r\nimport { Vec2Attribute } from '../Vec2Attribute';\r\n/**\r\n * A class for generating a torus geometry.\r\n *\r\n * ```\r\n * const torus = new Torus(0.4, 1.3)\r\n * ```\r\n *\r\n * @extends ProceduralMesh\r\n */\r\nclass Torus extends ProceduralMesh {\r\n    /**\r\n     * Creates an instance of Torus.\r\n     *\r\n     * @param innerRadius - The inner radius of the torus.\r\n     * @param outerRadius - The outer radius of the torus.\r\n     * @param detail - The detail of the cone.\r\n     * @param arcAngle - The angle of the arc.\r\n     */\r\n    constructor(innerRadius = 0.5, outerRadius = 3, detail = 32, arcAngle = Math.PI * 2.0) {\r\n        super();\r\n        if (isNaN(innerRadius) || isNaN(outerRadius) || isNaN(detail))\r\n            throw new Error('Invalid geom args');\r\n        this.innerRadiusParam = this.addParameter(new NumberParameter('InnerRadius', innerRadius));\r\n        this.outerRadiusParam = this.addParameter(new NumberParameter('OuterRadius', outerRadius));\r\n        this.detailParam = this.addParameter(new NumberParameter('Detail', detail >= 3 ? detail : 3, [3, 200], 1));\r\n        this.arcAngleParam = this.addParameter(new NumberParameter('ArcAngle', arcAngle));\r\n        this.addVertexAttribute('texCoords', new Vec2Attribute());\r\n        this.addVertexAttribute('normals', new Vec3Attribute());\r\n        this.topologyParams.push('Detail');\r\n        this.topologyParams.push('ArcAngle');\r\n    }\r\n    /**\r\n     * The rebuild method.\r\n     * @private\r\n     */\r\n    rebuild() {\r\n        const arcAngle = this.arcAngleParam.value;\r\n        const open = arcAngle < 2.0 * Math.PI;\r\n        const detail = this.detailParam.value;\r\n        const nbSlices = detail;\r\n        const nbLoops = detail * 2 + (open ? 1 : 0);\r\n        const numVertices = nbSlices * nbLoops;\r\n        this.setNumVertices(numVertices);\r\n        this.setFaceCounts([0, nbSlices * nbLoops]);\r\n        // ////////////////////////////\r\n        // Build the topology and texCoords\r\n        const texCoords = this.getVertexAttribute('texCoords');\r\n        if (texCoords) {\r\n            let faceIndex = 0;\r\n            for (let i = 0; i < (open ? nbLoops - 1 : nbLoops); i++) {\r\n                for (let j = 0; j < nbSlices; j++) {\r\n                    const ip = (i + 1) % nbLoops;\r\n                    const jp = (j + 1) % nbSlices;\r\n                    const v0 = nbSlices * i + j;\r\n                    const v1 = nbSlices * i + jp;\r\n                    const v2 = nbSlices * ip + jp;\r\n                    const v3 = nbSlices * ip + j;\r\n                    this.setFaceVertexIndices(faceIndex, [v0, v1, v2, v3]);\r\n                    texCoords.setFaceVertexValue(faceIndex, 0, new Vec2(i / nbLoops, j / nbLoops));\r\n                    texCoords.setFaceVertexValue(faceIndex, 1, new Vec2(i / nbLoops, (j + 1) / nbLoops));\r\n                    texCoords.setFaceVertexValue(faceIndex, 2, new Vec2((i + 1) / nbLoops, (j + 1) / nbLoops));\r\n                    texCoords.setFaceVertexValue(faceIndex, 3, new Vec2((i + 1) / nbLoops, j / nbLoops));\r\n                    faceIndex++;\r\n                }\r\n            }\r\n        }\r\n        this.resize();\r\n    }\r\n    /**\r\n     * The resize method.\r\n     * @private\r\n     */\r\n    resize() {\r\n        const innerRadius = this.innerRadiusParam.value;\r\n        const outerRadius = this.outerRadiusParam.value;\r\n        const arcAngle = this.arcAngleParam.value;\r\n        const detail = this.detailParam.value;\r\n        const open = arcAngle < 2.0 * Math.PI;\r\n        const nbSlices = detail;\r\n        const nbLoops = detail * 2 + (open ? 1 : 0);\r\n        const positions = this.getVertexAttribute('positions');\r\n        const normals = this.getVertexAttribute('normals');\r\n        if (!positions || !normals)\r\n            return;\r\n        let vertex = 0;\r\n        for (let i = 0; i < nbLoops; i++) {\r\n            // const theta = (i / nbLoops) * arcAngle\r\n            const theta = -((i / (open ? nbLoops - 1 : nbLoops)) * arcAngle);\r\n            const ctheta = Math.cos(theta);\r\n            const stheta = Math.sin(theta);\r\n            for (let j = 0; j < nbSlices; j++) {\r\n                const phi = (j / nbSlices) * 2.0 * Math.PI;\r\n                const sphi = Math.sin(phi);\r\n                const cphi = Math.cos(phi);\r\n                const d = outerRadius + cphi * innerRadius;\r\n                // Set positions and normals at the same time.\r\n                positions.getValueRef(vertex).set(ctheta * d, stheta * d, innerRadius * sphi);\r\n                normals.getValueRef(vertex).set(ctheta * cphi, stheta * cphi, sphi);\r\n                vertex++;\r\n            }\r\n        }\r\n    }\r\n}\r\nRegistry.register('Torus', Torus);\r\nexport { Torus };\r\n//# sourceMappingURL=Torus.js.map","import { Registry } from '../../Registry';\r\nimport { BaseImage } from '../BaseImage';\r\n// let ResourceLoaderWorker = require(\"worker-loader?inline!./ResourceLoaderWorker.js\");\r\n/**\r\n * Represents a BaseImage with the ability to load data.\r\n *\r\n * **Events**\r\n * * **loaded:** Triggered when the data is loaded.\r\n * * **updated:** Triggered when the data is updated.\r\n * @extends BaseImage\r\n */\r\nclass DataImage extends BaseImage {\r\n    /**\r\n     * Create a data image.\r\n     * @param name - The name value.\r\n     */\r\n    constructor(name) {\r\n        super(name);\r\n        this.__data = new Uint8Array(4);\r\n        if (name == undefined)\r\n            name = this.constructor.name;\r\n        this.__name = name;\r\n        this.format = 'RGBA';\r\n        this.type = 'UNSIGNED_BYTE';\r\n        this.__loaded = false;\r\n        // this.__data = new Uint8Array(4);\r\n        this.width = 1;\r\n        this.height = 1;\r\n    }\r\n    /**\r\n     * Returns an indicator of current item's loaded state.\r\n     * @return - `true` if bytes data is fully loaded, `false` otherwise.\r\n     */\r\n    isLoaded() {\r\n        return this.__loaded;\r\n    }\r\n    // TODO: video / webcam will return true.\r\n    /**\r\n     * Images are static content, so the value for this method is always going to be `false`\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    isStream() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Sets Image's data by recieving an bytes array.\r\n     *\r\n     * @param width - The width value.\r\n     * @param height - The height value.\r\n     * @param data - The data value.\r\n     */\r\n    setData(width, height, data) {\r\n        if (this.__data == data)\r\n            return;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.__data = data;\r\n        if (!this.__loaded) {\r\n            this.__loaded = true;\r\n            this.emit('loaded');\r\n        }\r\n        else\r\n            this.emit('updated');\r\n    }\r\n    /**\r\n     * Returns all parameters and class state values(Including data).\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getParams() {\r\n        const params = super.getParams();\r\n        params['data'] = this.__data;\r\n        return params;\r\n    }\r\n}\r\nRegistry.register('DataImage2D', DataImage);\r\nRegistry.register('DataImage', DataImage);\r\nexport { DataImage };\r\n//# sourceMappingURL=DataImage.js.map","import { Registry } from '../../Registry';\r\nimport { BaseImage } from '../BaseImage';\r\n// Cache of any images already loaded.\r\nconst imageDataLibrary = {};\r\n/** Class representing a file image.\r\n * @extends BaseImage\r\n */\r\nclass FileImage extends BaseImage {\r\n    /**\r\n     * Create a file image.\r\n     * @param name - The name value.\r\n     * @param filePath - The filePath value.\r\n     * @param params - The params value.\r\n     */\r\n    constructor(name, filePath = '', params = {}) {\r\n        super(name);\r\n        this.__data = null;\r\n        this.type = 'UNSIGNED_BYTE';\r\n        this.crossOrigin = 'anonymous';\r\n        this.loaded = false;\r\n        if (filePath && filePath != '')\r\n            this.load(filePath);\r\n    }\r\n    /**\r\n     * Defines how to handle cross origin request.\r\n     *\r\n     * **Possible values:**\r\n     * * **anonymous** - CORS requests for this element will have the credentials flag set to 'same-origin'.\r\n     * * **use-credentials** - CORS requests for this element will have the credentials flag set to 'include'.\r\n     * * **\"\"** - Setting the attribute name to an empty value, like crossorigin or crossorigin=\"\", is the same as anonymous.\r\n     *\r\n     * @default anonymous\r\n     * @param crossOrigin - The crossOrigin value.\r\n     */\r\n    setCrossOrigin(crossOrigin) {\r\n        this.crossOrigin = crossOrigin;\r\n    }\r\n    /**\r\n     * Returns the HTML DOM element used to load the image file.\r\n     * Be\r\n     * @returns { HTMLImageElement | null }\r\n     */\r\n    getDOMElement() {\r\n        return this.__data;\r\n    }\r\n    /**\r\n     * Uses the specify url to load an Image element and adds it to the data library.\r\n     * Sets the state of the current object.\r\n     *\r\n     * @param url - The url value.\r\n     * @param format - The format value.\r\n     * @return Returns a promise that resolves once the image is loaded.\r\n     */\r\n    load(url, format = 'RGB') {\r\n        return new Promise((resolve, reject) => {\r\n            if (!format) {\r\n                // Try to guess the format from the\r\n                const suffixSt = url.lastIndexOf('.');\r\n                if (suffixSt != -1) {\r\n                    const ext = url.substring(suffixSt).toLowerCase();\r\n                    if (ext == '.png') {\r\n                        // TODO: Check webp for alpha channel..\r\n                        format = 'RGBA';\r\n                    }\r\n                }\r\n            }\r\n            this.format = format;\r\n            this.loaded = false;\r\n            const loaded = () => {\r\n                this.url = url;\r\n                this.width = this.__data.width;\r\n                this.height = this.__data.height;\r\n                this.loaded = true;\r\n                this.emit('loaded');\r\n                resolve();\r\n            };\r\n            if (url in imageDataLibrary) {\r\n                this.__data = imageDataLibrary[url];\r\n                if (this.__data.complete) {\r\n                    loaded();\r\n                }\r\n                else {\r\n                    this.__data.addEventListener('load', loaded);\r\n                    this.__data.addEventListener('error', reject);\r\n                }\r\n            }\r\n            else {\r\n                this.__data = new Image();\r\n                this.__data.crossOrigin = this.crossOrigin;\r\n                this.__data.src = url;\r\n                this.__data.addEventListener('load', loaded);\r\n                this.__data.addEventListener('error', reject);\r\n                imageDataLibrary[url] = this.__data;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Loads in Image file using the given URL\r\n     *\r\n     * @param url - The url value.\r\n     * @param format - The format value. Can be 'RGB' or 'RGBA' for files that contain an alpha channel. This will cause objects to be drawn using the Transparent pass.\r\n     */\r\n    setImageURL(url, format = 'RGB') {\r\n        this.load(url, format);\r\n    }\r\n    /**\r\n     * The getParams method.\r\n     * @return - The return value.\r\n     */\r\n    getParams() {\r\n        const params = super.getParams();\r\n        if (this.loaded) {\r\n            params['data'] = this.__data;\r\n        }\r\n        return params;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     * @param context - The context value.\r\n     */\r\n    toJSON(context) {\r\n        return {};\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     * @param json - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(json, context) { }\r\n    /**\r\n     * The readBinary method.\r\n     * @param reader - The reader param.\r\n     * @param context - The context param.\r\n     */\r\n    readBinary(reader, context) {\r\n        // super.readBinary(reader, context);\r\n        this.setName(reader.loadStr());\r\n        const filePath = reader.loadStr();\r\n        if (typeof filePath === 'string' && filePath != '') {\r\n            const basePath = context.url.substring(0, context.url.lastIndexOf('/'));\r\n            this.load(basePath + '/' + filePath);\r\n        }\r\n    }\r\n}\r\n/** Class representing a 2D file image.\r\n * @extends FileImage\r\n */\r\nclass FileImage2D extends FileImage {\r\n    /**\r\n     * Create a file image 2D.\r\n     * @param filePath - The filePath value.\r\n     * @param params - The params value.\r\n     */\r\n    constructor(filePath, params = {}) {\r\n        console.warn('FileImage2D is becoming deprecated in favor of simple FileImage');\r\n        super(filePath, params);\r\n    }\r\n}\r\nRegistry.register('FileImage2D', FileImage);\r\nRegistry.register('FileImage', FileImage);\r\nexport { FileImage, FileImage2D };\r\n//# sourceMappingURL=FileImage.js.map","/* eslint-disable require-jsdoc */\r\nimport { Registry } from '../../Registry';\r\nimport { FileImage } from './FileImage';\r\n/**\r\n * Class representing a LDR (low dynamic range) image.\r\n *\r\n * ```\r\n * const image = new LDRImage()\r\n * image.load(\"https://storage.googleapis.com/zea-playground-assets/zea-engine/texture.png\")\r\n * ```\r\n *\r\n * **Parameters**\r\n * * **PreferredSize(`NumberParameter`):** _todo_\r\n *\r\n * **Events:**\r\n * * **loaded:** Triggered when image data is loaded.\r\n *\r\n * **File Types:** jpg, jpeg, png\r\n *\r\n * @extends FileImage\r\n */\r\nclass LDRImage extends FileImage {\r\n    /**\r\n     * Create a LDR image.\r\n     * @param name - The name value.\r\n     * @param filePath - The filePath value.\r\n     * @param params - The params value.\r\n     */\r\n    constructor(name, filePath, params) {\r\n        super(name, filePath, params);\r\n    }\r\n}\r\nRegistry.register('LDRImage', LDRImage);\r\nexport { LDRImage };\r\n//# sourceMappingURL=LDRImage.js.map","import { Color } from '../../Math/index';\r\nimport { Registry } from '../../Registry';\r\nimport { BaseImage } from '../BaseImage';\r\nimport { resourceLoader } from '../resourceLoader';\r\n/**\r\n * Class representing a VLH image.\r\n *\r\n * **Events**\r\n * * **loaded:** Triggered when image data is loaded.\r\n * * **updated:** Triggered when image data is updated.\r\n *\r\n * @extends BaseImage\r\n */\r\nclass VLHImage extends BaseImage {\r\n    /**\r\n     * Create a VLH image.\r\n     * @param name - The name value.\r\n     * @param params - The params value.\r\n     */\r\n    constructor(name, params = {}) {\r\n        super(name); // TODO: used to be: super(name, params)\r\n        this.__data = {};\r\n        let filepath;\r\n        if (name != undefined && name.includes('.')) {\r\n            filepath = name;\r\n            this.setName(name.substring(name.lastIndexOf('/') + 1, name.lastIndexOf('.')));\r\n        }\r\n        this.__exposure = 1.0;\r\n        this.__ambientLightFactor = 0.0;\r\n        this.__hdrTint = new Color(1, 1, 1, 1);\r\n        this.__stream = 'stream' in params ? params['stream'] : false;\r\n        this.type = 'FLOAT';\r\n        if (filepath) {\r\n            this.load(filepath);\r\n        }\r\n    }\r\n    /**\r\n     * The __decodeData method.\r\n     * @param entries - The entries value.\r\n     * @private\r\n     */\r\n    __decodeData(entries) {\r\n        return new Promise((resolve, reject) => {\r\n            const ldr = entries.ldr;\r\n            const cdm = entries.cdm;\r\n            // ///////////////////////////////\r\n            // Parse the data.\r\n            const blob = new Blob([ldr.buffer]);\r\n            const ldrPic = new Image();\r\n            ldrPic.onload = () => {\r\n                this.width = ldrPic.width;\r\n                this.height = ldrPic.height;\r\n                // console.log(resourcePath + \": [\" + this.width + \", \" + this.height + \"]\");\r\n                this.__data = {\r\n                    ldr: ldrPic,\r\n                    cdm: cdm,\r\n                };\r\n                if (!this.loaded) {\r\n                    this.loaded = true;\r\n                    this.emit('loaded');\r\n                }\r\n                else {\r\n                    this.emit('updated');\r\n                }\r\n                resolve();\r\n            };\r\n            ldrPic.src = URL.createObjectURL(blob);\r\n        });\r\n    }\r\n    /**\r\n     * Loads a vlh file given a URL.\r\n     * @param url - The URL of the vlh file to load\r\n     * @return - Returns a promise that resolves once the initial load is complete\r\n     */\r\n    load(url) {\r\n        this.loaded = false;\r\n        return new Promise((resolve, reject) => {\r\n            const filename = url.lastIndexOf('/') > -1 ? url.substring(url.lastIndexOf('/') + 1) : '';\r\n            const stem = filename.substring(0, filename.lastIndexOf('.'));\r\n            if (this.getName() == '') {\r\n                this.setName(stem);\r\n            }\r\n            this.type = 'FLOAT';\r\n            resourceLoader.loadFile('archive', url).then((entries) => {\r\n                if (!entries.ldr || !entries.cdm) {\r\n                    for (const name in entries) {\r\n                        if (name.endsWith('.jpg')) {\r\n                            entries.ldr = entries[name];\r\n                            delete entries[name];\r\n                        }\r\n                        else if (name.endsWith('.bin')) {\r\n                            entries.cdm = entries[name];\r\n                            delete entries[name];\r\n                        }\r\n                    }\r\n                }\r\n                this.__decodeData(entries).then(() => {\r\n                    resolve();\r\n                });\r\n            }, (error) => {\r\n                this.emit('error', error);\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Returns if the data is a stream or not.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    isStream() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Returns all parameters and class state values.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getParams() {\r\n        const params = super.getParams();\r\n        if (this.loaded) {\r\n            params['data'] = this.__data;\r\n            params['exposure'] = this.__exposure;\r\n        }\r\n        return params;\r\n    }\r\n    /**\r\n     * The setHDRTint method.\r\n     * @private\r\n     * @param hdrTint - The hdrTint value.\r\n     */\r\n    setHDRTint(hdrTint) {\r\n        this.__hdrTint = hdrTint;\r\n    }\r\n    /**\r\n     * The getHDRTint method.\r\n     * @private\r\n     * @return - The return value.\r\n     */\r\n    getHDRTint() {\r\n        return this.__hdrTint;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     */\r\n    toJSON(context) {\r\n        return {};\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param json - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(json, context) {\r\n        return {};\r\n    }\r\n    /**\r\n     * Sets state of current Image using a binary reader object, and adds it to the resource loader.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        // super.readBinary(reader, context);\r\n        this.setName(reader.loadStr());\r\n        let url = reader.loadStr();\r\n        if (typeof url === 'string' && url != '') {\r\n            this.load(url);\r\n        }\r\n    }\r\n}\r\nRegistry.register('VLHImage', VLHImage);\r\nexport { VLHImage };\r\n//# sourceMappingURL=VLHImage.js.map","import { Registry } from '../../Registry';\r\nimport { resourceLoader } from '../resourceLoader';\r\nimport { BooleanParameter, NumberParameter } from '../Parameters/index';\r\nimport { FileImage } from './FileImage';\r\n/**\r\n * Class representing a LDR (low dynamic range) video.\r\n *\r\n * ```\r\n * const video = new LDRVideo()\r\n * video.load(\"https://storage.googleapis.com/zea-playground-assets/zea-engine/video.mp4\")\r\n * ```\r\n *\r\n * **Parameters**\r\n * * **Mute(`BooleanParameter`):** Mutes video volume.\r\n * * **Loop(`BooleanParameter`):** Repeats video over and over again.\r\n * * **Gain(`NumberParameter`):** Sets loudness of the video before going through any processing.\r\n * * **SpatializeAudio(`BooleanParameter`):** Enables/Disables spatial(Surrounding) audio.\r\n * * **refDistance(`NumberParameter`):** _todo_\r\n * * **maxDistance(`NumberParameter`):** _todo_\r\n * * **rolloffFactor(`NumberParameter`):** _todo_\r\n * * **coneInnerAngle(`NumberParameter`):** _todo_\r\n * * **coneOuterAngle(`NumberParameter`):** _todo_\r\n * * **coneOuterGain(`NumberParameter`):** _todo_\r\n *\r\n * **File Types:** mp4, ogg\r\n *\r\n * @extends FileImage\r\n */\r\nclass LDRVideo extends FileImage {\r\n    /**\r\n     * Create a LDR video.\r\n     * @param name - The name value.\r\n     * @param filePath - The filePath value.\r\n     * @param params - The params value.\r\n     */\r\n    constructor(name, filePath, params) {\r\n        super(name, filePath, params);\r\n        this.videoElem = new HTMLVideoElement();\r\n        this.muteParam = new BooleanParameter('Mute', false);\r\n        this.loopParam = new BooleanParameter('Loop', true);\r\n        this.spatializeAudioParam = new BooleanParameter('SpatializeAudio', true);\r\n        this.refDistanceParam = new NumberParameter('refDistance', 2);\r\n        this.maxDistanceParam = new NumberParameter('maxDistance', 10000);\r\n        this.rolloffFactorParam = new NumberParameter('rolloffFactor', 1);\r\n        this.coneInnerAngleParam = new NumberParameter('coneInnerAngle', 360);\r\n        this.coneOuterAngleParam = new NumberParameter('coneOuterAngle', 0);\r\n        this.coneOuterGainParam = new NumberParameter('coneOuterGain', 1);\r\n        this.gainParam = new NumberParameter('Gain', 2.0);\r\n        this.format = 'RGB';\r\n        this.type = 'UNSIGNED_BYTE';\r\n        this.addParameter(this.muteParam);\r\n        this.addParameter(this.loopParam);\r\n        this.addParameter(this.spatializeAudioParam);\r\n        this.addParameter(this.refDistanceParam);\r\n        this.addParameter(this.maxDistanceParam);\r\n        this.addParameter(this.rolloffFactorParam);\r\n        this.addParameter(this.coneInnerAngleParam);\r\n        this.addParameter(this.coneOuterAngleParam);\r\n        this.addParameter(this.coneOuterGainParam);\r\n        this.addParameter(this.gainParam).setRange([0, 5]);\r\n    }\r\n    getAudioSource() {\r\n        return this.videoElem;\r\n    }\r\n    /**\r\n     * Uses the specify url to load an Image element and adds it to the data library.\r\n     * Sets the state of the current object.\r\n     *\r\n     * @param url - The url value.\r\n     * @param format - The format value.\r\n     * @return Returns a promise that resolves once the image is loaded.\r\n     */\r\n    load(url, format = 'RGB') {\r\n        return new Promise((resolve, reject) => {\r\n            resourceLoader.incrementWorkload(1);\r\n            // TODO - confirm its necessary to add to DOM\r\n            this.videoElem.style.display = 'none';\r\n            this.videoElem.preload = 'auto';\r\n            this.videoElem.crossOrigin = 'anonymous';\r\n            // videoElem.crossorigin = true;\r\n            document.body.appendChild(this.videoElem);\r\n            this.videoElem.addEventListener('loadedmetadata', () => {\r\n                // videoElem.play();\r\n                this.videoElem.muted = this.muteParam.value;\r\n                this.muteParam.on('valueChanged', () => {\r\n                    this.videoElem.muted = this.muteParam.value;\r\n                });\r\n                this.videoElem.loop = this.loopParam.value;\r\n                this.loopParam.on('valueChanged', () => {\r\n                    this.videoElem.loop = this.loopParam.value;\r\n                });\r\n                this.width = this.videoElem.videoHeight;\r\n                this.height = this.videoElem.videoWidth;\r\n                this.loaded = true;\r\n                resourceLoader.incrementWorkDone(1);\r\n                this.emit('loaded');\r\n                resolve(promise);\r\n                let prevFrame = 0;\r\n                const frameRate = 29.97;\r\n                const timerCallback = () => {\r\n                    if (this.videoElem.paused || this.videoElem.ended) {\r\n                        return;\r\n                    }\r\n                    // Check to see if the video has progressed to the next frame.\r\n                    // If so, then we emit and update, which will cause a redraw.\r\n                    const currentFrame = Math.floor(this.videoElem.currentTime * frameRate);\r\n                    if (prevFrame != currentFrame) {\r\n                        this.emit('updated');\r\n                        prevFrame = currentFrame;\r\n                    }\r\n                    setTimeout(timerCallback, 20); // Sample at 50fps.\r\n                };\r\n                timerCallback();\r\n            }, false);\r\n            this.videoElem.src = url;\r\n            // this.videoElem.load();\r\n            const promise = this.videoElem.play();\r\n            if (promise !== undefined) {\r\n                promise\r\n                    .then((_) => {\r\n                    console.log('Autoplay started!');\r\n                    // Autoplay started!\r\n                })\r\n                    .catch(() => {\r\n                    console.log('Autoplay was prevented.');\r\n                    // Autoplay was prevented.\r\n                    // Show a \"Play\" button so that user can start playback.\r\n                });\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * The getParams method.\r\n     * @return - The return value.\r\n     */\r\n    getParams() {\r\n        const params = super.getParams();\r\n        if (this.loaded) {\r\n            params['data'] = this.videoElem;\r\n        }\r\n        return params;\r\n    }\r\n}\r\nRegistry.register('LDRVideo', LDRVideo);\r\nexport { LDRVideo };\r\n//# sourceMappingURL=LDRVideo.js.map","//@ts-nocheck\r\nvar count;\r\n// Stream object for reading off bytes from a byte array\r\nfunction ByteStream(data) {\r\n    this.data = data;\r\n    this.pos = 0;\r\n}\r\n// read the next byte off the stream\r\nByteStream.prototype.readByte = function () {\r\n    return this.data[this.pos++];\r\n};\r\n// look at the next byte in the stream without updating the stream position\r\nByteStream.prototype.peekByte = function () {\r\n    return this.data[this.pos];\r\n};\r\n// read an array of bytes\r\nByteStream.prototype.readBytes = function (n) {\r\n    var bytes = new Array(n);\r\n    for (var i = 0; i < n; i++) {\r\n        bytes[i] = this.readByte();\r\n    }\r\n    return bytes;\r\n};\r\n// peek at an array of bytes without updating the stream position\r\nByteStream.prototype.peekBytes = function (n) {\r\n    var bytes = new Array(n);\r\n    for (var i = 0; i < n; i++) {\r\n        bytes[i] = this.data[this.pos + i];\r\n    }\r\n    return bytes;\r\n};\r\n// read a string from a byte set\r\nByteStream.prototype.readString = function (len) {\r\n    var str = '';\r\n    for (var i = 0; i < len; i++) {\r\n        str += String.fromCharCode(this.readByte());\r\n    }\r\n    return str;\r\n};\r\n// read a single byte and return an array of bit booleans\r\nByteStream.prototype.readBitArray = function () {\r\n    var arr = [];\r\n    var bite = this.readByte();\r\n    for (var i = 7; i >= 0; i--) {\r\n        arr.push(!!(bite & (1 << i)));\r\n    }\r\n    return arr;\r\n};\r\n// read an unsigned int with endian option\r\nByteStream.prototype.readUnsigned = function (littleEndian) {\r\n    var a = this.readBytes(2);\r\n    if (littleEndian) {\r\n        return (a[1] << 8) + a[0];\r\n    }\r\n    else {\r\n        return (a[0] << 8) + a[1];\r\n    }\r\n};\r\nfunction DataParser(data) {\r\n    //@ts-ignore\r\n    this.stream = new ByteStream(data);\r\n    // the final parsed object from the data\r\n    this.output = {};\r\n}\r\nDataParser.prototype.parse = function (schema) {\r\n    // the top level schema is just the top level parts array\r\n    this.parseParts(this.output, schema);\r\n    return this.output;\r\n};\r\n// parse a set of hierarchy parts providing the parent object, and the subschema\r\nDataParser.prototype.parseParts = function (obj, schema) {\r\n    for (var i = 0; i < schema.length; i++) {\r\n        var part = schema[i];\r\n        this.parsePart(obj, part);\r\n    }\r\n};\r\nDataParser.prototype.parsePart = function (obj, part) {\r\n    var name = part.label;\r\n    var value;\r\n    // make sure the part meets any parse requirements\r\n    if (part.requires && !part.requires(this.stream, this.output, obj)) {\r\n        return;\r\n    }\r\n    if (part.loop) {\r\n        // create a parse loop over the parts\r\n        var items = [];\r\n        while (part.loop(this.stream)) {\r\n            var item = {};\r\n            this.parseParts(item, part.parts);\r\n            items.push(item);\r\n        }\r\n        obj[name] = items;\r\n    }\r\n    else if (part.parts) {\r\n        // process any child parts\r\n        value = {};\r\n        this.parseParts(value, part.parts);\r\n        obj[name] = value;\r\n    }\r\n    else if (part.parser) {\r\n        // parse the value using a parser\r\n        value = part.parser(this.stream, this.output, obj);\r\n        if (!part.skip) {\r\n            obj[name] = value;\r\n        }\r\n    }\r\n    else if (part.bits) {\r\n        // convert the next byte to a set of bit fields\r\n        obj[name] = this.parseBits(part.bits);\r\n    }\r\n};\r\n// combine bits to calculate value\r\nfunction bitsToNum(bitArray) {\r\n    return bitArray.reduce(function (s, n) {\r\n        return s * 2 + n;\r\n    }, 0);\r\n}\r\n// parse a byte as a bit set (flags and values)\r\nDataParser.prototype.parseBits = function (details) {\r\n    var out = {};\r\n    var bits = this.stream.readBitArray();\r\n    for (var key in details) {\r\n        var item = details[key];\r\n        if (item.length) {\r\n            // convert the bit set to value\r\n            out[key] = bitsToNum(bits.slice(item.index, item.index + item.length));\r\n        }\r\n        else {\r\n            out[key] = bits[item.index];\r\n        }\r\n    }\r\n    return out;\r\n};\r\n// a set of common parsers used with DataParser\r\nvar Parsers = {\r\n    // read a byte\r\n    readByte: function () {\r\n        return function (stream) {\r\n            return stream.readByte();\r\n        };\r\n    },\r\n    // read an array of bytes\r\n    readBytes: function (length) {\r\n        return function (stream) {\r\n            return stream.readBytes(length);\r\n        };\r\n    },\r\n    // read a string from bytes\r\n    readString: function (length) {\r\n        return function (stream) {\r\n            return stream.readString(length);\r\n        };\r\n    },\r\n    // read an unsigned int (with endian)\r\n    readUnsigned: function (littleEndian) {\r\n        return function (stream) {\r\n            return stream.readUnsigned(littleEndian);\r\n        };\r\n    },\r\n    // read an array of byte sets\r\n    readArray: function (size, countFunc) {\r\n        return function (stream, obj, parent) {\r\n            var count = countFunc(stream, obj, parent);\r\n            var arr = new Array(count);\r\n            for (var i = 0; i < count; i++) {\r\n                arr[i] = stream.readBytes(size);\r\n            }\r\n            return arr;\r\n        };\r\n    },\r\n};\r\n// object used to represent array buffer data for a gif file\r\n// a set of 0x00 terminated subblocks\r\nvar subBlocks = {\r\n    label: 'blocks',\r\n    parser: function (stream) {\r\n        var out = [];\r\n        var terminator = 0x00;\r\n        for (var size = stream.readByte(); size !== terminator; size = stream.readByte()) {\r\n            out = out.concat(stream.readBytes(size));\r\n        }\r\n        return out;\r\n    },\r\n};\r\n// global control extension\r\nvar gce = {\r\n    label: 'gce',\r\n    requires: function (stream) {\r\n        // just peek at the top two bytes, and if true do this\r\n        var codes = stream.peekBytes(2);\r\n        return codes[0] === 0x21 && codes[1] === 0xf9;\r\n    },\r\n    parts: [\r\n        { label: 'codes', parser: Parsers.readBytes(2), skip: true },\r\n        { label: 'byteSize', parser: Parsers.readByte() },\r\n        {\r\n            label: 'extras',\r\n            bits: {\r\n                future: { index: 0, length: 3 },\r\n                disposal: { index: 3, length: 3 },\r\n                userInput: { index: 6 },\r\n                transparentColorGiven: { index: 7 },\r\n            },\r\n        },\r\n        { label: 'delay', parser: Parsers.readUnsigned(true) },\r\n        { label: 'transparentColorIndex', parser: Parsers.readByte() },\r\n        { label: 'terminator', parser: Parsers.readByte(), skip: true },\r\n    ],\r\n};\r\n// image pipeline block\r\nvar image = {\r\n    label: 'image',\r\n    requires: function (stream) {\r\n        // peek at the next byte\r\n        var code = stream.peekByte();\r\n        return code === 0x2c;\r\n    },\r\n    parts: [\r\n        { label: 'code', parser: Parsers.readByte(), skip: true },\r\n        {\r\n            label: 'descriptor',\r\n            parts: [\r\n                { label: 'left', parser: Parsers.readUnsigned(true) },\r\n                { label: 'top', parser: Parsers.readUnsigned(true) },\r\n                { label: 'width', parser: Parsers.readUnsigned(true) },\r\n                { label: 'height', parser: Parsers.readUnsigned(true) },\r\n                {\r\n                    label: 'lct',\r\n                    bits: {\r\n                        exists: { index: 0 },\r\n                        interlaced: { index: 1 },\r\n                        sort: { index: 2 },\r\n                        future: { index: 3, length: 2 },\r\n                        size: { index: 5, length: 3 },\r\n                    },\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            label: 'lct',\r\n            requires: function (stream, obj, parent) {\r\n                return parent.descriptor.lct.exists;\r\n            },\r\n            parser: Parsers.readArray(3, function (stream, obj, parent) {\r\n                return Math.pow(2, parent.descriptor.lct.size + 1);\r\n            }),\r\n        },\r\n        {\r\n            label: 'data',\r\n            parts: [{ label: 'minCodeSize', parser: Parsers.readByte() }, subBlocks],\r\n        },\r\n    ],\r\n};\r\n// plain text block\r\nvar text = {\r\n    label: 'text',\r\n    requires: function (stream) {\r\n        // just peek at the top two bytes, and if true do this\r\n        var codes = stream.peekBytes(2);\r\n        return codes[0] === 0x21 && codes[1] === 0x01;\r\n    },\r\n    parts: [\r\n        { label: 'codes', parser: Parsers.readBytes(2), skip: true },\r\n        { label: 'blockSize', parser: Parsers.readByte() },\r\n        {\r\n            label: 'preData',\r\n            parser: function (stream, obj, parent) {\r\n                return stream.readBytes(parent.text.blockSize);\r\n            },\r\n        },\r\n        subBlocks,\r\n    ],\r\n};\r\n// application block\r\nvar application = {\r\n    label: 'application',\r\n    requires: function (stream, obj, parent) {\r\n        // make sure this frame doesn't already have a gce, text, comment, or image\r\n        // as that means this block should be attached to the next frame\r\n        //if(parent.gce || parent.text || parent.image || parent.comment){ return false; }\r\n        // peek at the top two bytes\r\n        var codes = stream.peekBytes(2);\r\n        return codes[0] === 0x21 && codes[1] === 0xff;\r\n    },\r\n    parts: [\r\n        { label: 'codes', parser: Parsers.readBytes(2), skip: true },\r\n        { label: 'blockSize', parser: Parsers.readByte() },\r\n        {\r\n            label: 'id',\r\n            parser: function (stream, obj, parent) {\r\n                return stream.readString(parent.blockSize);\r\n            },\r\n        },\r\n        subBlocks,\r\n    ],\r\n};\r\n// comment block\r\nvar comment = {\r\n    label: 'comment',\r\n    requires: function (stream, obj, parent) {\r\n        // make sure this frame doesn't already have a gce, text, comment, or image\r\n        // as that means this block should be attached to the next frame\r\n        //if(parent.gce || parent.text || parent.image || parent.comment){ return false; }\r\n        // peek at the top two bytes\r\n        var codes = stream.peekBytes(2);\r\n        return codes[0] === 0x21 && codes[1] === 0xfe;\r\n    },\r\n    parts: [{ label: 'codes', parser: Parsers.readBytes(2), skip: true }, subBlocks],\r\n};\r\n// frames of ext and image data\r\nvar frames = {\r\n    label: 'frames',\r\n    parts: [gce, application, comment, image, text],\r\n    loop: function (stream) {\r\n        var nextCode = stream.peekByte();\r\n        // rather than check for a terminator, we should check for the existence\r\n        // of an ext or image block to avoid infinite loops\r\n        //var terminator = 0x3B;\r\n        //return nextCode !== terminator;\r\n        return nextCode === 0x21 || nextCode === 0x2c;\r\n    },\r\n};\r\n// main GIF schema\r\nvar schemaGIF = [\r\n    {\r\n        label: 'header',\r\n        parts: [\r\n            { label: 'signature', parser: Parsers.readString(3) },\r\n            { label: 'version', parser: Parsers.readString(3) },\r\n        ],\r\n    },\r\n    {\r\n        label: 'lsd',\r\n        parts: [\r\n            { label: 'width', parser: Parsers.readUnsigned(true) },\r\n            { label: 'height', parser: Parsers.readUnsigned(true) },\r\n            {\r\n                label: 'gct',\r\n                bits: {\r\n                    exists: { index: 0 },\r\n                    resolution: { index: 1, length: 3 },\r\n                    sort: { index: 4 },\r\n                    size: { index: 5, length: 3 },\r\n                },\r\n            },\r\n            { label: 'backgroundColorIndex', parser: Parsers.readByte() },\r\n            { label: 'pixelAspectRatio', parser: Parsers.readByte() },\r\n        ],\r\n    },\r\n    {\r\n        label: 'gct',\r\n        requires: function (stream, obj) {\r\n            return obj.lsd.gct.exists;\r\n        },\r\n        parser: Parsers.readArray(3, function (stream, obj) {\r\n            return Math.pow(2, obj.lsd.gct.size + 1);\r\n        }),\r\n    },\r\n    frames, // content frames\r\n];\r\nvar gifSchema = schemaGIF;\r\nfunction GIF(arrayBuffer) {\r\n    // convert to byte array\r\n    var byteData = new Uint8Array(arrayBuffer);\r\n    //@ts-ignore\r\n    var parser = new DataParser(byteData);\r\n    // parse the data\r\n    this.raw = parser.parse(gifSchema);\r\n    // set a flag to make sure the gif contains at least one image\r\n    this.raw.hasImages = false;\r\n    for (var f = 0; f < this.raw.frames.length; f++) {\r\n        if (this.raw.frames[f].image) {\r\n            this.raw.hasImages = true;\r\n            break;\r\n        }\r\n    }\r\n}\r\n// process a single gif image frames data, decompressing it using LZW\r\n// if buildPatch is true, the returned image will be a clamped 8 bit image patch\r\n// for use directly with a canvas.\r\nGIF.prototype.decompressFrame = function (index, buildPatch) {\r\n    // make sure a valid frame is requested\r\n    if (index >= this.raw.frames.length) {\r\n        return null;\r\n    }\r\n    var frame = this.raw.frames[index];\r\n    if (frame.image) {\r\n        // get the number of pixels\r\n        var totalPixels = frame.image.descriptor.width * frame.image.descriptor.height;\r\n        // do lzw decompression\r\n        var pixels = lzw(frame.image.data.minCodeSize, frame.image.data.blocks, totalPixels);\r\n        // deal with interlacing if necessary\r\n        if (frame.image.descriptor.lct.interlaced) {\r\n            pixels = deinterlace(pixels, frame.image.descriptor.width);\r\n        }\r\n        // setup usable image object\r\n        var image = {\r\n            pixels: pixels,\r\n            dims: {\r\n                top: frame.image.descriptor.top,\r\n                left: frame.image.descriptor.left,\r\n                width: frame.image.descriptor.width,\r\n                height: frame.image.descriptor.height,\r\n            },\r\n        };\r\n        // color table\r\n        if (frame.image.descriptor.lct && frame.image.descriptor.lct.exists) {\r\n            image.colorTable = frame.image.lct;\r\n        }\r\n        else {\r\n            image.colorTable = this.raw.gct;\r\n        }\r\n        // add per frame relevant gce information\r\n        if (frame.gce) {\r\n            image.delay = (frame.gce.delay || 10) * 10; // convert to ms\r\n            image.disposalType = frame.gce.extras.disposal;\r\n            // transparency\r\n            if (frame.gce.extras.transparentColorGiven) {\r\n                image.transparentIndex = frame.gce.transparentColorIndex;\r\n            }\r\n        }\r\n        // create canvas usable imagedata if desired\r\n        if (buildPatch) {\r\n            image.patch = generatePatch(image);\r\n        }\r\n        return image;\r\n    }\r\n    // frame does not contains image\r\n    return null;\r\n    /**\r\n     * javascript port of java LZW decompression\r\n     * Original java author url: https://gist.github.com/devunwired/4479231\r\n     */\r\n    function lzw(minCodeSize, data, pixelCount) {\r\n        var MAX_STACK_SIZE = 4096;\r\n        var nullCode = -1;\r\n        var npix = pixelCount;\r\n        var available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, i, datum, data_size, first, top, bi, pi;\r\n        var dstPixels = new Array(pixelCount);\r\n        var prefix = new Array(MAX_STACK_SIZE);\r\n        var suffix = new Array(MAX_STACK_SIZE);\r\n        var pixelStack = new Array(MAX_STACK_SIZE + 1);\r\n        // Initialize GIF data stream decoder.\r\n        data_size = minCodeSize;\r\n        clear = 1 << data_size;\r\n        end_of_information = clear + 1;\r\n        available = clear + 2;\r\n        old_code = nullCode;\r\n        code_size = data_size + 1;\r\n        code_mask = (1 << code_size) - 1;\r\n        for (code = 0; code < clear; code++) {\r\n            prefix[code] = 0;\r\n            suffix[code] = code;\r\n        }\r\n        // Decode GIF pixel stream.\r\n        datum = bits = count = first = top = pi = bi = 0;\r\n        for (i = 0; i < npix;) {\r\n            if (top === 0) {\r\n                if (bits < code_size) {\r\n                    // get the next byte\r\n                    datum += data[bi] << bits;\r\n                    bits += 8;\r\n                    bi++;\r\n                    continue;\r\n                }\r\n                // Get the next code.\r\n                code = datum & code_mask;\r\n                datum >>= code_size;\r\n                bits -= code_size;\r\n                // Interpret the code\r\n                if (code > available || code == end_of_information) {\r\n                    break;\r\n                }\r\n                if (code == clear) {\r\n                    // Reset decoder.\r\n                    code_size = data_size + 1;\r\n                    code_mask = (1 << code_size) - 1;\r\n                    available = clear + 2;\r\n                    old_code = nullCode;\r\n                    continue;\r\n                }\r\n                if (old_code == nullCode) {\r\n                    pixelStack[top++] = suffix[code];\r\n                    old_code = code;\r\n                    first = code;\r\n                    continue;\r\n                }\r\n                in_code = code;\r\n                if (code == available) {\r\n                    pixelStack[top++] = first;\r\n                    code = old_code;\r\n                }\r\n                while (code > clear) {\r\n                    pixelStack[top++] = suffix[code];\r\n                    code = prefix[code];\r\n                }\r\n                first = suffix[code] & 0xff;\r\n                pixelStack[top++] = first;\r\n                // add a new string to the table, but only if space is available\r\n                // if not, just continue with current table until a clear code is found\r\n                // (deferred clear code implementation as per GIF spec)\r\n                if (available < MAX_STACK_SIZE) {\r\n                    prefix[available] = old_code;\r\n                    suffix[available] = first;\r\n                    available++;\r\n                    if ((available & code_mask) === 0 && available < MAX_STACK_SIZE) {\r\n                        code_size++;\r\n                        code_mask += available;\r\n                    }\r\n                }\r\n                old_code = in_code;\r\n            }\r\n            // Pop a pixel off the pixel stack.\r\n            top--;\r\n            dstPixels[pi++] = pixelStack[top];\r\n            i++;\r\n        }\r\n        for (i = pi; i < npix; i++) {\r\n            dstPixels[i] = 0; // clear missing pixels\r\n        }\r\n        return dstPixels;\r\n    }\r\n    // deinterlace function from https://github.com/shachaf/jsgif\r\n    function deinterlace(pixels, width) {\r\n        var newPixels = new Array(pixels.length);\r\n        var rows = pixels.length / width;\r\n        var cpRow = function (toRow, fromRow) {\r\n            var fromPixels = pixels.slice(fromRow * width, (fromRow + 1) * width);\r\n            newPixels.splice.apply(newPixels, [toRow * width, width].concat(fromPixels));\r\n        };\r\n        // See appendix E.\r\n        var offsets = [0, 4, 2, 1];\r\n        var steps = [8, 8, 4, 2];\r\n        var fromRow = 0;\r\n        for (var pass = 0; pass < 4; pass++) {\r\n            for (var toRow = offsets[pass]; toRow < rows; toRow += steps[pass]) {\r\n                cpRow(toRow, fromRow);\r\n                fromRow++;\r\n            }\r\n        }\r\n        return newPixels;\r\n    }\r\n    // create a clamped byte array patch for the frame image to be used directly with a canvas\r\n    // TODO: could potentially squeeze some performance by doing a direct 32bit write per iteration\r\n    function generatePatch(image) {\r\n        var totalPixels = image.pixels.length;\r\n        var patchData = new Uint8ClampedArray(totalPixels * 4);\r\n        for (var i = 0; i < totalPixels; i++) {\r\n            var pos = i * 4;\r\n            var colorIndex = image.pixels[i];\r\n            var color = image.colorTable[colorIndex];\r\n            patchData[pos] = color[0];\r\n            patchData[pos + 1] = color[1];\r\n            patchData[pos + 2] = color[2];\r\n            patchData[pos + 3] = colorIndex !== image.transparentIndex ? 255 : 0;\r\n        }\r\n        return patchData;\r\n    }\r\n};\r\n// returns all frames decompressed\r\nGIF.prototype.decompressFrames = function (buildPatch) {\r\n    var frames = [];\r\n    for (var i = 0; i < this.raw.frames.length; i++) {\r\n        var frame = this.raw.frames[i];\r\n        if (frame.image) {\r\n            frames.push(this.decompressFrame(i, buildPatch));\r\n        }\r\n    }\r\n    return frames;\r\n};\r\nexport { GIF };\r\n//# sourceMappingURL=gifuct-js.js.map","/* eslint-disable prefer-promise-reject-errors */\r\nimport { Vec4 } from '../../Math/index';\r\nimport { loadBinfile } from '../Utils';\r\nimport { Registry } from '../../Registry';\r\nimport { FileImage } from './FileImage';\r\nimport { GIF } from '../../external/gifuct-js';\r\nimport { resourceLoader } from '../resourceLoader';\r\nimport { NumberParameter, Vec4Parameter } from '../Parameters/index';\r\nimport { MathFunctions } from '../../Utilities/MathFunctions';\r\nconst imageDataLibrary = {};\r\n/**\r\n * Class representing a GIF image.\r\n *\r\n * ```\r\n * const image = new GIFImage()\r\n * image.load(\"https://storage.googleapis.com/zea-playground-assets/zea-engine/texture.gif\")\r\n * ```\r\n *\r\n * **Parameters**\r\n * * **StreamAtlasDesc:**\r\n * * **StreamAtlasIndex:**\r\n *\r\n * **Events**\r\n * * **loaded:** Triggered when the gif data is loaded.\r\n *\r\n * **File Types:** gif\r\n *\r\n * @extends FileImage\r\n */\r\nclass GIFImage extends FileImage {\r\n    /**\r\n     * Create a GIF image.\r\n     * @param name - The name value.\r\n     * @param filePath - The filePath value.\r\n     * @param params - The params value.\r\n     */\r\n    constructor(name, filePath = '', params = {}) {\r\n        super(name, filePath, params);\r\n        this.streamAtlasDescParam = new Vec4Parameter('StreamAtlasDesc');\r\n        this.streamAtlasIndexParam = new NumberParameter('StreamAtlasIndex', 0);\r\n        this.format = 'RGBA';\r\n        this.type = 'UNSIGNED_BYTE';\r\n        this.__streamAtlas = true;\r\n        this.addParameter(this.streamAtlasDescParam);\r\n        this.addParameter(this.streamAtlasIndexParam);\r\n        const frameParam = this.streamAtlasIndexParam;\r\n        frameParam.setRange([0, 1]);\r\n        let playing;\r\n        let frame = 0;\r\n        const incrementFrame = (numFrames) => {\r\n            frameParam.value = frame;\r\n            if (playing)\r\n                setTimeout(() => incrementFrame(numFrames), this.getFrameDelay(frame));\r\n            frame = (frame + 1) % numFrames;\r\n        };\r\n        this.play = () => {\r\n            this.__resourcePromise.then(() => {\r\n                playing = true;\r\n                let frameParam_check = frameParam.getRange();\r\n                if (!frameParam_check) {\r\n                    // should range be always be intialized?\r\n                    console.warn('numFrames is null');\r\n                    return;\r\n                }\r\n                const numFrames = frameParam_check[1];\r\n                incrementFrame(numFrames);\r\n            });\r\n        };\r\n        this.stop = () => {\r\n            playing = false;\r\n        };\r\n    }\r\n    /**\r\n     * The getFrameDelay method.\r\n     * @param index - The index value.\r\n     * @return - The return value.\r\n     */\r\n    getFrameDelay(index) {\r\n        // Note: Frame delays are in centisecs (not millisecs which the timers will require.)\r\n        return this.__unpackedData.frameDelays[index] * 10;\r\n    }\r\n    /**\r\n     * Uses the specify url to load an Image element and adds it to the data library.\r\n     * Sets the state of the current object.\r\n     *\r\n     * @param url - The url value.\r\n     * @param format - The format value.\r\n     * @return Returns a promise that resolves once the image is loaded.\r\n     */\r\n    load(url, format = 'RGB') {\r\n        // this.__streamAtlasDesc = new Vec4();\r\n        if (url in imageDataLibrary) {\r\n            this.__resourcePromise = imageDataLibrary[url];\r\n            return this.__resourcePromise;\r\n        }\r\n        else {\r\n            this.__resourcePromise = new Promise((resolve, reject) => {\r\n                resourceLoader.incrementWorkload(1);\r\n                // if (fileDesc.assets && fileDesc.assets.atlas) {\r\n                //   const imageElem = new Image()\r\n                //   imageElem.crossOrigin = 'anonymous'\r\n                //   imageElem.src = fileDesc.assets.atlas.url\r\n                //   imageElem.addEventListener('load', () => {\r\n                //     resolve({\r\n                //       width: fileDesc.assets.atlas.width,\r\n                //       height: fileDesc.assets.atlas.height,\r\n                //       atlasSize: fileDesc.assets.atlas.atlasSize,\r\n                //       frameDelays: fileDesc.assets.atlas.frameDelays,\r\n                //       frameRange: [0, fileDesc.assets.atlas.frameDelays.length],\r\n                //       imageData: imageElem,\r\n                //     })\r\n                //     resourceLoader.incrementWorkDone(1)\r\n                //   })\r\n                //   return\r\n                // }\r\n                loadBinfile(url, (data) => {\r\n                    console.warn('Unpacking Gif client side:' + url);\r\n                    const start = performance.now();\r\n                    // Decompressing using: https://github.com/matt-way/gifuct-js\r\n                    //@ts-ignore\r\n                    const gif = new GIF(data);\r\n                    const frames = gif.decompressFrames(true);\r\n                    // do something with the frame data\r\n                    const sideLength = Math.sqrt(frames.length);\r\n                    const atlasSize = [sideLength, sideLength];\r\n                    if (MathFunctions.fract(sideLength) > 0.0) {\r\n                        atlasSize[0] = Math.floor(atlasSize[0] + 1);\r\n                        if (MathFunctions.fract(sideLength) > 0.5) {\r\n                            atlasSize[1] = Math.floor(atlasSize[1] + 1);\r\n                        }\r\n                        else {\r\n                            atlasSize[1] = Math.floor(atlasSize[1]);\r\n                        }\r\n                    }\r\n                    const width = frames[0].dims.width;\r\n                    const height = frames[0].dims.height;\r\n                    // gif patch canvas\r\n                    const tempCanvas = document.createElement('canvas');\r\n                    const tempCtx = tempCanvas.getContext('2d');\r\n                    // full gif canvas\r\n                    const gifCanvas = document.createElement('canvas');\r\n                    const gifCtx = gifCanvas.getContext('2d');\r\n                    gifCanvas.width = width;\r\n                    gifCanvas.height = height;\r\n                    // The atlas for all the frames.\r\n                    const atlasCanvas = document.createElement('canvas');\r\n                    const atlasCtx = atlasCanvas.getContext('2d');\r\n                    atlasCanvas.width = atlasSize[0] * width;\r\n                    atlasCanvas.height = atlasSize[1] * height;\r\n                    let frameImageData;\r\n                    const frameDelays = [];\r\n                    const renderFrame = (frame, index) => {\r\n                        const dims = frame.dims;\r\n                        // Note: the server side library returns centisecs (1/100 second) for\r\n                        // frame delays, so normalize here so that client and servers\r\n                        // valueus are in the\r\n                        frameDelays.push(frame.delay / 10);\r\n                        if (!frameImageData || dims.width != frameImageData.width || dims.height != frameImageData.height) {\r\n                            tempCanvas.width = dims.width;\r\n                            tempCanvas.height = dims.height;\r\n                            frameImageData = tempCtx === null || tempCtx === void 0 ? void 0 : tempCtx.createImageData(dims.width, dims.height);\r\n                        }\r\n                        // set the patch data as an override\r\n                        frameImageData.data.set(frame.patch);\r\n                        tempCtx === null || tempCtx === void 0 ? void 0 : tempCtx.putImageData(frameImageData, 0, 0);\r\n                        // Note: undocumented disposal method.\r\n                        // See Ids here: https://github.com/theturtle32/Flash-Animated-GIF-Library/blob/master/AS3GifPlayer/src/com/worlize/gif/constants/DisposalType.as\r\n                        // From what I can gather, 2 means we should clear the background first.\r\n                        // this seems to work with Gifs featuring moving transparency.\r\n                        // For fully opaque gifs, we should avoid this.\r\n                        if (frame.disposalType == 2)\r\n                            gifCtx === null || gifCtx === void 0 ? void 0 : gifCtx.clearRect(0, 0, gifCanvas.width, gifCanvas.height);\r\n                        gifCtx === null || gifCtx === void 0 ? void 0 : gifCtx.drawImage(tempCanvas, dims.left, dims.top);\r\n                        atlasCtx === null || atlasCtx === void 0 ? void 0 : atlasCtx.drawImage(gifCanvas, (index % atlasSize[0]) * width, Math.floor(index / atlasSize[0]) * height);\r\n                    };\r\n                    for (let i = 0; i < frames.length; i++) {\r\n                        // console.log(frame);\r\n                        renderFrame(frames[i], i);\r\n                    }\r\n                    resourceLoader.incrementWorkDone(1);\r\n                    const imageData = atlasCtx === null || atlasCtx === void 0 ? void 0 : atlasCtx.getImageData(0, 0, atlasCanvas.width, atlasCanvas.height);\r\n                    const ms = performance.now() - start;\r\n                    console.log(`Decode GIF '${url}' time:` + ms);\r\n                    resolve({\r\n                        width: atlasCanvas.width,\r\n                        height: atlasCanvas.height,\r\n                        atlasSize,\r\n                        frameRange: [0, frames.length],\r\n                        frameDelays,\r\n                        imageData,\r\n                    });\r\n                }, (statusText) => {\r\n                    const msg = 'Unable to Load URL:' + statusText + ':' + url;\r\n                    console.warn(msg);\r\n                    reject(msg);\r\n                });\r\n            });\r\n            imageDataLibrary[url] = this.__resourcePromise;\r\n        }\r\n        this.__resourcePromise.then((unpackedData) => {\r\n            this.width = unpackedData.width;\r\n            this.height = unpackedData.height;\r\n            this.streamAtlasDescParam.value = new Vec4(unpackedData.atlasSize[0], unpackedData.atlasSize[1], 0, 0);\r\n            this.streamAtlasIndexParam.setRange(unpackedData.frameRange);\r\n            this.__unpackedData = unpackedData;\r\n            this.__data = unpackedData.imageData;\r\n            // ////////////////////////\r\n            // Playback\r\n            this.loaded = true;\r\n            this.emit('loaded');\r\n        });\r\n        return this.__resourcePromise;\r\n    }\r\n}\r\nRegistry.register('GIFImage', GIFImage);\r\nexport { GIFImage };\r\n//# sourceMappingURL=GIFImage.js.map","/* eslint-disable new-cap */\r\n/* eslint-disable require-jsdoc */\r\nimport { Color } from '../../Math/index';\r\nimport { Registry } from '../../Registry';\r\nimport { VLHImage } from './VLHImage';\r\nimport { BooleanParameter } from '../Parameters/BooleanParameter';\r\n/**\r\n * An EnvMap can load High Dynamic Range environment map images, necessary for high quality PBR lighting.\r\n *\r\n *\r\n * **Parameters**\r\n * * **HeadLightMode(`BooleanParameter`):** Enables Headlight mode so that the environment lighting is aligned with the camera.\r\n * With Headlight mode on, the top of the env map is aligned with the direction of the camera, so a the view is generally well lit.\r\n *\r\n * @extends VLHImage\r\n */\r\nclass EnvMap extends VLHImage {\r\n    /**\r\n     * Create an env map.\r\n     * @param name - The name value.\r\n     * @param params - The params value.\r\n     */\r\n    constructor(name, params = {}) {\r\n        super(name, params);\r\n        this.headlightModeParam = new BooleanParameter('HeadLightMode', false);\r\n        this.addParameter(this.headlightModeParam);\r\n        this.utf8decoder = new TextDecoder();\r\n        this.shCoeffs = [];\r\n    }\r\n    /**\r\n     * The __decodeData method.\r\n     * @param entries - The entries value.\r\n     * @return\r\n     * @private\r\n     */\r\n    __decodeData(entries) {\r\n        const samples = entries.samples;\r\n        if (samples) {\r\n            this.luminanceData = JSON.parse(this.utf8decoder.decode(samples));\r\n            if (this.luminanceData.shCoeffs) {\r\n                for (let i = 0; i < 9; i++) {\r\n                    this.shCoeffs[i] = new Color(this.luminanceData.shCoeffs[i * 3 + 0], this.luminanceData.shCoeffs[i * 3 + 1], this.luminanceData.shCoeffs[i * 3 + 2]);\r\n                }\r\n            }\r\n        }\r\n        return super.__decodeData(entries);\r\n    }\r\n    /**\r\n     * Calculate the luminance of the Environment in the direction.\r\n     *\r\n     * @param dir - The dir value.\r\n     * @return - The return value.\r\n     */\r\n    dirToLuminance(dir) {\r\n        // normal is assumed to have unit length\r\n        const x = dir.x;\r\n        const y = dir.y;\r\n        const z = dir.z;\r\n        // band 0\r\n        const result = this.shCoeffs[0].scale(0.886227);\r\n        // band 1\r\n        result.addInPlace(this.shCoeffs[1].scale(2.0 * 0.511664 * y));\r\n        result.addInPlace(this.shCoeffs[2].scale(2.0 * 0.511664 * z));\r\n        result.addInPlace(this.shCoeffs[3].scale(2.0 * 0.511664 * x));\r\n        // band 2\r\n        result.addInPlace(this.shCoeffs[4].scale(2.0 * 0.429043 * x * y));\r\n        result.addInPlace(this.shCoeffs[5].scale(2.0 * 0.429043 * y * z));\r\n        result.addInPlace(this.shCoeffs[6].scale(0.743125 * z * z - 0.247708));\r\n        result.addInPlace(this.shCoeffs[7].scale(2.0 * 0.429043 * x * z));\r\n        result.addInPlace(this.shCoeffs[8].scale(0.429043 * (x * x - y * y)));\r\n        return result.luminance();\r\n    }\r\n}\r\nRegistry.register('EnvMap', EnvMap);\r\nexport { EnvMap };\r\n//# sourceMappingURL=EnvMap.js.map","import { EventEmitter } from '../../Utilities/index';\r\nimport { loadTextfile, loadBinfile } from '../Utils';\r\n// eslint-disable-next-line require-jsdoc\r\nfunction getLanguage() {\r\n    if (!globalThis.navigator)\r\n        return 'en';\r\n    // Check if a language is explicitly selected.\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    if (searchParams.has('lang'))\r\n        return searchParams.get('lang');\r\n    const nav = globalThis.navigator;\r\n    let i;\r\n    let language;\r\n    const clean = (language) => {\r\n        if (language.startsWith('en'))\r\n            return 'En';\r\n        else if (language.startsWith('es'))\r\n            return 'Es';\r\n        else if (language.startsWith('fr'))\r\n            return 'Fr';\r\n        else if (language.startsWith('gb') || language.startsWith('de'))\r\n            return 'Gb';\r\n        return language;\r\n    };\r\n    // support for HTML 5.1 \"navigator.languages\"\r\n    if (Array.isArray(nav.languages)) {\r\n        for (i = 0; i < nav.languages.length; i++) {\r\n            language = nav.languages[i];\r\n            if (language && language.length) {\r\n                return clean(language);\r\n            }\r\n        }\r\n    }\r\n    // support for other well known properties in browsers\r\n    // const browserLanguagePropertyKeys = ['language', 'browserLanguage', 'systemLanguage', 'userLanguage']\r\n    // for (i = 0; i < browserLanguagePropertyKeys.length; i++) {\r\n    //   language = nav[browserLanguagePropertyKeys[i]]\r\n    //   if (language && language.length) {\r\n    //     return clean(language)\r\n    //   }\r\n    // }\r\n    return null;\r\n}\r\n/** Class representing a label manager.\r\n * @private\r\n */\r\nclass LabelManager extends EventEmitter {\r\n    /**\r\n     * Create a label manager.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.__labelLibraries = {};\r\n        this.__language = getLanguage();\r\n        this.__foundLabelLibraries = {};\r\n    }\r\n    /**\r\n     * Load a label library into the manager.\r\n     * @param name - The name of the library.\r\n     * @param url- The json data of of the library.\r\n     */\r\n    loadLibrary(name, url) {\r\n        const stem = name.substring(0, name.lastIndexOf('.'));\r\n        this.__foundLabelLibraries[stem] = url;\r\n        if (name.endsWith('.labels')) {\r\n            loadTextfile(url, (text) => {\r\n                this.__labelLibraries[stem] = JSON.parse(text);\r\n                this.emit('labelLibraryLoaded', { library: stem });\r\n            });\r\n        }\r\n        else if (name.endsWith('.xlsx')) {\r\n            // @ts-ignore\r\n            const XLSX = globalThis.XLSX;\r\n            // Note: example taken from here..\r\n            // https://stackoverflow.com/questions/8238407/how-to-parse-excel-file-in-javascript-html5\r\n            // and here:\r\n            // https://github.com/SheetJS/js-xlsx/tree/master/demos/xhr\r\n            loadBinfile(url, (data) => {\r\n                const unit8array = new Uint8Array(data);\r\n                // @ts-ignore\r\n                const workbook = XLSX.read(unit8array, {\r\n                    type: 'array',\r\n                });\r\n                const json = {};\r\n                workbook.SheetNames.forEach(function (sheetName) {\r\n                    // Here is your object\r\n                    // @ts-ignore\r\n                    const rows = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], {});\r\n                    // @ts-ignore\r\n                    rows.forEach(function (row) {\r\n                        const identifier = row.Identifier;\r\n                        delete row.Identifier;\r\n                        json[identifier] = row;\r\n                    });\r\n                });\r\n                this.__labelLibraries[stem] = json;\r\n                this.emit('labelLibraryLoaded', { library: stem });\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Checks if the library is found.\r\n     * @param name - The name of the library.\r\n     * @return - Returns true if the library is found.\r\n     */\r\n    isLibraryFound(name) {\r\n        return name in this.__foundLabelLibraries;\r\n    }\r\n    /**\r\n     * Checks if the library is loaded.\r\n     * @param name - The name of the library.\r\n     * @return - Returns true if the library is loaded.\r\n     */\r\n    isLibraryLoaded(name) {\r\n        return name in this.__labelLibraries;\r\n    }\r\n    /**\r\n     * The getLabelText method.\r\n     * @param libraryName - The name of the library.\r\n     * @param labelName - The name of the label.\r\n     * @return - The return value.\r\n     */\r\n    getLabelText(libraryName, labelName) {\r\n        const library = this.__labelLibraries[libraryName];\r\n        if (!library) {\r\n            throw new Error(\"LabelLibrary: '\" +\r\n                libraryName +\r\n                \"' not found in LabelManager. Found: [\" +\r\n                Object.keys(this.__labelLibraries) +\r\n                ']');\r\n        }\r\n        const label = library[labelName];\r\n        if (!label) {\r\n            throw new Error(\"Label: '\" +\r\n                labelName +\r\n                \"' not found in LabelLibrary: '\" +\r\n                libraryName +\r\n                \"'. Found: [\" +\r\n                Object.keys(library) +\r\n                ']');\r\n        }\r\n        const labelText = label[this.__language];\r\n        if (!labelText) {\r\n            if (label['En'])\r\n                return label['En'];\r\n            throw new Error(\"labelText: '\" + this.__language + \"' not found in Label. Found: [\" + Object.keys(label) + ']');\r\n        }\r\n        return labelText;\r\n    }\r\n    /**\r\n     * The setLabelText method.\r\n     * @param libraryName - The name of the library.\r\n     * @param labelName - The name of the label.\r\n     * @param labelText - The text of the label.\r\n     */\r\n    setLabelText(libraryName, labelName, labelText) {\r\n        let library = this.__labelLibraries[libraryName];\r\n        if (!library) {\r\n            library = {};\r\n            this.__labelLibraries[libraryName] = library;\r\n        }\r\n        let label = library[labelName];\r\n        if (!label) {\r\n            label = {};\r\n            library[labelName] = label;\r\n        }\r\n        label[this.__language] = labelText;\r\n        // TODO: Push to server.\r\n    }\r\n    setLanguage(ln) {\r\n        this.__language = ln;\r\n    }\r\n}\r\nconst labelManager = new LabelManager();\r\nexport { LabelManager, labelManager };\r\n//# sourceMappingURL=LabelManager.js.map","/* eslint-disable guard-for-in */\r\nimport { Color } from '../../Math/index';\r\nimport { BooleanParameter, NumberParameter, ColorParameter, StringParameter } from '../Parameters/index';\r\nimport { Registry } from '../../Registry';\r\nimport { DataImage } from './DataImage';\r\nimport { labelManager } from './LabelManager';\r\n// http://stackoverflow.com/questions/1255512/how-to-draw-a-rounded-rectangle-on-html-canvas\r\n/**\r\n * Draws a rounded rectangle using the current state of the canvas.\r\n * If you omit the last three params, it will draw a rectangle\r\n * outline with a 5 pixel border radius\r\n * @param ctx\r\n * @param x - The top left x coordinate\r\n * @param y - The top left y coordinate\r\n * @param width - The width of the rectangle\r\n * @param height - The height of the rectangle\r\n *\r\n * @param radius - The corner radius; It can also be an object to specify different radii for corners\r\n * @param radius.tl - Top left\r\n * @param radius.tr - Top right\r\n * @param radius.br - Bottom right\r\n * @param radius.bl - Bottom left\r\n *\r\n * @param fill - Whether to fill the rectangle.\r\n * @param stroke - Whether to stroke the rectangle.\r\n * @param strokeWidth - The strokeWidth param.\r\n * @private\r\n */\r\nfunction roundRect(ctx, x, y, width, height, radius, fill = false, stroke = true, strokeWidth) {\r\n    if (typeof stroke == 'undefined') {\r\n        stroke = true;\r\n    }\r\n    if (typeof radius === 'undefined') {\r\n        radius = 5;\r\n    }\r\n    if (typeof radius === 'number') {\r\n        radius = {\r\n            tl: radius,\r\n            tr: radius,\r\n            br: radius,\r\n            bl: radius,\r\n        };\r\n    }\r\n    else {\r\n        const defaultRadius = {\r\n            tl: 0,\r\n            tr: 0,\r\n            br: 0,\r\n            bl: 0,\r\n        };\r\n        for (const side in defaultRadius) {\r\n            radius[side] = radius[side] || defaultRadius[side];\r\n        }\r\n    }\r\n    ctx.beginPath();\r\n    ctx.moveTo(x + radius.tl, y);\r\n    ctx.lineTo(x + width - radius.tr, y);\r\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);\r\n    ctx.lineTo(x + width, y + height - radius.br);\r\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);\r\n    ctx.lineTo(x + radius.bl, y + height);\r\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);\r\n    ctx.lineTo(x, y + radius.tl);\r\n    ctx.quadraticCurveTo(x, y, x + radius.tl, y);\r\n    ctx.closePath();\r\n    if (fill) {\r\n        ctx.fill();\r\n    }\r\n    if (stroke) {\r\n        ctx.lineWidth = strokeWidth;\r\n        ctx.stroke();\r\n    }\r\n}\r\n// TODO: rewrite\r\n/**\r\n * Represents a 2D label item the scene.\r\n * Since displaying text in the scene is not an easy task,\r\n * we've abstracted the complicated logic behind this class, transforming any text into a 2D image(`DataImage`).\r\n *\r\n * **Library List**\r\n * * LabelPack\r\n *\r\n * **Parameters**\r\n * * **Library(`StringParameter`):** Library you wan to use for your label, see **Library List** above.\r\n * * **Text(`StringParameter`):**\r\n * * **FontColor(`ColorParameter`):**\r\n * * **Margin(`NumberParameter`):**\r\n * * **BorderWidth(`NumberParameter`):**\r\n * * **BorderRadius(`NumberParameter`):**\r\n * * **Outline(`BooleanParameter`):**\r\n * * **OutlineColor(`BooleanParameter`):**\r\n * * **Background(`BooleanParameter`):**\r\n * * **ColorParameter(`BackgroundColor`):**\r\n * * **FillBackground(`BooleanParameter`):**\r\n * * **StrokeBackgroundOutline(`BooleanParameter`):**\r\n * * **FontSize(`NumberParameter`):** Represents FontSize of the label\r\n * * **Font(`StringParameter`):**\r\n *\r\n * **Events**\r\n * * **loaded:** Triggered when label's data is loaded.\r\n * * **updated:** Triggered when label's data changes.\r\n * * **labelRendered:** Triggered when the text image is rendered. Contains `width`, `height` and data of the image.\r\n *\r\n * @extends DataImage\r\n */\r\nclass Label extends DataImage {\r\n    constructor(name, library) {\r\n        super(name);\r\n        this.requestedReRender = false;\r\n        /**\r\n         * @member libraryParam - Library you wan to use for your label, see **Library List** above.\r\n         */\r\n        this.libraryParam = new StringParameter('Library');\r\n        /**\r\n         * @member textParam - text to display on the label\r\n         */\r\n        this.textParam = new StringParameter('Text', '');\r\n        /**\r\n         * @member fontColorParam - TODO\r\n         */\r\n        this.fontColorParam = new ColorParameter('FontColor', new Color(0, 0, 0));\r\n        /**\r\n         * @member - TODO\r\n         */\r\n        this.fontSizeParam = new NumberParameter('FontSize', 22);\r\n        /**\r\n         * @member fontParam - TODO\r\n         */\r\n        this.fontParam = new StringParameter('Font', 'Helvetica');\r\n        /**\r\n         * @member borderWidthParam - Border around the label\r\n         */\r\n        this.borderWidthParam = new NumberParameter('BorderWidth', 2);\r\n        /**\r\n         * @member outlineParam - TODO\r\n         */\r\n        this.outlineParam = new BooleanParameter('Outline', false);\r\n        /**\r\n         * @member outlineColorParam - TODO\r\n         */\r\n        this.outlineColorParam = new ColorParameter('OutlineColor', new Color(0, 0, 0));\r\n        /**\r\n         * @member backgroundParam - TODO\r\n         */\r\n        this.backgroundParam = new BooleanParameter('Background', true);\r\n        /**\r\n         * @member backgroundColorParam - TODO\r\n         */\r\n        this.backgroundColorParam = new ColorParameter('BackgroundColor', new Color('#FBC02D'));\r\n        /**\r\n         * @member fillBackgroundParam - TODO\r\n         */\r\n        this.fillBackgroundParam = new BooleanParameter('FillBackground', true);\r\n        /**\r\n         * @member strokeBackgroundOutlineParam - TODO\r\n         */\r\n        this.strokeBackgroundOutlineParam = new BooleanParameter('StrokeBackgroundOutline', true);\r\n        this.canvasElem = document.createElement('canvas');\r\n        const fontSize = 22;\r\n        this.marginParam = new NumberParameter('Margin', fontSize * 0.5);\r\n        this.borderRadiusParam = new NumberParameter('BorderRadius', fontSize * 0.5);\r\n        this.addParameter(this.marginParam);\r\n        this.addParameter(this.borderRadiusParam);\r\n        this.addParameter(this.libraryParam);\r\n        this.addParameter(this.textParam);\r\n        this.addParameter(this.fontColorParam);\r\n        this.addParameter(this.fontSizeParam);\r\n        this.addParameter(this.fontParam);\r\n        this.addParameter(this.borderWidthParam);\r\n        this.addParameter(this.outlineParam);\r\n        this.addParameter(this.outlineColorParam);\r\n        this.addParameter(this.backgroundParam);\r\n        this.addParameter(this.backgroundColorParam);\r\n        this.addParameter(this.fillBackgroundParam);\r\n        this.addParameter(this.strokeBackgroundOutlineParam);\r\n        const reload = () => {\r\n            this.loadLabelData();\r\n        };\r\n        this.on('nameChanged', reload);\r\n        if (library)\r\n            this.libraryParam.value = library;\r\n        this.requestedReRender = false;\r\n        this.needsRender = false;\r\n        this.loadLabelData();\r\n    }\r\n    /**\r\n     * This method can be overridden in derived classes\r\n     * to perform general updates (see GLPass or BaseItem).\r\n     *\r\n     * @param event - The event object.\r\n     * @private\r\n     */\r\n    __parameterValueChanged(event) {\r\n        super.parameterValueChanged(event);\r\n        if (!this.requestedReRender) {\r\n            this.requestedReRender = true;\r\n            this.loadLabelData();\r\n        }\r\n    }\r\n    /**\r\n     * Method in charge of basically do everything, set text, load/update it, get the library, load the font, etc.\r\n     */\r\n    loadLabelData() {\r\n        const onLoaded = () => {\r\n            this.requestedReRender = false;\r\n            this.needsRender = true;\r\n            if (!this.__loaded) {\r\n                this.__loaded = true;\r\n                this.emit('loaded');\r\n            }\r\n            else {\r\n                this.emit('updated');\r\n            }\r\n        };\r\n        const loadText = () => {\r\n            return new Promise((resolve) => {\r\n                const library = this.libraryParam.value;\r\n                if (library == '') {\r\n                    resolve();\r\n                    return;\r\n                }\r\n                if (!labelManager.isLibraryFound(library)) {\r\n                    console.warn('Label Library not found:', library);\r\n                    resolve();\r\n                    return;\r\n                }\r\n                const getLibraryText = () => {\r\n                    try {\r\n                        const name = this.getName();\r\n                        // console.log(\"Text Loaded:\" + name);\r\n                        const text = labelManager.getLabelText(library, name);\r\n                        this.textParam.value = text;\r\n                    }\r\n                    catch (e) {\r\n                        // Note: if the text is not found in the labels pack\r\n                        // an exception is thrown, and we catch it here.\r\n                        console.warn(e);\r\n                    }\r\n                    resolve();\r\n                };\r\n                if (!labelManager.isLibraryLoaded(library)) {\r\n                    labelManager.on('labelLibraryLoaded', (event) => {\r\n                        const loadedLibrary = event.library;\r\n                        if (loadedLibrary == library)\r\n                            getLibraryText();\r\n                    });\r\n                }\r\n                else {\r\n                    getLibraryText();\r\n                }\r\n            });\r\n        };\r\n        const loadFont = () => {\r\n            return new Promise((resolve) => {\r\n                if (document.fonts != undefined) {\r\n                    const font = this.fontParam.value;\r\n                    const fontSize = this.fontSizeParam.value;\r\n                    document.fonts.load(fontSize + 'px \"' + font + '\"').then(() => {\r\n                        // console.log(\"Font Loaded:\" + font);\r\n                        resolve();\r\n                    });\r\n                }\r\n                else {\r\n                    resolve();\r\n                }\r\n            });\r\n        };\r\n        Promise.all([loadText(), loadFont()]).then(onLoaded);\r\n    }\r\n    /**\r\n     * Renders the label text to a canvas element ready to display.\r\n     * Here is where all parameters are applied to the canvas containing the text,\r\n     * then the image data is extracted from the canvas context.\r\n     */\r\n    renderLabelToImage() {\r\n        // console.log(\"renderLabelToImage\")\r\n        const ctx2d = this.canvasElem.getContext('2d', {\r\n            alpha: true,\r\n        });\r\n        let text = this.textParam.value;\r\n        if (text == '')\r\n            text = this.getName();\r\n        const font = this.fontParam.value;\r\n        const fontColor = this.fontColorParam.value;\r\n        const textAlign = 'left'; // this.textAlignParam.value\r\n        const fontSize = this.fontSizeParam.value;\r\n        const margin = this.marginParam.value;\r\n        const borderWidth = this.borderWidthParam.value;\r\n        const borderRadius = this.borderRadiusParam.value;\r\n        const outline = this.outlineParam.value;\r\n        const outlineColor = this.outlineColorParam.value;\r\n        const background = this.backgroundParam.value;\r\n        const backgroundColor = this.backgroundColorParam.value;\r\n        const fillBackground = this.fillBackgroundParam.value;\r\n        const strokeBackgroundOutline = this.strokeBackgroundOutlineParam.value;\r\n        // let ratio = devicePixelRatio / backingStoreRatio;\r\n        const marginAndBorder = margin + borderWidth;\r\n        const lines = text.split('\\n');\r\n        ctx2d.font = fontSize + 'px \"' + font + '\"';\r\n        // console.log(\"renderLabelToImage:\" + ctx2d.font);\r\n        let width = 0;\r\n        lines.forEach((line) => {\r\n            width = Math.max(ctx2d.measureText(line).width, width);\r\n        });\r\n        const fontHeight = fontSize; // parseInt(fontSize)\r\n        this.width = Math.ceil(width + marginAndBorder * 2);\r\n        this.height = Math.ceil(fontHeight * lines.length + marginAndBorder * 2);\r\n        ctx2d.canvas.width = this.width;\r\n        ctx2d.canvas.height = this.height;\r\n        this.canvasElem.width = this.width;\r\n        this.canvasElem.height = this.height;\r\n        // ctx2d.clearRect(0, 0, this.width, this.height);\r\n        ctx2d.fillStyle = 'rgba(0, 0, 0, 0.0)';\r\n        ctx2d.fillRect(0, 0, this.width, this.height);\r\n        if (background) {\r\n            ctx2d.fillStyle = backgroundColor.toHex();\r\n            ctx2d.strokeStyle = outlineColor.toHex();\r\n            roundRect(ctx2d, borderWidth, borderWidth, this.width - borderWidth * 2, this.height - borderWidth * 2, borderRadius, fillBackground, strokeBackgroundOutline, borderWidth);\r\n        }\r\n        ctx2d.font = fontSize + 'px \"' + font + '\"';\r\n        ctx2d.textAlign = textAlign;\r\n        ctx2d.fillStyle = fontColor.toHex();\r\n        ctx2d.textBaseline = 'hanging';\r\n        lines.forEach((line, index) => {\r\n            ctx2d.fillText(line, marginAndBorder, marginAndBorder + index * fontHeight);\r\n        });\r\n        if (outline) {\r\n            ctx2d.strokeStyle = outlineColor.toHex();\r\n            ctx2d.lineWidth = 1.5;\r\n            ctx2d.strokeText(text, marginAndBorder, marginAndBorder);\r\n        }\r\n        this.__data = ctx2d.getImageData(0, 0, this.width, this.height);\r\n        this.needsRender = false;\r\n        this.emit('labelRendered', {\r\n            width: this.width,\r\n            height: this.height,\r\n            data: this.__data,\r\n        });\r\n    }\r\n    /**\r\n     *  Returns all parameters and class state values(Including data).\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getParams() {\r\n        if (this.needsRender)\r\n            this.renderLabelToImage();\r\n        return super.getParams();\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        const j = super.toJSON(context);\r\n        return j;\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context) {\r\n        super.fromJSON(j, context);\r\n    }\r\n}\r\nRegistry.register('Label', Label);\r\nexport { Label };\r\n//# sourceMappingURL=Label.js.map","import { Registry } from '../../Registry';\r\nimport { BaseImage } from '../BaseImage';\r\n/** Class representing a 2D video stream image.\r\n * @private\r\n * @extends BaseImage\r\n */\r\nclass VideoStreamImage2D extends BaseImage {\r\n    /**\r\n     * Create a 2D video stream image.\r\n     */\r\n    constructor() {\r\n        super('');\r\n        this.loaded = false;\r\n    }\r\n    /**\r\n     * The connectWebcam method.\r\n     * @param width - The width of the video.\r\n     * @param height - The height of the video.\r\n     * @param rearCamera - Boolean determining if it is a rear camera or not.\r\n     */\r\n    connectWebcam(width, height, rearCamera = false) {\r\n        const video = {\r\n            width,\r\n            height,\r\n            frameRate: {\r\n                ideal: 60,\r\n                max: 60,\r\n            },\r\n        };\r\n        if (rearCamera) {\r\n            video.facingMode = {\r\n                exact: 'environment',\r\n            };\r\n        }\r\n        else {\r\n            video.facingMode = {\r\n                facingMode: 'user',\r\n            };\r\n        }\r\n        const domElement = document.createElement('video');\r\n        // TODO - confirm its necessary to add to DOM\r\n        domElement.style.display = 'none';\r\n        domElement.preload = 'auto';\r\n        domElement.crossOrigin = 'anonymous';\r\n        // domElement.crossorigin = true;\r\n        document.body.appendChild(domElement);\r\n        // List cameras and microphones.\r\n        // navigator.mediaDevices.enumerateDevices()\r\n        //     .then((devices)=>{\r\n        //         // devices.forEach((device)=>{\r\n        //         //     if (device.kind == \"videoinput\") {\r\n        //         //         console.log(device.kind + \": \" + device.label + \" id = \" + device.deviceId);\r\n        //         //         videoinputs.push(device);\r\n        //         //     }\r\n        //         // });\r\n        //     })\r\n        //     .catch(function(err) {\r\n        //         console.log(err.name + \": \" + err.message);\r\n        //     });\r\n        navigator.mediaDevices\r\n            .getUserMedia({\r\n            audio: false,\r\n            video,\r\n        })\r\n            .then((mediaStream) => {\r\n            domElement.srcObject = mediaStream;\r\n            domElement.onloadedmetadata = (e) => {\r\n                domElement.play();\r\n                this.width = domElement.videoWidth;\r\n                this.height = domElement.videoHeight;\r\n                console.log('Webcam:[' + this.width + ', ' + this.height + ']');\r\n                this.__data = domElement;\r\n                this.loaded = true;\r\n                this.emit('loaded');\r\n                let prevFrame = 0;\r\n                const frameRate = 60;\r\n                const timerCallback = () => {\r\n                    if (domElement.paused || domElement.ended) {\r\n                        return;\r\n                    }\r\n                    // Check to see if the video has progressed to the next frame.\r\n                    // If so, then we emit and update, which will cause a redraw.\r\n                    const currentFrame = Math.floor(domElement.currentTime * frameRate);\r\n                    if (prevFrame != currentFrame) {\r\n                        this.emit('updated');\r\n                        prevFrame = currentFrame;\r\n                    }\r\n                    setTimeout(timerCallback, 20); // Sample at 50fps.\r\n                };\r\n                timerCallback();\r\n            };\r\n        })\r\n            .catch(function (err) {\r\n            /* handle the error */\r\n        });\r\n    }\r\n    /**\r\n     * The setVideoStream method.\r\n     * @param video - The video value.\r\n     */\r\n    setVideoStream(video) {\r\n        this.loaded = false;\r\n        this.width = video.videoWidth;\r\n        this.height = video.videoHeight;\r\n        this.start();\r\n        this.__data = video;\r\n        this.loaded = true;\r\n        this.emit('loaded');\r\n    }\r\n    // getAudioSource() {\r\n    //     return this.__data;\r\n    // }\r\n    /**\r\n     * The stop method.\r\n     */\r\n    stop() {\r\n        clearInterval(this.__intervalId);\r\n    }\r\n    /**\r\n     * The start method.\r\n     */\r\n    start() {\r\n        this.__intervalId = setInterval(() => {\r\n            this.emit('updated');\r\n        }, 20); // Sample at 50fps.\r\n    }\r\n    /**\r\n     * The isLoaded method.\r\n     * @return - The return value.\r\n     */\r\n    isLoaded() {\r\n        return this.loaded;\r\n    }\r\n    /**\r\n     * The getParams method.\r\n     * @return - The return value.\r\n     */\r\n    getParams() {\r\n        return {\r\n            type: this.type,\r\n            format: this.format,\r\n            width: this.width,\r\n            height: this.height,\r\n            data: this.__data,\r\n            flipY: true,\r\n        };\r\n    }\r\n}\r\nRegistry.register('VideoStreamImage2D', VideoStreamImage2D);\r\nexport { VideoStreamImage2D };\r\n//# sourceMappingURL=VideoStreamImage2D.js.map","import { Registry } from '../../Registry';\r\nimport { MaterialColorParam } from '../Parameters/MaterialColorParam';\r\nimport { NumberParameter } from '../Parameters/NumberParameter';\r\nimport { Color } from '../../Math/Color';\r\nimport { Material } from '../Material';\r\nexport class FatLinesMaterial extends Material {\r\n    constructor(name) {\r\n        super(name);\r\n        this.baseColorParam = new MaterialColorParam('BaseColor', new Color(1.0, 1, 0.5));\r\n        this.opacityParam = new NumberParameter('Opacity', 1.0);\r\n        this.lineThicknessParam = new NumberParameter('LineThickness', 0.01);\r\n        this.overlayParam = new NumberParameter('Overlay', 0.0);\r\n        this.__shaderName = 'FatLinesShader';\r\n        this.addParameter(this.baseColorParam);\r\n        this.addParameter(this.opacityParam);\r\n        this.addParameter(this.overlayParam);\r\n        this.addParameter(this.lineThicknessParam);\r\n    }\r\n}\r\nRegistry.register('FatLinesMaterial', FatLinesMaterial);\r\n//# sourceMappingURL=FatLinesMaterial.js.map","import { Registry } from '../../Registry';\r\nimport { MaterialColorParam } from '../Parameters/MaterialColorParam';\r\nimport { NumberParameter } from '../Parameters/NumberParameter';\r\nimport { Color } from '../../Math/Color';\r\nimport { Material } from '../Material';\r\nexport class FatPointsMaterial extends Material {\r\n    constructor(name) {\r\n        super(name);\r\n        this.baseColorParam = new MaterialColorParam('BaseColor', new Color(1.0, 1, 0.5));\r\n        this.pointSizeParam = new NumberParameter('PointSize', 1);\r\n        this.roundedParam = new NumberParameter('Rounded', 1);\r\n        this.borderWidthParam = new NumberParameter('BorderWidth', 0.2);\r\n        this.overlayParam = new NumberParameter('Overlay', 0.0);\r\n        this.__shaderName = 'FatPointsShader';\r\n        this.addParameter(this.baseColorParam);\r\n        this.addParameter(this.pointSizeParam);\r\n        this.addParameter(this.roundedParam);\r\n        this.addParameter(this.borderWidthParam);\r\n        this.addParameter(this.overlayParam);\r\n    }\r\n}\r\nRegistry.register('FatPointsMaterial', FatPointsMaterial);\r\n//# sourceMappingURL=FatPointsMaterial.js.map","import { Registry } from '../../Registry';\r\nimport { MaterialColorParam } from '../Parameters/MaterialColorParam';\r\nimport { Color } from '../../Math/Color';\r\nimport { Material } from '../Material';\r\nexport class FlatSurfaceMaterial extends Material {\r\n    constructor(name) {\r\n        super(name);\r\n        this.baseColorParam = new MaterialColorParam('BaseColor', new Color(1.0, 1, 0.5));\r\n        this.__shaderName = 'FlatSurfaceShader';\r\n        this.addParameter(this.baseColorParam);\r\n    }\r\n}\r\nRegistry.register('FlatSurfaceMaterial', FlatSurfaceMaterial);\r\n//# sourceMappingURL=FlatSurfaceMaterial.js.map","import { Registry } from '../../Registry';\r\nimport { MaterialColorParam } from '../Parameters/MaterialColorParam';\r\nimport { MaterialFloatParam } from '../Parameters/MaterialFloatParam';\r\nimport { NumberParameter } from '../Parameters/NumberParameter';\r\nimport { Color } from '../../Math/Color';\r\nimport { Material } from '../Material';\r\nexport class LinesMaterial extends Material {\r\n    constructor(name) {\r\n        super(name);\r\n        this.baseColorParam = new MaterialColorParam('BaseColor', new Color(1.0, 1, 0.5));\r\n        this.opacityParam = new MaterialFloatParam('Opacity', 0.7, [0, 1]);\r\n        this.overlayParam = new MaterialFloatParam('Overlay', 0.000001); // Provide a slight overlay so lines draw over meshes\r\n        this.stippleScaleParam = new NumberParameter('StippleScale', 0.01);\r\n        this.stippleValueParam = new NumberParameter('StippleValue', 0, [0, 1]);\r\n        this.occludedStippleValueParam = new NumberParameter('OccludedStippleValue', 1.0, [0, 1]);\r\n        this.__shaderName = 'LinesShader';\r\n        this.addParameter(this.baseColorParam);\r\n        this.addParameter(this.opacityParam);\r\n        this.addParameter(this.overlayParam);\r\n        this.addParameter(this.stippleScaleParam);\r\n        this.addParameter(this.stippleValueParam);\r\n        this.addParameter(this.occludedStippleValueParam);\r\n    }\r\n}\r\nRegistry.register('LinesMaterial', LinesMaterial);\r\n//# sourceMappingURL=LinesMaterial.js.map","import { Registry } from '../../Registry';\r\nimport { MaterialColorParam } from '../Parameters/MaterialColorParam';\r\nimport { MaterialFloatParam } from '../Parameters/MaterialFloatParam';\r\nimport { Color } from '../../Math/Color';\r\nimport { Material } from '../Material';\r\nexport class PointsMaterial extends Material {\r\n    constructor(name) {\r\n        super(name);\r\n        this.baseColorParam = new MaterialColorParam('BaseColor', new Color(1.0, 1, 0.5));\r\n        this.pointSizeParam = new MaterialFloatParam('PointSize', 2);\r\n        this.overlayParam = new MaterialFloatParam('Overlay', 0.00002); // Provide a slight overlay so lines draw over meshes\r\n        this.__shaderName = 'PointsShader';\r\n        this.addParameter(this.baseColorParam);\r\n        this.addParameter(this.pointSizeParam);\r\n        this.addParameter(this.overlayParam);\r\n    }\r\n}\r\nRegistry.register('PointsMaterial', PointsMaterial);\r\n//# sourceMappingURL=PointsMaterial.js.map","import { Registry } from '../../Registry';\r\nimport { MaterialColorParam } from '../Parameters/MaterialColorParam';\r\nimport { Color } from '../../Math/Color';\r\nimport { Material } from '../Material';\r\nexport class ScreenSpaceMaterial extends Material {\r\n    constructor(name) {\r\n        super(name);\r\n        this.baseColorParam = new MaterialColorParam('BaseColor', new Color(1.0, 1, 0.5));\r\n        this.__shaderName = 'ScreenSpaceShader';\r\n        this.addParameter(this.baseColorParam);\r\n    }\r\n}\r\nRegistry.register('ScreenSpaceMaterial', ScreenSpaceMaterial);\r\n//# sourceMappingURL=ScreenSpaceMaterial.js.map","import { Registry } from '../../Registry';\r\nimport { MaterialColorParam } from '../Parameters/MaterialColorParam';\r\nimport { MaterialFloatParam } from '../Parameters/MaterialFloatParam';\r\nimport { Color } from '../../Math/Color';\r\nimport { Material } from '../Material';\r\nexport class SimpleSurfaceMaterial extends Material {\r\n    constructor(name) {\r\n        super(name);\r\n        this.baseColorParam = new MaterialColorParam('BaseColor', new Color(1.0, 1, 0.5));\r\n        this.opacityParam = new MaterialFloatParam('Opacity', 1, [0, 1]);\r\n        this.emissiveStrengthParam = new MaterialFloatParam('EmissiveStrength', 0, [0, 1]);\r\n        this.__shaderName = 'SimpleSurfaceShader';\r\n        this.addParameter(this.baseColorParam);\r\n        this.addParameter(this.opacityParam);\r\n        this.addParameter(this.emissiveStrengthParam);\r\n    }\r\n}\r\nRegistry.register('SimpleSurfaceMaterial', SimpleSurfaceMaterial);\r\n//# sourceMappingURL=SimpleSurfaceMaterial.js.map","import { Registry } from '../../Registry';\r\nimport { MaterialColorParam } from '../Parameters/MaterialColorParam';\r\nimport { MaterialFloatParam } from '../Parameters/MaterialFloatParam';\r\nimport { Color } from '../../Math/Color';\r\nimport { Material } from '../Material';\r\nexport class StandardSurfaceMaterial extends Material {\r\n    constructor(name) {\r\n        super(name);\r\n        this.baseColorParam = new MaterialColorParam('BaseColor', new Color(1.0, 1, 0.5));\r\n        this.normalParam = new MaterialColorParam('Normal', new Color(1.0, 1, 0.5));\r\n        this.ambientOcclusion = new MaterialFloatParam('AmbientOcclusion', 1, [0, 1]);\r\n        this.metallicParam = new MaterialFloatParam('Metallic', 0.05, [0, 1]);\r\n        this.roughnessParam = new MaterialFloatParam('Roughness', 0.5, [0, 1]);\r\n        this.reflectanceParam = new MaterialFloatParam('Reflectance', 0.5, [0, 1]);\r\n        this.emissiveStrengthParam = new MaterialFloatParam('EmissiveStrength', 0, [0, 1]);\r\n        this.opacityParam = new MaterialFloatParam('Opacity', 1, [0, 1]);\r\n        this.__shaderName = 'StandardSurfaceShader';\r\n        this.addParameter(this.baseColorParam);\r\n        this.addParameter(this.normalParam);\r\n        this.addParameter(this.ambientOcclusion);\r\n        this.addParameter(this.metallicParam);\r\n        this.addParameter(this.roughnessParam);\r\n        this.addParameter(this.reflectanceParam);\r\n        this.addParameter(this.emissiveStrengthParam);\r\n        this.addParameter(this.opacityParam);\r\n    }\r\n}\r\nRegistry.register('StandardSurfaceMaterial', StandardSurfaceMaterial);\r\n//# sourceMappingURL=StandardSurfaceMaterial.js.map","/* eslint-disable no-unused-vars */\r\n/* eslint-disable valid-jsdoc */\r\nimport { Xfo } from '../Math/index';\r\nimport { TreeItem } from './TreeItem';\r\nimport { Registry } from '../Registry';\r\n/**\r\n * TreeItem type of class designed for making duplications of parts of the tree.\r\n *\r\n * @extends {TreeItem}\r\n */\r\nclass InstanceItem extends TreeItem {\r\n    /**\r\n     * Create an instance item.\r\n     * @param name - The name of the instance item.\r\n     */\r\n    constructor(name) {\r\n        super(name);\r\n        this.srcTree = null;\r\n    }\r\n    /**\r\n     * Clones passed in `TreeItem` all the way down and adds it as a child of current item.\r\n     *\r\n     * @param treeItem - The treeItem value.\r\n     */\r\n    setSrcTree(treeItem, context) {\r\n        this.srcTree = treeItem;\r\n        const clonedTree = this.srcTree.clone(context);\r\n        clonedTree.localXfoParam.value = new Xfo();\r\n        this.addChild(clonedTree, false);\r\n    }\r\n    /**\r\n     * Returns the last `TreeItem` cloned.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getSrcTree() {\r\n        return this.srcTree;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Sets state of current Item(Including cloned item) using a binary reader object.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context = {}) {\r\n        super.readBinary(reader, context);\r\n        // console.log(\"numTreeItems:\", context.numTreeItems, \" numGeomItems:\", context.numGeomItems)\r\n        const path = reader.loadStrArray();\r\n        if (path.length > 0) {\r\n            // console.log(\"InstanceItem of:\", path)\r\n            try {\r\n                context.resolvePath(path, (treeItem) => {\r\n                    this.setSrcTree(treeItem, context);\r\n                }, (error) => {\r\n                    console.warn(`Error loading InstanceItem: ${this.getPath()}, unable to resolve: ${path}. ` + error.message);\r\n                });\r\n            }\r\n            catch (error) {\r\n                console.warn(`Error loading InstanceItem: ${this.getPath()}: ` + error.message);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context = {}) {\r\n        const j = super.toJSON(context);\r\n        return j;\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @todo Needs to be implemented.\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     * @param onDone - The onDone value.\r\n     */\r\n    fromJSON(j, context = {}) { }\r\n    // ////////////////////////////////////////\r\n    // Clone and Destroy\r\n    /**\r\n     * The clone method constructs a new instance item, copies its values\r\n     * from this item and returns it.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns a new cloned geom item.\r\n     */\r\n    clone(context) {\r\n        const cloned = new InstanceItem();\r\n        cloned.copyFrom(this, context);\r\n        return cloned;\r\n    }\r\n}\r\nRegistry.register('InstanceItem', InstanceItem);\r\nexport { InstanceItem };\r\n//# sourceMappingURL=InstanceItem.js.map","import { Color } from '../Math/Color';\r\nimport { Vec3 } from '../Math/Vec3';\r\nimport { TreeItem } from './TreeItem';\r\nimport { Material } from './Material';\r\nimport { MaterialParameter } from '../SceneTree/Parameters/MaterialParameter';\r\n/**\r\n * Base class that represents geometry items with layering, overlaying and cut away features.\r\n *\r\n * **Events**\r\n * * **cutAwayChanged:** Triggered when the cutaway variables change(if enabled or not, the vector and the distance).\r\n * @extends TreeItem\r\n */\r\nclass BaseGeomItem extends TreeItem {\r\n    /**\r\n     * Create a base geometry item.\r\n     * @param name - The name of the base geom item.\r\n     */\r\n    constructor(name) {\r\n        super(name);\r\n        /**\r\n         * @member materialParam - The Material to use when rendering this GeomItem\r\n         */\r\n        this.materialParam = new MaterialParameter('Material');\r\n        this.overlay = false;\r\n        this.__cutAway = false;\r\n        this.__cutAwayVector = new Vec3(1, 0, 0);\r\n        this.__cutAwayDist = 0;\r\n        this.__layers = [];\r\n    }\r\n    /**\r\n     * Sets overlay value.\r\n     *\r\n     * @todo Need to find the layer and add this item to it.\r\n     * @param val - `true` to enable it.\r\n     */\r\n    setOverlay(val) {\r\n        // TODO: need to find the layer and add this item to it.\r\n        this.overlay = val;\r\n    }\r\n    /**\r\n     * Returns `true` if overlay is enabled for current item.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    isOverlay() {\r\n        return this.overlay;\r\n    }\r\n    /**\r\n     * Adds a layer to current item.\r\n     *\r\n     * @todo Need to find the layer and add this item to it.\r\n     * @param name - The name of the layer.\r\n     */\r\n    addLayer(name) {\r\n        // TODO: need to find the layer and add this item to it.\r\n        this.__layers.push(name);\r\n    }\r\n    /**\r\n     * Returns all layers in current item.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getLayers() {\r\n        return this.__layers;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Cutaways\r\n    /**\r\n     * Checks if cutaway is enabled.\r\n     *\r\n     * @return - Returns `true` if enabled.\r\n     */\r\n    isCutawayEnabled() {\r\n        return this.__cutAway;\r\n    }\r\n    /**\r\n     * Sets cutaway state.\r\n     *\r\n     * @param state - `true` to enable it, otherwise `false`.\r\n     */\r\n    setCutawayEnabled(state) {\r\n        this.__cutAway = state;\r\n        this.emit('cutAwayChanged');\r\n    }\r\n    /**\r\n     * Returns cutaway vector value.\r\n     *\r\n     * @return - `Vec3` when it is set, `false` on default.\r\n     */\r\n    getCutVector() {\r\n        return this.__cutAwayVector;\r\n    }\r\n    /**\r\n     * Sets cutaway vector value.\r\n     *\r\n     * @param cutAwayVector - The cutAwayVector value.\r\n     */\r\n    setCutVector(cutAwayVector) {\r\n        this.__cutAwayVector = cutAwayVector;\r\n        this.emit('cutAwayChanged');\r\n    }\r\n    /**\r\n     * Getter for the cutaway distance.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getCutDist() {\r\n        return this.__cutAwayDist;\r\n    }\r\n    /**\r\n     * Sets cutaway distance value.\r\n     *\r\n     * @param cutAwayDist - The cutAwayDist value.\r\n     */\r\n    setCutDist(cutAwayDist) {\r\n        this.__cutAwayDist = cutAwayDist;\r\n        this.emit('cutAwayChanged');\r\n    }\r\n    // ///////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Sets state of current Item(Including layers & material) using a binary reader object.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        super.readBinary(reader, context);\r\n        if (context.versions['zea-engine'].compare([0, 0, 4]) >= 0) {\r\n            const materialName = reader.loadStr();\r\n            // const materialName = 'Material' + this.__bodyDescId;\r\n            const materialLibrary = context.assetItem.getMaterialLibrary();\r\n            let material = materialLibrary.getMaterial(materialName, false);\r\n            if (!material) {\r\n                // console.warn(\"BaseGeomItem :'\" + this.name + \"' Material not found:\" + materialName);\r\n                // material = materialLibrary.getMaterial('DefaultMaterial');\r\n                material = new Material(materialName, 'SimpleSurfaceShader');\r\n                material.getParameter('BaseColor').loadValue(Color.random(0.25));\r\n                context.assetItem.getMaterialLibrary().addMaterial(material);\r\n            }\r\n            this.materialParam.loadValue(material);\r\n            this.__layers = reader.loadStrArray();\r\n            if (this.__layers.length > 0) {\r\n                // console.log(\"Layers:\", this.__layers)\r\n                for (const layer of this.__layers)\r\n                    context.addGeomToLayer(this, layer);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport { BaseGeomItem };\r\n//# sourceMappingURL=BaseGeomItem.js.map","import { Xfo, Box3, Vec3 } from '../Math/index';\r\nimport { XfoParameter, Mat4Parameter } from './Parameters/index';\r\nimport { GeometryParameter } from './Parameters/GeometryParameter';\r\nimport { Registry } from '../Registry';\r\nimport { BaseGeomItem } from './BaseGeomItem';\r\nimport { Operator } from './Operators/Operator';\r\nimport { XfoOperatorInput } from './Operators/OperatorInput';\r\nimport { Mat4OperatorOutput } from './Operators/OperatorOutput';\r\nimport { BaseProxy } from './Geometry/GeomProxies';\r\nlet calculatePreciseBoundingBoxes = false;\r\n/** The operator the calculates the global Xfo of a TreeItem based on its parents GlobalXfo and its own LocalXfo\r\n * @extends Operator\r\n * @private\r\n */\r\nclass CalcGeomMatOperator extends Operator {\r\n    /**\r\n     *Creates an instance of CalcGeomMatOperator.\r\n     *\r\n     * @param globalXfoParam\r\n     * @param geomOffsetXfoParam\r\n     * @param geomMatParam\r\n     * @memberof CalcGeomMatOperator\r\n     */\r\n    constructor(globalXfoParam, geomOffsetXfoParam, geomMatParam) {\r\n        super('CalcGeomMatOperator');\r\n        this.globalXfo = new XfoOperatorInput('GlobalXfo');\r\n        this.geomOffsetXfo = new XfoOperatorInput('GeomOffsetXfo');\r\n        this.geomMat = new Mat4OperatorOutput('GeomMat');\r\n        this.globalXfo.setParam(globalXfoParam);\r\n        this.geomOffsetXfo.setParam(geomOffsetXfoParam);\r\n        this.geomMat.setParam(geomMatParam);\r\n        this.addInput(this.globalXfo);\r\n        this.addInput(this.geomOffsetXfo);\r\n        this.addOutput(this.geomMat);\r\n    }\r\n    /**\r\n     * The evaluate method.\r\n     */\r\n    evaluate() {\r\n        const globalMat4 = this.globalXfo.getValue().toMat4();\r\n        const geomOffsetMat4 = this.geomOffsetXfo.getValue().toMat4();\r\n        this.geomMat.setClean(globalMat4.multiply(geomOffsetMat4));\r\n    }\r\n}\r\n/**\r\n * Class representing a geometry item in a scene tree.\r\n *\r\n * **Parameters**\r\n * * **Geometry(`GeometryParameter`):** The geometry to be rendered for this GeomItem\r\n * * **Material(`MaterialParameter`):** The Material to use when rendering this GeomItem\r\n * * **GeomOffsetXfo(`XfoParameter`):** Provides an offset transformation that is applied only to the geometry and not inherited by child items.\r\n * * **GeomMat(`Mat4Parameter`):** Calculated from the GlobalXfo and the GeomOffsetXfo, this matrix is provided to the renderer for rendering.\r\n *\r\n * @extends BaseGeomItem\r\n */\r\nclass GeomItem extends BaseGeomItem {\r\n    /**\r\n     * Creates a geometry item.\r\n     * @param name - The name of the geom item.\r\n     * @param geometry - The geometry value.\r\n     * @param material - The material value.\r\n     * @param xfo - The initial Xfo of the new GeomItem.\r\n     */\r\n    constructor(name, geometry, material, xfo) {\r\n        super(name);\r\n        this.listenerIDs = {};\r\n        this.geomIndex = -1;\r\n        this.assetItem = null;\r\n        this.cullable = true;\r\n        /**\r\n         * @member geomOffsetXfoParam - Provides an offset transformation that is applied only to the geometry and not inherited by child items.\r\n         */\r\n        this.geomOffsetXfoParam = new XfoParameter('GeomOffsetXfo');\r\n        /**\r\n         * @member geomParam - The geometry to be rendered for this GeomItem\r\n         */\r\n        this.geomParam = new GeometryParameter('Geometry');\r\n        /**\r\n         * @member geomMatParam - Calculated from the GlobalXfo and the GeomOffsetXfo, this matrix is provided to the renderer for rendering.\r\n         */\r\n        this.geomMatParam = new Mat4Parameter('GeomMat');\r\n        this.addParameter(this.geomParam);\r\n        this.addParameter(this.materialParam);\r\n        this.addParameter(this.geomOffsetXfoParam);\r\n        this.addParameter(this.geomMatParam);\r\n        const geomChanged = () => {\r\n            this.setBoundingBoxDirty();\r\n        };\r\n        this.geomParam.on('valueChanged', geomChanged);\r\n        this.geomParam.on('boundingBoxChanged', geomChanged);\r\n        this.calcGeomMatOperator = new CalcGeomMatOperator(this.globalXfoParam, this.geomOffsetXfoParam, this.geomMatParam);\r\n        if (geometry)\r\n            this.geomParam.loadValue(geometry);\r\n        if (material)\r\n            this.materialParam.loadValue(material);\r\n        if (xfo)\r\n            this.localXfoParam.value = xfo;\r\n    }\r\n    /**\r\n     * The _cleanBoundingBox method.\r\n     * @param bbox - The bounding box value.\r\n     * @return - The return value.\r\n     * @private\r\n     */\r\n    _cleanBoundingBox(bbox) {\r\n        if (this.disableBoundingBox)\r\n            return bbox;\r\n        bbox = super._cleanBoundingBox(bbox);\r\n        if (this.geomBBox) {\r\n            // Note: this bbox is the global bounding box of the geomItem\r\n            // transformed into the space of the geometry. We reapply\r\n            // the geom matrix to get back the points in global space.\r\n            const mat4 = this.geomMatParam.value;\r\n            bbox.addPoint(mat4.transformVec3(this.geomBBox.p0));\r\n            bbox.addPoint(mat4.transformVec3(this.geomBBox.p1));\r\n        }\r\n        else {\r\n            const geom = this.geomParam.value;\r\n            if (geom) {\r\n                if (calculatePreciseBoundingBoxes) {\r\n                    // Note: compting the precise bounding box is much slower and\r\n                    // can make loading big scenes take a bit longer.\r\n                    const mat4 = this.geomMatParam.value;\r\n                    if (geom instanceof BaseProxy) {\r\n                        const positions = geom.__buffers.attrBuffers['positions'].values;\r\n                        const getVertex = (index) => {\r\n                            const start = index * 3;\r\n                            return new Vec3(positions.subarray(start, start + 3));\r\n                        };\r\n                        for (let i = 0; i < geom.getNumVertices(); i++) {\r\n                            bbox.addPoint(mat4.transformVec3(getVertex(i)));\r\n                        }\r\n                    }\r\n                    else {\r\n                        const positions = geom.getVertexAttribute('positions');\r\n                        for (let i = 0; i < geom.getNumVertices(); i++) {\r\n                            bbox.addPoint(mat4.transformVec3(positions.getValueRef(i)));\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    bbox.addBox3(geom.getBoundingBox(), this.geomMatParam.value);\r\n                }\r\n            }\r\n        }\r\n        return bbox;\r\n    }\r\n    // ///////////////////////////\r\n    // Debugging\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        const json = super.toJSON(context);\r\n        return json;\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param json - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(json, context) {\r\n        super.fromJSON(json, context);\r\n        context.numGeomItems++;\r\n    }\r\n    /**\r\n     * Loads state of the Item from a binary object.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        super.readBinary(reader, context);\r\n        context.numGeomItems++;\r\n        const itemFlags = reader.loadUInt8();\r\n        const geomIndex = reader.loadUInt32();\r\n        const geomLibrary = context.assetItem.getGeometryLibrary();\r\n        this.geomIndex = geomIndex;\r\n        this.assetItem = context.assetItem;\r\n        const geom = geomLibrary.getGeom(geomIndex);\r\n        if (geom) {\r\n            this.geomParam.loadValue(geom);\r\n        }\r\n        else {\r\n            const onGeomLoaded = (event) => {\r\n                const { range } = event;\r\n                if (geomIndex >= range[0] && geomIndex < range[1]) {\r\n                    const geom = geomLibrary.getGeom(geomIndex);\r\n                    if (geom)\r\n                        this.geomParam.value = geom;\r\n                    else\r\n                        console.warn('Geom not loaded:', this.getName());\r\n                    geomLibrary.removeListenerById('rangeLoaded', onGeomLoadedListenerID);\r\n                }\r\n            };\r\n            const onGeomLoadedListenerID = geomLibrary.on('rangeLoaded', onGeomLoaded);\r\n        }\r\n        // this.setVisibility(j.visibility);\r\n        // Note: to save space, some values are skipped if they are identity values\r\n        const geomOffsetXfoFlag = 1 << 2;\r\n        if (itemFlags & geomOffsetXfoFlag) {\r\n            this.geomOffsetXfoParam.value = new Xfo(reader.loadFloat32Vec3(), reader.loadFloat32Quat(), reader.loadFloat32Vec3());\r\n        }\r\n        // BaseGeomItem now handles loading materials.\r\n        if (context.versions['zea-engine'].compare([0, 0, 4]) < 0) {\r\n            const materialFlag = 1 << 3;\r\n            if (itemFlags & materialFlag) {\r\n                const materialLibrary = context.assetItem.getMaterialLibrary();\r\n                const materialName = reader.loadStr();\r\n                let material = materialLibrary.getMaterial(materialName);\r\n                if (!material) {\r\n                    console.warn(\"Geom :'\" + this.__name + \"' Material not found:\" + materialName);\r\n                    material = materialLibrary.getMaterial('Default');\r\n                }\r\n                this.materialParam.loadValue(material);\r\n            }\r\n            else {\r\n                // Force nodes to have a material so we can see them.\r\n                this.materialParam.loadValue(context.assetItem.getMaterialLibrary().getMaterial('Default'));\r\n            }\r\n        }\r\n        // Note: deprecated value. Not sure if we need to load this here.\r\n        // I think not, but need to test first.\r\n        if (context.versions['zea-engine'].compare([3, 0, 0]) < 0) {\r\n            // Load the 'lightmapCoordOffset' value which we no longer use.\r\n            // Note: we need to load it to increment the file pointer.\r\n            reader.loadFloat32Vec2();\r\n        }\r\n        else {\r\n            this.geomBBox = new Box3(reader.loadFloat32Vec3(), reader.loadFloat32Vec3());\r\n        }\r\n    }\r\n    /**\r\n     * Returns string representation of current object's state.\r\n     * @param context\r\n     * @return - The return value.\r\n     */\r\n    toString(context) {\r\n        return JSON.stringify(this.toJSON(context), null, 2);\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Clone and Destroy\r\n    /**\r\n     * The clone method constructs a new geom item, copies its values\r\n     * from this item and returns it.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns a new cloned geom item.\r\n     */\r\n    clone(context) {\r\n        const cloned = new GeomItem();\r\n        cloned.copyFrom(this, context);\r\n        return cloned;\r\n    }\r\n    /**\r\n     * Copies current GeomItem with all its children.\r\n     *\r\n     * @param src - The geom item to copy from.\r\n     * @param context - The context value.\r\n     */\r\n    copyFrom(src, context) {\r\n        super.copyFrom(src, context);\r\n        if (!src.geomParam.value && src.geomIndex != -1) {\r\n            const geomLibrary = src.assetItem.getGeometryLibrary();\r\n            this.assetItem = src.assetItem;\r\n            this.geomIndex = src.geomIndex;\r\n            this.geomBBox = src.geomBBox;\r\n            const onGeomLoaded = (event) => {\r\n                const { range } = event;\r\n                if (this.geomIndex >= range[0] && this.geomIndex < range[1]) {\r\n                    const geom = geomLibrary.getGeom(this.geomIndex);\r\n                    // Note: we need the 'valueChanged' event to be received by the\r\n                    // renderer to then load the geometry into the GPU.\r\n                    if (geom)\r\n                        this.geomParam.value = geom;\r\n                    else\r\n                        console.warn('Geom not loaded:', this.getName());\r\n                    geomLibrary.removeListenerById('rangeLoaded', this.listenerIDs['rangeLoaded']);\r\n                }\r\n            };\r\n            this.listenerIDs['rangeLoaded'] = geomLibrary.on('rangeLoaded', onGeomLoaded);\r\n        }\r\n        // Geom Xfo should be dirty after cloning.\r\n        // Note: this might not be necessary. It should\r\n        // always be dirty after cloning.\r\n        this.geomMatParam.setDirty(0);\r\n    }\r\n    /**\r\n     * Sets the global boolean that controls if GeomItems calculate precise bounding boxes\r\n     * or use the approximate bounding boxes that are much faster to generate.\r\n     * Note: computing the precise bounding box is much slower and can make loading\r\n     * big scenes take a bit longer. This setting is only relevant to geometries loaded\r\n     * from zcad files.\r\n     * @param value - true for precise bounding boxes, else false for faster approximate bounding boxes.\r\n     */\r\n    static setCalculatePreciseBoundingBoxes(value) {\r\n        calculatePreciseBoundingBoxes = value;\r\n    }\r\n}\r\nRegistry.register('GeomItem', GeomItem);\r\nexport { GeomItem };\r\n//# sourceMappingURL=GeomItem.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/no-empty-function */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable no-unused-vars */\r\nimport { ItemSetParameter } from '../Parameters/index';\r\nimport { TreeItem } from '../TreeItem';\r\n/**\r\n * BaseGroup are a special type of `TreeItem` that allows you to gather/classify/organize/modify\r\n * multiple items contained within the group. Items can be added to the group directly, or using\r\n * its path.\r\n * All parameters set to the group are also set to the children; in other words, it's a faster way\r\n * to apply common things to multiple items.\r\n *\r\n * **Parameters**\r\n * * **Items(`ItemSetParameter`):** _todo_\r\n *\r\n * @extends TreeItem\r\n */\r\nclass BaseGroup extends TreeItem {\r\n    /**\r\n     * Creates an instance of a group.\r\n     *\r\n     * @param name - The name of the group.\r\n     */\r\n    constructor(name) {\r\n        super(name);\r\n        /**\r\n         * @member itemsParam - TODO\r\n         */\r\n        this.itemsParam = new ItemSetParameter('Items', (item) => item instanceof TreeItem);\r\n        this.__itemsEventHandlers = [];\r\n        this.addParameter(this.itemsParam);\r\n        this.itemsParam.on('itemAdded', (event) => {\r\n            this.bindItem(event.item, event.index);\r\n        });\r\n        this.itemsParam.on('itemRemoved', (event) => {\r\n            this.unbindItem(event.item, event.index);\r\n        });\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Items\r\n    /**\r\n     *  sets the root item to be used as the search root.\r\n     * @param treeItem\r\n     */\r\n    setSearchRoot(treeItem) {\r\n        this.searchRoot = treeItem;\r\n    }\r\n    /**\r\n     * The setOwner method assigns a new owner to the item. The owner of a group becomes its search root unless another search root is already set.\r\n     *\r\n     * @param ownerItem - The new owner item.\r\n     */\r\n    setOwner(ownerItem) {\r\n        if (!this.searchRoot || this.searchRoot == this.getOwner())\r\n            this.searchRoot = ownerItem;\r\n        super.setOwner(ownerItem);\r\n    }\r\n    /**\r\n     * The __bindItem method.\r\n     * @param item - The item value.\r\n     * @param index - The index value.\r\n     * @private\r\n     */\r\n    bindItem(item, index) {\r\n        if (!(item instanceof TreeItem))\r\n            return;\r\n        const listenerIDs = {};\r\n        listenerIDs['pointerDown'] = item.on('pointerDown', (event) => {\r\n            this.onPointerDown(event);\r\n        });\r\n        listenerIDs['pointerUp'] = item.on('pointerUp', (event) => {\r\n            this.onPointerUp(event);\r\n        });\r\n        listenerIDs['pointerMove'] = item.on('pointerMove', (event) => {\r\n            this.onPointerMove(event);\r\n        });\r\n        listenerIDs['pointerEnter'] = item.on('pointerEnter', (event) => {\r\n            this.onPointerEnter(event);\r\n        });\r\n        listenerIDs['pointerLeave'] = item.on('pointerLeave', (event) => {\r\n            this.onPointerLeave(event);\r\n        });\r\n        this.__itemsEventHandlers.splice(index, 0, listenerIDs);\r\n    }\r\n    /**\r\n     * The unbindItem method.\r\n     * @param item - The item value.\r\n     * @param index - The index value.\r\n     * @private\r\n     */\r\n    unbindItem(item, index) {\r\n        if (!(item instanceof TreeItem))\r\n            return;\r\n        const listenerIDs = this.__itemsEventHandlers[index];\r\n        // eslint-disable-next-line guard-for-in\r\n        for (let key in listenerIDs) {\r\n            const parts = key.split('.');\r\n            if (parts.length > 1) {\r\n                const param = item.getParameter(parts[0]);\r\n                if (param)\r\n                    param.removeListenerById(parts[1], listenerIDs[key]);\r\n            }\r\n            else {\r\n                item.removeListenerById(key, listenerIDs[key]);\r\n            }\r\n        }\r\n        this.__itemsEventHandlers.splice(index, 1);\r\n    }\r\n    /**\r\n     * Adds an item to the group(See `Items` parameter).\r\n     *\r\n     * @param item - The item value.\r\n     * @param emit - The emit value.\r\n     */\r\n    addItem(item, emit = true) {\r\n        if (!item) {\r\n            console.warn('Error adding item to group. Item is null');\r\n            return;\r\n        }\r\n        this.itemsParam.addItem(item, emit);\r\n    }\r\n    /**\r\n     * Removes an item from the group(See `Items` parameter).\r\n     *\r\n     * @param item - The item value.\r\n     * @param emit - The emit value.\r\n     */\r\n    removeItem(item, emit = true) {\r\n        const paramItems = this.itemsParam.value;\r\n        if (!paramItems)\r\n            return;\r\n        const itemIndex = Array.from(paramItems).indexOf(item);\r\n        if (itemIndex)\r\n            this.itemsParam.removeItem(itemIndex, emit);\r\n    }\r\n    /**\r\n     * Removes all items from the group.\r\n     *\r\n     * @param emit - `true` triggers `valueChanged` event.\r\n     */\r\n    clearItems(emit = true) {\r\n        // Note: Unbind reversed so that indices\r\n        // do not get changed during the unbind.\r\n        const paramItems = this.itemsParam.value;\r\n        if (!paramItems)\r\n            return;\r\n        const items = Array.from(paramItems);\r\n        for (let i = items.length - 1; i >= 0; i--) {\r\n            this.unbindItem(items[i], i);\r\n        }\r\n        this.itemsParam.clearItems(emit);\r\n    }\r\n    /**\r\n     * Returns the list of `TreeItem` objects owned by the group.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getItems() {\r\n        return this.itemsParam.value;\r\n    }\r\n    /**\r\n     * Sets an entire new array of items to the BaseGroup replacing any previous items.\r\n     *\r\n     * @param items - List of `TreeItem` you want to add to the group\r\n     */\r\n    setItems(items) {\r\n        this.clearItems(false);\r\n        this.itemsParam.setItems(items);\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context) {\r\n        const j = super.toJSON(context);\r\n        const paramItems = this.itemsParam.value;\r\n        if (paramItems) {\r\n            const items = Array.from(paramItems);\r\n            const treeItems = [];\r\n            items.forEach((p) => {\r\n                const path = p.getPath();\r\n                treeItems.push(context ? context.makeRelative(path) : path);\r\n            });\r\n            j.treeItems = treeItems;\r\n        }\r\n        return j;\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context) {\r\n        super.fromJSON(j, context);\r\n        if (!j.treeItems) {\r\n            console.warn('Invalid Parameter JSON');\r\n            return;\r\n        }\r\n        if (!context) {\r\n            throw new Error('Unable to load JSON on a BaseGroup without a load context');\r\n        }\r\n        let count = j.treeItems.length;\r\n        const addItem = (path) => {\r\n            context.resolvePath(path, (treeItem) => {\r\n                this.addItem(treeItem);\r\n                count--;\r\n                if (count == 0) {\r\n                    this.loadDone();\r\n                }\r\n            }, () => {\r\n                console.warn(\"BaseGroup: '\" + this.getName() + \"'. Unable to load item:\" + path);\r\n            });\r\n        };\r\n        for (const path of j.treeItems) {\r\n            addItem(path);\r\n        }\r\n    }\r\n    /**\r\n     * called once loading is done. Some derived classes override this method.\r\n     * @private\r\n     */\r\n    loadDone() { }\r\n    // ////////////////////////////////////////\r\n    // Clone and Destroy\r\n    /**\r\n     * Copies current BaseGroup with all owned items.\r\n     *\r\n     * @param src - The group to copy from.\r\n     * @param context - The group to copy from.\r\n     */\r\n    copyFrom(src, context) {\r\n        super.copyFrom(src, context);\r\n    }\r\n}\r\nexport { BaseGroup };\r\n//# sourceMappingURL=BaseGroup.js.map","/* eslint-disable no-unused-vars */\r\nimport { Color } from '../../Math/index';\r\nimport { Registry } from '../../Registry';\r\nimport { BooleanParameter, NumberParameter, ColorParameter } from '../Parameters/index';\r\nimport { BaseGroup } from './BaseGroup';\r\nimport { TreeItem } from '../TreeItem';\r\nimport { BaseGeomItem } from '../BaseGeomItem';\r\n/**\r\n *\r\n * **Parameters**\r\n * * **Highlighted(`BooleanParameter`):** _todo_\r\n * * **HighlightColor(`ColorParameter`):** _todo_\r\n * * **HighlightFill(`NumberParameter`):** _todo_\r\n *\r\n * @extends BaseGroup\r\n */\r\nclass SelectionSet extends BaseGroup {\r\n    /**\r\n     * Creates an instance of a group.\r\n     *\r\n     * @param name - The name of the group.\r\n     */\r\n    constructor(name) {\r\n        super(name);\r\n        /**\r\n         * @member highlightedParam - Whether or not the TreeItem should be highlighted.\r\n         */\r\n        this.highlightedParam = new BooleanParameter('Highlighted', false);\r\n        /**\r\n         * @member highlightColorParam - The color of the highlight.\r\n         */\r\n        this.highlightColorParam = new ColorParameter('HighlightColor', new Color(0.5, 0.5, 1));\r\n        /**\r\n         * @member highlightFillParam - TODO\r\n         */\r\n        this.highlightFillParam = new NumberParameter('HighlightFill', 0.0, [0, 1]);\r\n        this.addParameter(this.highlightedParam);\r\n        this.highlightedParam.on('valueChanged', () => {\r\n            this.updateHighlight();\r\n        });\r\n        this.addParameter(this.highlightColorParam);\r\n        this.highlightColorParam.on('valueChanged', () => {\r\n            this.updateHighlight();\r\n        });\r\n        this.addParameter(this.highlightFillParam);\r\n        this.highlightFillParam.on('valueChanged', () => {\r\n            this.updateHighlight();\r\n        });\r\n    }\r\n    /**\r\n     * The updateVisibility method.\r\n     * @return - The return value.\r\n     * @private\r\n     */\r\n    updateVisibility() {\r\n        if (super.updateVisibility()) {\r\n            const value = this.isVisible();\r\n            Array.from(this.itemsParam.value).forEach((item) => {\r\n                if (item instanceof TreeItem)\r\n                    item.propagateVisibility(value ? 1 : -1);\r\n            });\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    // /////////////////////////////\r\n    /**\r\n     * The updateHighlight method.\r\n     * @private\r\n     */\r\n    updateHighlight() {\r\n        // Make this function async so that we don't pull on the\r\n        // graph immediately when we receive a notification.\r\n        // Note: propagating using an operator would be much better.\r\n        // setTimeout(() => {}, 0)\r\n        // TODO: make async\r\n        this.__updateHighlightHelper();\r\n    }\r\n    /**\r\n     * The updateHighlight method.\r\n     * @private\r\n     */\r\n    __updateHighlightHelper() {\r\n        let highlighted = false;\r\n        let color;\r\n        if (this.highlightedParam.value || this.isSelected()) {\r\n            highlighted = true;\r\n            color = this.highlightColorParam.value;\r\n            color.a = this.highlightFillParam.value;\r\n        }\r\n        const key = 'groupItemHighlight' + this.getId();\r\n        Array.from(this.itemsParam.value).forEach((item) => {\r\n            if (item instanceof TreeItem) {\r\n                if (highlighted)\r\n                    item.addHighlight(key, color, true);\r\n                else\r\n                    item.removeHighlight(key, true);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Changes selection's state of the group with all items it owns.\r\n     *\r\n     * @param sel - Boolean indicating the new selection state.\r\n     */\r\n    setSelected(sel) {\r\n        super.setSelected(sel);\r\n        this.updateHighlight();\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Items\r\n    /**\r\n     * The __bindItem method.\r\n     * @param item - The item value.\r\n     * @param index - The index value.\r\n     * @private\r\n     */\r\n    bindItem(item, index) {\r\n        super.bindItem(item, index);\r\n        const listenerIDs = this.__itemsEventHandlers[index];\r\n        if (!(item instanceof TreeItem))\r\n            return;\r\n        // ///////////////////////////////\r\n        // Update the highlight\r\n        if (item instanceof TreeItem && this.highlightedParam.value) {\r\n            const color = this.highlightColorParam.value;\r\n            color.a = this.highlightFillParam.value;\r\n            item.addHighlight('groupItemHighlight' + this.getId(), color, true);\r\n        }\r\n        if (!this.isVisible()) {\r\n            // Decrement the visibility counter which might cause\r\n            // this item to become invisible. (or it might already be invisible.)\r\n            item.propagateVisibility(-1);\r\n        }\r\n        listenerIDs['BoundingBox.valueChanged'] = item.boundingBoxParam.on('valueChanged', (event) => {\r\n            this.setBoundingBoxDirty();\r\n        });\r\n    }\r\n    /**\r\n     * The unbindItem method.\r\n     * @param item - The item value.\r\n     * @param index - The index value.\r\n     * @private\r\n     */\r\n    unbindItem(item, index) {\r\n        super.unbindItem(item, index);\r\n        if (!(item instanceof TreeItem))\r\n            return;\r\n        if (this.highlightedParam.value) {\r\n            item.removeHighlight('groupItemHighlight' + this.getId(), true);\r\n        }\r\n        if (!this.isVisible()) {\r\n            // Increment the Visibility counter which might cause\r\n            // this item to become visible.\r\n            // It will stay invisible if its parent is invisible, or if\r\n            // multiple groups connect to it and say it is invisible.\r\n            item.propagateVisibility(1);\r\n        }\r\n        // ///////////////////////////////\r\n        // Update the item cutaway\r\n        item.traverse((treeItem) => {\r\n            if (treeItem instanceof BaseGeomItem) {\r\n                treeItem.setCutawayEnabled(false);\r\n            }\r\n        }, true);\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Clone\r\n    /**\r\n     * The clone method constructs a new group,\r\n     * copies its values and returns it.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns a new cloned group.\r\n     */\r\n    clone(context) {\r\n        const cloned = new SelectionSet(this.__name + ' clone');\r\n        cloned.copyFrom(this, context);\r\n        return cloned;\r\n    }\r\n}\r\nRegistry.register('SelectionSet', SelectionSet); // TODO\r\nexport { SelectionSet };\r\n//# sourceMappingURL=SelectionSet.js.map","import { BaseEvent } from '../BaseEvent';\r\nclass StreamFileParsedEvent extends BaseEvent {\r\n    constructor(geomFileID, geomCount) {\r\n        super();\r\n        this.geomFileID = geomFileID;\r\n        this.geomCount = geomCount;\r\n    }\r\n}\r\nexport { StreamFileParsedEvent };\r\n//# sourceMappingURL=StreamFileParsedEvent.js.map","import { BaseEvent } from '../BaseEvent';\r\nclass RangeLoadedEvent extends BaseEvent {\r\n    constructor(range) {\r\n        super();\r\n        this.range = range;\r\n    }\r\n}\r\nexport { RangeLoadedEvent };\r\n//# sourceMappingURL=RangeLoadedEvent.js.map","/* eslint-disable require-jsdoc */\r\nimport { SystemDesc } from '../SystemDesc';\r\nimport { BinReader } from './BinReader';\r\nimport { PointsProxy, LinesProxy, MeshProxy } from './Geometry/GeomProxies';\r\nimport { EventEmitter } from '../Utilities/index';\r\nimport { resourceLoader } from './resourceLoader';\r\n// The GeomLibrary parses geometry data using workers.\r\n// This can be difficult to debug, so you can disable this\r\n// by setting the following boolean to false, and uncommenting\r\n// the import of parseGeomsBinary\r\nimport { parseGeomsBinary } from './Geometry/parseGeomsBinary';\r\n// @ts-ignore\r\nimport GeomParserWorker from 'web-worker:./Geometry/GeomParser-worker.js';\r\nconst workerParsing = true;\r\nimport { StreamFileParsedEvent } from '../Utilities/Events/StreamFileParsedEvent';\r\nimport { RangeLoadedEvent } from '../Utilities/Events/RangeLoadedEvent';\r\nconst numCores = SystemDesc.hardwareConcurrency - 1; // always leave one main thread code spare.\r\nlet workerId = 0;\r\nconst workers = [];\r\nconst listeners = [];\r\nconst getWorker = (geomLibraryId, fn) => {\r\n    const __workerId = workerId;\r\n    if (!workers[__workerId]) {\r\n        listeners[__workerId] = new Map();\r\n        const worker = new GeomParserWorker();\r\n        worker.onmessage = (event) => {\r\n            const data = event.data;\r\n            listeners[__workerId][data.geomLibraryId](data);\r\n        };\r\n        workers[__workerId] = worker;\r\n    }\r\n    listeners[__workerId][geomLibraryId] = (data) => {\r\n        // The callback should return true when the last data for this\r\n        // geom library is loaded.\r\n        const res = fn(data);\r\n        if (res) {\r\n            // If this geom library has finished loading, then we can check\r\n            // if we still need the worker. EAch worker keeps an array of listeners.\r\n            // One for each GeometryLibrary awaiting geoms to be processed.\r\n            // As we remove a GeometryLibrary callback from the list, once the list\r\n            // reaches zero, we can then terminate the worker and null the reference.\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                if (listeners[i][geomLibraryId]) {\r\n                    // remove the reference to the callback registered for this geom library.\r\n                    delete listeners[i][geomLibraryId];\r\n                    if (Object.keys(listeners[i]).length == 0) {\r\n                        // no more files are loading, we can kill this worker.\r\n                        // Note: this fixed a serious memory leak in our application caused\r\n                        // by workers maintaining references to callbacks that then held refereces\r\n                        // to the GeomLibrary.\r\n                        workers[i].terminate();\r\n                        workers[i] = null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const worker = workers[__workerId];\r\n    workerId = (__workerId + 1) % numCores;\r\n    return worker;\r\n};\r\n/** Class representing a geometry library.\r\n */\r\nclass GeomLibrary extends EventEmitter {\r\n    /**\r\n     * Create a geom library.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.listenerIDs = {};\r\n        this.__numGeoms = -1;\r\n        this.geoms = [];\r\n        this.basePath = '';\r\n        this.__loadedCount = 0;\r\n        this.__streamInfos = {};\r\n        this.__genBuffersOpts = {};\r\n        this.loadCount = 0;\r\n        this.queue = [];\r\n        this.on('streamFileParsed', (event) => {\r\n            this.loadCount--;\r\n            if (this.loadCount < numCores && this.queue.length) {\r\n                const { geomFileID, geomsData } = this.queue.pop();\r\n                this.readBinaryBuffer(geomFileID, geomsData.buffer, this.loadContext);\r\n            }\r\n        });\r\n        this.clear();\r\n    }\r\n    /**\r\n     * The clear method.\r\n     */\r\n    clear() {\r\n        this.__loadedCount = 0;\r\n        this.__numGeoms = -1;\r\n        this.geoms = [];\r\n    }\r\n    /**\r\n     * The returns true if all the geometries have been loaded and the loaded event has already been emitted.\r\n     * @return - True if all geometries are already loaded, else false.\r\n     */\r\n    isLoaded() {\r\n        return this.__loadedCount == this.__numGeoms;\r\n    }\r\n    /**\r\n     * Loads a single geometry file for this GeomLibrary.\r\n     *\r\n     * @private\r\n     *\r\n     * @param geomFileID - The index of the file to load\r\n     * @param incrementProgress - If true, the progress bar is incremented and decremented.\r\n     * @return the promise resolves once the file is loaded, but not parsed.\r\n     */\r\n    loadGeomFile(geomFileID, incrementProgress = false) {\r\n        if (incrementProgress)\r\n            resourceLoader.incrementWorkload(1);\r\n        return new Promise((resolve) => {\r\n            const geomFileUrl = this.basePath + geomFileID + '.zgeoms';\r\n            resourceLoader.loadFile('archive', geomFileUrl).then((entries) => {\r\n                const geomsData = entries[Object.keys(entries)[0]];\r\n                const streamFileParsedListenerID = this.on('streamFileParsed', (event) => {\r\n                    if (event.geomFileID == geomFileID) {\r\n                        resourceLoader.incrementWorkDone(1);\r\n                        this.removeListenerById('streamFileParsed', streamFileParsedListenerID);\r\n                        resolve();\r\n                    }\r\n                });\r\n                if (this.loadCount < numCores) {\r\n                    this.loadCount++;\r\n                    this.readBinaryBuffer(geomFileUrl, geomsData.buffer, this.loadContext);\r\n                }\r\n                else {\r\n                    this.queue.splice(0, 0, {\r\n                        geomFileID,\r\n                        geomsData,\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Loads the geometry files for this GeomLibrary.\r\n     * @param geomLibraryJSON - The json data describing the data needed to be loaded by the geom library\r\n     * @param basePath - The base path of the file. (this is theURL of the zcad file without its extension.)\r\n     * @param context - The value param.\r\n     */\r\n    loadGeomFilesStream(geomLibraryJSON, basePath, context) {\r\n        const numGeomFiles = geomLibraryJSON.numGeomsPerFile.length;\r\n        resourceLoader.incrementWorkload(numGeomFiles);\r\n        this.__numGeoms = geomLibraryJSON.numGeoms;\r\n        this.basePath = basePath;\r\n        this.loadContext = context;\r\n        for (let geomFileID = 0; geomFileID < numGeomFiles; geomFileID++) {\r\n            this.loadGeomFile(geomFileID, false);\r\n        }\r\n    }\r\n    /**\r\n     * The setGenBufferOption method.\r\n     * @param key - The key value.\r\n     * @param value - The value param.\r\n     */\r\n    setGenBufferOption(key, value) {\r\n        this.__genBuffersOpts[key] = value;\r\n    }\r\n    /**\r\n     * The setNumGeoms method.\r\n     * @param expectedNumGeoms - The expectedNumGeoms value.\r\n     */\r\n    setNumGeoms(expectedNumGeoms) {\r\n        this.__numGeoms = expectedNumGeoms;\r\n    }\r\n    /**\r\n     * Returns the number of geometries the GeomLibrary has, or will have at the end of loading.\r\n     * @return - The number of geometries.\r\n     */\r\n    getNumGeoms() {\r\n        return this.__numGeoms;\r\n    }\r\n    /**\r\n     * The getGeom method.\r\n     * @param index - The index value.\r\n     * @return - The stored geometry\r\n     */\r\n    getGeom(index) {\r\n        if (index >= this.geoms.length) {\r\n            // console.warn(\"Geom index invalid:\" + index);\r\n            return null;\r\n        }\r\n        return this.geoms[index];\r\n    }\r\n    /**\r\n     * The readBinaryBuffer method.\r\n     * @param geomFileID - The key value.\r\n     * @param buffer - The buffer value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinaryBuffer(geomFileID, buffer, context) {\r\n        const reader = new BinReader(buffer, 0, SystemDesc.isMobileDevice);\r\n        const numGeoms = reader.loadUInt32();\r\n        // Geoms within a given file are offset into the array of geometries of the library.\r\n        // Note: One day, the geom library should already know all the offsets for each file before loading.\r\n        const geomIndexOffset = reader.loadUInt32();\r\n        this.__streamInfos[geomFileID] = {\r\n            total: numGeoms,\r\n            done: 0,\r\n        };\r\n        if (numGeoms == 0) {\r\n            const event = new StreamFileParsedEvent(geomFileID, 0);\r\n            this.emit('streamFileParsed', event);\r\n            return;\r\n        }\r\n        if (this.__numGeoms == -1) {\r\n            // Note: for loading geom streams, we need to know the total number\r\n            // ahead of time to be able to generate accurate progress reports.\r\n            this.__numGeoms = numGeoms;\r\n            // throw(\"Loading cannot start will we know how many geoms.\");\r\n        }\r\n        const toc = reader.loadUInt32Array(numGeoms);\r\n        const numGeomsPerWorkload = Math.max(1, Math.floor(numGeoms / numCores + 1));\r\n        // TODO: Use SharedArrayBuffer once available.\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\r\n        let offset = 0;\r\n        while (offset < numGeoms) {\r\n            const bufferSliceStart = toc[offset];\r\n            let bufferSliceEnd;\r\n            let geomsRange;\r\n            if (offset + numGeomsPerWorkload >= numGeoms) {\r\n                geomsRange = [offset, numGeoms];\r\n                bufferSliceEnd = buffer.byteLength;\r\n            }\r\n            else {\r\n                geomsRange = [offset, offset + numGeomsPerWorkload];\r\n                bufferSliceEnd = toc[geomsRange[1]];\r\n            }\r\n            const bufferSlice = buffer.slice(bufferSliceStart, bufferSliceEnd);\r\n            offset += numGeomsPerWorkload;\r\n            if (workerParsing) {\r\n                // ////////////////////////////////////////////\r\n                // Multi Threaded Parsing\r\n                getWorker(this.getId(), (data) => {\r\n                    return this.__receiveGeomDatas(data);\r\n                }).postMessage({\r\n                    geomLibraryId: this.getId(),\r\n                    geomFileID,\r\n                    toc,\r\n                    geomIndexOffset,\r\n                    geomsRange,\r\n                    isMobileDevice: reader.isMobileDevice,\r\n                    bufferSlice,\r\n                    genBuffersOpts: this.__genBuffersOpts,\r\n                    context: {\r\n                        versions: context.versions,\r\n                    },\r\n                }, [bufferSlice]);\r\n            }\r\n            else {\r\n                // ////////////////////////////////////////////\r\n                // Main Threaded Parsing. Use this to debug the parsing of geoms.\r\n                // const bufferSlice = buffer.slice(toc[0], buffer.byteLength)\r\n                // const geomsRange = [0, numGeoms]\r\n                parseGeomsBinary({\r\n                    geomLibraryId: this.getId(),\r\n                    geomFileID,\r\n                    toc,\r\n                    geomIndexOffset,\r\n                    geomsRange,\r\n                    isMobileDevice: reader.isMobileDevice,\r\n                    bufferSlice,\r\n                    genBuffersOpts: this.__genBuffersOpts,\r\n                    context,\r\n                }, (data) => {\r\n                    this.__receiveGeomDatas(data);\r\n                });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * The __receiveGeomDatas method.\r\n     * @private\r\n     * @param data - The data received back from the web worker\r\n     * @return - returns true once all data for this geom library has been loaded.\r\n     */\r\n    __receiveGeomDatas(data) {\r\n        const { geomLibraryId, geomFileID, geomDatas, geomIndexOffset, geomsRange } = data;\r\n        if (geomLibraryId != this.getId())\r\n            throw new Error('Receiving workload for a different GeomLibrary');\r\n        // We are storing a subset of the geoms from a binary file\r\n        // which is a subset of the geoms in an asset.\r\n        // geomIndexOffset: the offset of the file geoms in the asset.\r\n        // geomsRange: the range of geoms in the bin file.\r\n        const offset = geomIndexOffset + geomsRange[0];\r\n        const storedRange = [offset, geomIndexOffset + geomsRange[1]];\r\n        for (let i = 0; i < geomDatas.length; i++) {\r\n            const geomData = geomDatas[i];\r\n            if (!geomData.type)\r\n                continue;\r\n            let proxy;\r\n            switch (geomData.type) {\r\n                case 'Points':\r\n                    proxy = new PointsProxy(geomData);\r\n                    break;\r\n                case 'Lines':\r\n                    proxy = new LinesProxy(geomData);\r\n                    break;\r\n                case 'Mesh':\r\n                case 'Plane': // TODO: Support procedural shape params\r\n                case 'Sphere':\r\n                case 'Cone':\r\n                    proxy = new MeshProxy(geomData);\r\n                    break;\r\n                default:\r\n                    throw new Error('Unsupported Geom type:');\r\n            }\r\n            this.geoms[offset + i] = proxy;\r\n        }\r\n        const event = new RangeLoadedEvent(storedRange);\r\n        this.emit('rangeLoaded', event);\r\n        const loaded = storedRange[1] - storedRange[0];\r\n        // console.log(\"GeomLibrary Loaded:\" + loaded);\r\n        // Each file in the stream has its own counter for the number of\r\n        // geoms, and once each stream file finishes parsing, we fire a signal.\r\n        const streamInfo = this.__streamInfos[geomFileID];\r\n        streamInfo.done += loaded;\r\n        // console.log('__receiveGeomDatas:', geomFileID + ' Loaded:' + streamInfo.done + ' of :' + streamInfo.total)\r\n        if (streamInfo.done == streamInfo.total) {\r\n            const event = new StreamFileParsedEvent(geomFileID, streamInfo.done); // TODO: done returns an 'any' type\r\n            this.emit('streamFileParsed', event);\r\n        }\r\n        // Once all the geoms from all the files are loaded and parsed\r\n        // fire the loaded signal.\r\n        this.__loadedCount += loaded;\r\n        // console.log(\"this.__loadedCount:\" + this.__loadedCount +\" this.__numGeoms:\" + this.__numGeoms);\r\n        if (this.__loadedCount == this.__numGeoms) {\r\n            // console.log(\"GeomLibrary Loaded:\" + this.__name + \" count:\" + geomDatas.length + \" loaded:\" + this.__loadedCount);\r\n            this.emit('loaded');\r\n        }\r\n        // Return true if we are done loading geoms\r\n        // This allows the worker to be shut down and free up memory.\r\n        return this.__loadedCount == this.__numGeoms;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON() {\r\n        return {\r\n            numGeoms: this.geoms.length,\r\n        };\r\n    }\r\n    /**\r\n     * The toString method.\r\n     * @return - The return value.\r\n     */\r\n    toString() {\r\n        return JSON.stringify(this.toJSON(), null, 2);\r\n    }\r\n    static shutDownWorkers() {\r\n        workers.forEach((worker, index) => {\r\n            worker.terminate();\r\n        });\r\n    }\r\n}\r\nexport { GeomLibrary };\r\n//# sourceMappingURL=GeomLibrary.js.map","import { SystemDesc } from '../SystemDesc';\r\nimport { EventEmitter } from '../Utilities/index';\r\nimport { Registry } from '../Registry';\r\nimport { Material } from './Material';\r\nimport { FileImage } from './Images/index';\r\n/** Class representing a material library in a scene tree.\r\n * @private\r\n */\r\nclass MaterialLibrary extends EventEmitter {\r\n    /**\r\n     * Create a material library.\r\n     * @param name - The name of the material library.\r\n     */\r\n    constructor(name = 'MaterialLibrary') {\r\n        super();\r\n        this.__images = {};\r\n        this.__materials = {};\r\n        this.name = '';\r\n        this.__name = name;\r\n        this.lod = 0;\r\n        if (SystemDesc.isMobileDevice)\r\n            this.lod = 1;\r\n        this.clear();\r\n    }\r\n    /**\r\n     * The clear method.\r\n     */\r\n    clear() {\r\n        this.__images = {};\r\n        this.__materials = {\r\n            Default: new Material('Default', 'SimpleSurfaceShader'),\r\n        };\r\n    }\r\n    /**\r\n     * The getPath method.\r\n     * @return - The return value.\r\n     */\r\n    getPath() {\r\n        return [this.__name];\r\n    }\r\n    /**\r\n     * The resolvePath method traverses the subtree from this item down\r\n     * matching each name in the path with a child until it reaches the\r\n     * end of the path.\r\n     *\r\n     * @param path - The path value.\r\n     * @param index - The index value.\r\n     * @return - The return value.\r\n     */\r\n    resolvePath(path, index = 0) {\r\n        return null;\r\n    }\r\n    /**\r\n     * The getNumMaterials method.\r\n     * @return - The return value.\r\n     */\r\n    getNumMaterials() {\r\n        return Object.keys(this.__materials).length;\r\n    }\r\n    /**\r\n     * The getMaterials method.\r\n     * @return - The return value.\r\n     */\r\n    getMaterials() {\r\n        return Object.values(this.__materials);\r\n    }\r\n    /**\r\n     * The getMaterialNames method.\r\n     * @return - The return value.\r\n     */\r\n    getMaterialNames() {\r\n        const names = [];\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const name in this.__materials) {\r\n            names.push(name);\r\n        }\r\n        return names;\r\n    }\r\n    /**\r\n     * The hasMaterial method.\r\n     * @param name - The name value.\r\n     * @return - The return value.\r\n     */\r\n    hasMaterial(name) {\r\n        return name in this.__materials;\r\n    }\r\n    /**\r\n     * Add a material.\r\n     * @param material - The material value.\r\n     */\r\n    addMaterial(material) {\r\n        material.setOwner(this);\r\n        this.__materials[material.getName()] = material;\r\n    }\r\n    /**\r\n     * The getMaterial method.\r\n     * @param name - The material name.\r\n     * @param assert - The assert value.\r\n     * @return - The return value.\r\n     */\r\n    getMaterial(name, assert = true) {\r\n        const res = this.__materials[name];\r\n        if (!res && assert) {\r\n            throw new Error('Material:' + name + ' not found in library:' + this.getMaterialNames());\r\n        }\r\n        return res;\r\n    }\r\n    /**\r\n     * The hasImage method.\r\n     * @param name - The material name.\r\n     * @return - The return value.\r\n     */\r\n    hasImage(name) {\r\n        return name in this.__images;\r\n    }\r\n    /**\r\n     * The addImage method.\r\n     * @param image - The image value.\r\n     */\r\n    addImage(image) {\r\n        image.setOwner(this);\r\n        this.__images[image.getName()] = image;\r\n    }\r\n    /**\r\n     * The getImage method.\r\n     * @param name - The material name.\r\n     * @param assert - The assert value.\r\n     * @return - The return value.\r\n     */\r\n    getImage(name, assert = true) {\r\n        const res = this.__images[name];\r\n        if (!res && assert) {\r\n            throw new Error('Image:' + name + ' not found in library:' + this.getImageNames());\r\n        }\r\n        return res;\r\n    }\r\n    /**\r\n     * The getImageNames method.\r\n     * @return - The return value.\r\n     */\r\n    getImageNames() {\r\n        const names = [];\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const name in this.__images) {\r\n            names.push(name);\r\n        }\r\n        return names;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The load method.\r\n     * @param filePath - The file path.\r\n     */\r\n    load(filePath) {\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open('GET', filePath, true);\r\n        xhr.ontimeout = () => {\r\n            throw new Error('The request for ' + filePath + ' timed out.');\r\n        };\r\n        xhr.onload = () => {\r\n            if (xhr.readyState === 4) {\r\n                if (xhr.status === 200) {\r\n                    this.fromJSON(JSON.parse(xhr.responseText));\r\n                }\r\n                else {\r\n                    console.warn(xhr.statusText);\r\n                }\r\n            }\r\n        };\r\n        xhr.send(null);\r\n    }\r\n    /**\r\n     * The toJSON method encodes the current object as a json object.\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context = {}) {\r\n        return {\r\n            numMaterials: this.getNumMaterials(),\r\n        };\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context = {}) {\r\n        context.lod = this.lod;\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const name in j.textures) {\r\n            const image = new FileImage(name);\r\n            image.fromJSON(j.textures[name]);\r\n            this.__images[name] = image; // TODO: texture -> image\r\n        }\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const name in j.materials) {\r\n            const material = new Material(name);\r\n            material.fromJSON(j.materials[name]);\r\n            this.addMaterial(material);\r\n        }\r\n    }\r\n    /**\r\n     * The readBinary method.\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context = {}) {\r\n        // if (context.version == undefined) context.version = 0\r\n        this.name = reader.loadStr();\r\n        // Specify the Lod to load the images in this library.\r\n        context.lod = this.lod;\r\n        context.materialLibrary = this;\r\n        const numTextures = reader.loadUInt32();\r\n        for (let i = 0; i < numTextures; i++) {\r\n            const type = reader.loadStr();\r\n            const texture = Registry.constructClass(type);\r\n            texture.readBinary(reader, context);\r\n            this.__images[texture.getName()] = texture;\r\n        }\r\n        const numMaterials = reader.loadUInt32();\r\n        if (numMaterials > 0) {\r\n            const toc = reader.loadUInt32Array(numMaterials);\r\n            for (let i = 0; i < numMaterials; i++) {\r\n                const shaderName = reader.loadStr();\r\n                let material;\r\n                switch (shaderName) {\r\n                    case 'StandardMaterial':\r\n                    case 'TransparentMaterial':\r\n                    case 'StandardSurfaceShader':\r\n                        material = Registry.constructClass('StandardSurfaceMaterial');\r\n                        break;\r\n                    case 'SimpleSurfaceShader':\r\n                    case 'SimpleSurfaceMaterial':\r\n                        material = Registry.constructClass('SimpleSurfaceMaterial');\r\n                        break;\r\n                    case 'PointsShader':\r\n                    case 'PointsMaterial':\r\n                        material = Registry.constructClass('PointsMaterial');\r\n                        break;\r\n                    case 'FatPointsShader':\r\n                    case 'FatPointsMaterial':\r\n                        material = Registry.constructClass('FatPointsMaterial');\r\n                        break;\r\n                    case 'LinesShader':\r\n                    case 'LinesMaterial':\r\n                        material = Registry.constructClass('LinesMaterial');\r\n                        break;\r\n                    default:\r\n                        material = new Material('');\r\n                        break;\r\n                }\r\n                reader.seek(toc[i]); // Reset the pointer to the start of the item data.\r\n                material.readBinary(reader, context); // (reader, context, this.__images)\r\n                this.addMaterial(material);\r\n            }\r\n        }\r\n        this.emit('loaded');\r\n    }\r\n    /**\r\n     * The toString method.\r\n     * @return - The return value.\r\n     */\r\n    toString() {\r\n        return JSON.stringify(this.toJSON(), null, 2);\r\n    }\r\n}\r\nexport { MaterialLibrary };\r\n//# sourceMappingURL=MaterialLibrary.js.map","import { Version } from './Version';\r\nimport { TreeItem } from './TreeItem';\r\nimport { SelectionSet } from './Groups/SelectionSet';\r\nimport { GeomLibrary } from './GeomLibrary';\r\nimport { MaterialLibrary } from './MaterialLibrary';\r\nimport { Registry } from '../Registry';\r\n/**\r\n * Given a units string, load returns a factor relative to meters\r\n * e.g. for Millimeters, returns 0.001, for Meters, returns 1.0\r\n * Given 2 different units, the factors are combined together to calculate the conversion between the 2 units.\r\n * @param units the name of the units value for the load context.\r\n * Supports: ['millimeters', 'centimeters', 'decimeters', 'meters', 'kilometers', 'inches', 'feet', 'miles']\r\n * @return Returns the factor relative to meters.\r\n */\r\nconst getUnitsFactor = (units) => {\r\n    switch (units.toLowerCase()) {\r\n        case 'millimeters':\r\n            return 0.001;\r\n        case 'centimeters':\r\n            return 0.01;\r\n        case 'decimeters':\r\n            return 0.1;\r\n        case 'meters':\r\n            return 1.0;\r\n        case 'kilometers':\r\n            return 1000.0;\r\n        case 'inches':\r\n            return 0.0254;\r\n        case 'feet':\r\n            return 0.3048;\r\n        case 'miles':\r\n            return 1609.34;\r\n    }\r\n    return 1.0;\r\n};\r\n/**\r\n * Represents a TreeItem with rendering and material capabilities.\r\n *\r\n * @extends TreeItem\r\n */\r\nclass AssetItem extends TreeItem {\r\n    /**\r\n     * Create an asset item.\r\n     * @param name - The name of the asset item.\r\n     */\r\n    constructor(name = '') {\r\n        super(name);\r\n        this.geomLibrary = new GeomLibrary();\r\n        this.materialLibrary = new MaterialLibrary();\r\n        this.loaded = false;\r\n        this.unitsScale = 1.0;\r\n        this.units = 'meters';\r\n    }\r\n    /**\r\n     * Loads all the geometries and metadata from the asset file.\r\n     * @param url - The URL of the asset to load\r\n     * @return - Returns a promise that resolves once the initial load is complete\r\n     */\r\n    load(url) {\r\n        return Promise.reject(`This method is not implemented for this Asset Item: ${url}`);\r\n    }\r\n    /**\r\n     * Returns the loaded status of current item.\r\n     *\r\n     * @return - Returns true if the asset has already loaded its data.\r\n     */\r\n    isLoaded() {\r\n        return this.loaded;\r\n    }\r\n    /**\r\n     * Returns the zea engine version as an array with major, minor, patch order.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getEngineDataVersion() {\r\n        return this.engineDataVersion;\r\n    }\r\n    /**\r\n     * Returns asset `GeomLibrary` that is in charge of rendering geometry data using workers.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getGeometryLibrary() {\r\n        return this.geomLibrary;\r\n    }\r\n    /**\r\n     * Returns `MaterialLibrary` that is in charge of storing all materials of current Item.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getMaterialLibrary() {\r\n        return this.materialLibrary;\r\n    }\r\n    /**\r\n     * Returns the scale factor of current item.\r\n     * @return - The return value.\r\n     */\r\n    getUnitsConversion() {\r\n        return this.unitsScale;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The readBinary method.\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     */\r\n    readBinary(reader, context) {\r\n        context.assetItem = this;\r\n        context.numTreeItems = 0;\r\n        if (!context.units)\r\n            context.units = 'meters';\r\n        context.numGeomItems = 0;\r\n        if (!context.versions['zea-engine']) {\r\n            context.versions['zea-engine'] = new Version(reader.loadStr());\r\n        }\r\n        this.engineDataVersion = context.versions['zea-engine'];\r\n        const loadUnits = () => {\r\n            this.units = reader.loadStr();\r\n            // Calculate a scale factor to convert\r\n            // the asset units to meters(the scene units)\r\n            const unitsFactor = getUnitsFactor(this.units);\r\n            const contextUnitsFactor = getUnitsFactor(context.units);\r\n            this.unitsScale = unitsFactor / contextUnitsFactor;\r\n            // The context propagates the new units to children assets.\r\n            // This means that a child asset applies a unitsScale relative to this asset.\r\n            context.units = this.units;\r\n            // Apply units change to existing Xfo (avoid changing tr).\r\n            const localXfoParam = this.localXfoParam;\r\n            const xfo = localXfoParam.value;\r\n            xfo.sc.scaleInPlace(this.unitsScale);\r\n            localXfoParam.value = xfo;\r\n        };\r\n        if (context.versions['zea-engine'].compare([0, 0, 6]) > 0) {\r\n            // Loading units modifies our Xfo, which then propagates up\r\n            // the tree forcing a re-computation. Better just do it at\r\n            // the start.\r\n            loadUnits();\r\n        }\r\n        let layerRoot;\r\n        const layers = {};\r\n        context.addGeomToLayer = (geomItem, layer) => {\r\n            if (!layers[layer]) {\r\n                if (!layerRoot) {\r\n                    layerRoot = new TreeItem('Layers');\r\n                    this.addChild(layerRoot, false);\r\n                }\r\n                const group = new SelectionSet(layer);\r\n                layerRoot.addChild(group, false);\r\n                layers[layer] = group;\r\n            }\r\n            layers[layer].addItem(geomItem);\r\n        };\r\n        const postLoadCallbacks = []; // Post load callbacks.\r\n        context.resolvePath = (path, onSucceed, onFail) => {\r\n            if (!path)\r\n                throw new Error('Path not specified');\r\n            // Note: Why not return a Promise here?\r\n            // Promise evaluation is always async, so\r\n            // all promises will be resolved after the current call stack\r\n            // has terminated. In our case, we want all paths\r\n            // to be resolved before the end of the function, which\r\n            // we can handle easily with callback functions.\r\n            try {\r\n                const item = this.resolvePath(path);\r\n                onSucceed(item);\r\n            }\r\n            catch (e) {\r\n                // Some paths resolve to items generated during load,\r\n                // so push a callback to re-try after the load is complete.\r\n                postLoadCallbacks.push(() => {\r\n                    try {\r\n                        const item = this.resolvePath(path);\r\n                        onSucceed(item);\r\n                    }\r\n                    catch (e) {\r\n                        if (onFail) {\r\n                            onFail(e);\r\n                        }\r\n                        else {\r\n                            throw e;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        context.addPLCB = (postLoadCallback) => postLoadCallbacks.push(postLoadCallback);\r\n        this.materialLibrary.readBinary(reader, context);\r\n        super.readBinary(reader, context);\r\n        if (context.versions['zea-engine'].compare([0, 0, 5]) >= 0 &&\r\n            context.versions['zea-engine'].compare([0, 0, 7]) < 0) {\r\n            loadUnits();\r\n        }\r\n        // Invoke all the post-load callbacks to resolve any\r\n        // remaining references.\r\n        for (const cb of postLoadCallbacks)\r\n            cb();\r\n        this.loaded = true;\r\n        // console.log(\"numTreeItems:\", context.numTreeItems, \" numGeomItems:\", context.numGeomItems)\r\n    }\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns the json object.\r\n     */\r\n    toJSON(context = {}) {\r\n        context.makeRelative = (path) => {\r\n            const assetPath = this.getPath();\r\n            const start = path.slice(0, assetPath.length);\r\n            for (let i = 0; i < start.length - 1; i++) {\r\n                if (start[i] != assetPath[i]) {\r\n                    console.warn('Param Path is not relative to the asset. May not be able to be resolved at load time:' + path);\r\n                    return path;\r\n                }\r\n            }\r\n            // Relative paths start with a symbol for the root element.\r\n            const relativePath = path.slice(assetPath.length - 1);\r\n            relativePath[0] = '.';\r\n            return relativePath;\r\n        };\r\n        context.assetItem = this;\r\n        const j = super.toJSON(context);\r\n        return j;\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param j - The json object this item must decode.\r\n     * @param context - The context value.\r\n     */\r\n    fromJSON(j, context = {}) {\r\n        if (!context)\r\n            context = {};\r\n        context.assetItem = this;\r\n        context.numTreeItems = 0;\r\n        context.numGeomItems = 0;\r\n        if (context.version == undefined)\r\n            context.version = 0;\r\n        context.assetItem = this;\r\n        const postLoadCallbacks = []; // Post load callbacks.\r\n        context.resolvePath = (path, cb) => {\r\n            // Note: Why not return a Promise here?\r\n            // Promise evaluation is always async, so\r\n            // all promises will be resolved after the current call stack\r\n            // has terminated. In our case, we want all paths\r\n            // to be resolved before the end of the function, which\r\n            // we can handle easily with callback functions.\r\n            if (!path)\r\n                throw new Error('Path not specified');\r\n            const item = this.resolvePath(path);\r\n            if (item) {\r\n                cb(item);\r\n            }\r\n            else {\r\n                // Some paths resolve to items generated during load,\r\n                // so push a callback to re-try after the load is complete.\r\n                postLoadCallbacks.push(() => {\r\n                    const param = this.resolvePath(path);\r\n                    if (param)\r\n                        cb(param);\r\n                    else {\r\n                        console.warn('Path unable to be resolved:' + path);\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        context.addPLCB = (postLoadCallback) => postLoadCallbacks.push(postLoadCallback);\r\n        // Avoid loading the FilePath as we are already loading json data.\r\n        // if (j.params && j.params.FilePath) {\r\n        //   delete j.params.FilePath\r\n        // }\r\n        super.fromJSON(j, context);\r\n        // Invoke all the post-load callbacks to resolve any\r\n        // remaining references.\r\n        for (const cb of postLoadCallbacks)\r\n            cb();\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Clone and Destroy\r\n    /**\r\n     * The clone method constructs a new tree item, copies its values\r\n     * from this item and returns it.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns a new cloned tree item.\r\n     */\r\n    clone(context) {\r\n        const cloned = new AssetItem();\r\n        cloned.copyFrom(this, context);\r\n        return cloned;\r\n    }\r\n    /**\r\n     * Copies current TreeItem with all its children.\r\n     *\r\n     * @param src - The tree item to copy from.\r\n     * @param context - The context value.\r\n     */\r\n    copyFrom(src, context) {\r\n        this.geomLibrary = src.geomLibrary;\r\n        this.materialLibrary = src.materialLibrary;\r\n        this.loaded = src.loaded;\r\n        if (!src.loaded) {\r\n            src.once('loaded', (event) => {\r\n                const srcLocalXfo = src.localXfoParam.value;\r\n                const localXfo = this.localXfoParam.value;\r\n                localXfo.sc = srcLocalXfo.sc.clone();\r\n                this.localXfoParam.value = localXfo;\r\n                src.getChildren().forEach((srcChildItem) => {\r\n                    if (srcChildItem && srcChildItem != AssetItem) {\r\n                        this.addChild(srcChildItem.clone(context), false, false);\r\n                    }\r\n                });\r\n                this.loaded = true;\r\n                this.emit('loaded', event);\r\n            });\r\n        }\r\n        super.copyFrom(src, context);\r\n    }\r\n}\r\nRegistry.register('AssetItem', AssetItem);\r\nexport { AssetItem };\r\n//# sourceMappingURL=AssetItem.js.map","import { EventEmitter } from '../Utilities/EventEmitter';\r\n/**\r\n * Provides a context for loading assets. This context can provide the units of the loading scene.\r\n * E.g. you can specify the scene units as 'millimeters' in the context object.\r\n * To load external references, you can also provide a dictionary that maps filenames to URLs that are used\r\n * to resolve the URL of an external reference that a given asset is expecting to find.\r\n */\r\nexport class AssetLoadContext extends EventEmitter {\r\n    /**\r\n     * Create a AssetLoadContext\r\n     * @param context The source context to base this context on.\r\n     */\r\n    constructor(context) {\r\n        super();\r\n        this.units = context ? context.units : 'meters';\r\n        this.assets = context ? context.assets : {};\r\n        this.resources = context ? context.resources : {};\r\n        this.versions = {};\r\n        this.url = '';\r\n        this.folder = '';\r\n        this.sdk = '';\r\n        this.assetItem = null;\r\n        this.numTreeItems = 0;\r\n        this.numGeomItems = 0;\r\n        this.postLoadCallbacks = []; // Post load callbacks.\r\n        this.asyncCount = 0;\r\n    }\r\n    /**\r\n     * During loading, asynchronous processes may be launched, and subsequently completed.\r\n     * These method helps the Asset track how many asynchronous loading operations may be\r\n     * occurring with the tree during load.\r\n     * As each external reference starts to load, it increments this counter, letting the owning\r\n     * Asset know to wait till the children are loaded before emitting its own 'loaded' event.\r\n     */\r\n    incrementAsync() {\r\n        this.asyncCount++;\r\n    }\r\n    /**\r\n     * As each external reference completes loading, it decrements this counter allowing the owning\r\n     * asset to know that the subtrees are loaded.\r\n     */\r\n    decrementAsync() {\r\n        this.asyncCount--;\r\n        // Wait for all nested XRefs to load before considering this asset loaded.\r\n        if (this.asyncCount == 0) {\r\n            this.emit('done');\r\n        }\r\n    }\r\n    /**\r\n     * Resolves a path within the loading asset. This is used to connect\r\n     * items within the tree to other items. e.g. a Group can find its members.\r\n     * or an instance can find its source tree.\r\n     * @param path the path within the tree relative to the loading asset\r\n     * @param onSucceed called with the successful result of the path resolution.\r\n     * @param onFail called when the path resolution fails.\r\n     */\r\n    resolvePath(path, onSucceed, onFail) {\r\n        // Note: Why not return a Promise here?\r\n        // Promise evaluation is always async, so\r\n        // all promises will be resolved after the current call stack\r\n        // has terminated. In our case, we want all paths\r\n        // to be resolved before the end of the function, which\r\n        // we can handle easily with callback functions.\r\n        try {\r\n            const item = this.assetItem.resolvePath(path);\r\n            onSucceed(item);\r\n        }\r\n        catch (e) {\r\n            // Some paths resolve to items generated during load,\r\n            // so push a callback to re-try after the load is complete.\r\n            this.postLoadCallbacks.push(() => {\r\n                try {\r\n                    const param = this.assetItem.resolvePath(path);\r\n                    onSucceed(param);\r\n                }\r\n                catch (e) {\r\n                    if (onFail) {\r\n                        onFail(e);\r\n                    }\r\n                    else {\r\n                        throw new Error(e.message);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Adds a function to be called back once the main load call stack exists.\r\n     * This is used to connect parts of the tree together after loading.\r\n     * e.g. an instance will\r\n     * @param postLoadCallback\r\n     */\r\n    addPLCB(postLoadCallback) {\r\n        this.postLoadCallbacks.push(postLoadCallback);\r\n    }\r\n}\r\n//# sourceMappingURL=AssetLoadContext.js.map","import { Color, Vec2 } from '../Math/index';\r\nimport { BooleanParameter, NumberParameter, ColorParameter, ImageParameter, Vec2Parameter } from './Parameters/index';\r\nimport { TreeItem } from './TreeItem';\r\nimport { Registry } from '../Registry';\r\n/**\r\n * A special type of TreeItem(Item with hierarchical abilities) class that represents a banner in a 2D dimension.\r\n * Can own any type of `BaseImage`.\r\n * **Parameters**\r\n * * **Image(`ImageParameter`):** Is the BaseImage you want to display on the board.\r\n * * **PixelsPerMeter(`NumberParameter`):** Quality and Size of the board. The bigger the number, the smaller the board.\r\n * * **Alpha(`NumberParameter`):** Transparency of the board, from 0 to 1.\r\n * * **AlignedToCamera(`BooleanParameter`):** Faces or not the board to the camera at all time(Moves with camera movement).\r\n * * **DrawOnTop(`BooleanParameter`):** The billboards are rendered overlaid on the scene.\r\n * * **FixedSizeOnscreen(`BooleanParameter`):** The billboards are rendered at a fixed size on screen, regardless of the distance to the billboard.\r\n *\r\n * @extends TreeItem\r\n */\r\nclass BillboardItem extends TreeItem {\r\n    constructor(name, image) {\r\n        super(name);\r\n        /**\r\n         * Creates a billboard item.\r\n         *\r\n         * @param name - The name of the billboard item.\r\n         * @param image - The image value.\r\n         */\r\n        /**\r\n         * @member imageParam - Is the BaseImage you want to display on the board.\r\n         */\r\n        this.imageParam = new ImageParameter('Image');\r\n        /**\r\n         * @member pixelsPerMeterParam - Quality and Size of the board. The bigger the number, the smaller the board.\r\n         */\r\n        this.pixelsPerMeterParam = new NumberParameter('PixelsPerMeter', 1000.0);\r\n        /**\r\n         * @member alphaParam - Transparency of the board, from 0 to 1.\r\n         */\r\n        this.alphaParam = new NumberParameter('Alpha', 1.0);\r\n        /**\r\n         * @member colorParam - The color of the billboard\r\n         */\r\n        this.colorParam = new ColorParameter('Color', new Color(1.0, 1.0, 1.0));\r\n        /**\r\n         * @member alignedToCameraParam - Faces or not the board to the camera at all time(Moves with camera movement).\r\n         */\r\n        this.alignedToCameraParam = new BooleanParameter('AlignedToCamera', false);\r\n        /**\r\n         * @member drawOnTopParam - The billboards are rendered overlaid on the scene.\r\n         */\r\n        this.drawOnTopParam = new BooleanParameter('DrawOnTop', false);\r\n        /**\r\n         * @member fixedSizeOnscreenParam - The billboards are rendered at a fixed size on screen, regardless of the distance to the billboard.\r\n         */\r\n        this.fixedSizeOnscreenParam = new BooleanParameter('FixedSizeOnscreen', false);\r\n        /**\r\n         * @member pivotParam - Where the pivot of the billboard is.\r\n         */\r\n        this.pivotParam = new Vec2Parameter('Pivot', new Vec2(0.5, 0.0));\r\n        const imageParamResult = this.addParameter(this.imageParam);\r\n        if (image)\r\n            imageParamResult.value = image; // Note: this dirties the param and will ensure it is saved to JSON\r\n        this.addParameter(this.pixelsPerMeterParam);\r\n        this.addParameter(this.alphaParam);\r\n        this.addParameter(this.colorParam);\r\n        this.addParameter(this.alignedToCameraParam);\r\n        this.addParameter(this.drawOnTopParam);\r\n        this.addParameter(this.fixedSizeOnscreenParam);\r\n        this.addParameter(this.pivotParam);\r\n    }\r\n}\r\nRegistry.register('BillboardItem', BillboardItem);\r\nexport { BillboardItem };\r\n//# sourceMappingURL=BillboardItem.js.map","/* eslint-disable no-unused-vars */\r\nimport { Vec3, Box3, Xfo, Mat4, Vec2 } from '../Math/index';\r\nimport { GeomItem } from './GeomItem';\r\nimport { TreeItem } from './TreeItem';\r\nimport { NumberParameter } from './Parameters/index';\r\nimport { MathFunctions } from '../Utilities/MathFunctions';\r\nimport { Registry } from '../Registry';\r\n/**\r\n * The Camera class is used to provide a point of view of the scene. The viewport is assigned\r\n * a camera, which is uses during drawing. The camera controls the view and projection used to\r\n * render the scene.\r\n *\r\n * Cameras can provide a perspective projection, or an orthographic projection, and anything in between.\r\n * To configure whether th projection provided by the camera is Orthographic or Perspective, set\r\n * the value of the 'isOrthographic' Parameter to a value between 0 and 1. 0.0 being fully perspective\r\n * and 1.0 being fully Orthographic.\r\n * Alternatively, you can call camera.setIsOrthographic and pass the value, and a time in milliseconds to\r\n * take to transition between the current value and your new value.\r\n * ```javascript\r\n *   camera.setIsOrthographic(1, 400);\r\n * ```\r\n *\r\n * By default, the Camera automatically adjusts the near and far planes as the focal distance is modified. This\r\n * behavior can be disabled, by setting the adjustNearAndFarPlanesToFocalDist property to false.\r\n * Alternatively, you can also adjust the factors that are used to modify the near and far plane based on the\r\n * focal distance.\r\n * ```javascript\r\n *   camera.adjustNearAndFarPlanesToFocalDist = true\r\n *   camera.nearDistFactor = 0.01\r\n *   camera.farDistFactor = 5\r\n * ```\r\n *\r\n * **Parameters**\r\n * * **isOrthographic(`NumberParameter`):** Controls the projection matrix generated by the camera. A value of 0.0, means a perspective projection, while 1 an orthographic projection. Any value in between generates a blended perspective -> orthographic projection.\r\n * * **fov(`NumberParameter`):** The vertical angle of the view frustum when generating a perspective projection. In orthographic mode, this value is used to calculate the size of the view at the target distance.\r\n * * **near(`NumberParameter`):** The near clipping distance of the camera.\r\n * * **far(`NumberParameter`):** The far clipping distance of the camera.\r\n * * **focalDistance(`NumberParameter`):** The distance at which the camera is focussed. Note: the CameraManipulator sets the focal distance when zooming in on a target.\r\n *\r\n * **Events**\r\n * * **projectionParamChanged:** When on of the parameters above change, the camera emits this event. Note: the Viewport listens to this event and triggers re-rendering.\r\n * * **movementFinished:** Triggered at the conclusion of some action. E.g. when a zoom action is finished, or when the mouse is released after an orbit action. The viewport listens to this event and triggers a re-rendering of the selection buffers.\r\n * @extends TreeItem\r\n */\r\nclass Camera extends TreeItem {\r\n    /**\r\n     * Instantiates a camera object, setting default configuration like zoom, target and positioning.\r\n     *\r\n     * @param name - The name of the camera.\r\n     */\r\n    constructor(name = 'Camera') {\r\n        super(name);\r\n        this.isOrthographicParam = new NumberParameter('isOrthographic', 0.0);\r\n        this.fovParam = new NumberParameter('fov', 1.0);\r\n        this.nearParam = new NumberParameter('near', 0.1);\r\n        this.farParam = new NumberParameter('far', 1000.0);\r\n        this.focalDistanceParam = new NumberParameter('focalDistance', 5.0);\r\n        this.viewHeight = 0;\r\n        this.__orthoIntervalId = -1;\r\n        this.__focusIntervalId = -1;\r\n        this.addParameter(this.isOrthographicParam);\r\n        this.addParameter(this.fovParam);\r\n        this.addParameter(this.nearParam);\r\n        this.addParameter(this.farParam);\r\n        this.addParameter(this.focalDistanceParam);\r\n        const emitProjChanged = (event) => {\r\n            this.emit('projectionParamChanged', event);\r\n        };\r\n        this.isOrthographicParam.on('valueChanged', emitProjChanged);\r\n        this.fovParam.on('valueChanged', emitProjChanged);\r\n        this.nearParam.on('valueChanged', emitProjChanged);\r\n        this.farParam.on('valueChanged', emitProjChanged);\r\n        // Initial viewing coords of a person standing 3 meters away from the\r\n        // center of the stage looking at something 1 meter off the ground.\r\n        this.setPositionAndTarget(new Vec3(3, 3, 1.75), new Vec3(0, 0, 1));\r\n        this.setLensFocalLength('28mm');\r\n        // Controls whether the camera automatically adjusts the near and far planes\r\n        // as the focal distance changes. Set to false to explicitly control the near\r\n        // and far planes.\r\n        this.adjustNearAndFarPlanesToFocalDist = true;\r\n        // The factor by which the near plane is adjusted based on the focal distance.\r\n        this.nearDistFactor = 0.01;\r\n        // The factor by which the far plane is adjusted based on the focal distance.\r\n        this.farDistFactor = 100;\r\n        this.frameOnBoundingSphere = false;\r\n    }\r\n    // ////////////////////////////////////////////\r\n    // Getters/setters.\r\n    /**\r\n     * Returns `near` parameter value.\r\n     *\r\n     * @return - Returns the near value.\r\n     */\r\n    getNear() {\r\n        return this.nearParam.value;\r\n    }\r\n    /**\r\n     * Sets `near` parameter value\r\n     *\r\n     * @param value - The near value.\r\n     */\r\n    setNear(value) {\r\n        this.nearParam.value = value;\r\n    }\r\n    /**\r\n     * Returns `far` parameter value.\r\n     *\r\n     * @return - Returns the far value.\r\n     */\r\n    getFar() {\r\n        return this.farParam.value;\r\n    }\r\n    /**\r\n     * Sets `far` parameter value\r\n     *\r\n     * @param value - The far value.\r\n     */\r\n    setFar(value) {\r\n        this.farParam.value = value;\r\n    }\r\n    /**\r\n     * Getter for the camera field of view (FOV).\r\n     * The FOV defines the vertical angle of the view frustum\r\n     * The horizontal angle is calculated from the FOV and the Viewport aspect ratio.\r\n     *\r\n     * @return - Returns the FOV value.\r\n     */\r\n    getFov() {\r\n        return this.fovParam.value;\r\n    }\r\n    /**\r\n     * Setter for the camera field of view (FOV).\r\n     * The FOV defines the vertical angle of the view frustum\r\n     * The horizontal angle is calculated from the FOV and the Viewport aspect ratio.\r\n     * > Note: The Fov can also be set by calling #setLensFocalLength\r\n     *\r\n     * @param value - The new FOV value.\r\n     */\r\n    setFov(value) {\r\n        this.fovParam.value = value;\r\n    }\r\n    /**\r\n     * Getter for the camera frustum height value.\r\n     * The frustum hight value is used to compute the orthographic projection of the scene.\r\n     *\r\n     * @return - Returns the Frustum Height value.\r\n     */\r\n    getFrustumHeight() {\r\n        return this.viewHeight;\r\n    }\r\n    /**\r\n     * Setter for the camera frustum height in orthographic mode.\r\n     * > Note: in perspective mode, the frustum height is calculated based on the FOV value and focal distance.\r\n     *\r\n     * @param value - The new Frustum Height value.\r\n     */\r\n    setFrustumHeight(value) {\r\n        this.viewHeight = value;\r\n        this.emit('projectionParamChanged');\r\n    }\r\n    /**\r\n     * Setter for the camera lens focal length. This method calculates a new vertical Field of View value\r\n     * from the provided camera lense focal length.\r\n     * > Note: conversion from Lense Focal length to Fov is based on the table found here: https://www.nikonians.org/reviews/fov-tables\r\n     *\r\n     * **Focal Length accepted values as string values:** 10mm, 11mm, 12mm, 14mm, 15mm, 17mm, 18mm,\r\n     * 19mm, 20mm, 24mm, 28mm, 30mm, 35mm, 45mm, 50mm, 55mm, 60mm, 70mm, 75mm, 80mm,\r\n     * 85mm, 90mm, 100mm, 105mm, 120mm, 125mm, 135mm, 150mm, 170mm, 180mm, 210mm, 300mm,\r\n     * 400mm, 500mm, 600mm, 800mm\r\n     *\r\n     * @param value - The lens focal length value.\r\n     */\r\n    setLensFocalLength(value) {\r\n        // https://www.nikonians.org/reviews/fov-tables\r\n        const mapping = {\r\n            '10mm': 100.4,\r\n            '11mm': 95.0,\r\n            '12mm': 90.0,\r\n            '14mm': 81.2,\r\n            '15mm': 77.3,\r\n            '17mm': 70.4,\r\n            '18mm': 67.4,\r\n            '19mm': 64.6,\r\n            '20mm': 61.9,\r\n            '24mm': 53.1,\r\n            '28mm': 46.4,\r\n            '30mm': 43.6,\r\n            '35mm': 37.8,\r\n            '45mm': 29.9,\r\n            '50mm': 27.0,\r\n            '55mm': 24.6,\r\n            '60mm': 22.6,\r\n            '70mm': 19.5,\r\n            '75mm': 18.2,\r\n            '80mm': 17.1,\r\n            '85mm': 16.1,\r\n            '90mm': 15.2,\r\n            '100mm': 13.7,\r\n            '105mm': 13.0,\r\n            '120mm': 11.4,\r\n            '125mm': 11.0,\r\n            '135mm': 10.2,\r\n            '150mm': 9.1,\r\n            '170mm': 8.1,\r\n            '180mm': 7.6,\r\n            '210mm': 6.5,\r\n            '300mm': 4.6,\r\n            '400mm': 3.4,\r\n            '500mm': 2.7,\r\n            '600mm': 2.3,\r\n            '800mm': 1.7,\r\n        };\r\n        if (!(value in mapping)) {\r\n            console.warn('Camera lense focal length not supported:' + value);\r\n            return;\r\n        }\r\n        this.fovParam.value = MathFunctions.degToRad(mapping[value]);\r\n    }\r\n    /**\r\n     * Returns `focalDistance` parameter value.\r\n     *\r\n     * @return - Returns the lens focal length value..\r\n     */\r\n    getFocalDistance() {\r\n        return this.focalDistanceParam.value;\r\n    }\r\n    /**\r\n     * Sets `focalDistance` parameter value.\r\n     *\r\n     * @errors on dist value lower or less than zero.\r\n     * @param dist - The focal distance value.\r\n     */\r\n    setFocalDistance(dist) {\r\n        if (dist < 0.0001)\r\n            console.error('Never set focal distance to zero');\r\n        this.focalDistanceParam.value = dist;\r\n        if (this.adjustNearAndFarPlanesToFocalDist) {\r\n            this.nearParam.value = dist * this.nearDistFactor;\r\n            this.farParam.value = dist * this.farDistFactor;\r\n        }\r\n    }\r\n    /**\r\n     * Returns true if the camera is providing an orthographic projection.\r\n     * @return - true if orthographic else false\r\n     */\r\n    isOrthographic() {\r\n        return this.isOrthographicParam.value == 1.0;\r\n    }\r\n    /**\r\n     * Sets the camera to be orthographic. The value can be between 0, and 1.\r\n     * A value of 0 means fully perspective. A value of 1 means fully orthographic.\r\n     * Any value in between produces a linear interpolation of perspective and orthographic.\r\n     *\r\n     * @param value - The value param.\r\n     * @param duration - The duration in milliseconds to change the projection.\r\n     */\r\n    setIsOrthographic(value, duration = 0) {\r\n        if (this.__orthoIntervalId)\r\n            clearInterval(this.__orthoIntervalId);\r\n        if (value > 0.5) {\r\n            const fov = this.fovParam.value;\r\n            const focalDistance = this.focalDistanceParam.value;\r\n            this.viewHeight = Math.sin(fov * 0.5) * focalDistance * 2;\r\n        }\r\n        if (duration == 0) {\r\n            this.isOrthographicParam.value = value;\r\n        }\r\n        else {\r\n            const count = Math.round(duration / 20); // each step is 20ms\r\n            let i = 0;\r\n            const prevValue = this.isOrthographicParam.value;\r\n            const applyMovement = () => {\r\n                const lerpValue = MathFunctions.lerp(prevValue, value, i / count);\r\n                this.isOrthographicParam.value = lerpValue;\r\n                i++;\r\n                if (i <= count) {\r\n                    this.__orthoIntervalId = window.setTimeout(applyMovement, 20);\r\n                }\r\n                else {\r\n                    this.__orthoIntervalId = -1;\r\n                    this.emit('movementFinished');\r\n                }\r\n            };\r\n            applyMovement();\r\n        }\r\n    }\r\n    /**\r\n     * Setter for the camera position and target.\r\n     * As described at the start of the class, this is a `TreeItem`,\r\n     * which means we can move it around using translation modifiers.\r\n     * You can do it this way or using the changing `TreeItem` parameters,\r\n     * although we recommend this one because it also changes focal distance.\r\n     *\r\n     * @param position - The position of the camera.\r\n     * @param target - The target of the camera.\r\n     */\r\n    setPositionAndTarget(position, target) {\r\n        this.setFocalDistance(position.distanceTo(target));\r\n        const xfo = new Xfo();\r\n        xfo.setLookAt(position, target, new Vec3(0.0, 0.0, 1.0));\r\n        this.globalXfoParam.value = xfo;\r\n        this.emit('movementFinished');\r\n    }\r\n    /**\r\n     * Getter for the target position.\r\n     * @return - Returns the target position.\r\n     */\r\n    getTargetPosition() {\r\n        const focalDistance = this.focalDistanceParam.value;\r\n        const xfo = this.globalXfoParam.value;\r\n        const target = xfo.ori.getZaxis();\r\n        target.scaleInPlace(-focalDistance);\r\n        target.addInPlace(xfo.tr);\r\n        return target;\r\n    }\r\n    // ///////////////////////////\r\n    /**\r\n     * Calculates a new camera position that frames all the items passed in `treeItems` array, moving\r\n     * the camera to a point where we can see all of them.\r\n     *\r\n     * @param viewport - The viewport value.\r\n     * @param treeItems - The treeItems value.\r\n     */\r\n    frameView(viewport, treeItems) {\r\n        const focalDistance = this.focalDistanceParam.value;\r\n        const fovY = this.fovParam.value;\r\n        const globalXfo = this.globalXfoParam.value.clone();\r\n        const aspectRatio = viewport.getWidth() / viewport.getHeight();\r\n        const fovX = Math.atan(Math.tan(fovY * 0.5) * aspectRatio) * 2.0;\r\n        let newFocalDistance = focalDistance;\r\n        if (this.frameOnBoundingSphere) {\r\n            const box3 = new Box3();\r\n            for (const treeItem of treeItems) {\r\n                box3.addBox3(treeItem.boundingBoxParam.value);\r\n            }\r\n            if (!box3.isValid()) {\r\n                console.warn('Bounding box not valid.');\r\n                return;\r\n            }\r\n            const cameraViewVec = globalXfo.ori.getZaxis();\r\n            const targetOffset = cameraViewVec.scale(-focalDistance);\r\n            const currTarget = globalXfo.tr.add(targetOffset);\r\n            const newTarget = box3.center();\r\n            const pan = newTarget.subtract(currTarget);\r\n            globalXfo.tr.addInPlace(pan);\r\n            // Compute the distance the camera should be to fit the entire bounding sphere\r\n            newFocalDistance = box3.size() / Math.tan(fovY);\r\n            // const dollyDist = newFocalDistance - focalDistance\r\n            // globalXfo.tr.addInPlace(cameraViewVec.scale(dollyDist))\r\n        }\r\n        else {\r\n            // Based on the solution described here:\r\n            // https://stackoverflow.com/a/66113254/5546902\r\n            const boundaryPoints = [];\r\n            if (false) {\r\n                const box3 = new Box3();\r\n                for (const treeItem of treeItems) {\r\n                    box3.addBox3(treeItem.boundingBoxParam.value);\r\n                }\r\n                if (!box3.isValid()) {\r\n                    console.warn('Bounding box not valid.');\r\n                    return;\r\n                }\r\n                boundaryPoints.push(box3.p0);\r\n                boundaryPoints.push(new Vec3(box3.p0.x, box3.p0.y, box3.p1.z));\r\n                boundaryPoints.push(new Vec3(box3.p0.x, box3.p1.y, box3.p0.z));\r\n                boundaryPoints.push(new Vec3(box3.p1.x, box3.p0.y, box3.p0.z));\r\n                boundaryPoints.push(new Vec3(box3.p0.x, box3.p1.y, box3.p1.z));\r\n                boundaryPoints.push(new Vec3(box3.p1.x, box3.p0.y, box3.p1.z));\r\n                boundaryPoints.push(new Vec3(box3.p1.x, box3.p1.y, box3.p0.z));\r\n                boundaryPoints.push(box3.p1);\r\n            }\r\n            else {\r\n                treeItems.forEach((treeItem) => {\r\n                    treeItem.traverse((childItem) => {\r\n                        // Stop traversal when we hig an item with a disabled bounding box\r\n                        // or non-tree item.\r\n                        if (!(childItem instanceof TreeItem))\r\n                            return false;\r\n                        if (childItem.disableBoundingBox)\r\n                            return false;\r\n                        if (childItem instanceof GeomItem) {\r\n                            const geom = childItem.geomParam.value;\r\n                            if (geom) {\r\n                                const box3 = geom.getBoundingBox();\r\n                                if (box3.isValid()) {\r\n                                    const mat4 = childItem.geomMatParam.value;\r\n                                    boundaryPoints.push(mat4.transformVec3(box3.p0));\r\n                                    boundaryPoints.push(mat4.transformVec3(new Vec3(box3.p0.x, box3.p0.y, box3.p1.z)));\r\n                                    boundaryPoints.push(mat4.transformVec3(new Vec3(box3.p0.x, box3.p1.y, box3.p0.z)));\r\n                                    boundaryPoints.push(mat4.transformVec3(new Vec3(box3.p1.x, box3.p0.y, box3.p0.z)));\r\n                                    boundaryPoints.push(mat4.transformVec3(new Vec3(box3.p0.x, box3.p1.y, box3.p1.z)));\r\n                                    boundaryPoints.push(mat4.transformVec3(new Vec3(box3.p1.x, box3.p0.y, box3.p1.z)));\r\n                                    boundaryPoints.push(mat4.transformVec3(new Vec3(box3.p1.x, box3.p1.y, box3.p0.z)));\r\n                                    boundaryPoints.push(mat4.transformVec3(box3.p1));\r\n                                    return;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (childItem.getNumChildren() == 0) {\r\n                            const box3 = childItem.boundingBoxParam.value;\r\n                            if (box3.isValid()) {\r\n                                // Note: passing box3.p0 into boundaryPoints caused corruption later on.\r\n                                // I could not figure out how/why, but by constructing a new vector here,\r\n                                // we avoid the problem.\r\n                                boundaryPoints.push(new Vec3(box3.p0.x, box3.p0.y, box3.p0.z));\r\n                                boundaryPoints.push(new Vec3(box3.p0.x, box3.p0.y, box3.p1.z));\r\n                                boundaryPoints.push(new Vec3(box3.p0.x, box3.p1.y, box3.p0.z));\r\n                                boundaryPoints.push(new Vec3(box3.p1.x, box3.p0.y, box3.p0.z));\r\n                                boundaryPoints.push(new Vec3(box3.p0.x, box3.p1.y, box3.p1.z));\r\n                                boundaryPoints.push(new Vec3(box3.p1.x, box3.p0.y, box3.p1.z));\r\n                                boundaryPoints.push(new Vec3(box3.p1.x, box3.p1.y, box3.p0.z));\r\n                                boundaryPoints.push(new Vec3(box3.p1.x, box3.p1.y, box3.p1.z));\r\n                                return;\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n            if (boundaryPoints.length == 0)\r\n                return;\r\n            const angleX = this.isOrthographic() ? 0 : fovX / 2;\r\n            const angleY = this.isOrthographic() ? 0 : fovY / 2;\r\n            const frustumPlaneNormals = {};\r\n            frustumPlaneNormals.XPos = new Vec3(Math.cos(angleX), 0, Math.sin(angleX));\r\n            frustumPlaneNormals.XNeg = new Vec3(-Math.cos(angleX), 0, Math.sin(angleX));\r\n            frustumPlaneNormals.YPos = new Vec3(0, Math.cos(angleY), Math.sin(angleY));\r\n            frustumPlaneNormals.YNeg = new Vec3(0, -Math.cos(angleY), Math.sin(angleY));\r\n            frustumPlaneNormals.ZPos = new Vec3(0, 0, 1);\r\n            frustumPlaneNormals.ZNeg = new Vec3(0, 0, -1);\r\n            const frustumPlaneNormalsWs = {};\r\n            const frustumPlaneOffsets = {};\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in frustumPlaneNormals) {\r\n                frustumPlaneNormalsWs[key] = globalXfo.ori.rotateVec3(frustumPlaneNormals[key]);\r\n                frustumPlaneOffsets[key] = Number.NEGATIVE_INFINITY;\r\n            }\r\n            const centroid = new Vec3();\r\n            boundaryPoints.forEach((point, index) => {\r\n                // Previously we had corrupt values coming through there. That is fixed,\r\n                // but just in case, we filter them out again here.\r\n                if (!Number.isFinite(point.x) || !Number.isFinite(point.y) || !Number.isFinite(point.z)) {\r\n                    return;\r\n                }\r\n                const delta = point.subtract(globalXfo.tr);\r\n                // eslint-disable-next-line guard-for-in\r\n                for (const key in frustumPlaneNormals) {\r\n                    const planeOffset = delta.dot(frustumPlaneNormalsWs[key]);\r\n                    if (planeOffset > frustumPlaneOffsets[key] && planeOffset != Number.POSITIVE_INFINITY) {\r\n                        frustumPlaneOffsets[key] = planeOffset;\r\n                    }\r\n                }\r\n                centroid.addInPlace(point);\r\n            });\r\n            // eslint-disable-next-line guard-for-in\r\n            // Check for invalid planes.\r\n            for (const key in frustumPlaneOffsets) {\r\n                if (frustumPlaneOffsets[key] == Number.POSITIVE_INFINITY)\r\n                    return;\r\n            }\r\n            centroid.scaleInPlace(1 / boundaryPoints.length);\r\n            let dolly = 0;\r\n            if (this.isOrthographic()) {\r\n                const pan = new Vec3((-frustumPlaneOffsets.XNeg + frustumPlaneOffsets.XPos) * 0.5, (-frustumPlaneOffsets.YNeg + frustumPlaneOffsets.YPos) * 0.5, (-frustumPlaneOffsets.ZNeg + frustumPlaneOffsets.ZPos) * 0.5);\r\n                // Move the camera back by 2x the depth range of the scene.\r\n                const zrange = frustumPlaneOffsets.ZNeg + frustumPlaneOffsets.ZPos;\r\n                dolly = zrange * 2;\r\n                pan.z = -frustumPlaneOffsets.ZNeg + dolly;\r\n                globalXfo.tr.addInPlace(globalXfo.ori.rotateVec3(pan));\r\n                newFocalDistance = zrange * 2;\r\n                const viewWidth = frustumPlaneOffsets.XPos + frustumPlaneOffsets.XNeg;\r\n                const viewHeight = frustumPlaneOffsets.YPos + frustumPlaneOffsets.YNeg;\r\n                this.viewHeight = Math.max(viewHeight, viewWidth / aspectRatio);\r\n                const frameBorder = 0.1;\r\n                this.viewHeight += this.viewHeight * frameBorder;\r\n            }\r\n            else {\r\n                const angleX = fovX / 2;\r\n                const angleY = fovY / 2;\r\n                // Now we solve the problem in 2D. For each camera plane (XZ and YZ), we calculate the lines in 2d that\r\n                // represent the frustum planes for the top and bottom, adjusted so they touch the boundary points. We\r\n                // then find the intersection of these 2 2d lines to calculate the adjustment in that axis for the camera.\r\n                // We need to dolly back to fix the plane which needs the most adjustment.\r\n                // Calculate a 2d point on the line for each plane, and a direction.\r\n                const xP0 = new Vec2(Math.cos(angleX) * frustumPlaneOffsets.XPos, Math.sin(angleX) * frustumPlaneOffsets.XPos);\r\n                const xP1 = xP0.add(new Vec2(Math.sin(angleX), -Math.cos(angleX)));\r\n                const xP2 = new Vec2(-Math.cos(angleX) * frustumPlaneOffsets.XNeg, Math.sin(angleX) * frustumPlaneOffsets.XNeg);\r\n                const xP3 = xP2.add(new Vec2(-Math.sin(angleX), -Math.cos(angleX)));\r\n                const xP = Vec2.intersectionOfLines(xP0, xP1, xP2, xP3);\r\n                const yP0 = new Vec2(Math.cos(angleY) * frustumPlaneOffsets.YPos, Math.sin(angleY) * frustumPlaneOffsets.YPos);\r\n                const yP1 = yP0.add(new Vec2(Math.sin(angleY), -Math.cos(angleY)));\r\n                const yP2 = new Vec2(-Math.cos(angleY) * frustumPlaneOffsets.YNeg, Math.sin(angleY) * frustumPlaneOffsets.YNeg);\r\n                const yP3 = yP2.add(new Vec2(-Math.sin(angleY), -Math.cos(angleY)));\r\n                const yP = Vec2.intersectionOfLines(yP0, yP1, yP2, yP3);\r\n                if (xP === null || yP === null) {\r\n                    console.warn('xP or yP === null');\r\n                    return;\r\n                }\r\n                dolly = Math.max(xP.y, yP.y);\r\n                const pan = new Vec3(xP.x, yP.x, dolly);\r\n                globalXfo.tr.addInPlace(globalXfo.ori.rotateVec3(pan));\r\n                newFocalDistance = centroid.distanceTo(globalXfo.tr);\r\n                const frameBorder = 0.1;\r\n                const frameBorderAdjustment = newFocalDistance * frameBorder;\r\n                globalXfo.tr.addInPlace(globalXfo.ori.rotateVec3(new Vec3(0, 0, frameBorderAdjustment)));\r\n                dolly += frameBorderAdjustment;\r\n            }\r\n            if (this.adjustNearAndFarPlanesToFocalDist) {\r\n                frustumPlaneOffsets.ZPos -= dolly;\r\n                frustumPlaneOffsets.ZNeg += dolly;\r\n                const near = frustumPlaneOffsets.ZNeg * this.nearDistFactor;\r\n                const far = -frustumPlaneOffsets.ZPos * this.farDistFactor;\r\n                this.nearParam.value = near;\r\n                this.farParam.value = far;\r\n            }\r\n        }\r\n        this.setFocalDistance(newFocalDistance);\r\n        this.globalXfoParam.value = globalXfo;\r\n        this.emit('movementFinished');\r\n    }\r\n    /**\r\n     * Sets camera perspective from a Mat4 object.\r\n     *\r\n     * @param mat - The mat value.\r\n     * @param aspect - The aspect value.\r\n     */\r\n    updateProjectionMatrix(mat, aspect) {\r\n        const isOrthographic = this.isOrthographicParam.value;\r\n        const fov = this.fovParam.value;\r\n        const near = this.nearParam.value;\r\n        const far = this.farParam.value;\r\n        const orthoMat = new Mat4();\r\n        if (isOrthographic > 0.0) {\r\n            const halfHeight = this.viewHeight * 0.5;\r\n            const bottom = -halfHeight;\r\n            const top = halfHeight;\r\n            const left = halfHeight * -aspect;\r\n            const right = halfHeight * aspect;\r\n            orthoMat.setOrthographicMatrix(left, right, bottom, top, near, far);\r\n        }\r\n        if (isOrthographic < 1.0) {\r\n            mat.setPerspectiveMatrix(fov, aspect, near, far);\r\n        }\r\n        if (isOrthographic == 1.0) {\r\n            mat.setFromMat4(orthoMat);\r\n        }\r\n        else if (isOrthographic > 0.0) {\r\n            mat.set(MathFunctions.lerp(mat.m00, orthoMat.m00, isOrthographic), MathFunctions.lerp(mat.m01, orthoMat.m01, isOrthographic), MathFunctions.lerp(mat.m02, orthoMat.m02, isOrthographic), MathFunctions.lerp(mat.m03, orthoMat.m03, isOrthographic), MathFunctions.lerp(mat.m10, orthoMat.m10, isOrthographic), MathFunctions.lerp(mat.m11, orthoMat.m11, isOrthographic), MathFunctions.lerp(mat.m12, orthoMat.m12, isOrthographic), MathFunctions.lerp(mat.m13, orthoMat.m13, isOrthographic), MathFunctions.lerp(mat.m20, orthoMat.m20, isOrthographic), MathFunctions.lerp(mat.m21, orthoMat.m21, isOrthographic), MathFunctions.lerp(mat.m22, orthoMat.m22, isOrthographic), MathFunctions.lerp(mat.m23, orthoMat.m23, isOrthographic), MathFunctions.lerp(mat.m30, orthoMat.m30, isOrthographic), MathFunctions.lerp(mat.m31, orthoMat.m31, isOrthographic), MathFunctions.lerp(mat.m32, orthoMat.m32, isOrthographic), MathFunctions.lerp(mat.m33, orthoMat.m33, isOrthographic));\r\n        }\r\n    }\r\n}\r\nRegistry.register('Camera', Camera);\r\nexport { Camera };\r\n//# sourceMappingURL=Camera.js.map","import { Xfo } from '../../Math/Xfo';\r\nimport { Operator } from './Operator';\r\nimport { XfoOperatorInput } from './OperatorInput';\r\nimport { XfoOperatorOutput } from './OperatorOutput';\r\nimport { OperatorOutputMode } from '../Parameters/OperatorOutputMode';\r\n/** An operator that calculates the delta transform of the group since items were bound to it.\r\n * @extends Operator\r\n *\r\n */\r\nclass GroupTransformXfoOperator extends Operator {\r\n    /**\r\n     * Create a GroupMemberXfoOperator operator.\r\n     * @param groupGlobalXfoParam - The GlobalXfo param found on the Group.\r\n     * @param groupTransformXfoParam - The parameter on the Group which defines the displacement to apply to the members.\r\n     */\r\n    constructor(groupGlobalXfoParam, groupTransformXfoParam) {\r\n        super();\r\n        this.bindXfo = new Xfo();\r\n        this.invBindXfo = new Xfo();\r\n        this.groupGlobalXfo = new XfoOperatorInput('GroupGlobalXfo');\r\n        this.groupTransformXfo = new XfoOperatorOutput('GroupTransformXfo');\r\n        this.groupGlobalXfo.setParam(groupGlobalXfoParam);\r\n        this.groupTransformXfo.setParam(groupTransformXfoParam);\r\n        this.addInput(this.groupGlobalXfo);\r\n        this.addOutput(this.groupTransformXfo);\r\n    }\r\n    /**\r\n     * Create a GroupMemberXfoOperator operator.\r\n     * @param bindXfo - The Bind Xfo calculated from the initial Transforms of the Group Members.\r\n     */\r\n    setBindXfo(bindXfo) {\r\n        this.bindXfo = bindXfo;\r\n        this.invBindXfo = bindXfo.inverse();\r\n        this.setDirty();\r\n    }\r\n    /**\r\n     * The evaluate method.\r\n     */\r\n    evaluate() {\r\n        if (this.invBindXfo) {\r\n            const groupGlobalXfo = this.groupGlobalXfo.getValue();\r\n            this.groupTransformXfo.setClean(groupGlobalXfo.multiply(this.invBindXfo));\r\n        }\r\n        else {\r\n            this.groupTransformXfo.setClean(new Xfo());\r\n        }\r\n    }\r\n}\r\n/** An operator for modifying group members by the groups Xfo\r\n * @private\r\n * @extends Operator\r\n *\r\n */\r\nclass GroupMemberXfoOperator extends Operator {\r\n    /**\r\n     * Create a GroupMemberXfoOperator operator.\r\n     * @param groupTransformXfoParam - The parameter on the Group which defines the displacement to apply to the members.\r\n     * @param memberXfoGlobalParam - The GlobalXfo param found on the Member.\r\n     */\r\n    constructor(groupTransformXfoParam, memberXfoGlobalParam) {\r\n        super();\r\n        this.groupTransformXfo = new XfoOperatorInput('GroupTransformXfo');\r\n        this.memberGlobalXfo = new XfoOperatorOutput('MemberGlobalXfo', OperatorOutputMode.OP_READ_WRITE);\r\n        this.groupTransformXfo.setParam(groupTransformXfoParam);\r\n        this.memberGlobalXfo.setParam(memberXfoGlobalParam);\r\n        this.addInput(this.groupTransformXfo);\r\n        this.addOutput(this.memberGlobalXfo);\r\n        this._enabled = true;\r\n    }\r\n    /**\r\n     * used to temporarily disable/enable the operator when the Group bind Xfo is being calculated\r\n     */\r\n    disable() {\r\n        this._enabled = false;\r\n        this.setDirty();\r\n    }\r\n    /**\r\n     * used to temporarily disable/enable the operator when the Group bind Xfo is being calculated\r\n     */\r\n    enable() {\r\n        this._enabled = true;\r\n        this.setDirty();\r\n    }\r\n    /**\r\n     * The evaluate method.\r\n     */\r\n    evaluate() {\r\n        const memberGlobalXfo = this.memberGlobalXfo.getValue();\r\n        if (this._enabled) {\r\n            const groupTransformXfo = this.groupTransformXfo.getValue();\r\n            this.memberGlobalXfo.setClean(groupTransformXfo.multiply(memberGlobalXfo));\r\n        }\r\n        else {\r\n            this.memberGlobalXfo.setClean(memberGlobalXfo);\r\n        }\r\n    }\r\n}\r\nexport { GroupTransformXfoOperator, GroupMemberXfoOperator };\r\n//# sourceMappingURL=GroupMemberXfoOperator.js.map","/* eslint-disable no-unused-vars */\r\nimport { Xfo } from '../../Math/index';\r\nimport { Registry } from '../../Registry';\r\nimport { XfoParameter, MultiChoiceParameter } from '../Parameters/index';\r\nimport { BaseGroup } from './BaseGroup';\r\nimport { TreeItem } from '../TreeItem';\r\nimport { GroupTransformXfoOperator, GroupMemberXfoOperator } from '../Operators/GroupMemberXfoOperator';\r\nconst GROUP_XFO_MODES = {\r\n    disabled: 0,\r\n    manual: 1,\r\n    first: 2,\r\n    average: 3,\r\n    globalOri: 4,\r\n};\r\n/**\r\n * The KinematicGroup is used to control the transform of a collection of objects int eh scene.\r\n * Objects can be added to a kinematic group and then the group can be transformed, causing each\r\n * of the members to be transformed as one.\r\n *\r\n **Parameters**\r\n * **InitialXfoMode(`MultiChoiceParameter`):** _todo_\r\n * **GroupTransform(`XfoParameter`):** _todo_\r\n *\r\n * @extends BaseGroup\r\n */\r\nclass KinematicGroup extends BaseGroup {\r\n    /**\r\n     * Creates an instance of a group.\r\n     *\r\n     * @param name - The name of the group.\r\n     */\r\n    constructor(name = '') {\r\n        super(name);\r\n        /**\r\n         * @member initialXfoModeParam - TODO\r\n         */\r\n        this.initialXfoModeParam = new MultiChoiceParameter('InitialXfoMode', GROUP_XFO_MODES.average, [\r\n            'manual',\r\n            'first',\r\n            'average',\r\n            'global',\r\n        ]);\r\n        /**\r\n         * @member groupTransformParam - TODO\r\n         */\r\n        this.groupTransformParam = new XfoParameter('GroupTransform', new Xfo());\r\n        // Items which can be constructed by a user (not loaded in binary data.)\r\n        this.calculatingGroupXfo = false;\r\n        this.memberXfoOps = [];\r\n        this.addParameter(this.initialXfoModeParam);\r\n        this.initialXfoModeParam.on('valueChanged', () => {\r\n            this.calcGroupXfo();\r\n        });\r\n        this.addParameter(this.groupTransformParam);\r\n        this.groupTransformOp = new GroupTransformXfoOperator(this.globalXfoParam, this.groupTransformParam);\r\n    }\r\n    /**\r\n     * Returns enum of available xfo modes.\r\n     *\r\n     * | Name | Default |\r\n     * | --- | --- |\r\n     * | manual | <code>0</code> |\r\n     * | first | <code>1</code> |\r\n     * | average | <code>2</code> |\r\n     * | globalOri | <code>3</code> |\r\n     */\r\n    static get INITIAL_XFO_MODES() {\r\n        return GROUP_XFO_MODES;\r\n    }\r\n    // /////////////////////////////\r\n    /**\r\n     * The updateHighlight method.\r\n     * @private\r\n     */\r\n    updateHighlight() {\r\n        // Make this function async so that we don't pull on the\r\n        // graph immediately when we receive a notification.\r\n        // Note: propagating using an operator would be much better.\r\n        setTimeout(() => {\r\n            let highlighted = false;\r\n            let color;\r\n            if (this.isSelected()) {\r\n                highlighted = true;\r\n                color = this.getHighlight();\r\n                color.a = 0.2;\r\n            }\r\n            const key = 'kinematicGroupItemHighlight' + this.getId();\r\n            Array.from(this.itemsParam.value).forEach((item) => {\r\n                if (item instanceof TreeItem) {\r\n                    if (highlighted)\r\n                        item.addHighlight(key, color, true);\r\n                    else\r\n                        item.removeHighlight(key, true);\r\n                }\r\n            });\r\n        }, 1);\r\n    }\r\n    /**\r\n     * Changes selection's state of the group with all items it owns.\r\n     *\r\n     * @param sel - Boolean indicating the new selection state.\r\n     */\r\n    setSelected(sel) {\r\n        super.setSelected(sel);\r\n        this.updateHighlight();\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Global Xfo\r\n    /**\r\n     * Calculate the group Xfo translate.\r\n     * @private\r\n     * @return - Returns a new Xfo.\r\n     */\r\n    calcGroupXfo() {\r\n        const items = Array.from(this.itemsParam.value);\r\n        if (items.length == 0)\r\n            return;\r\n        this.calculatingGroupXfo = true;\r\n        this.memberXfoOps.forEach((op) => op.disable());\r\n        // TODO: Disable the group operator?\r\n        const initialXfoMode = this.initialXfoModeParam.value;\r\n        let xfo;\r\n        if (initialXfoMode == GROUP_XFO_MODES.manual) {\r\n            // The xfo is manually set by the current global xfo.\r\n            xfo = this.globalXfoParam.value;\r\n        }\r\n        else if (initialXfoMode == GROUP_XFO_MODES.first && items[0] instanceof TreeItem) {\r\n            xfo = items[0].globalXfoParam.value;\r\n        }\r\n        else if (initialXfoMode == GROUP_XFO_MODES.average) {\r\n            xfo = new Xfo();\r\n            xfo.ori.set(0, 0, 0, 0);\r\n            let numTreeItems = 0;\r\n            items.forEach((item, index) => {\r\n                if (item instanceof TreeItem) {\r\n                    const itemXfo = item.globalXfoParam.value;\r\n                    xfo.tr.addInPlace(itemXfo.tr);\r\n                    xfo.ori.addInPlace(itemXfo.ori);\r\n                    numTreeItems++;\r\n                }\r\n            });\r\n            xfo.tr.scaleInPlace(1 / numTreeItems);\r\n            xfo.ori.normalizeInPlace();\r\n            // xfo.sc.scaleInPlace(1/ numTreeItems);\r\n        }\r\n        else if (initialXfoMode == GROUP_XFO_MODES.globalOri) {\r\n            xfo = new Xfo();\r\n            let numTreeItems = 0;\r\n            items.forEach((item, index) => {\r\n                if (item instanceof TreeItem) {\r\n                    const itemXfo = item.globalXfoParam.value;\r\n                    xfo.tr.addInPlace(itemXfo.tr);\r\n                    numTreeItems++;\r\n                }\r\n            });\r\n            xfo.tr.scaleInPlace(1 / numTreeItems);\r\n        }\r\n        else {\r\n            throw new Error('Invalid GROUP_XFO_MODES.');\r\n        }\r\n        // Note: if the KinematicGroup global param becomes dirty\r\n        // then it stops propagating dirty to its members.\r\n        // const newGlobal = this.globalXfoParam.value // force a cleaning.\r\n        // this.invGroupXfo = newGlobal.inverse()\r\n        this.globalXfoParam.value = xfo;\r\n        this.groupTransformOp.setBindXfo(xfo);\r\n        this.memberXfoOps.forEach((op) => op.enable());\r\n        this.calculatingGroupXfo = false;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Items\r\n    /**\r\n     * The __bindItem method.\r\n     * @param item - The item value.\r\n     * @param index - The index value.\r\n     * @private\r\n     */\r\n    bindItem(item, index) {\r\n        super.bindItem(item, index);\r\n        if (!(item instanceof TreeItem))\r\n            return;\r\n        // ///////////////////////////////\r\n        // Update the highlight\r\n        if (this.isSelected()) {\r\n            const color = this.getHighlight();\r\n            color.a = 0.2;\r\n            const key = 'kinematicGroupItemHighlight' + this.getId();\r\n            item.addHighlight(key, color, true);\r\n        }\r\n        {\r\n            const memberGlobalXfoParam = item.globalXfoParam;\r\n            const memberXfoOp = new GroupMemberXfoOperator(this.groupTransformParam, memberGlobalXfoParam);\r\n            this.memberXfoOps.splice(index, 0, memberXfoOp);\r\n            if (!this.__itemsEventHandlers[index])\r\n                this.__itemsEventHandlers[index] = {}; // initialize\r\n            const listenerIDs = this.__itemsEventHandlers[index];\r\n            listenerIDs['BoundingBox.valueChanged'] = item.boundingBoxParam.on('valueChanged', (event) => {\r\n                this.setBoundingBoxDirty();\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * The unbindItem method.\r\n     * @param item - The item value.\r\n     * @param index - The index value.\r\n     * @private\r\n     */\r\n    unbindItem(item, index) {\r\n        super.unbindItem(item, index);\r\n        if (!(item instanceof TreeItem))\r\n            return;\r\n        if (this.isSelected()) {\r\n            const key = 'kinematicGroupItemHighlight' + this.getId();\r\n            item.removeHighlight(key, true);\r\n        }\r\n        {\r\n            this.memberXfoOps[index].detach();\r\n            this.memberXfoOps.splice(index, 1);\r\n            this.setBoundingBoxDirty();\r\n        }\r\n    }\r\n    /**\r\n     * Adds an item to the group(See `Items` parameter).\r\n     *\r\n     * @param item - The item value.\r\n     * @param emit - The emit value.\r\n     */\r\n    addItem(item, emit = true) {\r\n        super.addItem(item, emit);\r\n        if (emit) {\r\n            this.calcGroupXfo();\r\n        }\r\n    }\r\n    /**\r\n     * Removes an item from the group(See `Items` parameter).\r\n     *\r\n     * @param item - The item value.\r\n     * @param emit - The emit value.\r\n     */\r\n    removeItem(item, emit = true) {\r\n        super.removeItem(item, emit);\r\n        if (emit) {\r\n            this.calcGroupXfo();\r\n        }\r\n    }\r\n    /**\r\n     * Sets an entire new array of items to the BaseGroup replacing any previous items.\r\n     *\r\n     * @param items - List of `TreeItem` you want to add to the group\r\n     */\r\n    setItems(items) {\r\n        super.setItems(items); // TODO: originally: super.setItems(emit) -- should emit be done here?\r\n        this.calcGroupXfo();\r\n    }\r\n    /**\r\n     * Removes all items from the group.\r\n     *\r\n     * @param emit - `true` triggers `valueChanged` event.\r\n     */\r\n    clearItems(emit = true) {\r\n        super.clearItems(emit);\r\n        this.memberXfoOps = [];\r\n        if (emit) {\r\n            this.calcGroupXfo();\r\n        }\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * called once loading is done.\r\n     * @private\r\n     */\r\n    loadDone() {\r\n        this.calculatingGroupXfo = true;\r\n        this.calcGroupXfo();\r\n        this.calculatingGroupXfo = false;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Clone\r\n    /**\r\n     * The clone method constructs a new group,\r\n     * copies its values and returns it.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns a new cloned group.\r\n     */\r\n    clone(context) {\r\n        const cloned = new KinematicGroup();\r\n        cloned.copyFrom(this, context);\r\n        return cloned;\r\n    }\r\n}\r\nRegistry.register('KinematicGroup', KinematicGroup);\r\nexport { KinematicGroup };\r\n//# sourceMappingURL=KinematicGroup.js.map","/* eslint-disable no-unused-vars */\r\nimport { Registry } from '../../Registry';\r\nimport { BaseGroup } from './BaseGroup';\r\nimport { MaterialParameter } from '../Parameters/MaterialParameter';\r\nimport { TreeItem } from '../TreeItem';\r\nimport { BaseGeomItem } from '../BaseGeomItem';\r\n/**\r\n *\r\n * **Parameters**\r\n * * **Material(`MaterialParameter`):** _todo_\r\n *\r\n * @extends BaseGroup\r\n */\r\nclass MaterialGroup extends BaseGroup {\r\n    /**\r\n     * Creates an instance of a group.\r\n     *\r\n     * @param name - The name of the group.\r\n     */\r\n    constructor(name) {\r\n        super(name);\r\n        // TODO: should BaseGroup have the materialParam?\r\n        /**\r\n         * @member materialParam - The Material to use when rendering this GeomItem\r\n         */\r\n        this.materialParam = new MaterialParameter('Material');\r\n        this.__backupMaterials = {};\r\n        this.addParameter(this.materialParam);\r\n        this.materialParam.on('valueChanged', () => {\r\n            this.__updateMaterial();\r\n        });\r\n    }\r\n    // /////////////////////////////\r\n    /**\r\n     * The updateHighlight method.\r\n     * @private\r\n     */\r\n    updateHighlight() {\r\n        // Make this function async so that we don't pull on the\r\n        // graph immediately when we receive a notification.\r\n        // Note: propagating using an operator would be much better.\r\n        // setTimeout(() => {}, 0)\r\n        // TODO: make this async\r\n        this.__updateHighlightHelper();\r\n    }\r\n    /**\r\n     * The updateHighlight method.\r\n     * @private\r\n     */\r\n    __updateHighlightHelper() {\r\n        let highlighted = false;\r\n        let color;\r\n        if (this.isSelected()) {\r\n            color = this.getHighlight();\r\n            highlighted = true;\r\n            color.a = 0.2;\r\n        }\r\n        const key = 'kinematicGroupItemHighlight' + this.getId();\r\n        Array.from(this.itemsParam.value).forEach((item) => {\r\n            if (item instanceof TreeItem) {\r\n                if (highlighted)\r\n                    item.addHighlight(key, color, true);\r\n                else\r\n                    item.removeHighlight(key, true);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Changes selection's state of the group with all items it owns.\r\n     *\r\n     * @param sel - Boolean indicating the new selection state.\r\n     */\r\n    setSelected(sel) {\r\n        super.setSelected(sel);\r\n        this.updateHighlight();\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Materials\r\n    /**\r\n     * The __updateMaterial method.\r\n     * @private\r\n     */\r\n    __updateMaterial() {\r\n        // Make this function async so that we don't pull on the\r\n        // graph immediately when we receive a notification.\r\n        // Note: propagating using an operator would be much better.\r\n        // setTimeout(() => {}, 0)\r\n        // TODO: make async\r\n        this.__updateMaterialHelper();\r\n    }\r\n    /**\r\n     * The __updateMaterial method.\r\n     * @private\r\n     */\r\n    __updateMaterialHelper() {\r\n        const material = this.materialParam.value;\r\n        // TODO: Bind an operator\r\n        Array.from(this.itemsParam.value).forEach((item) => {\r\n            ;\r\n            item.traverse((treeItem) => {\r\n                if (treeItem instanceof BaseGeomItem) {\r\n                    const baseGeomItem = treeItem;\r\n                    const p = baseGeomItem.materialParam;\r\n                    if (material) {\r\n                        const m = p.value;\r\n                        // TODO: How do we filter material assignments? this is a nasty hack.\r\n                        // but else we end up assigning surface materials to our edges.\r\n                        if (m != material && (!m || m.getShaderName() != 'LinesShader')) {\r\n                            this.__backupMaterials[p.getId()] = m;\r\n                            p.value = material;\r\n                        }\r\n                    }\r\n                    else if (this.__backupMaterials[p.getId()]) {\r\n                        p.value = this.__backupMaterials[p.getId()];\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Items\r\n    /**\r\n     * The __bindItem method.\r\n     * @param item - The item value.\r\n     * @param index - The index value.\r\n     * @private\r\n     */\r\n    bindItem(item, index) {\r\n        super.bindItem(item, index);\r\n        if (!(item instanceof TreeItem))\r\n            return;\r\n        // ///////////////////////////////\r\n        // Update the highlight\r\n        if (this.isSelected()) {\r\n            const color = this.getHighlight();\r\n            color.a = 0.2;\r\n            const key = 'materialGroupItemHighlight' + this.getId();\r\n            item.addHighlight(key, color, true);\r\n        }\r\n        // ///////////////////////////////\r\n        // Update the Material\r\n        const material = this.materialParam.value;\r\n        if (material) {\r\n            // TODO: Bind an operator instead\r\n            item.traverse((treeItem) => {\r\n                if (treeItem instanceof BaseGeomItem) {\r\n                    const baseGeomItem = treeItem;\r\n                    const p = baseGeomItem.materialParam;\r\n                    if (material) {\r\n                        const m = p.value;\r\n                        // TODO: How do we filter material assignments? this is a nasty hack.\r\n                        // but else we end up assigning surface materials to our edges.\r\n                        if (m != material && (!m || m.getShaderName() != 'LinesShader')) {\r\n                            this.__backupMaterials[p.getId()] = m;\r\n                            p.value = material;\r\n                        }\r\n                    }\r\n                }\r\n            }, true);\r\n        }\r\n    }\r\n    /**\r\n     * The __unbindItem method.\r\n     * @param item - The item value.\r\n     * @param index - The index value.\r\n     * @private\r\n     */\r\n    __unbindItem(item, index) {\r\n        super.unbindItem(item, index);\r\n        if (!(item instanceof TreeItem))\r\n            return;\r\n        if (this.isSelected()) {\r\n            const key = 'materialGroupItemHighlight' + this.getId();\r\n            item.removeHighlight(key, true);\r\n        }\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Clone\r\n    /**\r\n     * The clone method constructs a new group,\r\n     * copies its values and returns it.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns a new cloned group.\r\n     */\r\n    clone(context) {\r\n        const cloned = new MaterialGroup(this.__name + 'clone');\r\n        cloned.copyFrom(this, context);\r\n        return cloned;\r\n    }\r\n}\r\nRegistry.register('MaterialGroup', MaterialGroup);\r\nexport { MaterialGroup };\r\n//# sourceMappingURL=MaterialGroup.js.map","import { Vec4 } from '../../Math/Vec4';\r\nimport { Operator } from './Operator';\r\nimport { Vec4OperatorOutput } from './OperatorOutput';\r\nimport { XfoOperatorInput } from './OperatorInput';\r\n/**\r\n * An operator that calculates the delta transform of the group since items were bound to it.\r\n * @extends Operator\r\n *\r\n */\r\nclass CuttingPlaneOperator extends Operator {\r\n    /**\r\n     * Create a GroupMemberXfoOperator operator.\r\n     * @param groupGlobalXfoParam - The GlobalXfo param found on the Group.\r\n     * @param cuttingPlaneParam - The parameter on the Group which defines the displacement to apply to the members.\r\n     */\r\n    constructor(groupGlobalXfoParam, cuttingPlaneParam) {\r\n        super();\r\n        this.groupGlobalXfo = new XfoOperatorInput('GroupGlobalXfo');\r\n        this.cuttingPlane = new Vec4OperatorOutput('CuttingPlane');\r\n        this.groupGlobalXfo.setParam(groupGlobalXfoParam);\r\n        this.cuttingPlane.setParam(cuttingPlaneParam);\r\n        this.addInput(this.groupGlobalXfo);\r\n        this.addOutput(this.cuttingPlane);\r\n    }\r\n    /**\r\n     * The evaluate method.\r\n     */\r\n    evaluate() {\r\n        const groupGlobalXfo = this.groupGlobalXfo.getValue();\r\n        const vec = groupGlobalXfo.ori.getZaxis();\r\n        const dist = groupGlobalXfo.tr.dot(vec);\r\n        this.cuttingPlane.setClean(new Vec4(vec.x, vec.y, vec.z, -dist));\r\n    }\r\n}\r\nexport { CuttingPlaneOperator };\r\n//# sourceMappingURL=CuttingPlaneOperator.js.map","/* eslint-disable no-unused-vars */\r\nimport { Vec4, Color, Box3, Xfo } from '../../Math/index';\r\nimport { Registry } from '../../Registry';\r\nimport { BooleanParameter, Vec4Parameter } from '../Parameters/index';\r\nimport { Material } from '../Material';\r\nimport { GeomItem } from '../GeomItem';\r\nimport { BaseGroup } from './BaseGroup';\r\nimport { TreeItem } from '../TreeItem';\r\nimport { Plane } from '../Geometry/Shapes/Plane';\r\nimport { Rect } from '../Geometry/Shapes/Rect';\r\nimport { BaseGeomItem } from '../BaseGeomItem';\r\nimport { CuttingPlaneOperator } from '../Operators/CuttingPlaneOperator';\r\n/**\r\n * Groups are a special type of `BaseGroup` that allows you to gather/classify/organize/modify\r\n * multiple items contained within the group. Items can be added to the group directly, or using\r\n * its path.\r\n * All parameters set to the group are also set to the children; in other words, it's a faster way\r\n * to apply common things to multiple items.\r\n *\r\n * **Parameters**\r\n * * **CutAwayEnabled(`BooleanParameter`):** _todo_\r\n * * **CutPlaneNormal(`Vec3Parameter`):** _todo_\r\n * * **CutPlaneDist(`NumberParameter`):** _todo_\r\n *\r\n * @extends BaseGroup\r\n */\r\nclass CuttingPlane extends BaseGroup {\r\n    /**\r\n     * Creates an instance of a group.\r\n     *\r\n     * @param name - The name of the group.\r\n     */\r\n    constructor(name = '') {\r\n        super(name);\r\n        this.cutAwayEnabledParam = new BooleanParameter('CutAwayEnabled', false);\r\n        this.cutPlaneParam = new Vec4Parameter('CutPlane', new Vec4(1, 0, 0));\r\n        this.addParameter(this.cutAwayEnabledParam);\r\n        this.addParameter(this.cutPlaneParam);\r\n        this.cutPlaneOp = new CuttingPlaneOperator(this.globalXfoParam, this.cutPlaneParam);\r\n        this.cutAwayEnabledParam.on('valueChanged', (event) => {\r\n            this.updateCutaway(event);\r\n        });\r\n        this.cutPlaneParam.on('valueChanged', (event) => {\r\n            this.updateCutaway(event);\r\n        });\r\n        // Create the geometry to display the plane.\r\n        const material = new Material('plane', 'FlatSurfaceShader');\r\n        material.getParameter('BaseColor').value = new Color(1, 1, 1, 0.2);\r\n        const plane = new GeomItem(`PlaneGeom`, new Plane(1, 1), material);\r\n        plane.setSelectable(false);\r\n        this.addChild(plane);\r\n        const borderMaterial = new Material('border', 'LinesShader');\r\n        borderMaterial.getParameter('BaseColor').value = new Color(1, 0, 0, 1);\r\n        const border = new GeomItem(`BorderGeom`, new Rect(1, 1), borderMaterial);\r\n        border.setSelectable(false);\r\n        this.addChild(border);\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Cutaways\r\n    /**\r\n     * The updateCutaway method.\r\n     * @param item - The item in the group.\r\n     * @private\r\n     */\r\n    updateCutaway(item) {\r\n        // Make this function async so that we don't pull on the\r\n        // graph immediately when we receive a notification.\r\n        // Note: making this async broke the tests.\r\n        // Note: propagating using an operator would be much better.\r\n        // setTimeout(() => {\r\n        const cutEnabled = this.cutAwayEnabledParam.value;\r\n        const cutPlane = this.cutPlaneParam.value;\r\n        const cutAwayVector = cutPlane.xyz;\r\n        const cutAwayDist = cutPlane.w;\r\n        if (item instanceof BaseGeomItem) {\r\n            item.setCutawayEnabled(cutEnabled);\r\n            item.setCutVector(cutAwayVector);\r\n            item.setCutDist(cutAwayDist);\r\n        }\r\n        else {\r\n            Array.from(this.itemsParam.value).forEach((item) => {\r\n                item.traverse((item) => {\r\n                    if (item instanceof BaseGeomItem) {\r\n                        item.setCutawayEnabled(cutEnabled);\r\n                        item.setCutVector(cutAwayVector);\r\n                        item.setCutDist(cutAwayDist);\r\n                    }\r\n                }, true);\r\n            });\r\n        }\r\n        // }, 0)\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Items\r\n    /**\r\n     * The __bindItem method.\r\n     * @param item - The item value.\r\n     * @param index - The index value.\r\n     * @private\r\n     */\r\n    bindItem(item, index) {\r\n        if (!(item instanceof TreeItem))\r\n            return;\r\n        // ///////////////////////////////\r\n        // Update the item cutaway\r\n        const cutEnabled = this.cutAwayEnabledParam.value;\r\n        if (cutEnabled) {\r\n            this.updateCutaway(item);\r\n        }\r\n        const bbox = new Box3();\r\n        // const xfo = this.globalXfoParam.value\r\n        // const invxfo = xfo.inverse()\r\n        Array.from(this.itemsParam.value).forEach((item) => {\r\n            if (item instanceof TreeItem) {\r\n                // const itemxfo = invxfo.multiply(item.globalXfoParam.value)\r\n                // bbox.addBox3(item.boundingBoxParam.value, itemxfo.toMat4())\r\n                bbox.addBox3(item.boundingBoxParam.value);\r\n            }\r\n        });\r\n        {\r\n            const sizex = bbox.p1.x - bbox.p0.x;\r\n            const sizey = bbox.p1.y - bbox.p0.y;\r\n            const xfo = new Xfo();\r\n            xfo.sc.set(sizex, sizey, 1);\r\n            this.getChild(0).localXfoParam.value = xfo;\r\n            this.getChild(1).localXfoParam.value = xfo;\r\n        }\r\n    }\r\n    /**\r\n     * The unbindItem method.\r\n     * @param item - The item value.\r\n     * @param index - The index value.\r\n     * @private\r\n     */\r\n    unbindItem(item, index) {\r\n        if (!(item instanceof TreeItem))\r\n            return;\r\n        // ///////////////////////////////\r\n        // Update the item cutaway\r\n        item.traverse((treeItem) => {\r\n            if (treeItem instanceof BaseGeomItem) {\r\n                treeItem.setCutawayEnabled(false);\r\n            }\r\n        }, true);\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Clone\r\n    /**\r\n     * The clone method constructs a new group,\r\n     * copies its values and returns it.\r\n     *\r\n     * @param context - The context value.\r\n     * @return - Returns a new cloned group.\r\n     */\r\n    clone(context) {\r\n        const cloned = new CuttingPlane();\r\n        cloned.copyFrom(this, context);\r\n        return cloned;\r\n    }\r\n}\r\nRegistry.register('CuttingPlane', CuttingPlane);\r\nexport { CuttingPlane };\r\n//# sourceMappingURL=CuttingPlane.js.map","import { Color, Xfo, Vec3 } from '../Math/index';\r\nimport { TreeItem } from './TreeItem';\r\nimport { Material } from './Material';\r\nimport { GeomItem } from './GeomItem';\r\nimport { Grid } from './Geometry/Shapes/Grid';\r\nimport { Lines } from './Geometry/Lines';\r\nimport { Registry } from '../Registry';\r\n/**\r\n * The GridTreeItem displays a grid of a given size and resolution. The Grid is oriented on the XY plane\r\n * and highlights the X and Y axes with Red and Green lines. Grids are useful in displaying scene scale and coordinate system.\r\n * The Grid geometry does not return a bounding box and so does not effect the bounding of the scene.\r\n *\r\n * @extends {TreeItem}\r\n */\r\nclass GridTreeItem extends TreeItem {\r\n    /**\r\n     * Creates an instance of GridTree.\r\n     *\r\n     * @param gridSize\r\n     * @param resolution\r\n     * @param gridColor\r\n     */\r\n    constructor(gridSize = 5, resolution = 50, gridColor = new Color('#DCDCDC')) {\r\n        super('GridTree');\r\n        this.disableBoundingBox = true;\r\n        this.setSelectable(false);\r\n        const gridMaterial = new Material('gridMaterial', 'LinesShader');\r\n        gridMaterial.getParameter('BaseColor').value = gridColor;\r\n        gridMaterial.getParameter('Overlay').value = 0.0;\r\n        gridMaterial.getParameter('StippleValue').value = 0;\r\n        gridMaterial.getParameter('OccludedStippleValue').value = 1;\r\n        const grid = new Grid(gridSize, gridSize, resolution, resolution, true);\r\n        const gridItem = new GeomItem('GridItem', grid, gridMaterial);\r\n        gridItem.setSelectable(false);\r\n        this.addChild(gridItem, false);\r\n        const axisLine = new Lines();\r\n        axisLine.setNumVertices(2);\r\n        axisLine.setNumSegments(1);\r\n        axisLine.setSegmentVertexIndices(0, 0, 1);\r\n        const positions = axisLine.getVertexAttribute('positions');\r\n        positions.getValueRef(0).set(gridSize * -0.5, 0.0, 0.0);\r\n        positions.getValueRef(1).set(gridSize * 0.5, 0.0, 0.0);\r\n        const gridXAxisMaterial = new Material('gridXAxisMaterial', 'LinesShader');\r\n        gridXAxisMaterial.getParameter('BaseColor').value = new Color(gridColor.luminance(), 0, 0);\r\n        gridXAxisMaterial.getParameter('Overlay').value = 0.0;\r\n        gridXAxisMaterial.getParameter('StippleValue').value = 0;\r\n        gridXAxisMaterial.getParameter('OccludedStippleValue').value = 1;\r\n        const gridXAxis = new GeomItem('xAxisLine', axisLine, gridXAxisMaterial);\r\n        gridXAxis.setSelectable(false);\r\n        this.addChild(gridXAxis, false);\r\n        const gridYAxisMaterial = new Material('gridYAxisMaterial', 'LinesShader');\r\n        gridYAxisMaterial.getParameter('BaseColor').value = new Color(0, gridColor.luminance(), 0);\r\n        gridYAxisMaterial.getParameter('Overlay').value = 0.0;\r\n        gridYAxisMaterial.getParameter('StippleValue').value = 0;\r\n        gridYAxisMaterial.getParameter('OccludedStippleValue').value = 1;\r\n        gridYAxisMaterial.setSelectable(false);\r\n        const zAxisLineItem = new GeomItem('yAxisLine', axisLine, gridYAxisMaterial);\r\n        zAxisLineItem.setSelectable(false);\r\n        const geomOffset = new Xfo();\r\n        geomOffset.ori.setFromAxisAndAngle(new Vec3(0, 0, 1), Math.PI * 0.5);\r\n        zAxisLineItem.geomOffsetXfoParam.value = geomOffset;\r\n        this.addChild(zAxisLineItem, false);\r\n        const bBox = this._cleanBoundingBox(this.boundingBoxParam.value);\r\n        this.boundingBoxParam.value = bBox;\r\n    }\r\n    /**\r\n     *\r\n     * @private\r\n     * @param bBox\r\n     * @return - Reset Bounding Box\r\n     */\r\n    _cleanBoundingBox(bBox) {\r\n        bBox.reset();\r\n        return bBox;\r\n    }\r\n}\r\nRegistry.register('GridTreeItem', GridTreeItem);\r\nexport { GridTreeItem };\r\n//# sourceMappingURL=GridTreeItem.js.map","import { Color } from '../Math/index';\r\nimport { TreeItem } from './TreeItem';\r\nimport { resourceLoader } from './resourceLoader';\r\nimport { GridTreeItem } from './GridTreeItem';\r\nimport { BooleanParameter, NumberParameter, ImageParameter } from './Parameters/index';\r\nconst defaultGridColor = new Color('#DCDCDC');\r\n/**\r\n * Class representing the environment where all the displayed assets live.\r\n */\r\nclass Scene {\r\n    /**\r\n     * Create a scene.\r\n     */\r\n    constructor() {\r\n        /**\r\n         * @member envMapParam - The image displayed and used for the environment map.\r\n         */\r\n        this.envMapParam = new ImageParameter('EnvMap');\r\n        /**\r\n         * @member displayEnvMapParam - Boolean that determines whether or not the environment map should be displayed.\r\n         */\r\n        this.displayEnvMapParam = new BooleanParameter('Display EnvMap', false);\r\n        /**\r\n         * @member envMapLODParam - TODO\r\n         */\r\n        this.envMapLODParam = new NumberParameter('EnvMapLOD', 0);\r\n        this.root = new TreeItem('root');\r\n    }\r\n    /**\r\n     * Returns the scene's root item(`TreeItem`) that owns every item in the scene.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getRoot() {\r\n        return this.root;\r\n    }\r\n    /**\r\n     * Returns resourceLoader object set on class initialization.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getResourceLoader() {\r\n        return resourceLoader;\r\n    }\r\n    /**\r\n     * Sets Environment Map with the BaseImage you'd like to display in your scene background.\r\n     *\r\n     * @param envMap - The envMap value.\r\n     */\r\n    setEnvMap(envMap) {\r\n        this.envMapParam.value = envMap;\r\n    }\r\n    /**\r\n     * Sets up and displays the scene grid of a given size and resolution. The Grid is oriented on the XY plane\r\n     * and highlights the X and Y axes with Red and Green lines. Grids are useful in displaying scene scale and coordinate system.\r\n     * The Grid geometry does not return a bounding box and so does not effect the bounding of the scene.\r\n     * The GridTreeItem display a grid of a given size and resolution. The Grid is oriented on the XY plane\r\n     * and highlights the X and Y axes with Red and Green lines.\r\n     *\r\n     * @param gridSize - The size of the grid.\r\n     * @param resolution - The resolution of the grid.\r\n     * @param gridColor - The color of the grid.\r\n     * @return - The return value.\r\n     */\r\n    setupGrid(gridSize = 5, resolution = 50, gridColor = defaultGridColor) {\r\n        const gridTreeItem = new GridTreeItem(gridSize, resolution, gridColor);\r\n        this.root.addChild(gridTreeItem, false);\r\n        return gridTreeItem;\r\n    }\r\n}\r\nexport { Scene };\r\n//# sourceMappingURL=Scene.js.map","import { SystemDesc } from '../SystemDesc';\r\nimport { AssetItem } from './AssetItem';\r\nimport { AssetLoadContext } from './AssetLoadContext';\r\nimport { BinReader } from './BinReader';\r\nimport { resourceLoader } from './resourceLoader';\r\nimport { Registry } from '../Registry';\r\nimport { Version } from './Version';\r\n/**\r\n * Class designed to load and handle `.vla` files.\r\n *\r\n * **Events**\r\n * * **loaded:** Triggered once the tree is loaded. Note: the tree bounding box is valid once the tree is loaded.\r\n * * **geomsLoaded:** Triggered once all geometries are loaded.\r\n *\r\n * @extends AssetItem\r\n */\r\nclass VLAAsset extends AssetItem {\r\n    /**\r\n     * Create a VLA asset.\r\n     * @param name - The name value.\r\n     */\r\n    constructor(name) {\r\n        super(name);\r\n        // A signal that is emitted once all the geometries are loaded.\r\n        // Often the state machine will activate the\r\n        // first state when this signal emits.\r\n        this.geomLibrary.on('loaded', () => {\r\n            this.emit('geomsLoaded');\r\n        });\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * Sets state of current asset using a binary reader object.\r\n     *\r\n     * @param reader - The reader value.\r\n     * @param context - The context value.\r\n     * @return - The return value.\r\n     */\r\n    readBinary(reader, context) {\r\n        if (context.versions['zea-engine']) {\r\n            // Necessary for the smart lok\r\n        }\r\n        else {\r\n            // Now we split the mesh out from the engine version.\r\n            context.versions['zea-mesh'] = new Version(reader.loadStr());\r\n        }\r\n        // console.log('Loading Mesh File version:', context.versions['zea-mesh'])\r\n        const numGeomsFiles = reader.loadUInt32();\r\n        super.readBinary(reader, context);\r\n        if (context.versions['zea-engine'].compare([2, 1, 0]) < 0) {\r\n            // Some data is no longer being read at the end of the buffer\r\n            // so we skip to the end here.\r\n            // The data was the atlas size of the lightmap that we no longer support.\r\n            reader.loadFloat32Vec2();\r\n        }\r\n        this.geomLibrary.setNumGeoms(reader.loadUInt32());\r\n        return numGeomsFiles;\r\n    }\r\n    /**\r\n     * Loads all the geometries and metadata from the asset file.\r\n     * @param url - The URL of the asset to load\r\n     * @param context - The load context object that provides additional data such as the units of the scene we are loading into.\r\n     * @return - Returns a promise that resolves once the initial load is complete\r\n     */\r\n    load(url, context = new AssetLoadContext()) {\r\n        return new Promise((resolve, reject) => {\r\n            const folder = url.lastIndexOf('/') > -1 ? url.substring(0, url.lastIndexOf('/')) + '/' : '';\r\n            const filename = url.lastIndexOf('/') > -1 ? url.substring(url.lastIndexOf('/') + 1) : '';\r\n            const stem = filename.substring(0, filename.lastIndexOf('.'));\r\n            let numGeomsFiles = 0;\r\n            context.assetItem = this;\r\n            context.url = url;\r\n            context.folder = folder;\r\n            // preload in case we don't have embedded geoms.\r\n            // completed by geomLibrary.on('loaded' ..\r\n            resourceLoader.incrementWorkload(1);\r\n            // To ensure that the resource loader knows when\r\n            // parsing is done, we listen to the GeomLibrary streamFileLoaded\r\n            // signal. This is fired once the entire stream is parsed.\r\n            this.geomLibrary.on('loaded', () => {\r\n                // A chunk of geoms are now parsed, so update the resource loader.\r\n                resourceLoader.incrementWorkDone(1);\r\n            });\r\n            resourceLoader.loadFile('archive', url).then((entries) => {\r\n                // Load the tree file. This file contains\r\n                // the scene tree of the asset, and also\r\n                // tells us how many geom files will need to be loaded.\r\n                let treeReader;\r\n                if (entries.tree2) {\r\n                    treeReader = new BinReader(entries.tree2.buffer, 0, SystemDesc.isMobileDevice);\r\n                }\r\n                else {\r\n                    const entry = entries.tree ? entries.tree : entries[Object.keys(entries)[0]];\r\n                    treeReader = new BinReader(entry.buffer, 0, SystemDesc.isMobileDevice);\r\n                    context.versions['zea-engine'] = new Version();\r\n                }\r\n                numGeomsFiles = this.readBinary(treeReader, context);\r\n                this.loaded = true;\r\n                this.emit('loaded');\r\n                if (numGeomsFiles == 0 && entries.geoms) {\r\n                    this.geomLibrary.readBinaryBuffer(filename, entries.geoms.buffer, context);\r\n                }\r\n                else {\r\n                    const basePath = folder + stem;\r\n                    const geomLibraryJSON = {\r\n                        numGeomsPerFile: numGeomsFiles,\r\n                        numGeoms: this.geomLibrary.getNumGeoms(), // Note: was set during readBinary.Why do we need to provide this again?\r\n                    };\r\n                    this.geomLibrary.loadGeomFilesStream(geomLibraryJSON, basePath, context);\r\n                }\r\n                resolve();\r\n            }, (error) => {\r\n                this.emit('error', error);\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n}\r\nRegistry.register('VLAAsset', VLAAsset);\r\nexport { VLAAsset };\r\n//# sourceMappingURL=VLAAsset.js.map","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import { ParameterOwner } from '../ParameterOwner';\r\n/**\r\n * The BaseTool provides an interface you can implement to define your own mouse, keyboard, and touch event handlers.\r\n *\r\n * A tool is a class that is delegated the handling of all user interaction events. The built-in {CameraManipulator}\r\n * class provides a default tool for moving the viewport camera.\r\n *\r\n * You can define your own custom tool, and replace the default CameraManipulator like so.\r\n * ```javascript\r\n *   const customManipulator = new MyCustomCameraManipulator()\r\n *   renderer.getViewport().setManipulator(customManipulator)\r\n * ```\r\n *\r\n * Each tool should provide handlers for the main types of events it will be responsible for handling.\r\n * These include mouse, keyboard, touch and VR events. Once a tool is installed on the viewport, the viewport\r\n * will start invoking the handler methods defined in the interface.\r\n * If the Tool handles an event, it should call stopPropagation on the event so the engine knows to stop the\r\n * propagation of the event to other classes.\r\n *\r\n * > Note: VR Events are ann emulation of mouse events, generated by the engine, allowing custom tools to be used to provide various VR interactions.\r\n *\r\n * **Events**\r\n * * **installChanged:** Triggered when the tool is installed or uninstalled.\r\n * * **activatedChanged:** Triggered when a tool is activated or deactivated.\r\n *\r\n * @extends ParameterOwner\r\n */\r\nclass BaseTool extends ParameterOwner {\r\n    /**\r\n     * Creates an instance of BaseTool.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.__activated = false;\r\n    }\r\n    /**\r\n     * Enables tools usage. This method is called by either the Viewport when a tool is removed, or the ToolManage if it is installed.\r\n     */\r\n    activateTool() {\r\n        if (this.__activated)\r\n            throw new Error('Tool already activate');\r\n        this.__activated = true;\r\n        this.emit('activatedChanged', { activated: this.__activated });\r\n    }\r\n    /**\r\n     * Disables tool usage. This method is called by either the Viewport when a tool is removed, or the ToolManage if it is installed.\r\n     */\r\n    deactivateTool() {\r\n        this.__activated = false;\r\n        this.emit('activatedChanged', { activated: this.__activated });\r\n    }\r\n    // ///////////////////////////////////\r\n    // Pointer events\r\n    /**\r\n     * Event fired when either the mouse button is pressed, or a touch start event occurs.\r\n     *\r\n     * @param event - The event param.\r\n     */\r\n    onPointerDown(event) {\r\n        // console.warn('Implement me')\r\n    }\r\n    /**\r\n     * Event fired when either the mouse cursor is moved, or a touch point moves.\r\n     *\r\n     * @param event - The event param.\r\n     */\r\n    onPointerMove(event) {\r\n        // console.warn('Implement me')\r\n    }\r\n    /**\r\n     * Event fired when either the mouse button is released, or a touch end event occurs.\r\n     *\r\n     * @param event - The event param.\r\n     */\r\n    onPointerUp(event) {\r\n        // console.warn('Implement me')\r\n    }\r\n    /**\r\n     * Event fired when a pointing device button is double clicked.\r\n     *\r\n     * @param event - The event param.\r\n     */\r\n    onPointerDoublePress(event) {\r\n        // console.warn('Implement me')\r\n    }\r\n    /**\r\n     * Event fired when a mouse pointer enters the viewport\r\n     *\r\n     * @param event - The event param.\r\n     */\r\n    onPointerEnter(event) {\r\n        // console.warn('Implement me')\r\n    }\r\n    /**\r\n     * Event fired when a mouse pointer leaves the viewport\r\n     *\r\n     * @param event - The event param.\r\n     */\r\n    onPointerLeave(event) {\r\n        // console.warn('Implement me')\r\n    }\r\n    /**\r\n     * Event fired when the user rotates the pointing device wheel.\r\n     *\r\n     * @param event - The event param.\r\n     */\r\n    onWheel(event) {\r\n        // console.warn('Implement me')\r\n    }\r\n    // ///////////////////////////////////\r\n    // Keyboard events\r\n    /**\r\n     * Event fired when the user presses down a key on the keyboard.\r\n     *\r\n     * @param event - The event param.\r\n     */\r\n    onKeyDown(event) {\r\n        // console.warn('Implement me')\r\n    }\r\n    /**\r\n     * Event fired when the user releases a key on the keyboard.\r\n     *\r\n     * @param event - The event param.\r\n     */\r\n    onKeyUp(event) {\r\n        // console.warn('Implement me')\r\n    }\r\n    // ///////////////////////////////////\r\n    // Touch events\r\n    /**\r\n     * Event fired when one or more touch points have been disrupted in an implementation-specific manner.\r\n     *\r\n     * @param event - The event param.\r\n     */\r\n    onTouchCancel(event) {\r\n        // console.warn('Implement me')\r\n    }\r\n}\r\nexport default BaseTool;\r\nexport { BaseTool };\r\n//# sourceMappingURL=BaseTool.js.map","import { ParameterOwner } from '../../SceneTree/ParameterOwner';\r\nimport { BooleanParameter } from '../../SceneTree/Parameters/index';\r\nconst PassType = {\r\n    OPAQUE: 1 << 0,\r\n    TRANSPARENT: 1 << 1,\r\n    OVERLAY: 1 << 2,\r\n};\r\n/** This class abstracts the rendering of a collection of geometries to screen.\r\n * @extends ParameterOwner\r\n */\r\nclass GLPass extends ParameterOwner {\r\n    /**\r\n     * Create a GL pass.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.enabled = true;\r\n        this.passIndex = -1;\r\n        this.__gl = null;\r\n        this.renderer = null;\r\n        this.__renderer = null;\r\n        this.enabledParam = new BooleanParameter('Enabled', true);\r\n        this.enabled = true;\r\n        this.passIndex = 0;\r\n        this.addParameter(this.enabledParam);\r\n        this.enabledParam.on('valueChanged', () => (this.enabled = this.enabledParam.value));\r\n    }\r\n    /**\r\n     * The __parameterValueChanged method.\r\n     * @param event - The event object.\r\n     * @private\r\n     */\r\n    parameterValueChanged(event) {\r\n        super.parameterValueChanged(event);\r\n        if (this.renderer)\r\n            this.renderer.requestRedraw();\r\n    }\r\n    /**\r\n     * The init method.\r\n     * @param renderer - The renderer value.\r\n     * @param passIndex - The index of the pass in the GLBAseRenderer\r\n     */\r\n    init(renderer, passIndex) {\r\n        if (passIndex == undefined)\r\n            throw new Error('Missing constructor argument.'); // Type checking. Seomthing that TypeScript will do for us.\r\n        this.__gl = renderer.gl;\r\n        this.renderer = renderer;\r\n        this.__renderer = renderer;\r\n        this.passIndex = passIndex;\r\n    }\r\n    /**\r\n     * The setPassIndex method.\r\n     * @param passIndex - The index of the pass in the GLBAseRenderer\r\n     */\r\n    setPassIndex(passIndex) {\r\n        this.passIndex = passIndex;\r\n    }\r\n    /**\r\n     * Returns the pass type. OPAQUE passes are always rendered first, followed by TRANSPARENT passes, and finally OVERLAY.\r\n     * @return - The pass type value.\r\n     */\r\n    getPassType() {\r\n        return PassType.OPAQUE;\r\n    }\r\n    /**\r\n     * The itemAddedToScene method is called on each pass when a new item\r\n     * is added to the scene, and the renderer must decide how to render it.\r\n     * It allows Passes to select geometries to handle the drawing of.\r\n     * @param treeItem - The treeItem value.\r\n     * @param rargs - Extra return values are passed back in this object.\r\n     * The object contains a parameter 'continueInSubTree', which can be set to false,\r\n     * so the subtree of this node will not be traversed after this node is handled.\r\n     * @return - The return value.\r\n     */\r\n    itemAddedToScene(treeItem, rargs) {\r\n        throw Error(`${this.constructor.name} must implement itemAddedToScene and itemRemovedFromScene`);\r\n        return false;\r\n    }\r\n    /**\r\n     * The itemRemovedFromScene method is called on each pass when aa item\r\n     * is removed to the scene, and the pass must handle cleaning up any resources.\r\n     * @param treeItem - The treeItem value.\r\n     * @param rargs - Extra return values are passed back in this object.\r\n     * @return - The return value.\r\n     */\r\n    itemRemovedFromScene(treeItem, rargs) {\r\n        throw Error(`${this.constructor.name} must implement itemAddedToScene and itemRemovedFromScene`);\r\n        return false;\r\n    }\r\n    /**\r\n     * The startPresenting method.\r\n     */\r\n    startPresenting() { }\r\n    /**\r\n     * The stopPresenting method.\r\n     */\r\n    stopPresenting() { }\r\n    // ///////////////////////////////////\r\n    // Rendering\r\n    /**\r\n     * The draw method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    draw(renderstate) {\r\n        throw Error('draw not implemented on GLPass');\r\n    }\r\n    /**\r\n     * The drawHighlightedGeoms method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    drawHighlightedGeoms(renderstate) { }\r\n    /**\r\n     * The drawGeomData method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    drawGeomData(renderstate) { }\r\n    /**\r\n     * The getGeomItemAndDist method.\r\n     * @param geomData - The geomData value.\r\n     */\r\n    getGeomItemAndDist(geomData) {\r\n        throw Error('getGeomItemAndDist not implemented on GLPass');\r\n    }\r\n}\r\nexport { GLPass, PassType };\r\n//# sourceMappingURL=GLPass.js.map","/* eslint-disable require-jsdoc */\r\nimport { Vec2, Vec3, Quat, Xfo, Ray } from '../../Math/index';\r\nimport { BaseTool } from './BaseTool';\r\nimport { NumberParameter, BooleanParameter } from '../Parameters/index';\r\nimport { SystemDesc } from '../../SystemDesc';\r\nimport { PassType } from '../../Renderer/Passes/GLPass';\r\nimport { POINTER_TYPES } from '../../Utilities/Events/ZeaPointerEvent';\r\nconst MANIPULATION_MODES = {\r\n    pan: 0,\r\n    dolly: 1,\r\n    focussing: 2,\r\n    look: 3,\r\n    turntable: 4,\r\n    tumbler: 5,\r\n    trackball: 6,\r\n};\r\n/**\r\n * Class for defining and interaction model of the camera.\r\n *\r\n * The CameraManipulator supports a variety of manipulation modes, and hotkeys/modifier keys\r\n * that allow the user to rapidly switch between modes, such as 'turntable' and 'pan'.\r\n * A detailed explanation of various camera manipulation modes can be found\r\n * here: https://www.mattkeeter.com/projects/rotation/\r\n *\r\n * **MANIPULATION_MODES**\r\n * * **pan:** Translates the camera sideways according the the camera's current orientation. Activated by the right mouse button, or two fingered touches on mobile.\r\n * * **dolly:** Translates the camera forwards and backwards according the the camera's current orientation. Activated by holding the ctrl and alt keys while using the left mouse button, or the mouse wheel, or two fingered touches on mobile.\r\n * * **focussing:** Focusses the camera on a specific 3d point in the scene. Activated by double clicking, or double tapping on a geometry in the 3d view.\r\n * * **look:** Rotates the camera around its own position. Useful for simulating looking by turning ones head inside a scene. Activated by holding the ctrl key and right mouse button.\r\n * * **turntable:** Rotates the camera around the current camera target, using the turntable style manipulation described above. Activated by the left mouse button.\r\n * * **tumbler:** Rotates the camera around the current camera target, using the tumbler style manipulation described above. Activated by the left mouse button.\r\n * * **trackball:** Rotates the camera around the current camera target, using the trackball style manipulation described above. Activated by the left mouse button.\r\n *\r\n * The default manipulation mode, is the mode that is active with only the left mouse button. The default manipulation mode is currently 'turntable'.\r\n *\r\n * To Assign a different default manipulation mode, retrieve the manipulator from the viewport\r\n * and set the default mode.\r\n * ```\r\n * const cameraManipulator = renderer.getViewport().getManipulator()\r\n * cameraManipulator.setDefaultManipulationMode(CameraManipulator.MANIPULATION_MODES.trackball);\r\n * ```\r\n *\r\n * This class is the default manipulator, and can be replaced with custom manipulators.\r\n *\r\n * ```\r\n * const customManipulator = new CustomCameraManipulator()\r\n * renderer.getViewport().setManipulator(customManipulator);\r\n * ```\r\n *\r\n * The Camera manipulator can focus the view on a point in the view by various gestures.\r\n * A single click or touch tap can cause the view to be focussed or a double click or tap.\r\n * This behavior can be configured using the 2 values.\r\n * e.g. to disable all focus gestures, set both values to zero.\r\n * ```\r\n * const cameraManipulator = renderer.getViewport().getManipulator()\r\n * cameraManipulator.aimFocusOnTouchTap = 0\r\n * cameraManipulator.aimFocusOnMouseClick = 0\r\n * ```\r\n *\r\n * **Parameters**\r\n * * **OrbitRate(`NumberParameter`):** The rate at which mouse or touch interactions are translated camera orientation changes.\r\n * * **DollySpeed(`NumberParameter`):** The rate at which the mouse button or touch interactions are translated camera dolly movement.\r\n * * **mouseWheelDollySpeed(`NumberParameter`):** The rate at which the mouse wheel interactions are translated camera dolly movement.\r\n *\r\n *   Note: this value defaults to different values for touch based interfaces to mouse based input.\r\n *   For mobile devices, the orbit rate defaults to 0.5, and for mouse based interaction, the value defaults to 1.\r\n *   A value of 1 means that the camera will rotate 180 degrees for a mouse interaction that spans from the left border of the viewport to the right border.\r\n *   Some applications might require lower, or higher default values\r\n *\r\n * To set different default values for mobile or desktop set a different value based on the SystemDesc.isMobileDevice flag.\r\n * ```\r\n * const cameraManipulator = renderer.getViewport().getManipulator()\r\n * cameraManipulator.getParameter('OrbitRate').setValue(SystemDesc.isMobileDevice ? 0.1 : 0.4)\r\n * ```\r\n *\r\n * **Events**\r\n * * **movementFinished:** Emitted when a camera movement is finished. E.g. when the user releases the mouse after a dolly, or after the focussing action has completed.\r\n * * **aimingFocus:** Emitted when a camera is being focussed on a target. E.g. when the user double clicks the mouse on a geometry in the view.\r\n *\r\n * @extends BaseTool\r\n */\r\nclass CameraManipulator extends BaseTool {\r\n    /**\r\n     * Create a camera, mouse and keyboard\r\n     * @param appData - The object containing the scene and the renderer.\r\n     */\r\n    constructor(appData) {\r\n        super();\r\n        this.__mouseWheelMovementDist = 0;\r\n        this.__mouseWheelZoomCount = 0;\r\n        this.__mouseWheelZoomId = -1;\r\n        /**\r\n         * @member orbitRateParam - The rate at which mouse or touch interactions are translated camera orientation changes.\r\n         */\r\n        this.orbitRateParam = new NumberParameter('OrbitRate', SystemDesc.isMobileDevice ? 0.5 : 1);\r\n        /**\r\n         * @member dollySpeedParam - The rate at which the mouse button or touch interactions are translated camera dolly movement.\r\n         */\r\n        this.dollySpeedParam = new NumberParameter('DollySpeed', 0.02);\r\n        /**\r\n         * @member mouseWheelDollySpeedParam - The rate at which the mouse wheel interactions are translated camera dolly movement.\r\n         */\r\n        this.mouseWheelDollySpeedParam = new NumberParameter('MouseWheelDollySpeed', 0.1);\r\n        /**\r\n         * @member orbitAroundCursor - TODO\r\n         */\r\n        this.orbitAroundCursor = new BooleanParameter('OrbitAroundCursor', true);\r\n        /**\r\n         * @member walkSpeedParam - TODO\r\n         */\r\n        this.walkSpeedParam = new NumberParameter('WalkSpeed', 5); // Value is in meters/second\r\n        /**\r\n         * @member walkModeCollisionDetection - TODO\r\n         */\r\n        this.walkModeCollisionDetection = new BooleanParameter('WalkModeCollisionDetection', false);\r\n        this.appData = appData;\r\n        this.__defaultManipulationState = MANIPULATION_MODES.turntable;\r\n        this.__manipulationState = this.__defaultManipulationState;\r\n        this.__pointerDown = false;\r\n        this.__dragging = 0;\r\n        this.aimFocusOnTouchTap = 1;\r\n        this.aimFocusOnMouseClick = 2;\r\n        this.enabledWASDWalkMode = false;\r\n        this.__keyboardMovement = false;\r\n        this.__keysPressed = [];\r\n        this.__velocity = new Vec3();\r\n        this.__prevVelocityIntegrationTime = -1;\r\n        this.__ongoingTouches = {};\r\n        this.addParameter(this.orbitRateParam);\r\n        this.addParameter(this.dollySpeedParam);\r\n        this.addParameter(this.mouseWheelDollySpeedParam);\r\n        this.addParameter(this.orbitAroundCursor);\r\n        this.addParameter(this.walkSpeedParam);\r\n        this.addParameter(this.walkModeCollisionDetection);\r\n    }\r\n    /**\r\n     * Enables tools usage.\r\n     */\r\n    activateTool() {\r\n        super.activateTool();\r\n        if (this.appData && this.appData.renderer) {\r\n            this.prevCursor = this.appData.renderer.getGLCanvas().style.cursor;\r\n            this.appData.renderer.getGLCanvas().style.cursor = 'cursor';\r\n        }\r\n    }\r\n    /**\r\n     * Disables tool usage.\r\n     */\r\n    deactivateTool() {\r\n        super.deactivateTool();\r\n        if (this.appData && this.appData.renderer) {\r\n            this.appData.renderer.getGLCanvas().style.cursor = this.appData.renderer.getGLCanvas().style.cursor;\r\n        }\r\n    }\r\n    /**\r\n     * Sets default manipulation mode.\r\n     * The value can be on of the keys in #CameraManipulator.MANIPULATION_MODES\r\n     *\r\n     * @param manipulationMode - The manipulation mode value.\r\n     */\r\n    setDefaultManipulationMode(manipulationMode) {\r\n        if (typeof manipulationMode == 'string') {\r\n            this.__defaultManipulationState = MANIPULATION_MODES[manipulationMode];\r\n        }\r\n        else\r\n            this.__defaultManipulationState = manipulationMode;\r\n        if (!Object.values(MANIPULATION_MODES).includes(this.__defaultManipulationState)) {\r\n            throw new Error('Invalid Camera Manipulation Mode. Must be one of ' + Object.keys(MANIPULATION_MODES));\r\n        }\r\n    }\r\n    /**\r\n     * The look method.\r\n     * @param event - The event value.\r\n     * @param dragVec - The drag vector value.\r\n     */\r\n    look(event, dragVec) {\r\n        const { viewport } = event;\r\n        const camera = viewport.getCamera();\r\n        const orbitRate = this.orbitRateParam.value;\r\n        const globalXfo = camera.globalXfoParam.value;\r\n        // Orbit\r\n        const orbit = new Quat();\r\n        orbit.rotateZ((dragVec.x / viewport.getWidth()) * Math.PI * orbitRate);\r\n        globalXfo.ori = orbit.multiply(globalXfo.ori);\r\n        // Pitch\r\n        const pitch = new Quat();\r\n        pitch.rotateX((dragVec.y / viewport.getHeight()) * Math.PI * orbitRate);\r\n        globalXfo.ori.multiplyInPlace(pitch);\r\n        camera.globalXfoParam.value = globalXfo;\r\n    }\r\n    /**\r\n     * Rotates viewport camera about the target.\r\n     *\r\n     * @param event - The event value.\r\n     * @param dragVec - The drag vector value.\r\n     */\r\n    turntable(event, dragVec) {\r\n        const { viewport } = event;\r\n        const camera = viewport.getCamera();\r\n        const orbitRate = this.orbitRateParam.value;\r\n        const globalXfo = camera.globalXfoParam.value;\r\n        const cameraTargetOffset = globalXfo.ori.inverse().rotateVec3(globalXfo.tr.subtract(this.__orbitTarget));\r\n        // Orbit\r\n        const orbit = new Quat();\r\n        orbit.rotateZ((dragVec.x / viewport.getWidth()) * 2 * Math.PI * -orbitRate);\r\n        globalXfo.ori = orbit.multiply(globalXfo.ori);\r\n        // Pitch\r\n        const pitch = new Quat();\r\n        pitch.rotateX((dragVec.y / viewport.getHeight()) * Math.PI * -orbitRate);\r\n        globalXfo.ori.multiplyInPlace(pitch);\r\n        globalXfo.tr = this.__orbitTarget.add(globalXfo.ori.rotateVec3(cameraTargetOffset));\r\n        camera.globalXfoParam.value = globalXfo;\r\n    }\r\n    /**\r\n     * Rotates viewport camera about the target.\r\n     *\r\n     * @param event - The event value.\r\n     * @param dragVec - The drag vector value.\r\n     */\r\n    tumbler(event, dragVec) {\r\n        const { viewport } = event;\r\n        const camera = viewport.getCamera();\r\n        const orbitRate = this.orbitRateParam.value;\r\n        const globalXfo = camera.globalXfoParam.value;\r\n        const xVec = globalXfo.ori.getXaxis();\r\n        const yVec = globalXfo.ori.getYaxis();\r\n        const zVec = globalXfo.ori.getZaxis();\r\n        const vec = xVec.scale(-dragVec.x).add(yVec.scale(dragVec.y));\r\n        const rotateAxis = vec.cross(zVec);\r\n        rotateAxis.normalizeInPlace();\r\n        const dragVecLength = dragVec.length();\r\n        const cameraTargetOffset = globalXfo.ori.inverse().rotateVec3(globalXfo.tr.subtract(this.__orbitTarget));\r\n        // Orbit\r\n        const orbit = new Quat();\r\n        orbit.setFromAxisAndAngle(rotateAxis, (dragVecLength / viewport.getWidth()) * Math.PI * -orbitRate);\r\n        globalXfo.ori = orbit.multiply(globalXfo.ori);\r\n        globalXfo.tr = this.__orbitTarget.add(globalXfo.ori.rotateVec3(cameraTargetOffset));\r\n        camera.globalXfoParam.value = globalXfo;\r\n    }\r\n    /**\r\n     * Rotates viewport camera about the target.\r\n     *\r\n     * @param event - The event value.\r\n     * @param dragVec - The drag vector value.\r\n     */\r\n    trackball(event, dragVec) {\r\n        const { viewport } = event;\r\n        const camera = viewport.getCamera();\r\n        const orbitRate = this.orbitRateParam.value;\r\n        const globalXfo = camera.globalXfoParam.value;\r\n        const xVec = globalXfo.ori.getXaxis();\r\n        const yVec = globalXfo.ori.getYaxis();\r\n        const zVec = globalXfo.ori.getZaxis();\r\n        const vec = xVec.scale(-dragVec.x).add(yVec.scale(dragVec.y));\r\n        const rotateAxis = vec.cross(zVec);\r\n        rotateAxis.normalizeInPlace();\r\n        const dragVecLength = dragVec.length();\r\n        const cameraTargetOffset = globalXfo.ori.inverse().rotateVec3(globalXfo.tr.subtract(this.__orbitTarget));\r\n        // Orbit\r\n        const orbit = new Quat();\r\n        orbit.setFromAxisAndAngle(rotateAxis, (dragVecLength / viewport.getWidth()) * Math.PI * -orbitRate);\r\n        globalXfo.ori = orbit.multiply(globalXfo.ori);\r\n        globalXfo.tr = this.__orbitTarget.add(globalXfo.ori.rotateVec3(cameraTargetOffset));\r\n        camera.globalXfoParam.value = globalXfo;\r\n    }\r\n    /**\r\n     * Rotates the camera around its own `X`,`Y` axes.\r\n     *\r\n     * @param event - The event value.\r\n     * @param dragVec - The drag vector value.\r\n     */\r\n    pan(event, dragVec) {\r\n        const { viewport } = event;\r\n        const camera = viewport.getCamera();\r\n        const delta = new Xfo();\r\n        const xAxis = new Vec3(1, 0, 0);\r\n        const yAxis = new Vec3(0, 1, 0);\r\n        if (camera.isOrthographic()) {\r\n            const frustumHeight = camera.getFrustumHeight();\r\n            const frustumWidth = frustumHeight * (viewport.getWidth() / viewport.getHeight());\r\n            delta.tr = xAxis.scale(-(dragVec.x / viewport.getWidth()) * frustumWidth);\r\n            delta.tr.addInPlace(yAxis.scale((dragVec.y / viewport.getHeight()) * frustumHeight));\r\n        }\r\n        else {\r\n            const focalDistance = camera.getFocalDistance();\r\n            const fovY = camera.getFov();\r\n            const cameraPlaneHeight = 2.0 * focalDistance * Math.tan(0.5 * fovY);\r\n            const cameraPlaneWidth = cameraPlaneHeight * (viewport.getWidth() / viewport.getHeight());\r\n            delta.tr = xAxis.scale(-(dragVec.x / viewport.getWidth()) * cameraPlaneWidth);\r\n            delta.tr.addInPlace(yAxis.scale((dragVec.y / viewport.getHeight()) * cameraPlaneHeight));\r\n        }\r\n        const cameraXfo = camera.globalXfoParam.value;\r\n        camera.globalXfoParam.value = cameraXfo.multiply(delta);\r\n    }\r\n    /**\r\n     * The dolly method.\r\n     * @param event - The event value.\r\n     * @param dragVec - The drag vector value.\r\n     */\r\n    dolly(event, dragVec) {\r\n        const { viewport } = event;\r\n        const camera = viewport.getCamera();\r\n        const focalDistance = camera.getFocalDistance();\r\n        const applyMovement = () => {\r\n            const dollyDist = dragVec.y * this.dollySpeedParam.value * focalDistance;\r\n            const delta = new Xfo();\r\n            delta.tr.set(0, 0, dollyDist);\r\n            const globalXfo = camera.globalXfoParam.value;\r\n            camera.globalXfoParam.value = globalXfo.multiply(delta);\r\n        };\r\n        const applyViewScale = () => {\r\n            const dollyDist = dragVec.y * this.dollySpeedParam.value;\r\n            const viewHeight = camera.getFrustumHeight();\r\n            const zoomDist = viewHeight * dollyDist;\r\n            camera.setFrustumHeight(viewHeight + zoomDist);\r\n        };\r\n        if (camera.isOrthographic()) {\r\n            applyViewScale();\r\n        }\r\n        else {\r\n            applyMovement();\r\n        }\r\n    }\r\n    /**\r\n     * The initDrag method.\r\n     *\r\n     * @private\r\n     * @param event - The event value.\r\n     */\r\n    initDrag(event) {\r\n        const { pointerPos } = event;\r\n        event.setCapture(this);\r\n        this.__pointerDown = true;\r\n        const { viewport } = event;\r\n        const camera = viewport.getCamera();\r\n        const xfo = camera.globalXfoParam.value;\r\n        const orbitAroundCursor = this.orbitAroundCursor.value;\r\n        if (event.intersectionData != undefined && orbitAroundCursor) {\r\n            this.__orbitTarget = event.intersectionData.intersectionPos;\r\n            const vec = xfo.inverse().transformVec3(event.intersectionData.intersectionPos);\r\n            camera.setFocalDistance(-vec.z);\r\n        }\r\n        else {\r\n            this.__orbitTarget = xfo.tr.add(xfo.ori.getZaxis().scale(-camera.getFocalDistance()));\r\n        }\r\n        this.__prevPointerPos = pointerPos;\r\n        this.__dragging = 1;\r\n    }\r\n    /**\r\n     * The initDrag method.\r\n     *\r\n     * @private\r\n     * @param event - The event value.\r\n     */\r\n    endDrag(event) {\r\n        if (event.getCapture() == this)\r\n            event.releaseCapture();\r\n        this.__dragging = 0;\r\n        this.__pointerDown = false;\r\n    }\r\n    /**\r\n     * The aimFocus method.\r\n     *\r\n     * @private\r\n     * @param camera - The camera that we are aiming\r\n     * @param target - The target to focus on.\r\n     * @param distance - The distance from the target to get to.\r\n     * @param duration - The duration in milliseconds to aim the focus.\r\n     */\r\n    aimFocus(camera, target, distance = -1, duration = 400) {\r\n        if (this.__focusIntervalId)\r\n            clearInterval(this.__focusIntervalId);\r\n        const count = Math.round(duration / 20); // each step is 20ms\r\n        const initalMode = this.__manipulationState;\r\n        let i = 0;\r\n        const applyMovement = () => {\r\n            const prevGlobalXfo = camera.globalXfoParam.value;\r\n            const initialDist = camera.getFocalDistance();\r\n            const dir = target.subtract(prevGlobalXfo.tr);\r\n            const currDist = dir.normalizeInPlace();\r\n            const targetGlobalXfo = prevGlobalXfo.clone();\r\n            if (initalMode == MANIPULATION_MODES.turntable || initalMode == MANIPULATION_MODES.look) {\r\n                // Orbit\r\n                {\r\n                    const currDir = prevGlobalXfo.ori.getZaxis().clone();\r\n                    currDir.z = 0;\r\n                    const newDir = dir.negate();\r\n                    newDir.z = 0;\r\n                    const orbit = new Quat();\r\n                    orbit.setFrom2Vectors(currDir, newDir);\r\n                    targetGlobalXfo.ori = orbit.multiply(targetGlobalXfo.ori);\r\n                }\r\n                // Pitch\r\n                {\r\n                    const xAxis = prevGlobalXfo.ori.getXaxis().clone();\r\n                    const currDir = prevGlobalXfo.ori.getZaxis().clone();\r\n                    const newDir = dir.negate();\r\n                    newDir.subtractInPlace(xAxis.scale(newDir.dot(xAxis)));\r\n                    newDir.normalizeInPlace();\r\n                    const pitch = new Quat();\r\n                    if (currDir.cross(newDir).dot(xAxis) > 0.0)\r\n                        pitch.rotateX(currDir.angleTo(newDir));\r\n                    else\r\n                        pitch.rotateX(-currDir.angleTo(newDir));\r\n                    targetGlobalXfo.ori = targetGlobalXfo.ori.multiply(pitch);\r\n                }\r\n                // Fix Roll\r\n                {\r\n                    const currDir = targetGlobalXfo.ori.getXaxis().clone();\r\n                    const newDir = currDir.clone();\r\n                    newDir.z = 0;\r\n                    newDir.normalizeInPlace();\r\n                    const roll = new Quat();\r\n                    roll.setFrom2Vectors(currDir, newDir);\r\n                    targetGlobalXfo.ori = roll.multiply(targetGlobalXfo.ori);\r\n                }\r\n            }\r\n            else {\r\n                const currDir = prevGlobalXfo.ori.getZaxis().clone();\r\n                const newDir = dir.negate();\r\n                const orbit = new Quat();\r\n                orbit.setFrom2Vectors(currDir, newDir);\r\n                targetGlobalXfo.ori = orbit.multiply(targetGlobalXfo.ori);\r\n            }\r\n            // With each iteration we get closer to our goal\r\n            // and on the final iteration we should aim perfectly at\r\n            // the target.\r\n            const t = Math.pow(i / count, 2);\r\n            const globalXfo = prevGlobalXfo.clone();\r\n            globalXfo.ori = prevGlobalXfo.ori.lerp(targetGlobalXfo.ori, t);\r\n            if (distance > 0) {\r\n                const displacement = dir.scale(currDist - distance);\r\n                globalXfo.tr.addInPlace(displacement.scale(t));\r\n            }\r\n            camera.setFocalDistance(initialDist + (currDist - initialDist) * t);\r\n            camera.globalXfoParam.value = globalXfo;\r\n            i++;\r\n            if (i <= count) {\r\n                this.__focusIntervalId = setTimeout(applyMovement, 20);\r\n            }\r\n            else {\r\n                this.__focusIntervalId = undefined;\r\n                this.emit('movementFinished');\r\n                camera.emit('movementFinished');\r\n            }\r\n        };\r\n        applyMovement();\r\n    }\r\n    /**\r\n     * The orientPointOfView method.\r\n     *\r\n     * @private\r\n     * @param camera - The camera that we are orienting\r\n     * @param position - The target to focus on.\r\n     * @param target - The target to focus on.\r\n     * @param distance - The distance to the specified we want the user to be moved to\r\n     * @param duration - The duration in milliseconds to aim the focus.\r\n     */\r\n    orientPointOfView(camera, position, target, distance = 0, duration = 400) {\r\n        if (this.__focusIntervalId)\r\n            clearInterval(this.__focusIntervalId);\r\n        const count = Math.round(duration / 20); // each step is 20ms\r\n        let i = 0;\r\n        const applyMovement = () => {\r\n            const initialGlobalXfo = camera.globalXfoParam.value;\r\n            const initialTarget = camera.getTargetPosition();\r\n            // With each iteration we get closer to our goal\r\n            // and on the final iteration we should aim perfectly at\r\n            // the target.\r\n            const t = Math.pow(i / count, 2);\r\n            // Sometimes we want to pull users to within some threshold of the specified position.\r\n            const dirToPosition = position.subtract(initialGlobalXfo.tr);\r\n            const currDistToPosition = dirToPosition.normalizeInPlace();\r\n            const displacement = dirToPosition.scale(currDistToPosition - distance);\r\n            const pos = initialGlobalXfo.tr.add(displacement.scale(t));\r\n            const targetPos = initialTarget.lerp(target, t);\r\n            camera.setPositionAndTarget(pos, targetPos);\r\n            i++;\r\n            if (i <= count) {\r\n                this.__focusIntervalId = setTimeout(applyMovement, 20);\r\n            }\r\n            else {\r\n                this.__focusIntervalId = undefined;\r\n                this.emit('movementFinished');\r\n                camera.emit('movementFinished');\r\n            }\r\n        };\r\n        applyMovement();\r\n    }\r\n    /**\r\n     * Invoked when a user double presses a pointer over an element.\r\n     *\r\n     * @param event - The pointer event that occurs\r\n     * @memberof CameraManipulator\r\n     */\r\n    onPointerDoublePress(event) {\r\n        const aimFocus = (pointerRay) => {\r\n            const viewport = event.viewport;\r\n            const camera = viewport.getCamera();\r\n            const cameraGlobalXfo = camera.globalXfoParam.value;\r\n            const aimTarget = cameraGlobalXfo.tr.add(pointerRay.dir.scale(event.intersectionData.dist));\r\n            this.aimFocus(camera, aimTarget);\r\n            // Note: Collab can use these mouseEvents to guide users attention.\r\n            // @ts-ignore\r\n            event.aimTarget = aimTarget;\r\n            // @ts-ignore\r\n            event.aimDistance = event.intersectionData.dist;\r\n            this.emit('aimingFocus', event);\r\n            camera.emit('aimingFocus', event);\r\n            event.stopPropagation();\r\n        };\r\n        if (event.intersectionData && this.aimFocusOnMouseClick) {\r\n            if (event.pointerType === POINTER_TYPES.mouse && this.aimFocusOnMouseClick == 2) {\r\n                const mouseEvent = event;\r\n                aimFocus(mouseEvent.pointerRay);\r\n                mouseEvent.preventDefault();\r\n            }\r\n            if (event.pointerType === POINTER_TYPES.touch && this.aimFocusOnTouchTap == 2) {\r\n                const pointerEvent = event;\r\n                aimFocus(pointerEvent.pointerRay);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Event fired when either the mouse button is pressed, or a touch start event occurs.\r\n     *\r\n     * @param event - The mouse event that occurs.\r\n     */\r\n    onPointerDown(event) {\r\n        if (event.pointerType === POINTER_TYPES.mouse) {\r\n            if (this.__dragging == 1) {\r\n                this.endDrag(event);\r\n            }\r\n            this.initDrag(event);\r\n            const mouseEvent = event;\r\n            if (mouseEvent.button == 2) {\r\n                this.__manipulationState = MANIPULATION_MODES.pan;\r\n            }\r\n            else if (mouseEvent.ctrlKey && mouseEvent.altKey) {\r\n                this.__manipulationState = MANIPULATION_MODES.dolly;\r\n            }\r\n            else if (mouseEvent.ctrlKey || mouseEvent.button == 2) {\r\n                this.__manipulationState = MANIPULATION_MODES.look;\r\n            }\r\n            else {\r\n                this.__manipulationState = this.__defaultManipulationState;\r\n            }\r\n            mouseEvent.preventDefault();\r\n        }\r\n        else if (event.pointerType === POINTER_TYPES.touch) {\r\n            this._onTouchStart(event);\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n    /**\r\n     * Event fired when either the mouse cursor is moved, or a touch point moves.\r\n     *\r\n     * @param event - The mouse event that occurs.\r\n     */\r\n    onPointerMove(event) {\r\n        if (this.__dragging != 0) {\r\n            if (event.pointerType === POINTER_TYPES.mouse)\r\n                this._onMouseMove(event);\r\n            if (event.pointerType === POINTER_TYPES.touch)\r\n                this._onTouchMove(event);\r\n            this.__dragging = 2;\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n    /**\r\n     * The event that occurs when the user moves the pointer across a screen.\r\n     *\r\n     * @param event -The event value\r\n     */\r\n    _onMouseMove(event) {\r\n        if (!this.__pointerDown)\r\n            return;\r\n        const pointerPos = event.pointerPos;\r\n        // this.__calculatingDragAction = true\r\n        const dragVec = pointerPos.subtract(this.__prevPointerPos);\r\n        switch (this.__manipulationState) {\r\n            case MANIPULATION_MODES.turntable:\r\n                this.turntable(event, dragVec);\r\n                break;\r\n            case MANIPULATION_MODES.tumbler:\r\n                this.tumbler(event, dragVec);\r\n                break;\r\n            case MANIPULATION_MODES.trackball:\r\n                this.trackball(event, dragVec);\r\n                break;\r\n            case MANIPULATION_MODES.look:\r\n                this.look(event, dragVec);\r\n                break;\r\n            case MANIPULATION_MODES.pan:\r\n                this.pan(event, pointerPos.subtract(this.__prevPointerPos));\r\n                break;\r\n            case MANIPULATION_MODES.dolly:\r\n                this.dolly(event, dragVec);\r\n                break;\r\n        }\r\n        this.__prevPointerPos = pointerPos;\r\n        // this.__calculatingDragAction = false\r\n        event.preventDefault();\r\n    }\r\n    /**\r\n     * The event that occurs when the user moves pointer across a touch screen.\r\n     *\r\n     * @param event - The touch event that occurs.\r\n     * @private\r\n     */\r\n    _onTouchMove(event) {\r\n        // this.__calculatingDragAction = true\r\n        const touches = event.touches;\r\n        if (touches.length == 1) {\r\n            const touch = touches[0];\r\n            const touchPos = new Vec2(touch.clientX, touch.clientY);\r\n            const touchData = this.__ongoingTouches[touch.identifier];\r\n            if (!touchData)\r\n                return;\r\n            const dragVec = touchPos.subtract(touchData.pos);\r\n            switch (this.__defaultManipulationState) {\r\n                case MANIPULATION_MODES.look:\r\n                    // TODO: scale panning here.\r\n                    dragVec.scaleInPlace(6.0);\r\n                    this.look(event, dragVec);\r\n                    break;\r\n                case MANIPULATION_MODES.turntable:\r\n                    this.turntable(event, dragVec);\r\n                    break;\r\n                case MANIPULATION_MODES.tumbler:\r\n                    this.tumbler(event, dragVec);\r\n                    break;\r\n                case MANIPULATION_MODES.trackball:\r\n                    this.trackball(event, dragVec);\r\n                    break;\r\n            }\r\n            touchData.pos = touchPos;\r\n        }\r\n        else if (touches.length == 2) {\r\n            const touch0 = touches[0];\r\n            const touchData0 = this.__ongoingTouches[touch0.identifier];\r\n            const touch1 = touches[1];\r\n            const touchData1 = this.__ongoingTouches[touch1.identifier];\r\n            if (!touchData0 || !touchData1)\r\n                return;\r\n            const touch0Pos = new Vec2(touch0.clientX, touch0.clientY);\r\n            const touch1Pos = new Vec2(touch1.clientX, touch1.clientY);\r\n            const startSeparation = touchData1.pos.subtract(touchData0.pos).length();\r\n            const dragSeparation = touch1Pos.subtract(touch0Pos).length();\r\n            const separationDist = startSeparation - dragSeparation;\r\n            const touch0Drag = touch0Pos.subtract(touchData0.pos);\r\n            const touch1Drag = touch1Pos.subtract(touchData1.pos);\r\n            const dragVec = touch0Drag.add(touch1Drag);\r\n            // TODO: scale panning here.\r\n            dragVec.scaleInPlace(0.5);\r\n            // apply the vectors to calculate a pan and zoom\r\n            const dragDist = separationDist * 0.002;\r\n            const { viewport } = event;\r\n            const camera = viewport.getCamera();\r\n            const focalDistance = camera.getFocalDistance();\r\n            const fovY = camera.getFov();\r\n            const xAxis = new Vec3(1, 0, 0);\r\n            const yAxis = new Vec3(0, 1, 0);\r\n            const cameraPlaneHeight = 2.0 * focalDistance * Math.tan(0.5 * fovY);\r\n            const cameraPlaneWidth = cameraPlaneHeight * (viewport.getWidth() / viewport.getHeight());\r\n            const delta = new Xfo();\r\n            delta.tr = xAxis.scale(-(dragVec.x / viewport.getWidth()) * cameraPlaneWidth);\r\n            delta.tr.addInPlace(yAxis.scale((dragVec.y / viewport.getHeight()) * cameraPlaneHeight));\r\n            const zoomDist = dragDist * focalDistance;\r\n            camera.setFocalDistance(focalDistance + zoomDist);\r\n            delta.tr.z += zoomDist;\r\n            // Apply the roll\r\n            switch (this.__defaultManipulationState) {\r\n                case MANIPULATION_MODES.tumbler:\r\n                case MANIPULATION_MODES.trackball:\r\n                    const vecPrev = touchData1.pos.subtract(touchData0.pos);\r\n                    const vecNow = touch1Pos.subtract(touch0Pos);\r\n                    let deltaAngle = vecPrev.normalize().angleTo(vecNow.normalize());\r\n                    if (vecPrev.cross(vecNow) < 0.0) {\r\n                        deltaAngle = -deltaAngle;\r\n                    }\r\n                    const roll = new Quat();\r\n                    roll.rotateZ(deltaAngle);\r\n                    delta.ori.multiplyInPlace(roll);\r\n                    break;\r\n            }\r\n            const globalXfo = camera.globalXfoParam.value;\r\n            camera.globalXfoParam.value = globalXfo.multiply(delta);\r\n            touchData0.pos = touch0Pos;\r\n            touchData1.pos = touch1Pos;\r\n        }\r\n        // this.__calculatingDragAction = false\r\n    }\r\n    /**\r\n     * Event fired when either the mouse button is released, or a touch end event occurs.\r\n     *\r\n     * @param event - The mouse event that occurs.\r\n     */\r\n    onPointerUp(event) {\r\n        if (this.__dragging == 1) {\r\n            // No dragging ocurred. Release the capture and let the event propagate like normal.\r\n            this.endDrag(event);\r\n            if (event.intersectionData) {\r\n                if ((event.pointerType === POINTER_TYPES.mouse && this.aimFocusOnMouseClick == 1) ||\r\n                    (event.pointerType === POINTER_TYPES.touch && this.aimFocusOnTouchTap == 1)) {\r\n                    const viewport = event.viewport;\r\n                    const camera = viewport.getCamera();\r\n                    const cameraGlobalXfo = camera.globalXfoParam.value;\r\n                    const pointerRay = event.pointerType === POINTER_TYPES.mouse\r\n                        ? event.pointerRay\r\n                        : event.pointerRay;\r\n                    const aimTarget = cameraGlobalXfo.tr.add(pointerRay.dir.scale(event.intersectionData.dist));\r\n                    this.aimFocus(camera, aimTarget);\r\n                    // Note: Collab can use these events to guide users attention.\r\n                    // @ts-ignore\r\n                    event.aimTarget = aimTarget;\r\n                    // @ts-ignore\r\n                    event.aimDistance = event.intersectionData.dist;\r\n                    this.emit('aimingFocus', event);\r\n                    camera.emit('aimingFocus', event);\r\n                    // Note: for a single click (no-drag) we don't want to stop the propagation of the event.\r\n                    event.stopPropagation();\r\n                    if (event.pointerType === POINTER_TYPES.mouse)\r\n                        event.preventDefault();\r\n                }\r\n            }\r\n        }\r\n        else if (this.__dragging == 2) {\r\n            if (event.pointerType === POINTER_TYPES.mouse) {\r\n                this.endDrag(event);\r\n                this.emit('movementFinished');\r\n                const viewport = event.viewport;\r\n                viewport.getCamera().emit('movementFinished');\r\n            }\r\n            else if (event.pointerType === POINTER_TYPES.touch) {\r\n                const touchEvent = event;\r\n                const { changedTouches, touches } = touchEvent;\r\n                for (let i = 0; i < changedTouches.length; i++) {\r\n                    this.__endTouch(changedTouches[i]);\r\n                }\r\n                if (Object.keys(this.__ongoingTouches).length == 0) {\r\n                    this.endDrag(event);\r\n                }\r\n                else if (!touches.length) {\r\n                    this.endDrag(event);\r\n                    this.__ongoingTouches = {};\r\n                }\r\n                touchEvent.preventDefault();\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n    /**\r\n     * Causes an event to occur when the mouse pointer is moved into this viewport\r\n     * @param event - The event that occurs.\r\n     */\r\n    onPointerEnter(event) { }\r\n    /**\r\n     * Causes an event to occur when the mouse pointer is moved out of this viewport\r\n     * @param event - The event that occurs.\r\n     */\r\n    onPointerLeave(event) {\r\n        // If the pointer leaves the viewport, then we will no longer receive key up events,\r\n        // so we must immediately disable movement here.\r\n        if (this.__keysPressed.length > 0) {\r\n            this.__keysPressed = [];\r\n            this.__velocity.set(0, 0, 0);\r\n            this.__keyboardMovement = false;\r\n        }\r\n    }\r\n    /**\r\n     * Invoked when the mouse wheel is rolled up or down over an element.\r\n     *\r\n     * @param event - The wheel event that occurs.\r\n     */\r\n    onWheel(event) {\r\n        const viewport = event.viewport;\r\n        const camera = viewport.getCamera();\r\n        const mouseWheelDollySpeed = this.mouseWheelDollySpeedParam.value;\r\n        const modulator = event.shiftKey ? 0.1 : 0.5;\r\n        const xfo = camera.globalXfoParam.value;\r\n        let dir;\r\n        if (!camera.isOrthographic()) {\r\n            if (event.intersectionData != undefined) {\r\n                dir = xfo.tr.subtract(event.intersectionData.intersectionPos);\r\n                dir.normalizeInPlace();\r\n                const viewVec = xfo.inverse().transformVec3(event.intersectionData.intersectionPos);\r\n                camera.setFocalDistance(-viewVec.z);\r\n            }\r\n            else {\r\n                dir = xfo.ori.getZaxis();\r\n            }\r\n        }\r\n        // To normalize mouse wheel speed across vendors and OSs, it is recommended to simply convert scroll value to -1 or 1\r\n        // See here: https://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers\r\n        const steps = 6;\r\n        const direction = event.deltaY < 0 ? -1 : 1;\r\n        const applyMovement = () => {\r\n            const focalDistance = camera.getFocalDistance();\r\n            const zoomDist = focalDistance * this.__mouseWheelMovementDist;\r\n            xfo.tr.addInPlace(dir.scale(zoomDist));\r\n            camera.setFocalDistance(focalDistance + zoomDist);\r\n            camera.globalXfoParam.value = xfo;\r\n            this.__mouseWheelZoomCount++;\r\n            if (this.__mouseWheelZoomCount < steps) {\r\n                this.__mouseWheelZoomId = window.setTimeout(applyMovement, 10);\r\n            }\r\n            else {\r\n                this.__mouseWheelZoomId = -1;\r\n                this.emit('movementFinished');\r\n                camera.emit('movementFinished');\r\n            }\r\n        };\r\n        const applyViewScale = () => {\r\n            const frustumHeight = camera.getFrustumHeight();\r\n            const zoomDist = frustumHeight * this.__mouseWheelMovementDist;\r\n            camera.setFrustumHeight(frustumHeight + zoomDist);\r\n            if (event.intersectionData) {\r\n                const dir = xfo.tr.subtract(event.intersectionData.intersectionPos);\r\n                const zAxis = xfo.ori.getZaxis();\r\n                dir.subtractInPlace(zAxis.scale(dir.dot(zAxis)));\r\n                xfo.tr.addInPlace(dir.scale(zoomDist / (frustumHeight + zoomDist)));\r\n                camera.globalXfoParam.value = xfo;\r\n            }\r\n            this.__mouseWheelZoomCount++;\r\n            if (this.__mouseWheelZoomCount < steps) {\r\n                this.__mouseWheelZoomId = window.setTimeout(applyViewScale, 10);\r\n            }\r\n            else {\r\n                this.__mouseWheelZoomId = -1;\r\n                this.emit('movementFinished');\r\n                camera.emit('movementFinished');\r\n            }\r\n        };\r\n        if (this.__mouseWheelZoomId > 0) {\r\n            // If a new wheel event arrives while the previous is still running, modify the distance\r\n            // and reset.\r\n            this.__mouseWheelMovementDist += (direction * mouseWheelDollySpeed * modulator * 0.5) / steps;\r\n            this.__mouseWheelZoomCount = 0;\r\n        }\r\n        else {\r\n            this.__mouseWheelMovementDist = (direction * mouseWheelDollySpeed * modulator) / steps;\r\n            this.__mouseWheelZoomCount = 0;\r\n            if (camera.isOrthographic()) {\r\n                applyViewScale();\r\n            }\r\n            else {\r\n                applyMovement();\r\n            }\r\n        }\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n    /**\r\n     * The integrateVelocityChange method.\r\n     * @param event - The event value.\r\n     * @private\r\n     */\r\n    integrateVelocityChange(event) {\r\n        const { viewport } = event;\r\n        const camera = viewport.getCamera();\r\n        const time = performance.now();\r\n        if (this.__prevVelocityIntegrationTime > 0) {\r\n            const timeDelta = (time - this.__prevVelocityIntegrationTime) / 1000;\r\n            const speed = this.walkSpeedParam.value;\r\n            // movement.tr = this.__velocity.normalize().scale(speed * timeDelta)\r\n            if (speed > 0.0) {\r\n                // As we move over a terrain, it can be helpful to allow users to walk\r\n                // over surfaces without falling through them. This allows users to look\r\n                // down while walking forwards for example.\r\n                // Calculate where we might be soon\r\n                const movement = new Xfo();\r\n                movement.tr = this.__velocity.normalize().scale(speed * timeDelta);\r\n                const cameraXfo = camera.globalXfoParam.value;\r\n                const newXfo = cameraXfo.multiply(movement);\r\n                const collisionDetection = this.walkModeCollisionDetection.value;\r\n                if (collisionDetection) {\r\n                    // Raycast from 1.5 meter up\r\n                    const headHeight = 1.5;\r\n                    const dist = 1.5;\r\n                    const area = 0.5;\r\n                    const raycastXfo = new Xfo(newXfo.tr);\r\n                    const ray = new Ray(newXfo.tr, new Vec3(0, 0, -1));\r\n                    const results = viewport.getRenderer().raycastCluster(raycastXfo, ray, dist, area, PassType.OPAQUE);\r\n                    if (results.length > 0) {\r\n                        let avgDist = 0;\r\n                        // eslint-disable-next-line guard-for-in\r\n                        results.forEach((result) => {\r\n                            avgDist += result.dist;\r\n                        });\r\n                        avgDist /= results.length;\r\n                        // Snap the movement vector to make the user rest on the ground.\r\n                        newXfo.tr = ray.start.add(ray.dir.scale(avgDist - headHeight));\r\n                    }\r\n                }\r\n                camera.globalXfoParam.value = newXfo;\r\n            }\r\n        }\r\n        this.__prevVelocityIntegrationTime = time;\r\n    }\r\n    /**\r\n     * Invoked when the user is pressing a key on the keyboard.\r\n     *\r\n     * @param event - The keyboard event that occurs.\r\n     * @private\r\n     */\r\n    onKeyDown(event) {\r\n        if (!this.enabledWASDWalkMode)\r\n            return;\r\n        const key = event.key.toLowerCase();\r\n        // Note: onKeyPressed is called initially only once, and then we\r\n        // get a series of calls. Here we ignore subsequent events.\r\n        if (this.__keysPressed.includes(key))\r\n            return;\r\n        switch (key) {\r\n            case 'w':\r\n                this.__velocity.z -= 1.0;\r\n                break;\r\n            case 's':\r\n                this.__velocity.z += 1.0;\r\n                break;\r\n            case 'a':\r\n                this.__velocity.x -= 1.0;\r\n                break;\r\n            case 'd':\r\n                this.__velocity.x += 1.0;\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n        event.stopPropagation();\r\n        this.__keysPressed.push(key);\r\n        if (!this.__keyboardMovement) {\r\n            this.__keyboardMovement = true;\r\n            this.__prevVelocityIntegrationTime = performance.now();\r\n            const animationFrame = () => {\r\n                this.integrateVelocityChange(event);\r\n                if (this.__keyboardMovement) {\r\n                    window.requestAnimationFrame(animationFrame);\r\n                }\r\n            };\r\n            window.requestAnimationFrame(animationFrame);\r\n        }\r\n    }\r\n    /**\r\n     * Invoked when the user releases a key on the keyboard.\r\n     *\r\n     * @param event - The event that occurs.\r\n     */\r\n    onKeyUp(event) {\r\n        const key = event.key.toLowerCase();\r\n        if (!this.__keysPressed.includes(key))\r\n            return;\r\n        switch (key) {\r\n            case 'w':\r\n                this.__velocity.z += 1.0;\r\n                break;\r\n            case 's':\r\n                this.__velocity.z -= 1.0;\r\n                break;\r\n            case 'a':\r\n                this.__velocity.x += 1.0;\r\n                break;\r\n            case 'd':\r\n                this.__velocity.x -= 1.0;\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n        event.stopPropagation();\r\n        const keyIndex = this.__keysPressed.indexOf(key);\r\n        this.__keysPressed.splice(keyIndex, 1);\r\n        if (this.__keysPressed.length == 0)\r\n            this.__keyboardMovement = false;\r\n    }\r\n    // ///////////////////////////////////\r\n    // Touch controls\r\n    /**\r\n     * The __startTouch method.\r\n     * @param touch - The touch value.\r\n     * @private\r\n     */\r\n    __startTouch(touch) {\r\n        this.__ongoingTouches[touch.identifier] = {\r\n            identifier: touch.identifier,\r\n            pos: new Vec2(touch.clientX, touch.clientY),\r\n        };\r\n    }\r\n    /**\r\n     * The __endTouch method.\r\n     * @param touch - The touch value.\r\n     * @private\r\n     */\r\n    __endTouch(touch) {\r\n        // let idx = this.__ongoingTouchIndexById(touch.identifier);\r\n        // this.__ongoingTouches.splice(idx, 1); // remove it; we're done\r\n        delete this.__ongoingTouches[touch.identifier];\r\n    }\r\n    // Touch events\r\n    /**\r\n     * Invoked when the user touches an element on a touch screen.\r\n     *\r\n     * @param event - The touch event that occurs.\r\n     */\r\n    _onTouchStart(event) {\r\n        const touches = event.changedTouches;\r\n        for (let i = 0; i < touches.length; i++) {\r\n            this.__startTouch(touches[i]);\r\n        }\r\n        this.initDrag(event);\r\n    }\r\n    /**\r\n     * Invoked when the user removes his/her finger from the touch pad.\r\n     *\r\n     * @param event - The touch event that occurs.\r\n     */\r\n    onTouchEnd(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const touches = event.changedTouches;\r\n        for (let i = 0; i < touches.length; i++) {\r\n            this.__endTouch(touches[i]);\r\n        }\r\n        if (Object.keys(this.__ongoingTouches).length == 0)\r\n            this.endDrag(event);\r\n    }\r\n    /**\r\n     * Invoked when the touch event gets interrupted.\r\n     *\r\n     * @param event - The touch event that occurs.\r\n     */\r\n    onTouchCancel(event) {\r\n        event.preventDefault();\r\n        const touches = event.touches;\r\n        for (let i = 0; i < touches.length; i++) {\r\n            this.__endTouch(touches[i]);\r\n        }\r\n        if (Object.keys(this.__ongoingTouches).length == 0)\r\n            this.endDrag(event);\r\n    }\r\n    /**\r\n     * Returns a dictionary of support manipulation modes.\r\n     *\r\n     * @param event - The touch event that occurs.\r\n     */\r\n    static get MANIPULATION_MODES() {\r\n        return MANIPULATION_MODES;\r\n    }\r\n}\r\nexport { CameraManipulator };\r\n//# sourceMappingURL=CameraManipulator.js.map","const create3DContext = function (canvas, opt_attribs) {\r\n    let context = null;\r\n    if (opt_attribs.webglContextType != undefined) {\r\n        try {\r\n            context = canvas.getContext(opt_attribs.webglContextType, opt_attribs);\r\n            context.name = opt_attribs.webglContextType;\r\n        }\r\n        catch (e) { }\r\n    }\r\n    else {\r\n        const names = ['webgl2', 'webgl'];\r\n        for (let i = 0; i < names.length; i++) {\r\n            const name = names[i];\r\n            try {\r\n                context = canvas.getContext(name, opt_attribs);\r\n                context.name = name;\r\n            }\r\n            catch (e) { }\r\n            if (context) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (!context) {\r\n        throw new Error('WebGL not supported on your system');\r\n    }\r\n    // context.setupInstancedQuad = setupInstancedQuad;\r\n    // context.bindInstancedQuad = bindInstancedQuad;\r\n    context.sizeInBytes = function (type) {\r\n        switch (type) {\r\n            case this.BYTE:\r\n            case this.UNSIGNED_BYTE:\r\n                return 1;\r\n            case this.SHORT:\r\n            case this.UNSIGNED_SHORT:\r\n                return 2;\r\n            case this.INT:\r\n            case this.UNSIGNED_INT:\r\n            case this.FLOAT:\r\n                return 4;\r\n            default:\r\n                throw new Error('unknown type');\r\n        }\r\n    };\r\n    if (context.name == 'webgl2') {\r\n        context.floatTexturesSupported = true;\r\n        context.__ext_float_linear = context.getExtension('OES_texture_float_linear');\r\n        context.__ext_texture_half_float_linear = context.getExtension('OES_texture_half_float_linear');\r\n        // Needed for rendering to float textures in an Fbo\r\n        context.__ext_color_buffer_float = context.getExtension('EXT_color_buffer_float');\r\n        // Safari does not support uploading HALF_FLOAT data into the GPU.\r\n    }\r\n    else {\r\n        context.__ext_float = context.getExtension('OES_texture_float');\r\n        if (context.__ext_float) {\r\n            context.floatTexturesSupported = true;\r\n            context.__ext_float_linear = context.getExtension('OES_texture_float_linear');\r\n        }\r\n        else {\r\n            console.warn('OES_texture_float is not available');\r\n        }\r\n        context.__ext_half_float = context.getExtension('OES_texture_half_float');\r\n        if (context.__ext_half_float) {\r\n            context.HALF_FLOAT = context.__ext_half_float.HALF_FLOAT_OES;\r\n            context.floatTexturesSupported = true;\r\n            context.__ext_texture_half_float_linear = context.getExtension('OES_texture_half_float_linear');\r\n        }\r\n        // Needed for rendering to flat textures in an Fbo\r\n        context.__ext_color_buffer_float = context.getExtension('EXT_color_buffer_float');\r\n        context.__ext_std_derivatives = context.getExtension('OES_standard_derivatives');\r\n        // context.__ext_sRGB = context.getExtension(\"EXT_sRGB\");\r\n        // context.__ext_draw_buffers = context.getExtension(\"WEBGL_draw_buffers\");\r\n        context.__ext_Inst = context.getExtension('ANGLE_instanced_arrays');\r\n        if (context.__ext_Inst) {\r\n            context.vertexAttribDivisor = context.__ext_Inst.vertexAttribDivisorANGLE.bind(context.__ext_Inst);\r\n            context.drawArraysInstanced = context.__ext_Inst.drawArraysInstancedANGLE.bind(context.__ext_Inst);\r\n            context.drawElementsInstanced = context.__ext_Inst.drawElementsInstancedANGLE.bind(context.__ext_Inst);\r\n        }\r\n        {\r\n            // Note: OES_vertex_array_object is now supported on Safari.\r\n            context.__ext_VAO = context.getExtension('OES_vertex_array_object');\r\n            if (context.__ext_VAO) {\r\n                context.createVertexArray = context.__ext_VAO.createVertexArrayOES.bind(context.__ext_VAO);\r\n                context.deleteVertexArray = context.__ext_VAO.deleteVertexArrayOES.bind(context.__ext_VAO);\r\n                context.bindVertexArray = context.__ext_VAO.bindVertexArrayOES.bind(context.__ext_VAO);\r\n            }\r\n        }\r\n        context.__ext_element_index_uint = context.getExtension('OES_element_index_uint');\r\n        context.__ext_WEBGL_depth_texture = context.getExtension('WEBGL_depth_texture'); // Or browser-appropriate prefix\r\n        if (context.__ext_WEBGL_depth_texture) {\r\n            context.UNSIGNED_INT_24_8 = context.__ext_WEBGL_depth_texture.UNSIGNED_INT_24_8_WEBGL;\r\n        }\r\n        context.DRAW_FRAMEBUFFER = context.FRAMEBUFFER;\r\n    }\r\n    context.__ext_frag_depth = context.getExtension('EXT_frag_depth');\r\n    context.setupInstancedQuad = function () {\r\n        // ////////////////////////////\r\n        // Generate a buffer for drawing a full screen quad.\r\n        const vertexIDs = new Float32Array([0.0, 1.0, 2.0, 3.0]);\r\n        const indices = new Uint16Array([0, 1, 2, 2, 1, 3]);\r\n        this.__quadVertexIdsBuffer = this.createBuffer();\r\n        this.bindBuffer(this.ARRAY_BUFFER, this.__quadVertexIdsBuffer);\r\n        this.bufferData(this.ARRAY_BUFFER, vertexIDs, this.STATIC_DRAW);\r\n        this.__quadIndexBuffer = this.createBuffer();\r\n        this.bindBuffer(this.ELEMENT_ARRAY_BUFFER, this.__quadIndexBuffer);\r\n        this.bufferData(this.ELEMENT_ARRAY_BUFFER, indices, this.STATIC_DRAW);\r\n        this.__quadattrbuffers = {\r\n            vertexIDs: {\r\n                buffer: this.__quadVertexIdsBuffer,\r\n                dataType: 'Float32',\r\n                dimension: 1,\r\n                count: vertexIDs.length,\r\n                shared: true /*This buffer is shared between geoms. do not destroy */,\r\n            },\r\n        };\r\n    };\r\n    context.drawQuad = function () {\r\n        this.drawElements(this.TRIANGLES, 6, this.UNSIGNED_SHORT, 0);\r\n    };\r\n    return context;\r\n};\r\nexport { create3DContext };\r\n//# sourceMappingURL=GLContext.js.map","const processTextureParams = function (gl, params) {\r\n    if (!params.width || !params.height) {\r\n        if (!params.width)\r\n            throw new Error(`Invalid texture params. 'width' not provided`);\r\n        if (!params.height)\r\n            throw new Error(`Invalid texture params. 'height' not provided`);\r\n    }\r\n    const maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n    if (params.width <= 0 || params.width > maxSize || params.height <= 0 || params.height > maxSize) {\r\n        throw new Error('GLTextureParams: Invalid texture size. width:' +\r\n            params.width +\r\n            ' height:' +\r\n            params.height +\r\n            ' maxSize:' +\r\n            maxSize);\r\n    }\r\n    const result = {\r\n        width: params.width,\r\n        height: params.height,\r\n    };\r\n    const getGLConst = (nameOrValue) => {\r\n        return isNaN(nameOrValue) ? gl[nameOrValue] : nameOrValue;\r\n    };\r\n    const processParam = (name, defaultValue) => {\r\n        if (name in params)\r\n            result[name] = getGLConst(params[name]);\r\n        else if (defaultValue)\r\n            result[name] = getGLConst(defaultValue);\r\n    };\r\n    processParam('format');\r\n    processParam('internalFormat', result.format);\r\n    processParam('type', gl.UNSIGNED_BYTE);\r\n    processParam('minFilter', params.filter ? params.filter : gl.LINEAR);\r\n    processParam('magFilter', params.filter ? params.filter : gl.LINEAR);\r\n    processParam('wrapS', params.wrap ? params.wrap : gl.CLAMP_TO_EDGE);\r\n    processParam('wrapT', params.wrap ? params.wrap : gl.CLAMP_TO_EDGE);\r\n    processParam('flipY', false);\r\n    processParam('mipMapped', false);\r\n    processParam('depthInternalFormat');\r\n    processParam('depthFormat');\r\n    processParam('depthType');\r\n    // https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml\r\n    if (result.format == gl.FLOAT) {\r\n        if (gl.name == 'webgl2') {\r\n            if (result.filter == gl.LINEAR && !gl.__ext_float_linear) {\r\n                console.warn('Floating point texture filtering not supported on result device');\r\n                result.filter = gl.NEAREST;\r\n            }\r\n        }\r\n        else {\r\n            if (gl.__ext_float) {\r\n                if (result.filter == gl.LINEAR && !gl.__ext_float_linear) {\r\n                    console.warn('Floating point texture filtering not supported on result device');\r\n                    result.filter = gl.NEAREST;\r\n                }\r\n            }\r\n            else {\r\n                if (gl.__ext_half_float) {\r\n                    result.format = gl.HALF_FLOAT;\r\n                    if (result.filter == gl.LINEAR && !gl.__ext_texture_half_float_linear) {\r\n                        console.warn('Half Float texture filtering not supported on result device');\r\n                        result.filter = gl.NEAREST;\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('OES_texture_half_float is not available');\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else if (result.format == gl.HALF_FLOAT) {\r\n        if (gl.name == 'webgl2') {\r\n            // Half load linear filtering appears to be supported even without the extension.\r\n            // if (result.filter == gl.LINEAR && !gl.__ext_texture_half_float_linear) {\r\n            //     console.warn('Floating point texture filtering not supported on result device');\r\n            //     result.filter = 'NEAREST';\r\n            // }\r\n        }\r\n        else {\r\n            if (gl.__ext_half_float) {\r\n                if (result.filter == gl.LINEAR && !gl.__ext_texture_half_float_linear) {\r\n                    console.warn('Half Float texture filtering not supported on result device');\r\n                    result.filter = gl.NEAREST;\r\n                }\r\n            }\r\n            else\r\n                throw new Error('OES_texture_half_float is not available');\r\n            if (result.channels == gl.RGB) {\r\n                throw new Error('OES_texture_half_float onlysupports RGBA textures');\r\n            }\r\n        }\r\n    }\r\n    else if (result.format == 'sRGB') {\r\n        if (!gl.__ext_sRGB)\r\n            throw new Error('EXT_sRGB is not available');\r\n    }\r\n    // ////////////////////////////////////////////////////\r\n    // Format ... InternalFormat combos.\r\n    // Setup the correct combos.\r\n    // the proper texture format combination can be found here\r\n    // https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml\r\n    // Determine the internal format from mthe format and type.\r\n    if (result.format != undefined && gl.name == 'webgl2' && result.internalFormat == result.format) {\r\n        if (result.type == gl.FLOAT) {\r\n            if (result.format == gl.RED) {\r\n                result.internalFormat = gl.R32F;\r\n            }\r\n            else if (result.format == gl.RG) {\r\n                result.internalFormat = gl.RG32F;\r\n            }\r\n            else if (result.format == gl.RGB) {\r\n                result.internalFormat = gl.RGB32F;\r\n            }\r\n            else if (result.format == gl.RGBA) {\r\n                result.internalFormat = gl.RGBA32F;\r\n            }\r\n        }\r\n        else if (result.type == gl.HALF_FLOAT) {\r\n            if (result.format == gl.RED) {\r\n                result.internalFormat = gl.R16F;\r\n            }\r\n            else if (result.format == gl.RGB) {\r\n                result.internalFormat = gl.RGB16F;\r\n            }\r\n            else if (result.format == gl.RGBA) {\r\n                result.internalFormat = gl.RGBA16F;\r\n            }\r\n        }\r\n        else if (result.type == gl.UNSIGNED_BYTE) {\r\n            if (result.format == gl.RED) {\r\n                result.internalFormat = gl.R8;\r\n            }\r\n            if (result.format == gl.RGB) {\r\n                result.internalFormat = gl.RGB8;\r\n            }\r\n            else if (result.format == gl.RGBA) {\r\n                result.internalFormat = gl.RGBA8;\r\n            }\r\n        }\r\n    }\r\n    if (result.depthFormat != undefined) {\r\n        if (gl.name == 'webgl2') {\r\n            if (result.depthType == gl.UNSIGNED_SHORT) {\r\n                result.depthInternalFormat = gl.DEPTH_COMPONENT16;\r\n            }\r\n            else if (result.depthType == gl.UNSIGNED_INT) {\r\n                result.depthInternalFormat = gl.UNSIGNED_INT;\r\n            }\r\n        }\r\n        else {\r\n            result.depthInternalFormat = result.depthFormat;\r\n        }\r\n    }\r\n    return result;\r\n};\r\nexport { processTextureParams };\r\n//# sourceMappingURL=processTextureParams.js.map","import { BaseImage, RefCounted } from '../SceneTree/index';\r\nimport { ResizedEvent } from '../Utilities/Events/ResizedEvent';\r\nimport { MathFunctions } from '../Utilities/MathFunctions';\r\nimport { processTextureParams } from './processTextureParams';\r\n/**\r\n * Represents a texture that contains 2-dimensional images.\r\n * Images have width and height, but no depth.\r\n *\r\n * @extends RefCounted\r\n */\r\nclass GLTexture2D extends RefCounted {\r\n    /**\r\n     * Create a GL texture 2D.\r\n     *\r\n     * @param gl - The gl value.\r\n     * @param params - The params value.\r\n     */\r\n    constructor(gl, params) {\r\n        super();\r\n        this.__image = null;\r\n        this.__internalFormat = 0;\r\n        this.__type = 0;\r\n        this.__format = 0;\r\n        this.__wrapParam = 0;\r\n        this.params = {};\r\n        this.__minFilter = 0;\r\n        this.__magFilter = 0;\r\n        this.__wrapS = 0;\r\n        this.__wrapT = 0;\r\n        this.__flipY = false;\r\n        this.__mipMapped = false;\r\n        this.invert = false;\r\n        this.alphaFromLuminance = false;\r\n        this.__gltex = null;\r\n        this.__typeParam = '';\r\n        this.__formatParam = '';\r\n        this.__gl = gl;\r\n        this.ready = false;\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.textureType = 1; // Default 2d 24bit texture image texture. No alpha.\r\n        this.textureDesc = [0, 0, 0, 0]; // To be populated by derived classes.\r\n        this.__loaded = false;\r\n        this.__bound = false;\r\n        if (params != undefined) {\r\n            if (params instanceof BaseImage) {\r\n                this.__image = params;\r\n                this.__image.setMetadata('gltexture', this);\r\n                const imageUpdated = () => {\r\n                    // this.bufferData(data);\r\n                    const params = this.__image.getParams();\r\n                    const width = params.width;\r\n                    const height = params.height;\r\n                    const data = params.data;\r\n                    this.bufferData(data, width, height);\r\n                };\r\n                this.__image.on('updated', imageUpdated);\r\n                if (this.__image.isLoaded()) {\r\n                    this.configure(this.__image.getParams());\r\n                }\r\n                else {\r\n                    this.__image.on('loaded', () => {\r\n                        this.configure(this.__image.getParams());\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                this.configure(params);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns the loaded status of the 2D Texture\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    isLoaded() {\r\n        return this.__loaded;\r\n    }\r\n    /**\r\n     * Returns the `BaseImage` of the GL Texture\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getImage() {\r\n        return this.__image;\r\n    }\r\n    /**\r\n     * Returns the specified value of the color components in the texture.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getInternalFormat() {\r\n        return this.__internalFormat;\r\n    }\r\n    /**\r\n     * Returns the value of the specified data type of the texel data.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getType() {\r\n        return this.__type;\r\n    }\r\n    /**\r\n     * Returns the value of the specified texel data. It must be the same as the `internalFormat`\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getFormat() {\r\n        return this.__format;\r\n    }\r\n    /**\r\n     * Returns the value of the specified wrapping function for texture coordinate\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getWrap() {\r\n        return this.__wrapParam;\r\n    }\r\n    /**\r\n     * Returns the value of the specified binding point.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getMipMapped() {\r\n        return this.__mipMapped;\r\n    }\r\n    /**\r\n     * Builds the GLTexture2D using the specified parameters object.\r\n     * Parameters must have the `BaseImage` properties structure.\r\n     *\r\n     * @param params - The params value.\r\n     *\r\n     * @param emit - The emit value.\r\n     */\r\n    configure(params) {\r\n        const gl = this.__gl;\r\n        const p = processTextureParams(gl, params); // TODO: check method\r\n        this.params = p;\r\n        this.__format = p.format;\r\n        this.__internalFormat = p.internalFormat;\r\n        this.__type = p.type;\r\n        this.__minFilter = p.minFilter;\r\n        this.__magFilter = p.magFilter;\r\n        this.__wrapS = p.wrapS;\r\n        this.__wrapT = p.wrapT;\r\n        this.__flipY = 'flipY' in params ? params.flipY : false;\r\n        this.__mipMapped = 'mipMapped' in params ? params.mipMapped : false;\r\n        this.invert = 'invert' in params ? params.invert : false;\r\n        this.alphaFromLuminance = 'alphaFromLuminance' in params ? params.alphaFromLuminance : false;\r\n        this.textureType = 1; // Default 2d 8 bit texture image texture.\r\n        this.textureDesc[0] = this.width;\r\n        this.textureDesc[1] = this.height;\r\n        // Detect an 8 bit image with an alpha channel.\r\n        if (this.textureType == 1 && this.__format == gl.RGBA) {\r\n            this.textureType = 2; // 32bit BPP image.\r\n        }\r\n        if (this.__gltex) {\r\n            gl.deleteTexture(this.__gltex);\r\n        }\r\n        this.__gltex = gl.createTexture();\r\n        this.__updateGLTexParams();\r\n        const width = p.width;\r\n        const height = p.height;\r\n        const data = params.data;\r\n        if (data) {\r\n            this.bufferData(data, width, height, false, false);\r\n        }\r\n        else {\r\n            this.resize(width, height, false, false);\r\n        }\r\n        if (!this.__loaded) {\r\n            this.emit('ready');\r\n            this.__loaded = true;\r\n        }\r\n    }\r\n    /**\r\n     * The __updateGLTexParams method.\r\n     * @private\r\n     */\r\n    __updateGLTexParams() {\r\n        const gl = this.__gl;\r\n        // Load the image into the GPU for rendering.\r\n        gl.bindTexture(gl.TEXTURE_2D, this.__gltex);\r\n        // This parameter caused all images to be blank. Flipping in the pixel shader instead(by default)\r\n        // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.__minFilter);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.__magFilter);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this.__wrapS);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this.__wrapT);\r\n    }\r\n    /**\r\n     * Initializes and creates the buffer of the object's data store.\r\n     *\r\n     * @param data - The data value.\r\n     * @param width - The width value.\r\n     * @param height - The height value.\r\n     * @param bind - The bind value.\r\n     * @param emit - The emit value.\r\n     */\r\n    // TODO: type Image doesn't exist.\r\n    bufferData(data, width = -1, height = -1, bind = true, emit = true) {\r\n        const gl = this.__gl;\r\n        if (bind) {\r\n            gl.bindTexture(gl.TEXTURE_2D, this.__gltex);\r\n        }\r\n        if (data != undefined) {\r\n            if (data instanceof Image ||\r\n                data instanceof ImageData ||\r\n                data instanceof HTMLCanvasElement ||\r\n                data instanceof HTMLImageElement ||\r\n                data instanceof HTMLVideoElement) {\r\n                gl.texImage2D(gl.TEXTURE_2D, 0, this.__internalFormat, this.__format, this.__type, data);\r\n                this.width = data.width;\r\n                this.height = data.height;\r\n            }\r\n            else {\r\n                // if wieght and height not specified, assume they stay the same.\r\n                if (width == -1) {\r\n                    width = this.width;\r\n                }\r\n                if (height == -1) {\r\n                    height = this.height;\r\n                }\r\n                // Note: data images must have an even size width/height to load correctly.\r\n                // this doesn't mean they must be pot textures...\r\n                const numPixels = width * height;\r\n                let numChannels;\r\n                switch (this.__format) {\r\n                    case gl.RED:\r\n                    case gl.RED_INTEGER:\r\n                    case gl.ALPHA:\r\n                    case gl.LUMINANCE:\r\n                    case gl.LUMINANCE_ALPHA:\r\n                        numChannels = 1;\r\n                        break;\r\n                    case gl.RG:\r\n                        numChannels = 2;\r\n                        // Note: when uploading UNSIGNED_BYTE  RG textures, I received the following error: ArrayBuffer not big enough for request\r\n                        // This answer on stack overflow lead me to this fix.\r\n                        // https://stackoverflow.com/questions/42789896/webgl-error-arraybuffer-not-big-enough-for-request-in-case-of-gl-luminance\r\n                        // The same fix maybe need to be applied to single channel textures above, although I have not seen the error.\r\n                        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 2);\r\n                        break;\r\n                    case gl.RGB:\r\n                        numChannels = 3;\r\n                        break;\r\n                    case gl.RGBA:\r\n                        numChannels = 4;\r\n                        break;\r\n                    default:\r\n                        console.warn('Reaching default case: numChannels:=1');\r\n                        numChannels = 1;\r\n                        break;\r\n                }\r\n                if (data.length != numPixels * numChannels) {\r\n                    console.warn('Invalid data for Image width:' +\r\n                        width +\r\n                        ' height:' +\r\n                        height +\r\n                        ' format:' +\r\n                        this.__formatParam +\r\n                        ' type:' +\r\n                        this.__typeParam +\r\n                        ' Data Length:' +\r\n                        data.length +\r\n                        ' Expected:' +\r\n                        numPixels * numChannels);\r\n                }\r\n                if (this.__type == gl.HALF_FLOAT && data instanceof Float32Array) {\r\n                    data = MathFunctions.convertFloat32ArrayToUInt16Array(data);\r\n                }\r\n                if (gl.name == 'webgl2') {\r\n                    gl.texImage2D(gl.TEXTURE_2D, 0, this.__internalFormat, width, height, 0, this.__format, this.__type, data, 0);\r\n                }\r\n                else {\r\n                    gl.texImage2D(gl.TEXTURE_2D, 0, this.__internalFormat, width, height, 0, this.__format, this.__type, data);\r\n                }\r\n                // These values may not have changed....\r\n                this.width = width;\r\n                this.height = height;\r\n            }\r\n            if (this.__mipMapped) {\r\n                gl.generateMipmap(gl.TEXTURE_2D);\r\n            }\r\n        }\r\n        else {\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, this.__internalFormat, this.width, this.height, 0, this.__format, this.__type, null);\r\n            // simply resize the buffer.\r\n            this.width = width;\r\n            this.height = height;\r\n        }\r\n        if (emit) {\r\n            this.emit('updated');\r\n        }\r\n    }\r\n    /**\r\n     * Clears the buffers to preset values\r\n     */\r\n    clear() {\r\n        const gl = this.__gl;\r\n        const numPixels = this.width * this.height;\r\n        let numChannels;\r\n        switch (this.__format) {\r\n            case gl.RED:\r\n            case gl.RED_INTEGER:\r\n            case gl.ALPHA:\r\n            case gl.LUMINANCE:\r\n            case gl.LUMINANCE_ALPHA:\r\n                numChannels = 1;\r\n                break;\r\n            case gl.RG:\r\n                numChannels = 2;\r\n                break;\r\n            case gl.RGB:\r\n                numChannels = 3;\r\n                break;\r\n            case gl.RGBA:\r\n                numChannels = 4;\r\n                break;\r\n            default:\r\n                throw new Error('Invalid Format');\r\n        }\r\n        let data;\r\n        switch (this.__type) {\r\n            case gl.UNSIGNED_BYTE:\r\n                data = new Uint8Array(numPixels * numChannels);\r\n                break;\r\n            case gl.HALF_FLOAT:\r\n                data = new Uint16Array(numPixels * numChannels);\r\n                break;\r\n            case gl.FLOAT:\r\n                data = new Float32Array(numPixels * numChannels);\r\n                break;\r\n            default:\r\n                throw new Error('Invalid Type');\r\n        }\r\n        if (gl.name == 'webgl2') {\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, this.__internalFormat, this.width, this.height, 0, this.__format, this.__type, data, 0);\r\n        }\r\n        else {\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, this.__internalFormat, this.width, this.height, 0, this.__format, this.__type, data);\r\n        }\r\n    }\r\n    /**\r\n     * The resize method.\r\n     * @param width - The width value.\r\n     * @param height - The height value.\r\n     * @param preserveData - The preserveData value.\r\n     * @param emit - The emit value.\r\n     */\r\n    resize(width, height, preserveData = false, emit = true) {\r\n        const gl = this.__gl;\r\n        const sizeChanged = this.width != width || this.height != height;\r\n        if (sizeChanged) {\r\n            const maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n            if (width < 0 || width > maxSize || height < 0 || height > maxSize) {\r\n                throw new Error('gl-texture2d: Invalid texture size. width:' + width + ' height:' + height + ' maxSize:' + maxSize);\r\n            }\r\n            if (preserveData) {\r\n                const gltex = gl.createTexture();\r\n                gl.bindTexture(gl.TEXTURE_2D, gltex);\r\n                gl.texImage2D(gl.TEXTURE_2D, 0, this.__internalFormat, width, height, 0, this.__format, this.__type, null);\r\n                const fbo = gl.createFramebuffer();\r\n                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\r\n                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.__gltex, 0);\r\n                gl.bindTexture(gl.TEXTURE_2D, gltex); // Do we need this line?\r\n                gl.copyTexImage2D(gl.TEXTURE_2D, 0, this.__internalFormat, 0, 0, this.width, this.height, 0);\r\n                gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n                gl.deleteFramebuffer(fbo);\r\n                this.__gl.deleteTexture(this.__gltex);\r\n                this.__gltex = gltex;\r\n                this.__updateGLTexParams();\r\n            }\r\n            else {\r\n                if (this.width > 0 && this.height > 0) {\r\n                    // this destroys the texture. I am sure this is a memory leak here, but can't figure out what to do to fix it.\r\n                    // this.__gl.deleteTexture(this.__gltex)\r\n                    // this.__gltex = gl.createTexture()\r\n                }\r\n                gl.bindTexture(gl.TEXTURE_2D, this.__gltex);\r\n                gl.texImage2D(gl.TEXTURE_2D, 0, this.__internalFormat, width, height, 0, this.__format, this.__type, null);\r\n            }\r\n            this.width = width;\r\n            this.height = height;\r\n            if (emit) {\r\n                const event = new ResizedEvent(width, height);\r\n                this.emit('resized', event);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Upload data for the image to the GPU.\r\n     *\r\n     * @param dataArray - The dataArray value.\r\n     * @param width - The width value\r\n     * @param height - The height value\r\n     * @param offsetX - The offsetX value\r\n     * @param offsetY - The offsetY value\r\n     * @param bind - The bind value\r\n     */\r\n    populate(dataArray, width, height, offsetX = 0, offsetY = 0, bind = true) {\r\n        const gl = this.__gl;\r\n        if (bind)\r\n            gl.bindTexture(gl.TEXTURE_2D, this.__gltex);\r\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, offsetX, offsetY, width, height, this.__format, this.__type, dataArray);\r\n    }\r\n    /**\r\n     * Returns the `width`(Index 0) and the `height`(Index 1) of the GL Texture.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getSize() {\r\n        return [this.width, this.height];\r\n    }\r\n    /**\r\n     * Returns the value of the WebGLTexture value\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    get glTex() {\r\n        return this.__gltex;\r\n    }\r\n    /**\r\n     * Returns the value of the WebGLTexture value\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getTexHdl() {\r\n        return this.__gltex;\r\n    }\r\n    /**\r\n     * The preBind method.\r\n     * @param unif - The unif value.\r\n     * @param unifs - The unifs value.\r\n     * @return - The return value.\r\n     */\r\n    preBind(unif, unifs) {\r\n        return {\r\n            textureTypeUnif: unifs[unif.name + 'Type'],\r\n            textureDescUnif: unifs[unif.name + 'Desc'],\r\n        };\r\n    }\r\n    /**\r\n     * Binds Texture to the Uniform attribute.\r\n     *\r\n     * @param renderstate - The renderstate value.\r\n     * @param unif - The unif value.\r\n     * @param bindings - The bindings value.\r\n     * @return - The return value.\r\n     */\r\n    bindToUniform(renderstate, unif, bindings) {\r\n        if (!this.__loaded) {\r\n            return false;\r\n        }\r\n        if (!this.__gltex) {\r\n            throw new Error('Unable to bind non-initialized or deleted texture.');\r\n        }\r\n        const unit = renderstate.boundTextures++;\r\n        const gl = this.__gl;\r\n        gl.activeTexture(gl.TEXTURE0 + unit);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.__gltex);\r\n        gl.uniform1i(unif.location, unit);\r\n        if (bindings) {\r\n            if (bindings.textureTypeUnif) {\r\n                gl.uniform1i(bindings.textureTypeUnif.location, this.textureType);\r\n            }\r\n            if (bindings.textureDescUnif) {\r\n                gl.uniform4fv(bindings.textureDescUnif.location, this.textureDesc);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() {\r\n        super.destroy();\r\n        if (this.__image) {\r\n            this.__image.setMetadata('gltexture', undefined);\r\n        }\r\n        this.__gl.deleteTexture(this.__gltex);\r\n        this.__gltex = null;\r\n    }\r\n}\r\nexport { GLTexture2D };\r\n//# sourceMappingURL=GLTexture2D.js.map","import { glslTypes } from './GLSLConstants';\r\nlet GlslTypes = glslTypes;\r\n/*\r\n  regex variables\r\n*/\r\nconst WHITESPACE_RE = /\\s+/;\r\n/** Class representing a shader library.\r\n * @private\r\n */\r\nclass ShaderLibrary {\r\n    /**\r\n     * Create a shader library.\r\n     */\r\n    constructor() {\r\n        this.__shaderModules = {};\r\n        this.materialTemplates = {};\r\n    }\r\n    /**\r\n     * The setShaderModule method. Shader must be set before parsing.\r\n     * @param shaderName - The shader name.\r\n     * @param shader - The unparsed shader GLSL.\r\n     */\r\n    setShaderModule(shaderName, shader) {\r\n        if (!(shaderName in this.__shaderModules)) {\r\n            this.__shaderModules[shaderName] = shader;\r\n            return;\r\n        }\r\n        // note: this code does not update shader snippets, whatever is first, stays.\r\n        // important for creating tests, since shaderLibrary is global.\r\n    }\r\n    /**\r\n     * The getShaderModule method. Access specific uniforms, attributes of a particular module.\r\n     * @param shaderName - The shader name.\r\n     * @return - The return value.\r\n     */\r\n    getShaderModule(shaderName) {\r\n        return this.__shaderModules[shaderName];\r\n    }\r\n    /**\r\n     * The getShaderModuleNames method.\r\n     * @return - The return value.\r\n     */\r\n    getShaderModuleNames() {\r\n        const shaderNames = [];\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const shaderName in this.__shaderModules)\r\n            shaderNames.push(shaderName);\r\n        return shaderNames;\r\n    }\r\n    /**\r\n     * The parseAttr\r\n     * @param parts - parts\r\n     * @param instanced - instanced\r\n     * @param result - result object to store parsed data\r\n     */\r\n    parseAttr(parts, instanced, result, line) {\r\n        // see if type is valid\r\n        if (!(parts[1] in GlslTypes)) {\r\n            throw new Error('Error while parsing \\nType not recognized:' + parts[1]);\r\n        }\r\n        const name = parts[2].slice(0, parts[2].length - 1);\r\n        result.attributes[name] = {\r\n            type: GlslTypes[parts[1]],\r\n            instanced: instanced,\r\n        };\r\n        // console.log('attributes:' + name + \":\" + parts[1]);\r\n        if (parts[1] == 'color') {\r\n            parts[1] = 'vec4';\r\n            line = parts.join(' ');\r\n        }\r\n    }\r\n    /**\r\n     * The handleImport method -- takes the includeFile and if it exists, adds the parsed glsl, uniforms, and attributes to the result, recursively.\r\n     * @param result - result object that stores the glsl, attribute, uniform\r\n     * @param shaderName - shaderName\r\n     * @param includeFile - file name of the shader snippet/module\r\n     * @param includes - keep track of what was included\r\n     * @param lineNumber - keep track of what line we're on\r\n     */\r\n    handleImport(result, shaderName, includeFile, includes, lineNumber) {\r\n        if (includeFile in this.__shaderModules) {\r\n            const includedGLSL = this.__shaderModules[includeFile]; // get glsl snippet code to add\r\n            if (!includedGLSL)\r\n                throw Error('snippet not loaded or does not exists!');\r\n            // recursively includes glsl snippets\r\n            const reursiveResult = this.parseShaderHelper(shaderName, includedGLSL, includes, lineNumber);\r\n            // adding code + snippet glsl, if not already added.\r\n            includes.push(includeFile); // keep track of imports\r\n            result.glsl = result.glsl + reursiveResult.glsl;\r\n            result.numLines += reursiveResult.numLines;\r\n            result.uniforms = Object.assign(Object.assign({}, result.uniforms), reursiveResult.uniforms);\r\n            result.attributes = Object.assign(Object.assign({}, result.attributes), reursiveResult.attributes);\r\n            // console.log('\\n glsl snippet: ' + reursiveResult.glsl) // print out snippets\r\n        }\r\n        else {\r\n            // throw new Error(shaderName + ': SNIPPET NOT FOUND: ' + includeFile)\r\n            console.log('shaderName: ' + shaderName);\r\n            console.log('SNIPPET NOT FOUND: ' + includeFile);\r\n        }\r\n    }\r\n    /**\r\n     * The parseShader method.\r\n     * @param shaderName - The shader name.\r\n     * @param glsl - The glsl param.\r\n     * @return - returns the 'result' object\r\n     */\r\n    parseShader(shaderName, glsl) {\r\n        return this.parseShaderHelper(shaderName, glsl, [], 0);\r\n    }\r\n    /**\r\n     * The parseShader recursive helper method\r\n     * @param shaderName - The shader name.\r\n     * @param glsl - The glsl param.\r\n     * @param includes - keep track of what was included\r\n     * @param lineNumber - keep track of what line we're on\r\n     * @return - The return value.\r\n     */\r\n    parseShaderHelper(shaderName, glsl, includes, lineNumber) {\r\n        // console.log('parseShader:' + shaderName)\r\n        const addLine = (result, line) => {\r\n            result.glsl = result.glsl + line + '\\n';\r\n            result.numLines++;\r\n        };\r\n        includes.push(shaderName);\r\n        // result that is returned\r\n        const result = {\r\n            glsl: '',\r\n            numLines: 0,\r\n            uniforms: {},\r\n            attributes: {},\r\n        };\r\n        // go through each line of a GLSL file\r\n        glsl = glsl.toString(); // TODO: remove ideally, this cast is here just to make jest pass\r\n        const lines = glsl.split('\\n'); // break up code by newlines\r\n        for (let i = 0; i < lines.length; i++) {\r\n            let line = lines[i];\r\n            const trimmedLine = line.trim();\r\n            // Get first token of a statement and switch\r\n            const parts = trimmedLine.split(WHITESPACE_RE);\r\n            const firstToken = parts[0];\r\n            switch (firstToken) {\r\n                // TODO: deprecated - remove eventually\r\n                case '<%include':\r\n                case 'import': {\r\n                    // get the contents between quotes and then if there are '/' get the filename\r\n                    const includeFile = trimmedLine.split(/'|\"|`/)[1].split('/').pop(); // can be undefined\r\n                    if (!includes.includes(includeFile)) {\r\n                        this.handleImport(result, shaderName, includeFile, includes, lineNumber);\r\n                    }\r\n                    else {\r\n                        // console.log(shaderName + ' already imported: ' + includeFile)\r\n                    }\r\n                    break;\r\n                }\r\n                case 'attribute': {\r\n                    this.parseAttr(parts, false, result, line);\r\n                    addLine(result, line);\r\n                    break;\r\n                }\r\n                case 'instancedattribute': {\r\n                    this.parseAttr(parts, true, result, line);\r\n                    parts[0] = 'attribute';\r\n                    line = parts.join(' ');\r\n                    addLine(result, line);\r\n                    break;\r\n                }\r\n                case 'uniform': {\r\n                    // When a precision qualifier exists in the uniform definition.\r\n                    // e.g. uniform highp int instancesTextureSize;\r\n                    let typeIndex = 1;\r\n                    if (parts.length == 4)\r\n                        typeIndex = 2;\r\n                    const typeName = parts[typeIndex];\r\n                    if (!(typeName in GlslTypes))\r\n                        throw new Error('Error while parsing :' + shaderName + ' \\nType not recognized:' + parts[1]);\r\n                    const name = parts[typeIndex + 1].slice(0, parts[typeIndex + 1].length - 1);\r\n                    if (name.includes('[')) {\r\n                        // Strip off the square brackets.\r\n                        result.uniforms[name.substring(0, name.indexOf('['))] = GlslTypes[typeName];\r\n                    }\r\n                    else {\r\n                        result.uniforms[name] = GlslTypes[typeName];\r\n                    }\r\n                    if (result.uniforms[name] == 'struct') {\r\n                        console.log(parts);\r\n                    }\r\n                    if (parts[1] == 'color') {\r\n                        parts[1] = 'vec4';\r\n                        line = parts.join(' ');\r\n                    }\r\n                    addLine(result, line);\r\n                    break;\r\n                }\r\n                // TODO: structs disabled in ts-migration\r\n                // case 'struct': {\r\n                //   let membersStr = ''\r\n                //   if (trimmedLine.includes('}')) {\r\n                //     membersStr = trimmedLine.substring(trimmedLine.indexOf('{') + 1, trimmedLine.indexOf('}') - 1)\r\n                //   } else {\r\n                //     i++\r\n                //     while (true) {\r\n                //       line += lines[i] + '\\n'\r\n                //       membersStr += line.trim()\r\n                //       i++\r\n                //       if (membersStr.includes('}')) break\r\n                //     }\r\n                //   }\r\n                //   const structMembers = membersStr.substring(membersStr.indexOf('{') + 1, membersStr.indexOf('}') - 1)\r\n                //   const members = structMembers.split(';')\r\n                //   const structDesc = []\r\n                //   for (const member of members) {\r\n                //     if (member.length == 0) continue\r\n                //     const memberparts = member.trim().split(WHITESPACE_RE)\r\n                //     structDesc.push({\r\n                //       name: memberparts[1],\r\n                //       type: GlslTypes[memberparts[0]],\r\n                //     })\r\n                //   }\r\n                //   GlslTypes[parts[1]] = structDesc\r\n                //   addLine(result, line)\r\n                //   break\r\n                // }\r\n                default: {\r\n                    // all other statements\r\n                    addLine(result, line);\r\n                    break;\r\n                }\r\n            } // end of switch\r\n        } // end of forloop\r\n        // console.log('length of shader: ' + result.numLines)\r\n        // console.log(result.glsl)\r\n        return result;\r\n    }\r\n}\r\nconst shaderLibrary = new ShaderLibrary();\r\nexport { ShaderLibrary, shaderLibrary };\r\n//# sourceMappingURL=ShaderLibrary.js.map","const glslTypes = {\r\n    bool: 'Boolean',\r\n    int: 'SInt32',\r\n    uint: 'UInt32',\r\n    float: 'Float32',\r\n    ivec2: 'Vec2',\r\n    ivec3: 'Vec3',\r\n    ivec4: 'Vec4',\r\n    vec2: 'Vec2',\r\n    vec3: 'Vec3',\r\n    vec4: 'Vec4',\r\n    color: 'Color',\r\n    mat3: 'Mat3',\r\n    mat4: 'Mat4',\r\n    sampler2D: 'BaseImage',\r\n    samplerCube: 'BaseImage',\r\n};\r\nexport { glslTypes };\r\n//# sourceMappingURL=GLSLConstants.js.map","/* eslint-disable valid-jsdoc */\r\n/* eslint-disable guard-for-in */\r\nimport { BaseItem, Material } from '../SceneTree';\r\nimport { StringFunctions } from '../Utilities/StringFunctions';\r\nimport { shaderLibrary } from './ShaderLibrary';\r\n// interface Result {\r\n//   attrs: Record<string, any>\r\n//   unifs: Record<string, any>\r\n//   shaderHdls: any\r\n//   shaderProgramHdl: any\r\n// }\r\n// Every instance of every shader should have a unique id.\r\n// This is so that we can uniquely identify the bound shader during\r\n// rendering. Materials and geometries cache bindings to shaders.\r\n// And need the id to be unique. (Note: we used to use the constructor.name\r\n// which was only unique if the same shader was constructed once, and\r\n// never unique in release mode after the port to Rollup)\r\nlet shaderInstanceId = 0;\r\n/** Class representing a GL shader.\r\n * @extends BaseItem\r\n * @private\r\n */\r\nclass GLShader extends BaseItem {\r\n    /**\r\n     * Create a GL shader.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    constructor(gl, name) {\r\n        super(name);\r\n        if (gl)\r\n            this.__gl = gl;\r\n        this.__shaderStagesGLSL = {};\r\n        this.__shaderStages = {};\r\n        this.__shaderProgramHdls = {};\r\n        this.__gltextures = {};\r\n        this.__id = shaderInstanceId++;\r\n    }\r\n    /**\r\n     * Sets the GL context to the shader.\r\n     * > Note: normally the context should be passed to the constructor. This method us used when using the Registry to construct shaders.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    setGLContext(gl) {\r\n        this.__gl = gl;\r\n    }\r\n    /**\r\n     * Sets the GLSL code for a given shader stage.\r\n     * @param stageName - The name of the stage. currently only 'VERTEX_SHADER' or 'FRAGMENT_SHADER' are supported.\r\n     * @param glsl - The GLSL code for the shader stage.\r\n     */\r\n    setShaderStage(stageName, glsl) {\r\n        this.__shaderStagesGLSL[stageName] = glsl;\r\n        this.clearProgramsCache();\r\n    }\r\n    /**\r\n     * Gets the GLSL code for a given shader stage.\r\n     * @param stageName - The name of the stage. currently only 'VERTEX_SHADER' or 'FRAGMENT_SHADER' are supported.\r\n     * @return - The GLSL code for the shader stage.\r\n     */\r\n    getShaderStage(stageName) {\r\n        return this.__shaderStagesGLSL[stageName];\r\n    }\r\n    /**\r\n     * Clears all cached shader compilations for this shader.\r\n     */\r\n    clearProgramsCache() {\r\n        const gl = this.__gl;\r\n        for (const shaderProgramkey in this.__shaderProgramHdls) {\r\n            const shaderCompilationResult = this.__shaderProgramHdls[shaderProgramkey];\r\n            for (const shaderKey in shaderCompilationResult.shaderHdls) {\r\n                gl.deleteShader(shaderCompilationResult.shaderHdls[shaderKey]);\r\n            }\r\n            gl.deleteProgram(shaderCompilationResult.shaderProgramHdl);\r\n        }\r\n    }\r\n    /**\r\n     * The isTransparent method.\r\n     * @return - The return value.\r\n     */\r\n    static isTransparent() {\r\n        return false;\r\n    }\r\n    /**\r\n     * The isOverlay method.\r\n     * @return - The return value.\r\n     */\r\n    static isOverlay() {\r\n        return false;\r\n    }\r\n    // /////////////////////////////////\r\n    // Compilation\r\n    /**\r\n     * The __compileShaderStage method.\r\n     * @param glsl - The glsl value.\r\n     * @param stageID - The stageID value.\r\n     * @param name - The name value.\r\n     * @param shaderopts - The shaderopts value.\r\n     * @return - The return value.\r\n     * @private\r\n     */\r\n    __compileShaderStage(glsl, stageID, name, shaderopts) {\r\n        const gl = this.__gl;\r\n        // console.log(\"__compileShaderStage:\" + this.name+\".\"+name + \" glsl:\\n\" + glsl);\r\n        if (!shaderopts)\r\n            shaderopts = gl.shaderopts; // TODO: shaderopts doesn't exist on gl\r\n        if (shaderopts) {\r\n            if (shaderopts.repl) {\r\n                for (const key in shaderopts.repl)\r\n                    glsl = StringFunctions.replaceAll(glsl, key, shaderopts.repl[key]);\r\n            }\r\n            if (shaderopts.directives) {\r\n                const defines = shaderopts.directives.join('\\n') + '\\n';\r\n                glsl = defines + glsl;\r\n            }\r\n        }\r\n        let prefix;\r\n        if (gl.name == 'webgl2') {\r\n            glsl = StringFunctions.replaceAll(glsl, 'attribute', 'in');\r\n            if (name == 'vertexShader')\r\n                glsl = StringFunctions.replaceAll(glsl, 'varying', 'out');\r\n            else\r\n                glsl = StringFunctions.replaceAll(glsl, 'varying', 'in');\r\n            glsl = StringFunctions.replaceAll(glsl, 'texture2D', 'texture');\r\n            prefix = '#version 300 es\\n';\r\n            glsl = prefix + glsl;\r\n        }\r\n        const shaderHdl = gl.createShader(stageID);\r\n        if (!shaderHdl)\r\n            throw Error('shaderHdl not defined');\r\n        gl.shaderSource(shaderHdl, glsl);\r\n        // Compile the shader program.\r\n        gl.compileShader(shaderHdl);\r\n        // See if it compiled successfully\r\n        if (!gl.getShaderParameter(shaderHdl, gl.COMPILE_STATUS)) {\r\n            console.log('Errors in :' + this.constructor.name);\r\n            const errors = gl.getShaderInfoLog(shaderHdl).split('\\n');\r\n            const errorLines = {};\r\n            for (let i = 0; i < errors.length; i++) {\r\n                if (errors[i].startsWith(\"'\")) {\r\n                    errors[i - 1] = errors[i - 1] + errors[i];\r\n                    delete errors[i];\r\n                    i--;\r\n                    continue;\r\n                }\r\n                const parts = errors[i].split(':');\r\n                if (parts.length >= 2) {\r\n                    const lineNum = parseInt(parts[2]); // TODO check against ATI and intel cards\r\n                    if (!isNaN(lineNum)) {\r\n                        if (errorLines[lineNum])\r\n                            errorLines[lineNum].push(errors[i]);\r\n                        else\r\n                            errorLines[lineNum] = [errors[i]];\r\n                    }\r\n                }\r\n            }\r\n            const numberedLinesWithErrors = [];\r\n            const lines = glsl.split('\\n');\r\n            for (const key in errorLines) {\r\n                const lineNumber = Number.parseInt(key) - 1;\r\n                for (let i = Math.max(0, lineNumber - 4); i < lineNumber; i++)\r\n                    numberedLinesWithErrors.push((lineNumber + 1 + ' ').padStart(3) + lines[i]);\r\n                numberedLinesWithErrors.push((lineNumber + 1 + '>').padStart(3) + lines[lineNumber]);\r\n                for (let i = lineNumber + 1; i < Math.min(lines.length - 1, lineNumber + 5); i++)\r\n                    numberedLinesWithErrors.push((lineNumber + 1 + ' ').padStart(3) + lines[i]);\r\n                const errors = errorLines[key];\r\n                for (const error of errors) {\r\n                    numberedLinesWithErrors.push(error);\r\n                }\r\n            }\r\n            // throw(\"An error occurred compiling the shader \\n\\n\" + numberedLinesWithErrors.join('\\n') + \"\\n\\n=================\\n\" + this.constructor.name + \".\" + name + \": \\n\\n\" + errors.join('\\n'));\r\n            throw new Error('An error occurred compiling the shader \\n=================\\n' +\r\n                this.constructor.name +\r\n                '.' +\r\n                name +\r\n                ': \\n\\n' +\r\n                numberedLinesWithErrors.join('\\n'));\r\n        }\r\n        return shaderHdl;\r\n    }\r\n    /**\r\n     * The __createProgram method.\r\n     * @param shaderopts - The shaderopts value.\r\n     * @return - The program value.\r\n     * @private\r\n     */\r\n    // TODO: can't use shaderopt tpye\r\n    __createProgram(shaderopts) {\r\n        const gl = this.__gl;\r\n        this.__shaderCompilationAttempted = true;\r\n        const shaderProgramHdl = gl.createProgram();\r\n        if (!shaderProgramHdl)\r\n            throw Error('shaderProgramHdl not defined');\r\n        const shaderHdls = {};\r\n        if (!this.__shaderStages['VERTEX_SHADER']) {\r\n            // preprocess the GLSL, including all shader snippets\r\n            this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader('VERTEX_SHADER', this.__shaderStagesGLSL['VERTEX_SHADER']);\r\n        }\r\n        const vertexShaderGLSL = this.__shaderStages['VERTEX_SHADER'].glsl;\r\n        if (vertexShaderGLSL != undefined) {\r\n            const vertexShader = this.__compileShaderStage(vertexShaderGLSL, gl.VERTEX_SHADER, 'vertexShader', shaderopts);\r\n            if (!vertexShader) {\r\n                return false;\r\n            }\r\n            gl.attachShader(shaderProgramHdl, vertexShader);\r\n            shaderHdls[gl.VERTEX_SHADER] = vertexShader;\r\n        }\r\n        if (!this.__shaderStages['FRAGMENT_SHADER']) {\r\n            // preprocess the GLSL, including all shader snippets\r\n            this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader('FRAGMENT_SHADER', this.__shaderStagesGLSL['FRAGMENT_SHADER']);\r\n        }\r\n        const fragmentShaderGLSL = this.__shaderStages['FRAGMENT_SHADER'].glsl;\r\n        if (fragmentShaderGLSL != undefined) {\r\n            const fragshaderopts = Object.assign({}, gl.shaderopts, shaderopts);\r\n            if (fragshaderopts.frag)\r\n                fragshaderopts.defines = fragshaderopts.frag.defines + fragshaderopts.defines;\r\n            const fragmentShader = this.__compileShaderStage(fragmentShaderGLSL, gl.FRAGMENT_SHADER, 'fragmentShader', fragshaderopts);\r\n            if (!fragmentShader) {\r\n                return false;\r\n            }\r\n            gl.attachShader(shaderProgramHdl, fragmentShader);\r\n            shaderHdls[gl.FRAGMENT_SHADER] = fragmentShader;\r\n        }\r\n        gl.linkProgram(shaderProgramHdl);\r\n        if (!gl.getProgramParameter(shaderProgramHdl, gl.LINK_STATUS)) {\r\n            const info = gl.getProgramInfoLog(shaderProgramHdl);\r\n            if (!info)\r\n                throw Error('info not defined');\r\n            if (info.includes('D3D shader compilation failed')) {\r\n                // Usefull for debugging very nasty compiler errors generated only in the ANGL layer.\r\n                const debugExt = gl.getExtension('WEBGL_debug_shaders');\r\n                if (debugExt) {\r\n                    const hlsl = debugExt.getTranslatedShaderSource(shaderHdls[gl.VERTEX_SHADER]);\r\n                    console.log(hlsl);\r\n                }\r\n            }\r\n            console.log('vertexShaderGLSL:' + vertexShaderGLSL);\r\n            console.log('fragmentShaderGLSL:' + fragmentShaderGLSL);\r\n            throw new Error('Unable to link the shader program:' + this.constructor.name + '\\n==================\\n' + info);\r\n            gl.deleteProgram(shaderProgramHdl);\r\n            return false;\r\n        }\r\n        const result = this.__extractAttributeAndUniformLocations(shaderProgramHdl, shaderopts);\r\n        result.shaderHdls = shaderHdls;\r\n        result.shaderProgramHdl = shaderProgramHdl;\r\n        return result;\r\n    }\r\n    /**\r\n     * The __extractAttributeAndUniformLocations method.\r\n     * @param shaderProgramHdl - The shaderProgramHdl value.\r\n     * @param shaderopts - The shaderopts value.\r\n     * @return - The dictionary of attributes and uniform values\r\n     * @private\r\n     */\r\n    __extractAttributeAndUniformLocations(shaderProgramHdl, shaderopts) {\r\n        const gl = this.__gl;\r\n        const attrs = this.getAttributes();\r\n        const result = {\r\n            attrs: {},\r\n            unifs: {},\r\n        };\r\n        for (const attrName in attrs) {\r\n            const location = gl.getAttribLocation(shaderProgramHdl, attrName);\r\n            if (location == undefined) {\r\n                console.warn('Shader attribute not found:' + attrName);\r\n                continue;\r\n            }\r\n            const attrDesc = attrs[attrName];\r\n            result.attrs[attrName] = {\r\n                name: attrName,\r\n                location: location,\r\n                type: attrDesc.type,\r\n                instanced: attrDesc.instanced,\r\n            };\r\n        }\r\n        const unifs = this.getUniforms(); // TODO: refactor type in fn()\r\n        for (let uniformName in unifs) {\r\n            const unifType = unifs[uniformName];\r\n            // TODO: array uniform disabled during ts-migration\r\n            // if (unifType instanceof Array) {\r\n            //   for (const member of unifType) {\r\n            //     const structMemberName = uniformName + '.' + member.name\r\n            //     const location = gl.getUniformLocation(shaderProgramHdl, structMemberName)\r\n            //     if (location == undefined) {\r\n            //       // console.warn(this.constructor.name + \" uniform found in shader code but not in compiled program:\" + uniformName);\r\n            //       continue\r\n            //     }\r\n            //     result.unifs[structMemberName] = {\r\n            //       name: structMemberName,\r\n            //       location: location,\r\n            //       type: member.type,\r\n            //     }\r\n            //   }\r\n            // }\r\n            if (shaderopts) {\r\n                if (shaderopts.repl) {\r\n                    for (const key in shaderopts.repl)\r\n                        uniformName = uniformName.replace(key, shaderopts.repl[key]);\r\n                }\r\n            }\r\n            const location = gl.getUniformLocation(shaderProgramHdl, uniformName);\r\n            if (location == undefined) {\r\n                // console.warn(this.constructor.name + \" uniform found in shader code but not in compiled program:\" + uniformName);\r\n                continue;\r\n            }\r\n            result.unifs[uniformName] = {\r\n                name: uniformName,\r\n                location: location,\r\n                type: unifType,\r\n            };\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * The getAttributes method.\r\n     * @return - The dictionary of attributes that this shader expects to be bound.\r\n     */\r\n    getAttributes() {\r\n        const attributes = {};\r\n        for (const stageName in this.__shaderStages) {\r\n            const shaderStageBlock = this.__shaderStages[stageName];\r\n            for (const attrName in shaderStageBlock['attributes'])\r\n                attributes[attrName] = shaderStageBlock['attributes'][attrName];\r\n        }\r\n        return attributes;\r\n    }\r\n    /**\r\n     * The getUniforms method.\r\n     * @return - The dictionary of uniforms that this shader expects to be bound.\r\n     */\r\n    getUniforms() {\r\n        const uniforms = {};\r\n        for (const stageName in this.__shaderStages) {\r\n            const shaderStageBlock = this.__shaderStages[stageName];\r\n            for (const unifName in shaderStageBlock['uniforms'])\r\n                uniforms[unifName] = shaderStageBlock['uniforms'][unifName];\r\n        }\r\n        return uniforms;\r\n    }\r\n    /**\r\n     * Checks to see if the engine is compiled for the target specified by the key\r\n     * @param key - The key value.\r\n     * @return - The return value.\r\n     */\r\n    isCompiledForTarget(key) {\r\n        const shaderkey = key ? key : this.getId();\r\n        return this.__shaderProgramHdls[shaderkey] != undefined;\r\n    }\r\n    /**\r\n     * The compileForTarget method.\r\n     * @param key - The key value.\r\n     * @param shaderopts - The shaderopts value.\r\n     * @return - The result of the shader compilation.\r\n     */\r\n    compileForTarget(key, shaderopts) {\r\n        const shaderkey = key ? key : this.getId();\r\n        let shaderCompilationResult = this.__shaderProgramHdls[shaderkey];\r\n        if (!shaderCompilationResult) {\r\n            if (shaderCompilationResult !== false) {\r\n                // && shaderopts\r\n                shaderCompilationResult = this.__createProgram(shaderopts || {});\r\n                shaderCompilationResult.shaderkey = shaderkey;\r\n                this.__shaderProgramHdls[shaderkey] = shaderCompilationResult;\r\n            }\r\n        }\r\n        return shaderCompilationResult;\r\n    }\r\n    /**\r\n     * The compile method.\r\n     */\r\n    compile() {\r\n        this.compileForTarget();\r\n    }\r\n    /**\r\n     * The bind method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param key - The key value.\r\n     * @return - The return value.\r\n     */\r\n    bind(renderstate, key) {\r\n        const gl = this.__gl;\r\n        if (renderstate.glShader != this) {\r\n            const shaderCompilationResult = this.compileForTarget(key, renderstate.shaderopts);\r\n            if (shaderCompilationResult === {}) {\r\n                // TODO: compileForTarget should return null or empty\r\n                console.warn(this.constructor.name + ' is not compiled for ' + key);\r\n                return false;\r\n            }\r\n            const shaderProgramHdl = shaderCompilationResult.shaderProgramHdl;\r\n            gl.useProgram(shaderProgramHdl);\r\n            renderstate.glShader = this;\r\n            renderstate.shaderkey = shaderCompilationResult.shaderkey;\r\n            renderstate.unifs = shaderCompilationResult.unifs;\r\n            renderstate.attrs = shaderCompilationResult.attrs;\r\n            renderstate.boundTextures = 0;\r\n            // Make sure we clear the binding cached.\r\n            renderstate.glGeom = undefined;\r\n            // Once the shader has been bound, we allow the renderer to bind any\r\n            // of its global uniform values. (e.g. env map values etc...)\r\n            if (renderstate.bindRendererUnifs)\r\n                renderstate.bindRendererUnifs(shaderCompilationResult.unifs);\r\n        }\r\n        renderstate.supportsInstancing = true;\r\n        return true;\r\n    }\r\n    /**\r\n     * The unbind method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @return - The return value.\r\n     */\r\n    unbind(renderstate) {\r\n        renderstate.glShader = null;\r\n        renderstate.shaderkey = '';\r\n        renderstate.unifs = {};\r\n        renderstate.attrs = {};\r\n        return true;\r\n    }\r\n    // /////////////////////////////\r\n    // Parameters\r\n    /**\r\n     * The getGeomDataShaderName method.\r\n     * @return - an array of param declarations that the shader expects the material tp provide.\r\n     */\r\n    getGeomDataShaderName() {\r\n        return '';\r\n    }\r\n    /**\r\n     * The getSelectedShaderName method.\r\n     */\r\n    getSelectedShaderName() {\r\n        return '';\r\n    }\r\n    /**\r\n     * The supportsInstancing method.\r\n     * @return - return false for shaders that cannot be rendered in instanced mode.\r\n     */\r\n    static supportsInstancing() {\r\n        return true;\r\n    }\r\n    /**\r\n     * The getPackedMaterialData method.\r\n     * @param material - The material param.\r\n     * @return - The return value.\r\n     */\r\n    static getPackedMaterialData(material) {\r\n        const matData = new Float32Array(4);\r\n        return matData;\r\n    }\r\n    /**\r\n     * Each shader provides a template material that each material instance is\r\n     * based on. The shader specifies the parameters needed by the shader, and\r\n     * the material provides values to the shader during rendering.\r\n     * @return - The template material value.\r\n     */\r\n    static getMaterialTemplate() {\r\n        throw new Error('Shader does not provide a material template.');\r\n    }\r\n    // /////////////////////////////////\r\n    // Destroy\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() {\r\n        const gl = this.__gl;\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const key in this.__shaderProgramHdls) {\r\n            const shaderCompilationResult = this.__shaderProgramHdls[key];\r\n            gl.deleteProgram(shaderCompilationResult.shaderProgramHdl);\r\n        }\r\n        this.__shaderProgramHdls = {};\r\n    }\r\n}\r\nconst materialTemplate = new Material();\r\nexport { GLShader };\r\n//# sourceMappingURL=GLShader.js.map","import { SystemDesc } from '../SystemDesc';\r\nimport '../Math/index';\r\nimport { Color } from '../Math/index';\r\n/**\r\n * This class abstracts the rendering of a collection of geometries to screen.\r\n */\r\nclass GLFbo {\r\n    /**\r\n     * Creates a GL Framebuffer Object\r\n     *\r\n     * @param gl - The Canvas 3D Context.\r\n     * @param colorTexture - Represents 2D Texture in GL.\r\n     * @param createDepthTexture - The createDepthTexture value.\r\n     */\r\n    constructor(gl, colorTexture, createDepthTexture = false) {\r\n        this.colorTextureResizeEventId = -1;\r\n        this.__depthTexture = null;\r\n        this.__fbo = null;\r\n        this.__prevBoundFbo = null;\r\n        if (SystemDesc.isIOSDevice &&\r\n            gl.name == 'webgl' &&\r\n            (colorTexture.getType() == gl.FLOAT || colorTexture.getType() == gl.HALF_FLOAT)) {\r\n            // So iOS simply refuses to bind anything to a render target except a UNSIGNED_BYTE texture.\r\n            // See the subtle error message here: \"floating-point render targets not supported -- this is legal\"\r\n            // https://www.khronos.org/registry/webgl/conformance-suites/1.0.2/conformance/extensions/oes-texture-float.html\r\n            console.error('IOS devices are unable to render to float textures.');\r\n        }\r\n        this.__gl = gl;\r\n        this.__colorTexture = colorTexture;\r\n        this.__createDepthTexture = createDepthTexture;\r\n        this.__clearColor = new Color(0, 0, 0, 0);\r\n        if (this.__colorTexture) {\r\n            this.colorTextureResizeEventId = this.__colorTexture.on('resized', (event) => {\r\n                this.resize(this.__colorTexture.width, this.__colorTexture.height, false);\r\n            });\r\n        }\r\n        this.setup();\r\n    }\r\n    /**\r\n     * @private\r\n     * @param event The event object providing the event details\r\n     */\r\n    textureResized(event) {\r\n        this.resize(this.__colorTexture.width, this.__colorTexture.height, false);\r\n    }\r\n    /**\r\n     * Sets FBO clear color using RGBA array structure.\r\n     *\r\n     * @param clearColor - The clearColor value.\r\n     */\r\n    setClearColor(clearColor) {\r\n        this.__clearColor = clearColor;\r\n    }\r\n    /**\r\n     * Returns the `width` of the GL Texture\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getWidth() {\r\n        return this.__colorTexture.width;\r\n    }\r\n    /**\r\n     * Returns the `height` of the GL Texture\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getHeight() {\r\n        return this.__colorTexture.height;\r\n    }\r\n    /**\r\n     * Returns the `width`(Index 0) and the `height`(Index 1) of the GL Texture.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getSize() {\r\n        return [this.__colorTexture.width, this.__colorTexture.height];\r\n    }\r\n    /**\r\n     * Returns the ColorTexture of the Fbo\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getColorTexture() {\r\n        return this.__colorTexture;\r\n    }\r\n    /**\r\n     * Returns the value of the deptTexture property.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getDepthTextureGL() {\r\n        return this.__depthTexture;\r\n    }\r\n    /**\r\n     * Returns the `width` of the GL Texture\r\n     *\r\n     * @return - width of GLTexture\r\n     */\r\n    get width() {\r\n        return this.__colorTexture.width;\r\n    }\r\n    /**\r\n     * Returns the `height` of the GL Texture\r\n     *\r\n     * @return - height of GLTexture\r\n     */\r\n    get height() {\r\n        return this.__colorTexture.height;\r\n    }\r\n    /**\r\n     * Returns the [width, height] of the GL Texture.\r\n     *\r\n     * @return - returns [width, height] of the __colorTexture\r\n     */\r\n    get size() {\r\n        return [this.__colorTexture.width, this.__colorTexture.height];\r\n    }\r\n    /**\r\n     * Returns the ColorTexture of the Fbo\r\n     *\r\n     * @returns {GLTexture2D} - returns this.__colorTexture\r\n     */\r\n    get colorTexture() {\r\n        return this.__colorTexture;\r\n    }\r\n    /**\r\n     * Sets ColorTexture of the Fbo.\r\n     *\r\n     * @param colorTexture - The colorTexture value.\r\n     */\r\n    setColorTexture(colorTexture) {\r\n        const gl = this.__gl;\r\n        this.__colorTexture = colorTexture;\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.__colorTexture.glTex, 0);\r\n    }\r\n    /**\r\n     * Returns the value of the depthTexture property.\r\n     *\r\n     * @return\r\n     */\r\n    get depthTextureGL() {\r\n        return this.__depthTexture;\r\n    }\r\n    /**\r\n     * The setup method.\r\n     */\r\n    setup() {\r\n        const gl = this.__gl;\r\n        this.__fbo = gl.createFramebuffer();\r\n        if (gl.name == 'webgl2')\r\n            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.__fbo);\r\n        else\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.__fbo);\r\n        // TODO: Migrate to using GLRenderTarget... This system is a mess.\r\n        // if(gl.name == 'webgl2'){\r\n        //     if (this.__colorTexture && this.__colorTexture.getType() == 'FLOAT' && this.__colorTexture.getFilter() == 'LINEAR') {\r\n        //         if (!gl.__ext_float_linear)\r\n        //             throw (\"Unable to use filtering on floating point textures\");\r\n        //     }\r\n        // }\r\n        // else {\r\n        //     if (this.__colorTexture.getType() == 'FLOAT') {\r\n        //         if(gl.__ext_float){\r\n        //             if (this.__colorTexture.getFilter() == 'LINEAR') {\r\n        //                 if (!gl.__ext_float_linear)\r\n        //                     throw (\"Unable to use filtering on floating point textures\");\r\n        //             }\r\n        //         }\r\n        //         else if(gl.__ext_half_float){\r\n        //             if (this.__colorTexture.getFilter() == 'LINEAR') {\r\n        //                 if (!gl.__ext_texture_half_float_linear)\r\n        //                     throw (\"Unable to use filtering on half-floating point textures\");\r\n        //             }\r\n        //         }\r\n        //         else{\r\n        //             throw(\"floating point textures unsupported.\");\r\n        //         }\r\n        //     }\r\n        // }\r\n        if (this.__colorTexture) {\r\n            if (gl.name == 'webgl2')\r\n                gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.__colorTexture.glTex, 0);\r\n            else\r\n                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.__colorTexture.glTex, 0);\r\n        }\r\n        // Create the depth texture\r\n        if (this.__createDepthTexture) {\r\n            if (gl.name != 'webgl2' && !gl.__ext_WEBGL_depth_texture) {\r\n                // Create the depth buffer\r\n                const depthBuffer = gl.createRenderbuffer();\r\n                gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);\r\n                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.width, this.height);\r\n                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);\r\n            }\r\n            else {\r\n                gl.activeTexture(gl.TEXTURE0);\r\n                this.__depthTexture = gl.createTexture();\r\n                gl.bindTexture(gl.TEXTURE_2D, this.__depthTexture);\r\n                // TODO: Copy params from the color image.\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n                if (gl.name == 'webgl2') {\r\n                    // the proper texture format combination can be found here\r\n                    // https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml\r\n                    // https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/fbo_rtt_depth_texture.html\r\n                    // gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT16, this.width, this.height, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_SHORT, null);\r\n                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT24, this.width, this.height, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_INT, null);\r\n                    gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, this.__depthTexture, 0);\r\n                }\r\n                else {\r\n                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT, this.width, this.height, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_INT, null);\r\n                    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, this.__depthTexture, 0);\r\n                }\r\n            }\r\n        }\r\n        this.__checkFramebuffer();\r\n        if (gl.name == 'webgl2')\r\n            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\r\n        else\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n    /**\r\n     * Triggered Automatically when the texture resizes.\r\n     *\r\n     * @todo: Fbos should manage the textures assigned to them.\r\n     * E.g. resizing and preserving data.\r\n     */\r\n    resize(width, height, resizeTexture) {\r\n        const gl = this.__gl;\r\n        if (resizeTexture) {\r\n            this.__colorTexture.resize(width, height, false, false);\r\n        }\r\n        if (gl.name == 'webgl2')\r\n            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.__fbo);\r\n        else\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.__fbo);\r\n        // The color texture is destoryed and re-created when it is resized,\r\n        // so we must re-bind it here.\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.__colorTexture.glTex, 0);\r\n        if (this.__depthTexture) {\r\n            gl.activeTexture(gl.TEXTURE0);\r\n            gl.bindTexture(gl.TEXTURE_2D, this.__depthTexture);\r\n            if (gl.name == 'webgl2') {\r\n                // the proper texture format combination can be found here\r\n                // https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml\r\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT24, this.width, this.height, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_INT, null);\r\n            }\r\n            else {\r\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT, this.width, this.height, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_INT, null);\r\n            }\r\n        }\r\n        this.__checkFramebuffer();\r\n    }\r\n    /**\r\n     * The __checkFramebuffer method.\r\n     * @private\r\n     */\r\n    __checkFramebuffer() {\r\n        const gl = this.__gl;\r\n        let check;\r\n        if (gl.name == 'webgl2')\r\n            check = gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER);\r\n        else\r\n            check = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n        if (check !== gl.FRAMEBUFFER_COMPLETE) {\r\n            gl.bindTexture(gl.TEXTURE_2D, null);\r\n            if (gl.name == 'webgl2')\r\n                gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\r\n            else\r\n                gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n            console.warn('Error creating Fbo width:', this.width, ', height:', this.height, ' Texture Type:', this.__colorTexture.getType());\r\n            switch (check) {\r\n                case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\r\n                    throw new Error('The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.');\r\n                case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\r\n                    throw new Error('There is no attachment.');\r\n                case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\r\n                    throw new Error('Height and width of the attachment are not the same.');\r\n                case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\r\n                    throw new Error('The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.');\r\n                case 36061: // gl.GL_FRAMEBUFFER_UNSUPPORTED:\r\n                    throw new Error('The framebuffer is unsupported');\r\n                default:\r\n                    throw new Error('Incomplete Frambuffer');\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Binds the Fbo to the canvas context, meaning that all WRITE operations will affect the current Fbo.\r\n     *\r\n     * @param renderstate - The renderstate value.\r\n     */\r\n    bindForWriting(renderstate) {\r\n        if (renderstate) {\r\n            this.__prevBoundFbo = renderstate.boundRendertarget;\r\n            renderstate.boundRendertarget = this.__fbo;\r\n        }\r\n        const gl = this.__gl;\r\n        if (gl.name == 'webgl2')\r\n            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.__fbo);\r\n        else\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.__fbo);\r\n        gl.viewport(0, 0, this.width, this.height); // Match the viewport to the texture size\r\n    }\r\n    /**\r\n     * Unbinds the Fbo to the canvas context for WRITE operations.\r\n     *\r\n     * @param renderstate - The renderstate value.\r\n     */\r\n    unbindForWriting(renderstate) {\r\n        if (renderstate)\r\n            renderstate.boundRendertarget = this.__prevBoundFbo;\r\n        const gl = this.__gl;\r\n        if (gl.name == 'webgl2')\r\n            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.__prevBoundFbo);\r\n        else\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.__prevBoundFbo);\r\n    }\r\n    /**\r\n     * Binds the Fbo to the canvas context, meaning that all WRITE operations will affect the current Fbo.\r\n     *\r\n     * @param renderstate - The renderstate value.\r\n     */\r\n    bind(renderstate) {\r\n        this.bindForWriting(renderstate);\r\n    }\r\n    /**\r\n     * Unbinds the Fbo to the canvas context for WRITE operations.\r\n     *\r\n     * @param renderstate - The renderstate value.\r\n     */\r\n    unbind(renderstate) {\r\n        if (renderstate) {\r\n            // For write operations\r\n            this.unbindForWriting(renderstate);\r\n        }\r\n        else {\r\n            const gl = this.__gl;\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        }\r\n    }\r\n    /**\r\n     * Binds the Fbo to the canvas context, meaning that all READ operations will affect the current Fbo.\r\n     *\r\n     * @param renderstate - The renderstate value.\r\n     */\r\n    bindForReading(renderstate) {\r\n        const gl = this.__gl;\r\n        if (gl.name == 'webgl2')\r\n            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this.__fbo);\r\n        else\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.__fbo);\r\n    }\r\n    /**\r\n     * Unbinds the Fbo to the canvas context for READ operations.\r\n     *\r\n     * @param renderstate - The renderstate value.\r\n     */\r\n    unbindForReading() {\r\n        const gl = this.__gl;\r\n        if (gl.name == 'webgl2')\r\n            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\r\n        else\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n    /**\r\n     * Enables all color components of the rendering context of the Fbo,\r\n     * specifying the default color values when clearing color buffers and clears the buffers to preset values.\r\n     */\r\n    clear() {\r\n        const gl = this.__gl;\r\n        gl.colorMask(true, true, true, true);\r\n        const col = this.__clearColor.asArray();\r\n        gl.clearColor(col[0], col[1], col[2], col[3]);\r\n        if (this.__createDepthTexture) {\r\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        }\r\n        else {\r\n            gl.clear(gl.COLOR_BUFFER_BIT);\r\n        }\r\n    }\r\n    /**\r\n     * Runs [`bind`](#bind) then [`clear`](#clear) methods.\r\n     * @param renderstate - The renderstate value.\r\n     */\r\n    bindAndClear(renderstate) {\r\n        this.bind(renderstate);\r\n        this.clear();\r\n    }\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() {\r\n        const gl = this.__gl;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.deleteFramebuffer(this.__fbo);\r\n        this.__fbo = null;\r\n        this.__colorTexture.removeListenerById('resized', this.colorTextureResizeEventId);\r\n    }\r\n}\r\nexport { GLFbo };\r\n//# sourceMappingURL=GLFbo.js.map","import { Color } from '../Math/Color';\r\nimport { EventEmitter } from '../Utilities/index';\r\nimport { processTextureParams } from './processTextureParams';\r\n/** Class representing a GL render target. */\r\nclass GLRenderTarget extends EventEmitter {\r\n    /**\r\n     * Create a GL render target.\r\n     * @param gl - The webgl rendering context.\r\n     * @param params - The params value.\r\n     */\r\n    constructor(gl, params) {\r\n        super();\r\n        this.params = {};\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.__gl = gl;\r\n        this.textureTargets = [];\r\n        this.depthTexture = null;\r\n        this.textureDesc = [0, 0, 0, 0];\r\n        this.clearColor = new Color(0, 0, 0, 0);\r\n        this.colorMask = [true, true, true, true];\r\n        if (params) {\r\n            this.configure(params);\r\n        }\r\n    }\r\n    /**\r\n     * The configure method.\r\n     * @param params - The params param.\r\n     */\r\n    configure(params) {\r\n        const gl = this.__gl;\r\n        const p = processTextureParams(gl, params); // TODO: review\r\n        this.textureTargets.forEach((colorTexture) => {\r\n            gl.deleteTexture(colorTexture);\r\n        });\r\n        this.textureTargets = [];\r\n        if (this.depthTexture) {\r\n            gl.deleteTexture(this.depthTexture);\r\n            this.depthTexture = null;\r\n        }\r\n        if (this.frameBuffer) {\r\n            gl.deleteFramebuffer(this.frameBuffer);\r\n        }\r\n        this.params = p;\r\n        this.type = p.type;\r\n        this.format = p.format;\r\n        this.internalFormat = p.internalFormat;\r\n        this.filter = p.filter;\r\n        this.wrap = p.wrap;\r\n        this.flipY = p.flipY;\r\n        this.width = p.width;\r\n        this.height = p.height;\r\n        this.textureType = 1; // Default 2d 8 bit texture image texture.\r\n        this.textureDesc[0] = this.width;\r\n        this.textureDesc[1] = this.height;\r\n        // -- Initialize texture targets\r\n        const numColorChannels = params.numColorChannels != undefined ? params.numColorChannels : p.format != undefined ? 1 : 0;\r\n        for (let i = 0; i < numColorChannels; i++) {\r\n            gl.activeTexture(gl.TEXTURE0 + 1);\r\n            const colorTexture = gl.createTexture();\r\n            gl.bindTexture(gl.TEXTURE_2D, colorTexture);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, p.wrapS);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, p.wrapT);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, p.minFilter);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, p.magFilter);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, p.width, p.height, 0, this.format, this.type, null);\r\n            this.textureTargets.push(colorTexture);\r\n        }\r\n        if (p.depthFormat) {\r\n            if (gl.name == 'webgl' && !gl.__ext_WEBGL_depth_texture)\r\n                throw new Error('Depth textures not support on this device');\r\n            // -- Initialize depth texture\r\n            gl.activeTexture(gl.TEXTURE0);\r\n            this.depthTexture = gl.createTexture();\r\n            gl.bindTexture(gl.TEXTURE_2D, this.depthTexture);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, p.wrapS);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, p.wrapT);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, p.minFilter);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, p.magFilter);\r\n            // the proper texture format combination can be found here\r\n            // https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, p.depthInternalFormat, p.width, p.height, 0, p.depthFormat, p.depthType, null);\r\n        }\r\n        // -- Initialize frame buffer\r\n        this.frameBuffer = gl.createFramebuffer();\r\n        this.bindForWriting(); // TODO\r\n        if (this.textureTargets.length > 0) {\r\n            if (this.textureTargets.length > 1) {\r\n                if (gl.name == 'webgl' && !gl.drawBuffers) {\r\n                    // Trying to support drawBuffers on webgl1 is just pointless\r\n                    // gl.__ext_draw_buffers = gl.getExtension('WEBGL_draw_buffers')\r\n                    // gl.drawBuffers = gl.__ext_draw_buffers.drawBuffersWEBGL.bind(gl.__ext_draw_buffers)\r\n                    // for (let i = 1; i < 14; i++) {\r\n                    //   gl['COLOR_ATTACHMENT' + i] = gl.__ext_draw_buffers['COLOR_ATTACHMENT' + i + '_WEBGL']\r\n                    // }\r\n                    // gl.MAX_COLOR_ATTACHMENTS = gl.__ext_draw_buffers.MAX_COLOR_ATTACHMENTS_WEBGL\r\n                    // gl.MAX_DRAW_BUFFERS = gl.__ext_draw_buffers.MAX_DRAW_BUFFERS_WEBGL\r\n                }\r\n            }\r\n            const bufferIds = [];\r\n            for (let i = 0; i < this.textureTargets.length; i++) {\r\n                gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.TEXTURE_2D, this.textureTargets[i], 0);\r\n                bufferIds.push(gl.COLOR_ATTACHMENT0 + i);\r\n            }\r\n            if (this.textureTargets.length > 1) {\r\n                gl.drawBuffers(bufferIds);\r\n            }\r\n        }\r\n        if (this.depthTexture) {\r\n            gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, this.depthTexture, 0);\r\n        }\r\n        this.checkFramebuffer();\r\n    }\r\n    /**\r\n     * The checkFramebuffer method.\r\n     */\r\n    checkFramebuffer() {\r\n        this.bindForWriting(); // TODO\r\n        const gl = this.__gl;\r\n        const status = gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER);\r\n        if (status != gl.FRAMEBUFFER_COMPLETE) {\r\n            switch (status) {\r\n                case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\r\n                    throw new Error('The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.');\r\n                case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\r\n                    throw new Error('There is no attachment.');\r\n                case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\r\n                    throw new Error('Height and width of the attachment are not the same.');\r\n                case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\r\n                    throw new Error('The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.');\r\n                case 36061: // gl.GL_FRAMEBUFFER_UNSUPPORTED:\r\n                    throw new Error('The framebuffer is unsupported');\r\n                default:\r\n                    throw new Error('Incomplete Frambuffer');\r\n            }\r\n            return;\r\n        }\r\n        this.unbindForWriting();\r\n    }\r\n    /**\r\n     * The bindForWriting method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param clear - The clear value.\r\n     */\r\n    bindForWriting(renderstate, clear = false) {\r\n        if (renderstate) {\r\n            this.__prevBoundFbo = renderstate.boundRendertarget;\r\n            renderstate.boundRendertarget = this.frameBuffer;\r\n        }\r\n        const gl = this.__gl;\r\n        if (gl.name == 'webgl2')\r\n            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.frameBuffer);\r\n        else\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\r\n        gl.viewport(0, 0, this.width, this.height); // Match the viewport to the texture size\r\n        if (clear)\r\n            this.clear();\r\n    }\r\n    /**\r\n     * The unbindForWriting method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    unbindForWriting(renderstate) {\r\n        if (renderstate)\r\n            renderstate.boundRendertarget = this.__prevBoundFbo;\r\n        const gl = this.__gl;\r\n        if (gl.name == 'webgl2')\r\n            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.__prevBoundFbo);\r\n        else\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.__prevBoundFbo);\r\n    }\r\n    /**\r\n     * The clear method.\r\n     * @param clearDepth - The clearDepth value.\r\n     */\r\n    clear(clearDepth = true) {\r\n        const gl = this.__gl;\r\n        const colMask = this.colorMask;\r\n        gl.colorMask(colMask[0], colMask[1], colMask[2], colMask[3]);\r\n        const clearCol = this.clearColor.asArray();\r\n        gl.clearColor(clearCol[0], clearCol[1], clearCol[2], clearCol[3]);\r\n        let flags = 0;\r\n        if (this.textureTargets.length > 0)\r\n            flags |= gl.COLOR_BUFFER_BIT;\r\n        if (this.depthTexture)\r\n            flags |= gl.DEPTH_BUFFER_BIT;\r\n        gl.clear(flags);\r\n    }\r\n    /**\r\n     * Binds the render target in preparation for 'readPixels' calls to pull data back to main memory.\r\n     */\r\n    bindForReading() {\r\n        const gl = this.__gl;\r\n        if (gl.name == 'webgl2')\r\n            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this.frameBuffer);\r\n        else\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\r\n    }\r\n    /**\r\n     * The unbindForReading method.\r\n     */\r\n    unbindForReading() {\r\n        const gl = this.__gl;\r\n        if (gl.name == 'webgl2')\r\n            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\r\n        else\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n    /**\r\n     * The bindColorTexture method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param channelId - The channelId value.\r\n     * @return - The return value.\r\n     */\r\n    bindColorTexture(renderstate, unif, channelId = 0) {\r\n        const gl = this.__gl;\r\n        const unit = renderstate.boundTextures++;\r\n        gl.uniform1i(unif.location, unit);\r\n        gl.activeTexture(gl.TEXTURE0 + unit);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.textureTargets[channelId]);\r\n        return true;\r\n    }\r\n    /**\r\n     * The bindDepthTexture method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param unif - The WebGL uniform\r\n     * @return - The return value.\r\n     */\r\n    bindDepthTexture(renderstate, unif) {\r\n        const gl = this.__gl;\r\n        const unit = renderstate.boundTextures++;\r\n        gl.uniform1i(unif.location, unit);\r\n        gl.activeTexture(gl.TEXTURE0 + unit);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.depthTexture);\r\n        return true;\r\n    }\r\n    /**\r\n     * The unbind method.\r\n     */\r\n    unbind(renderstate) {\r\n        this.unbindForWriting(renderstate);\r\n    }\r\n    /**\r\n     * The resize method.\r\n     * @param width - The width value.\r\n     * @param height - The height value.\r\n     * @param preserveData - The preserveData value.\r\n     */\r\n    resize(width, height, preserveData = false) {\r\n        const gl = this.__gl;\r\n        const sizeChanged = this.width != width || this.height != height;\r\n        if (sizeChanged) {\r\n            const maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n            if (width < 0 || width > maxSize || height < 0 || height > maxSize) {\r\n                throw new Error(`GLRenderTarget: Invalid texture size. width: ${width} height: ${height} maxSize: ${maxSize}`);\r\n            }\r\n            if (preserveData) {\r\n                this.bindForReading();\r\n            }\r\n            const p = this.params;\r\n            for (let i = 0; i < this.textureTargets.length; i++) {\r\n                const colorTexture = gl.createTexture();\r\n                gl.bindTexture(gl.TEXTURE_2D, colorTexture);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, p.wrapS);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, p.wrapT);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, p.minFilter);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, p.magFilter);\r\n                gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, width, height, 0, this.format, this.type, null);\r\n                if (preserveData) {\r\n                    // see: http://jsfiddle.net/greggman/rs21sr46\r\n                    gl.copyTexImage2D(gl.TEXTURE_2D, 0, this.internalFormat, 0, 0, Math.min(width, this.width), Math.min(height, this.height), 0);\r\n                }\r\n                gl.deleteTexture(this.textureTargets[i]);\r\n                this.textureTargets[i] = colorTexture;\r\n            }\r\n            if (p.depthFormat) {\r\n                if (gl.name == 'webgl' && !gl.__ext_WEBGL_depth_texture)\r\n                    throw new Error('Depth textures not support on this device');\r\n                // -- Initialize depth texture\r\n                gl.activeTexture(gl.TEXTURE0);\r\n                const depthTexture = gl.createTexture();\r\n                gl.bindTexture(gl.TEXTURE_2D, depthTexture);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, p.wrapS);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, p.wrapT);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, p.minFilter);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, p.magFilter);\r\n                // the proper texture format combination can be found here\r\n                // https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml\r\n                gl.texImage2D(gl.TEXTURE_2D, 0, p.depthInternalFormat, width, height, 0, p.depthFormat, p.depthType, null);\r\n                if (preserveData) {\r\n                    // see: http://jsfiddle.net/greggman/rs21sr46\r\n                    gl.copyTexImage2D(gl.TEXTURE_2D, 0, this.internalFormat, 0, 0, Math.min(width, this.width), Math.min(height, this.height), 0);\r\n                }\r\n                gl.deleteTexture(this.depthTexture);\r\n                this.depthTexture = depthTexture;\r\n            }\r\n            if (preserveData) {\r\n                this.unbindForReading();\r\n            }\r\n            this.width = width;\r\n            this.height = height;\r\n            // -- Initialize frame buffer\r\n            if (this.frameBuffer) {\r\n                // Note: avoid re-using the framebuffer.\r\n                // see here: https://gamedev.stackexchange.com/questions/91991/resizing-a-framebuffer-object-ie-its-attachments-on-screen-resize\r\n                gl.deleteFramebuffer(this.frameBuffer);\r\n            }\r\n            this.frameBuffer = gl.createFramebuffer();\r\n            this.bindForWriting();\r\n            if (this.textureTargets.length > 0) {\r\n                if (this.textureTargets.length > 1) {\r\n                    if (gl.name == 'webgl' && !gl.drawBuffers) {\r\n                        // Trying to support drawBuffers on webgl1 is just pointless\r\n                        // gl.__ext_draw_buffers = gl.getExtension('WEBGL_draw_buffers')\r\n                        // gl.drawBuffers = gl.__ext_draw_buffers.drawBuffersWEBGL.bind(gl.__ext_draw_buffers)\r\n                        // for (let i = 1; i < 14; i++) {\r\n                        //   gl['COLOR_ATTACHMENT' + i] = gl.__ext_draw_buffers['COLOR_ATTACHMENT' + i + '_WEBGL']\r\n                        // }\r\n                        // gl.MAX_COLOR_ATTACHMENTS = gl.__ext_draw_buffers.MAX_COLOR_ATTACHMENTS_WEBGL\r\n                        // gl.MAX_DRAW_BUFFERS = gl.__ext_draw_buffers.MAX_DRAW_BUFFERS_WEBGL\r\n                    }\r\n                }\r\n                const bufferIds = [];\r\n                for (let i = 0; i < this.textureTargets.length; i++) {\r\n                    gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.TEXTURE_2D, this.textureTargets[i], 0);\r\n                    bufferIds.push(gl.COLOR_ATTACHMENT0 + i);\r\n                }\r\n                if (this.textureTargets.length > 1) {\r\n                    gl.drawBuffers(bufferIds);\r\n                }\r\n            }\r\n            if (this.depthTexture) {\r\n                gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, this.depthTexture, 0);\r\n            }\r\n            this.checkFramebuffer();\r\n        }\r\n    }\r\n    /**\r\n     * The bindToUniform method.\r\n     * @param renderstate - The renderstate param.\r\n     * @param unif - The WebGL uniform\r\n     * @param bindings - The bindings param.\r\n     * @return - The return value.\r\n     */\r\n    bindToUniform(renderstate, unif, bindings) {\r\n        // if (!this.__loaded) {\r\n        //   return false\r\n        // }\r\n        // if (!this.__gltex) {\r\n        //   throw new Error('Unable to bind non-initialized or deleted texture.')\r\n        // }\r\n        const unit = renderstate.boundTextures++;\r\n        const texId = this.__gl.TEXTURE0 + unit;\r\n        const gl = this.__gl;\r\n        gl.activeTexture(texId);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.textureTargets[0]);\r\n        gl.uniform1i(unif.location, unit);\r\n        if (bindings) {\r\n            if (bindings.textureTypeUnif) {\r\n                gl.uniform1i(bindings.textureTypeUnif.location, this.textureType);\r\n            }\r\n            if (bindings.textureDescUnif) {\r\n                this.__gl.uniform4fv(bindings.textureDescUnif.location, this.textureDesc);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() {\r\n        const gl = this.__gl;\r\n        this.textureTargets.forEach((colorTexture) => {\r\n            gl.deleteTexture(colorTexture);\r\n        });\r\n        this.textureTargets = [];\r\n        if (this.depthTexture) {\r\n            gl.deleteTexture(this.depthTexture);\r\n            this.depthTexture = null;\r\n        }\r\n        if (this.frameBuffer) {\r\n            gl.deleteFramebuffer(this.frameBuffer);\r\n        }\r\n    }\r\n}\r\nexport { GLRenderTarget };\r\n//# sourceMappingURL=GLRenderTarget.js.map","// @ts-nocheck\r\nimport { shaderLibrary } from '../../ShaderLibrary';\r\nimport computeViewNormal from './computeViewNormal.glsl';\r\nimport calcFatLinesViewPos from './calcFatLinesViewPos.glsl';\r\nimport constants from './constants.glsl';\r\nimport convolveHelpers from './convolve-helpers.glsl';\r\nimport cutaways from './cutaways.glsl';\r\nimport debugColors from './debugColors.glsl';\r\nimport drawItemId from './drawItemId.glsl';\r\nimport drawItemTexture from './drawItemTexture.glsl';\r\nimport envmapDualfisheye from './envmap-dualfisheye.glsl';\r\nimport envmapEquirect from './envmap-equirect.glsl';\r\nimport envmapOctahedral from './envmap-octahedral.glsl';\r\nimport GLSLBits from './GLSLBits.glsl';\r\nimport GLSLUtils from './GLSLUtils.glsl';\r\nimport Hammersley from './Hammersley.glsl';\r\nimport ImportanceSampleGGX from './ImportanceSampleGGX.glsl';\r\nimport materialparams from './materialparams.glsl';\r\nimport modelMatrix from './modelMatrix.glsl';\r\nimport PBRSurfaceRadiance from './PBRSurfaceRadiance.glsl';\r\nimport SHCoeffs from './SHCoeffs.glsl';\r\nimport gamma from './gamma.glsl';\r\nimport inverse from './inverse.glsl';\r\nimport transpose from './transpose.glsl';\r\nimport quadVertexFromID from './quadVertexFromID.glsl';\r\nimport unpackHDR from './unpackHDR.glsl';\r\nimport surfaceGeomData from './surfaceGeomData.glsl';\r\nimport surfaceHighlight from './surfaceHighlight.glsl';\r\nimport imageAtlas from './imageAtlas.glsl';\r\nshaderLibrary.setShaderModule('imageAtlas.glsl', imageAtlas);\r\nshaderLibrary.setShaderModule('surfaceGeomData.glsl', surfaceGeomData);\r\nshaderLibrary.setShaderModule('surfaceHighlight.glsl', surfaceHighlight);\r\nshaderLibrary.setShaderModule('computeViewNormal.glsl', computeViewNormal);\r\nshaderLibrary.setShaderModule('calcFatLinesViewPos.glsl', calcFatLinesViewPos);\r\nshaderLibrary.setShaderModule('constants.glsl', constants);\r\nshaderLibrary.setShaderModule('convolve-helpers.glsl', convolveHelpers);\r\nshaderLibrary.setShaderModule('cutaways.glsl', cutaways);\r\nshaderLibrary.setShaderModule('debugColors.glsl', debugColors);\r\nshaderLibrary.setShaderModule('drawItemId.glsl', drawItemId);\r\nshaderLibrary.setShaderModule('drawItemTexture.glsl', drawItemTexture);\r\nshaderLibrary.setShaderModule('envmap-dualfisheye.glsl', envmapDualfisheye);\r\nshaderLibrary.setShaderModule('envmap-equirect.glsl', envmapEquirect);\r\nshaderLibrary.setShaderModule('envmap-octahedral.glsl', envmapOctahedral);\r\nshaderLibrary.setShaderModule('GLSLBits.glsl', GLSLBits);\r\nshaderLibrary.setShaderModule('GLSLUtils.glsl', GLSLUtils);\r\nshaderLibrary.setShaderModule('Hammersley.glsl', Hammersley);\r\nshaderLibrary.setShaderModule('ImportanceSampleGGX.glsl', ImportanceSampleGGX);\r\nshaderLibrary.setShaderModule('materialparams.glsl', materialparams);\r\nshaderLibrary.setShaderModule('modelMatrix.glsl', modelMatrix);\r\nshaderLibrary.setShaderModule('PBRSurfaceRadiance.glsl', PBRSurfaceRadiance);\r\nshaderLibrary.setShaderModule('SHCoeffs.glsl', SHCoeffs);\r\nshaderLibrary.setShaderModule('gamma.glsl', gamma);\r\nshaderLibrary.setShaderModule('inverse.glsl', inverse);\r\nshaderLibrary.setShaderModule('transpose.glsl', transpose);\r\nshaderLibrary.setShaderModule('quadVertexFromID.glsl', quadVertexFromID);\r\nshaderLibrary.setShaderModule('unpackHDR.glsl', unpackHDR);\r\n//# sourceMappingURL=index.js.map","/* eslint-disable require-jsdoc */\r\nimport { GLShader } from '../GLShader';\r\nimport './GLSL/index';\r\n// @ts-ignore\r\nimport frag from './UnpackHDR.frag';\r\n// @ts-ignore\r\nimport vert from './UnpackHDR.vert';\r\n/** Shader for unpacking HDR images using Boost HDR algorithm.\r\n * @extends GLShader\r\n * @private\r\n */\r\nclass UnpackHDRShader extends GLShader {\r\n    /**\r\n     * Create a GL shader.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'UnpackHDRShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n        this.setShaderStage('FRAGMENT_SHADER', frag);\r\n    }\r\n}\r\nexport { UnpackHDRShader };\r\n//# sourceMappingURL=UnpackHDRShader.js.map","/* eslint-disable guard-for-in */\r\n/**\r\n * Returns a descriptor for the provided geom attribute.\r\n * @private\r\n * @param gl - The webgl context\r\n * @param attrDataType - The geometry attribute value.\r\n *\r\n * @return\r\n */\r\nconst genDataTypeDesc = (gl, attrDataType) => {\r\n    let dimension;\r\n    let elementSize;\r\n    let dataType;\r\n    switch (attrDataType) {\r\n        case 'UInt8':\r\n            dimension = 1;\r\n            elementSize = 4;\r\n            dataType = gl.UNSIGNED_BYTE;\r\n            break;\r\n        case 'SInt8':\r\n            dimension = 1;\r\n            elementSize = 4;\r\n            dataType = gl.BYTE;\r\n            break;\r\n        case 'UInt16':\r\n            dimension = 1;\r\n            elementSize = 4;\r\n            dataType = gl.UNSIGNED_SHORT;\r\n            break;\r\n        case 'SInt16':\r\n            dimension = 1;\r\n            elementSize = 4;\r\n            dataType = gl.SHORT;\r\n            break;\r\n        case 'UInt32':\r\n            dimension = 1;\r\n            elementSize = 4;\r\n            dataType = gl.UNSIGNED_INT;\r\n            break;\r\n        case 'SInt32':\r\n            dimension = 1;\r\n            elementSize = 4;\r\n            dataType = gl.INT;\r\n            break;\r\n        case 'Float32':\r\n            dimension = 1;\r\n            elementSize = 4;\r\n            dataType = gl.FLOAT;\r\n            break;\r\n        case 'Vec2':\r\n            dimension = 2;\r\n            elementSize = 4;\r\n            dataType = gl.FLOAT;\r\n            break;\r\n        case 'Vec3':\r\n            dimension = 3;\r\n            elementSize = 4;\r\n            dataType = gl.FLOAT;\r\n            break;\r\n        case 'Vec4':\r\n        case 'Color':\r\n            dimension = 4;\r\n            elementSize = 4;\r\n            dataType = gl.FLOAT;\r\n            break;\r\n        case 'RGBA':\r\n            dimension = 4;\r\n            elementSize = 1;\r\n            dataType = gl.UNSIGNED_BYTE;\r\n            break;\r\n        default:\r\n            throw 'Unhandled Type';\r\n    }\r\n    return {\r\n        dimension,\r\n        elementSize,\r\n        dataType,\r\n    };\r\n};\r\nclass IGeomShaderBinding {\r\n}\r\n/** Class representing a geom shader binding.\r\n * @private\r\n */\r\nclass GeomShaderBinding extends IGeomShaderBinding {\r\n    /**\r\n     * Create a geom shader binding.\r\n     * @param gl - The webgl rendering context.\r\n     * @param shaderAttrs - The shader attributes.\r\n     * @param geomAttrBuffers - The geomAttrBuffers value.\r\n     * @param indexBuffer - The index buffer.\r\n     */\r\n    constructor(gl, shaderAttrs, geomAttrBuffers, indexBuffer) {\r\n        super();\r\n        this.gl = gl;\r\n        this.shaderAttrs = shaderAttrs;\r\n        this.glattrbuffers = geomAttrBuffers;\r\n        this.indexBuffer = indexBuffer;\r\n    }\r\n    /**\r\n     * The bind method.\r\n     * @param renderstate - The render state.\r\n     * @return - The return value.\r\n     */\r\n    bind(renderstate) {\r\n        const gl = this.gl;\r\n        for (const attrName in this.shaderAttrs) {\r\n            if (attrName == 'instancedIds')\r\n                continue;\r\n            const shaderAttrDesc = this.shaderAttrs[attrName];\r\n            const location = shaderAttrDesc.location;\r\n            if (location == -1)\r\n                continue;\r\n            const geomAttrBuffer = this.glattrbuffers[attrName];\r\n            if (!geomAttrBuffer) {\r\n                gl.disableVertexAttribArray(location);\r\n                continue;\r\n            }\r\n            const geomAttrDesc = genDataTypeDesc(this.gl, geomAttrBuffer.dataType);\r\n            const stride = geomAttrDesc.dimension * geomAttrDesc.elementSize;\r\n            const offset = geomAttrBuffer.offset != undefined\r\n                ? geomAttrBuffer.offset * geomAttrDesc.dimension * geomAttrDesc.elementSize\r\n                : 0;\r\n            const normalized = geomAttrBuffer.normalized == true;\r\n            const instanced = shaderAttrDesc.instanced;\r\n            gl.enableVertexAttribArray(location);\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, geomAttrBuffer.buffer);\r\n            gl.vertexAttribPointer(location, geomAttrDesc.dimension, geomAttrDesc.dataType, normalized, stride, offset);\r\n            if (gl.vertexAttribDivisor) {\r\n                if (instanced == true) {\r\n                    gl.vertexAttribDivisor(location, 1); // This makes it instanced\r\n                }\r\n                else {\r\n                    gl.vertexAttribDivisor(location, 0); // This makes it not-instanced\r\n                }\r\n            }\r\n            // console.log(\"Binding :\" + attrName + \" to attr:\" + location + \" count:\" + geomAttrBuffer.count + \" dimension:\" + dimension  + \" stride:\" + stride  + \" offset:\" + offset + \" normalized:\" + normalized + \" instanced:\" + instanced);\r\n        }\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n        return true;\r\n    }\r\n    /**\r\n     * The unbind method.\r\n     */\r\n    unbind() {\r\n        const gl = this.gl;\r\n        for (const attrName in this.shaderAttrs) {\r\n            const shaderAttrDesc = this.shaderAttrs[attrName];\r\n            const location = shaderAttrDesc.location;\r\n            if (location == -1) {\r\n                gl.enableVertexAttribArray(location);\r\n            }\r\n            if (shaderAttrDesc.instanced) {\r\n                gl.vertexAttribDivisor(location, 0); // This makes it not-instanced\r\n            }\r\n            // console.log(\"Binding :\" + attrName + \" to attr:\" + location + \" count:\" + geomAttrBuffer.count + \" dimension:\" + dimension  + \" stride:\" + stride  + \" offset:\" + offset + \" normalized:\" + normalized + \" instanced:\" + instanced);\r\n        }\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n    }\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() { }\r\n}\r\n/** Class representing vertex array objects (VAO) geom shader binding.\r\n * @private\r\n */\r\nclass VAOGeomShaderBinding extends IGeomShaderBinding {\r\n    /**\r\n     * Create VAO geom shader binding.\r\n     * @param gl - The webgl rendering context.\r\n     * @param shaderAttrs - The shaderAttrs value.\r\n     * @param geomAttrBuffers - The geomAttrBuffers value.\r\n     * @param indexBuffer - The indexBuffer value.\r\n     */\r\n    constructor(gl, shaderAttrs, geomAttrBuffers, indexBuffer) {\r\n        super();\r\n        this.gl = gl;\r\n        this.vao = gl.createVertexArray();\r\n        gl.bindVertexArray(this.vao);\r\n        for (const attrName in shaderAttrs) {\r\n            if (attrName == 'instancedIds')\r\n                continue;\r\n            const shaderAttrDesc = shaderAttrs[attrName];\r\n            const location = shaderAttrDesc.location;\r\n            if (location == -1)\r\n                continue;\r\n            let geomAttrBuffer = geomAttrBuffers[attrName];\r\n            if (!geomAttrBuffer) {\r\n                if (attrName.endsWith('Next')) {\r\n                    geomAttrBuffer = geomAttrBuffers[attrName.substring(0, attrName.length - 4)];\r\n                    shaderAttrDesc.offset = 1;\r\n                }\r\n                if (!geomAttrBuffer) {\r\n                    // console.warn(\"geomAttrBuffer missing:\" + attrName + \" location:\" + location);\r\n                    gl.disableVertexAttribArray(location);\r\n                    continue;\r\n                }\r\n            }\r\n            const geomAttrDesc = genDataTypeDesc(gl, geomAttrBuffer.dataType);\r\n            const stride = geomAttrDesc.dimension * geomAttrDesc.elementSize;\r\n            const offset = shaderAttrDesc.offset != undefined\r\n                ? shaderAttrDesc.offset * geomAttrDesc.dimension * geomAttrDesc.elementSize\r\n                : 0;\r\n            const normalized = geomAttrBuffer.normalized == true;\r\n            const instanced = shaderAttrDesc.instanced;\r\n            gl.enableVertexAttribArray(location);\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, geomAttrBuffer.buffer);\r\n            gl.vertexAttribPointer(location, geomAttrDesc.dimension, geomAttrDesc.dataType, normalized, stride, offset);\r\n            if (gl.vertexAttribDivisor) {\r\n                if (instanced == true) {\r\n                    gl.vertexAttribDivisor(location, 1); // This makes it instanced\r\n                }\r\n                else {\r\n                    gl.vertexAttribDivisor(location, 0); // This makes it not-instanced\r\n                }\r\n            }\r\n            // console.log(\"Binding :\" + attrName + \" to attr:\" + location + \" count:\" + geomAttrBuffer.count + \" dimension:\" + dimension  + \" stride:\" + stride  + \" offset:\" + offset + \" normalized:\" + normalized + \" instanced:\" + instanced);\r\n        }\r\n        // gl.bindVertexArray(null)\r\n        this.indexBuffer = indexBuffer;\r\n        if (this.indexBuffer)\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n    }\r\n    /**\r\n     * The bind method.\r\n     * @param renderstate - The render state.\r\n     * @return - The return value.\r\n     */\r\n    bind(renderstate) {\r\n        const gl = this.gl;\r\n        gl.bindVertexArray(this.vao);\r\n        if (this.indexBuffer)\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n        return true;\r\n    }\r\n    /**\r\n     * The unbind method.\r\n     */\r\n    unbind() {\r\n        const gl = this.gl;\r\n        gl.bindVertexArray(null);\r\n        if (this.indexBuffer)\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n    }\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() {\r\n        const gl = this.gl;\r\n        // Ensure we detach the index buffer before deleting the VAO.\r\n        if (this.indexBuffer) {\r\n            gl.bindVertexArray(this.vao);\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        }\r\n        gl.deleteVertexArray(this.vao);\r\n    }\r\n}\r\nfunction generateShaderGeomBinding(gl, shaderAttrs, geomAttrBuffers, indexBuffer) {\r\n    if (gl.createVertexArray == null) {\r\n        return new GeomShaderBinding(gl, shaderAttrs, geomAttrBuffers, indexBuffer);\r\n    }\r\n    else {\r\n        return new VAOGeomShaderBinding(gl, shaderAttrs, geomAttrBuffers, indexBuffer);\r\n    }\r\n}\r\nexport { generateShaderGeomBinding, genDataTypeDesc, IGeomShaderBinding };\r\n//# sourceMappingURL=GeomShaderBinding.js.map","import { GLTexture2D } from './GLTexture2D';\r\nimport { UnpackHDRShader } from './Shaders/UnpackHDRShader';\r\nimport { GLFbo } from './GLFbo';\r\nimport { generateShaderGeomBinding } from './Drawing/GeomShaderBinding';\r\nimport { Color } from '../Math/Color';\r\n/** Class representing a GL high dynamic range (HDR) image.\r\n * @extends GLTexture2D\r\n * @private\r\n */\r\nclass GLHDRImage extends GLTexture2D {\r\n    /**\r\n     * Create a GL HDR image.\r\n     * @param gl - The webgl rendering context.\r\n     * @param hdrImage - The HDR image.\r\n     */\r\n    constructor(gl, hdrImage) {\r\n        super(gl);\r\n        //  protected __gl: WebGL12RenderingContext\r\n        this.listenerIDs = {};\r\n        this.fbo = null;\r\n        this.srcLDRTex = null;\r\n        this.srcCDMTex = null;\r\n        this.unpackHDRShader = null;\r\n        this.shaderBinding = null;\r\n        this.hdrImage = hdrImage;\r\n        this.hdrImage.setMetadata('gltexture', this);\r\n        const loadImage = () => {\r\n            this.__unpackHDRImage(this.hdrImage.getParams());\r\n        };\r\n        this.listenerIDs['updated'] = this.hdrImage.on('updated', loadImage);\r\n        if (this.hdrImage.isLoaded()) {\r\n            loadImage();\r\n        }\r\n        else {\r\n            this.listenerIDs['loaded'] = this.hdrImage.on('loaded', loadImage);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the `BaseImage` of the GL Texture\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getImage() {\r\n        return this.hdrImage;\r\n    }\r\n    /**\r\n     * The __unpackHDRImage method.\r\n     * @param hdrImageParams - The HDR image parameters.\r\n     * @private\r\n     */\r\n    __unpackHDRImage(hdrImageParams) {\r\n        const gl = this.__gl;\r\n        const ldr = hdrImageParams.data.ldr;\r\n        const cdm = hdrImageParams.data.cdm;\r\n        if (!this.fbo) {\r\n            // Note: iOS devices create FLOAT Fbox.\r\n            // If we want better quality, we could unpack the texture in JavaScript.\r\n            this.configure({\r\n                format: 'RGBA',\r\n                type: 'FLOAT',\r\n                width: ldr.width,\r\n                height: ldr.height,\r\n                filter: 'LINEAR',\r\n                wrap: 'CLAMP_TO_EDGE',\r\n            });\r\n            this.fbo = new GLFbo(this.__gl, this);\r\n            this.fbo.setClearColor(new Color(0, 0, 0, 0));\r\n            this.srcLDRTex = new GLTexture2D(this.__gl, {\r\n                format: 'RGB',\r\n                type: 'UNSIGNED_BYTE',\r\n                width: ldr.width,\r\n                height: ldr.height,\r\n                filter: 'NEAREST',\r\n                mipMapped: false,\r\n                wrap: 'CLAMP_TO_EDGE',\r\n                data: ldr,\r\n            });\r\n            this.srcCDMTex = new GLTexture2D(this.__gl, {\r\n                format: gl.name == 'webgl2' ? 'RED' : 'ALPHA',\r\n                type: 'UNSIGNED_BYTE',\r\n                width: ldr.width /* 8*/,\r\n                height: ldr.height /* 8*/,\r\n                filter: 'NEAREST',\r\n                mipMapped: false,\r\n                wrap: 'CLAMP_TO_EDGE',\r\n                data: cdm,\r\n            });\r\n            this.unpackHDRShader = new UnpackHDRShader(this.__gl);\r\n            const shaderComp = this.unpackHDRShader.compileForTarget('GLHDRImage', { directives: ['#define ENABLE_ES3'] });\r\n            this.shaderBinding = generateShaderGeomBinding(this.__gl, shaderComp.attrs, gl.__quadattrbuffers, gl.__quadIndexBuffer);\r\n        }\r\n        else {\r\n            this.srcLDRTex.bufferData(ldr);\r\n            this.srcCDMTex.bufferData(cdm);\r\n        }\r\n        this.fbo.bindAndClear();\r\n        const renderstate = {};\r\n        this.unpackHDRShader.bind(renderstate, 'GLHDRImage');\r\n        this.shaderBinding.bind(renderstate);\r\n        const unifs = renderstate.unifs;\r\n        this.srcLDRTex.bindToUniform(renderstate, unifs.ldrSampler);\r\n        this.srcCDMTex.bindToUniform(renderstate, unifs.cdmSampler);\r\n        gl.uniform4fv(unifs.srcRegion.location, [0, 0, 1, 1]);\r\n        gl.drawQuad();\r\n        // // Debug a block of pixels.\r\n        // console.log(this.hdrImage.getName());\r\n        // gl.finish();\r\n        // let numPixels = 4;\r\n        // let pixels = new Float32Array(4 * numPixels);\r\n        // gl.readPixels(ldr.width / 4, ldr.height/4, numPixels, 1, gl.RGBA, gl.FLOAT, pixels);\r\n        // console.log(pixels);\r\n        // gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        this.fbo.unbind();\r\n        // if (!this.hdrImage.isStream()) {\r\n        //     this.fbo.destroy();\r\n        //     this.srcLDRTex.destroy();\r\n        //     this.srcCDMTex.destroy();\r\n        //     this.fbo = null;\r\n        //     this.srcLDRTex = null;\r\n        //     this.srcCDMTex = null;\r\n        // }\r\n        this.emit('updated');\r\n    }\r\n    /**\r\n     * The bindToUniform method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param unif - The WebGL uniform\r\n     * @param bindings - The bindings value.\r\n     * @return - The return value.\r\n     */\r\n    bindToUniform(renderstate, unif, bindings) {\r\n        return super.bindToUniform(renderstate, unif, bindings);\r\n    }\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() {\r\n        super.destroy();\r\n        if (this.fbo) {\r\n            this.fbo.destroy();\r\n            this.srcLDRTex.destroy();\r\n            this.srcCDMTex.destroy();\r\n        }\r\n        if (this.unpackHDRShader)\r\n            this.unpackHDRShader.destroy();\r\n        if (this.shaderBinding)\r\n            this.shaderBinding.destroy();\r\n        if ('loaded' in this.listenerIDs)\r\n            this.hdrImage.removeListenerById('loaded', this.listenerIDs['loaded']);\r\n        this.hdrImage.removeListenerById('updated', this.listenerIDs['updated']);\r\n    }\r\n}\r\nexport { GLHDRImage };\r\n//# sourceMappingURL=GLHDRImage.js.map","/* eslint-disable require-jsdoc */\r\nimport { GLShader } from '../GLShader';\r\nimport './GLSL/index';\r\n// @ts-ignore\r\nimport frag from './PreComputeBRDF.frag';\r\n// @ts-ignore\r\nimport vert from './PreComputeBRDF.vert';\r\n/** Shader for convolving Environment maps.\r\n * @extends GLShader\r\n * @private\r\n */\r\nclass PreComputeBRDFShader extends GLShader {\r\n    /**\r\n     * Create a GL renderer.\r\n     * @param gl - The options value.\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'PreComputeBRDFShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n        this.setShaderStage('FRAGMENT_SHADER', frag);\r\n    }\r\n}\r\nexport { PreComputeBRDFShader };\r\n//# sourceMappingURL=PreComputeBRDFShader.js.map","/* eslint-disable require-jsdoc */\r\nimport { GLShader } from '../GLShader';\r\nimport './GLSL/index';\r\n// @ts-ignore\r\nimport frag from './ConvolveIrradiance.frag';\r\n// @ts-ignore\r\nimport vert from './ConvolveIrradiance.vert';\r\n/** Shader for convolving Environment maps.\r\n * @extends GLShader\r\n * @private\r\n */\r\nclass ConvolveIrradianceShader extends GLShader {\r\n    /**\r\n     * Create a GL renderer.\r\n     * @param gl - The options value.\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'ConvolveIrradianceShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n        this.setShaderStage('FRAGMENT_SHADER', frag);\r\n    }\r\n}\r\nexport { ConvolveIrradianceShader };\r\n//# sourceMappingURL=ConvolveIrradianceShader.js.map","/* eslint-disable require-jsdoc */\r\nimport { GLShader } from '../GLShader';\r\nimport './GLSL/index';\r\n// @ts-ignore\r\nimport vert from './ConvolveSpecular.vert';\r\n// @ts-ignore\r\nimport frag from './ConvolveSpecular.frag';\r\n/** Shader for convolving Environment maps.\r\n * @extends GLShader\r\n * @private\r\n */\r\nclass ConvolveSpecularShader extends GLShader {\r\n    /**\r\n     * Create a GL renderer.\r\n     * @param gl - The options value.\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'ConvolveSpecularShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n        this.setShaderStage('FRAGMENT_SHADER', frag);\r\n    }\r\n}\r\nexport { ConvolveSpecularShader };\r\n//# sourceMappingURL=ConvolveSpecularShader.js.map","import { EventEmitter } from '../Utilities/index';\r\nimport { SystemDesc } from '../SystemDesc';\r\nimport { PreComputeBRDFShader } from './Shaders/PreComputeBRDFShader';\r\nimport { ConvolveIrradianceShader } from './Shaders/ConvolveIrradianceShader';\r\nimport { ConvolveSpecularShader } from './Shaders/ConvolveSpecularShader';\r\nimport { generateShaderGeomBinding } from './Drawing/GeomShaderBinding';\r\n/** Class representing a GL probe.\r\n * @private\r\n */\r\nclass GLProbe extends EventEmitter {\r\n    /**\r\n     * Create a GL probe.\r\n     * @param gl - The webgl rendering context.\r\n     * @param name - The name value.\r\n     */\r\n    constructor(gl, name) {\r\n        super();\r\n        this.__gl = gl;\r\n        const gl_casted = gl;\r\n        this.maxFragmentShaderTextureUnits = gl.getParameter(this.__gl.MAX_TEXTURE_IMAGE_UNITS);\r\n        if (!gl_casted.__quadVertexIdsBuffer)\r\n            gl_casted.setupInstancedQuad();\r\n        this.textureType = 1; // Default 2d 8 bit texture image texture.\r\n        this.textureDesc = [0, 0, 0, 0]; // To be populated by derived classes.\r\n        this.__convolved = false;\r\n        this.__fbos = [];\r\n    }\r\n    /**\r\n     * The convolveProbe method.\r\n     * @param srcGLTex - The srcGLTex value.\r\n     */\r\n    convolveProbe(srcGLTex) {\r\n        const gl = this.__gl;\r\n        const renderstate = {};\r\n        renderstate.shaderopts = { directives: ['#define ENABLE_ES3', '#define ENABLE_FLOAT_TEXTURES'] };\r\n        // Note: in testing we are running on the Google SwiftShader emulated GPU.\r\n        if (SystemDesc.deviceCategory == 'Low') {\r\n            renderstate.shaderopts.directives.push('#define SAMPLE_DELTA 0.1');\r\n            renderstate.shaderopts.directives.push('#define SAMPLE_COUNT 64u');\r\n        }\r\n        else if (SystemDesc.deviceCategory == 'Medium') {\r\n            renderstate.shaderopts.directives.push('#define SAMPLE_DELTA 0.08');\r\n            renderstate.shaderopts.directives.push('#define SAMPLE_COUNT 256u');\r\n        }\r\n        else {\r\n            renderstate.shaderopts.directives.push('#define SAMPLE_DELTA 0.025');\r\n            renderstate.shaderopts.directives.push('#define SAMPLE_COUNT 1024u');\r\n        }\r\n        this.brdfLUTTexture = gl.createTexture();\r\n        // pre-allocate enough memory for the LUT texture.\r\n        gl.bindTexture(gl.TEXTURE_2D, this.brdfLUTTexture);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RG16F, 512, 512, 0, gl.RG, gl.FLOAT, null);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        const brdfShader = new PreComputeBRDFShader(this.__gl);\r\n        const brdfShaderComp = brdfShader.compileForTarget('GLProbe', renderstate.shaderopts);\r\n        const brdfShaderBinding = generateShaderGeomBinding(this.__gl, brdfShaderComp.attrs, gl.__quadattrbuffers, gl.__quadIndexBuffer);\r\n        const brdfFboId = gl.createFramebuffer();\r\n        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, brdfFboId);\r\n        gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.brdfLUTTexture, 0);\r\n        brdfShader.bind(renderstate);\r\n        brdfShaderBinding.bind(renderstate);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        gl.viewport(0, 0, 512, 512);\r\n        gl.drawQuad();\r\n        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\r\n        gl.deleteFramebuffer(brdfFboId);\r\n        brdfShader.unbind(renderstate);\r\n        brdfShader.destroy();\r\n        // ////////////////////////////////////////////\r\n        // ConvolveIrradianceShader Shader\r\n        {\r\n            const convolveIrradianceShader = new ConvolveIrradianceShader(this.__gl);\r\n            const convolveIrradianceShaderComp = convolveIrradianceShader.compileForTarget('GLProbe', renderstate.shaderopts);\r\n            const convolveIrradianceShaderBinding = generateShaderGeomBinding(this.__gl, convolveIrradianceShaderComp.attrs, gl.__quadattrbuffers, gl.__quadIndexBuffer);\r\n            convolveIrradianceShader.bind(renderstate, 'GLProbe');\r\n            convolveIrradianceShaderBinding.bind(renderstate);\r\n            const unifs = renderstate.unifs;\r\n            srcGLTex.bindToUniform(renderstate, unifs.envMap);\r\n            // ////////////////////////////////////////////\r\n            // Irradiance Cube\r\n            const size = 64;\r\n            this.irradianceCubeTex = gl.createTexture();\r\n            gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.irradianceCubeTex);\r\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\r\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);\r\n            // Resize all the faces first.\r\n            for (let i = 0; i < 6; i++) {\r\n                gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, gl.RGBA32F, size, size, 0, gl.RGBA, gl.FLOAT, null);\r\n            }\r\n            // Attach one face of cube map\r\n            const irradianceFboId = gl.createFramebuffer();\r\n            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, irradianceFboId);\r\n            for (let i = 0; i < 6; ++i) {\r\n                gl.uniform1i(unifs.faceId.location, i);\r\n                gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, this.irradianceCubeTex, 0);\r\n                gl.viewport(0, 0, size, size); // Match the viewport to the texture size\r\n                gl.clearColor(1, 0, 0, 1);\r\n                gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n                gl.drawQuad();\r\n            }\r\n            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\r\n            gl.deleteFramebuffer(irradianceFboId);\r\n            // Note: without the mipmaps, te cube sampling seems a big broken.\r\n            // No colors.\r\n            gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\r\n        }\r\n        // ////////////////////////////////////////////\r\n        // Specular Cube Pyramid\r\n        {\r\n            const convolverShader = new ConvolveSpecularShader(this.__gl);\r\n            const covolverShaderComp = convolverShader.compileForTarget('GLProbe', renderstate.shaderopts);\r\n            const covolverShaderBinding = generateShaderGeomBinding(this.__gl, covolverShaderComp.attrs, gl.__quadattrbuffers, gl.__quadIndexBuffer);\r\n            convolverShader.bind(renderstate, 'GLProbe');\r\n            covolverShaderBinding.bind(renderstate);\r\n            const unifs = renderstate.unifs;\r\n            srcGLTex.bindToUniform(renderstate, unifs.envMap);\r\n            this.specularCubetex = gl.createTexture();\r\n            gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.specularCubetex);\r\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\r\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);\r\n            // Resize all the faces first.\r\n            const size = 256;\r\n            for (let i = 0; i < 6; i++) {\r\n                gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, gl.RGBA32F, size, size, 0, gl.RGBA, gl.FLOAT, null);\r\n            }\r\n            gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\r\n            // gl.enable(gl.TEXTURE_CUBE_MAP_SEAMLESS) // not supported in webgl\r\n            const maxMipLevels = 5;\r\n            for (let mip = 0; mip < maxMipLevels; ++mip) {\r\n                // resize framebuffer according to mip-level size.\r\n                const mipWidth = size * Math.pow(0.5, mip);\r\n                const mipHeight = size * Math.pow(0.5, mip);\r\n                // Attach one face of cube map\r\n                const fboId = gl.createFramebuffer();\r\n                gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fboId);\r\n                gl.viewport(0, 0, mipWidth, mipHeight); // Match the viewport to the texture size\r\n                const roughness = mip / (maxMipLevels - 1);\r\n                gl.uniform1f(unifs.roughness.location, roughness);\r\n                for (let i = 0; i < 6; ++i) {\r\n                    gl.uniform1i(unifs.faceId.location, i);\r\n                    gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, this.specularCubetex, mip);\r\n                    gl.drawQuad();\r\n                }\r\n                gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\r\n                gl.deleteFramebuffer(fboId);\r\n            }\r\n            convolverShader.destroy();\r\n        }\r\n        this.__convolved = true;\r\n    }\r\n    /**\r\n     * The bind method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param unif - The WebGL uniform\r\n     * @return - Returns true if the Probe was successfully bound.\r\n     */\r\n    bind(renderstate) {\r\n        const gl = this.__gl;\r\n        const { irradianceMap, prefilterMap, brdfLUT, envMapFlags } = renderstate.unifs;\r\n        if (!this.__convolved) {\r\n            // By default, all the texture units are bound to unit:0\r\n            // So if a shader contains cube maps, and they are left on unit 0\r\n            // and also the shader contains regular textures, and they are also left on unit 0\r\n            // then we get errors saying:\r\n            // GL_INVALID_OPERATION: Two textures of different types use the same sampler location.\r\n            // So bind to an unused texture unit...\r\n            if (irradianceMap) {\r\n                gl.uniform1i(irradianceMap.location, this.maxFragmentShaderTextureUnits - 1);\r\n            }\r\n            if (prefilterMap) {\r\n                gl.uniform1i(prefilterMap.location, this.maxFragmentShaderTextureUnits - 1);\r\n            }\r\n            if (envMapFlags) {\r\n                gl.uniform1i(envMapFlags.location, -1);\r\n            }\r\n            return false;\r\n        }\r\n        // Note: a cube map can never be bound to texture unit 0.\r\n        // This is because if any other samplers are left unbound\r\n        // (e.g. a diffuse sampler left unbound because no diffuse texture is assigned)\r\n        // then the texture unit binding defaults to 0.\r\n        // If the cube map is then bound to unit 0, then we get the error message:\r\n        // GL_INVALID_OPERATION: Two textures of different types use the same sampler location.\r\n        // Ths simple workaround here is to bind the BRDF Lut first, which is a TEXTURE_2D, and the cube maps\r\n        // to other units:(1 & 2).\r\n        // This error started occuring when we moved PBR binding to the shader instead of in the renderer.\r\n        // See: StandardSurfaceShader.bind\r\n        if (brdfLUT) {\r\n            const unit = renderstate.boundTextures++;\r\n            gl.activeTexture(this.__gl.TEXTURE0 + unit);\r\n            gl.bindTexture(gl.TEXTURE_2D, this.brdfLUTTexture);\r\n            gl.uniform1i(brdfLUT.location, unit);\r\n        }\r\n        if (irradianceMap) {\r\n            const unit = renderstate.boundTextures++;\r\n            const texId = this.__gl.TEXTURE0 + unit;\r\n            gl.activeTexture(texId);\r\n            gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.irradianceCubeTex);\r\n            gl.uniform1i(irradianceMap.location, unit);\r\n        }\r\n        if (prefilterMap) {\r\n            const unit = renderstate.boundTextures++;\r\n            const texId = this.__gl.TEXTURE0 + unit;\r\n            gl.activeTexture(texId);\r\n            gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.specularCubetex);\r\n            gl.uniform1i(prefilterMap.location, unit);\r\n        }\r\n        if (envMapFlags) {\r\n            gl.uniform1i(envMapFlags.location, 0);\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() {\r\n        // super.destroy()\r\n    }\r\n}\r\nexport { GLProbe };\r\n//# sourceMappingURL=GLProbe.js.map","/* eslint-disable require-jsdoc */\r\nimport { GLShader } from '../GLShader';\r\nimport './GLSL/index';\r\n// @ts-ignore\r\nimport frag from './EnvMap.frag';\r\n// @ts-ignore\r\nimport vert from './EnvMap.vert';\r\nclass EnvMapShader extends GLShader {\r\n    /**\r\n     * Create a GL shader.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'EnvMapShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n        this.setShaderStage('FRAGMENT_SHADER', frag);\r\n    }\r\n}\r\nexport { EnvMapShader };\r\n//# sourceMappingURL=EnvMapShader.js.map","import { GLProbe } from './GLProbe';\r\nimport { GLHDRImage } from './GLHDRImage';\r\nimport { EnvMapShader } from './Shaders/EnvMapShader';\r\nimport { generateShaderGeomBinding } from './Drawing/GeomShaderBinding';\r\n/** Class representing a GL environment map.\r\n * @extends GLProbe\r\n * @private\r\n */\r\nclass GLEnvMap extends GLProbe {\r\n    /**\r\n     * Create a GL env map.\r\n     * @param renderer - The renderer value.\r\n     * @param envMap - The environment map.\r\n     */\r\n    constructor(renderer, envMap) {\r\n        super(renderer.gl, 'EnvMap');\r\n        this.__srcGLTex = null;\r\n        this.__envMapShader = null;\r\n        this.__envMapShaderBinding = null;\r\n        this.__renderer = renderer;\r\n        this.__envMap = envMap;\r\n        this.__backgroundFocus = 0.0;\r\n        if (this.__envMap.isLoaded()) {\r\n            this.init();\r\n        }\r\n        else {\r\n            this.__envMap.once('loaded', (event) => {\r\n                this.init();\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    init() {\r\n        const gl = this.__renderer.gl;\r\n        if (!gl.__quadVertexIdsBuffer)\r\n            gl.setupInstancedQuad();\r\n        this.__srcGLTex = new GLHDRImage(gl, this.__envMap);\r\n        this.__envMapShader = new EnvMapShader(gl);\r\n        const envMapShaderComp = this.__envMapShader.compileForTarget('GLEnvMap', { directives: ['#define ENABLE_ES3'] });\r\n        this.__envMapShaderBinding = generateShaderGeomBinding(gl, envMapShaderComp.attrs, gl.__quadattrbuffers, gl.__quadIndexBuffer);\r\n        const headlightParam = this.__envMap.headlightModeParam;\r\n        const updateHeadlightModeFlag = () => {\r\n            const ENVMAP_FLAG_HEADLIGHT = 1; // 1<<0;\r\n            if (headlightParam.value) {\r\n                this.textureDesc[3] |= ENVMAP_FLAG_HEADLIGHT;\r\n            }\r\n            else {\r\n                this.textureDesc[3] &= ~ENVMAP_FLAG_HEADLIGHT;\r\n            }\r\n        };\r\n        updateHeadlightModeFlag();\r\n        headlightParam.on('valueChanged', () => {\r\n            updateHeadlightModeFlag();\r\n            this.emit('updated');\r\n        });\r\n        this.convolveProbe(this.__srcGLTex);\r\n        this.emit('updated');\r\n    }\r\n    /**\r\n     * The getEnvMap method.\r\n     * @return - The return value.\r\n     */\r\n    getEnvMap() {\r\n        return this.__envMap;\r\n    }\r\n    /**\r\n     * The getBackgroundFocus method.\r\n     * @return - The return value.\r\n     */\r\n    getBackgroundFocus() {\r\n        return this.__backgroundFocus;\r\n    }\r\n    /**\r\n     * The setBackgroundFocus method.\r\n     * @param val - The val param.\r\n     */\r\n    setBackgroundFocus(val) {\r\n        this.__backgroundFocus = val;\r\n        this.__renderer.requestRedraw();\r\n    }\r\n    /**\r\n     * The draw method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    draw(renderstate) {\r\n        if (this.__envMap.isLoaded()) {\r\n            const gl = this.__gl;\r\n            const debug = false;\r\n            if (debug) {\r\n                const screenQuad = this.__renderer.screenQuad;\r\n                screenQuad.bindShader(renderstate);\r\n                const debugId = 2 * 1;\r\n                switch (debugId) {\r\n                    // case 0:\r\n                    //   screenQuad.draw(renderstate, this.__srcGLTex!.__srcLDRTex!)\r\n                    //   break\r\n                    // case 1:\r\n                    //   screenQuad.draw(renderstate, this.__srcGLTex!.__srcCDMTex!)\r\n                    //   break\r\n                    case 2:\r\n                        screenQuad.draw(renderstate, this.__srcGLTex);\r\n                        break;\r\n                    case 3:\r\n                        screenQuad.draw(renderstate, this.__lodPyramid);\r\n                        break;\r\n                    case 4:\r\n                        screenQuad.draw(renderstate, this.__fbos[0].getColorTexture());\r\n                        break;\r\n                }\r\n            }\r\n            else {\r\n                // /////////////////\r\n                this.__envMapShader.bind(renderstate, 'GLEnvMap');\r\n                const unifs = renderstate.unifs;\r\n                const { envMap, focus, exposure } = renderstate.unifs;\r\n                if (envMap) {\r\n                    this.__srcGLTex.bindToUniform(renderstate, envMap);\r\n                }\r\n                if (focus)\r\n                    gl.uniform1f(focus.location, this.__backgroundFocus);\r\n                if (exposure)\r\n                    gl.uniform1f(exposure.location, renderstate.exposure);\r\n                this.__envMapShaderBinding.bind(renderstate);\r\n                gl.depthMask(false);\r\n                renderstate.bindViewports(unifs, () => {\r\n                    gl.drawQuad();\r\n                });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() {\r\n        super.destroy();\r\n        if (this.__srcGLTex)\r\n            this.__srcGLTex.destroy();\r\n    }\r\n}\r\nexport { GLEnvMap };\r\n//# sourceMappingURL=GLEnvMap.js.map","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","var root = require('./_root');\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nmodule.exports = trimmedEndIndex;\n","var trimmedEndIndex = require('./_trimmedEndIndex');\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nmodule.exports = baseTrim;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var baseTrim = require('./_baseTrim'),\n    isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n","var debounce = require('./debounce'),\n    isObject = require('./isObject');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\nmodule.exports = throttle;\n","/* eslint-disable require-jsdoc */\r\nimport { GLShader } from '../GLShader';\r\nimport './GLSL/index';\r\n// @ts-ignore\r\nimport frag from './ScreenQuad.frag';\r\n// @ts-ignore\r\nimport vert from './ScreenQuad.vert';\r\nclass ScreenQuadShader extends GLShader {\r\n    /**\r\n     * Create a GL shader.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'ScreenQuadShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n        this.setShaderStage('FRAGMENT_SHADER', frag);\r\n    }\r\n}\r\nexport { ScreenQuadShader };\r\n//# sourceMappingURL=ScreenQuadShader.js.map","import { Vec2 } from '../Math/index';\r\nimport { ScreenQuadShader } from './Shaders/ScreenQuadShader';\r\nimport { generateShaderGeomBinding } from './Drawing/GeomShaderBinding';\r\n/** Class representing a GL screen quad.\r\n * @private\r\n */\r\nclass GLScreenQuad {\r\n    /**\r\n     * Create a GL screen quad.\r\n     * @param gl - The webgl rendering context.\r\n     * @param shaderopts - shader options\r\n     */\r\n    constructor(gl, shaderopts) {\r\n        this.__gl = gl;\r\n        this.__pos = [0.0, 0.0];\r\n        this.__size = [1.0, 1.0];\r\n        this.flipY = true;\r\n        this.__glshader = new ScreenQuadShader(gl);\r\n        if (!gl.__quadVertexIdsBuffer)\r\n            gl.setupInstancedQuad();\r\n        const shaderComp = this.__glshader.compileForTarget('GLScreenQuad', shaderopts);\r\n        this.__quadBinding = generateShaderGeomBinding(this.__gl, shaderComp.attrs, gl.__quadattrbuffers, gl.__quadIndexBuffer);\r\n        this.ready = true;\r\n    }\r\n    /**\r\n     * The bind method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param texture - The texture param.\r\n     * @param pos - The pos value.\r\n     * @param size - The size value.\r\n     */\r\n    bind(renderstate, texture, pos, size) {\r\n        const unifs = renderstate.unifs;\r\n        if (texture) {\r\n            texture.bindToUniform(renderstate, renderstate.unifs.image);\r\n        }\r\n        const gl = this.__gl;\r\n        {\r\n            const unif = unifs.pos;\r\n            if (unif) {\r\n                let list = pos ? (pos instanceof Vec2 ? pos.asArray() : pos) : this.__pos;\r\n                gl.uniform2fv(unif.location, list);\r\n            }\r\n        }\r\n        {\r\n            const unif = unifs.size;\r\n            if (unif) {\r\n                let list = size ? (size instanceof Vec2 ? size.asArray() : size) : this.__size;\r\n                gl.uniform2fv(unif.location, list);\r\n            }\r\n        }\r\n        // if ('flipY' in unifs)\r\n        //     gl.uniform1i(unifs.flipY.location, this.flipY ? 1 : 0);\r\n        // if ('textureDim' in unifs)\r\n        //     gl.uniform2fv(unifs.textureDim.location, [texture.width, texture.height]);\r\n        this.__quadBinding.bind(renderstate);\r\n    }\r\n    /**\r\n     * The bindShader method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @return - The return value.\r\n     */\r\n    bindShader(renderstate) {\r\n        return this.__glshader.bind(renderstate, 'GLScreenQuad');\r\n    }\r\n    /**\r\n     * The draw method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param texture - The texture value.\r\n     * @param pos - The pos value.\r\n     * @param size - The size value.\r\n     */\r\n    draw(renderstate, texture, pos, size) {\r\n        this.bind(renderstate, texture, pos, size);\r\n        const gl = this.__gl;\r\n        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() { }\r\n}\r\nexport { GLScreenQuad };\r\n//# sourceMappingURL=GLScreenQuad.js.map","import { RefCounted } from '../../SceneTree/index';\r\nimport { generateShaderGeomBinding } from './GeomShaderBinding';\r\n/** Class representing a GL geom.\r\n * @private\r\n */\r\nclass GLGeom extends RefCounted {\r\n    /**\r\n     * Create a GL geom.\r\n     * @param gl - The webgl rendering context.\r\n     * @param geom - A geometry object\r\n     */\r\n    constructor(gl, geom) {\r\n        super();\r\n        this.genBufferOpts = {};\r\n        this.__indexBuffer = null;\r\n        this.__gl = gl;\r\n        this.__geom = geom;\r\n        this.__glattrbuffers = {};\r\n        this.__shaderBindings = {};\r\n        this.buffersDirty = true;\r\n        const geomDataChanged = (opts) => {\r\n            this.dirtyBuffers(opts);\r\n        };\r\n        this.__geom.on('geomDataChanged', geomDataChanged);\r\n        const geomDataTopologyChanged = (opts) => {\r\n            this.clearBuffers();\r\n            this.dirtyBuffers(opts);\r\n        };\r\n        this.__geom.on('geomDataTopologyChanged', geomDataTopologyChanged);\r\n    }\r\n    /**\r\n     * Returns the owned Geometry object\r\n     * @return - The geometry object.\r\n     */\r\n    getGeom() {\r\n        return this.__geom;\r\n    }\r\n    // /////////////////////////////////////\r\n    // Buffers\r\n    /**\r\n     * The dirtyBuffers method.\r\n     * @param opts - options passed when geomDataChanged is emitted. (Currently ony used by the FreehandLines tool)\r\n     */\r\n    dirtyBuffers(opts) {\r\n        this.genBufferOpts = opts;\r\n        this.buffersDirty = true;\r\n        this.emit('updated');\r\n    }\r\n    /**\r\n     * The genBuffers method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    genBuffers(renderstate) { }\r\n    /**\r\n     * The updateBuffers method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    updateBuffers(renderstate) {\r\n        this.genBuffers(renderstate);\r\n        this.buffersDirty = false;\r\n    }\r\n    // /////////////////////////////////////\r\n    // Binding\r\n    /**\r\n     * The bind method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @return - returns false if the binding failed.\r\n     */\r\n    bind(renderstate) {\r\n        if (this.__destroyed)\r\n            throw new Error('Error binding a destroyed geom');\r\n        if (this.buffersDirty)\r\n            this.updateBuffers();\r\n        let shaderBinding = this.__shaderBindings[renderstate.shaderkey];\r\n        if (!shaderBinding) {\r\n            const gl = this.__gl;\r\n            shaderBinding = generateShaderGeomBinding(gl, renderstate.attrs, this.__glattrbuffers, this.__indexBuffer);\r\n            this.__shaderBindings[renderstate.shaderkey] = shaderBinding;\r\n        }\r\n        shaderBinding.bind(renderstate);\r\n        return true;\r\n    }\r\n    /**\r\n     * The unbind method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    unbind(renderstate) {\r\n        // Unbinding a geom is important as it puts back some important\r\n        // GL state. (vertexAttribDivisor)\r\n        const shaderBinding = this.__shaderBindings[renderstate.shaderkey];\r\n        if (shaderBinding) {\r\n            shaderBinding.unbind(renderstate);\r\n        }\r\n    }\r\n    // /////////////////////////////////////\r\n    // Drawing\r\n    // Draw an item to screen.\r\n    /**\r\n     * The draw method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    draw(renderstate) {\r\n        throw new Error('Not implemented. Implement this method in a derived class.');\r\n    }\r\n    /**\r\n     * The drawInstanced method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param instanceCount - The instanceCount param.\r\n     */\r\n    drawInstanced(renderstate, instanceCount) {\r\n        throw new Error('Not implemented. Implement this method in a derived class.');\r\n    }\r\n    /**\r\n     * The bindAndDraw method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    bindAndDraw(renderstate) {\r\n        this.bind(renderstate);\r\n        this.draw(renderstate);\r\n    }\r\n    /**\r\n     * The clearBuffers method.\r\n     */\r\n    clearBuffers() {\r\n        const gl = this.__gl;\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const attrName in this.__glattrbuffers) {\r\n            const glbuffer = this.__glattrbuffers[attrName];\r\n            if (glbuffer.shared)\r\n                continue; /* This buffer is shared between geoms. do not destroy */\r\n            gl.deleteBuffer(glbuffer.buffer);\r\n        }\r\n        this.__glattrbuffers = {};\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const shaderkey in this.__shaderBindings) {\r\n            const shaderBinding = this.__shaderBindings[shaderkey];\r\n            shaderBinding.destroy();\r\n        }\r\n        this.__shaderBindings = {};\r\n    }\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() {\r\n        this.__geom.deleteMetadata('glgeom');\r\n        this.clearBuffers();\r\n        this.__destroyed = true;\r\n        //  Note: PoTree listens to this event. If moved up into RefCounted, make sure it is still emitted.\r\n        this.emit('destructing');\r\n    }\r\n}\r\nexport { GLGeom };\r\n//# sourceMappingURL=GLGeom.js.map","import { GLGeom } from './GLGeom';\r\nimport '../../SceneTree/Geometry/Mesh';\r\n/** Class representing a GL mesh.\r\n * @extends GLGeom\r\n * @private\r\n */\r\nclass GLMesh extends GLGeom {\r\n    /**\r\n     * Create a GL mesh.\r\n     * @param gl - The webgl rendering context.\r\n     * @param mesh - The mesh value.\r\n     */\r\n    constructor(gl, mesh) {\r\n        super(gl, mesh);\r\n        this.__numTriIndices = 0;\r\n        this.__indexDataType = 0;\r\n        this.__numVertices = 0;\r\n        this.__numTriangles = 0;\r\n        this.__numRenderVerts = 0;\r\n    }\r\n    // /////////////////////////////////////\r\n    // Buffers\r\n    /**\r\n     * The genBuffers method.\r\n     */\r\n    genBuffers() {\r\n        super.genBuffers();\r\n        const gl = this.__gl;\r\n        const geomBuffers = this.__geom.genBuffers();\r\n        const indices = geomBuffers.indices;\r\n        this.__numTriIndices = geomBuffers.indices.length;\r\n        if (indices instanceof Uint8Array)\r\n            this.__indexDataType = this.__gl.UNSIGNED_BYTE;\r\n        if (indices instanceof Uint16Array)\r\n            this.__indexDataType = this.__gl.UNSIGNED_SHORT;\r\n        if (indices instanceof Uint32Array)\r\n            this.__indexDataType = this.__gl.UNSIGNED_INT;\r\n        this.__numVertices = this.__geom.getNumVertices();\r\n        this.__numTriangles = indices.length / 3;\r\n        this.__numRenderVerts = geomBuffers.numRenderVerts;\r\n        if (this.__indexBuffer) {\r\n            gl.deleteBuffer(this.__indexBuffer);\r\n        }\r\n        this.__indexBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.__indexBuffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, geomBuffers.indices, gl.STATIC_DRAW);\r\n        // Create some vertex attribute buffers\r\n        // const debugAttrValues = false;\r\n        // let maxIndex;\r\n        // if (debugAttrValues)\r\n        //   maxIndex = Math.max(...indices);\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const attrName in geomBuffers.attrBuffers) {\r\n            const attrData = geomBuffers.attrBuffers[attrName];\r\n            if (this.__glattrbuffers[attrName] && this.__glattrbuffers[attrName].buffer) {\r\n                gl.deleteBuffer(this.__glattrbuffers[attrName].buffer);\r\n            }\r\n            const attrBuffer = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, attrBuffer);\r\n            gl.bufferData(gl.ARRAY_BUFFER, attrData.values, gl.STATIC_DRAW);\r\n            this.__glattrbuffers[attrName] = {\r\n                buffer: attrBuffer,\r\n                dataType: attrData.dataType,\r\n                normalized: attrData.normalized,\r\n            };\r\n            if (attrName == 'textureCoords')\r\n                this.__glattrbuffers['texCoords'] = this.__glattrbuffers['textureCoords'];\r\n        }\r\n    }\r\n    /**\r\n     * The updateBuffers method.\r\n     * @param opts - The options object.\r\n     */\r\n    updateBuffers(renderstate) {\r\n        const gl = this.__gl;\r\n        if (this.__numVertices != this.__geom.getNumVertices()) {\r\n            this.genBuffers();\r\n            return;\r\n        }\r\n        const geomBuffers = this.__geom.genBuffers({ includeIndices: false });\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const attrName in geomBuffers.attrBuffers) {\r\n            const attrData = geomBuffers.attrBuffers[attrName];\r\n            const glattr = this.__glattrbuffers[attrName];\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, glattr.buffer);\r\n            gl.bufferData(gl.ARRAY_BUFFER, attrData.values, gl.STATIC_DRAW);\r\n        }\r\n        this.buffersDirty = false;\r\n    }\r\n    /**\r\n     * The clearBuffers method.\r\n     */\r\n    clearBuffers() {\r\n        const gl = this.__gl;\r\n        gl.deleteBuffer(this.__indexBuffer);\r\n        this.__indexBuffer = null;\r\n        super.clearBuffers();\r\n    }\r\n    // ////////////////////////////////\r\n    // Regular Drawing.\r\n    /**\r\n     * Draw an item to screen.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    draw(renderstate) {\r\n        this.__gl.drawElements(this.__gl.TRIANGLES, this.__numTriIndices, this.__indexDataType, 0);\r\n    }\r\n    /**\r\n     * The drawInstanced method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param instanceCount - The instanceCount value.\r\n     */\r\n    drawInstanced(renderstate, instanceCount) {\r\n        const gl = this.__gl;\r\n        gl.drawElementsInstanced(this.__gl.TRIANGLES, this.__numTriIndices, this.__indexDataType, 0, instanceCount);\r\n    }\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() {\r\n        super.destroy();\r\n        const gl = this.__gl;\r\n        gl.deleteBuffer(this.__indexBuffer);\r\n        this.__indexBuffer = null;\r\n        // if (this.__wireframesVao)\r\n        //     gl.deleteVertexArray(this.__wireframesVao);\r\n        // if (this.__hardEdgesVao)\r\n        //     gl.deleteVertexArray(this.__hardEdgesVao);\r\n    }\r\n}\r\nexport { GLMesh };\r\n//# sourceMappingURL=GLMesh.js.map","import { Color } from '../Math/index';\r\nimport { Plane, ParameterOwner, BaseImage, NumberParameter, ColorParameter } from '../SceneTree/index';\r\nimport { GLHDRImage } from './GLHDRImage';\r\nimport { GLTexture2D } from './GLTexture2D';\r\nimport { GLFbo } from './GLFbo';\r\nimport { GLMesh } from './Drawing/GLMesh';\r\nimport { VLHImage } from '../SceneTree/Images/VLHImage';\r\nimport { ResizedEvent } from '../Utilities/Events/ResizedEvent';\r\nconst FRAMEBUFFER = {\r\n    MSAA_RENDERBUFFER: 0,\r\n    COLORBUFFER: 1,\r\n    DEPTHBUFFER: 2,\r\n};\r\n/**\r\n * Class representing a GL base viewport.\r\n * @extends ParameterOwner\r\n * @private\r\n */\r\nclass GLBaseViewport extends ParameterOwner {\r\n    /**\r\n     * Create a GL base viewport.\r\n     * @param renderer - The renderer value.\r\n     */\r\n    constructor(renderer) {\r\n        super();\r\n        this.__fbo = null;\r\n        this.offscreenBuffer = null;\r\n        this.depthTexture = null;\r\n        this.__backgroundTexture = null;\r\n        this.__backgroundGLTexture = null;\r\n        this.offscreenBufferFbo = null;\r\n        this.__width = 0;\r\n        this.__height = 0;\r\n        this.__canvasWidth = 0;\r\n        this.__canvasHeight = 0;\r\n        this.fb = null;\r\n        this.depthBuffer = null;\r\n        this.EXT_frag_depth = null;\r\n        this.depthRange = [0, 0];\r\n        /**\r\n         * @member backgroundColorParam - Changes background color of the scene\r\n         */\r\n        this.backgroundColorParam = new ColorParameter('BackgroundColor', new Color('#eeeeee')); // owned by viewport\r\n        /**\r\n         * @member doubleClickTimeParam - The maximum time between clicks for a double click to be registered.\r\n         */\r\n        this.doubleClickTimeParam = new NumberParameter('DoubleClickTimeMS', 200);\r\n        this.renderer = renderer;\r\n        this.__renderer = renderer;\r\n        this.addParameter(this.doubleClickTimeParam);\r\n        const gl = this.__renderer.gl;\r\n        this.__gl = gl;\r\n        this.quad = new GLMesh(gl, new Plane(1, 1));\r\n        // //////////////////////////////////\r\n        // Setup Offscreen Render Targets\r\n        // Note: On low end devices, such as Oculus, blitting the multi-sampled depth buffer is throwing errors,\r\n        // and so we are simply disabling silhouettes on all low end devices now.\r\n        if (gl.name == 'webgl2') {\r\n            this.offscreenBuffer = new GLTexture2D(gl, {\r\n                type: 'UNSIGNED_BYTE',\r\n                format: 'RGBA',\r\n                filter: 'LINEAR',\r\n                width: 4,\r\n                height: 4,\r\n            });\r\n            this.depthTexture = new GLTexture2D(gl, {\r\n                type: gl.UNSIGNED_INT_24_8,\r\n                format: gl.DEPTH_STENCIL,\r\n                internalFormat: gl.name == 'webgl2' ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT,\r\n                filter: gl.NEAREST,\r\n                wrap: gl.CLAMP_TO_EDGE,\r\n                width: 4,\r\n                height: 4,\r\n            });\r\n            // this.offscreenBufferFbo = new GLFbo(gl, this.offscreenBuffer, true)\r\n            // this.offscreenBufferFbo.setClearColor(this.backgroundColorParam.value.asArray())\r\n        }\r\n        this.highlightedGeomsBuffer = new GLTexture2D(gl, {\r\n            type: 'UNSIGNED_BYTE',\r\n            format: 'RGBA',\r\n            filter: 'NEAREST',\r\n            width: 4,\r\n            height: 4,\r\n        });\r\n        this.highlightedGeomsBufferFbo = new GLFbo(gl, this.highlightedGeomsBuffer, true);\r\n        this.highlightedGeomsBufferFbo.setClearColor(new Color(0, 0, 0, 0));\r\n        // //////////////////////////////////\r\n        // Setup Camera Manipulator\r\n        const processBGValue = () => {\r\n            const value = this.backgroundColorParam.value;\r\n            if (value instanceof BaseImage) {\r\n                if (value instanceof VLHImage) {\r\n                    this.__backgroundTexture = value;\r\n                    this.__backgroundGLTexture = new GLHDRImage(gl, value);\r\n                }\r\n                else {\r\n                    this.__backgroundTexture = value;\r\n                    this.__backgroundGLTexture = new GLTexture2D(gl, value);\r\n                }\r\n            }\r\n            else if (value instanceof Color) {\r\n                if (this.__backgroundGLTexture) {\r\n                    this.__backgroundGLTexture.destroy();\r\n                    this.__backgroundGLTexture = null;\r\n                    this.__backgroundTexture = null;\r\n                }\r\n                if (this.offscreenBufferFbo) {\r\n                    this.offscreenBufferFbo.setClearColor(new Color(value.asArray()));\r\n                }\r\n            }\r\n            else {\r\n                console.warn('Invalid background:' + value);\r\n            }\r\n            this.emit('updated');\r\n        };\r\n        processBGValue();\r\n        this.backgroundColorParam.on('valueChanged', processBGValue);\r\n    }\r\n    /**\r\n     * The getWidth method.\r\n     * @return - The return value.\r\n     */\r\n    getWidth() {\r\n        return this.__width;\r\n    }\r\n    /**\r\n     * The getHeight method.\r\n     * @return - The return value.\r\n     */\r\n    getHeight() {\r\n        return this.__height;\r\n    }\r\n    /**\r\n     * The resize method.\r\n     * @param canvasWidth - The canvasWidth value.\r\n     * @param canvasHeight - The canvasHeight value.\r\n     */\r\n    resize(canvasWidth, canvasHeight) {\r\n        if (this.__canvasWidth == canvasWidth && this.__canvasHeight == canvasHeight)\r\n            return;\r\n        this.__canvasWidth = canvasWidth;\r\n        this.__canvasHeight = canvasHeight;\r\n        this.__width = canvasWidth;\r\n        this.__height = canvasHeight;\r\n        this.resizeRenderTargets(canvasWidth, canvasHeight);\r\n        const event = new ResizedEvent(this.__width, this.__height);\r\n        this.emit('resized', event);\r\n    }\r\n    /**\r\n     * Resize any offscreen render targets.\r\n     * > Note: Values ,ay not be the entire canvas with if multiple viewports exists.\r\n     * @param width - The width used by this viewport.\r\n     * @param height - The height  used by this viewport.\r\n     */\r\n    resizeRenderTargets(width, height) {\r\n        // Note: On low end devices, such as Oculus, blitting the multi-sampled depth buffer is throwing errors,\r\n        // and so we are simply disabling silhouettes on all low end devices now.\r\n        const gl = this.__renderer.gl;\r\n        if (this.renderer.outlineThickness > 0 && gl.name == 'webgl2') {\r\n            if (this.fb) {\r\n                gl.deleteFramebuffer(this.fb[FRAMEBUFFER.MSAA_RENDERBUFFER]);\r\n                gl.deleteFramebuffer(this.fb[FRAMEBUFFER.COLORBUFFER]);\r\n                gl.deleteFramebuffer(this.fb[FRAMEBUFFER.DEPTHBUFFER]);\r\n                if (this.colorRenderbuffer)\r\n                    gl.deleteRenderbuffer(this.colorRenderbuffer);\r\n                if (this.depthBuffer)\r\n                    gl.deleteRenderbuffer(this.depthBuffer);\r\n            }\r\n            // Create and bind the framebuffer\r\n            this.offscreenBuffer.resize(width, height);\r\n            this.depthTexture.resize(width, height);\r\n            this.fb = [];\r\n            this.fb[FRAMEBUFFER.MSAA_RENDERBUFFER] = gl.createFramebuffer();\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.fb[FRAMEBUFFER.MSAA_RENDERBUFFER]);\r\n            this.colorRenderbuffer = gl.createRenderbuffer();\r\n            // Create the color buffer\r\n            gl.bindRenderbuffer(gl.RENDERBUFFER, this.colorRenderbuffer);\r\n            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 4, gl.RGBA8, width, height);\r\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, this.colorRenderbuffer);\r\n            this.depthBuffer = gl.createRenderbuffer();\r\n            gl.bindRenderbuffer(gl.RENDERBUFFER, this.depthBuffer);\r\n            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 4, gl.DEPTH24_STENCIL8, width, height);\r\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.depthBuffer);\r\n            // //////////////////////////////////\r\n            // COLORBUFFER\r\n            this.fb[FRAMEBUFFER.COLORBUFFER] = gl.createFramebuffer();\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.fb[FRAMEBUFFER.COLORBUFFER]);\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.offscreenBuffer.glTex, 0);\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n            // //////////////////////////////////\r\n            // DEPTHBUFFER\r\n            // Create the depth texture that will be bitted to.\r\n            this.fb[FRAMEBUFFER.DEPTHBUFFER] = gl.createFramebuffer();\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.fb[FRAMEBUFFER.DEPTHBUFFER]);\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, this.depthTexture.glTex, 0);\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n            const check = gl.checkFramebufferStatus(gl.name == 'webgl2' ? gl.DRAW_FRAMEBUFFER : gl.FRAMEBUFFER);\r\n            if (check !== gl.FRAMEBUFFER_COMPLETE) {\r\n                switch (check) {\r\n                    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\r\n                        throw new Error('The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.');\r\n                    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\r\n                        throw new Error('There is no attachment.');\r\n                    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\r\n                        throw new Error('Height and width of the attachment are not the same.');\r\n                    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\r\n                        throw new Error('The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.');\r\n                    case 36061: // gl.GL_FRAMEBUFFER_UNSUPPORTED:\r\n                        throw new Error('The framebuffer is unsupported');\r\n                    default:\r\n                        throw new Error('Incomplete Frambuffer');\r\n                }\r\n            }\r\n        }\r\n        if (this.highlightedGeomsBuffer) {\r\n            this.highlightedGeomsBuffer.resize(width, height);\r\n        }\r\n    }\r\n    /**\r\n     * The draw method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    draw(renderstate) {\r\n        const gl = this.__renderer.gl;\r\n        const prevRendertarget = renderstate.boundRendertarget;\r\n        if (this.renderer.outlineThickness > 0 && gl.name == 'webgl2') {\r\n            if (!this.fb)\r\n                this.resizeRenderTargets(this.__width, this.__height);\r\n            const frameBuffer = this.fb[FRAMEBUFFER.MSAA_RENDERBUFFER];\r\n            gl.bindFramebuffer(gl.name == 'webgl2' ? gl.DRAW_FRAMEBUFFER : gl.FRAMEBUFFER, frameBuffer);\r\n            renderstate.boundRendertarget = frameBuffer;\r\n        }\r\n        else {\r\n            // Make sure the default fbo is bound\r\n            // Note: Sometimes an Fbo is left bound\r\n            // from another op(like resizing, populating etc..)\r\n            // We need to unbind here to ensure rendering is to the\r\n            // right target.\r\n            if (!renderstate.boundRendertarget)\r\n                gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        }\r\n        gl.viewport(0, 0, this.__width, this.__height);\r\n        const bg = this.backgroundColorParam.value.asArray();\r\n        gl.clearColor(bg[0], bg[1], bg[2], bg[3]);\r\n        // Note: in Chrome's macOS the alpha channel causes strange\r\n        // compositing issues. Here where we disable the alpha channel\r\n        // in the color mask which addresses the issues on MacOS.\r\n        // To see the artifacts, pass 'true' as the 4th parameter, and\r\n        // open a simple testing scene containing a grid. Moving the\r\n        // camera causes a ghosting effect to be left behind.\r\n        gl.colorMask(true, true, true, false);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        gl.enable(gl.DEPTH_TEST);\r\n        this.__renderer.drawScene(renderstate);\r\n        this.drawHighlights(renderstate);\r\n        // //////////////////////////////////\r\n        // Post processing.\r\n        if (this.fb && gl.name == 'webgl2') {\r\n            // \"blit\" the scene into the color buffer\r\n            const gl2 = gl;\r\n            gl2.bindFramebuffer(gl2.READ_FRAMEBUFFER, this.fb[FRAMEBUFFER.MSAA_RENDERBUFFER]);\r\n            gl2.bindFramebuffer(gl2.DRAW_FRAMEBUFFER, this.fb[FRAMEBUFFER.COLORBUFFER]);\r\n            gl2.clearBufferfv(gl2.COLOR, 0, [0.0, 0.0, 0.0, 0.0]);\r\n            gl2.blitFramebuffer(0, 0, this.__width, this.__height, 0, 0, this.__width, this.__height, gl2.COLOR_BUFFER_BIT, gl2.LINEAR);\r\n            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, prevRendertarget);\r\n            renderstate.boundRendertarget = prevRendertarget;\r\n            gl.viewport(0, 0, this.__width, this.__height);\r\n            gl.disable(gl.DEPTH_TEST);\r\n            const screenQuad = this.__renderer.screenQuad;\r\n            screenQuad.bindShader(renderstate);\r\n            screenQuad.draw(renderstate, this.offscreenBuffer);\r\n        }\r\n    }\r\n    /**\r\n     * Draws the Silhouettes around geometries.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @private\r\n     */\r\n    drawSilhouettes(renderstate) {\r\n        // We cannot render silhouettes in iOS because EXT_frag_depth is not supported\r\n        // and without it, we cannot draw lines over the top of geometries.\r\n        // Note: On low end devices, such as Oculus, blitting the multi-sampled depth buffer is throwing errors,\r\n        // and so we are simply disabling silhouettes on all low end devices now.\r\n        const gl = this.__renderer.gl;\r\n        if (this.renderer.outlineThickness == 0 || gl.name != 'webgl2' || !this.fb)\r\n            return;\r\n        const gl2 = gl;\r\n        gl2.bindFramebuffer(gl2.READ_FRAMEBUFFER, this.fb[FRAMEBUFFER.MSAA_RENDERBUFFER]);\r\n        gl2.bindFramebuffer(gl2.DRAW_FRAMEBUFFER, this.fb[FRAMEBUFFER.DEPTHBUFFER]);\r\n        gl2.clearBufferfv(gl2.COLOR, 0, [1, 1, 1, 1]);\r\n        gl2.blitFramebuffer(0, 0, this.__width, this.__height, 0, 0, this.__width, this.__height, gl2.DEPTH_BUFFER_BIT, gl2.NEAREST);\r\n        // Rebind the MSAA RenderBuffer.\r\n        gl2.bindFramebuffer(gl2.DRAW_FRAMEBUFFER, this.fb[FRAMEBUFFER.MSAA_RENDERBUFFER]);\r\n        renderstate.boundRendertarget = this.fb[FRAMEBUFFER.MSAA_RENDERBUFFER];\r\n        gl2.viewport(0, 0, this.__width, this.__height);\r\n        if (this.renderer.outlineThickness == 0)\r\n            return;\r\n        // ////////////////////////////////////\r\n        //\r\n        gl2.enable(gl2.BLEND);\r\n        gl2.blendEquation(gl2.FUNC_ADD);\r\n        gl2.blendFunc(gl2.SRC_ALPHA, gl2.ONE_MINUS_SRC_ALPHA); // For add\r\n        gl2.disable(gl2.DEPTH_TEST);\r\n        gl2.depthMask(false);\r\n        this.renderer.silhouetteShader.bind(renderstate);\r\n        const unifs = renderstate.unifs;\r\n        this.depthTexture.bindToUniform(renderstate, unifs.depthTexture);\r\n        gl2.uniform2f(unifs.screenSize.location, this.__width, this.__height);\r\n        gl2.uniform1f(unifs.outlineThickness.location, this.renderer.outlineThickness);\r\n        const oc = this.renderer.outlineColor.asArray();\r\n        gl2.uniform4f(unifs.outlineColor.location, oc[0], oc[1], oc[2], oc[3]);\r\n        gl2.uniform1f(unifs.outlineSensitivity.location, this.renderer.outlineSensitivity);\r\n        gl2.uniform1f(unifs.outlineDepthBias.location, this.renderer.outlineDepthBias);\r\n        gl2.uniform2f(unifs.depthRange.location, this.depthRange[0], this.depthRange[1]);\r\n        this.quad.bindAndDraw(renderstate);\r\n        gl2.enable(gl2.DEPTH_TEST);\r\n        gl2.depthMask(true);\r\n    }\r\n    /**\r\n     * Draws the highlights around geometries.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @private\r\n     */\r\n    drawHighlights(renderstate) {\r\n        if (this.highlightedGeomsBufferFbo) {\r\n            const gl = this.__renderer.gl;\r\n            this.highlightedGeomsBufferFbo.bindForWriting(renderstate);\r\n            this.highlightedGeomsBufferFbo.clear();\r\n            gl.disable(gl.BLEND);\r\n            gl.enable(gl.DEPTH_TEST);\r\n            gl.depthFunc(gl.LESS);\r\n            gl.depthMask(true);\r\n            renderstate.glShader = null; // clear any bound shaders.\r\n            this.__renderer.drawHighlightedGeoms(renderstate);\r\n            // Unbind and restore the bound fbo\r\n            this.highlightedGeomsBufferFbo.unbindForWriting(renderstate);\r\n            // Now render the outlines to the entire screen.\r\n            gl.viewport(0, 0, this.__width, this.__height);\r\n            // Turn this on to debug the highlight data buffer.\r\n            const debugHighlightBuffer = false;\r\n            if (debugHighlightBuffer) {\r\n                this.__renderer.screenQuad.bindShader(renderstate);\r\n                this.highlightedGeomsBuffer.bindToUniform(renderstate, renderstate.unifs.image);\r\n                this.__renderer.screenQuad.draw(renderstate);\r\n            }\r\n            else {\r\n                this.renderer.highlightsShader.bind(renderstate);\r\n                gl.enable(gl.BLEND);\r\n                gl.blendEquation(gl.FUNC_ADD);\r\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA); // For add\r\n                const unifs = renderstate.unifs;\r\n                gl.uniform1f(unifs.outlineThickness.location, this.renderer.highlightOutlineThickness);\r\n                this.highlightedGeomsBuffer.bindToUniform(renderstate, unifs.highlightDataTexture);\r\n                gl.uniform2f(unifs.highlightDataTextureSize.location, renderstate.region[2], renderstate.region[3]);\r\n                this.quad.bindAndDraw(renderstate);\r\n                gl.disable(gl.BLEND);\r\n            }\r\n        }\r\n    }\r\n    // ///////////////////////////\r\n    // Events\r\n    /**\r\n     * The getManipulator method.\r\n     * @return - The return value.\r\n     */\r\n    getManipulator() {\r\n        return this.manipulator;\r\n    }\r\n    /**\r\n     * Sets the tool that will receive mouse, touch and keyboard events from the viewport.\r\n     * @param tool - The manipulator value.\r\n     */\r\n    setManipulator(tool) {\r\n        if (this.manipulator != tool) {\r\n            if (this.manipulator && this.manipulator.deactivateTool) {\r\n                this.manipulator.deactivateTool();\r\n            }\r\n            this.manipulator = tool;\r\n            if (this.manipulator.activateTool) {\r\n                this.manipulator.activateTool();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Handler of the `pointerdown` event fired when the pointer device is initially pressed.\r\n     *\r\n     * @param event - The DOM event produced by a pointer\r\n     */\r\n    onPointerDown(event) {\r\n        console.warn('@GLBaseViewport#onPointerDown - Implement me!');\r\n    }\r\n    /**\r\n     * Handler of the `pointerup` event fired when the pointer device is finally released.\r\n     *\r\n     * @param event - The DOM event produced by a pointer\r\n     */\r\n    onPointerUp(event) {\r\n        console.warn('@GLBaseViewport#onPointerUp - Implement me!');\r\n    }\r\n    /**\r\n     * Handler of the `pointermove` event fired when the pointer device changes coordinates, and the pointer has not been cancelled\r\n     *\r\n     * @param event - The DOM event produced by a pointer\r\n     */\r\n    onPointerMove(event) {\r\n        console.warn('@GLBaseViewport#onPointerMove - Implement me!');\r\n    }\r\n    /**\r\n     * Invoked when the mouse pointer is moved into this viewport.\r\n     *\r\n     * @param event - The DOM event produced by a pointer\r\n     */\r\n    onPointerEnter(event) {\r\n        console.warn('@GLBaseViewport#onPointerEnter - Implement me!');\r\n    }\r\n    /**\r\n     * Invoked when the mouse pointer is moved out of this viewport.\r\n     *\r\n     * @param event - The DOM event produced by a pointer\r\n     */\r\n    onPointerLeave(event) {\r\n        console.warn('@GLBaseViewport#onPointerLeave - Implement me!');\r\n    }\r\n    /**\r\n     * Invoked when the mouse pointer is moved out of an element.\r\n     * @param event - The event that occurs.\r\n     */\r\n    onMouseLeave(event) { }\r\n    /**\r\n     * Invoked when the user is pressing a key on the keyboard.\r\n     * @param event - The event that occurs.\r\n     */\r\n    onKeyDown(event) { }\r\n    /**\r\n     * Causes an event to occur  when the user releases a key on the keyboard.\r\n     * @param event - The event that occurs.\r\n     */\r\n    onKeyUp(event) { }\r\n}\r\nexport { GLBaseViewport, FRAMEBUFFER };\r\n//# sourceMappingURL=GLBaseViewport.js.map","import { BaseEvent } from '../BaseEvent';\r\nclass ViewChangedEvent extends BaseEvent {\r\n    constructor(interfaceType, viewXfo) {\r\n        super();\r\n        this.interfaceType = interfaceType;\r\n        this.viewXfo = viewXfo;\r\n    }\r\n}\r\nexport { ViewChangedEvent };\r\n//# sourceMappingURL=ViewChangedEvent.js.map","class IntersectionData {\r\n    constructor(screenPos, pointerRay, intersectionPos, geomData, geomItemAndDist) {\r\n        this.screenPos = screenPos;\r\n        this.pointerRay = pointerRay;\r\n        this.intersectionPos = intersectionPos;\r\n        this.geomData = geomData;\r\n        this.geomItem = geomItemAndDist.geomItem;\r\n        this.dist = geomItemAndDist.dist;\r\n    }\r\n}\r\nexport { IntersectionData };\r\n//# sourceMappingURL=IntersectionData.js.map","/* eslint-disable guard-for-in */\r\nimport { Vec2, Vec3, Ray, Mat4, Xfo, Color } from '../Math/index';\r\nimport { Camera } from '../SceneTree/index';\r\nimport { GLBaseViewport } from './GLBaseViewport';\r\nimport { GLFbo } from './GLFbo';\r\nimport { GLTexture2D } from './GLTexture2D';\r\nimport { CameraManipulator } from '../SceneTree/index';\r\nimport { ResizedEvent } from '../Utilities/Events/ResizedEvent';\r\nimport { ViewChangedEvent } from '../Utilities/Events/ViewChangedEvent';\r\nimport { POINTER_TYPES } from '../Utilities/Events/ZeaPointerEvent';\r\nimport { IntersectionData } from '../Utilities/IntersectionData';\r\nlet activeViewport = null;\r\n/**\r\n * Class representing a GL viewport.\r\n *\r\n * **Events**\r\n * * **resized:** Emitted when the GLViewport resizes\r\n * * **updated:** Emitted when the GLViewport needs updating. The Renderer will trigger a redraw when this occurs.\r\n * * **viewChanged:** Emitted when the view changes. Usually caused by the camera moving.\r\n * * **pointerDoublePressed:** Emitted when the user double clicks with the mouse, or double taps in the viewport.\r\n * * **pointerDown:** Emitted when the user presses a pointer\r\n * * **pointerUp:** Emitted when the user releases a pointer\r\n * * **pointerOverGeom:** Emitted when the pointer is moved over a geometry\r\n * * **pointerLeaveGeom:** Emitted when the pointer is moved off a geometry\r\n * * **pointerMove:** Emitted when the pointer is moved\r\n * * **pointerEnter:** Emitted when the pointer is moved into thg viewport\r\n * * **pointerLeave:** Emitted when the mouse leaves the viewport.\r\n * * **keyDown:** Emitted when the user presses a key on the keyboard\r\n * * **keyUp:** Emitted when the user releases a key on the keyboard\r\n * * **touchCancel:** Emitted when the user cancels a touch interaction\r\n *\r\n * @extends GLBaseViewport\r\n */\r\nclass GLViewport extends GLBaseViewport {\r\n    /**\r\n     * Create a GL viewport.\r\n     * @param renderer - The renderer value.\r\n     * @param name - The name value.\r\n     * @param width - The width of the viewport\r\n     * @param height - The height of the viewport\r\n     */\r\n    constructor(renderer, name, width, height) {\r\n        super(renderer);\r\n        this.debugHighlightedGeomsBuffer = false;\r\n        this.__x = 0;\r\n        this.__y = 0;\r\n        this.region = [0, 0, 0, 0];\r\n        this.__cameraXfo = new Xfo();\r\n        this.__cameraMat = new Mat4();\r\n        this.__viewMat = new Mat4();\r\n        this.__geomDataBufferInvalid = true;\r\n        this.__screenPos = null;\r\n        this.__name = name;\r\n        this.__projectionMatrix = new Mat4();\r\n        this.__frustumDim = new Vec2();\r\n        // Layout coords, x:[0..1], y:[0..1]\r\n        this.__bl = new Vec2(0, 0);\r\n        this.__tr = new Vec2(1, 1);\r\n        this.__prevDownTime = 0;\r\n        // //////////////////////////////////\r\n        // Setup GeomData Fbo\r\n        this.__geomDataBufferSizeFactor = 1;\r\n        this.debugGeomShader = false;\r\n        const gl = this.__renderer.gl;\r\n        this.__geomDataBuffer = new GLTexture2D(gl, {\r\n            type: renderer.floatGeomBuffer ? 'FLOAT' : 'UNSIGNED_BYTE',\r\n            format: 'RGBA',\r\n            filter: 'NEAREST',\r\n            width: width <= 1 ? 1 : Math.floor(width / this.__geomDataBufferSizeFactor),\r\n            height: height <= 1 ? 1 : Math.floor(height / this.__geomDataBufferSizeFactor),\r\n        });\r\n        this.__geomDataBufferFbo = new GLFbo(gl, this.__geomDataBuffer, true);\r\n        this.__geomDataBufferFbo.setClearColor(new Color(0, 0, 0, 0));\r\n        // //////////////////////////////////\r\n        // Setup Camera Manipulator\r\n        // Each user has a separate camera, and so the default\r\n        //  camera cannot be part of the scene.\r\n        this.__camera = new Camera('DefaultCamera');\r\n        this.setCamera(this.__camera);\r\n        this.setManipulator(new CameraManipulator({ renderer }));\r\n        this.resize(width, height);\r\n    }\r\n    /**\r\n     * The getBl method.\r\n     * @return - The return value.\r\n     */\r\n    getBl() {\r\n        return this.__bl;\r\n    }\r\n    /**\r\n     * The setBl method.\r\n     * @param bl - The bl value.\r\n     */\r\n    setBl(bl) {\r\n        this.__bl.x = bl;\r\n        this.__bl.y = bl; // TODO: check. Before this method was 1 line, implying __bl is a number type not a vec2\r\n        this.resize(this.__canvasWidth, this.__canvasHeight);\r\n    }\r\n    /**\r\n     * The getTr method.\r\n     * @return - The return value.\r\n     */\r\n    getTr() {\r\n        return this.__tr;\r\n    }\r\n    /**\r\n     * The setTr method.\r\n     * @param tr - The tr value.\r\n     */\r\n    setTr(tr) {\r\n        this.__tr.x = tr;\r\n        this.__tr.y = tr; // TODO: check. Before this method was 1 line, implying __bl is a number type not a vec2\r\n        this.resize(this.__canvasWidth, this.__canvasHeight);\r\n    }\r\n    /**\r\n     * The getPosX method.\r\n     * @return - The return value.\r\n     */\r\n    getPosX() {\r\n        return this.__x;\r\n    }\r\n    /**\r\n     * The getPosY method.\r\n     * @return - The return value.\r\n     */\r\n    getPosY() {\r\n        return this.__y;\r\n    }\r\n    /**\r\n     * Dynamically resizes viewport.\r\n     *\r\n     * @param canvasWidth - The canvasWidth value.\r\n     * @param canvasHeight - The canvasHeight value.\r\n     */\r\n    resize(canvasWidth, canvasHeight) {\r\n        if (this.__canvasWidth == canvasWidth && this.__canvasHeight == canvasHeight)\r\n            return;\r\n        this.__canvasWidth = canvasWidth;\r\n        this.__canvasHeight = canvasHeight;\r\n        this.__x = canvasWidth * this.__bl.x;\r\n        this.__y = canvasWidth * this.__bl.y;\r\n        this.__width = canvasWidth * this.__tr.x - canvasWidth * this.__bl.x;\r\n        this.__height = canvasHeight * this.__tr.y - canvasHeight * this.__bl.y;\r\n        this.region = [this.__x, this.__y, this.__width, this.__height];\r\n        this.resizeRenderTargets(this.__width, this.__height);\r\n        if (this.__camera)\r\n            this.__updateProjectionMatrix();\r\n        const event = new ResizedEvent(this.__width, this.__height);\r\n        this.emit('resized', event);\r\n    }\r\n    /**\r\n     * Resize any offscreen render targets.\r\n     * > Note: Values ,ay not be the entire canvas with if multiple viewports exists.\r\n     * @param width - The width used by this viewport.\r\n     * @param height - The height  used by this viewport.\r\n     */\r\n    resizeRenderTargets(width, height) {\r\n        super.resizeRenderTargets(width, height);\r\n        if (this.__geomDataBufferFbo) {\r\n            this.__geomDataBuffer.resize(Math.floor(this.__width / this.__geomDataBufferSizeFactor), Math.floor(this.__height / this.__geomDataBufferSizeFactor));\r\n            this.renderGeomDataFbo();\r\n        }\r\n    }\r\n    /**\r\n     * Returns current camera object\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getCamera() {\r\n        return this.__camera;\r\n    }\r\n    /**\r\n     * Sets current camera object\r\n     *\r\n     * @param camera - The camera value.\r\n     */\r\n    setCamera(camera) {\r\n        this.__camera = camera;\r\n        this.depthRange = [this.__camera.getNear(), this.__camera.getFar()];\r\n        const globalXfoParam = camera.globalXfoParam;\r\n        const getCameraParams = () => {\r\n            this.__cameraXfo = globalXfoParam.value;\r\n            this.__cameraMat = this.__cameraXfo.toMat4();\r\n            this.__viewMat = this.__cameraMat.inverse();\r\n        };\r\n        getCameraParams();\r\n        globalXfoParam.on('valueChanged', () => {\r\n            getCameraParams();\r\n            this.invalidateGeomDataBuffer();\r\n            this.emit('updated');\r\n            const event = new ViewChangedEvent('CameraAndPointer', this.__cameraXfo);\r\n            this.emit('viewChanged', event);\r\n        });\r\n        this.__camera.on('projectionParamChanged', () => {\r\n            this.__updateProjectionMatrix();\r\n            this.depthRange = [this.__camera.getNear(), this.__camera.getFar()];\r\n            this.emit('updated');\r\n        });\r\n        this.__updateProjectionMatrix();\r\n    }\r\n    // eslint-disable-next-line require-jsdoc\r\n    __updateProjectionMatrix() {\r\n        const aspect = this.__width / this.__height;\r\n        this.__camera.updateProjectionMatrix(this.__projectionMatrix, aspect);\r\n        const frustumH = Math.tan(this.__camera.getFov() / 2.0) * this.__camera.getNear() * 2.0;\r\n        const frustumW = frustumH * aspect;\r\n        this.__frustumDim.set(frustumW, frustumH);\r\n    }\r\n    /**\r\n     * The getProjectionMatrix method.\r\n     * @return - The return projection matrix for the viewport.\r\n     */\r\n    getProjectionMatrix() {\r\n        return this.__projectionMatrix;\r\n    }\r\n    /**\r\n     * The getProjectionMatrix method.\r\n     * @return - The return projection matrix for the viewport.\r\n     */\r\n    getViewMatrix() {\r\n        return this.__viewMat;\r\n    }\r\n    /**\r\n     * Calculates a new camera position that frames all the items passed in `treeItems` array, moving\r\n     * the camera to a point where we can see all of them.\r\n     * > See Camera.frameView\r\n     * @param treeItems - The array of TreeItem.\r\n     */\r\n    frameView(treeItems) {\r\n        if (this.__width > 0 && this.__height > 0) {\r\n            this.__camera.frameView(this, treeItems);\r\n        }\r\n        else {\r\n            // Sometimes thew renderer is not yet setup, so here we\r\n            // wait till the window is resized and try again.\r\n            this.once('resized', () => this.frameView());\r\n        }\r\n    }\r\n    /**\r\n     * Compute a ray into the scene based on a mouse coordinate.\r\n     * @param screenPos - The screen position.\r\n     * @return - The return value.\r\n     */\r\n    calcRayFromScreenPos(screenPos) {\r\n        // Convert the raster coordinates to screen space ([0,{w|h}] -> [-1,1]\r\n        // - Note: The raster vertical is inverted wrt OGL screenspace Y\r\n        const topy = this.__canvasHeight * (1.0 - this.__tr.y);\r\n        let sx = (screenPos.x - this.__x) / this.__width;\r\n        let sy = (screenPos.y - topy) / this.__height;\r\n        sx = sx * 2.0 - 1.0;\r\n        sy = sy * 2.0 - 1.0;\r\n        // Transform the origin from camera local to world space\r\n        const cameraMat = this.__cameraMat;\r\n        const projInv = this.__projectionMatrix.inverse();\r\n        if (projInv == null) {\r\n            // Sometimes this happens, not sure why...\r\n            console.warn(`Unable to generate Ray from screen pos:${screenPos.toString()} in region ${this.region}`);\r\n            return new Ray();\r\n        }\r\n        let rayStart;\r\n        let rayDirection;\r\n        if (this.__camera.isOrthographic()) {\r\n            // Orthographic projections.\r\n            const cameraSpaceOffset = projInv.transformVec3(new Vec3(sx, -sy, -1.0));\r\n            cameraSpaceOffset.z = 0;\r\n            rayStart = cameraMat.transformVec3(cameraSpaceOffset);\r\n            rayDirection = new Vec3(0.0, 0.0, -1.0);\r\n        }\r\n        else {\r\n            rayStart = cameraMat.translation;\r\n            // Get the projected window coordinate on the near plane\r\n            // See http://www.songho.ca/opengl/gl_projectionmatrix.html\r\n            // for details.\r\n            rayDirection = projInv.transformVec3(new Vec3(sx, -sy, -1.0));\r\n        }\r\n        // And from projection space to camera local.\r\n        // - We nuke the translation part since we're transforming a vector.\r\n        rayDirection = cameraMat.rotateVec3(rayDirection).normalize();\r\n        return new Ray(rayStart, rayDirection);\r\n    }\r\n    // //////////////////////////\r\n    // GeomData\r\n    /**\r\n     * Renders the scene geometry to the viewport's geom data buffer\r\n     * in preparation for mouse picking.\r\n     */\r\n    renderGeomDataFbo() {\r\n        if (this.__geomDataBufferFbo) {\r\n            const geomDataRenderstate = {};\r\n            this.__initRenderState(geomDataRenderstate);\r\n            // Note: GLLinesPass binds a new Fbo, but shares this ones depth buffer.\r\n            geomDataRenderstate.geomDataFbo = this.__geomDataBufferFbo;\r\n            this.__geomDataBufferFbo.bindAndClear(geomDataRenderstate);\r\n            this.__renderer.drawSceneGeomData(geomDataRenderstate);\r\n            this.__geomDataBufferInvalid = false;\r\n            this.__geomDataBufferFbo.unbind();\r\n        }\r\n    }\r\n    /**\r\n     * The invalidateGeomDataBuffer method.\r\n     */\r\n    invalidateGeomDataBuffer() {\r\n        this.__geomDataBufferInvalid = true;\r\n    }\r\n    /**\r\n     * The getGeomDataAtPos method.\r\n     * @param screenPos - The screen position.\r\n     * @param pointerRay - The pointerRay value.\r\n     * @return - The return value.\r\n     */\r\n    getGeomDataAtPos(screenPos, pointerRay) {\r\n        if (this.__geomDataBufferFbo) {\r\n            if (this.__geomDataBufferInvalid) {\r\n                this.renderGeomDataFbo();\r\n                this.__screenPos = null;\r\n            }\r\n            // Cache the intersection tests result so subsequent queries will return the same value.\r\n            // Note: every new mouse event will generate a new pointerPos value, so the cache\r\n            // is only valid for a given event propagation, and for that exact pointerPos value.\r\n            if (screenPos === this.__screenPos) {\r\n                return this.__intersectionData;\r\n            }\r\n            this.__screenPos = screenPos;\r\n            this.__intersectionData = null;\r\n            const gl = this.__renderer.gl;\r\n            gl.finish();\r\n            this.__geomDataBufferFbo.bindForReading();\r\n            // const logGeomData = ()=>{\r\n            //     console.log(\"logGeomData :[\" + this.__geomDataBuffer.width +\",\"+ this.__geomDataBuffer.height + \"]\")\r\n            //     const pixels = new Float32Array(this.__geomDataBuffer.width * 4);\r\n            //     for(let i=0; i<this.__geomDataBuffer.height; i++){\r\n            //       gl.readPixels(0, i, this.__geomDataBuffer.width, 1, gl.RGBA, gl.FLOAT, pixels);\r\n            //         for(let j=0; j<this.__geomDataBuffer.width; j++){\r\n            //             const geomData = pixels.subarray(j*4, (j+1)*4);\r\n            //             if (geomData[0] != 0 || geomData[1] != 0){\r\n            //                 console.log(j, i)\r\n            //                 break; // Only log the left border pixels.\r\n            //             }\r\n            //         }\r\n            //       // console.log(pixels);\r\n            //     }\r\n            // }\r\n            // logGeomData();\r\n            // console.log(\"getGeomDataAtPos:\", screenPos.toString(), screenPos.x,this.__width)\r\n            // Allocate a 1 pixel block and read from the GeomData buffer.\r\n            const bufferWidth = this.__geomDataBufferFbo.width;\r\n            const bufferHeight = this.__geomDataBufferFbo.height;\r\n            const x = Math.floor(screenPos.x * (bufferWidth / this.__width));\r\n            const y = Math.floor(screenPos.y * (bufferHeight / this.__height));\r\n            // const x = Math.floor(screenPos.x / this.__geomDataBufferSizeFactor)\r\n            // const y = Math.floor(screenPos.y / this.__geomDataBufferSizeFactor)\r\n            let passId;\r\n            let geomData;\r\n            if (this.__renderer.floatGeomBuffer) {\r\n                geomData = new Float32Array(4);\r\n                gl.readPixels(x, bufferHeight - y - 1, 1, 1, gl.RGBA, gl.FLOAT, geomData);\r\n                if (geomData[3] == 0)\r\n                    return null;\r\n                // Mask the pass id to be only the first 6 bits of the integer.\r\n                passId = Math.round(geomData[0]) & (64 - 1);\r\n            }\r\n            else {\r\n                geomData = new Uint8Array(4);\r\n                gl.readPixels(x, bufferHeight - y - 1, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, geomData);\r\n                gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n                if (geomData[0] == 0 && geomData[1] == 0)\r\n                    return undefined;\r\n                passId = Math.floor(geomData[1] / 32);\r\n            }\r\n            this.__geomDataBufferFbo.unbind();\r\n            const pass = this.__renderer.getPass(passId);\r\n            if (!pass) {\r\n                console.warn('Geom data buffer returns invalid pass id:', passId);\r\n                return null;\r\n            }\r\n            const geomItemAndDist = pass.getGeomItemAndDist(geomData);\r\n            if (geomItemAndDist) {\r\n                if (!geomItemAndDist.geomItem.isSelectable())\r\n                    return null;\r\n                if (!pointerRay)\r\n                    pointerRay = this.calcRayFromScreenPos(screenPos);\r\n                const intersectionPos = pointerRay.start.add(pointerRay.dir.scale(geomItemAndDist.dist));\r\n                this.__intersectionData = new IntersectionData(screenPos, pointerRay, intersectionPos, geomData, geomItemAndDist);\r\n            }\r\n            return this.__intersectionData;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * getGeomItemsInRect\r\n     * Gathers all the geoms renders in a given rectangle of the viewport.\r\n     * @param tl - The top left value of the rectangle.\r\n     * @param br - The bottom right corner of the rectangle.\r\n     * @return - The return value.\r\n     */\r\n    getGeomItemsInRect(tl, br) {\r\n        var _a;\r\n        // TODO: Use a Math.Rect instead\r\n        if (this.__geomDataBufferFbo) {\r\n            const gl = this.__renderer.gl;\r\n            gl.finish();\r\n            // Allocate a pixel block.\r\n            const bufferWidth = this.__geomDataBufferFbo.width;\r\n            const bufferHeight = this.__geomDataBufferFbo.height;\r\n            const widthFactor = bufferWidth / this.__width;\r\n            const heightFactor = bufferHeight / this.__height;\r\n            const tlX = Math.round(tl.x * widthFactor);\r\n            const tlY = Math.round(tl.y * heightFactor);\r\n            const brX = Math.round(br.x * widthFactor);\r\n            const brY = Math.round(br.y * heightFactor);\r\n            const rectBottom = Math.round(bufferHeight - brY);\r\n            const rectLeft = Math.round(tlX);\r\n            const rectWidth = Math.round(brX - tlX);\r\n            const rectHeight = Math.round(brY - tlY);\r\n            const numPixels = rectWidth * rectHeight;\r\n            this.__geomDataBufferFbo.bindForReading();\r\n            let geomDatas;\r\n            if (this.__renderer.floatGeomBuffer) {\r\n                geomDatas = new Float32Array(4 * numPixels);\r\n                gl.readPixels(rectLeft, rectBottom, rectWidth, rectHeight, gl.RGBA, gl.FLOAT, geomDatas);\r\n            }\r\n            else {\r\n                geomDatas = new Uint8Array(4 * numPixels);\r\n                gl.readPixels(rectLeft, rectBottom, rectWidth, rectHeight, gl.RGBA, gl.UNSIGNED_BYTE, geomDatas);\r\n            }\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n            const geomItems = new Set();\r\n            for (let i = 0; i < numPixels; i++) {\r\n                let passId;\r\n                const geomData = geomDatas.subarray(i * 4, (i + 1) * 4);\r\n                if (this.__renderer.floatGeomBuffer) {\r\n                    if (geomData[3] == 0)\r\n                        continue;\r\n                    passId = Math.round(geomData[0]);\r\n                }\r\n                else {\r\n                    if (geomData[0] == 0 && geomData[1] == 0)\r\n                        continue;\r\n                    passId = Math.floor(geomData[1] / 64);\r\n                }\r\n                const geomItemAndDist = (_a = this.__renderer.getPass(passId)) === null || _a === void 0 ? void 0 : _a.getGeomItemAndDist(geomData);\r\n                if (geomItemAndDist) {\r\n                    if (!geomItemAndDist.geomItem.isSelectable())\r\n                        continue;\r\n                    geomItems.add(geomItemAndDist.geomItem);\r\n                }\r\n            }\r\n            return geomItems;\r\n        }\r\n        return new Set();\r\n    }\r\n    // ///////////////////////////\r\n    // Events\r\n    /**\r\n     * Calculates the event coordinates relative to the viewport.\r\n     * There could be multiple viewports connected to the current renderer.\r\n     *\r\n     * @param rendererX - The rendererX value\r\n     * @param rendererY - The rendererY value\r\n     * @return - Returns a new Vec2.\r\n     * @private\r\n     */\r\n    __getPointerPos(rendererX, rendererY) {\r\n        return new Vec2(rendererX - this.getPosX(), rendererY - this.getPosY());\r\n    }\r\n    /**\r\n     * Prepares pointer event by adding properties of the engine to it.\r\n     *\r\n     * @param event - The event that occurs in the canvas\r\n     * @private\r\n     */\r\n    prepareUIEvent(event) {\r\n        event.viewport = this;\r\n    }\r\n    /**\r\n     * Handler of the `pointerdown` event fired when the pointer device is initially pressed.\r\n     *\r\n     * @param event - The DOM event produced by a pointer\r\n     */\r\n    onPointerDown(event) {\r\n        this.prepareUIEvent(event);\r\n        if (event.pointerType === POINTER_TYPES.mouse) {\r\n            const mouseEvent = event;\r\n            mouseEvent.pointerPos = this.__getPointerPos(mouseEvent.rendererX, mouseEvent.rendererY);\r\n            mouseEvent.pointerRay = this.calcRayFromScreenPos(mouseEvent.pointerPos);\r\n            mouseEvent.intersectionData = this.getGeomDataAtPos(mouseEvent.pointerPos, mouseEvent.pointerRay);\r\n        }\r\n        else if (event.pointerType === POINTER_TYPES.touch) {\r\n            const touchEvent = event;\r\n            if (touchEvent.touches.length == 1) {\r\n                const touch = touchEvent.touches[0];\r\n                touchEvent.pointerPos = this.__getPointerPos(touch.rendererX, touch.rendererY);\r\n                touchEvent.pointerRay = this.calcRayFromScreenPos(touchEvent.pointerPos);\r\n                touchEvent.intersectionData = this.getGeomDataAtPos(touchEvent.pointerPos, touchEvent.pointerRay);\r\n            }\r\n        }\r\n        // //////////////////////////////////////\r\n        // Double Tap\r\n        // First check for double tap handlers.\r\n        // If the manipulator or the viewport handle that\r\n        // then skip the 'pointerDown' event.\r\n        const downTime = Date.now();\r\n        if (downTime - this.__prevDownTime < this.doubleClickTimeParam.value) {\r\n            if (this.manipulator) {\r\n                this.manipulator.onPointerDoublePress(event);\r\n                if (!event.propagating)\r\n                    return;\r\n            }\r\n            this.emit('pointerDoublePressed', event);\r\n            if (!event.propagating)\r\n                return;\r\n        }\r\n        else {\r\n            this.__prevDownTime = downTime;\r\n        }\r\n        // //////////////////////////////////////\r\n        if (event.getCapture()) {\r\n            event.getCapture().onPointerDown(event);\r\n            return;\r\n        }\r\n        if (event.intersectionData != undefined) {\r\n            event.intersectionData.geomItem.onPointerDown(event);\r\n            if (!event.propagating || event.getCapture())\r\n                return;\r\n        }\r\n        this.emit('pointerDown', event);\r\n        if (!event.propagating || event.getCapture())\r\n            return;\r\n        if (this.manipulator) {\r\n            this.manipulator.onPointerDown(event);\r\n            if (!event.propagating)\r\n                return;\r\n        }\r\n    }\r\n    /**\r\n     * Causes an event to occur when a user releases a mouse button over a element.\r\n     *\r\n     * @param event - The event that occurs.\r\n     */\r\n    onPointerUp(event) {\r\n        this.prepareUIEvent(event);\r\n        if (event.pointerType === POINTER_TYPES.mouse) {\r\n            const mouseEvent = event;\r\n            mouseEvent.pointerPos = this.__getPointerPos(mouseEvent.rendererX, mouseEvent.rendererY);\r\n            mouseEvent.pointerRay = this.calcRayFromScreenPos(mouseEvent.pointerPos);\r\n            mouseEvent.intersectionData = this.getGeomDataAtPos(mouseEvent.pointerPos, mouseEvent.pointerRay);\r\n        }\r\n        else if (event.pointerType === POINTER_TYPES.touch) {\r\n            const touchEvent = event;\r\n            if (touchEvent.touches.length == 0 && touchEvent.changedTouches.length == 1) {\r\n                const touch = touchEvent.changedTouches[0];\r\n                touchEvent.pointerPos = this.__getPointerPos(touch.rendererX, touch.rendererY);\r\n                touchEvent.pointerRay = this.calcRayFromScreenPos(touchEvent.pointerPos);\r\n                touchEvent.intersectionData = this.getGeomDataAtPos(touchEvent.pointerPos, touchEvent.pointerRay);\r\n            }\r\n        }\r\n        if (event.getCapture()) {\r\n            event.getCapture().onPointerUp(event);\r\n            if (!event.propagating)\r\n                return;\r\n        }\r\n        if (event.intersectionData != undefined) {\r\n            event.intersectionData.geomItem.onPointerUp(event);\r\n            if (!event.propagating)\r\n                return;\r\n        }\r\n        this.emit('pointerUp', event);\r\n        if (!event.propagating)\r\n            return;\r\n        if (this.manipulator) {\r\n            this.manipulator.onPointerUp(event);\r\n            if (!event.propagating)\r\n                return;\r\n        }\r\n    }\r\n    /**\r\n     * Causes an event to occur when the pointer device is moving.\r\n     *\r\n     * @param event - The event that occurs.\r\n     */\r\n    onPointerMove(event) {\r\n        this.prepareUIEvent(event);\r\n        if (event.pointerType === POINTER_TYPES.mouse) {\r\n            const mouseEvent = event;\r\n            const pointerPos = this.__getPointerPos(mouseEvent.rendererX, mouseEvent.rendererY);\r\n            mouseEvent.pointerPos = pointerPos;\r\n            mouseEvent.pointerRay = this.calcRayFromScreenPos(pointerPos);\r\n        }\r\n        else if (event.pointerType === POINTER_TYPES.touch) {\r\n            const touchEvent = event;\r\n            for (let index = 0; index < touchEvent.touches.length; index++) {\r\n                const touch = touchEvent.touches[index];\r\n                touch.touchPos = this.__getPointerPos(touch.rendererX, touch.rendererY);\r\n                touch.touchRay = this.calcRayFromScreenPos(touch.touchPos);\r\n            }\r\n            touchEvent.pointerPos = touchEvent.touches[0].touchPos;\r\n            touchEvent.pointerRay = touchEvent.touches[0].touchRay;\r\n        }\r\n        // Note: the Captured item might be a tool, which might not need to have\r\n        // the geom under the pointer. e.g. the CameraManipulator during a drag.\r\n        if (event.getCapture()) {\r\n            event.getCapture().onPointerMove(event);\r\n            if (!event.propagating)\r\n                return;\r\n        }\r\n        event.intersectionData = this.getGeomDataAtPos(event.pointerPos, event.pointerRay);\r\n        if (event.intersectionData) {\r\n            if (event.intersectionData.geomItem != this.pointerOverItem) {\r\n                if (this.pointerOverItem) {\r\n                    event.leftGeometry = this.pointerOverItem;\r\n                    this.pointerOverItem.onPointerLeave(event);\r\n                    if (event.propagating)\r\n                        this.emit('pointerLeaveGeom', event);\r\n                }\r\n                this.pointerOverItem = event.intersectionData.geomItem;\r\n                this.pointerOverItem.onPointerEnter(event);\r\n                if (!event.propagating)\r\n                    return;\r\n                this.emit('pointerOverGeom', event);\r\n            }\r\n            event.intersectionData.geomItem.onPointerMove(event);\r\n            if (!event.propagating || event.getCapture())\r\n                return;\r\n        }\r\n        else if (this.pointerOverItem) {\r\n            event.leftGeometry = this.pointerOverItem;\r\n            this.pointerOverItem.onPointerLeave(event);\r\n            this.pointerOverItem = null;\r\n            if (!event.propagating)\r\n                return;\r\n            this.emit('pointerLeaveGeom', event);\r\n        }\r\n        this.emit('pointerMove', event);\r\n        if (!event.propagating)\r\n            return;\r\n        if (this.manipulator) {\r\n            this.manipulator.onPointerMove(event);\r\n            if (!event.propagating)\r\n                return;\r\n        }\r\n    }\r\n    /**\r\n     * Causes an event to occur when the mouse pointer is moved into this viewport\r\n     * @param event - The event that occurs.\r\n     */\r\n    onPointerEnter(event) {\r\n        this.prepareUIEvent(event);\r\n        this.emit('pointerEnter', event);\r\n        if (!event.propagating)\r\n            return;\r\n        if (this.manipulator && this.manipulator.onPointerEnter) {\r\n            this.manipulator.onPointerEnter(event);\r\n            if (!event.propagating)\r\n                return;\r\n        }\r\n    }\r\n    /**\r\n     * Causes an event to occur when the mouse pointer is moved out of this viewport\r\n     * @param event - The event that occurs.\r\n     */\r\n    onPointerLeave(event) {\r\n        this.prepareUIEvent(event);\r\n        this.emit('pointerLeave', event);\r\n        if (!event.propagating)\r\n            return;\r\n        if (this.manipulator && this.manipulator.onPointerLeave) {\r\n            this.manipulator.onPointerLeave(event);\r\n            if (!event.propagating)\r\n                return;\r\n        }\r\n    }\r\n    /**\r\n     * Causes an event to occur when the user is pressing a key on the keyboard.\r\n     * @param event - The event that occurs.\r\n     */\r\n    onKeyDown(event) {\r\n        // this.prepareUIEvent(event)\r\n        if (this.manipulator) {\r\n            this.manipulator.onKeyDown(event);\r\n            if (!event.propagating)\r\n                return;\r\n        }\r\n        this.emit('keyDown', event);\r\n    }\r\n    /**\r\n     * Causes an event to occur  when the user releases a key on the keyboard.\r\n     * @param event - The event that occurs.\r\n     */\r\n    onKeyUp(event) {\r\n        // this.prepareUIEvent(event)\r\n        if (this.manipulator) {\r\n            this.manipulator.onKeyUp(event);\r\n            if (!event.propagating)\r\n                return;\r\n        }\r\n        this.emit('keyUp', event);\r\n    }\r\n    /**\r\n     * Causes an event to occur when the mouse wheel is rolled up or down over an element.\r\n     * @param event - The event that occurs.\r\n     */\r\n    onWheel(event) {\r\n        this.prepareUIEvent(event);\r\n        event.pointerPos = this.__getPointerPos(event.rendererX, event.rendererY);\r\n        event.pointerRay = this.calcRayFromScreenPos(event.pointerPos);\r\n        event.intersectionData = this.getGeomDataAtPos(event.pointerPos, event.pointerRay);\r\n        if (event.intersectionData != undefined) {\r\n            event.intersectionData.geomItem.onWheel(event);\r\n            if (!event.propagating)\r\n                return;\r\n        }\r\n        if (this.manipulator) {\r\n            this.manipulator.onWheel(event);\r\n            return;\r\n        }\r\n        this.emit('mouseWheel', event);\r\n    }\r\n    // Touch events\r\n    /**\r\n     * Causes an event to occur when the touch event gets interrupted.\r\n     * @param event - The event that occurs.\r\n     */\r\n    onTouchCancel(event) {\r\n        this.prepareUIEvent(event);\r\n        if (event.getCapture()) {\r\n            event.getCapture().onTouchCancel(event);\r\n            return;\r\n        }\r\n        if (this.manipulator) {\r\n            this.manipulator.onTouchCancel(event);\r\n            return;\r\n        }\r\n        this.emit('touchCancel', event);\r\n    }\r\n    // //////////////////////////\r\n    // Rendering\r\n    /**\r\n     * The __initRenderState method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @private\r\n     */\r\n    __initRenderState(renderstate) {\r\n        // console.log(this.__viewMat.toString())\r\n        renderstate.viewXfo = this.__cameraXfo;\r\n        renderstate.viewScale = 1.0;\r\n        renderstate.region = this.region;\r\n        renderstate.cameraMatrix = this.__cameraMat;\r\n        renderstate.viewport = this;\r\n        renderstate.viewports = [\r\n            {\r\n                region: this.region,\r\n                viewMatrix: this.__viewMat,\r\n                projectionMatrix: this.__projectionMatrix,\r\n                viewportFrustumSize: this.__frustumDim,\r\n                isOrthographic: this.__camera.isOrthographic(),\r\n                fovY: this.__camera.getFov(),\r\n            },\r\n        ];\r\n    }\r\n    /**\r\n     * The draw method.\r\n     */\r\n    draw() {\r\n        const renderstate = {};\r\n        this.__initRenderState(renderstate);\r\n        super.draw(renderstate);\r\n        // Turn this on to debug the geom data buffer.\r\n        if (this.debugGeomShader) {\r\n            this.renderGeomDataFbo();\r\n            const screenQuad = this.__renderer.screenQuad;\r\n            screenQuad.bindShader(renderstate);\r\n            screenQuad.draw(renderstate, this.__geomDataBuffer, new Vec2(0, 0), new Vec2(1, 1));\r\n        }\r\n        if (this.debugHighlightedGeomsBuffer) {\r\n            const screenQuad = this.__renderer.screenQuad;\r\n            screenQuad.bindShader(renderstate);\r\n            screenQuad.draw(renderstate, this.highlightedGeomsBuffer, new Vec2(0, 0), new Vec2(1, 1));\r\n        }\r\n    }\r\n}\r\nexport { GLViewport };\r\n//# sourceMappingURL=GLViewport.js.map","import { Vec3, Quat, Xfo, Mat4 } from '../../Math/index';\r\nimport { TreeItem } from '../../SceneTree/index';\r\n/** Class representing a VR head.\r\n * @private\r\n */\r\nclass VRHead {\r\n    /**\r\n     * Create a VR head.\r\n     * @param xrvp - The VR viewport.\r\n     * @param stageTreeItem - The stageTreeItem value.\r\n     */\r\n    constructor(xrvp, stageTreeItem) {\r\n        this.__xrvp = xrvp;\r\n        this.__treeItem = new TreeItem('VRHead');\r\n        stageTreeItem.addChild(this.__treeItem);\r\n        this.__mat4 = new Mat4();\r\n        this.__localXfo = new Xfo();\r\n    }\r\n    /**\r\n     * The Set wether the HMB is visible in rendering or not. Used in spectator rendering.\r\n     * @param state - The visibility value.\r\n     */\r\n    setVisible(state) {\r\n        if (state && !this.hmdGeomItem) {\r\n            const assetItem = this.__xrvp.getAsset();\r\n            if (!assetItem)\r\n                return;\r\n            const hmdGeomItem = assetItem.getChildByName('HMD');\r\n            if (!hmdGeomItem)\r\n                return;\r\n            this.hmdGeomItem = hmdGeomItem.clone({ assetItem });\r\n            if (this.hmdGeomItem) {\r\n                this.hmdGeomItem.localXfoParam.value = new Xfo(new Vec3(0, -0.035, -0.03), new Quat(0, 1, 0, Math.PI), // used to be: new Quat({ setFromAxisAndAngle: [new Vec3(0, 1, 0), Math.PI] }),\r\n                new Vec3(0.001, 0.001, 0.001) // VRAsset units are in mm.\r\n                );\r\n                this.__treeItem.addChild(this.hmdGeomItem, false);\r\n            }\r\n        }\r\n        if (this.hmdGeomItem) {\r\n            this.hmdGeomItem.visibleParam.value = state;\r\n        }\r\n    }\r\n    /**\r\n     * The update method.\r\n     * @param pose - The pose value.\r\n     */\r\n    update(pose) {\r\n        // Old\r\n        // this.__mat4.setDataArray(pose.poseModelMatrix);\r\n        // New\r\n        this.__mat4.setDataArray(pose.transform.matrix);\r\n        this.__localXfo.setFromMat4(this.__mat4);\r\n        // const pos = pose.transform.position;\r\n        // this.__localXfo.tr.set(pos.x, pos.y,pos.z);\r\n        // const ori = pose.transform.orientation;\r\n        // this.__localXfo.ori.set(ori.x, ori.y, ori.z, ori.x);\r\n        this.__treeItem.localXfoParam.value = this.__localXfo;\r\n    }\r\n    /**\r\n     * The getTreeItem method.\r\n     * @return - The return value.\r\n     */\r\n    getTreeItem() {\r\n        return this.__treeItem;\r\n    }\r\n    /**\r\n     * The getXfo method.\r\n     * @return - The return value.\r\n     */\r\n    getXfo() {\r\n        return this.__localXfo;\r\n    }\r\n}\r\nexport { VRHead };\r\n//# sourceMappingURL=VRHead.js.map","import { SystemDesc } from '../../SystemDesc';\r\nimport { Vec3, Xfo, Mat4 } from '../../Math/index';\r\nimport { TreeItem } from '../../SceneTree/index';\r\n/** Class representing a VR controller. */\r\nclass VRController {\r\n    /**\r\n     * Create a VR controller.\r\n     * @param xrvp - The Vr viewport.\r\n     * @param inputSource - The input source.\r\n     * @param id - The id value.\r\n     */\r\n    constructor(xrvp, inputSource, id) {\r\n        this.activeVolumeSize = 0.04;\r\n        this.xrvp = xrvp;\r\n        this.inputSource = inputSource;\r\n        this.id = id;\r\n        this.buttonPressed = false;\r\n        // /////////////////////////////////\r\n        // Xfo\r\n        this.mat4 = new Mat4();\r\n        this.xfo = new Xfo();\r\n        // this.setVisible(true);\r\n        this.treeItem = new TreeItem('VRController:' + inputSource.handedness + id);\r\n        // Controller coordinate system\r\n        // X = Horizontal.\r\n        // Y = Up.\r\n        // Z = Towards handle base.\r\n        if (!SystemDesc.isMobileDevice) {\r\n            // A Vive or Oculus Controller\r\n            this.tipItem = new TreeItem('Tip');\r\n            // Note: the tip of the controller need to be off\r\n            // the end of the controller. getGeomItemAtTip\r\n            // now searches a grid in that area and so we need to\r\n            // ensure that the grid does not touch the controller,\r\n            // else it will return the controller geom from\r\n            // the getGeomItemAtTip function\r\n            const tipXfo = new Xfo();\r\n            tipXfo.tr.set(0.0, -0.05, -0.13);\r\n            // Flip the tip around so +z is forwards.\r\n            // tipXfo.ori.setFromAxisAndAngle(new Vec3(0, 1, 0), Math.PI)\r\n            this.tipItem.localXfoParam.value = tipXfo;\r\n            this.treeItem.addChild(this.tipItem, false);\r\n            xrvp.getTreeItem().addChild(this.treeItem);\r\n            if (inputSource.targetRayMode == 'tracked-pointer') {\r\n                // Once we have an input profile, we can determine the XR Device in use.\r\n                switch (inputSource.profiles[0]) {\r\n                    case 'htc-vive':\r\n                        localStorage.setItem('ZeaEngine_XRDevice', 'Vive');\r\n                        break;\r\n                    case 'oculus-touch':\r\n                    case 'oculus-touch-v2':\r\n                    case 'oculus-touch-v3':\r\n                        localStorage.setItem('ZeaEngine_XRDevice', 'Oculus');\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                //   // Use the fetchProfile method from the motionControllers library\r\n                //   // to find the appropriate glTF mesh path for this controller.\r\n                //   fetchProfile(inputSource, DEFAULT_PROFILES_PATH).then(({ profile, assetPath }) => {\r\n                //     // Typically if you wanted to animate the controllers in response\r\n                //     // to device inputs you'd create a new MotionController() instance\r\n                //     // here to handle the animation, but this sample will skip that\r\n                //     // and only display a static mesh for simplicity.\r\n                //     scene.inputRenderer.setControllerMesh(new Gltf2Node({ url: assetPath }), inputSource.handedness)\r\n                //   })\r\n                xrvp.loadHMDResources().then((assetItem) => {\r\n                    if (!assetItem)\r\n                        return;\r\n                    const localXfo = new Xfo();\r\n                    localXfo.ori.setFromAxisAndAngle(new Vec3(0, 1, 0), Math.PI);\r\n                    localXfo.sc.set(0.001, 0.001, 0.001); // VRAsset units are in mm.\r\n                    let srcControllerTree;\r\n                    if (inputSource.profiles[0] == 'htc-vive') {\r\n                        srcControllerTree = assetItem.getChildByName('Controller');\r\n                        localXfo.tr.set(0, -0.035, -0.085);\r\n                    }\r\n                    else {\r\n                        switch (inputSource.handedness) {\r\n                            case 'left':\r\n                                srcControllerTree = assetItem.getChildByName('LeftController');\r\n                                localXfo.tr.set(0, -0.035, -0.085);\r\n                                localXfo.sc.scaleInPlace(0.85);\r\n                                break;\r\n                            case 'right':\r\n                                srcControllerTree = assetItem.getChildByName('RightController');\r\n                                localXfo.tr.set(0, -0.035, -0.085);\r\n                                localXfo.sc.scaleInPlace(0.85);\r\n                                break;\r\n                            case 'none':\r\n                            case 'left-right':\r\n                            case 'left-right-none':\r\n                                srcControllerTree = assetItem.getChildByName('Controller');\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (srcControllerTree) {\r\n                        const controllerTree = srcControllerTree.clone({ assetItem });\r\n                        controllerTree.localXfoParam.value = localXfo;\r\n                        this.treeItem.addChild(controllerTree, false);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        this.tick = 0;\r\n    }\r\n    /**\r\n     * The getHandedness method.\r\n     * @return - The return value.\r\n     */\r\n    getHandedness() {\r\n        return this.inputSource.handedness;\r\n    }\r\n    /**\r\n     * The getId method.\r\n     * @return - The return value.\r\n     */\r\n    getId() {\r\n        return this.id;\r\n    }\r\n    /**\r\n     * The getTreeItem method.\r\n     * @return - The return value.\r\n     */\r\n    getTreeItem() {\r\n        return this.treeItem;\r\n    }\r\n    /**\r\n     * The getTipItem method.\r\n     * @return - The return value.\r\n     */\r\n    getTipItem() {\r\n        return this.tipItem;\r\n    }\r\n    /**\r\n     * The getTipXfo method.\r\n     * @return - The return value.\r\n     */\r\n    getTipXfo() {\r\n        return this.tipItem.globalXfoParam.value;\r\n    }\r\n    /**\r\n     * The getTouchPadValue method.\r\n     * @return - The return value.\r\n     */\r\n    getTouchPadValue() {\r\n        return this.touchpadValue;\r\n    }\r\n    /**\r\n     * The isButtonPressed method.\r\n     * @return - The return value.\r\n     */\r\n    isButtonPressed() {\r\n        return this.buttonPressed;\r\n    }\r\n    /**\r\n     * The getControllerStageLocalXfo method.\r\n     * @return - The return value.\r\n     */\r\n    getControllerStageLocalXfo() {\r\n        return this.xfo;\r\n    }\r\n    /**\r\n     * The getControllerTipStageLocalXfo method.\r\n     * @return - The return value.\r\n     */\r\n    getControllerTipStageLocalXfo() {\r\n        return this.xfo.multiply(this.tipItem.localXfoParam.value);\r\n    }\r\n    // ////////////////////////////////\r\n    /**\r\n     * The updatePose method.\r\n     * @param refSpace - The refSpace value.\r\n     * @param xrFrame - The xrFrame value.\r\n     * @param inputSource - The inputSource value.\r\n     * @param event - The event object.\r\n     */\r\n    updatePose(refSpace, xrFrame, inputSource, event) {\r\n        const inputPose = xrFrame.getPose(inputSource.gripSpace, refSpace);\r\n        // We may not get a inputPose back in cases where the input source has lost\r\n        // tracking or does not know where it is relative to the given frame\r\n        // of reference.\r\n        if (!inputPose || !inputPose.transform) {\r\n            return;\r\n        }\r\n        this.mat4.setDataArray(inputPose.transform.matrix);\r\n        this.xfo.setFromMat4(this.mat4);\r\n        // const pos = inputPose.transform.position;\r\n        // this.xfo.tr.set(pos.x, pos.y,pos.z);\r\n        // const ori = inputPose.transform.orientation;\r\n        // this.xfo.ori.set(ori.x, ori.y, ori.z, ori.x);\r\n        // //////////////////////////////\r\n        this.treeItem.localXfoParam.value = this.xfo;\r\n        // Reset the geom at tip so it will be recomputed if necessary\r\n        this.hitTested = false;\r\n        // /////////////////////////////////\r\n        // Simulate Pointer Enter/Leave Events.\r\n        // Check for pointer over every Nth frame (at 90fps this should be fine.)\r\n        if (this.tick % 5 == 0 && !event.getCapture()) {\r\n            const intersectionData = this.getGeomItemAtTip();\r\n            if (intersectionData != undefined) {\r\n                event.intersectionData = intersectionData;\r\n                if (intersectionData.geomItem != this.pointerOverItem) {\r\n                    if (this.pointerOverItem) {\r\n                        this.pointerOverItem.onPointerLeave(event);\r\n                    }\r\n                    this.pointerOverItem = intersectionData.geomItem;\r\n                    event.intersectionData = intersectionData;\r\n                    this.pointerOverItem.onPointerEnter(event);\r\n                }\r\n                // emit the pointer move event directly to the item.\r\n                intersectionData.geomItem.onPointerMove(event);\r\n            }\r\n            else if (this.pointerOverItem) {\r\n                event.leftGeometry = this.pointerOverItem;\r\n                this.pointerOverItem.onPointerLeave(event);\r\n                this.pointerOverItem = null;\r\n            }\r\n        }\r\n        this.tick++;\r\n    }\r\n    // ////////////////////////////////\r\n    /**\r\n     * The getGeomItemAtTip method.\r\n     * @return - The return value.\r\n     */\r\n    getGeomItemAtTip() {\r\n        if (this.hitTested)\r\n            return this.intersectionData;\r\n        this.hitTested = true;\r\n        const renderer = this.xrvp.getRenderer();\r\n        const xfo = this.tipItem.globalXfoParam.value;\r\n        const vol = this.activeVolumeSize;\r\n        this.intersectionData = renderer.raycastWithXfo(xfo, vol, vol);\r\n        return this.intersectionData;\r\n    }\r\n}\r\nexport { VRController };\r\n//# sourceMappingURL=VRController.js.map","import { Color, Xfo } from '../../Math/index';\r\nimport { Sphere } from '../../SceneTree/Geometry/Shapes';\r\nimport { GeomItem } from '../../SceneTree/GeomItem';\r\nimport { Material } from '../../SceneTree/Material';\r\nimport { BaseTool } from '../../SceneTree/Manipulators/BaseTool';\r\nimport { POINTER_TYPES } from '../../Utilities/Events/ZeaPointerEvent';\r\n/**\r\n * Class representing a view tool\r\n * @extends BaseTool\r\n */\r\nclass VRViewManipulator extends BaseTool {\r\n    /**\r\n     */\r\n    constructor(xrvp) {\r\n        super();\r\n        this.listenerIDs = {};\r\n        this.__controllerTriggersHeld = [];\r\n        this.xrvp = xrvp;\r\n        this.vrControllerToolTip = new Sphere(0.02 * 0.75);\r\n        this.vrControllerToolTipMat = new Material('Cross', 'FlatSurfaceShader');\r\n        this.vrControllerToolTipMat.getParameter('BaseColor').value = new Color('#03E3AC');\r\n        this.listenerIDs = {};\r\n    }\r\n    // /////////////////////////////////////\r\n    //\r\n    /**\r\n     * Adds the icon to the tip of the VR Controller\r\n     * @param event\r\n     * @private\r\n     */\r\n    addIconToController(controller) {\r\n        const geomItem = new GeomItem('HandleToolTip', this.vrControllerToolTip, this.vrControllerToolTipMat);\r\n        geomItem.setSelectable(false);\r\n        controller.getTipItem().removeAllChildren();\r\n        controller.getTipItem().addChild(geomItem, false);\r\n    }\r\n    /**\r\n     * The activateTool method.\r\n     */\r\n    activateTool() {\r\n        super.activateTool();\r\n        for (const controller of this.xrvp.getControllers()) {\r\n            this.addIconToController(controller);\r\n        }\r\n        this.listenerIDs['controllerAdded'] = this.xrvp.on('controllerAdded', (event) => {\r\n            this.addIconToController(event.controller);\r\n        });\r\n    }\r\n    /**\r\n     * The deactivateTool method.\r\n     */\r\n    deactivateTool() {\r\n        super.deactivateTool();\r\n        for (const controller of this.xrvp.getControllers()) {\r\n            controller.getTipItem().removeAllChildren();\r\n        }\r\n        this.xrvp.removeListenerById('controllerAdded', this.listenerIDs['controllerAdded']);\r\n    }\r\n    // ///////////////////////////////////\r\n    // VRController events\r\n    // eslint-disable-next-line require-jsdoc\r\n    __initMoveStage() {\r\n        if (this.__controllerTriggersHeld.length == 1) {\r\n            this.__grabPos = this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr.clone();\r\n            this.stageXfo__GrabStart = this.xrvp.getXfo().clone();\r\n            this.__invOri = this.stageXfo__GrabStart.ori.inverse();\r\n        }\r\n        else if (this.__controllerTriggersHeld.length == 2) {\r\n            const p0 = this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr;\r\n            const p1 = this.__controllerTriggersHeld[1].getControllerTipStageLocalXfo().tr;\r\n            this.__grabDir = p1.subtract(p0);\r\n            this.__grabPos = p0.lerp(p1, 0.5);\r\n            this.__grabDir.y = 0.0;\r\n            this.__grabDist = this.__grabDir.length();\r\n            this.__grabDir.scaleInPlace(1 / this.__grabDist);\r\n            this.stageXfo__GrabStart = this.xrvp.getXfo().clone();\r\n            this.__grab_to_stage = this.__grabPos.subtract(this.stageXfo__GrabStart.tr);\r\n        }\r\n    }\r\n    /**\r\n     * The onVRControllerButtonDown method.\r\n     * @param event - The event param.\r\n     * @return The return value.\r\n     */\r\n    onVRControllerButtonDown(event) {\r\n        if (event.button != 1)\r\n            return;\r\n        this.__controllerTriggersHeld.push(event.controller);\r\n        this.__initMoveStage();\r\n        event.stopPropagation();\r\n    }\r\n    /**\r\n     * The onVRControllerButtonUp method.\r\n     * @param event - The event param.\r\n     * @return The return value.\r\n     */\r\n    onVRControllerButtonUp(event) {\r\n        if (event.button != 1)\r\n            return;\r\n        const index = this.__controllerTriggersHeld.indexOf(event.controller);\r\n        this.__controllerTriggersHeld.splice(index, 1);\r\n        this.__initMoveStage();\r\n        event.stopPropagation();\r\n    }\r\n    /**\r\n     * The onVRControllerDoubleClicked method.\r\n     * @param event - The event param.\r\n     */\r\n    onVRControllerDoubleClicked(event) {\r\n        console.log('onVRControllerDoubleClicked:', this.__controllerTriggersHeld.length);\r\n        const stageXfo = this.xrvp.getXfo().clone();\r\n        stageXfo.sc.set(1, 1, 1);\r\n        this.xrvp.setXfo(stageXfo);\r\n    }\r\n    /**\r\n     * The onVRPoseChanged method.\r\n     * @param event - The event param.\r\n     */\r\n    onVRPoseChanged(event) {\r\n        if (this.__controllerTriggersHeld.length == 1) {\r\n            const grabPos = this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr;\r\n            const deltaXfo = new Xfo();\r\n            deltaXfo.tr = this.__grabPos.subtract(grabPos);\r\n            // //////////////\r\n            // Update the stage Xfo\r\n            const stageXfo = this.stageXfo__GrabStart.multiply(deltaXfo);\r\n            this.xrvp.setXfo(stageXfo);\r\n        }\r\n        else if (this.__controllerTriggersHeld.length == 2) {\r\n            const p0 = this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr;\r\n            const p1 = this.__controllerTriggersHeld[1].getControllerTipStageLocalXfo().tr;\r\n            const grabPos = p0.lerp(p1, 0.5);\r\n            const grabDir = p1.subtract(p0);\r\n            grabDir.y = 0.0;\r\n            const grabDist = grabDir.length();\r\n            // Sometimes we would get NaN values in the stage Xfo\r\n            if (grabDist < 0.0001)\r\n                return;\r\n            grabDir.scaleInPlace(1 / grabDist);\r\n            const deltaXfo = new Xfo();\r\n            // //////////////\r\n            // Compute sc\r\n            // Limit to a 10x change in scale per grab.\r\n            const sc = Math.max(Math.min(this.__grabDist / grabDist, 10.0), 0.1);\r\n            // Avoid causing a scale that would make the user < 1.0 scale factor.\r\n            // if(stageSc < 1.0){\r\n            //     sc = 1.0 / this.stageXfo__GrabStart.sc.x;\r\n            // }\r\n            deltaXfo.sc.set(sc, sc, sc);\r\n            // //////////////\r\n            // Compute ori\r\n            let angle = this.__grabDir.angleTo(grabDir);\r\n            if (this.__grabDir.cross(grabDir).y > 0.0) {\r\n                angle = -angle;\r\n            }\r\n            deltaXfo.ori.rotateY(angle);\r\n            // Rotate around the point between the hands.\r\n            const oriTrDelta = deltaXfo.ori.rotateVec3(this.__grabPos);\r\n            deltaXfo.tr.addInPlace(this.__grabPos.subtract(oriTrDelta));\r\n            // Scale around the point between the hands.\r\n            const deltaSc = this.__grabPos.scale(1.0 - sc);\r\n            deltaXfo.tr.addInPlace(deltaXfo.ori.rotateVec3(deltaSc));\r\n            // //////////////\r\n            // Compute tr\r\n            // Not quite working.....\r\n            const deltaTr = this.__grabPos.subtract(grabPos).scale(sc);\r\n            deltaXfo.tr.addInPlace(deltaXfo.ori.rotateVec3(deltaTr));\r\n            // //////////////\r\n            // Update the stage Xfo\r\n            const stageXfo = this.stageXfo__GrabStart.multiply(deltaXfo);\r\n            this.xrvp.setXfo(stageXfo);\r\n        }\r\n    }\r\n    // ///////////////////////////////////\r\n    // Pointer events\r\n    /**\r\n     * Event fired when a pointing device button is pressed while the pointer is over the tool.\r\n     *\r\n     * @param event - The event param.\r\n     */\r\n    onPointerDown(event) {\r\n        if (event.pointerType === POINTER_TYPES.xr) {\r\n            this.onVRControllerButtonDown(event);\r\n        }\r\n    }\r\n    /**\r\n     * Event fired when a pointing device is moved while the cursor's hotspot is inside it.\r\n     *\r\n     * @param event - The event param.\r\n     */\r\n    onPointerMove(event) {\r\n        if (event.pointerType === POINTER_TYPES.xr) {\r\n            this.onVRPoseChanged(event);\r\n        }\r\n    }\r\n    /**\r\n     * Event fired when a pointing device button is released while the pointer is over the tool.\r\n     *\r\n     * @param event - The event param.\r\n     */\r\n    onPointerUp(event) {\r\n        if (event.pointerType === POINTER_TYPES.xr) {\r\n            this.onVRControllerButtonUp(event);\r\n        }\r\n    }\r\n    /**\r\n     * Event fired when a pointing device button is double clicked on the tool.\r\n     *\r\n     * @param event - The event param.\r\n     */\r\n    onPointerDoublePress(event) {\r\n        if (event.pointerType === POINTER_TYPES.xr) {\r\n            this.onVRControllerDoubleClicked(event);\r\n        }\r\n    }\r\n}\r\nexport { VRViewManipulator };\r\n//# sourceMappingURL=VRViewManipulator.js.map","import { ViewChangedEvent } from './ViewChangedEvent';\r\nclass VRViewChangedEvent extends ViewChangedEvent {\r\n    constructor(viewXfo) {\r\n        super('VR', viewXfo);\r\n        this.hmd = '';\r\n        this.controllers = [];\r\n    }\r\n}\r\nexport { VRViewChangedEvent };\r\n//# sourceMappingURL=VRViewChangedEvent.js.map","import { BaseEvent } from '../BaseEvent';\r\nclass ControllerAddedEvent extends BaseEvent {\r\n    constructor(controller) {\r\n        super();\r\n        this.controller = controller;\r\n    }\r\n}\r\nexport { ControllerAddedEvent };\r\n//# sourceMappingURL=ControllerAddedEvent.js.map","import { BaseEvent } from '../BaseEvent';\r\nclass StateChangedEvent extends BaseEvent {\r\n    constructor(state) {\r\n        super();\r\n        this.state = state;\r\n    }\r\n}\r\nexport { StateChangedEvent };\r\n//# sourceMappingURL=StateChangedEvent.js.map","import { SystemDesc } from '../../SystemDesc';\r\nimport { Vec3, Mat4, Xfo } from '../../Math/index';\r\nimport { TreeItem, VLAAsset } from '../../SceneTree/index';\r\nimport { GLBaseViewport } from '../GLBaseViewport';\r\nimport { VRHead } from './VRHead';\r\nimport { VRController } from './VRController';\r\nimport { VRViewManipulator } from './VRViewManipulator';\r\nimport { resourceLoader } from '../../SceneTree/resourceLoader';\r\n// import { XRWebGLLayer } from 'webxr'\r\nimport { VRViewChangedEvent } from '../../Utilities/Events/VRViewChangedEvent';\r\nimport { ControllerAddedEvent } from '../../Utilities/Events/ControllerAddedEvent';\r\nimport { StateChangedEvent } from '../../Utilities/Events/StateChangedEvent';\r\nimport { XRControllerEvent } from '../../Utilities/Events/XRControllerEvent';\r\nimport { XRPoseEvent } from '../../Utilities/Events/XRPoseEvent';\r\n/** This Viewport class is used for rendering stereoscopic views to VR controllers using the WebXR api.\r\n *  When the GLRenderer class detects a valid WebXF capable device is plugged in, this class is automatically\r\n *  instantiated ready for XR sessions\r\n *\r\n * **Events**\r\n * * **presentingChanged:** Emitted when presenting is started or stopped\r\n * * **controllerAdded:** Emitted when a new XR controller is detected.\r\n * * **viewChanged:** Emitted during presentation each time the frame is rendered.\r\n * * **pointerDoublePressed:** Emitted when the user double clicks with an XR pointer.\r\n * * **pointerDown:** Emitted when the user presses an XR pointer\r\n * * **pointerUp:** Emitted when the user releases an XR pointer\r\n *\r\n * @extends GLBaseViewport\r\n */\r\nclass VRViewport extends GLBaseViewport {\r\n    /**\r\n     * Create a VR viewport.\r\n     * @param renderer - The renderer value.\r\n     */\r\n    constructor(renderer) {\r\n        super(renderer);\r\n        this.__stageXfo = new Xfo();\r\n        this.__stageMatrix = new Mat4();\r\n        this.__hmd = '';\r\n        this.__projectionMatrices = [];\r\n        this.doubleClickTimeParam.value = 300;\r\n        // ////////////////////////////////////////////\r\n        // Viewport params\r\n        this.__projectionMatricesUpdated = false;\r\n        // ////////////////////////////////////////////\r\n        // Tree\r\n        this.__stageTreeItem = new TreeItem('VRStage');\r\n        this.__stageTreeItem.setVisible(false);\r\n        this.__renderer.addTreeItem(this.__stageTreeItem);\r\n        this.__vrhead = new VRHead(this, this.__stageTreeItem);\r\n        this.controllersMap = {};\r\n        this.controllers = [];\r\n        this.controllerPointerDownTime = [];\r\n        this.spectatorMode = false;\r\n        this.tick = 0;\r\n        // ////////////////////////////////////////////\r\n        // Xfos\r\n        const xfo = new Xfo();\r\n        // Convert Y-Up to Z-Up.\r\n        xfo.ori.setFromAxisAndAngle(new Vec3(1, 0, 0), Math.PI * 0.5);\r\n        this.setXfo(xfo); // Reset the stage Xfo.\r\n        this.__leftViewMatrix = new Mat4();\r\n        this.__leftProjectionMatrix = new Mat4();\r\n        this.__rightViewMatrix = new Mat4();\r\n        this.__rightProjectionMatrix = new Mat4();\r\n        this.setManipulator(new VRViewManipulator(this));\r\n    }\r\n    getRenderer() {\r\n        return this.renderer;\r\n    }\r\n    /**\r\n     * The getAsset method.\r\n     * @return - The return value.\r\n     */\r\n    getAsset() {\r\n        return this.__vrAsset;\r\n    }\r\n    /**\r\n     * The getTreeItem method.\r\n     * @return - The return value.\r\n     */\r\n    getTreeItem() {\r\n        return this.__stageTreeItem;\r\n    }\r\n    /**\r\n     * The getVRHead method.\r\n     * @return - The return value.\r\n     */\r\n    getVRHead() {\r\n        return this.__vrhead;\r\n    }\r\n    /**\r\n     * The getXfo method.\r\n     * @return - The return value.\r\n     */\r\n    getXfo() {\r\n        return this.__stageXfo;\r\n    }\r\n    /**\r\n     * The setXfo method.\r\n     * @param xfo - The xfo value.\r\n     */\r\n    setXfo(xfo) {\r\n        this.__stageXfo = xfo;\r\n        this.__stageTreeItem.globalXfoParam.value = xfo;\r\n        this.__stageMatrix = xfo.inverse().toMat4();\r\n        // this.__stageMatrix.multiplyInPlace(this.__sittingToStandingMatrix);\r\n        this.__stageScale = xfo.sc.x;\r\n    }\r\n    /**\r\n     * The getControllers method.\r\n     * @return - The return value.\r\n     */\r\n    getControllers() {\r\n        return this.controllers;\r\n    }\r\n    // //////////////////////////\r\n    // Presenting\r\n    /**\r\n     * The canPresent method.\r\n     * @return - The return value.\r\n     */\r\n    canPresent() {\r\n        return this.__canPresent;\r\n    }\r\n    /**\r\n     * The isPresenting method.\r\n     * @return - The return value.\r\n     */\r\n    isPresenting() {\r\n        return this.session;\r\n    }\r\n    /**\r\n     * Turns on and off the spectator mode.\r\n     * Note: specator mode renders the scene an extra time to our regular viewport.\r\n     * @param state -  true for enabling spectator mode, else false\r\n     */\r\n    setSpectatorMode(state) {\r\n        if (!state) {\r\n            // when disabling spectator mode, clear the screen to the background color.\r\n            const gl = this.__renderer.gl;\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n            let col = this.backgroundColorParam.value.asArray();\r\n            gl.clearColor(col[0], col[1], col[2], col[3]);\r\n            gl.colorMask(true, true, true, true);\r\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        }\r\n        this.spectatorMode = state;\r\n    }\r\n    /**\r\n     * The __startSession method.\r\n     * @private\r\n     */\r\n    __startSession() {\r\n        const onAnimationFrame = (t, frame) => {\r\n            if (this.session) {\r\n                this.session.requestAnimationFrame(onAnimationFrame);\r\n                this.drawXRFrame(frame);\r\n            }\r\n        };\r\n        this.session.requestAnimationFrame(onAnimationFrame);\r\n    }\r\n    /**\r\n     * The loadHMDResources method.\r\n     * @return - The return value.\r\n     */\r\n    loadHMDResources() {\r\n        if (SystemDesc.isMobileDevice) {\r\n            return Promise.resolve(null);\r\n        }\r\n        // If the HMD has changed, reset it.\r\n        let hmd = localStorage.getItem('ZeaEngine_XRDevice');\r\n        if (!hmd) {\r\n            hmd = 'Vive';\r\n            localStorage.setItem('ZeaEngine_XRDevice', hmd);\r\n        }\r\n        if (this.__hmd != hmd) {\r\n            this.__hmdAssetPromise = undefined;\r\n        }\r\n        else if (this.__hmdAssetPromise)\r\n            return this.__hmdAssetPromise;\r\n        this.__hmd = hmd;\r\n        this.__hmdAssetPromise = new Promise((resolve, reject) => {\r\n            // ////////////////////////////////////////////\r\n            // Resources\r\n            {\r\n                let hmdAssetId;\r\n                switch (hmd) {\r\n                    case 'Vive':\r\n                        hmdAssetId = 'ZeaEngine/Vive.vla';\r\n                        break;\r\n                    case 'Oculus':\r\n                        hmdAssetId = 'ZeaEngine/Oculus.vla';\r\n                        break;\r\n                    default:\r\n                        hmdAssetId = 'ZeaEngine/Vive.vla';\r\n                        break;\r\n                }\r\n                if (!resourceLoader.commonResources[hmdAssetId]) {\r\n                    // Cache the asset so if an avatar needs to display,\r\n                    // it can use the same asset.\r\n                    const asset = new VLAAsset(hmdAssetId);\r\n                    asset.load(resourceLoader.systemUrls[hmdAssetId]);\r\n                    resourceLoader.commonResources[hmdAssetId] = asset;\r\n                }\r\n                this.__vrAsset = resourceLoader.getCommonResource(hmdAssetId);\r\n                const bind = () => {\r\n                    const materialLibrary = this.__vrAsset.getMaterialLibrary();\r\n                    const materialNames = materialLibrary.getMaterialNames();\r\n                    for (const name of materialNames) {\r\n                        const material = materialLibrary.getMaterial(name, false);\r\n                        if (material) {\r\n                            material.setShaderName('SimpleSurfaceShader');\r\n                        }\r\n                    }\r\n                    this.__vrAsset.traverse((item) => {\r\n                        item.setSelectable(false);\r\n                    });\r\n                    resolve(this.__vrAsset);\r\n                };\r\n                if (this.__vrAsset.isLoaded())\r\n                    bind();\r\n                else\r\n                    this.__vrAsset.once('loaded', bind);\r\n            }\r\n        });\r\n        return this.__hmdAssetPromise;\r\n    }\r\n    /**\r\n     * The startPresenting method.\r\n     */\r\n    startPresenting() {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.spectatorMode) {\r\n                // clear the main viewport if spectator mode is off.\r\n                this.setSpectatorMode(false);\r\n            }\r\n            // https://github.com/immersive-web/webxr/blob/master/explainer.md\r\n            const startPresenting = () => {\r\n                var _a;\r\n                ;\r\n                (_a = navigator) === null || _a === void 0 ? void 0 : _a.xr.requestSession('immersive-vr', {\r\n                    requiredFeatures: ['local-floor'],\r\n                    optionalFeatures: ['bounded-floor'],\r\n                }).then((session) => {\r\n                    this.__renderer.__xrViewportPresenting = true;\r\n                    const viewport = this.__renderer.getViewport();\r\n                    if (viewport) {\r\n                        const camera = viewport.getCamera();\r\n                        const cameraXfo = camera.globalXfoParam.value;\r\n                        // Convert Y-Up to Z-Up.\r\n                        const stageXfo = new Xfo();\r\n                        stageXfo.tr = cameraXfo.tr.clone();\r\n                        stageXfo.tr.z -= 1.3; // assume sitting, and move the floor down a bit\r\n                        const dir = cameraXfo.ori.getZaxis();\r\n                        dir.z = 0;\r\n                        dir.normalizeInPlace();\r\n                        stageXfo.ori.setFromDirectionAndUpvector(dir, new Vec3(0, 0, 1));\r\n                        this.setXfo(stageXfo);\r\n                    }\r\n                    session.addEventListener('end', (event) => {\r\n                        this.__stageTreeItem.setVisible(false);\r\n                        this.session = null;\r\n                        this.emit('presentingChanged', new StateChangedEvent(false));\r\n                    });\r\n                    const onSelectStart = (ev) => {\r\n                        const controller = this.controllersMap[ev.inputSource.handedness];\r\n                        if (controller) {\r\n                            controller.buttonPressed = true;\r\n                            this.onPointerDown(new XRControllerEvent(1, controller));\r\n                        }\r\n                    };\r\n                    const onSelectEnd = (ev) => {\r\n                        const controller = this.controllersMap[ev.inputSource.handedness];\r\n                        if (controller) {\r\n                            controller.buttonPressed = false;\r\n                            this.onPointerUp(new XRControllerEvent(1, controller));\r\n                        }\r\n                    };\r\n                    const createController = (inputSource) => {\r\n                        console.log('creating controller:', inputSource.handedness, inputSource.profiles);\r\n                        const id = this.controllers.length;\r\n                        const controller = new VRController(this, inputSource, id);\r\n                        this.controllersMap[inputSource.handedness] = controller;\r\n                        this.controllers[id] = controller;\r\n                        const event = new ControllerAddedEvent(controller);\r\n                        this.emit('controllerAdded', event);\r\n                        return controller;\r\n                    };\r\n                    const onInputSourcesChange = (event) => {\r\n                        // As input sources are connected if they are tracked-pointer devices\r\n                        // look up which meshes should be associated with their profile and\r\n                        // load as the controller model for that hand.\r\n                        for (const inputSource of event.added) {\r\n                            if (inputSource.profiles.length == 0)\r\n                                continue;\r\n                            createController(inputSource);\r\n                        }\r\n                    };\r\n                    session.addEventListener('selectstart', onSelectStart);\r\n                    session.addEventListener('selectend', onSelectEnd);\r\n                    session.addEventListener('inputsourceschange', onInputSourcesChange);\r\n                    this.session = session;\r\n                    // ////////////////////////////\r\n                    // @ts-ignore - Note: We could install the webxr type definitions and remove this ignore.\r\n                    const glLayer = new XRWebGLLayer(session, this.__gl);\r\n                    session.updateRenderState({\r\n                        baseLayer: glLayer /*\r\n                        // Output canvas not working anymore\r\n                        outputContext: mirrorCanvas ? mirrorCanvas.getContext('xrpresent') : null,\r\n                        ,*/,\r\n                    });\r\n                    this.__width = glLayer.framebufferWidth;\r\n                    this.__height = glLayer.framebufferHeight;\r\n                    this.__region = [0, 0, this.__width, this.__height];\r\n                    this.resizeRenderTargets(this.__width, this.__height);\r\n                    // ////////////////////////////\r\n                    // eslint-disable-next-line require-jsdoc\r\n                    const onRefSpaceCreated = (refSpace) => {\r\n                        this.__refSpace = refSpace;\r\n                        this.__stageTreeItem.setVisible(true);\r\n                        this.emit('presentingChanged', new StateChangedEvent(true));\r\n                        this.loadHMDResources().then(() => {\r\n                            this.__startSession();\r\n                            resolve();\r\n                        });\r\n                    };\r\n                    // Attempt to get a 'bounded-floor' reference space, which will align\r\n                    // the user's physical floor with Y=0 and provide boundaries that\r\n                    // indicate where the user can safely walk.\r\n                    session\r\n                        .requestReferenceSpace(SystemDesc.isMobileDevice ? 'local' : 'bounded-floor')\r\n                        .catch((e) => {\r\n                        // If a bounded reference space isn't supported, fall back to a\r\n                        // local-floor reference space. This still provides a floor-relative\r\n                        // space and will always be supported for immersive sessions. It\r\n                        // will not, however, provide boundaries and generally expects the\r\n                        // user to stand in one place. If the device doesn't have a way of\r\n                        // determining the floor level (for example, with a 3DoF device)\r\n                        // then it will return an emulated local-floor space, where the view\r\n                        // is translated up by a static height so that the scene still\r\n                        // renders in approximately the right place.\r\n                        console.log('Falling back to local-floor reference space');\r\n                        session.requestReferenceSpace('local-floor').then(onRefSpaceCreated);\r\n                    })\r\n                        .then((refSpace) => {\r\n                        onRefSpaceCreated(refSpace);\r\n                    })\r\n                        .catch((e) => {\r\n                        console.warn(e.message);\r\n                        reject(new Error('Unable to start XR Session:' + e.message));\r\n                    });\r\n                }).catch((e) => {\r\n                    console.warn(e.message);\r\n                });\r\n            };\r\n            startPresenting();\r\n        });\r\n    }\r\n    /**\r\n     * The stopPresenting method.\r\n     */\r\n    stopPresenting() {\r\n        if (!this.session)\r\n            return;\r\n        this.session.end();\r\n    }\r\n    /**\r\n     * The togglePresenting method.\r\n     */\r\n    togglePresenting() {\r\n        if (this.session)\r\n            this.stopPresenting();\r\n        else\r\n            this.startPresenting();\r\n    }\r\n    /**\r\n     * The getHMDCanvasSize method.\r\n     * @return - The return value.\r\n     */\r\n    getHMDCanvasSize() {\r\n        return this.__hmdCanvasSize;\r\n    }\r\n    // //////////////////////////\r\n    // Controllers\r\n    /**\r\n     * The updateControllers method.\r\n     * @param xrFrame - The xrFrame value.\r\n     * @param event - The pose changed event object that will be emitted for observers such as collab.\r\n     */\r\n    updateControllers(xrFrame, event) {\r\n        const inputSources = this.session.inputSources;\r\n        for (let i = 0; i < inputSources.length; i++) {\r\n            const inputSource = inputSources[i];\r\n            // Note: This is to avoid a bug/feature in WebXR where initially the\r\n            // controllers have no handedness specified, then suddenly\r\n            // get handedness. We need the handedness before we can setup the controller.\r\n            if (inputSource.profiles.length == 0)\r\n                return;\r\n            if (!this.controllers[i]) {\r\n                console.warn('Missing controller');\r\n                continue;\r\n                // this.__createController(i, inputSource)\r\n            }\r\n            this.controllers[i].updatePose(this.__refSpace, xrFrame, inputSource, event);\r\n        }\r\n    }\r\n    /**\r\n     * The drawXRFrame method.\r\n     * @param xrFrame - The xrFrame value.\r\n     */\r\n    drawXRFrame(xrFrame) {\r\n        const session = xrFrame.session;\r\n        const layer = session.renderState.baseLayer;\r\n        const pose = xrFrame.getViewerPose(this.__refSpace);\r\n        if (!pose) {\r\n            // No pose available during XR present\r\n            // Note: before the Headset is put on the pose is missing, or after it is taken off\r\n            return;\r\n        }\r\n        this.__vrhead.update(pose);\r\n        const viewXfo = this.__vrhead.getTreeItem().globalXfoParam.value;\r\n        const views = pose.views;\r\n        if (!this.__projectionMatricesUpdated) {\r\n            this.__projectionMatrices = [];\r\n            this.__viewMatrices = [];\r\n            this.__cameraMatrices = [];\r\n            for (let i = 0; i < views.length; i++) {\r\n                const view = views[i];\r\n                const projMat = new Mat4();\r\n                projMat.setDataArray(view.projectionMatrix);\r\n                this.__projectionMatrices[i] = projMat;\r\n                this.__viewMatrices[i] = new Mat4();\r\n                this.__cameraMatrices[i] = new Mat4();\r\n            }\r\n            this.__projectionMatricesUpdated = true;\r\n        }\r\n        const gl = this.__renderer.gl;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, layer.framebuffer);\r\n        let col = this.backgroundColorParam.value.asArray();\r\n        gl.clearColor(col[0], col[1], col[2], col[3]);\r\n        gl.colorMask(true, true, true, true);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        this.depthRange = [session.renderState.depthNear, session.renderState.depthFar]; // TODO: check if this changes during session\r\n        const renderstate = {};\r\n        renderstate.boundRendertarget = layer.framebuffer;\r\n        renderstate.region = this.__region;\r\n        renderstate.viewport = this;\r\n        renderstate.vrviewport = this;\r\n        renderstate.viewports = [];\r\n        // renderstate.boundRendertarget.vrfbo = true;\r\n        for (let i = 0; i < views.length; i++) {\r\n            const view = views[i];\r\n            this.__viewMatrices[i].setDataArray(view.transform.inverse.matrix);\r\n            this.__viewMatrices[i].multiplyInPlace(this.__stageMatrix);\r\n            // this.__cameraMatrices[i].setDataArray(view.transform.matrix);\r\n            const vp = layer.getViewport(view);\r\n            renderstate.viewports.push({\r\n                viewMatrix: this.__viewMatrices[i],\r\n                projectionMatrix: this.__projectionMatrices[i],\r\n                region: [vp.x, vp.y, vp.width, vp.height],\r\n                isOrthographic: false,\r\n            });\r\n        }\r\n        renderstate.viewXfo = viewXfo;\r\n        renderstate.viewScale = 1.0 / this.__stageScale;\r\n        renderstate.cameraMatrix = renderstate.viewXfo.toMat4();\r\n        renderstate.region = this.__region;\r\n        renderstate.vrPresenting = true; // Some rendering is adjusted slightly in VR. e.g. Billboards\r\n        this.draw(renderstate);\r\n        // ///////////////////////\r\n        // Prepare the pointerMove event.\r\n        const event = new XRPoseEvent(this, viewXfo, this.controllers);\r\n        this.updateControllers(xrFrame, event);\r\n        if (this.capturedElement && event.propagating) {\r\n            this.capturedElement.onPointerMove(event);\r\n        }\r\n        if (this.manipulator && event.propagating) {\r\n            this.manipulator.onPointerMove(event);\r\n        }\r\n        // ///////////////////////\r\n        // Emit a signal for the shared session.\r\n        const viewChangedEvent = new VRViewChangedEvent(renderstate.viewXfo);\r\n        // TODO: better solution than setting members individually?\r\n        viewChangedEvent.hmd = this.__hmd;\r\n        viewChangedEvent.controllers = this.controllers;\r\n        viewChangedEvent.viewport = this;\r\n        viewChangedEvent.vrviewport = this;\r\n        this.emit('viewChanged', viewChangedEvent);\r\n        // If spectator mode is active, draw a 3rd person view of the scene to\r\n        // the WebGL context's default back buffer.\r\n        if (this.spectatorMode && !SystemDesc.isMobileDevice && this.tick % 5 == 0) {\r\n            const viewport = this.__renderer.getViewport();\r\n            if (viewport) {\r\n                // display the head in spectator mode.\r\n                this.__vrhead.setVisible(true);\r\n                viewport.draw();\r\n                this.__vrhead.setVisible(false);\r\n            }\r\n        }\r\n        this.tick++;\r\n    }\r\n    /**\r\n     * Handler of the `pointerdown` event fired when the pointer device is initially pressed.\r\n     *\r\n     * @param event - The DOM event produced by a pointer\r\n     */\r\n    onPointerDown(event) {\r\n        event.intersectionData = event.controller.getGeomItemAtTip();\r\n        // //////////////////////////////////////\r\n        // Double Tap\r\n        // First check for double tap handlers.\r\n        // If the manipulator or the viewport handle that\r\n        // then skip the 'pointerDown' event.\r\n        const downTime = Date.now();\r\n        if (downTime - this.controllerPointerDownTime[event.controller.id] < this.doubleClickTimeParam.value) {\r\n            this.emit('pointerDoublePressed', event);\r\n            if (!event.propagating)\r\n                return;\r\n            if (this.manipulator) {\r\n                this.manipulator.onPointerDoublePress(event);\r\n                if (!event.propagating)\r\n                    return;\r\n            }\r\n        }\r\n        this.controllerPointerDownTime[event.controller.id] = downTime;\r\n        // //////////////////////////////////////\r\n        if (this.capturedItem) {\r\n            this.capturedItem.onPointerDown(event);\r\n            return;\r\n        }\r\n        if (event.intersectionData != undefined) {\r\n            event.intersectionData.geomItem.onPointerDown(event);\r\n            if (!event.propagating || this.capturedItem)\r\n                return;\r\n        }\r\n        this.emit('pointerDown', event);\r\n        if (!event.propagating || this.capturedItem)\r\n            return;\r\n        if (this.manipulator) {\r\n            this.manipulator.onPointerDown(event);\r\n        }\r\n    }\r\n    /**\r\n     * Causes an event to occur when a user releases a mouse button over a element.\r\n     *\r\n     * @param event - The event that occurs.\r\n     */\r\n    onPointerUp(event) {\r\n        this.controllerPointerDownTime[event.controller.id] = 0;\r\n        if (this.capturedItem) {\r\n            this.capturedItem.onPointerUp(event);\r\n            return;\r\n        }\r\n        event.intersectionData = event.controller.getGeomItemAtTip();\r\n        if (event.intersectionData != undefined) {\r\n            event.intersectionData.geomItem.onPointerUp(event);\r\n            if (!event.propagating)\r\n                return;\r\n        }\r\n        this.emit('pointerUp', event);\r\n        if (!event.propagating)\r\n            return;\r\n        if (this.manipulator) {\r\n            this.manipulator.onPointerUp(event);\r\n            if (!event.propagating)\r\n                return;\r\n        }\r\n    }\r\n}\r\nexport { VRViewport };\r\n//# sourceMappingURL=VRViewport.js.map","import { GLTexture2D } from '../GLTexture2D';\r\nimport { GLHDRImage } from '../GLHDRImage';\r\nimport { MaterialFloatParam, MaterialColorParam, } from '../../SceneTree';\r\nimport { BaseClass } from '../../Utilities/BaseClass';\r\nclass ParamUniformBinding extends BaseClass {\r\n    // bind: (renderstate?: RenderState) => void\r\n    // unbind: (renderstate?: RenderState) => void\r\n    // destroy: () => void\r\n    constructor(unif) {\r\n        super();\r\n        this.dirty = false;\r\n        this.unif = unif;\r\n    }\r\n    /**\r\n     * The unbind method.\r\n     */\r\n    bind(renderstate) { }\r\n    /**\r\n     * The unbind method.\r\n     */\r\n    unbind(renderstate) { }\r\n    /**\r\n     * The destroy method.\r\n     */\r\n    destroy() { }\r\n}\r\n/** Class representing simple uniform binding.\r\n * @private\r\n */\r\nclass SimpleUniformBinding extends ParamUniformBinding {\r\n    /**\r\n     * Create simple uniform binding.\r\n     * @param gl - The webgl rendering context.\r\n     * @param glMaterial - The glMaterial value.\r\n     * @param param - The param value.\r\n     * @param unif - The WebGL uniform\r\n     * @param unifs - The dictionary of WebGL uniforms.\r\n     */\r\n    constructor(gl, glMaterial, param, unif, unifs) {\r\n        super(unif);\r\n        this.gltexture = null;\r\n        this.textureType = -1;\r\n        const name = param.getName();\r\n        this.param = param;\r\n        this.unif = unif;\r\n        this.textureUnif = unifs[name + 'Tex'];\r\n        this.textureTypeUnif = unifs[name + 'TexType'];\r\n        this.uniform1i = gl.uniform1i.bind(gl);\r\n        switch (this.unif.type) {\r\n            case 'Boolean':\r\n                // gl.uniform1ui(unif.location, value);// WebGL 2\r\n                this.uniformXX = gl.uniform1i.bind(gl);\r\n                break;\r\n            case 'UInt32':\r\n                if (gl.name == 'webgl2')\r\n                    this.uniformXX = gl.uniform1ui.bind(gl);\r\n                else\r\n                    this.uniformXX = gl.uniform1i.bind(gl);\r\n                break;\r\n            case 'SInt32':\r\n                this.uniformXX = gl.uniform1i.bind(gl);\r\n                break;\r\n            case 'Float32':\r\n                this.uniformXX = gl.uniform1f.bind(gl);\r\n                break;\r\n        }\r\n        this.bind = this.bindValue;\r\n        const genGLTex = (image) => {\r\n            let gltexture = image.getMetadata('gltexture');\r\n            const textureType = 1;\r\n            if (!gltexture) {\r\n                if (image.type === 'FLOAT') {\r\n                    gltexture = new GLHDRImage(gl, image);\r\n                }\r\n                else {\r\n                    gltexture = new GLTexture2D(gl, image);\r\n                }\r\n            }\r\n            this.texBinding = gltexture.preBind(this.textureUnif, unifs);\r\n            gltexture.on('updated', () => {\r\n                glMaterial.emit('updated');\r\n            });\r\n            this.gltexture = gltexture;\r\n            this.gltexture.addRef(this);\r\n            this.textureType = textureType;\r\n            this.bind = this.bindTexture;\r\n            glMaterial.emit('updated');\r\n        };\r\n        let boundImage;\r\n        let imageLoadedId;\r\n        this.update = () => {\r\n            try {\r\n                // Sometimes the value of a color param is an image.\r\n                if (boundImage) {\r\n                }\r\n                else {\r\n                    this.val = param.value;\r\n                }\r\n            }\r\n            catch (e) { }\r\n            glMaterial.emit('updated');\r\n        };\r\n        /**\r\n         * The update method.\r\n         */\r\n        if (param instanceof MaterialFloatParam) {\r\n            const connectImage = (image) => {\r\n                if (!image.isLoaded()) {\r\n                    imageLoadedId = image.on('loaded', () => {\r\n                        genGLTex(boundImage);\r\n                    });\r\n                }\r\n                else {\r\n                    genGLTex(image);\r\n                }\r\n                boundImage = image;\r\n            };\r\n            const disconnectImage = () => {\r\n                const gltexture = boundImage.getMetadata('gltexture');\r\n                gltexture.removeRef(this);\r\n                this.texBinding = null;\r\n                this.gltexture = null;\r\n                this.textureType = -1;\r\n                this.bind = this.bindValue;\r\n                if (imageLoadedId) {\r\n                    boundImage.removeListenerById('loaded', imageLoadedId);\r\n                }\r\n                boundImage = null;\r\n                imageLoadedId = null;\r\n                glMaterial.emit('updated');\r\n            };\r\n            if (param.getImage())\r\n                connectImage(param.getImage());\r\n            param.on('textureConnected', () => {\r\n                connectImage(param.getImage());\r\n            });\r\n            param.on('textureDisconnected', () => {\r\n                disconnectImage();\r\n            });\r\n        }\r\n        this.dirty = true;\r\n        param.on('valueChanged', () => {\r\n            this.dirty = true;\r\n            glMaterial.emit('updated');\r\n        });\r\n    }\r\n    /**\r\n     * The bindValue method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    bindValue(renderstate) {\r\n        if (this.dirty) {\r\n            this.update();\r\n            this.dirty = false;\r\n        }\r\n        if (this.unif)\r\n            this.uniformXX(this.unif.location, this.val);\r\n        if (this.textureTypeUnif)\r\n            this.uniform1i(this.textureTypeUnif.location, 0);\r\n    }\r\n    /**\r\n     * The bindTexture method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    bindTexture(renderstate) {\r\n        if (this.dirty) {\r\n            this.update();\r\n            this.dirty = false;\r\n        }\r\n        this.gltexture.bindToUniform(renderstate, this.textureUnif, this.texBinding);\r\n    }\r\n}\r\n/** Class representing complex uniform binding.\r\n * @private\r\n */\r\nclass ComplexUniformBinding extends ParamUniformBinding {\r\n    /**\r\n     * Create complex uniform binding.\r\n     * @param gl - The webgl rendering context.\r\n     * @param glMaterial - The glMaterial value.\r\n     * @param param - The param value.\r\n     * @param unif - The WebGL uniform\r\n     */\r\n    constructor(gl, glMaterial, param, unif) {\r\n        super(unif);\r\n        this.param = param;\r\n        switch (this.unif.type) {\r\n            case 'Vec2':\r\n                this.uniformXX = gl.uniform2fv.bind(gl);\r\n                break;\r\n            case 'Vec3':\r\n                this.uniformXX = gl.uniform3fv.bind(gl);\r\n                break;\r\n            case 'Vec4':\r\n                this.uniformXX = gl.uniform4fv.bind(gl);\r\n                break;\r\n        }\r\n        this.dirty = true;\r\n        param.on('valueChanged', () => {\r\n            this.dirty = true;\r\n            glMaterial.emit('updated');\r\n        });\r\n    }\r\n    /**\r\n     * The bind method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    bind(renderstate) {\r\n        if (this.dirty) {\r\n            this.values = this.param.value.asArray();\r\n            this.dirty = false;\r\n        }\r\n        this.uniformXX(this.unif.location, this.values);\r\n    }\r\n    /**\r\n     * The unbind method.\r\n     */\r\n    unbind() { }\r\n    /**\r\n     * The destroy method.\r\n     */\r\n    destroy() { }\r\n}\r\n/** Class representing material uniform binding.\r\n * @private\r\n */\r\nclass MatrixUniformBinding extends ParamUniformBinding {\r\n    /**\r\n     * Create material uniform binding.\r\n     * @param gl - The webgl rendering context.\r\n     * @param glMaterial - The glMaterial value.\r\n     * @param param - The param value.\r\n     * @param unif - The WebGL uniform\r\n     */\r\n    constructor(gl, glMaterial, param, unif) {\r\n        super(unif);\r\n        this.values = new Float32Array(0);\r\n        this.param = param;\r\n        switch (this.unif.type) {\r\n            case 'Mat3':\r\n                this.uniformMatrixXXX = gl.uniformMatrix3fv.bind(gl);\r\n                break;\r\n            case 'Mat4':\r\n                this.uniformMatrixXXX = gl.uniformMatrix4fv.bind(gl);\r\n                break;\r\n        }\r\n        this.dirty = true;\r\n        param.on('valueChanged', () => {\r\n            this.dirty = true;\r\n            glMaterial.emit('updated');\r\n        });\r\n    }\r\n    /**\r\n     * The bind method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    bind(renderstate) {\r\n        if (this.dirty) {\r\n            this.values = this.param.value.asArray();\r\n            this.dirty = false;\r\n        }\r\n        this.uniformMatrixXXX(this.unif.location, false, this.values);\r\n    }\r\n    /**\r\n     * The unbind method.\r\n     */\r\n    unbind() { }\r\n    /**\r\n     * The destroy method.\r\n     */\r\n    destroy() { }\r\n}\r\n/** Class representing color uniform binding.\r\n * @private\r\n */\r\nclass ColorUniformBinding extends ParamUniformBinding {\r\n    /**\r\n     * Create color uniform binding.\r\n     * @param gl - The webgl rendering context.\r\n     * @param glMaterial - The glMaterial value.\r\n     * @param param - The param value.\r\n     * @param unif - The WebGL uniform\r\n     * @param unifs - The dictionary of WebGL uniforms.\r\n     */\r\n    constructor(gl, glMaterial, param, unif, unifs) {\r\n        super(unif);\r\n        const name = param.getName();\r\n        this.param = param;\r\n        this.textureUnif = unifs[name + 'Tex'];\r\n        this.textureTypeUnif = unifs[name + 'TexType'];\r\n        this.values = Float32Array.from([0, 0, 0, 0]);\r\n        this.bind = this.bindValue;\r\n        const genGLTex = (image) => {\r\n            boundImage = image;\r\n            let gltexture = image.getMetadata('gltexture');\r\n            const textureType = 1;\r\n            if (!gltexture) {\r\n                if (image.type === 'FLOAT') {\r\n                    gltexture = new GLHDRImage(gl, image);\r\n                }\r\n                else {\r\n                    gltexture = new GLTexture2D(gl, image);\r\n                }\r\n            }\r\n            this.texBinding = gltexture.preBind(this.textureUnif, unifs);\r\n            gltexture.on('updated', () => {\r\n                glMaterial.emit('updated');\r\n            });\r\n            this.gltexture = gltexture;\r\n            this.gltexture.addRef(this);\r\n            this.textureType = textureType;\r\n            this.bind = this.bindTexture;\r\n            glMaterial.emit('updated');\r\n        };\r\n        let boundImage;\r\n        let imageLoadedId;\r\n        const connectImage = (image) => {\r\n            if (!image.isLoaded()) {\r\n                imageLoadedId = image.once('loaded', () => {\r\n                    genGLTex(image);\r\n                });\r\n            }\r\n            else {\r\n                genGLTex(image);\r\n            }\r\n        };\r\n        const disconnectImage = () => {\r\n            this.gltexture.removeRef(this);\r\n            this.gltexture = null;\r\n            this.texBinding = null;\r\n            this.textureType = null;\r\n            if (imageLoadedId) {\r\n                boundImage.removeListenerById('loaded', imageLoadedId);\r\n            }\r\n            this.bind = this.bindValue;\r\n            boundImage = null;\r\n            imageLoadedId = null;\r\n            glMaterial.emit('updated');\r\n        };\r\n        this.update = () => {\r\n            try {\r\n                // Sometimes the value of a color param is an image.\r\n                if (boundImage) {\r\n                }\r\n                else if (this.unif) {\r\n                    this.values = param.value.asArray();\r\n                }\r\n            }\r\n            catch (e) { }\r\n            glMaterial.emit('updated');\r\n        };\r\n        /**\r\n         * The update method.\r\n         */\r\n        if (param instanceof MaterialColorParam) {\r\n            if (param.getImage())\r\n                connectImage(param.getImage());\r\n            param.on('textureConnected', () => {\r\n                connectImage(param.getImage());\r\n            });\r\n            param.on('textureDisconnected', () => {\r\n                disconnectImage();\r\n            });\r\n        }\r\n        this.dirty = true;\r\n        param.on('valueChanged', () => {\r\n            this.dirty = true;\r\n        });\r\n        this.uniform1i = gl.uniform1i.bind(gl);\r\n        this.uniform4fv = gl.uniform4fv.bind(gl);\r\n    }\r\n    /**\r\n     * The bindValue method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    bindValue(renderstate) {\r\n        if (!this.unif)\r\n            return; // Note: Normals parms have no unif and can only be bound to a texture.\r\n        if (this.dirty) {\r\n            this.update();\r\n            this.dirty = false;\r\n        }\r\n        if (this.unif)\r\n            this.uniform4fv(this.unif.location, this.values);\r\n        if (this.textureTypeUnif)\r\n            this.uniform1i(this.textureTypeUnif.location, 0);\r\n    }\r\n    /**\r\n     * The bindTexture method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    bindTexture(renderstate) {\r\n        if (this.dirty) {\r\n            this.update();\r\n            this.dirty = false;\r\n        }\r\n        this.gltexture.bindToUniform(renderstate, this.textureUnif, this.texBinding);\r\n    }\r\n}\r\nconst logged = {};\r\n/** Class representing material shader binding.\r\n * @private\r\n */\r\nclass MaterialShaderBinding {\r\n    /**\r\n     * Create material shader binding.\r\n     * @param gl - The webgl rendering context.\r\n     * @param glMaterial - The glMaterial value.\r\n     * @param unifs - The dictionary of WebGL uniforms.\r\n     * @param warnMissingUnifs - The warnMissingUnifs value.\r\n     */\r\n    constructor(gl, glMaterial, unifs, warnMissingUnifs) {\r\n        this.uniformBindings = [];\r\n        const bindParam = (param) => {\r\n            const name = param.getName();\r\n            const unif = unifs[name];\r\n            if (unif == undefined) {\r\n                const textureUnif = unifs[name + 'Tex'];\r\n                if (textureUnif) {\r\n                    this.uniformBindings.push(new ColorUniformBinding(gl, glMaterial, param, unif, unifs));\r\n                    return;\r\n                }\r\n                // Note: we now bind the Material even for rendering geom datas,\r\n                // which can mean many params have no uniform in the shader, which is fine.\r\n                if (warnMissingUnifs) {\r\n                    // Note: this silent error caused me a lot of searching. make it noisy.\r\n                    const shaderName = glMaterial.getMaterial().getShaderName();\r\n                    if (!logged[shaderName]) {\r\n                        logged[shaderName] = {};\r\n                    }\r\n                    if (!logged[shaderName][name]) {\r\n                        // TODO: Many of these warnings are because when we change shaders\r\n                        // we do not remove obsolete params, but we probably should.\r\n                        console.warn('Material:' + glMaterial.getMaterial().getName(), 'with Shader ', shaderName, 'Param has no unif', name);\r\n                        logged[shaderName][name] = true;\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            switch (unif.type) {\r\n                case 'Boolean':\r\n                case 'UInt32':\r\n                case 'SInt32':\r\n                case 'Float32':\r\n                    this.uniformBindings.push(new SimpleUniformBinding(gl, glMaterial, param, unif, unifs));\r\n                    break;\r\n                case 'Vec2':\r\n                case 'Vec3':\r\n                case 'Vec4':\r\n                    this.uniformBindings.push(new ComplexUniformBinding(gl, glMaterial, param, unif));\r\n                    break;\r\n                case 'Color':\r\n                    this.uniformBindings.push(new ColorUniformBinding(gl, glMaterial, param, unif, unifs));\r\n                    break;\r\n                case 'Mat4':\r\n                    this.uniformBindings.push(new MatrixUniformBinding(gl, glMaterial, param, unif));\r\n                    break;\r\n                default:\r\n                    console.warn('Param :' + name + ' has unhandled data type:' + unif.type);\r\n                    return;\r\n            }\r\n            return;\r\n        };\r\n        const params = glMaterial.getMaterial().getParameters();\r\n        for (const param of params) {\r\n            bindParam(param);\r\n        }\r\n    }\r\n    /**\r\n     * The bind method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @return - The return value.\r\n     */\r\n    bind(renderstate) {\r\n        for (const uniformBinding of this.uniformBindings) {\r\n            uniformBinding.bind(renderstate);\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * The unbind method.\r\n     */\r\n    unbind(renderstate) {\r\n        for (const uniformBinding of this.uniformBindings) {\r\n            uniformBinding.unbind(renderstate);\r\n        }\r\n    }\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() {\r\n        for (const uniformBinding of this.uniformBindings) {\r\n            uniformBinding.destroy();\r\n        }\r\n    }\r\n}\r\nexport { MaterialShaderBinding };\r\n//# sourceMappingURL=MaterialShaderBinding.js.map","import { EventEmitter } from '../../Utilities/EventEmitter';\r\nimport { MaterialShaderBinding } from './MaterialShaderBinding';\r\n/** Class representing a GL material.\r\n * @extends EventEmitter\r\n * @private\r\n */\r\nclass GLMaterial extends EventEmitter {\r\n    /**\r\n     * Create a GL material.\r\n     * @param gl - The webgl rendering context.\r\n     * @param material - The material value.\r\n     * @param glShader - The glShader value.\r\n     */\r\n    constructor(gl, material, glShader) {\r\n        super();\r\n        this.__gl = gl;\r\n        this.__material = material;\r\n        this.__glshader = glShader;\r\n        this.__shaderBindings = {};\r\n        material.on('parameterValueChanged', () => this.emit('updated'));\r\n    }\r\n    /**\r\n     * The getMaterial method.\r\n     * @return - The return value.\r\n     */\r\n    getMaterial() {\r\n        return this.__material;\r\n    }\r\n    /**\r\n     * The getGLShader method.\r\n     * @return - The return value.\r\n     */\r\n    getGLShader() {\r\n        return this.__glshader;\r\n    }\r\n    /**\r\n     * The bind method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param warnMissingUnifs - The renderstate value.\r\n     * @return - The return value.\r\n     */\r\n    bind(renderstate, warnMissingUnifs) {\r\n        this.__boundTexturesBeforeMaterial = renderstate.boundTextures;\r\n        let shaderBinding = this.__shaderBindings[renderstate.shaderkey];\r\n        if (!shaderBinding) {\r\n            const gl = this.__gl;\r\n            shaderBinding = new MaterialShaderBinding(gl, this, renderstate.unifs, warnMissingUnifs);\r\n            this.__shaderBindings[renderstate.shaderkey] = shaderBinding;\r\n        }\r\n        return shaderBinding.bind(renderstate);\r\n        return true;\r\n    }\r\n    /**\r\n     * The unbind method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    unbind(renderstate) {\r\n        // Enable texture units to be re-used by resetting the count back\r\n        // to what it was.\r\n        renderstate.boundTextures = this.__boundTexturesBeforeMaterial;\r\n    }\r\n}\r\nexport { GLMaterial };\r\n//# sourceMappingURL=GLMaterial.js.map","import { GLTexture2D } from '../GLTexture2D';\r\nimport { EventEmitter, MathFunctions, Allocator1D } from '../../Utilities/index';\r\nimport { GLMaterial } from './GLMaterial';\r\n/** Class representing a GL CAD material library.\r\n * @ignore\r\n */\r\nclass GLMaterialLibrary extends EventEmitter {\r\n    /**\r\n     * Create a GL CAD material library.\r\n     * @param renderer - The renderer object\r\n     */\r\n    constructor(renderer) {\r\n        super();\r\n        this.materials = [];\r\n        this.materialIndices = {};\r\n        this.glMaterials = {};\r\n        this.refCounts = [];\r\n        this.freeIndices = [];\r\n        this.materialsAllocator = new Allocator1D();\r\n        this.renderer = renderer;\r\n        this.materials = [];\r\n        this.refCounts = []; // The number of times this material was added to the library.\r\n        this.materialIndices = {};\r\n        this.glMaterials = {};\r\n        this.freeIndices = [];\r\n        this.dirtyIndices = new Set();\r\n        this.materialsAllocator = new Allocator1D();\r\n        this.materialsAllocator.on('dataReallocated', (event) => {\r\n            // during allocation, a defragment might occur, which means\r\n            // we need to re-upload some of our data.\r\n            const id = event.id;\r\n            this.dirtyIndices.add(id);\r\n        });\r\n    }\r\n    /**\r\n     * The addMaterial method.\r\n     * @param material - The material object.\r\n     * @return - The index of GLMaterial\r\n     */\r\n    addMaterial(material) {\r\n        let index = this.materialIndices[material.getId()];\r\n        if (index != undefined) {\r\n            // Increment the ref count for the Material\r\n            this.refCounts[index]++;\r\n            return index;\r\n        }\r\n        if (this.freeIndices.length) {\r\n            index = this.freeIndices.pop();\r\n        }\r\n        else {\r\n            index = this.materials.length;\r\n        }\r\n        this.materials[index] = material;\r\n        this.refCounts[index] = 1;\r\n        this.materialIndices[material.getId()] = index;\r\n        const matData = material.getShaderClass().getPackedMaterialData(material);\r\n        this.materialsAllocator.allocate(index, matData.length / 4);\r\n        const parameterValueChanged = () => {\r\n            this.dirtyIndices.add(index);\r\n            this.emit('updated');\r\n        };\r\n        material.on('parameterValueChanged', parameterValueChanged);\r\n        // const transparencyChanged = () => {\r\n        //   material.off('parameterValueChanged', parameterValueChanged)\r\n        //   material.off('transparencyChanged', transparencyChanged)\r\n        //   this.removeMaterial(material)\r\n        // }\r\n        // material.on('transparencyChanged', transparencyChanged)\r\n        this.dirtyIndices.add(index);\r\n        return index;\r\n    }\r\n    /**\r\n     * Given a material, generates a GLMaterial that manages the GPU state for the material.\r\n     * @param material - The material value.\r\n     * @return - The constructed GLMaterial.\r\n     */\r\n    getGLMaterial(material) {\r\n        if (this.glMaterials[material.getId()]) {\r\n            return this.glMaterials[material.getId()];\r\n        }\r\n        const glShader = this.renderer.getOrCreateShader(material.getShaderName());\r\n        const gl = this.renderer.gl;\r\n        const glMaterial = new GLMaterial(gl, material, glShader);\r\n        glMaterial.on('updated', () => {\r\n            this.renderer.requestRedraw();\r\n        });\r\n        material.setMetadata('glMaterial', glMaterial);\r\n        this.glMaterials[material.getId()] = glMaterial;\r\n        return glMaterial;\r\n    }\r\n    getMaterialAllocation(material) {\r\n        const index = this.materialIndices[material.getId()];\r\n        if (index != undefined) {\r\n            return this.materialsAllocator.getAllocation(index);\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * The removeMaterial method.\r\n     * @param material - The material object.\r\n     */\r\n    removeMaterial(material) {\r\n        const index = this.materialIndices[material.getId()];\r\n        this.refCounts[index]--;\r\n        // If there are still refs to this geom. (GeomItems that use it)\r\n        // then we keep it in the renderer.\r\n        if (this.refCounts[index] > 0) {\r\n            return;\r\n        }\r\n        this.freeIndices.push(index);\r\n        this.materialsAllocator.deallocate(index);\r\n        this.materials[index] = null;\r\n        delete this.materialIndices[material.getId()];\r\n        if (this.dirtyIndices.has(index)) {\r\n            this.dirtyIndices.delete(index);\r\n        }\r\n    }\r\n    /**\r\n     * The uploadMaterials method.\r\n     * @param renderstate - The render state for the current draw traversal\r\n     */\r\n    uploadMaterials(renderstate) {\r\n        const gl = this.renderer.__gl;\r\n        const materialsTextureSize = MathFunctions.nextPow2(Math.ceil(Math.sqrt(this.materialsAllocator.reservedSpace)));\r\n        const unit = renderstate.boundTextures++;\r\n        gl.activeTexture(gl.TEXTURE0 + unit);\r\n        if (!this.materialsTexture) {\r\n            this.materialsTexture = new GLTexture2D(this.renderer.__gl, {\r\n                format: 'RGBA',\r\n                type: 'FLOAT',\r\n                width: materialsTextureSize,\r\n                height: materialsTextureSize,\r\n                filter: 'NEAREST',\r\n                wrap: 'CLAMP_TO_EDGE',\r\n                mipMapped: false,\r\n            });\r\n            this.materialsTexture.clear();\r\n        }\r\n        else if (this.materialsTexture.width < materialsTextureSize) {\r\n            this.materialsTexture.resize(materialsTextureSize, materialsTextureSize);\r\n            for (let i = 0; i < this.materials.length; i++) {\r\n                if (this.materialsAllocator.getAllocation(i)) {\r\n                    this.dirtyIndices.add(i);\r\n                }\r\n            }\r\n        }\r\n        const tex = this.materialsTexture;\r\n        const texWidth = this.materialsTexture.width;\r\n        gl.bindTexture(gl.TEXTURE_2D, tex.glTex);\r\n        this.dirtyIndices.forEach((index) => {\r\n            const allocation = this.materialsAllocator.getAllocation(index);\r\n            const material = this.materials[index];\r\n            const matData = material.getShaderClass().getPackedMaterialData(material);\r\n            const level = 0;\r\n            const xoffset = allocation.start % texWidth;\r\n            const height = 1;\r\n            const rows = Math.ceil((xoffset + allocation.size) / texWidth);\r\n            let consumed = 0;\r\n            let remaining = allocation.size;\r\n            let rowStart = xoffset;\r\n            for (let i = 0; i < rows; i++) {\r\n                let width;\r\n                if (rowStart + remaining > texWidth) {\r\n                    width = texWidth - rowStart;\r\n                    rowStart = 0;\r\n                }\r\n                else {\r\n                    width = remaining;\r\n                }\r\n                const x = (allocation.start + consumed) % texWidth;\r\n                const y = Math.floor((allocation.start + consumed) / texWidth);\r\n                const data = matData.subarray(consumed * 4, (consumed + width) * 4);\r\n                gl.texSubImage2D(gl.TEXTURE_2D, level, x, y, width, height, tex.__format, tex.__type, data);\r\n                consumed += width;\r\n                remaining -= width;\r\n            }\r\n        });\r\n        this.dirtyIndices = new Set();\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        renderstate.boundTextures--;\r\n    }\r\n    /**\r\n     * Updates the GPU state if any update is needed.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    update(renderstate) {\r\n        if (this.dirtyItemIndices.length > 0)\r\n            this.uploadMaterials(renderstate);\r\n        renderstate.drawItemsTexture = this.glGeomItemsTexture;\r\n    }\r\n    /**\r\n     * The bind method.\r\n     * @param renderstate - The renderstate param.\r\n     * @return - The return value.\r\n     */\r\n    bind(renderstate) {\r\n        if (this.dirtyIndices.size > 0)\r\n            this.uploadMaterials(renderstate);\r\n        if (!this.materialsTexture)\r\n            return false;\r\n        const { materialsTexture, materialsTextureSize } = renderstate.unifs;\r\n        if (materialsTexture) {\r\n            this.materialsTexture.bindToUniform(renderstate, materialsTexture);\r\n            if (materialsTextureSize) {\r\n                const gl = this.renderer.gl;\r\n                gl.uniform2i(materialsTextureSize.location, this.materialsTexture.width, this.materialsTexture.height);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexport { GLMaterialLibrary };\r\n//# sourceMappingURL=GLMaterialLibrary.js.map","import { GLGeom } from './GLGeom';\r\nimport { generateShaderGeomBinding } from './GeomShaderBinding';\r\n/** Class representing GL points.\r\n * @extends GLGeom\r\n * @private\r\n */\r\nclass GLPoints extends GLGeom {\r\n    /**\r\n     * Create a GL point.\r\n     * @param gl - The webgl rendering context.\r\n     * @param points - The points value.\r\n     */\r\n    constructor(gl, points) {\r\n        super(gl, points);\r\n        this.__numVertices = 9;\r\n        this.__vboState = -1;\r\n        this.genBuffers();\r\n    }\r\n    /**\r\n     * The genBuffers method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    genBuffers(renderstate) {\r\n        super.genBuffers(renderstate);\r\n        const gl = this.__gl;\r\n        const geomBuffers = this.__geom.genBuffers();\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const attrName in geomBuffers.attrBuffers) {\r\n            const attrData = geomBuffers.attrBuffers[attrName];\r\n            const attrBuffer = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, attrBuffer);\r\n            gl.bufferData(gl.ARRAY_BUFFER, attrData.values, gl.STATIC_DRAW);\r\n            this.__glattrbuffers[attrName] = {\r\n                buffer: attrBuffer,\r\n                dataType: attrData.dataType,\r\n                normalized: attrData.normalized,\r\n            };\r\n        }\r\n        this.__numVertices = geomBuffers.numVertices;\r\n        this.__vboState = 2;\r\n    }\r\n    /**\r\n     * The updateBuffers method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    updateBuffers(renderstate) {\r\n        const gl = this.__gl;\r\n        const geomBuffers = this.__geom.genBuffers();\r\n        // Update the vertex attribute buffers\r\n        const numVertsChanged = geomBuffers.numVertices != this.__numVertices;\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const attrName in geomBuffers.attrBuffers) {\r\n            const attrData = geomBuffers.attrBuffers[attrName];\r\n            const glattr = this.__glattrbuffers[attrName];\r\n            if (numVertsChanged) {\r\n                gl.deleteBuffer(glattr.buffer);\r\n                glattr.buffer = gl.createBuffer();\r\n            }\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, glattr.buffer);\r\n            gl.bufferData(gl.ARRAY_BUFFER, attrData.values, gl.STATIC_DRAW);\r\n        }\r\n        // Cache the size so we know later if it changed (see below)\r\n        this.__numVertices = geomBuffers.numVertices;\r\n    }\r\n    /**\r\n     * The bind method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @return - The return value.\r\n     */\r\n    bind(renderstate) {\r\n        if (renderstate.unifs.PointSize) {\r\n            const gl = this.__gl;\r\n            let shaderBinding = this.__shaderBindings[renderstate.shaderkey];\r\n            if (!shaderBinding) {\r\n                if (!gl.__quadVertexIdsBuffer)\r\n                    gl.setupInstancedQuad();\r\n                // Merge the points attrs with the quad attrs.\r\n                const attrbuffers = Object.assign(this.__glattrbuffers, gl.__quadattrbuffers);\r\n                shaderBinding = generateShaderGeomBinding(this.__gl, renderstate.attrs, attrbuffers, gl.__quadIndexBuffer);\r\n                this.__shaderBindings[renderstate.shaderkey] = shaderBinding;\r\n            }\r\n            shaderBinding.bind(renderstate);\r\n            return true;\r\n        }\r\n        else {\r\n            return super.bind(renderstate);\r\n        }\r\n    }\r\n    /**\r\n     * The draw method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    draw(renderstate) {\r\n        const gl = this.__gl;\r\n        if (renderstate.unifs.PointSize) {\r\n            gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, this.__numVertices);\r\n        }\r\n        else {\r\n            gl.drawArrays(gl.POINTS, 0, this.__numVertices);\r\n        }\r\n    }\r\n    /**\r\n     * The drawInstanced method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param instanceCount - The instanceCount value.\r\n     */\r\n    drawInstanced(renderstate, instanceCount) {\r\n        const gl = this.__gl;\r\n        gl.drawArraysInstanced(this.__gl.POINTS, 0, this.__numVertices, instanceCount);\r\n    }\r\n}\r\nexport { GLPoints };\r\n// GLPoints;\r\n//# sourceMappingURL=GLPoints.js.map","import { Vec3 } from '../../Math/index';\r\nimport { GLGeom } from './GLGeom';\r\nimport { generateShaderGeomBinding } from './GeomShaderBinding';\r\nimport { GLTexture2D } from '../GLTexture2D';\r\n/** Class representing GL lines.\r\n * @extends GLGeom\r\n * @private\r\n */\r\nclass GLLines extends GLGeom {\r\n    /**\r\n     * Create a GL line.\r\n     * @param gl - The webgl rendering context.\r\n     * @param lines - The geom value.\r\n     */\r\n    constructor(gl, lines) {\r\n        super(gl, lines);\r\n        this.__numSegIndices = 0;\r\n        this.__numVertices = 0;\r\n        this.__fatBuffersNeedUpload = false;\r\n        this.fatBuffers = null;\r\n        this.__buffersNeedUpload = false;\r\n        this.__indexDataType = 0;\r\n        this.__numSegIndices = 0;\r\n        this.__numVertices = 0;\r\n        this.__fatBuffersNeedUpload = true;\r\n    }\r\n    /**\r\n     * The dirtyBuffers method.\r\n     * @param opts - options passed when geomDataChanged is emitted. (Currently ony used by the FreehandLines tool)\r\n     */\r\n    dirtyBuffers(opts) {\r\n        super.dirtyBuffers(opts);\r\n        this.__fatBuffersNeedUpload = true;\r\n        this.emit('updated');\r\n    }\r\n    /**\r\n     * The clearBuffers method.\r\n     */\r\n    clearBuffers() {\r\n        const gl = this.__gl;\r\n        gl.deleteBuffer(this.__indexBuffer);\r\n        this.__indexBuffer = null;\r\n        if (this.fatBuffers && this.fatBuffers.positionsTexture) {\r\n            if (this.fatBuffers.positionsTexture) {\r\n                this.fatBuffers.positionsTexture.destroy();\r\n                this.fatBuffers.positionsTexture = null;\r\n            }\r\n            const segmentIndices = this.fatBuffers.glattrbuffers.segmentIndices;\r\n            if (segmentIndices.buffer) {\r\n                gl.deleteBuffer(segmentIndices.buffer);\r\n                this.fatBuffers.glattrbuffers.segmentIndices = null;\r\n            }\r\n        }\r\n        super.clearBuffers();\r\n    }\r\n    /**\r\n     * The genFatBuffers method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    genFatBuffers(renderstate) {\r\n        const gl = this.__gl;\r\n        const geomBuffers = this.__geom.genBuffers();\r\n        const indices = geomBuffers.indices;\r\n        const numVertsChanged = geomBuffers.numVertices != this.__numVertices;\r\n        if (!gl.__quadVertexIdsBuffer) {\r\n            gl.setupInstancedQuad();\r\n        }\r\n        if (!this.fatBuffers) {\r\n            this.fatBuffers = { drawCount: 0, positionsTexture: null, glattrbuffers: {} };\r\n            this.fatBuffers.glattrbuffers.vertexIDs = gl.__quadattrbuffers.vertexIDs;\r\n        }\r\n        const unit = renderstate.boundTextures++;\r\n        gl.activeTexture(this.__gl.TEXTURE0 + unit);\r\n        this.fatBuffers.drawCount = indices.length / 2;\r\n        const vertexAttributes = this.__geom.getVertexAttributes();\r\n        const positions = vertexAttributes.positions;\r\n        const lineThicknessAttr = vertexAttributes.lineThickness;\r\n        const stride = 4; // The number of floats per draw item.\r\n        const dataArray = new Float32Array(positions.getCount() * stride);\r\n        for (let i = 0; i < positions.getCount(); i++) {\r\n            const pos = new Vec3(new Float32Array(dataArray.buffer, i * stride * 4, 3));\r\n            pos.setFromOther(positions.getValueRef(i));\r\n            // The thickness of the line.\r\n            if (lineThicknessAttr)\r\n                dataArray[i * 4 + 3] = lineThicknessAttr.getFloat32Value(i);\r\n            else\r\n                dataArray[i * 4 + 3] = 1.0;\r\n        }\r\n        if (numVertsChanged && this.fatBuffers.positionsTexture) {\r\n            this.fatBuffers.positionsTexture.destroy();\r\n            this.fatBuffers.positionsTexture = null;\r\n        }\r\n        if (!this.fatBuffers.positionsTexture) {\r\n            this.fatBuffers.positionsTexture = new GLTexture2D(this.__gl, {\r\n                format: 'RGBA',\r\n                type: 'FLOAT',\r\n                width: positions.getCount(),\r\n                /* each pixel has 4 floats*/\r\n                height: 1,\r\n                filter: 'NEAREST',\r\n                wrap: 'CLAMP_TO_EDGE',\r\n                data: dataArray,\r\n                mipMapped: false,\r\n            });\r\n        }\r\n        else {\r\n            this.fatBuffers.positionsTexture.bufferData(dataArray, positions.getCount(), 1);\r\n        }\r\n        const makeIndices = () => {\r\n            const indexArray = new Float32Array(indices.length);\r\n            for (let i = 0; i < indices.length; i++) {\r\n                let seqentialIndex;\r\n                if (i % 2 == 0) {\r\n                    seqentialIndex = i > 0 ? indices[i] == indices[i - 1] : indices[i] == indices[indices.length - 1];\r\n                }\r\n                else {\r\n                    seqentialIndex = i < indices.length - 1 ? indices[i] == indices[i + 1] : indices[i] == indices[0];\r\n                }\r\n                // encode the flag into the indices values.\r\n                // this flag is decoded in GLSL.\r\n                indexArray[i] = (seqentialIndex ? 1 : 0) + indices[i] * 2;\r\n            }\r\n            return indexArray;\r\n        };\r\n        if (!this.fatBuffers.glattrbuffers.segmentIndices) {\r\n            const indexBuffer = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);\r\n            gl.bufferData(gl.ARRAY_BUFFER, makeIndices(), gl.STATIC_DRAW);\r\n            this.fatBuffers.glattrbuffers.segmentIndices = {\r\n                buffer: indexBuffer,\r\n                dimension: 2,\r\n                dataType: 'Vec2',\r\n            };\r\n        }\r\n        else {\r\n            if (!this.genBufferOpts || (this.genBufferOpts && this.genBufferOpts.topologyChanged)) {\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.fatBuffers.glattrbuffers.segmentIndices.buffer);\r\n                gl.bufferData(gl.ARRAY_BUFFER, makeIndices(), gl.STATIC_DRAW);\r\n            }\r\n        }\r\n        this.__numSegIndices = indices.length;\r\n        this.__numVertices = geomBuffers.numVertices;\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        renderstate.boundTextures--;\r\n        this.__fatBuffersNeedUpload = false;\r\n    }\r\n    /**\r\n     * The genBuffers method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    genBuffers(renderstate) {\r\n        const gl = this.__gl;\r\n        const geomBuffers = this.__geom.genBuffers();\r\n        const indices = geomBuffers.indices;\r\n        const numVertsChanged = geomBuffers.numVertices != this.__numVertices;\r\n        {\r\n            if (!this.__indexBuffer) {\r\n                this.__indexBuffer = gl.createBuffer();\r\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.__indexBuffer);\r\n                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);\r\n            }\r\n            else {\r\n                // Note: the topology can change without the number of vertices changing\r\n                // and vice versa.\r\n                if (!this.genBufferOpts || (this.genBufferOpts && this.genBufferOpts.topologyChanged)) {\r\n                    if (this.__numSegIndices != indices.length) {\r\n                        gl.deleteBuffer(this.__indexBuffer);\r\n                        this.__indexBuffer = gl.createBuffer();\r\n                    }\r\n                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.__indexBuffer);\r\n                    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);\r\n                    this.__numSegIndices = indices.length;\r\n                }\r\n            }\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const attrName in geomBuffers.attrBuffers) {\r\n                const attrData = geomBuffers.attrBuffers[attrName];\r\n                if (!this.__glattrbuffers[attrName]) {\r\n                    const attrBuffer = gl.createBuffer();\r\n                    gl.bindBuffer(gl.ARRAY_BUFFER, attrBuffer);\r\n                    gl.bufferData(gl.ARRAY_BUFFER, attrData.values, gl.STATIC_DRAW);\r\n                    this.__glattrbuffers[attrName] = {\r\n                        buffer: attrBuffer,\r\n                        dataType: attrData.dataType,\r\n                        normalized: attrData.normalized,\r\n                    };\r\n                }\r\n                else {\r\n                    const glattr = this.__glattrbuffers[attrName];\r\n                    if (numVertsChanged) {\r\n                        gl.deleteBuffer(glattr.buffer);\r\n                        glattr.buffer = gl.createBuffer();\r\n                    }\r\n                    gl.bindBuffer(gl.ARRAY_BUFFER, glattr.buffer);\r\n                    gl.bufferData(gl.ARRAY_BUFFER, attrData.values, gl.STATIC_DRAW);\r\n                }\r\n            }\r\n            // Cache the size so we know later if it changed\r\n            this.__numSegIndices = indices.length;\r\n            this.__numVertices = geomBuffers.numVertices;\r\n            this.__buffersNeedUpload = false;\r\n        }\r\n        if (indices instanceof Uint8Array)\r\n            this.__indexDataType = this.__gl.UNSIGNED_BYTE;\r\n        if (indices instanceof Uint16Array)\r\n            this.__indexDataType = this.__gl.UNSIGNED_SHORT;\r\n        if (indices instanceof Uint32Array)\r\n            this.__indexDataType = this.__gl.UNSIGNED_INT;\r\n    }\r\n    /**\r\n     * The bind method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @return - The return value.\r\n     */\r\n    bind(renderstate) {\r\n        const gl = this.__gl;\r\n        const unifs = renderstate.unifs;\r\n        if (unifs.LineThickness && gl.floatTexturesSupported) {\r\n            if (this.__fatBuffersNeedUpload)\r\n                this.genFatBuffers(renderstate); // (renderstate, true)\r\n            const fatBuffers = this.fatBuffers;\r\n            let shaderBinding = this.__shaderBindings[renderstate.shaderkey];\r\n            if (!shaderBinding) {\r\n                shaderBinding = generateShaderGeomBinding(this.__gl, renderstate.attrs, fatBuffers.glattrbuffers, gl.__quadIndexBuffer);\r\n                this.__shaderBindings[renderstate.shaderkey] = shaderBinding;\r\n            }\r\n            shaderBinding.bind(renderstate);\r\n            const usePositionsTexture = true;\r\n            if (usePositionsTexture) {\r\n                if (unifs.positionsTexture) {\r\n                    fatBuffers.positionsTexture.bindToUniform(renderstate, unifs.positionsTexture);\r\n                    gl.uniform1i(unifs.positionsTextureSize.location, fatBuffers.positionsTexture.width);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            return super.bind(renderstate);\r\n        }\r\n    }\r\n    // ////////////////////////////////\r\n    // Drawing Lines Points.\r\n    /**\r\n     * The drawPoints method.\r\n     */\r\n    drawPoints() {\r\n        this.__gl.drawArrays(this.__gl.POINTS, 0, this.__geom.numVertices());\r\n    }\r\n    // ////////////////////////////////\r\n    // Regular Drawing.\r\n    /**\r\n     * The draw method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    draw(renderstate) {\r\n        const gl = this.__gl;\r\n        if (renderstate.unifs.LineThickness && gl.floatTexturesSupported) {\r\n            gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, this.fatBuffers.drawCount);\r\n            // Note: We don't have a solution for drawing fat lines to the geom data buffer.\r\n        }\r\n        else {\r\n            gl.drawElements(this.__gl.LINES, this.__numSegIndices, this.__indexDataType, 0);\r\n        }\r\n    }\r\n    /**\r\n     * The drawInstanced method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param instanceCount - The instanceCount value.\r\n     */\r\n    drawInstanced(renderstate, instanceCount) {\r\n        const gl = this.__gl;\r\n        const { occluded } = renderstate.unifs;\r\n        if (occluded) {\r\n            gl.uniform1i(occluded.location, 0);\r\n        }\r\n        gl.drawElementsInstanced(this.__gl.LINES, this.__numSegIndices, this.__indexDataType, 0, instanceCount);\r\n        if (occluded) {\r\n            gl.uniform1i(occluded.location, 1);\r\n            gl.depthFunc(gl.GREATER);\r\n            gl.drawElementsInstanced(this.__gl.LINES, this.__numSegIndices, this.__indexDataType, 0, instanceCount);\r\n            gl.depthFunc(gl.LEQUAL);\r\n        }\r\n    }\r\n}\r\nexport { GLLines };\r\n//# sourceMappingURL=GLLines.js.map","import { BaseEvent } from '../BaseEvent';\r\nclass VisibilityChangedEvent extends BaseEvent {\r\n    constructor(visible) {\r\n        super();\r\n        this.visible = visible;\r\n    }\r\n}\r\nexport { VisibilityChangedEvent };\r\n//# sourceMappingURL=VisibilityChangedEvent.js.map","import { EventEmitter } from '../../Utilities/index';\r\nimport '../../SceneTree/GeomItem';\r\nimport { VisibilityChangedEvent } from '../../Utilities/Events/VisibilityChangedEvent';\r\nconst GLGeomItemChangeType = {\r\n    GEOMITEM_CHANGED: 0,\r\n    GEOM_CHANGED: 1,\r\n    VISIBILITY_CHANGED: 2,\r\n    HIGHLIGHT_CHANGED: 3,\r\n};\r\nconst GLGeomItemFlags = {\r\n    GEOMITEM_FLAG_CUTAWAY: 1,\r\n    GEOMITEM_INVISIBLE_IN_GEOMDATA: 2, // 1<<0;\r\n};\r\n/** This class is responsible for managing a GeomItem within the renderer.\r\n * @private\r\n * @extends EventEmitter\r\n */\r\nclass GLGeomItem extends EventEmitter {\r\n    /**\r\n     * Create a GL geom item.\r\n     * @param gl - The gl value.\r\n     * @param geomItem - The geomItem value.\r\n     * @param drawItemId - The drawItemId value.\r\n     * @param geomId - The geomId value.\r\n     * @param materialId - The materialId value.\r\n     * @param supportInstancing - a boolean to disable instancing support on some mobile platforms\r\n     */\r\n    constructor(gl, geomItem, drawItemId, geomId, materialId, supportInstancing = false) {\r\n        super();\r\n        this.listenerIDs = {};\r\n        this.GLShaderGeomSets = null;\r\n        this.cutDataChanged = false;\r\n        this.cutData = [];\r\n        this.geomMatrixDirty = false;\r\n        this.gl = gl;\r\n        this.geomItem = geomItem;\r\n        this.drawItemId = drawItemId;\r\n        this.geomId = geomId;\r\n        this.materialId = materialId;\r\n        this.supportInstancing = supportInstancing;\r\n        this.geomVisible = this.geomItem.isVisible();\r\n        this.visible = this.geomVisible;\r\n        this.culled = false;\r\n        this.listenerIDs['visibilityChanged'] = this.geomItem.on('visibilityChanged', (event) => {\r\n            this.updateVisibility();\r\n        });\r\n        if (!this.supportInstancing) {\r\n            this.cutDataChanged = false;\r\n            this.cutData = [0, 0, 0, 0];\r\n            const materialId = 0;\r\n            let flags = 0;\r\n            if (this.geomItem.isCutawayEnabled()) {\r\n                flags |= GLGeomItemFlags.GEOMITEM_FLAG_CUTAWAY;\r\n            }\r\n            if (geomItem.isSelectable() == false) {\r\n                flags |= GLGeomItemFlags.GEOMITEM_INVISIBLE_IN_GEOMDATA;\r\n            }\r\n            this.geomData = [flags, materialId, 0, 0];\r\n            this.geomMatrixDirty = true;\r\n            this.listenerIDs['GeomMat.valueChanged'] = this.geomItem.geomMatParam.on('valueChanged', () => {\r\n                this.geomMatrixDirty = true;\r\n                this.emit('updated');\r\n            });\r\n            this.listenerIDs['cutAwayChanged'] = this.geomItem.on('cutAwayChanged', () => {\r\n                this.cutDataChanged = true;\r\n                this.emit('updated');\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * The getGeomItem method.\r\n     * @return - The return value.\r\n     */\r\n    getGeomItem() {\r\n        return this.geomItem;\r\n    }\r\n    /**\r\n     * The isVisible method.\r\n     * @return - The return value.\r\n     */\r\n    isVisible() {\r\n        return this.visible;\r\n    }\r\n    /**\r\n     * The getId method.\r\n     * @return - The return value.\r\n     */\r\n    getDrawItemId() {\r\n        return this.drawItemId;\r\n    }\r\n    /**\r\n     * The updateVisibility method.\r\n     */\r\n    updateVisibility() {\r\n        this.geomVisible = this.geomItem.isVisible();\r\n        const visible = this.geomVisible && !this.culled;\r\n        if (this.visible != visible) {\r\n            this.visible = visible;\r\n            const event = new VisibilityChangedEvent(visible);\r\n            this.emit('visibilityChanged', event);\r\n            this.emit('updated');\r\n        }\r\n    }\r\n    /**\r\n     * Sets the additional culled value which controls visiblity\r\n     * @param culled - True if culled, else false.\r\n     */\r\n    setCulled(culled) {\r\n        this.culled = culled;\r\n        const visible = this.geomVisible && !this.culled;\r\n        if (this.visible != visible) {\r\n            this.visible = visible;\r\n            const event = new VisibilityChangedEvent(visible);\r\n            this.emit('visibilityChanged', event);\r\n        }\r\n    }\r\n    /**\r\n     * The bind method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @return - The return value.\r\n     */\r\n    bind(renderstate) {\r\n        const gl = this.gl;\r\n        const unifs = renderstate.unifs;\r\n        if (!this.supportInstancing) {\r\n            const modelMatrixunif = unifs.modelMatrix;\r\n            if (modelMatrixunif) {\r\n                if (this.geomMatrixDirty) {\r\n                    this.modelMatrixArray = this.geomItem.geomMatParam.value.asArray();\r\n                }\r\n                gl.uniformMatrix4fv(modelMatrixunif.location, false, this.modelMatrixArray);\r\n            }\r\n            const drawItemDataunif = unifs.drawItemData;\r\n            if (drawItemDataunif) {\r\n                gl.uniform4fv(drawItemDataunif.location, this.geomData);\r\n            }\r\n            const cutawayDataUnif = unifs.cutawayData;\r\n            if (cutawayDataUnif) {\r\n                if (this.cutDataChanged) {\r\n                    if (this.geomItem.isCutawayEnabled()) {\r\n                        const cutAwayVector = this.geomItem.getCutVector();\r\n                        const cutAwayDist = this.geomItem.getCutDist();\r\n                        this.cutData = [cutAwayVector.x, cutAwayVector.y, cutAwayVector.z, cutAwayDist];\r\n                    }\r\n                }\r\n                gl.uniform4fv(cutawayDataUnif.location, this.cutData);\r\n            }\r\n        }\r\n        const unif = unifs.drawItemId;\r\n        if (unif) {\r\n            gl.uniform1i(unif.location, this.drawItemId);\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() {\r\n        this.geomItem.removeListenerById('visibilityChanged', this.listenerIDs['visibilityChanged']);\r\n        if (!this.supportInstancing) {\r\n            this.geomItem.geomMatParam.removeListenerById('valueChanged', this.listenerIDs['GeomMat.valueChanged']);\r\n            this.geomItem.removeListenerById('cutAwayChanged', this.listenerIDs['cutAwayChanged']);\r\n        }\r\n    }\r\n}\r\nexport { GLGeomItemChangeType, GLGeomItemFlags, GLGeomItem };\r\n//# sourceMappingURL=GLGeomItem.js.map","import { BaseEvent } from '../BaseEvent';\r\nclass CountChangedEvent extends BaseEvent {\r\n    constructor(change, count) {\r\n        super();\r\n        this.change = change;\r\n        this.count = count;\r\n    }\r\n}\r\nexport { CountChangedEvent };\r\n//# sourceMappingURL=CountChangedEvent.js.map","import '../../SceneTree/GeomItem';\r\nimport { CountChangedEvent } from '../../Utilities/Events/CountChangedEvent';\r\nimport { EventEmitter } from '../../Utilities/index';\r\n/** This class abstracts the rendering of a collection of geometries to screen.\r\n * @extends EventEmitter\r\n * @private\r\n */\r\nclass GLGeomItemSet extends EventEmitter {\r\n    /**\r\n     * Create a GL geom item set.\r\n     * @param gl - The webgl rendering context.\r\n     * @param glGeom - The glGeom value.\r\n     */\r\n    constructor(gl, glGeom) {\r\n        super();\r\n        this.drawIdsArray = null;\r\n        this.drawIdsBuffer = null;\r\n        this.highlightedIdsArray = null;\r\n        this.highlightedIdsBuffer = null;\r\n        this.gl = gl;\r\n        this.glGeom = glGeom;\r\n        this.id = glGeom ? glGeom.getGeom().getId() : this.getId();\r\n        this.glGeomItems = [];\r\n        this.glgeomItems_freeIndices = [];\r\n        this.glgeomItemEventHandlers = [];\r\n        this.drawIdsArray = null;\r\n        this.drawIdsBuffer = null;\r\n        this.drawIdsBufferDirty = true;\r\n        this.highlightedIdsArray = null;\r\n        this.highlightedIdsBuffer = null;\r\n        this.highlightedIdsBufferDirty = true;\r\n        this.visibleItems = [];\r\n        this.highlightedItems = [];\r\n    }\r\n    /**\r\n     * The getGLGeom method.\r\n     * @return - The return value.\r\n     */\r\n    getGLGeom() {\r\n        return this.glGeom;\r\n    }\r\n    /**\r\n     * The getDrawCount method.\r\n     * @return - The return value.\r\n     */\r\n    getDrawCount() {\r\n        return this.visibleItems.length;\r\n    }\r\n    /**\r\n     * The addGLGeomItem method.\r\n     * @param glGeomItem - The glGeomItem value.\r\n     */\r\n    addGLGeomItem(glGeomItem) {\r\n        let index;\r\n        if (this.glgeomItems_freeIndices.length > 0) {\r\n            index = this.glgeomItems_freeIndices.pop();\r\n        }\r\n        else {\r\n            index = this.glGeomItems.length;\r\n            this.glGeomItems.push(null);\r\n        }\r\n        if (glGeomItem.geomItem.isVisible()) {\r\n            this.visibleItems.push(index);\r\n            const event = new CountChangedEvent(1, this.visibleItems.length);\r\n            this.emit('drawCountChanged', event);\r\n        }\r\n        if (glGeomItem.geomItem.isHighlighted()) {\r\n            this.highlightedItems.push(index);\r\n            this.highlightedIdsBufferDirty = true;\r\n        }\r\n        const eventHandlers = {};\r\n        eventHandlers.highlightChanged = (event) => {\r\n            if (glGeomItem.geomItem.isHighlighted()) {\r\n                // Note: highlightChanged is fired when the color changes\r\n                // or another highlight is added over the top. We avoid\r\n                // adding the same index again here. (TODO: use Set?)\r\n                if (this.highlightedItems.includes(index))\r\n                    return;\r\n                this.highlightedItems.push(index);\r\n                const event = new CountChangedEvent(1, this.highlightedItems.length);\r\n                this.emit('highlightedCountChanged', event);\r\n            }\r\n            else {\r\n                this.highlightedItems.splice(this.highlightedItems.indexOf(index), 1);\r\n                const event = new CountChangedEvent(-1, this.highlightedItems.length);\r\n                this.emit('highlightedCountChanged', event);\r\n            }\r\n            // console.log(\"highlightChanged:\", glGeomItem.geomItem.getName(), glGeomItem.geomItem.isHighlighted(), this.highlightedItems)\r\n            this.highlightedIdsBufferDirty = true;\r\n        };\r\n        glGeomItem.geomItem.on('highlightChanged', eventHandlers.highlightChanged);\r\n        eventHandlers.visibilityChanged = (event) => {\r\n            const visible = event.visible;\r\n            if (visible) {\r\n                this.visibleItems.push(index);\r\n                const event = new CountChangedEvent(1, this.visibleItems.length);\r\n                this.emit('drawCountChanged', event);\r\n            }\r\n            else {\r\n                this.visibleItems.splice(this.visibleItems.indexOf(index), 1);\r\n                const event = new CountChangedEvent(-1, this.visibleItems.length);\r\n                this.emit('drawCountChanged', event);\r\n            }\r\n            this.drawIdsBufferDirty = true;\r\n        };\r\n        glGeomItem.geomItem.on('visibilityChanged', eventHandlers.visibilityChanged);\r\n        this.glGeomItems[index] = glGeomItem;\r\n        this.glgeomItemEventHandlers[index] = eventHandlers;\r\n        this.drawIdsBufferDirty = true;\r\n        glGeomItem.GLGeomItemSet = this;\r\n    }\r\n    /**\r\n     * The removeGLGeomItem method.\r\n     * @param glGeomItem - The glGeomItem value.\r\n     */\r\n    removeGLGeomItem(glGeomItem) {\r\n        const index = this.glGeomItems.indexOf(glGeomItem);\r\n        const eventHandlers = this.glgeomItemEventHandlers[index];\r\n        glGeomItem.geomItem.off('highlightChanged', eventHandlers.highlightChanged);\r\n        glGeomItem.geomItem.off('visibilityChanged', eventHandlers.visibilityChanged);\r\n        this.glGeomItems[index] = null;\r\n        this.glgeomItemEventHandlers[index] = null;\r\n        glGeomItem.GLGeomItemSet = null;\r\n        this.glgeomItems_freeIndices.push(index);\r\n        if (glGeomItem.geomItem.isVisible()) {\r\n            this.visibleItems.splice(this.visibleItems.indexOf(index), 1);\r\n            const event = new CountChangedEvent(-1, this.visibleItems.length);\r\n            this.emit('drawCountChanged', event);\r\n        }\r\n        if (glGeomItem.geomItem.isHighlighted()) {\r\n            this.highlightedItems.splice(this.highlightedItems.indexOf(index), 1);\r\n            const event = new CountChangedEvent(-1, this.highlightedItems.length);\r\n            this.emit('highlightedCountChanged', event);\r\n        }\r\n        this.drawIdsBufferDirty = true;\r\n        // console.log(\"removeGLGeomItem:\", glGeomItem.geomItem.getName(), this.glGeomItems.length)\r\n        if (this.glGeomItems.length == this.glgeomItems_freeIndices.length) {\r\n            this.destroy();\r\n        }\r\n    }\r\n    // ////////////////////////////////////\r\n    // Instance Ids\r\n    /**\r\n     * The updateDrawIDsBuffer method.\r\n     * The culling system will specify a subset of the total number of items for\r\n     * drawing.\r\n     */\r\n    updateDrawIDsBuffer() {\r\n        const gl = this.gl;\r\n        if (!gl.floatTexturesSupported) {\r\n            this.drawIdsBufferDirty = false;\r\n            return;\r\n        }\r\n        if (this.drawIdsBuffer && this.glGeomItems.length != this.drawIdsArray.length) {\r\n            this.gl.deleteBuffer(this.drawIdsBuffer);\r\n            this.drawIdsBuffer = null;\r\n        }\r\n        if (!this.drawIdsBuffer) {\r\n            this.drawIdsBuffer = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.drawIdsBuffer);\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.drawIdsBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.getDrawIdsArray(), gl.STATIC_DRAW);\r\n        this.drawIdsBufferDirty = false;\r\n    }\r\n    /**\r\n     * The getDrawIdsArray method.\r\n     * @return - The drawIds for each GeomItem packed into a Float32Array\r\n     */\r\n    getDrawIdsArray() {\r\n        if (this.drawIdsBufferDirty) {\r\n            if (!this.drawIdsArray || this.glGeomItems.length != this.drawIdsArray.length) {\r\n                this.drawIdsArray = new Float32Array(this.glGeomItems.length);\r\n            }\r\n            // Collect all visible geom ids into the instanceIds array.\r\n            // Note: the draw count can be less than the number of instances\r\n            // we re-use the same buffer and simply invoke fewer draw calls.\r\n            this.visibleItems.forEach((index, tgtIndex) => {\r\n                this.drawIdsArray[tgtIndex] = this.glGeomItems[index].getDrawItemId();\r\n            });\r\n            this.drawIdsBufferDirty = false;\r\n        }\r\n        return this.drawIdsArray;\r\n    }\r\n    // ////////////////////////////////////\r\n    // Selected Items\r\n    /**\r\n     * The updateHighlightedIDsBuffer method.\r\n     */\r\n    updateHighlightedIDsBuffer() {\r\n        const gl = this.gl;\r\n        if (!gl.floatTexturesSupported) {\r\n            this.highlightedIdsBufferDirty = false;\r\n            return;\r\n        }\r\n        if (this.highlightedIdsBuffer && this.glGeomItems.length > this.highlightedIdsArray.length) {\r\n            this.gl.deleteBuffer(this.highlightedIdsBuffer);\r\n            this.highlightedIdsBuffer = null;\r\n        }\r\n        if (!this.highlightedIdsBuffer) {\r\n            this.highlightedIdsBuffer = gl.createBuffer();\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.highlightedIdsBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.getHighlightedIdsArray(), gl.STATIC_DRAW);\r\n        this.highlightedIdsBufferDirty = false;\r\n    }\r\n    /**\r\n     * The getHighlightedIdsArray method.\r\n     * @return - The drawIds for each GeomItem packed into a Float32Array\r\n     */\r\n    getHighlightedIdsArray() {\r\n        if (this.highlightedIdsBufferDirty) {\r\n            if (!this.highlightedIdsArray || this.highlightedItems.length > this.highlightedIdsArray.length) {\r\n                this.highlightedIdsArray = new Float32Array(this.glGeomItems.length);\r\n            }\r\n            // Collect all visible geom ids into the instanceIds array.\r\n            // Note: the draw count can be less than the number of instances\r\n            // we re-use the same buffer and simply invoke fewer draw calls.\r\n            this.highlightedItems.forEach((index, tgtIndex) => {\r\n                this.highlightedIdsArray[tgtIndex] = this.glGeomItems[index].getDrawItemId();\r\n            });\r\n            this.highlightedIdsBufferDirty = false;\r\n        }\r\n        return this.highlightedIdsArray;\r\n    }\r\n    // ////////////////////////////////////\r\n    // Drawing\r\n    /**\r\n     * The draw method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    draw(renderstate) {\r\n        if (this.visibleItems.length == 0) {\r\n            return;\r\n        }\r\n        if (this.drawIdsBufferDirty) {\r\n            this.updateDrawIDsBuffer();\r\n        }\r\n        this.__bindAndRender(renderstate, this.visibleItems, this.drawIdsBuffer);\r\n    }\r\n    /**\r\n     * The drawHighlighted method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    drawHighlighted(renderstate) {\r\n        if (this.highlightedItems.length == 0) {\r\n            return;\r\n        }\r\n        if (this.highlightedIdsBufferDirty) {\r\n            this.updateHighlightedIDsBuffer();\r\n        }\r\n        this.__bindAndRender(renderstate, this.highlightedItems, this.highlightedIdsBuffer);\r\n    }\r\n    /**\r\n     * The __bindAndRender method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param itemIndices - The itemIndices value.\r\n     * @param drawIdsBuffer - The drawIdsBuffer value.\r\n     * @private\r\n     */\r\n    __bindAndRender(renderstate, itemIndices, drawIdsBuffer) {\r\n        const gl = this.gl;\r\n        const unifs = renderstate.unifs;\r\n        // Lazy unbinding. We can have situations where we have many materials\r\n        // all bound to the same geom. e.g. lots of billboards\r\n        // We can avoid the expensive re-binding of geoms with a simple check.\r\n        if (renderstate.glGeom != this.glGeom) {\r\n            this.glGeom.bind(renderstate);\r\n            renderstate.glGeom = this.glGeom;\r\n        }\r\n        if (!gl.floatTexturesSupported || !gl.drawElementsInstanced || !renderstate.supportsInstancing) {\r\n            if (renderstate.unifs.instancedDraw) {\r\n                gl.uniform1i(renderstate.unifs.instancedDraw.location, 0);\r\n            }\r\n            itemIndices.forEach((index) => {\r\n                this.glGeomItems[index].bind(renderstate);\r\n                renderstate.bindViewports(unifs, () => {\r\n                    this.glGeom.draw(renderstate);\r\n                });\r\n            });\r\n        }\r\n        else {\r\n            // console.log(\"draw:\"+ this.drawIdsArray);\r\n            // Specify an instanced draw to the shader so it knows how\r\n            // to retrieve the modelmatrix.\r\n            if (renderstate.unifs.instancedDraw) {\r\n                gl.uniform1i(renderstate.unifs.instancedDraw.location, 1);\r\n            }\r\n            // The instanced transform ids are bound as an instanced attribute.\r\n            const location = renderstate.attrs.instancedIds.location;\r\n            gl.enableVertexAttribArray(location);\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, drawIdsBuffer);\r\n            gl.vertexAttribPointer(location, 1, gl.FLOAT, false, 1 * 4, 0);\r\n            gl.vertexAttribDivisor(location, 1); // This makes it instanced\r\n            renderstate.bindViewports(unifs, () => {\r\n                this.glGeom.drawInstanced(renderstate, itemIndices.length);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() {\r\n        if (this.drawIdsBuffer) {\r\n            this.gl.deleteBuffer(this.drawIdsBuffer);\r\n            this.drawIdsBuffer = null;\r\n        }\r\n        if (this.highlightedIdsBuffer) {\r\n            this.gl.deleteBuffer(this.highlightedIdsBuffer);\r\n            this.highlightedIdsBuffer = null;\r\n        }\r\n        this.emit('destructing');\r\n    }\r\n}\r\nexport { GLGeomItemSet };\r\n//# sourceMappingURL=GLGeomItemSet.js.map","/* eslint-disable guard-for-in */\r\nimport { EventEmitter } from '../../Utilities/index';\r\nimport { GLGeomItemSet } from './GLGeomItemSet';\r\n/** Class representing GL material geom item sets.\r\n * @private\r\n */\r\nclass GLMaterialGeomItemSets extends EventEmitter {\r\n    /**\r\n     * Create a GL material geom item set.\r\n     * @param pass - The pass that owns the GLMaterialGeomItemSets.\r\n     * @param glMaterial - The glMaterial value.\r\n     */\r\n    constructor(pass, glMaterial) {\r\n        super();\r\n        this.glGeomItemSets = {};\r\n        this.pass = pass;\r\n        this.__gl = pass.renderer.gl;\r\n        this.glMaterial = glMaterial;\r\n        this.glGeomItemSets = {};\r\n        this.drawCount = 0;\r\n        const material = glMaterial.getMaterial();\r\n        const materialChanged = (event) => {\r\n            material.off('transparencyChanged', materialChanged);\r\n            for (const key in this.glGeomItemSets) {\r\n                const glGeomItemSet = this.glGeomItemSets[key];\r\n                for (const glGeomItem of glGeomItemSet.glGeomItems) {\r\n                    const geomItem = glGeomItem.geomItem;\r\n                    this.pass.removeGeomItem(geomItem);\r\n                    this.pass.renderer.assignTreeItemToGLPass(geomItem);\r\n                }\r\n            }\r\n        };\r\n        material.on('transparencyChanged', materialChanged);\r\n    }\r\n    /**\r\n     * The getGLMaterial method.\r\n     * @return - The return value.\r\n     */\r\n    getGLMaterial() {\r\n        return this.glMaterial;\r\n    }\r\n    /**\r\n     * The addGLGeomItem method.\r\n     * @param glGeomItem - The glGeomItem value.\r\n     * @param glGeom - The glGeomItem value.\r\n     * @private\r\n     */\r\n    addGLGeomItem(glGeomItem, glGeom) {\r\n        const id = glGeom.getGeom().getId();\r\n        let geomItemSet = this.glGeomItemSets[id];\r\n        if (!geomItemSet) {\r\n            geomItemSet = new GLGeomItemSet(this.__gl, glGeom);\r\n            this.addGeomItemSet(geomItemSet);\r\n        }\r\n        geomItemSet.addGLGeomItem(glGeomItem);\r\n    }\r\n    /**\r\n     * The drawCountChanged method.\r\n     * @param event - The change value.\r\n     * @private\r\n     */\r\n    drawCountChanged(event) {\r\n        this.drawCount += event.change;\r\n        this.emit('updated');\r\n    }\r\n    /**\r\n     * The __materialChanged method.\r\n     * @private\r\n     */\r\n    __materialChanged() {\r\n        const material = this.glMaterial.getMaterial();\r\n        if (!this.pass.checkMaterial(material)) {\r\n            for (const key in this.glGeomItemSets) {\r\n                const glGeomItemSet = this.glGeomItemSets[key];\r\n                for (const glGeomItem of glGeomItemSet.glGeomItems) {\r\n                    const geomItem = glGeomItem.geomItem;\r\n                    this.pass.removeGeomItem(geomItem);\r\n                    this.pass.renderer.assignTreeItemToGLPass(geomItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * The addGeomItemSet method.\r\n     * @param glGeomItemSet - The glGeomItemSet value.\r\n     */\r\n    addGeomItemSet(glGeomItemSet) {\r\n        const id = glGeomItemSet.getGLGeom().getGeom().getId();\r\n        this.glGeomItemSets[id] = glGeomItemSet;\r\n        const listenerID = glGeomItemSet.on('drawCountChanged', (event) => {\r\n            this.drawCountChanged(event);\r\n        });\r\n        glGeomItemSet.once('destructing', () => {\r\n            glGeomItemSet.removeListenerById('drawCountChanged', listenerID);\r\n            delete this.glGeomItemSets[id];\r\n            if (Object.keys(this.glGeomItemSets).length == 0) {\r\n                // Remove the listeners.\r\n                // const material = this.glMaterial.getMaterial()\r\n                // const baseColorParam = material.getParameter('BaseColor')\r\n                // if (baseColorParam) {\r\n                //   baseColorParam.off('valueChanged', this.__materialChanged)\r\n                // }\r\n                // const opacityParam = material.getParameter('Opacity')\r\n                // if (opacityParam) {\r\n                //   opacityParam.off('valueChanged', this.__materialChanged)\r\n                // }\r\n                this.emit('destructing');\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Draws all elements, binding the shader and continuing into the GLGeomItemSet\r\n     * @param renderstate - The render state for the current draw traversal\r\n     */\r\n    draw(renderstate) {\r\n        if (this.drawCount == 0)\r\n            return;\r\n        const warnMissingUnifs = true;\r\n        this.glMaterial.bind(renderstate, warnMissingUnifs);\r\n        for (const key in this.glGeomItemSets) {\r\n            const glGeomItemSet = this.glGeomItemSets[key];\r\n            glGeomItemSet.draw(renderstate);\r\n        }\r\n    }\r\n    /**\r\n     * The drawHighlighted method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    drawHighlighted(renderstate) {\r\n        this.glMaterial.bind(renderstate, false);\r\n        for (const key in this.glGeomItemSets) {\r\n            const glGeomItemSet = this.glGeomItemSets[key];\r\n            glGeomItemSet.drawHighlighted(renderstate);\r\n        }\r\n    }\r\n    /**\r\n     * The drawHighlightedGeoms method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    drawGeomData(renderstate) {\r\n        this.glMaterial.bind(renderstate, false);\r\n        for (const key in this.glGeomItemSets) {\r\n            const glGeomItemSet = this.glGeomItemSets[key];\r\n            glGeomItemSet.draw(renderstate);\r\n        }\r\n    }\r\n}\r\nexport { GLMaterialGeomItemSets };\r\n//# sourceMappingURL=GLMaterialGeomItemSets.js.map","import { EventEmitter } from '../../Utilities/index';\r\nimport { GLMaterialGeomItemSets } from './GLMaterialGeomItemSets';\r\n/** Class representing GL shader materials.\r\n * @private\r\n */\r\nclass GLShaderMaterials extends EventEmitter {\r\n    /**\r\n     * Create a GL shader material.\r\n     * @param gl - The WebGL Context value.\r\n     * @param pass - The pass that owns this GLShaderMaterials object.\r\n     * @param shaders - The shaders value.\r\n     */\r\n    constructor(gl, pass, shaders) {\r\n        super();\r\n        this.gl = gl;\r\n        this.pass = pass;\r\n        this.glShader = shaders.glShader;\r\n        this.glgeomdatashader = shaders.glgeomdatashader;\r\n        this.glselectedshader = shaders.glselectedshader;\r\n        this.glMaterialGeomItemSets = [];\r\n    }\r\n    /**\r\n     * The findMaterialGeomItemSets method.\r\n     * @param glMaterial - The glMaterial value.\r\n     * @return - The return value.\r\n     */\r\n    findMaterialGeomItemSets(glMaterial) {\r\n        for (const matGeomItemSet of this.glMaterialGeomItemSets) {\r\n            if (matGeomItemSet.glMaterial == glMaterial)\r\n                return matGeomItemSet;\r\n        }\r\n    }\r\n    /**\r\n     * The addGLGeomItem method.\r\n     * @param glGeomItem - The glGeomItem value.\r\n     * @param glGeom - The glGeomItem value.\r\n     * @param glMaterial - The glMaterial value.\r\n     */\r\n    addGLGeomItem(glGeomItem, glGeom, glMaterial) {\r\n        let glMaterialGeomItemSets = this.findMaterialGeomItemSets(glMaterial);\r\n        if (!glMaterialGeomItemSets) {\r\n            glMaterialGeomItemSets = new GLMaterialGeomItemSets(this.pass, glMaterial);\r\n            this.addMaterialGeomItemSets(glMaterialGeomItemSets);\r\n        }\r\n        glMaterialGeomItemSets.addGLGeomItem(glGeomItem, glGeom);\r\n    }\r\n    /**\r\n     * The addMaterialGeomItemSets method.\r\n     * @param glMaterialGeomItemSets - The glMaterialGeomItemSets value.\r\n     */\r\n    addMaterialGeomItemSets(glMaterialGeomItemSets) {\r\n        this.glMaterialGeomItemSets.push(glMaterialGeomItemSets);\r\n        const updated = () => {\r\n            this.emit('updated');\r\n        };\r\n        const destructing = () => {\r\n            glMaterialGeomItemSets.off('updated', updated);\r\n            glMaterialGeomItemSets.off('destructing', destructing);\r\n            const index = this.glMaterialGeomItemSets.indexOf(glMaterialGeomItemSets);\r\n            this.glMaterialGeomItemSets.splice(index, 1);\r\n            if (this.glMaterialGeomItemSets.length == 0) {\r\n                // TODO: clean up the shader... maybe.\r\n                this.emit('destructing');\r\n            }\r\n        };\r\n        glMaterialGeomItemSets.on('updated', updated);\r\n        glMaterialGeomItemSets.on('destructing', destructing);\r\n    }\r\n    /**\r\n     * The removeMaterialGeomItemSets method.\r\n     * @param glMaterialGeomItemSets - The glMaterialGeomItemSets value.\r\n     */\r\n    removeMaterialGeomItemSets(glMaterialGeomItemSets) {\r\n        const index = this.glMaterialGeomItemSets.indexOf(glMaterialGeomItemSets);\r\n        this.glMaterialGeomItemSets.splice(index, 1);\r\n    }\r\n    /**\r\n     * The getMaterialGeomItemSets method.\r\n     * @return - The return value.\r\n     */\r\n    getMaterialGeomItemSets() {\r\n        return this.glMaterialGeomItemSets;\r\n    }\r\n    /**\r\n     * Draws all elements, binding the shader and continuing into the GLMaterialGeomItemSets\r\n     * @param renderstate - The render state for the current draw traversal\r\n     */\r\n    draw(renderstate) {\r\n        const glShader = this.glShader;\r\n        if (!this.glShader.bind(renderstate))\r\n            return;\r\n        this.pass.renderer.glGeomItemLibrary.bind(renderstate);\r\n        for (const glMaterialGeomItemSet of this.glMaterialGeomItemSets) {\r\n            glMaterialGeomItemSet.draw(renderstate);\r\n        }\r\n        glShader.unbind(renderstate);\r\n    }\r\n    /**\r\n     * The drawHighlightedGeoms method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    drawHighlightedGeoms(renderstate) {\r\n        if (!this.glselectedshader || !this.glselectedshader.bind(renderstate, 'highlight'))\r\n            return;\r\n        this.pass.renderer.glGeomItemLibrary.bind(renderstate);\r\n        for (const glMaterialGeomItemSet of this.glMaterialGeomItemSets) {\r\n            glMaterialGeomItemSet.drawHighlighted(renderstate);\r\n        }\r\n    }\r\n    /**\r\n     * The drawGeomData method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    drawGeomData(renderstate) {\r\n        if (!this.glgeomdatashader || !this.glgeomdatashader.bind(renderstate, 'geomData'))\r\n            return;\r\n        this.pass.renderer.glGeomItemLibrary.bind(renderstate);\r\n        const gl = this.gl;\r\n        const { floatGeomBuffer, passId } = renderstate.unifs;\r\n        if (floatGeomBuffer) {\r\n            gl.uniform1i(floatGeomBuffer.location, renderstate.floatGeomBuffer ? 1 : 0);\r\n        }\r\n        if (passId) {\r\n            gl.uniform1i(passId.location, renderstate.passIndex);\r\n        }\r\n        for (const glMaterialGeomItemSet of this.glMaterialGeomItemSets) {\r\n            glMaterialGeomItemSet.drawGeomData(renderstate);\r\n        }\r\n    }\r\n}\r\nexport { GLShaderMaterials };\r\n//# sourceMappingURL=GLShaderMaterials.js.map","import { BaseEvent } from '../BaseEvent';\r\nclass IndexEvent extends BaseEvent {\r\n    constructor(index) {\r\n        super();\r\n        this.index = index;\r\n    }\r\n}\r\nexport { IndexEvent };\r\n//# sourceMappingURL=IndexEvent.js.map","/* eslint-disable guard-for-in */\r\nimport { EventEmitter, Allocator1D } from '../../Utilities/index';\r\nimport { generateShaderGeomBinding, genDataTypeDesc } from './GeomShaderBinding';\r\nimport { Points, Lines, Mesh, PointsProxy, LinesProxy, MeshProxy } from '../../SceneTree/index';\r\nimport { GLPoints, GLLines, GLMesh } from './index';\r\nimport { IndexEvent } from '../../Utilities/Events/IndexEvent';\r\nconst resizeIntArray = (intArray, newSize) => {\r\n    const newArray = new Int32Array(newSize);\r\n    newArray.set(intArray);\r\n    return newArray;\r\n};\r\n/** Class representing a GL geom.\r\n * @private\r\n */\r\nclass GLGeomLibrary extends EventEmitter {\r\n    /**\r\n     * Create a GLGeomLibrary.\r\n     * @param renderer - The renderer object\r\n     */\r\n    constructor(renderer) {\r\n        super();\r\n        this.indexBuffer = null;\r\n        this.__destroyed = false;\r\n        this.renderer = renderer;\r\n        this.__gl = renderer.gl;\r\n        this.shaderAttrSpec = {};\r\n        this.freeGeomIndices = [];\r\n        this.geoms = [];\r\n        this.geomRefCounts = [];\r\n        this.geomsDict = {};\r\n        this.glGeomsDict = {};\r\n        this.geomBuffersTmp = []; // for each geom, these are the buffer\r\n        this.glattrbuffers = {};\r\n        this.shaderBindings = {};\r\n        this.bufferNeedsRealloc = false;\r\n        this.attributesAllocator = new Allocator1D();\r\n        this.dirtyGeomIndices = new Set();\r\n        // If the allocator ever resizes, then we need to re-upload everything.\r\n        this.attributesAllocator.on('resized', () => {\r\n            this.bufferNeedsRealloc = true;\r\n        });\r\n        this.attributesAllocator.on('dataReallocated', (event) => {\r\n            // during allocation, a defragment might occur, which means\r\n            // we need to re-upload some of our data.\r\n            const id = event.id;\r\n            const allocation = event.allocation;\r\n            this.dirtyGeomIndices.add(id);\r\n            this.geomVertexOffsets[id] = allocation.start;\r\n            this.geomVertexCounts[id] = allocation.size;\r\n        });\r\n        this.geomVertexCounts = new Int32Array(1);\r\n        this.geomVertexOffsets = new Int32Array(1);\r\n        this.indicesCounts = new Int32Array(1);\r\n        this.indicesOffsets = new Int32Array(1);\r\n        this.freeGeomIndices.push(0);\r\n        // //////////////////////////////////////\r\n        // Indices\r\n        this.numIndices = 0;\r\n        this.indicesAllocator = new Allocator1D();\r\n        this.indicesAllocator.on('resized', () => {\r\n            this.bufferNeedsRealloc = true;\r\n        });\r\n        this.indicesAllocator.on('dataReallocated', (event) => {\r\n            // during allocation, a defragment might occur, which means\r\n            // we need to re-upload some of our data.\r\n            const id = event.id;\r\n            this.dirtyGeomIndices.add(id);\r\n        });\r\n    }\r\n    /**\r\n     * Given a BaseGeom, constructs the GLGeom that manages the state of the geometry in the GPU.\r\n     * @param geom - The geom value.\r\n     * @return - The return value.\r\n     */\r\n    constructGLGeom(geom) {\r\n        let glgeom = this.glGeomsDict[geom.getId()];\r\n        if (glgeom != undefined) {\r\n            // Increment the ref count for the GLGeom\r\n            // glgeom.addRef(this)\r\n            return glgeom;\r\n        }\r\n        const gl = this.__gl;\r\n        if (geom instanceof Mesh || geom instanceof MeshProxy) {\r\n            glgeom = new GLMesh(gl, geom);\r\n        }\r\n        else if (geom instanceof Lines || geom instanceof LinesProxy) {\r\n            glgeom = new GLLines(gl, geom);\r\n        }\r\n        else if (geom instanceof Points || geom instanceof PointsProxy) {\r\n            glgeom = new GLPoints(gl, geom);\r\n        }\r\n        else {\r\n            throw new Error('Unsupported geom type:' + geom.constructor.name);\r\n        }\r\n        this.glGeomsDict[geom.getId()] = glgeom;\r\n        glgeom.on('updated', () => {\r\n            this.renderer.requestRedraw();\r\n        });\r\n        glgeom.addRef(this);\r\n        return glgeom;\r\n    }\r\n    /**\r\n     * Adds a geom to the GLGeomLibrary.\r\n     *\r\n     * @param geom - The geom to be managed by this GLGeomLibrary.\r\n     * @return - The index of the geom in the GLGeomLibrary\r\n     */\r\n    addGeom(geom) {\r\n        let index = this.geomsDict[geom.getId()];\r\n        if (index != undefined) {\r\n            // Increment the ref count for the GLGeom\r\n            this.geomRefCounts[index]++;\r\n            return index;\r\n        }\r\n        if (this.freeGeomIndices.length == 0) {\r\n            const prevSize = this.geomVertexCounts.length;\r\n            const newSize = prevSize * 2;\r\n            this.geomVertexCounts = resizeIntArray(this.geomVertexCounts, newSize);\r\n            this.geomVertexOffsets = resizeIntArray(this.geomVertexOffsets, newSize);\r\n            this.indicesCounts = resizeIntArray(this.indicesCounts, newSize);\r\n            this.indicesOffsets = resizeIntArray(this.indicesOffsets, newSize);\r\n            for (let i = newSize - 1; i >= prevSize; i--) {\r\n                this.freeGeomIndices.push(i);\r\n            }\r\n        }\r\n        index = this.freeGeomIndices.pop();\r\n        this.geoms[index] = geom;\r\n        this.geomRefCounts[index] = 1;\r\n        this.geomsDict[geom.getId()] = index;\r\n        this.dirtyGeomIndices.add(index);\r\n        this.geomVertexCounts[index] = 0;\r\n        this.geomVertexOffsets[index] = 0;\r\n        this.indicesCounts[index] = 0;\r\n        this.indicesOffsets[index] = 0;\r\n        const geomDataChanged = () => {\r\n            this.dirtyGeomIndices.add(index);\r\n            this.emit('updated');\r\n        };\r\n        const geomDataTopologyChanged = () => {\r\n            this.dirtyGeomIndices.add(index);\r\n            this.emit('updated');\r\n        };\r\n        geom.on('geomDataChanged', geomDataChanged);\r\n        geom.on('geomDataTopologyChanged', geomDataTopologyChanged);\r\n        return index;\r\n    }\r\n    /**\r\n     * Removes a Geom managed by this GLGeomLibrary.\r\n     * @param geom - The geom to remove\r\n     */\r\n    removeGeom(geom) {\r\n        const index = this.geomsDict[geom.getId()];\r\n        this.geomRefCounts[index]--;\r\n        // If there are still refs to this geom. (GeomItems that use it)\r\n        // then we keep it in the renderer.\r\n        if (this.geomRefCounts[index] > 0) {\r\n            return;\r\n        }\r\n        // If the geom was never drawn, and we are already removing it, there may be no allocation.\r\n        if (this.attributesAllocator.getAllocation(index)) {\r\n            this.attributesAllocator.deallocate(index);\r\n        }\r\n        if (this.indicesAllocator.getAllocation(index)) {\r\n            this.indicesAllocator.deallocate(index);\r\n        }\r\n        if (this.dirtyGeomIndices.has(index)) {\r\n            this.dirtyGeomIndices.delete(index);\r\n        }\r\n        this.geomVertexCounts[index] = 0;\r\n        this.geomVertexOffsets[index] = 0;\r\n        this.geoms[index] = null;\r\n        this.freeGeomIndices.push(index);\r\n        delete this.geomsDict[geom.getId()];\r\n        delete this.geomBuffersTmp[index];\r\n        this.indicesCounts[index] = 0;\r\n        this.indicesOffsets[index] = 0;\r\n    }\r\n    /**\r\n     * Returns a Geom managed by this GLGeomLibrary.\r\n     * @param index - The index of the geom to retrieve\r\n     * @return - The return value.\r\n     */\r\n    getGeom(index) {\r\n        return this.geoms[index];\r\n    }\r\n    /**\r\n     * Returns a Geom managed by this GLGeomLibrary.\r\n     * @param index - The index of the geom to retrieve\r\n     * @return - The return value.\r\n     */\r\n    getGeomOffsetAndCount(index) {\r\n        return [this.indicesOffsets[index], this.indicesCounts[index]];\r\n    }\r\n    // /////////////////////////////////////\r\n    // Buffers\r\n    /**\r\n     * Allocates space for the geomBuffers for the specified geometry\r\n     * @param index - The index of the geom to upload\r\n     */\r\n    allocateBuffers(index) {\r\n        const geom = this.geoms[index];\r\n        if (!geom)\r\n            return;\r\n        const geomBuffers = geom.genBuffers();\r\n        const numVerts = geomBuffers.numRenderVerts ? geomBuffers.numRenderVerts : geomBuffers.numVertices;\r\n        if (this.geomVertexCounts[index] != numVerts) {\r\n            if (numVerts == 0) {\r\n                this.attributesAllocator.deallocate(index);\r\n                this.geomVertexOffsets[index] = 0;\r\n                this.geomVertexCounts[index] = 0;\r\n            }\r\n            else {\r\n                const allocation = this.attributesAllocator.allocate(index, numVerts);\r\n                this.geomVertexOffsets[index] = allocation.start;\r\n                this.geomVertexCounts[index] = allocation.size;\r\n            }\r\n        }\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const attrName in geomBuffers.attrBuffers) {\r\n            if (!this.shaderAttrSpec[attrName]) {\r\n                const attrData = geomBuffers.attrBuffers[attrName];\r\n                const geomAttrDesc = genDataTypeDesc(this.__gl, attrData.dataType);\r\n                this.shaderAttrSpec[attrName] = {\r\n                    dataType: attrData.dataType,\r\n                    normalized: attrData.normalized,\r\n                    dimension: geomAttrDesc.dimension,\r\n                    elementSize: geomAttrDesc.elementSize,\r\n                };\r\n            }\r\n        }\r\n        // //////////////////////////////////////\r\n        // Indices\r\n        if (geomBuffers.indices) {\r\n            const numIndices = geomBuffers.indices.length;\r\n            if (this.indicesCounts[index] != numIndices) {\r\n                if (numIndices == 0) {\r\n                    this.indicesAllocator.deallocate(index);\r\n                    this.indicesOffsets[index] = 0;\r\n                    this.indicesCounts[index] = 0;\r\n                }\r\n                else {\r\n                    const allocation = this.indicesAllocator.allocate(index, numIndices);\r\n                    const elementSize = 4; //  Uint32Array for UNSIGNED_INT\r\n                    this.indicesOffsets[index] = allocation.start * elementSize; // offset is in bytes\r\n                    this.indicesCounts[index] = allocation.size;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // Note: for non-indexed data, like Points, we provide\r\n            // the vertex data as offset and count in the method\r\n            // getGeomOffsetAndCount.\r\n            this.indicesOffsets[index] = this.geomVertexOffsets[index];\r\n            this.indicesCounts[index] = this.geomVertexCounts[index];\r\n        }\r\n        this.geomBuffersTmp[index] = geomBuffers;\r\n    }\r\n    /**\r\n     * Generates the GPU buffers required to store all the geometries\r\n     */\r\n    genBuffers() {\r\n        const reservedSpace = this.attributesAllocator.reservedSpace;\r\n        // console.log('GeomSet GPU buffers resized:', reservedSpace)\r\n        const gl = this.__gl;\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const attrName in this.shaderAttrSpec) {\r\n            const attrSpec = this.shaderAttrSpec[attrName];\r\n            const numValues = reservedSpace * attrSpec.dimension;\r\n            attrSpec.numValues = numValues; // cache for debugging only\r\n            if (this.glattrbuffers[attrName] && this.glattrbuffers[attrName].buffer) {\r\n                gl.deleteBuffer(this.glattrbuffers[attrName].buffer);\r\n            }\r\n            const attrBuffer = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, attrBuffer);\r\n            const sizeInBytes = numValues * attrSpec.elementSize;\r\n            gl.bufferData(gl.ARRAY_BUFFER, sizeInBytes, gl.STATIC_DRAW);\r\n            this.glattrbuffers[attrName] = {\r\n                buffer: attrBuffer,\r\n                dataType: attrSpec.dataType,\r\n                normalized: attrSpec.normalized,\r\n                length: numValues,\r\n                dimension: attrSpec.dimension,\r\n            };\r\n            if (attrName == 'textureCoords')\r\n                this.glattrbuffers['texCoords'] = this.glattrbuffers['textureCoords'];\r\n        }\r\n        // //////////////////////////////////////\r\n        // Indices\r\n        const length = this.indicesAllocator.reservedSpace;\r\n        if (this.numIndices != length) {\r\n            const gl = this.__gl;\r\n            if (this.indexBuffer) {\r\n                gl.deleteBuffer(this.indexBuffer);\r\n            }\r\n            this.indexBuffer = gl.createBuffer();\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n            const length = this.indicesAllocator.reservedSpace;\r\n            const elementSize = 4; //  Uint32Array for UNSIGNED_INT\r\n            const sizeInBytes = length * elementSize;\r\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, sizeInBytes, gl.STATIC_DRAW);\r\n            this.numIndices = length;\r\n        }\r\n    }\r\n    /**\r\n     * The uploadBuffers method.\r\n     * @param index - The index of the geom to upload\r\n     */\r\n    uploadBuffers(index) {\r\n        const gl = this.__gl;\r\n        // Note: when we allocate the buffers, we may resize the buffer, which\r\n        // means we need to re-upload geoms that were not changed.\r\n        let geomBuffers = this.geomBuffersTmp[index];\r\n        if (!geomBuffers) {\r\n            const geom = this.geoms[index];\r\n            if (!geom)\r\n                return;\r\n            geomBuffers = geom.genBuffers();\r\n            this.geomBuffersTmp[index] = geomBuffers;\r\n        }\r\n        const count = this.geomVertexCounts[index];\r\n        const numVerts = geomBuffers.numRenderVerts ? geomBuffers.numRenderVerts : geomBuffers.numVertices;\r\n        if (count != numVerts) {\r\n            throw new Error('Invalid allocation for this geom');\r\n        }\r\n        if (numVerts == 0) {\r\n            const event = new IndexEvent(index);\r\n            this.emit('geomDataChanged', event);\r\n            return;\r\n        }\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const attrName in geomBuffers.attrBuffers) {\r\n            const attrSpec = this.shaderAttrSpec[attrName];\r\n            const attrData = geomBuffers.attrBuffers[attrName];\r\n            const glattrbuffer = this.glattrbuffers[attrName];\r\n            // Some geoms might not have all the attributes.\r\n            // and some geoms have more attributes than others.\r\n            if (!attrData || !glattrbuffer)\r\n                continue;\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, glattrbuffer.buffer);\r\n            const elementSize = attrSpec.elementSize;\r\n            const dstByteOffsetInBytes = this.geomVertexOffsets[index] * elementSize * attrSpec.dimension;\r\n            gl.bufferSubData(gl.ARRAY_BUFFER, dstByteOffsetInBytes, attrData.values);\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n        // //////////////////////////////////////\r\n        // Indices\r\n        // Note: we sometimes see geometries with zero vertices/indices which means\r\n        // no allocation has yet been made. We can safely skip these.\r\n        if (geomBuffers.indices && geomBuffers.indices.length > 0) {\r\n            const indices = geomBuffers.indices;\r\n            const allocation = this.indicesAllocator.getAllocation(index);\r\n            if (allocation.size != indices.length) {\r\n                throw new Error('Invalid allocation for this geom');\r\n            }\r\n            const attributesAllocation = this.attributesAllocator.getAllocation(index);\r\n            // The indices need to be offset so they they index the new attributes array.\r\n            const offsettedIndices = new Uint32Array(allocation.size);\r\n            for (let i = 0; i < indices.length; i++) {\r\n                offsettedIndices[i] = geomBuffers.indices[i] + attributesAllocation.start;\r\n            }\r\n            const gl = this.__gl;\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n            const elementSize = 4; //  Uint32Array\r\n            const dstByteOffsetInBytes = allocation.start * elementSize;\r\n            gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, dstByteOffsetInBytes, offsettedIndices);\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        }\r\n        let event = new IndexEvent(index);\r\n        this.emit('geomDataChanged', event);\r\n    }\r\n    /**\r\n     * Cleans the state of this GeomSet during rendering.\r\n     */\r\n    cleanGeomBuffers() {\r\n        // First we alocate all memory needed to clean the GeomSet,\r\n        // and then we start uploading all the data.\r\n        // Note: during allocation, some buffers that were not dirty may\r\n        // need to be uploaded because of re-allocation\r\n        // Note: copy the source array as new dirty items may be added during\r\n        // allocation.\r\n        const dirtyGeomIndices = new Set(this.dirtyGeomIndices);\r\n        dirtyGeomIndices.forEach((index) => {\r\n            this.allocateBuffers(index);\r\n        });\r\n        if (this.bufferNeedsRealloc) {\r\n            // If the geom buffers are re-allocated, we need to regenerate\r\n            // all the shader bindings.\r\n            for (const shaderkey in this.shaderBindings) {\r\n                const shaderBinding = this.shaderBindings[shaderkey];\r\n                shaderBinding.destroy();\r\n            }\r\n            this.shaderBindings = {};\r\n            for (let i = 0; i < this.geoms.length; i++) {\r\n                if (this.geoms[i])\r\n                    this.dirtyGeomIndices.add(i);\r\n            }\r\n            this.genBuffers();\r\n            this.bufferNeedsRealloc = false;\r\n        }\r\n        this.dirtyGeomIndices.forEach((index) => {\r\n            this.uploadBuffers(index);\r\n        });\r\n        this.dirtyGeomIndices = new Set();\r\n        this.geomBuffersTmp = [];\r\n    }\r\n    // /////////////////////////////////////\r\n    // Binding\r\n    /**\r\n     * The bind method.\r\n     * @param renderstate - The renderstate value.\r\n     * @return - Returns true if binding was successful\r\n     */\r\n    bind(renderstate) {\r\n        if (this.dirtyGeomIndices.size > 0) {\r\n            this.cleanGeomBuffers();\r\n        }\r\n        let shaderBinding = this.shaderBindings[renderstate.shaderkey];\r\n        if (!shaderBinding) {\r\n            const gl = this.__gl;\r\n            shaderBinding = generateShaderGeomBinding(gl, renderstate.attrs, this.glattrbuffers, this.indexBuffer);\r\n            this.shaderBindings[renderstate.shaderkey] = shaderBinding;\r\n        }\r\n        else {\r\n            shaderBinding.bind(renderstate);\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * The unbind method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    unbind(renderstate) {\r\n        // Unbinding a geom is important as it puts back some important\r\n        // GL state. (vertexAttribDivisor)\r\n        const shaderBinding = this.shaderBindings[renderstate.shaderkey];\r\n        if (shaderBinding) {\r\n            shaderBinding.unbind(renderstate);\r\n        }\r\n    }\r\n    // /////////////////////////////////////\r\n    // Drawing\r\n    /**\r\n     * The clearBuffers method.\r\n     */\r\n    clearBuffers() {\r\n        const gl = this.__gl;\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const attrName in this.glattrbuffers) {\r\n            const glbuffer = this.glattrbuffers[attrName];\r\n            if (glbuffer.shared)\r\n                continue; /* This buffer is shared between geoms. do not destroy */\r\n            gl.deleteBuffer(glbuffer.buffer);\r\n        }\r\n        this.glattrbuffers = {};\r\n        if (this.indexBuffer) {\r\n            gl.deleteBuffer(this.indexBuffer);\r\n            this.indexBuffer = null;\r\n        }\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const shaderkey in this.shaderBindings) {\r\n            const shaderBinding = this.shaderBindings[shaderkey];\r\n            shaderBinding.destroy();\r\n        }\r\n        this.shaderBindings = {};\r\n    }\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() {\r\n        // this.geoms.forEach((geom) => this.removeGeom(geom))\r\n        this.clearBuffers();\r\n        this.__destroyed = true;\r\n        //  Note: PoTree listens to this event. If moved up into RefCounted, make sure it is still emitted.\r\n        this.emit('destructing');\r\n    }\r\n}\r\nexport { GLGeomLibrary, resizeIntArray };\r\n//# sourceMappingURL=GLGeomLibrary.js.map","/* eslint-disable guard-for-in */\r\nimport { EventEmitter } from '../../Utilities/index';\r\nimport { Vec4 } from '../../Math/index';\r\nimport { GLGeomItemFlags, GLGeomItem } from './GLGeomItem';\r\nimport { MathFunctions } from '../../Utilities/MathFunctions';\r\nimport { GLTexture2D } from '../GLTexture2D';\r\n// import { handleMessage } from './GLGeomItemLibraryCullingWorker'\r\n// @ts-ignore\r\nimport GLGeomItemLibraryCullingWorker from 'web-worker:./GLGeomItemLibraryCulling-worker.js';\r\nconst pixelsPerItem = 6; // The number of RGBA pixels per draw item.\r\n/** Class for managing all the GeomItems discovered in the SceneTree.\r\n * @private\r\n */\r\nclass GLGeomItemLibrary extends EventEmitter {\r\n    /**\r\n     * Create a GLGeomItemLibrary.\r\n     * @param renderer - The renderer instance\r\n     * @param options - The options object passed to the GLRenderer constructor.\r\n     */\r\n    constructor(renderer, options) {\r\n        super();\r\n        this.dirtyWorkerItemIndices = new Set();\r\n        this.glGeomItemsTexture = null;\r\n        this.renderer = renderer;\r\n        this.glGeomItems = [];\r\n        this.glGeomItemEventHandlers = [];\r\n        this.glGeomItemsMap = {};\r\n        this.glGeomItemsIndexFreeList = [];\r\n        this.dirtyItemIndices = [];\r\n        // Items that have transform or bounding box changes and need to be updated in the worker.\r\n        this.dirtyWorkerItemIndices = new Set();\r\n        this.removedItemIndices = [];\r\n        this.enableFrustumCulling = options.enableFrustumCulling;\r\n        if (this.enableFrustumCulling) {\r\n            this.setupCullingWorker(renderer);\r\n        }\r\n    }\r\n    /**\r\n     * Sets up the Culling Worker to start calculating frustum culling.\r\n     * @param renderer - The renderer instance\r\n     */\r\n    setupCullingWorker(renderer) {\r\n        // this.worker = {\r\n        //   postMessage: (message) => {},\r\n        // }\r\n        this.worker = new GLGeomItemLibraryCullingWorker();\r\n        // this.worker = {\r\n        //   postMessage: (message) => {\r\n        //     handleMessage(message, (message) => {\r\n        //       this.worker.onmessage({data: message })\r\n        //     })\r\n        //   },\r\n        // }\r\n        let workerReady = true;\r\n        this.worker.onmessage = (message) => {\r\n            if (message.data.type == 'CullResults') {\r\n                this.applyCullResults(message.data);\r\n            }\r\n            else if (message.data.type == 'Done') {\r\n                // Used mostly to make our uni testing robust.\r\n                this.renderer.emit('CullingUpdated');\r\n            }\r\n            workerReady = true;\r\n        };\r\n        const viewportChanged = () => {\r\n            const viewport = renderer.getViewport();\r\n            const camera = renderer.getViewport().getCamera();\r\n            const aspectRatio = viewport.getWidth() / viewport.getHeight();\r\n            if (camera.isOrthographic()) {\r\n                const frustumHeight = camera.getFrustumHeight();\r\n                const frustumWidth = frustumHeight * aspectRatio;\r\n                this.worker.postMessage({\r\n                    type: 'ViewportChanged',\r\n                    frustumHeight,\r\n                    frustumWidth,\r\n                    isOrthographic: true,\r\n                    solidAngleLimit: renderer.solidAngleLimit,\r\n                });\r\n            }\r\n            else {\r\n                const frustumHalfAngleY = camera.getFov() * 0.5;\r\n                const frustumHalfAngleX = Math.atan(Math.tan(frustumHalfAngleY) * aspectRatio);\r\n                this.worker.postMessage({\r\n                    type: 'ViewportChanged',\r\n                    frustumHalfAngleX,\r\n                    frustumHalfAngleY,\r\n                    isOrthographic: false,\r\n                    solidAngleLimit: renderer.solidAngleLimit,\r\n                });\r\n            }\r\n        };\r\n        renderer.on('resized', viewportChanged);\r\n        const camera = renderer.getViewport().getCamera();\r\n        camera.on('projectionParamChanged', (event) => {\r\n            if (camera.isOrthographic()) {\r\n                viewportChanged();\r\n            }\r\n        });\r\n        viewportChanged();\r\n        renderer.once('xrViewportSetup', (event) => {\r\n            const xrvp = event.xrViewport;\r\n            xrvp.on('presentingChanged', (event) => {\r\n                if (event.state) {\r\n                    cullFreq = 10;\r\n                    // Note: We approximate the culling viewport to be\r\n                    // a wider version of the 2 eye frustums merged together.\r\n                    // Wider, so that items are considered visible before the are in view.\r\n                    // Note each VR headset comes with its own FOV, and I can't seem to be\r\n                    // able to get it from the WebXR API, so I am putting in some guesses\r\n                    // based on this diagram: https://blog.mozvr.com/content/images/2016/02/human-visual-field.jpg\r\n                    const degToRad = Math.PI / 180;\r\n                    const frustumHalfAngleY = 62 * degToRad;\r\n                    const frustumHalfAngleX = 50 * degToRad;\r\n                    this.worker.postMessage({\r\n                        type: 'ViewportChanged',\r\n                        frustumHalfAngleX,\r\n                        frustumHalfAngleY,\r\n                        isOrthographic: false,\r\n                        solidAngleLimit: renderer.solidAngleLimit * 2,\r\n                    });\r\n                }\r\n                else {\r\n                    cullFreq = 5;\r\n                    viewportChanged();\r\n                }\r\n            });\r\n        });\r\n        let tick = 0;\r\n        let cullFreq = 5;\r\n        renderer.on('viewChanged', (event) => {\r\n            // Calculate culling every Nth frame.\r\n            if (workerReady) {\r\n                if (tick % cullFreq == 0) {\r\n                    workerReady = false;\r\n                    const pos = event.viewXfo.tr;\r\n                    const ori = event.viewXfo.ori;\r\n                    this.worker.postMessage({\r\n                        type: 'ViewChanged',\r\n                        cameraPos: pos.asArray(),\r\n                        cameraOri: ori.asArray(),\r\n                        solidAngleLimit: renderer.solidAngleLimit,\r\n                    });\r\n                }\r\n                tick++;\r\n            }\r\n        });\r\n        const forceViewChanged = () => {\r\n            const camera = renderer.getViewport().getCamera();\r\n            const viewXfo = camera.globalXfoParam.value;\r\n            const pos = viewXfo.tr;\r\n            const ori = viewXfo.ori;\r\n            this.worker.postMessage({\r\n                type: 'ViewChanged',\r\n                cameraPos: pos.asArray(),\r\n                cameraOri: ori.asArray(),\r\n                solidAngleLimit: renderer.solidAngleLimit,\r\n            });\r\n        };\r\n        // If a movement finishes, we should update the culling results\r\n        // based on the last position. (we might have skipped it in the viewChanged handler above)\r\n        renderer.getViewport().getCamera().on('movementFinished', forceViewChanged);\r\n        // Initialize the view values on the worker.\r\n        forceViewChanged();\r\n    }\r\n    /**\r\n     * The addGeomItem method.\r\n     * @param geomItem - The geomItem value.\r\n     * @return - The index of GLGeomItem\r\n     */\r\n    addGeomItem(geomItem) {\r\n        let index = this.glGeomItemsMap[geomItem.getId()]; //  number | undefined\r\n        if (index != undefined) {\r\n            // Increment the ref count for the GLGeom\r\n            return this.glGeomItems[index];\r\n        }\r\n        // ///////////////////////////////////////////\r\n        // Material\r\n        const materialParam = geomItem.materialParam;\r\n        let material = materialParam.value;\r\n        // Add the material here so that when we populate the GeomItem texture.\r\n        // the material already has an Id.\r\n        let matIndex = -1;\r\n        {\r\n            matIndex = this.renderer.glMaterialLibrary.addMaterial(material);\r\n        }\r\n        const materialChanged = () => {\r\n            // Ref count the materials in the material library.\r\n            this.renderer.glMaterialLibrary.removeMaterial(material);\r\n            material = materialParam.value;\r\n            glGeomItem.materialId = this.renderer.glMaterialLibrary.addMaterial(material);\r\n            geomItemChanged();\r\n        };\r\n        materialParam.on('valueChanged', materialChanged);\r\n        // ///////////////////////////////////////////\r\n        // Geometry\r\n        const geomParm = geomItem.geomParam;\r\n        let geom = geomParm.value;\r\n        const geomIndex = this.renderer.glGeomLibrary.addGeom(geom);\r\n        const geomChanged = (event) => {\r\n            this.renderer.glGeomLibrary.removeGeom(geom);\r\n            geom = geomParm.value;\r\n            glGeomItem.geomId = this.renderer.glGeomLibrary.addGeom(geom);\r\n            if (this.enableFrustumCulling)\r\n                this.dirtyWorkerItemIndices.add(index);\r\n            geomItemChanged();\r\n        };\r\n        geomParm.on('valueChanged', geomChanged);\r\n        // ///////////////////////////////////////////\r\n        // GeomItem\r\n        // Use recycled indices if there are any available...\r\n        if (this.glGeomItemsIndexFreeList.length > 0) {\r\n            index = this.glGeomItemsIndexFreeList.pop();\r\n        }\r\n        else {\r\n            index = this.glGeomItems.length;\r\n            this.glGeomItems.push(null);\r\n        }\r\n        // If an item is removed and re-added immediately, we avoid removing the item from the culling worker.\r\n        if (this.removedItemIndices.includes(index)) {\r\n            this.removedItemIndices.splice(this.removedItemIndices.indexOf(index), 1);\r\n        }\r\n        this.dirtyItemIndices.push(index);\r\n        const gl = this.renderer.gl;\r\n        const supportInstancing = gl.floatTexturesSupported;\r\n        const glGeomItem = new GLGeomItem(gl, geomItem, index, geomIndex, matIndex, supportInstancing);\r\n        const geomItemChanged = () => {\r\n            if (this.dirtyItemIndices.includes(index))\r\n                return;\r\n            this.dirtyItemIndices.push(index);\r\n            this.renderer.drawItemChanged();\r\n        };\r\n        geomItem.geomMatParam.on('valueChanged', geomItemChanged);\r\n        geomItem.on('cutAwayChanged', geomItemChanged);\r\n        geomItem.on('highlightChanged', geomItemChanged);\r\n        geomItem.on('selectabilityChanged', geomItemChanged);\r\n        const workerItemDataChanged = () => {\r\n            if (this.enableFrustumCulling) {\r\n                if (!this.dirtyWorkerItemIndices.has(index)) {\r\n                    this.dirtyWorkerItemIndices.add(index);\r\n                    this.renderer.drawItemChanged();\r\n                }\r\n            }\r\n        };\r\n        if (this.enableFrustumCulling) {\r\n            this.dirtyWorkerItemIndices.add(index);\r\n        }\r\n        geomItem.on('visibilityChanged', workerItemDataChanged);\r\n        geomItem.geomMatParam.on('valueChanged', workerItemDataChanged);\r\n        geomParm.on('boundingBoxChanged', workerItemDataChanged);\r\n        this.glGeomItems[index] = glGeomItem;\r\n        this.glGeomItemEventHandlers[index] = {\r\n            geomItemChanged,\r\n            materialChanged,\r\n            geomChanged,\r\n            workerItemDataChanged,\r\n        };\r\n        this.glGeomItemsMap[geomItem.getId()] = index;\r\n        // Note: before the renderer is disabled, this is a  no-op.\r\n        this.renderer.requestRedraw();\r\n        return glGeomItem;\r\n    }\r\n    /**\r\n     * Handles applying the culling results received from the GLGeomItemLibraryCullingWorker\r\n     * @param data - The object containing the newlyCulled and newlyUnCulled results.\r\n     */\r\n    applyCullResults(data) {\r\n        const { newlyCulled, newlyUnCulled } = data;\r\n        if (newlyCulled.length == 0 && newlyUnCulled.length == 0)\r\n            return;\r\n        // console.log('applyCullResults newlyCulled', newlyCulled.length, 'newlyUnCulled', newlyUnCulled.length)\r\n        newlyCulled.forEach((index) => {\r\n            if (!this.glGeomItems[index]) {\r\n                if (this.removedItemIndices.indexOf(index) == -1) {\r\n                    console.warn('Culling worker has items that are deleted.');\r\n                }\r\n                return;\r\n            }\r\n            this.glGeomItems[index].setCulled(true);\r\n        });\r\n        newlyUnCulled.forEach((index) => {\r\n            if (!this.glGeomItems[index]) {\r\n                if (this.removedItemIndices.indexOf(index) == -1) {\r\n                    console.warn('Culling worker has items that are deleted.');\r\n                }\r\n                return;\r\n            }\r\n            this.glGeomItems[index].setCulled(false);\r\n        });\r\n        this.renderer.requestRedraw();\r\n        // Used mostly to make our uni testing robust.\r\n        this.renderer.emit('CullingUpdated');\r\n    }\r\n    /**\r\n     * The removeGeomItem method.\r\n     * @param geomItem - The geomItem value.\r\n     * @return - The return value.\r\n     */\r\n    removeGeomItem(geomItem) {\r\n        const index = this.glGeomItemsMap[geomItem.getId()];\r\n        // This GeomItem may not yet have been added to the Renderer.\r\n        // This may be because it is part of an asset that is still loading\r\n        // and has not yet received its geometry.\r\n        if (index == undefined)\r\n            return null;\r\n        const glGeomItem = this.glGeomItems[index];\r\n        const geom = geomItem.geomParam.value;\r\n        this.renderer.glGeomLibrary.removeGeom(geom);\r\n        const material = geomItem.materialParam.value;\r\n        this.renderer.glMaterialLibrary.removeMaterial(material);\r\n        const handlers = this.glGeomItemEventHandlers[index];\r\n        geomItem.materialParam.off('valueChanged', handlers.materialChanged);\r\n        geomItem.geomMatParam.off('valueChanged', handlers.geomItemChanged);\r\n        geomItem.off('cutAwayChanged', handlers.geomItemChanged);\r\n        geomItem.off('highlightChanged', handlers.geomItemChanged);\r\n        geomItem.off('visibilityChanged', handlers.workerItemDataChanged);\r\n        geomItem.geomMatParam.off('valueChanged', handlers.workerItemDataChanged);\r\n        const geomParm = geomItem.geomParam;\r\n        geomParm.off('valueChanged', handlers.geomChanged);\r\n        geomParm.off('boundingBoxChanged', handlers.workerItemDataChanged);\r\n        this.glGeomItems[index] = null;\r\n        this.glGeomItemEventHandlers[index] = null;\r\n        this.glGeomItemsIndexFreeList.push(index);\r\n        delete this.glGeomItemsMap[geomItem.getId()];\r\n        this.removedItemIndices.push(index);\r\n        this.renderer.requestRedraw();\r\n        return glGeomItem;\r\n    }\r\n    /**\r\n     * The getGeomItem method.\r\n     * @param index - The index value.\r\n     * @return - The GLGeomItem that wraps the provided GeomItem\r\n     */\r\n    getGeomItem(index) {\r\n        var _a;\r\n        if (index >= this.glGeomItems.length) {\r\n            console.warn('Invalid Draw Item id:' + index + ' NumItems:' + (this.glGeomItems.length - 1));\r\n            return undefined;\r\n        }\r\n        return (_a = this.glGeomItems[index]) === null || _a === void 0 ? void 0 : _a.geomItem;\r\n    }\r\n    /**\r\n     * The getGeomItem method.\r\n     * @param geomItem - The geomItem value.\r\n     * @return - The GLGeomItem that wraps the provided GeomItem\r\n     */\r\n    getGLGeomItem(geomItem) {\r\n        const index = this.glGeomItemsMap[geomItem.getId()];\r\n        if (index != undefined) {\r\n            // Increment the ref count for the GLGeom\r\n            return this.glGeomItems[index];\r\n        }\r\n        return null;\r\n    }\r\n    // ////////////////////////////////////////////////\r\n    // Data Uploading\r\n    /**\r\n     * The populateDrawItemDataArray method.\r\n     * @param index - The index of the item in the library.\r\n     * @param subIndex - The index of the item within the block being uploaded.\r\n     * @param dataArray - The dataArray value.\r\n     * @private\r\n     */\r\n    populateDrawItemDataArray(index, subIndex, dataArray) {\r\n        const glGeomItem = this.glGeomItems[index];\r\n        // When an item is deleted, we allocate its index to the free list\r\n        // and null this item in the array. skip over null items.\r\n        if (!glGeomItem)\r\n            return;\r\n        const { geomItem, geomId } = glGeomItem;\r\n        const stride = pixelsPerItem * 4; // The number of floats per draw item.\r\n        const offset = subIndex * stride;\r\n        // /////////////////////////\r\n        // Geom Item Params\r\n        let flags = 0;\r\n        if (geomItem.isCutawayEnabled()) {\r\n            flags |= GLGeomItemFlags.GEOMITEM_FLAG_CUTAWAY;\r\n        }\r\n        if (geomItem.isSelectable() == false) {\r\n            flags |= GLGeomItemFlags.GEOMITEM_INVISIBLE_IN_GEOMDATA;\r\n        }\r\n        const pix0 = new Vec4(new Float32Array(dataArray.buffer, (offset + 0) * 4, 4));\r\n        pix0.set(flags, 0, 0, 0);\r\n        const material = geomItem.materialParam.value;\r\n        const allocation = this.renderer.glMaterialLibrary.getMaterialAllocation(material);\r\n        if (allocation) {\r\n            pix0.z = allocation.start;\r\n        }\r\n        // Store the geomId for debugging purposes.\r\n        // see: DEBUG_GEOM_ID\r\n        pix0.w = geomId;\r\n        // /////////////////////////\r\n        // Geom Matrix\r\n        const mat4 = geomItem.geomMatParam.value;\r\n        const pix1 = new Vec4(new Float32Array(dataArray.buffer, (offset + 4) * 4, 4));\r\n        const pix2 = new Vec4(new Float32Array(dataArray.buffer, (offset + 8) * 4, 4));\r\n        const pix3 = new Vec4(new Float32Array(dataArray.buffer, (offset + 12) * 4, 4));\r\n        pix1.set(mat4.xAxis.x, mat4.yAxis.x, mat4.zAxis.x, mat4.translation.x);\r\n        pix2.set(mat4.xAxis.y, mat4.yAxis.y, mat4.zAxis.y, mat4.translation.y);\r\n        pix3.set(mat4.xAxis.z, mat4.yAxis.z, mat4.zAxis.z, mat4.translation.z);\r\n        // /////////////////////////\r\n        // Hilight\r\n        const pix4 = new Vec4(new Float32Array(dataArray.buffer, (offset + 16) * 4, 4));\r\n        if (geomItem.isHighlighted()) {\r\n            const highlight = geomItem.getHighlight();\r\n            pix4.set(highlight.r, highlight.g, highlight.b, highlight.a);\r\n        }\r\n        // /////////////////////////\r\n        // Cutaway\r\n        const pix5 = new Vec4(new Float32Array(dataArray.buffer, (offset + 20) * 4, 4));\r\n        if (geomItem.isCutawayEnabled()) {\r\n            const cutAwayVector = geomItem.getCutVector();\r\n            const cutAwayDist = geomItem.getCutDist();\r\n            // console.log(geomItem.getName(), geomItem.isCutawayEnabled(), flags, pix0.toString())\r\n            pix5.set(cutAwayVector.x, cutAwayVector.y, cutAwayVector.z, cutAwayDist);\r\n        }\r\n    }\r\n    /**\r\n     * Gathers data to pass to the culling worker.\r\n     * @param geomItem - The GeomItem to gether the data for.\r\n     * @param material - The material of GeomItem.\r\n     * @param index - The index of the item to gether the data for.\r\n     * @return - the JSON data that will be passed to the worker.\r\n     */\r\n    getCullingWorkerData(geomItem, material, index) {\r\n        const bbox = geomItem.boundingBoxParam.value;\r\n        const boundingRadius = bbox.size() * 0.5;\r\n        const pos = bbox.center();\r\n        // Some items can't be culled, if they calculate the size in the GPU.\r\n        // Handles with a fixed size on screen, or points with a fixed size on\r\n        // screen simply cannot be culled, as they\r\n        let cullable = geomItem.cullable != false;\r\n        const fixedSizeParam = material.getParameter('MaintainScreenSize');\r\n        if (fixedSizeParam && fixedSizeParam.value) {\r\n            cullable = false;\r\n        }\r\n        if (material.getShaderName().startsWith('ScreenSpace')) {\r\n            cullable = false;\r\n        }\r\n        if (material.hasParameter('PointSize')) {\r\n            cullable = false;\r\n        }\r\n        return {\r\n            id: index,\r\n            boundingRadius,\r\n            pos: pos.asArray(),\r\n            cullable,\r\n            visible: geomItem.isVisible(),\r\n        };\r\n    }\r\n    /**\r\n     * Any items that need to be updated on the worker are now pushed.\r\n     */\r\n    uploadGeomItemsToWorker() {\r\n        if (this.enableFrustumCulling) {\r\n            const geomItemsUpdateToCullingWorker = [];\r\n            this.dirtyWorkerItemIndices.forEach((index) => {\r\n                const glGeomItem = this.glGeomItems[index];\r\n                // When an item is deleted, we allocate its index to the free list\r\n                // and null this item in the array. skip over null items.\r\n                if (!glGeomItem)\r\n                    return;\r\n                const { geomItem } = glGeomItem;\r\n                const material = geomItem.materialParam.value;\r\n                geomItemsUpdateToCullingWorker.push(this.getCullingWorkerData(geomItem, material, index));\r\n            });\r\n            // /////////////////////////\r\n            // Update the culling worker\r\n            this.worker.postMessage({\r\n                type: 'UpdateGeomItems',\r\n                geomItems: geomItemsUpdateToCullingWorker,\r\n                removedItemIndices: this.removedItemIndices,\r\n            });\r\n            this.dirtyWorkerItemIndices.clear();\r\n            this.removedItemIndices = [];\r\n        }\r\n    }\r\n    /**\r\n     * The uploadGeomItems method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    uploadGeomItems(renderstate) {\r\n        const gl = this.renderer.gl;\r\n        if (!gl.floatTexturesSupported) {\r\n            return;\r\n        }\r\n        let size = Math.round(Math.sqrt(this.glGeomItems.length * pixelsPerItem) + 0.5);\r\n        // Only support power 2 textures. Else we get strange corruption on some GPUs\r\n        // in some scenes.\r\n        size = MathFunctions.nextPow2(size);\r\n        // Size should be a multiple of pixelsPerItem, so each geom item is always contiguous\r\n        // in memory. (makes updating a lot easier. See __updateItemInstanceData below)\r\n        if (size % pixelsPerItem != 0)\r\n            size += pixelsPerItem - (size % pixelsPerItem);\r\n        if (!this.glGeomItemsTexture) {\r\n            this.glGeomItemsTexture = new GLTexture2D(gl, {\r\n                format: 'RGBA',\r\n                type: 'FLOAT',\r\n                width: size,\r\n                height: size,\r\n                filter: 'NEAREST',\r\n                wrap: 'CLAMP_TO_EDGE',\r\n                mipMapped: false,\r\n            });\r\n            this.glGeomItemsTexture.clear();\r\n        }\r\n        else if (this.glGeomItemsTexture.width != size) {\r\n            this.glGeomItemsTexture.resize(size, size);\r\n            this.dirtyItemIndices = Array((size * size) / pixelsPerItem)\r\n                .fill(0) // TODO: check, is 0 ok as an argument here?\r\n                .map((v, i) => i);\r\n        }\r\n        gl.bindTexture(gl.TEXTURE_2D, this.glGeomItemsTexture.glTex);\r\n        const typeId = this.glGeomItemsTexture.getType();\r\n        for (let i = 0; i < this.dirtyItemIndices.length; i++) {\r\n            const indexStart = this.dirtyItemIndices[i];\r\n            const yoffset = Math.floor((indexStart * pixelsPerItem) / size);\r\n            let indexEnd = indexStart + 1;\r\n            for (let j = i + 1; j < this.dirtyItemIndices.length; j++) {\r\n                const index = this.dirtyItemIndices[j];\r\n                if (Math.floor((index * pixelsPerItem) / size) != yoffset) {\r\n                    break;\r\n                }\r\n                if (index != indexEnd) {\r\n                    break;\r\n                }\r\n                indexEnd++;\r\n            }\r\n            // TODO: for contiguous blocks, we create larger arrays and populate\r\n            // and upload them in one step.\r\n            const uploadCount = indexEnd - indexStart;\r\n            const xoffset = (indexStart * pixelsPerItem) % size;\r\n            const width = pixelsPerItem * uploadCount;\r\n            const height = 1;\r\n            const dataArray = new Float32Array(pixelsPerItem * 4 * uploadCount); // 4==RGBA pixels.\r\n            for (let j = indexStart; j < indexEnd; j++) {\r\n                this.populateDrawItemDataArray(j, j - indexStart, dataArray);\r\n            }\r\n            if (typeId == gl.FLOAT) {\r\n                this.glGeomItemsTexture.populate(dataArray, width, height, xoffset, yoffset, false);\r\n            }\r\n            else {\r\n                const unit16s = MathFunctions.convertFloat32ArrayToUInt16Array(dataArray);\r\n                this.glGeomItemsTexture.populate(unit16s, width, height, xoffset, yoffset, false);\r\n            }\r\n            i += uploadCount - 1;\r\n        }\r\n        this.removedItemIndices = [];\r\n        this.dirtyItemIndices = [];\r\n    }\r\n    /**\r\n     * Updates the GPU state if any update is needed.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    bind(renderstate) {\r\n        if (this.dirtyWorkerItemIndices.size > 0 || this.removedItemIndices.length > 0) {\r\n            this.uploadGeomItemsToWorker();\r\n        }\r\n        if (this.dirtyItemIndices.length > 0) {\r\n            this.uploadGeomItems(renderstate);\r\n        }\r\n        const gl = this.renderer.gl;\r\n        const { instancesTexture, instancesTextureSize } = renderstate.unifs;\r\n        if (instancesTexture) {\r\n            this.glGeomItemsTexture.bindToUniform(renderstate, instancesTexture);\r\n            gl.uniform1i(instancesTextureSize.location, this.glGeomItemsTexture.width);\r\n        }\r\n    }\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() { }\r\n}\r\nexport { GLGeomItemLibrary };\r\n//# sourceMappingURL=GLGeomItemLibrary.js.map","import { BaseEvent } from '../BaseEvent';\r\nclass SceneSetEvent extends BaseEvent {\r\n    constructor(scene) {\r\n        super();\r\n        this.scene = scene;\r\n    }\r\n}\r\nexport { SceneSetEvent };\r\n//# sourceMappingURL=SceneSetEvent.js.map","import { BaseEvent } from '../BaseEvent';\r\nclass XrViewportEvent extends BaseEvent {\r\n    constructor(xrViewport) {\r\n        super();\r\n        this.xrViewport = xrViewport;\r\n    }\r\n}\r\nexport { XrViewportEvent };\r\n//# sourceMappingURL=XrViewportEvent.js.map","import { BaseEvent } from '../BaseEvent';\r\nclass KeyboardEvent extends BaseEvent {\r\n    constructor(sourceEvent) {\r\n        super();\r\n        this.propagating = true;\r\n        this.sourceEvent = sourceEvent;\r\n        this.altKey = sourceEvent.altKey;\r\n        this.code = sourceEvent.code;\r\n        this.ctrlKey = sourceEvent.ctrlKey;\r\n        this.isComposing = sourceEvent.isComposing;\r\n        this.key = sourceEvent.key;\r\n        this.location = sourceEvent.location;\r\n        this.metaKey = sourceEvent.metaKey;\r\n        this.repeat = sourceEvent.repeat;\r\n        this.shiftKey = sourceEvent.shiftKey;\r\n        this.which = sourceEvent.which;\r\n    }\r\n    stopPropagation() {\r\n        this.propagating = false;\r\n        if (this.sourceEvent)\r\n            this.sourceEvent.stopPropagation();\r\n    }\r\n    preventDefault() {\r\n        if (this.sourceEvent)\r\n            this.sourceEvent.preventDefault();\r\n    }\r\n}\r\nexport { KeyboardEvent };\r\n//# sourceMappingURL=KeyboardEvent.js.map","/* eslint-disable guard-for-in */\r\nimport throttle from 'lodash/throttle';\r\nimport { TreeItem, GeomItem, ParameterOwner } from '../SceneTree/index';\r\nimport { SystemDesc } from '../SystemDesc';\r\nimport { create3DContext } from './GLContext';\r\nimport { GLScreenQuad } from './GLScreenQuad';\r\nimport { GLViewport } from './GLViewport';\r\nimport { Registry } from '../Registry';\r\nimport { VRViewport } from './VR/VRViewport';\r\nimport { GLMaterialLibrary } from './Drawing/GLMaterialLibrary';\r\nimport { GLGeomLibrary } from './Drawing/GLGeomLibrary';\r\nimport { GLGeomItemLibrary } from './Drawing/GLGeomItemLibrary';\r\nimport { ResizedEvent } from '../Utilities/Events/ResizedEvent';\r\nimport { SceneSetEvent } from '../Utilities/Events/SceneSetEvent';\r\nimport { ViewChangedEvent } from '../Utilities/Events/ViewChangedEvent';\r\nimport { XrViewportEvent } from '../Utilities/Events/XrViewportEvent';\r\nimport { ZeaMouseEvent } from '../Utilities/Events/ZeaMouseEvent';\r\nimport { ZeaWheelEvent } from '../Utilities/Events/ZeaWheelEvent';\r\nimport { ZeaTouchEvent } from '../Utilities/Events/ZeaTouchEvent';\r\nimport { KeyboardEvent } from '../Utilities/Events/KeyboardEvent';\r\nlet activeGLRenderer;\r\nlet pointerIsDown = false;\r\nlet pointerLeft = false;\r\nconst registeredPasses = {};\r\n/**\r\n * Class representing a GL base renderer.\r\n *\r\n * @extends ParameterOwner\r\n */\r\nclass GLBaseRenderer extends ParameterOwner {\r\n    /**\r\n     * Create a GL base renderer.\r\n     * @param $canvas - The canvas element.\r\n     * @param options - The options value.\r\n     */\r\n    constructor($canvas, options = {}) {\r\n        super();\r\n        this.listenerIDs = {};\r\n        this.directives = [];\r\n        this.solidAngleLimit = 0.004;\r\n        this.__glcanvas = null;\r\n        this.__scene = null;\r\n        this.__shaderDirectives = {};\r\n        this.__renderGeomDataFbosRequested = false;\r\n        this.__shaders = {};\r\n        this.__passes = {};\r\n        this.__passesRegistrationOrder = [];\r\n        this.__passCallbacks = [];\r\n        this.__viewports = [];\r\n        this.__activeViewport = undefined;\r\n        this.__continuousDrawing = false;\r\n        this.__redrawRequested = false;\r\n        this.__isMobile = false;\r\n        this.__drawSuspensionLevel = 0;\r\n        this.__xrViewportPresenting = false;\r\n        this.floatGeomBuffer = true;\r\n        this.__supportXR = false;\r\n        this.__xrViewport = undefined;\r\n        this.screenQuad = null;\r\n        if (!SystemDesc.gpuDesc) {\r\n            throw new Error('Unable to create renderer. WebGL not Supported');\r\n        }\r\n        this.__isMobile = SystemDesc.isMobileDevice;\r\n        // Function Bindings.\r\n        this.requestRedraw = this.requestRedraw.bind(this);\r\n        this.__gl = this.setupWebGL($canvas, options);\r\n        this.screenQuad = new GLScreenQuad(this.__gl, { directives: this.directives });\r\n        this.bindEventHandlers();\r\n        this.addViewport('main');\r\n        this.glMaterialLibrary = new GLMaterialLibrary(this);\r\n        this.glMaterialLibrary.on('updated', () => {\r\n            this.requestRedraw();\r\n        });\r\n        this.glGeomLibrary = new GLGeomLibrary(this);\r\n        this.glGeomLibrary.on('updated', () => {\r\n            this.requestRedraw();\r\n        });\r\n        this.glGeomItemLibrary = new GLGeomItemLibrary(this, options);\r\n        this.glGeomItemLibrary.on('updated', () => {\r\n            this.requestRedraw();\r\n        });\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const passType in registeredPasses) {\r\n            for (const cls of registeredPasses[passType]) {\r\n                // eslint-disable-next-line new-cap\r\n                this.addPass(new cls(), parseInt(passType), false); // TODO: is parseInt ok?\r\n            }\r\n        }\r\n        // ////////////////////////////////////////////\r\n        // WebXR\r\n        this.__supportXR = options.supportXR !== undefined ? options.supportXR : true;\r\n        this.__xrViewportPromise = new Promise((resolve, reject) => {\r\n            var _a, _b;\r\n            if (this.__supportXR) {\r\n                // if(!navigator.xr && window.WebVRPolyfill != undefined) {\r\n                //     this.__vrpolyfill = new WebVRPolyfill();\r\n                // }\r\n                if ((_a = navigator) === null || _a === void 0 ? void 0 : _a.xr) {\r\n                    const setupXRViewport = () => {\r\n                        // Note: could cause a context loss on machines with\r\n                        // multi-gpus (integrated Intel).\r\n                        // This is because the may force the context to switch\r\n                        // to the discrete GPU.\r\n                        // TODO: Provide a system to re-load the GPU data.\r\n                        // this.__gl.setCompatibleXRDevice(device);\r\n                        this.__gl.makeXRCompatible().then(() => {\r\n                            this.__xrViewport = this.__setupXRViewport();\r\n                            let event = new XrViewportEvent(this.__xrViewport);\r\n                            this.emit('xrViewportSetup', event);\r\n                            resolve(this.__xrViewport);\r\n                        });\r\n                    };\r\n                    (_b = navigator) === null || _b === void 0 ? void 0 : _b.xr.isSessionSupported('immersive-vr').then((isSupported) => {\r\n                        if (isSupported) {\r\n                            setupXRViewport();\r\n                        }\r\n                    }).catch((reason) => {\r\n                        console.warn('Unable to setup XR:' + reason);\r\n                    });\r\n                    // TODO:\r\n                    // navigator.xr.on('devicechange', checkForXRSupport);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * The addShaderPreprocessorDirective method.\r\n     * @param name - The name value.\r\n     * @param value - The value param.\r\n     */\r\n    addShaderPreprocessorDirective(name, value) {\r\n        // const gl = this.__gl\r\n        if (value)\r\n            this.__shaderDirectives[name] = '#define ' + name + ' = ' + value;\r\n        else\r\n            this.__shaderDirectives[name] = '#define ' + name;\r\n        const directives = [];\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const key in this.__shaderDirectives) {\r\n            directives.push(this.__shaderDirectives[key]);\r\n        }\r\n        this.directives = directives;\r\n    }\r\n    /**\r\n     * Returns HTMLCanvasElement's width\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getWidth() {\r\n        return this.__glcanvas.width;\r\n    }\r\n    /**\r\n     * Returns HTMLCanvasElement's Height\r\n     * @return - The return value.\r\n     */\r\n    getHeight() {\r\n        return this.__glcanvas.height;\r\n    }\r\n    // //////////////////////////////////////\r\n    // Viewports\r\n    /**\r\n     * Adds a new viewport(viewing region) to the scene.\r\n     *\r\n     * @param name - The name of the viewport.\r\n     * @return - The return value.\r\n     */\r\n    addViewport(name) {\r\n        // TODO: We may need to merge GLBaseRenderer into GLRenderer to avoid this nasty cast.\r\n        const renderer = this;\r\n        const vp = new GLViewport(renderer, name, this.getWidth(), this.getHeight());\r\n        const updated = () => {\r\n            this.requestRedraw();\r\n        };\r\n        const viewChanged = (data) => {\r\n            if (!this.__xrViewportPresenting) {\r\n                this.emit('viewChanged', data);\r\n            }\r\n        };\r\n        vp.on('updated', updated);\r\n        vp.on('viewChanged', viewChanged);\r\n        this.__viewports.push(vp);\r\n        this.__activeViewport = vp;\r\n        return vp;\r\n    }\r\n    /**\r\n     * Returns a viewport element by specifying its index in the list of viewports.\r\n     *\r\n     * @param index - The index value.\r\n     * @return - The return value.\r\n     */\r\n    getViewport(index = 0) {\r\n        return this.__viewports[index];\r\n    }\r\n    /**\r\n     * Returns a viewport element under the specified XY coordinates.\r\n     *\r\n     * @param offsetX - The viewport offset in the X axis.\r\n     * @param offsetY - The viewport offset in the Y axis.\r\n     * @return - The return value.\r\n     */\r\n    getViewportAtPos(offsetX, offsetY) {\r\n        for (const vp of this.__viewports) {\r\n            const x = vp.getPosX();\r\n            const y = vp.getPosY();\r\n            const width = vp.getWidth();\r\n            const height = vp.getHeight();\r\n            if (offsetX >= x && offsetY >= y && offsetX <= width + x && offsetY <= height + y)\r\n                return vp;\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Sets as `active` the specified viewport.\r\n     *\r\n     * @param vp - The viewport.\r\n     */\r\n    activateViewport(vp) {\r\n        if (this.__activeViewport == vp)\r\n            return;\r\n        this.__activeViewport = vp;\r\n    }\r\n    /**\r\n     * Sets as àctive` the viewport under the specified XY coordinates.\r\n     *\r\n     * @param offsetX - The viewport offset in the X axis.\r\n     * @param offsetY - The viewport offset in the Y axis.\r\n     */\r\n    activateViewportAtPos(offsetX, offsetY) {\r\n        if (this.__xrViewportPresenting)\r\n            return;\r\n        const vp = this.getViewportAtPos(offsetX, offsetY);\r\n        if (vp && vp != this.__activeViewport)\r\n            this.activateViewport(vp);\r\n    }\r\n    /**\r\n     * Returns current active viewport.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getActiveViewport() {\r\n        return this.__activeViewport;\r\n    }\r\n    /**\r\n     * The suspendDrawing method.\r\n     */\r\n    suspendDrawing() {\r\n        this.__drawSuspensionLevel++;\r\n    }\r\n    /**\r\n     * The resumeDrawing method.\r\n     */\r\n    resumeDrawing() {\r\n        this.__drawSuspensionLevel--;\r\n        if (this.__drawSuspensionLevel == 0) {\r\n            this.renderGeomDataFbos();\r\n            this.requestRedraw();\r\n        }\r\n    }\r\n    /**\r\n     * The renderGeomDataFbos method. Frame buffer (FBO).\r\n     */\r\n    renderGeomDataFbos() {\r\n        if (this.__renderGeomDataFbosRequested == true)\r\n            return;\r\n        this.__renderGeomDataFbosRequested = true;\r\n        const onAnimationFrame = () => {\r\n            for (const vp of this.__viewports)\r\n                vp.renderGeomDataFbo();\r\n            this.__renderGeomDataFbosRequested = false;\r\n        };\r\n        window.requestAnimationFrame(onAnimationFrame);\r\n    }\r\n    // //////////////////////////////////////\r\n    // Scene\r\n    /**\r\n     * Returns current scene(Environment where all assets live) object.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getScene() {\r\n        return this.__scene;\r\n    }\r\n    /**\r\n     * Sets scene to the renderer.\r\n     *\r\n     * @param scene - The scene value.\r\n     */\r\n    setScene(scene) {\r\n        this.__scene = scene;\r\n        this.addTreeItem(this.__scene.getRoot());\r\n        let event = new SceneSetEvent(this.__scene);\r\n        this.emit('sceneSet', event);\r\n    }\r\n    /**\r\n     * Adds tree items to the renderer, selecting the correct pass to delegate rendering too, and listens to future changes in the tree.\r\n     *\r\n     * @param treeItem - The tree item to add.\r\n     */\r\n    addTreeItem(treeItem) {\r\n        // Note: we can have BaseItems in the tree now.\r\n        if (!(treeItem instanceof TreeItem))\r\n            return;\r\n        const id = treeItem.getId();\r\n        const listenerIDs = {};\r\n        this.listenerIDs[id] = listenerIDs;\r\n        if (treeItem instanceof GeomItem) {\r\n            const geomParam = treeItem.geomParam;\r\n            if (geomParam.value == undefined) {\r\n                // we will add this geomItem once it receives its geom.\r\n                const geomAssigned = () => {\r\n                    delete listenerIDs['Geometry.valueChanged'];\r\n                    this.assignTreeItemToGLPass(treeItem);\r\n                };\r\n                listenerIDs['Geometry.valueChanged'] = geomParam.once('valueChanged', geomAssigned);\r\n            }\r\n            else {\r\n                this.assignTreeItemToGLPass(treeItem);\r\n            }\r\n        }\r\n        else {\r\n            this.assignTreeItemToGLPass(treeItem);\r\n        }\r\n        // Traverse the tree adding items until we hit the leaves (which are usually GeomItems.)\r\n        for (const childItem of treeItem.getChildren()) {\r\n            if (childItem)\r\n                this.addTreeItem(childItem);\r\n        }\r\n        listenerIDs['childAdded'] = treeItem.on('childAdded', (event) => {\r\n            this.addTreeItem(event.childItem);\r\n        });\r\n        listenerIDs['childRemoved'] = treeItem.on('childRemoved', (event) => {\r\n            this.removeTreeItem(event.childItem);\r\n        });\r\n        this.renderGeomDataFbos();\r\n    }\r\n    /**\r\n     * Searches through the passes and finds the appropriate pass to draw the given tree items.\r\n     *\r\n     * @param treeItem - The tree item to assign.\r\n     */\r\n    assignTreeItemToGLPass(treeItem) {\r\n        if (treeItem instanceof GeomItem) {\r\n            const geomItem = treeItem;\r\n            this.glGeomItemLibrary.addGeomItem(geomItem);\r\n        }\r\n        let handled = false;\r\n        for (let i = this.__passesRegistrationOrder.length - 1; i >= 0; i--) {\r\n            const pass = this.__passesRegistrationOrder[i];\r\n            const rargs = {\r\n                continueInSubTree: true,\r\n            };\r\n            handled = pass.itemAddedToScene(treeItem, rargs);\r\n            if (handled) {\r\n                if (!rargs.continueInSubTree)\r\n                    return;\r\n                break;\r\n            }\r\n        }\r\n        if (!handled) {\r\n            for (const passCbs of this.__passCallbacks) {\r\n                const rargs = {\r\n                    continueInSubTree: true,\r\n                };\r\n                const handled = passCbs.itemAddedFn(treeItem, rargs);\r\n                if (handled) {\r\n                    if (!rargs.continueInSubTree)\r\n                        return;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Remove tree items from the scene.\r\n     *\r\n     * @param treeItem - The tree item to remove.\r\n     */\r\n    removeTreeItem(treeItem) {\r\n        // Note: we can have BaseItems in the tree now.\r\n        if (!(treeItem instanceof TreeItem))\r\n            return;\r\n        const id = treeItem.getId();\r\n        const listenerIDs = this.listenerIDs[id];\r\n        delete this.listenerIDs[id];\r\n        treeItem.removeListenerById('childAdded', listenerIDs['childAdded']);\r\n        treeItem.removeListenerById('childRemoved', listenerIDs['childRemoved']);\r\n        for (let i = this.__passesRegistrationOrder.length - 1; i >= 0; i--) {\r\n            const pass = this.__passesRegistrationOrder[i];\r\n            const rargs = {\r\n                continueInSubTree: true,\r\n            };\r\n            const handled = pass.itemRemovedFromScene(treeItem, rargs);\r\n            if (handled) {\r\n                if (!rargs.continueInSubTree)\r\n                    return;\r\n                break;\r\n            }\r\n        }\r\n        for (const passCbs of this.__passCallbacks) {\r\n            if (!passCbs.itemRemovedFn)\r\n                continue;\r\n            const rargs = {\r\n                continueInSubTree: true,\r\n            };\r\n            const handled = passCbs.itemRemovedFn(treeItem, rargs);\r\n            if (handled) {\r\n                if (!rargs.continueInSubTree)\r\n                    return;\r\n                break;\r\n            }\r\n        }\r\n        // Traverse the tree adding items till we hit the leaves (which are usually GeomItems).\r\n        for (const childItem of treeItem.getChildren()) {\r\n            if (childItem)\r\n                this.removeTreeItem(childItem);\r\n        }\r\n        if (treeItem instanceof GeomItem) {\r\n            const geomItem = treeItem;\r\n            if (listenerIDs['Geometry.valueChanged']) {\r\n                const geomParam = treeItem.geomParam;\r\n                geomParam.removeListenerById('valueChanged', listenerIDs['Geometry.valueChanged']);\r\n            }\r\n            this.glGeomItemLibrary.removeGeomItem(geomItem);\r\n        }\r\n        this.renderGeomDataFbos();\r\n    }\r\n    // ///////////////////////\r\n    // Renderer Setup\r\n    /**\r\n     * Getter for gl.\r\n     */\r\n    get gl() {\r\n        return this.__gl;\r\n    }\r\n    /**\r\n     * The getGL method.\r\n     * @return - The return value.\r\n     */\r\n    getGL() {\r\n        return this.__gl;\r\n    }\r\n    /**\r\n     * Handle the canvas's parent resizing.\r\n     *\r\n     * @param newWidth - The new width of the canvas.\r\n     * @param newHeight - The new height of the canvas.\r\n     *\r\n     * @private\r\n     */\r\n    handleResize(newWidth, newHeight) {\r\n        if (this.__xrViewportPresenting) {\r\n            return;\r\n        }\r\n        const width = Math.max(4, newWidth);\r\n        const height = Math.max(4, newHeight);\r\n        this.__glcanvas.width = width;\r\n        this.__glcanvas.height = height;\r\n        this.__viewports.forEach((viewport) => {\r\n            viewport.resize(width, height);\r\n        });\r\n        const event = new ResizedEvent(width, height);\r\n        this.emit('resized', event);\r\n        this.requestRedraw();\r\n    }\r\n    /**\r\n     * Returns host div of the canvas element.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getDiv() {\r\n        return this.__glcanvas.parentElement;\r\n    }\r\n    /**\r\n     * Setups the WebGL configuration for the renderer, specifying the canvas element where our\r\n     * @private\r\n     * @param $canvas - The $canvas element.\r\n     * @param webglOptions - The webglOptions value.\r\n     */\r\n    setupWebGL($canvas, webglOptions) {\r\n        const { tagName } = $canvas;\r\n        if (!['DIV', 'CANVAS'].includes(tagName)) {\r\n            throw new Error('Only CANVAS and DIV are valid root elements.');\r\n        }\r\n        const rootIsDiv = tagName === 'DIV';\r\n        this.__glcanvas = $canvas;\r\n        if (rootIsDiv) {\r\n            console.warn('@GLBaseRenderer#setupWebGL.', 'Using a DIV as root element is deprecated.', 'Use a CANVAS instead.', 'See: https://docs.zea.live/zea-engine/#/getting-started/get-started-with-engine?id=basic-setup');\r\n            this.__glcanvas = document.createElement('canvas');\r\n            $canvas.appendChild(this.__glcanvas);\r\n        }\r\n        else {\r\n            this.__glcanvas = $canvas;\r\n        }\r\n        this.__glcanvas.style['touch-action'] = 'none';\r\n        this.__glcanvas.parentElement.style.position = 'relative';\r\n        this.__glcanvas.style.position = 'absolute';\r\n        // Rapid resizing of the canvas would cause issues with WebGL.\r\n        // FrameBuffer objects would end up all black. So here we throttle\r\n        // the resizing of the canvas to ensure 2 resize commands are not\r\n        // closer than 100ms appart.\r\n        const throttledResize = throttle((entries) => {\r\n            for (const entry of entries) {\r\n                if (!Array.isArray(entries) || !entries.length || !entry.contentRect) {\r\n                    return;\r\n                }\r\n                const displayWidth = Math.round(entry.contentRect.width);\r\n                const displayHeight = Math.round(entry.contentRect.height);\r\n                this.handleResize(displayWidth, displayHeight);\r\n            }\r\n        }, 500);\r\n        const resizeObserver = new ResizeObserver(throttledResize);\r\n        this.handleResize(this.__glcanvas.parentElement.clientWidth, this.__glcanvas.parentElement.clientHeight);\r\n        // https://webglfundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html\r\n        try {\r\n            // only call us of the number of device pixels changed\r\n            // @ts-ignore\r\n            resizeObserver.observe(this.__glcanvas.parentNode, { box: 'device-pixel-content-box' });\r\n        }\r\n        catch (ex) {\r\n            // device-pixel-content-box is not supported so fallback to this\r\n            // @ts-ignore\r\n            resizeObserver.observe(this.__glcanvas.parentNode, { box: 'content-box' });\r\n        }\r\n        webglOptions.preserveDrawingBuffer = true;\r\n        webglOptions.antialias = webglOptions.antialias != undefined ? webglOptions.antialias : true;\r\n        webglOptions.depth = true;\r\n        webglOptions.stencil = false;\r\n        webglOptions.alpha = webglOptions.alpha ? webglOptions.alpha : false;\r\n        // Note: Due to a change in Chrome (version 88-89), providing true here caused a pause when creating\r\n        // an WebGL context, if the XR device was unplugged. We also call 'makeXRCompatible' when setting\r\n        // up the XRViewport, so we to get an XR Compatible context anyway.\r\n        webglOptions.xrCompatible = false;\r\n        // Most applications of our engine will prefer the high-performance context by default.\r\n        webglOptions.powerPreference = webglOptions.powerPreference || 'high-performance';\r\n        const gl = create3DContext(this.__glcanvas, webglOptions);\r\n        if (!gl)\r\n            alert('Unable to create WebGL context. WebGL not supported.');\r\n        if (gl.name == 'webgl2') {\r\n            this.addShaderPreprocessorDirective('ENABLE_ES3');\r\n        }\r\n        if (gl.floatTexturesSupported) {\r\n            this.addShaderPreprocessorDirective('ENABLE_FLOAT_TEXTURES');\r\n        }\r\n        {\r\n            const ext = gl.name == 'webgl2' ? gl.getExtension('WEBGL_multi_draw') : null;\r\n            if (ext && !webglOptions.disableMultiDraw) {\r\n                gl.multiDrawArrays = ext.multiDrawArraysWEBGL.bind(ext);\r\n                gl.multiDrawElements = ext.multiDrawElementsWEBGL.bind(ext);\r\n                gl.multiDrawElementsInstanced = ext.multiDrawElementsInstancedWEBGL.bind(ext);\r\n                gl.multiDrawArraysInstanced = ext.multiDrawArraysInstancedWEBGL.bind(ext);\r\n            }\r\n            else {\r\n                this.addShaderPreprocessorDirective('EMULATE_MULTI_DRAW');\r\n            }\r\n        }\r\n        // Note: Mobile devices don't provide much support for reading data back from float textures,\r\n        // and checking compatibility is patchy at best.\r\n        // Note: We are now pushing on high-end mobile devices.\r\n        // Galaxy and above. We need this. We need to accurately determine\r\n        // if the float buffer is not supported.\r\n        if (SystemDesc.browserName == 'Safari' && gl.name == 'webgl') {\r\n            this.floatGeomBuffer = false;\r\n        }\r\n        else {\r\n            this.floatGeomBuffer =\r\n                webglOptions.floatGeomBuffer != undefined ? webglOptions.floatGeomBuffer : gl.floatTexturesSupported;\r\n        }\r\n        gl.floatGeomBuffer = this.floatGeomBuffer;\r\n        return gl;\r\n    }\r\n    /**\r\n     * Binds IO event handlers to the canvas\r\n     */\r\n    bindEventHandlers() {\r\n        // ////////////////////////////////\r\n        // Setup event handlers\r\n        const isValidCanvas = () => this.getWidth() > 0 && this.getHeight();\r\n        /** Mouse Events Start */\r\n        const isMobileSafariMouseEvent = (event) => {\r\n            if (SystemDesc.isMobileDevice && SystemDesc.browserName == 'Safari') {\r\n                console.warn('Mobile Safari is triggering mouse event:', event.type);\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        this.__glcanvas.addEventListener('mousedown', (event) => {\r\n            if (isMobileSafariMouseEvent(event)) {\r\n                return;\r\n            }\r\n            const pointerEvent = new ZeaMouseEvent(event, this.__glcanvas.getBoundingClientRect());\r\n            pointerIsDown = true;\r\n            activeGLRenderer = this;\r\n            this.activateViewportAtPos(pointerEvent.rendererX, pointerEvent.rendererY);\r\n            const viewport = this.getActiveViewport();\r\n            if (viewport) {\r\n                viewport.onPointerDown(pointerEvent);\r\n            }\r\n            pointerLeft = false;\r\n        });\r\n        document.addEventListener('mouseup', (event) => {\r\n            if (isMobileSafariMouseEvent(event)) {\r\n                return;\r\n            }\r\n            if (activeGLRenderer != this || !isValidCanvas())\r\n                return;\r\n            const pointerEvent = new ZeaMouseEvent(event, this.__glcanvas.getBoundingClientRect());\r\n            pointerIsDown = false;\r\n            const viewport = this.getActiveViewport();\r\n            if (viewport) {\r\n                viewport.onPointerUp(pointerEvent);\r\n            }\r\n            if (pointerLeft) {\r\n                if (viewport) {\r\n                    viewport.onPointerLeave(pointerEvent);\r\n                }\r\n                activeGLRenderer = undefined;\r\n            }\r\n        });\r\n        document.addEventListener('mousemove', (event) => {\r\n            if (isMobileSafariMouseEvent(event)) {\r\n                return;\r\n            }\r\n            if (activeGLRenderer != this || !isValidCanvas())\r\n                return;\r\n            const pointerEvent = new ZeaMouseEvent(event, this.__glcanvas.getBoundingClientRect());\r\n            if (!pointerIsDown)\r\n                this.activateViewportAtPos(pointerEvent.rendererX, pointerEvent.rendererY);\r\n            const viewport = this.getActiveViewport();\r\n            if (viewport) {\r\n                viewport.onPointerMove(pointerEvent);\r\n            }\r\n        });\r\n        this.__glcanvas.addEventListener('mouseenter', (event) => {\r\n            if (isMobileSafariMouseEvent(event)) {\r\n                return;\r\n            }\r\n            if (!pointerIsDown) {\r\n                activeGLRenderer = this;\r\n                const pointerEvent = new ZeaMouseEvent(event, this.__glcanvas.getBoundingClientRect());\r\n                this.activateViewportAtPos(pointerEvent.rendererX, pointerEvent.rendererY);\r\n                if (!pointerIsDown) {\r\n                    const viewport = this.getActiveViewport();\r\n                    if (viewport) {\r\n                        viewport.onPointerEnter(pointerEvent);\r\n                    }\r\n                }\r\n                pointerLeft = false;\r\n            }\r\n        });\r\n        this.__glcanvas.addEventListener('mouseleave', (event) => {\r\n            if (isMobileSafariMouseEvent(event)) {\r\n                return;\r\n            }\r\n            if (activeGLRenderer != this || !isValidCanvas())\r\n                return;\r\n            const pointerEvent = new ZeaMouseEvent(event, this.__glcanvas.getBoundingClientRect());\r\n            if (!pointerIsDown) {\r\n                const viewport = this.getActiveViewport();\r\n                if (viewport) {\r\n                    viewport.onPointerLeave(pointerEvent);\r\n                }\r\n                activeGLRenderer = undefined;\r\n            }\r\n            else {\r\n                pointerLeft = true;\r\n            }\r\n        });\r\n        /** Mouse Events End */\r\n        /** Touch Events Start */\r\n        this.__glcanvas.addEventListener('touchstart', (event) => {\r\n            activeGLRenderer = this;\r\n            const viewport = this.getActiveViewport();\r\n            const pointerEvent = new ZeaTouchEvent(event, this.__glcanvas.getBoundingClientRect());\r\n            viewport.onPointerDown(pointerEvent);\r\n        }, { passive: true });\r\n        this.__glcanvas.addEventListener('touchend', (event) => {\r\n            const viewport = this.getActiveViewport();\r\n            const pointerEvent = new ZeaTouchEvent(event, this.__glcanvas.getBoundingClientRect());\r\n            viewport.onPointerUp(pointerEvent);\r\n        }, { passive: true });\r\n        this.__glcanvas.addEventListener('touchmove', (event) => {\r\n            const viewport = this.getActiveViewport();\r\n            const pointerEvent = new ZeaTouchEvent(event, this.__glcanvas.getBoundingClientRect());\r\n            viewport.onPointerMove(pointerEvent);\r\n        }, { passive: true });\r\n        this.__glcanvas.addEventListener('touchcancel', (event) => {\r\n            const viewport = this.getActiveViewport();\r\n            const pointerEvent = new ZeaTouchEvent(event, this.__glcanvas.getBoundingClientRect());\r\n            viewport.onTouchCancel(pointerEvent);\r\n        }, { passive: true });\r\n        /** Touch Events End */\r\n        const onWheel = (event) => {\r\n            if (activeGLRenderer != this || !isValidCanvas())\r\n                return;\r\n            if (activeGLRenderer) {\r\n                const pointerEvent = new ZeaWheelEvent(event, this.__glcanvas.getBoundingClientRect());\r\n                const vp = activeGLRenderer.getActiveViewport();\r\n                if (vp) {\r\n                    vp.onWheel(pointerEvent);\r\n                }\r\n            }\r\n        };\r\n        /** DOMMouseScroll is for mozilla. */\r\n        window.addEventListener('wheel', onWheel, { passive: false });\r\n        window.oncontextmenu = function () {\r\n            return false;\r\n        };\r\n        document.addEventListener('keydown', (event) => {\r\n            if (activeGLRenderer != this || !isValidCanvas())\r\n                return;\r\n            const keyboardEvent = new KeyboardEvent(event);\r\n            const vp = activeGLRenderer.getActiveViewport();\r\n            if (vp) {\r\n                vp.onKeyDown(keyboardEvent);\r\n            }\r\n        });\r\n        document.addEventListener('keyup', (event) => {\r\n            if (activeGLRenderer != this || !isValidCanvas())\r\n                return;\r\n            const keyboardEvent = new KeyboardEvent(event);\r\n            const vp = activeGLRenderer.getActiveViewport();\r\n            if (vp) {\r\n                vp.onKeyUp(keyboardEvent);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Returns canvas that was used to generate the gl context.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    getGLCanvas() {\r\n        return this.__glcanvas;\r\n    }\r\n    /**\r\n     * Frames the specified viewport to the entire scene.\r\n     * > See also: ${Viewport#frameView}\r\n     * @param viewportIndex - The viewportIndex value. If multiple viewports are configured, a viewport index will need to be provided.\r\n     */\r\n    frameAll(viewportIndex = 0) {\r\n        this.__viewports[viewportIndex].frameView([this.__scene.getRoot()]);\r\n    }\r\n    // ///////////////////////\r\n    // Render Items Setup\r\n    /**\r\n     * A factory function used to construct new shader objects. If that specified shader has already been constructed, it returns the existing shader.\r\n     * @param shaderName - The shader name.\r\n     * @return - The return value.\r\n     */\r\n    getOrCreateShader(shaderName) {\r\n        let glShader = this.__shaders[shaderName];\r\n        if (!glShader) {\r\n            glShader = Registry.constructClass(shaderName);\r\n            if (!glShader)\r\n                console.error('@GLBaseRenderer#getOrCreateShader - Shader not registered with the Registry:', shaderName);\r\n            glShader.setGLContext(this.__gl);\r\n            this.__shaders[shaderName] = glShader;\r\n        }\r\n        return glShader;\r\n    }\r\n    /**\r\n     * The addPass method.\r\n     * @param pass - The pass value.\r\n     * @param passType - The passType value.\r\n     * @param updateIndices - The updateIndices value.\r\n     * @return - The return value.\r\n     */\r\n    addPass(pass, passType = -1, updateIndices = true) {\r\n        if (passType == -1)\r\n            passType = pass.getPassType();\r\n        if (!this.__passes[passType])\r\n            this.__passes[passType] = [];\r\n        let index = 0;\r\n        for (const key in this.__passes) {\r\n            if (key == passType.toString())\r\n                break;\r\n            index += this.__passes[key].length;\r\n        }\r\n        index += this.__passes[passType].length;\r\n        pass.on('updated', (event) => {\r\n            this.requestRedraw();\r\n            // If a pass is requesting an update, it is because geometry or\r\n            // visibility is changing and the geom data Fbo will also be out\r\n            // of date.\r\n            this.renderGeomDataFbos();\r\n        });\r\n        pass.init(this, index);\r\n        this.__passes[passType].push(pass);\r\n        if (updateIndices) {\r\n            // Now update all the  subsequent pass indices because the\r\n            // indices after will have changed.\r\n            let offset = 0;\r\n            for (const key in this.__passes) {\r\n                const passSet = this.__passes[key];\r\n                passSet.forEach((pass, index) => {\r\n                    pass.setPassIndex(offset + index);\r\n                });\r\n                offset += passSet.length;\r\n            }\r\n        }\r\n        this.__passesRegistrationOrder.push(pass);\r\n        this.requestRedraw();\r\n        return index;\r\n    }\r\n    /**\r\n     * The getPass method.\r\n     * @param index - The index value.\r\n     * @return - The return value.\r\n     */\r\n    getPass(index) {\r\n        let offset = 0;\r\n        for (const key in this.__passes) {\r\n            const passSet = this.__passes[key];\r\n            if (index - offset < passSet.length)\r\n                return passSet[index - offset];\r\n            offset += passSet.length;\r\n        }\r\n        return undefined;\r\n    }\r\n    // ///////////////////////\r\n    // VR Setup\r\n    /**\r\n     * The supportsVR method.\r\n     * @return - The return value.\r\n     */\r\n    supportsVR() {\r\n        var _a;\r\n        console.warn('@GLBaseRenderer#supportVR - Deprecated Method. Please instead connect to the vrViewportSetup signal.');\r\n        return this.__supportXR && ((_a = navigator) === null || _a === void 0 ? void 0 : _a.xr) != null;\r\n    }\r\n    /**\r\n     * The __setupXRViewport method.\r\n     * @return - The return value.\r\n     * @private\r\n     */\r\n    __setupXRViewport() {\r\n        // Always get the last display. Additional displays are added at the end.(e.g. [Polyfill, HMD])\r\n        const xrvp = new VRViewport(this);\r\n        const emitViewChanged = (event) => {\r\n            this.emit('viewChanged', event);\r\n        };\r\n        xrvp.on('presentingChanged', (event) => {\r\n            const state = event.state;\r\n            this.__xrViewportPresenting = state;\r\n            if (state) {\r\n                // Let the passes know that VR is starting.\r\n                // They can do things like optimize shaders.\r\n                for (const key in this.__passes) {\r\n                    const passSet = this.__passes[key];\r\n                    for (const pass of passSet) {\r\n                        pass.startPresenting();\r\n                    }\r\n                }\r\n                xrvp.on('viewChanged', emitViewChanged);\r\n            }\r\n            else {\r\n                xrvp.off('viewChanged', emitViewChanged);\r\n                this.emit('updated');\r\n                for (const key in this.__passes) {\r\n                    const passSet = this.__passes[key];\r\n                    for (const pass of passSet) {\r\n                        pass.stopPresenting();\r\n                    }\r\n                }\r\n                const viewXfo = this.getViewport().getCamera().globalXfoParam.value;\r\n                const event = new ViewChangedEvent('CameraAndPointer', viewXfo);\r\n                this.emit('viewChanged', event);\r\n                this.requestRedraw();\r\n            }\r\n        });\r\n        return xrvp;\r\n    }\r\n    /**\r\n     * The getVRViewport method.\r\n     * @return - The return value.\r\n     */\r\n    getVRViewport() {\r\n        return this.__xrViewport;\r\n    }\r\n    /**\r\n     * The getXRViewport method.\r\n     * @return - The return value.\r\n     */\r\n    getXRViewport() {\r\n        return this.__xrViewportPromise;\r\n    }\r\n    /**\r\n     * The isXRViewportPresenting method.\r\n     * @return - The return value.\r\n     */\r\n    isXRViewportPresenting() {\r\n        return this.__xrViewportPresenting;\r\n    }\r\n    // //////////////////////////\r\n    // Rendering\r\n    /**\r\n     * The isContinuouslyDrawing method.\r\n     * @return - The return value.\r\n     */\r\n    isContinuouslyDrawing() {\r\n        return this.__continuousDrawing;\r\n    }\r\n    /**\r\n     * The startContinuousDrawing method.\r\n     */\r\n    startContinuousDrawing() {\r\n        if (this.isContinuouslyDrawing() || this.__xrViewportPresenting)\r\n            return;\r\n        const onAnimationFrame = () => {\r\n            if (this.__continuousDrawing && !this.__xrViewportPresenting)\r\n                window.requestAnimationFrame(onAnimationFrame);\r\n            for (const vp of this.__viewports)\r\n                vp.draw();\r\n        };\r\n        this.__continuousDrawing = true;\r\n        window.requestAnimationFrame(onAnimationFrame);\r\n    }\r\n    /**\r\n     * The stopContinuousDrawing method.\r\n     */\r\n    stopContinuousDrawing() {\r\n        this.__continuousDrawing = false;\r\n    }\r\n    /**\r\n     * The toggleContinuousDrawing method.\r\n     */\r\n    toggleContinuousDrawing() {\r\n        if (!this.__continuousDrawing) {\r\n            this.startContinuousDrawing();\r\n        }\r\n        else {\r\n            this.stopContinuousDrawing();\r\n        }\r\n    }\r\n    /**\r\n     * The drawItemChanged method.\r\n     */\r\n    drawItemChanged() {\r\n        for (const vp of this.__viewports)\r\n            vp.invalidateGeomDataBuffer();\r\n        this.requestRedraw();\r\n    }\r\n    /**\r\n     * Request a single redraw, usually in response to a signal/event.\r\n     * @return - The return value.\r\n     */\r\n    requestRedraw() {\r\n        // If a redraw has already been requested, then simply return and wait.\r\n        if (this.__redrawRequested ||\r\n            this.__continuousDrawing ||\r\n            this.__xrViewportPresenting ||\r\n            this.__drawSuspensionLevel > 0) {\r\n            return false;\r\n        }\r\n        const onAnimationFrame = () => {\r\n            this.__redrawRequested = false;\r\n            for (const vp of this.__viewports) {\r\n                vp.draw();\r\n            }\r\n        };\r\n        window.requestAnimationFrame(onAnimationFrame);\r\n        this.__redrawRequested = true;\r\n        return true;\r\n    }\r\n    /**\r\n     * Forces a redraw of the viewports\r\n     */\r\n    forceRender() {\r\n        if (!this.__redrawRequested) {\r\n            console.warn('@GlBaseRenderer#forceRender - Scene is not dirty');\r\n            return;\r\n        }\r\n        this.__redrawRequested = false;\r\n        for (const vp of this.__viewports) {\r\n            vp.draw();\r\n        }\r\n    }\r\n    /**\r\n     * The bindGLBaseRenderer method.\r\n     * @param renderstate - The renderstate value.\r\n     */\r\n    bindGLBaseRenderer(renderstate) {\r\n        renderstate.gl = this.__gl;\r\n        renderstate.shaderopts = { directives: this.directives }; // we will start deprecating this in favor os a simpler directives\r\n        const gl = this.__gl;\r\n        if (!renderstate.viewports || renderstate.viewports.length == 1) {\r\n            renderstate.bindRendererUnifs = (unifs) => {\r\n                const { cameraMatrix, viewMatrix, projectionMatrix, eye, isOrthographic } = unifs;\r\n                if (cameraMatrix) {\r\n                    gl.uniformMatrix4fv(cameraMatrix.location, false, renderstate.cameraMatrix.asArray());\r\n                }\r\n                const vp = renderstate.viewports[0];\r\n                if (viewMatrix) {\r\n                    gl.uniformMatrix4fv(viewMatrix.location, false, vp.viewMatrix.asArray());\r\n                }\r\n                if (projectionMatrix) {\r\n                    gl.uniformMatrix4fv(projectionMatrix.location, false, vp.projectionMatrix.asArray());\r\n                }\r\n                if (eye) {\r\n                    // for monocular rendering, we just render viewport 0\r\n                    gl.uniform1i(eye.location, 0);\r\n                }\r\n                if (isOrthographic) {\r\n                    // Left or right eye, when rendering sterio VR.\r\n                    gl.uniform1i(isOrthographic.location, vp.isOrthographic);\r\n                }\r\n            };\r\n            renderstate.bindViewports = (unifs, cb) => cb();\r\n        }\r\n        else {\r\n            renderstate.bindRendererUnifs = (unifs) => {\r\n                // Note: the camera matrix should be the head position instead\r\n                // of the eye position. The inverse(viewMatrix) can be used\r\n                // when we want the eye pos.\r\n                const { cameraMatrix } = unifs;\r\n                if (cameraMatrix) {\r\n                    gl.uniformMatrix4fv(cameraMatrix.location, false, renderstate.cameraMatrix.asArray());\r\n                }\r\n            };\r\n            renderstate.bindViewports = (unifs, cb) => {\r\n                renderstate.viewports.forEach((vp, index) => {\r\n                    let vp_region = vp.region;\r\n                    gl.viewport(vp_region[0], vp_region[1], vp_region[2], vp_region[3]);\r\n                    const { viewMatrix, projectionMatrix, eye, isOrthographic } = unifs;\r\n                    if (viewMatrix) {\r\n                        gl.uniformMatrix4fv(viewMatrix.location, false, vp.viewMatrix.asArray());\r\n                    }\r\n                    if (projectionMatrix) {\r\n                        gl.uniformMatrix4fv(projectionMatrix.location, false, vp.projectionMatrix.asArray());\r\n                    }\r\n                    if (eye) {\r\n                        // Left or right eye, when rendering sterio VR.\r\n                        gl.uniform1i(eye.location, index);\r\n                    }\r\n                    if (isOrthographic) {\r\n                        // Left or right eye, when rendering sterio VR.\r\n                        gl.uniform1i(isOrthographic.location, vp.isOrthographic);\r\n                    }\r\n                    cb();\r\n                });\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * The drawScene method.\r\n     * @param renderstate - The renderstate value.\r\n     */\r\n    drawScene(renderstate) {\r\n        // Bind already called by GLRenderer.\r\n        renderstate.directives = [...this.directives, '#define DRAW_COLOR'];\r\n        renderstate.shaderopts.directives = renderstate.directives;\r\n        for (const key in this.__passes) {\r\n            const passSet = this.__passes[key];\r\n            for (const pass of passSet) {\r\n                if (pass.enabled)\r\n                    pass.draw(renderstate);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * The drawHighlightedGeoms method.\r\n     * @param renderstate - The renderstate value.\r\n     */\r\n    drawHighlightedGeoms(renderstate) {\r\n        this.bindGLBaseRenderer(renderstate);\r\n        renderstate.directives = [...this.directives, '#define DRAW_HIGHLIGHT'];\r\n        renderstate.shaderopts.directives = renderstate.directives;\r\n        for (const key in this.__passes) {\r\n            const passSet = this.__passes[key];\r\n            for (const pass of passSet) {\r\n                if (pass.enabled)\r\n                    pass.drawHighlightedGeoms(renderstate);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * The drawSceneGeomData method.\r\n     * @param renderstate - The renderstate value.\r\n     * @param mask - The mask value\r\n     */\r\n    drawSceneGeomData(renderstate, mask = 255) {\r\n        this.bindGLBaseRenderer(renderstate);\r\n        renderstate.directives = [...this.directives, '#define DRAW_GEOMDATA'];\r\n        renderstate.shaderopts.directives = renderstate.directives;\r\n        renderstate.floatGeomBuffer = this.floatGeomBuffer;\r\n        for (const key in this.__passes) {\r\n            // Skip pass categories that do not match\r\n            // the mask. E.g. we may not want to hit\r\n            // \"Overlay\" geoms such as labels,\r\n            // or we might be trying to move labels and don't\r\n            // want to grab normal geoms.\r\n            if ((Number.parseInt(key) & mask) == 0)\r\n                continue;\r\n            const passSet = this.__passes[key];\r\n            for (const pass of passSet) {\r\n                if (pass.enabled)\r\n                    pass.drawGeomData(renderstate);\r\n            }\r\n        }\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Static Methods\r\n    /**\r\n     * The registerPass method.\r\n     * @param cls - The cls value.\r\n     * @param passType - The passType value.\r\n     */\r\n    static registerPass(cls, passType) {\r\n        if (!registeredPasses[passType])\r\n            registeredPasses[passType] = [];\r\n        registeredPasses[passType].push(cls);\r\n    }\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() {\r\n        this.resizeObserver.disconnect();\r\n    }\r\n}\r\nexport { GLBaseRenderer };\r\n//# sourceMappingURL=GLBaseRenderer.js.map","/* eslint-disable require-jsdoc */\r\nimport { GLShader } from '../GLShader';\r\n// @ts-ignore\r\nimport frag from './Highlights.frag';\r\n// @ts-ignore\r\nimport vert from './Highlights.vert';\r\nclass HighlightsShader extends GLShader {\r\n    /**\r\n     * Create a GL shader.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'HighlightsShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n        this.setShaderStage('FRAGMENT_SHADER', frag);\r\n    }\r\n}\r\nexport { HighlightsShader };\r\n//# sourceMappingURL=HighlightsShader.js.map","/* eslint-disable require-jsdoc */\r\nimport { GLShader } from '../GLShader';\r\nimport './GLSL/index';\r\n// @ts-ignore\r\nimport frag from './Silhouette.frag';\r\n// @ts-ignore\r\nimport vert from './Silhouette.vert';\r\nclass SilhouetteShader extends GLShader {\r\n    /**\r\n     * Create a GL shader.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'SilhouetteShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n        this.setShaderStage('FRAGMENT_SHADER', frag);\r\n    }\r\n}\r\nexport { SilhouetteShader };\r\n//# sourceMappingURL=SilhouetteShader.js.map","import { BaseEvent } from '../BaseEvent';\r\nclass EnvMapAssignedEvent extends BaseEvent {\r\n    constructor(envMap) {\r\n        super();\r\n        this.envMap = envMap;\r\n    }\r\n}\r\nexport { EnvMapAssignedEvent };\r\n//# sourceMappingURL=EnvMapAssignedEvent.js.map","import { Vec3, Xfo, Mat4, Ray, Color } from '../Math/index';\r\nimport { EnvMap } from '../SceneTree/index';\r\nimport { GLRenderTarget } from './GLRenderTarget';\r\nimport { GLHDRImage } from './GLHDRImage';\r\nimport { GLEnvMap } from './GLEnvMap';\r\nimport { GLBaseRenderer } from './GLBaseRenderer';\r\nimport { GLTexture2D } from './GLTexture2D';\r\nimport { PassType } from './Passes/GLPass';\r\nimport { EnvMapShader } from './Shaders/EnvMapShader';\r\nimport { HighlightsShader } from './Shaders/HighlightsShader';\r\nimport { SilhouetteShader } from './Shaders/SilhouetteShader';\r\nimport { generateShaderGeomBinding } from './Drawing/GeomShaderBinding';\r\nimport { EnvMapAssignedEvent } from '../Utilities/Events/EnvMapAssignedEvent';\r\nconst ALL_PASSES = PassType.OPAQUE | PassType.TRANSPARENT | PassType.OVERLAY;\r\n// TODO: move this fn somewhere\r\n/** Class representing a GL renderer.\r\n * @extends GLBaseRenderer\r\n */\r\nclass GLRenderer extends GLBaseRenderer {\r\n    /**\r\n     * Create a GL renderer.\r\n     * @param $canvas - The $canvas value.\r\n     * @param options - The dictionary of options.\r\n     */\r\n    constructor($canvas, options = {}) {\r\n        // use HTMLCanvasElement?\r\n        super($canvas, options);\r\n        this.__glEnvMap = null;\r\n        this.__rayCastRenderTarget = null;\r\n        this.__backgroundMapShader = null;\r\n        this.__backgroundMapShaderBinding = null;\r\n        this.__rayCastRenderTargetProjMatrix = new Mat4();\r\n        // ///////////////////////\r\n        // Renderer Setup\r\n        this.__exposure = 1.0;\r\n        this.__tonemap = true;\r\n        this.__gamma = 2.2;\r\n        this.__displayEnvironment = true;\r\n        this.__debugMode = 0;\r\n        this._planeDist = 0.0;\r\n        this.__cutPlaneNormal = new Vec3(1, 0, 0);\r\n        this.rayCastDist = 0;\r\n        this.rayCastArea = 0;\r\n        const gl = this.__gl;\r\n        this.highlightsShader = new HighlightsShader(gl);\r\n        this.silhouetteShader = new SilhouetteShader(gl);\r\n        this.highlightOutlineThickness = 1.5;\r\n        this.outlineThickness = 0;\r\n        this.outlineColor = new Color(0.15, 0.15, 0.15, 1);\r\n        this.outlineSensitivity = 2;\r\n        this.outlineDepthBias = 0.7;\r\n        this.__debugTextures = [undefined];\r\n        this.addShaderPreprocessorDirective('ENABLE_INLINE_GAMMACORRECTION');\r\n        if (!options.disableTextures) {\r\n            this.addShaderPreprocessorDirective('ENABLE_TEXTURES');\r\n        }\r\n        if (options.debugGeomIds) {\r\n            this.addShaderPreprocessorDirective('DEBUG_GEOM_ID');\r\n        }\r\n    }\r\n    /**\r\n     * The __bindEnvMap method.\r\n     * @param env - The env value.\r\n     * @private\r\n     */\r\n    __bindEnvMap(env) {\r\n        const gl = this.__gl;\r\n        if (env instanceof EnvMap) {\r\n            // Note: Safari doesn't support rendering to floating\r\n            // point textures, so our PBR lighting pipeline doesn't work.\r\n            if (gl.name !== 'webgl2') {\r\n                return;\r\n            }\r\n            this.__glEnvMap = env.getMetadata('gltexture');\r\n            if (!this.__glEnvMap) {\r\n                if (env.type === 'FLOAT') {\r\n                    this.addShaderPreprocessorDirective('ENABLE_PBR');\r\n                    this.__glEnvMap = new GLEnvMap(this, env);\r\n                }\r\n                // } else if (env.isStreamAtlas()) { // TODO: are these two lines still needed?\r\n                //   this.__glEnvMap = new GLImageStream(gl, env)\r\n                // else {\r\n                //   this.__glEnvMap = new GLTexture2D(this.__gl, env)\r\n                // }\r\n            }\r\n        }\r\n        else {\r\n            // Note: The difference between an EnvMap and a BackgroundMap, is that\r\n            // An EnvMap must be HDR, and can be convolved for reflections.\r\n            // A Background map can be simply an image.\r\n            const backgroundMap = env;\r\n            this.__glBackgroundMap = backgroundMap.getMetadata('gltexture');\r\n            if (!this.__glBackgroundMap) {\r\n                if (backgroundMap.type === 'FLOAT') {\r\n                    this.__glBackgroundMap = new GLHDRImage(this.__gl, backgroundMap); // todo: is this cast ok?\r\n                }\r\n                else {\r\n                    this.__glBackgroundMap = new GLTexture2D(this.__gl, backgroundMap);\r\n                }\r\n            }\r\n            this.__glBackgroundMap.on('loaded', () => {\r\n                this.requestRedraw();\r\n            });\r\n            this.__glBackgroundMap.on('updated', () => {\r\n                this.requestRedraw();\r\n            });\r\n            if (!this.__backgroundMapShader) {\r\n                if (!gl.__quadVertexIdsBuffer)\r\n                    gl.setupInstancedQuad();\r\n                this.__backgroundMapShader = new EnvMapShader(this.__gl);\r\n                // switch (backgroundMap.getMapping()) {\r\n                //   case 'octahedral':\r\n                //     break\r\n                //   case 'latlong':\r\n                //     break\r\n                //   case 'steriolatlong':\r\n                //     break\r\n                //   case 'dualfisheye':\r\n                //     break\r\n                //   case 'uv':\r\n                //   default:\r\n                //     break\r\n                // }\r\n                const shaderComp = this.__backgroundMapShader.compileForTarget();\r\n                this.__backgroundMapShaderBinding = generateShaderGeomBinding(this.__gl, shaderComp.attrs, gl.__quadattrbuffers, gl.__quadIndexBuffer);\r\n            }\r\n            // console.warn('Unsupported EnvMap:' + env)\r\n            return;\r\n        }\r\n        this.__glEnvMap.on('loaded', (event) => {\r\n            this.requestRedraw();\r\n        });\r\n        this.__glEnvMap.on('updated', (event) => {\r\n            this.requestRedraw();\r\n        });\r\n        const event = new EnvMapAssignedEvent(this.__glEnvMap);\r\n        this.emit('envMapAssigned', event);\r\n    }\r\n    /**\r\n     * The setScene method.\r\n     * @param scene - The scene value.\r\n     */\r\n    setScene(scene) {\r\n        const envMapParam = scene.envMapParam;\r\n        if (envMapParam.value != undefined) {\r\n            this.__bindEnvMap(envMapParam.value);\r\n        }\r\n        envMapParam.on('valueChanged', () => {\r\n            this.__bindEnvMap(envMapParam.value);\r\n        });\r\n        const displayEnvMapParam = scene.displayEnvMapParam;\r\n        this.__displayEnvironment = displayEnvMapParam.value;\r\n        displayEnvMapParam.on('valueChanged', () => {\r\n            this.__displayEnvironment = displayEnvMapParam.value;\r\n            this.requestRedraw();\r\n        });\r\n        super.setScene(scene);\r\n    }\r\n    /**\r\n     * The addViewport method.\r\n     * @param name - The name value.\r\n     * @return - The return value.\r\n     */\r\n    addViewport(name) {\r\n        const vp = super.addViewport(name);\r\n        return vp;\r\n    }\r\n    // //////////////////////////\r\n    // GUI\r\n    /**\r\n     * Getter for exposure.\r\n     * @return exposure\r\n     */\r\n    get exposure() {\r\n        return this.__exposure;\r\n    }\r\n    /**\r\n     * Setter for exposure.\r\n     * @param val - The val value.\r\n     */\r\n    set exposure(val) {\r\n        this.__exposure = val;\r\n        this.requestRedraw();\r\n    }\r\n    /**\r\n     * Getter for gamma.\r\n     */\r\n    get gamma() {\r\n        return this.__gamma;\r\n    }\r\n    /**\r\n     * Setter for gamma.\r\n     * @param val - The val value.\r\n     */\r\n    set gamma(val) {\r\n        this.__gamma = val;\r\n        this.requestRedraw();\r\n    }\r\n    /**\r\n     * Getter for displayEnvironment.\r\n     */\r\n    get displayEnvironment() {\r\n        return this.__displayEnvironment;\r\n    }\r\n    /**\r\n     * Setter for displayEnvironment.\r\n     * @param val - The val value.\r\n     */\r\n    set displayEnvironment(val) {\r\n        this.__displayEnvironment = val;\r\n        this.requestRedraw();\r\n    }\r\n    // //////////////////////////\r\n    // Raycasting\r\n    /**\r\n     * Ray casting is implemented by rendering a small image from the position of the ray, and capturing geometries detected in the resulting image.\r\n     * This method takes a Ray value, and uses that base the ray cast operation.\r\n     *\r\n     * @param ray - The ray to use in the raycast.\r\n     * @param dist - The maximum distance to cast the ray\r\n     * @param area - The area to use for the ray\r\n     * @param mask - The mask to filter our certain pass types. Can be PassType.OPAQUE | PassType.TRANSPARENT | PassType.OVERLAY\r\n     * @return - The object containing the ray cast results.\r\n     */\r\n    raycastWithRay(ray, dist, area = 0.01, mask = ALL_PASSES) {\r\n        const xfo = new Xfo();\r\n        xfo.setLookAt(ray.start, ray.start.add(ray.dir), new Vec3(0, 0, 1));\r\n        return this.raycast(xfo, ray, dist, area, mask);\r\n    }\r\n    /**\r\n     * Ray casting is implemented by rendering a small image from the position of the ray, and capturing geometries detected in the resulting image.\r\n     * This method takes an Xfo value, and uses that base the ray cast operation.\r\n     *\r\n     * @param xfo - The xfo to use in the raycast.\r\n     * @param dist - The maximum distance to cast the ray\r\n     * @param area - The area to use for the ray\r\n     * @param mask - The mask to filter our certain pass types. Can be PassType.OPAQUE | PassType.TRANSPARENT | PassType.OVERLAY\r\n     * @return - The object containing the ray cast results.\r\n     */\r\n    raycastWithXfo(xfo, dist, area = 0.01, mask = ALL_PASSES) {\r\n        const ray = new Ray(xfo.tr, xfo.ori.getZaxis().negate());\r\n        return this.raycast(xfo, ray, dist, area, mask);\r\n    }\r\n    /**\r\n     * Ray casting is implemented by rendering a small image from the position of the ray, and capturing geometries detected in the resulting image.\r\n     *\r\n     * @private\r\n     *\r\n     * @param xfo - The ray to use in the raycast.\r\n     * @param ray - The ray to use in the raycast.\r\n     * @param dist - The maximum distance to cast the ray\r\n     * @param area - The area to use for the ray\r\n     * @param mask - The mask to filter our certain pass types. Can be PassType.OPAQUE | PassType.TRANSPARENT | PassType.OVERLAY\r\n     * @return - The object containing the ray cast results.\r\n     */\r\n    raycast(xfo, ray, dist, area = 0.01, mask = ALL_PASSES) {\r\n        var _a;\r\n        const gl = this.__gl;\r\n        if (!this.__rayCastRenderTarget) {\r\n            this.__rayCastRenderTarget = new GLRenderTarget(gl, {\r\n                type: 'FLOAT',\r\n                format: 'RGBA',\r\n                filter: 'NEAREST',\r\n                width: 3,\r\n                height: 3,\r\n                numColorChannels: 1,\r\n            });\r\n        }\r\n        if (this.rayCastDist != dist || this.rayCastArea != area) {\r\n            this.__rayCastRenderTargetProjMatrix.setOrthographicMatrix(area * -0.5, area * 0.5, area * -0.5, area * 0.5, 0.0, dist);\r\n            this.rayCastDist = dist;\r\n            this.rayCastArea = area;\r\n        }\r\n        const region = [0, 0, 3, 3];\r\n        const renderstate = {\r\n            cameraMatrix: xfo.toMat4(),\r\n            viewports: [\r\n                {\r\n                    region,\r\n                    viewMatrix: xfo.inverse().toMat4(),\r\n                    projectionMatrix: this.__rayCastRenderTargetProjMatrix,\r\n                    isOrthographic: true,\r\n                },\r\n            ],\r\n        };\r\n        this.__rayCastRenderTarget.bindForWriting(renderstate, true);\r\n        gl.enable(gl.CULL_FACE);\r\n        gl.enable(gl.DEPTH_TEST);\r\n        gl.depthFunc(gl.LEQUAL);\r\n        gl.depthMask(true);\r\n        this.drawSceneGeomData(renderstate, mask);\r\n        gl.finish();\r\n        this.__rayCastRenderTarget.unbindForWriting();\r\n        this.__rayCastRenderTarget.bindForReading();\r\n        const geomDatas = new Float32Array(4 * 9);\r\n        gl.readPixels(0, 0, 3, 3, gl.RGBA, gl.FLOAT, geomDatas);\r\n        this.__rayCastRenderTarget.unbindForReading();\r\n        // ////////////////////////////////////\r\n        // We have a 3x3 grid of pixels, and we\r\n        // scan them to find if any geom was in the\r\n        // frustum.\r\n        // Starting with the center pixel (4),\r\n        // then left and right (3, 5)\r\n        // Then top bottom (1, 7)\r\n        const checkPixel = (id) => geomDatas[id * 4 + 3] != 0;\r\n        const dataPixels = [4, 3, 5, 1, 7];\r\n        let geomData;\r\n        for (const pixelID of dataPixels) {\r\n            if (checkPixel(pixelID)) {\r\n                geomData = geomDatas.subarray(pixelID * 4, pixelID * 4 + 4);\r\n                break;\r\n            }\r\n        }\r\n        if (!geomData)\r\n            return null;\r\n        // Mask the pass id to be only the first 6 bits of the integer.\r\n        const passId = Math.round(geomData[0]) & (64 - 1);\r\n        const geomItemAndDist = (_a = this.getPass(passId)) === null || _a === void 0 ? void 0 : _a.getGeomItemAndDist(geomData);\r\n        if (geomItemAndDist) {\r\n            const intersectionPos = ray.start.add(ray.dir.scale(geomItemAndDist.dist));\r\n            return {\r\n                pointerRay: ray,\r\n                intersectionPos,\r\n                geomItem: geomItemAndDist.geomItem,\r\n                dist: geomItemAndDist.dist,\r\n                geomData,\r\n            };\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @private\r\n     *\r\n     * @param xfo - The ray to use in the raycast.\r\n     * @param ray - The ray to use in the raycast.\r\n     * @param dist - The maximum distance to cast the ray\r\n     * @param area - The area to use for the ray\r\n     * @param mask - The mask to filter our certain pass types. Can be PassType.OPAQUE | PassType.TRANSPARENT | PassType.OVERLAY\r\n     * @return - The object containing the ray cast results.\r\n     */\r\n    raycastCluster(xfo, ray, dist, area = 0.01, mask = ALL_PASSES) {\r\n        const gl = this.__gl;\r\n        if (!this.__rayCastRenderTarget) {\r\n            this.__rayCastRenderTarget = new GLRenderTarget(gl, {\r\n                type: 'FLOAT',\r\n                format: 'RGBA',\r\n                filter: 'NEAREST',\r\n                width: 3,\r\n                height: 3,\r\n                numColorChannels: 1,\r\n            });\r\n            this.__rayCastRenderTargetProjMatrix = new Mat4();\r\n        }\r\n        if (this.rayCastDist != dist || this.rayCastArea != area) {\r\n            this.__rayCastRenderTargetProjMatrix.setOrthographicMatrix(area * -0.5, area * 0.5, area * -0.5, area * 0.5, 0.0, dist);\r\n            this.rayCastDist = dist;\r\n            this.rayCastArea = area;\r\n        }\r\n        const region = [0, 0, 3, 3];\r\n        const renderstate = {};\r\n        renderstate.viewports.push({\r\n            region,\r\n            viewMatrix: xfo.inverse().toMat4(),\r\n            projectionMatrix: this.__rayCastRenderTargetProjMatrix,\r\n            isOrthographic: true,\r\n        });\r\n        renderstate.cameraMatrix = xfo.toMat4();\r\n        this.__rayCastRenderTarget.bindForWriting(renderstate, true);\r\n        gl.enable(gl.CULL_FACE);\r\n        gl.enable(gl.DEPTH_TEST);\r\n        gl.depthFunc(gl.LEQUAL);\r\n        gl.depthMask(true);\r\n        this.drawSceneGeomData(renderstate, mask);\r\n        gl.finish();\r\n        this.__rayCastRenderTarget.unbindForWriting();\r\n        this.__rayCastRenderTarget.bindForReading();\r\n        const geomDatas = new Float32Array(4 * 9);\r\n        gl.readPixels(0, 0, 3, 3, gl.RGBA, gl.FLOAT, geomDatas);\r\n        this.__rayCastRenderTarget.unbindForReading();\r\n        // ////////////////////////////////////\r\n        // We have a 3x3 grid of pixels, and we\r\n        // scan them to find if any geom was in the\r\n        // frustum.\r\n        // Note: we return every intersection, because even multiple intersections\r\n        // on the same geometry will be at different distances.\r\n        // This method is often used to get an average distance.\r\n        const checkPixel = (id) => geomDatas[id * 4 + 3] != 0;\r\n        const result = [];\r\n        for (let i = 0; i < 9; i++) {\r\n            if (checkPixel(i)) {\r\n                const geomData = geomDatas.subarray(i * 4, i * 4 + 4);\r\n                // Mask the pass id to be only the first 6 bits of the integer.\r\n                const passId = Math.round(geomData[0]) & (64 - 1);\r\n                const pass = this.getPass(passId);\r\n                if (pass) {\r\n                    const geomItemAndDist = pass.getGeomItemAndDist(geomData);\r\n                    if (geomItemAndDist) {\r\n                        const intersectionPos = ray.start.add(ray.dir.scale(geomItemAndDist.dist));\r\n                        result.push({\r\n                            ray,\r\n                            intersectionPos,\r\n                            geomItem: geomItemAndDist.geomItem,\r\n                            dist: geomItemAndDist.dist,\r\n                            geomData,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    // //////////////////////////\r\n    // Rendering\r\n    /**\r\n     * The drawBackground method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    drawBackground(renderstate) {\r\n        if (this.__glBackgroundMap && this.__backgroundMapShader && this.__backgroundMapShaderBinding) {\r\n            if (!this.__glBackgroundMap.isLoaded())\r\n                return;\r\n            const gl = this.__gl;\r\n            gl.depthMask(false);\r\n            this.__backgroundMapShader.bind(renderstate);\r\n            const unifs = renderstate.unifs;\r\n            this.__glBackgroundMap.bindToUniform(renderstate, unifs.backgroundImage);\r\n            this.__backgroundMapShaderBinding.bind(renderstate);\r\n            gl.drawQuad();\r\n        }\r\n        else if (this.__glEnvMap && this.__glEnvMap.draw /* Note: video env maps cannot be drawn directly.*/) {\r\n            this.__glEnvMap.draw(renderstate);\r\n        }\r\n    }\r\n    /**\r\n     * The bindGLRenderer method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    bindGLRenderer(renderstate) {\r\n        super.bindGLBaseRenderer(renderstate);\r\n        renderstate.envMap = this.__glEnvMap;\r\n        renderstate.exposure = this.__exposure;\r\n        renderstate.gamma = this.__gamma;\r\n    }\r\n    /**\r\n     * The drawScene method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    drawScene(renderstate) {\r\n        this.bindGLRenderer(renderstate);\r\n        if (this.__displayEnvironment)\r\n            this.drawBackground(renderstate);\r\n        super.drawScene(renderstate);\r\n        // console.log(\"Draw Calls:\" + renderstate['drawCalls']);\r\n        this.emit('redrawOccurred');\r\n    }\r\n}\r\nexport { GLRenderer };\r\n//# sourceMappingURL=GLRenderer.js.map","/* eslint-disable require-jsdoc */\r\nimport { GLShader } from '../GLShader';\r\nimport './GLSL/index';\r\n// @ts-ignore\r\nimport frag from './Billboard.frag';\r\n// @ts-ignore\r\nimport vert from './Billboard.vert';\r\nclass BillboardShader extends GLShader {\r\n    /**\r\n     * Create a GL shader.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'BillboardShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n        this.setShaderStage('FRAGMENT_SHADER', frag);\r\n    }\r\n}\r\nexport { BillboardShader };\r\n//# sourceMappingURL=BillboardShader.js.map","/* eslint-disable require-jsdoc */\r\nimport { Vec3 } from '../../Math/index';\r\nimport { GLShader } from '../GLShader';\r\nimport './GLSL/index';\r\n// @ts-ignore\r\nimport vert from './EnvProjection.vert';\r\n// @ts-ignore\r\nimport LatLongEnvProjectionFrag from './LatLongEnvProjection.frag';\r\n// @ts-ignore\r\nimport OctahedralEnvProjectionFrag from './OctahedralEnvProjection.frag';\r\nimport { Material, Vec3Parameter } from '../../SceneTree';\r\nclass EnvProjectionShader extends GLShader {\r\n    /**\r\n     * Create a GL shader.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'EnvProjectionShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n    }\r\n}\r\nclass OctahedralEnvProjectionShader extends EnvProjectionShader {\r\n    /**\r\n     * Create a GL shader.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    constructor(gl) {\r\n        super(gl);\r\n        this.setShaderStage('FRAGMENT_SHADER', OctahedralEnvProjectionFrag);\r\n    }\r\n}\r\n// Registry.register('OctahedralEnvProjectionShader', OctahedralEnvProjectionShader)\r\nclass LatLongEnvProjectionShader extends EnvProjectionShader {\r\n    /**\r\n     * Create a GL shader.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    constructor(gl) {\r\n        super(gl);\r\n        this.setShaderStage('FRAGMENT_SHADER', LatLongEnvProjectionFrag);\r\n    }\r\n}\r\nconst material = new Material('EnvProjectionShader_template');\r\nmaterial.addParameter(new Vec3Parameter('projectionCenter', new Vec3(0.0, 0.0, 1.7)));\r\nexport { EnvProjectionShader, OctahedralEnvProjectionShader, LatLongEnvProjectionShader };\r\n//# sourceMappingURL=EnvProjectionShader.js.map","import { Registry } from '../../Registry';\r\nimport { GLShader } from '../GLShader';\r\nimport './GLSL/index';\r\n// @ts-ignore\r\nimport frag from './FatLines.frag';\r\n// @ts-ignore\r\nimport vert from './FatLines.vert';\r\nimport { FatLinesMaterial } from '../../SceneTree/Materials/FatLinesMaterial';\r\n/** Shader for drawing Fat lines\r\n * @extends GLShader\r\n * @private\r\n */\r\nclass FatLinesShader extends GLShader {\r\n    /**\r\n     * Create a GL shader.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'FatLinesShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n        this.setShaderStage('FRAGMENT_SHADER', frag);\r\n    }\r\n    bind(renderstate, key) {\r\n        if (super.bind(renderstate, key)) {\r\n            renderstate.supportsInstancing = false;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * The supportsInstancing method.\r\n     * @return - return false for shaders that cannot be rendered in instanced mode.\r\n     */\r\n    static supportsInstancing() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Each shader provides a template material that each material instance is\r\n     * based on. The shader specifies the parameters needed by the shader, and\r\n     * the material provides values to the shader during rendering.\r\n     * @return - The template material value.\r\n     */\r\n    static getMaterialTemplate() {\r\n        return material;\r\n    }\r\n}\r\nconst material = new FatLinesMaterial('FatLinesShader_template');\r\nRegistry.register('FatLinesShader', FatLinesShader);\r\nexport { FatLinesShader };\r\n//# sourceMappingURL=FatLinesShader.js.map","import { Registry } from '../../Registry';\r\nimport { GLShader } from '../GLShader';\r\nimport { FlatSurfaceMaterial } from '../../SceneTree';\r\nimport './GLSL/index';\r\n// @ts-ignore\r\nimport vert from './FlatSurface.vert';\r\n// @ts-ignore\r\nimport frag from './FlatSurface.frag';\r\nclass FlatSurfaceShader extends GLShader {\r\n    /**\r\n     * Create a GL shader.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'FlatSurfaceShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n        this.setShaderStage('FRAGMENT_SHADER', frag);\r\n    }\r\n    /**\r\n     * The bind method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param key - The key value.\r\n     * @return - The return value.\r\n     */\r\n    bind(renderstate, key) {\r\n        super.bind(renderstate, key);\r\n        // Note: The GLTransparentGeoms pass only  renders the font faces of objects because for complex geoms, this makes sense\r\n        // but flat surfaces should be double sided, as they are almost always labels, or UI elements.\r\n        const gl = this.__gl;\r\n        gl.disable(gl.CULL_FACE);\r\n        return true;\r\n    }\r\n    /**\r\n     * The unbind method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @return - The return value.\r\n     */\r\n    unbind(renderstate) {\r\n        super.unbind(renderstate);\r\n        const gl = this.__gl;\r\n        gl.enable(gl.CULL_FACE);\r\n        return true;\r\n    }\r\n    /**\r\n     * The getPackedMaterialData method.\r\n     * @param material - The material param.\r\n     * @return - The return value.\r\n     */\r\n    static getPackedMaterialData(material) {\r\n        const matData = new Float32Array(4);\r\n        const baseColor = material.getParameter('BaseColor').value;\r\n        matData[0] = baseColor.r;\r\n        matData[1] = baseColor.g;\r\n        matData[2] = baseColor.b;\r\n        matData[3] = baseColor.a;\r\n        return matData;\r\n    }\r\n    /**\r\n     * Each shader provides a template material that each material instance is\r\n     * based on. The shader specifies the parameters needed by the shader, and\r\n     * the material provides values to the shader during rendering.\r\n     * @return - The template material value.\r\n     */\r\n    static getMaterialTemplate() {\r\n        return material;\r\n    }\r\n}\r\nconst material = new FlatSurfaceMaterial('FlatSurfaceShader_template');\r\nRegistry.register('FlatSurfaceShader', FlatSurfaceShader);\r\nexport { FlatSurfaceShader };\r\n//# sourceMappingURL=FlatSurfaceShader.js.map","/* eslint-disable require-jsdoc */\r\nimport { Registry } from '../../Registry';\r\nimport { GLShader } from '../GLShader';\r\nimport { LinesMaterial } from '../../SceneTree/Materials/LinesMaterial';\r\nimport './GLSL/index';\r\n// @ts-ignore\r\nimport vert from './Lines.vert';\r\n// @ts-ignore\r\nimport frag from './Lines.frag';\r\nclass LinesShader extends GLShader {\r\n    /**\r\n     * Create a GL shader.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'LinesShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n        this.setShaderStage('FRAGMENT_SHADER', frag);\r\n    }\r\n    /**\r\n     * The getPackedMaterialData method.\r\n     * @param material - The material param.\r\n     * @return - The return value.\r\n     */\r\n    static getPackedMaterialData(material) {\r\n        const matData = new Float32Array(12);\r\n        const baseColor = material.getParameter('BaseColor').value;\r\n        matData[0] = baseColor.r;\r\n        matData[1] = baseColor.g;\r\n        matData[2] = baseColor.b;\r\n        matData[3] = baseColor.a;\r\n        // Note: By avoiding calling this value 'Opacity', the lines will not be considered 'Transparent'\r\n        // Lines do not need to be depth sorted....\r\n        matData[4] = material.getParameter('Opacity').value;\r\n        matData[5] = material.getParameter('Overlay').value;\r\n        matData[6] = material.getParameter('StippleScale').value;\r\n        matData[7] = material.getParameter('StippleValue').value;\r\n        matData[8] = material.getParameter('OccludedStippleValue').value;\r\n        return matData;\r\n    }\r\n    /**\r\n     * Each shader provides a template material that each material instance is\r\n     * based on. The shader specifies the parameters needed by the shader, and\r\n     * the material provides values to the shader during rendering.\r\n     * @return - The template material value.\r\n     */\r\n    static getMaterialTemplate() {\r\n        return material;\r\n    }\r\n}\r\nconst material = new LinesMaterial('LinesShader_template');\r\nRegistry.register('LinesShader', LinesShader);\r\nexport { LinesShader };\r\n//# sourceMappingURL=LinesShader.js.map","import { Registry } from '../../Registry';\r\nimport { PointsMaterial } from '../../SceneTree/Materials/PointsMaterial';\r\nimport { GLShader } from '../GLShader';\r\nimport './GLSL/index';\r\n// @ts-ignore\r\nimport frag from './Points.frag';\r\n// @ts-ignore\r\nimport vert from './Points.vert';\r\nclass PointsShader extends GLShader {\r\n    /**\r\n     * Create a GL shader.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'PointsShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n        this.setShaderStage('FRAGMENT_SHADER', frag);\r\n    }\r\n    /**\r\n     * The getPackedMaterialData method.\r\n     * @param material - The material param.\r\n     * @return - The return value.\r\n     */\r\n    static getPackedMaterialData(material) {\r\n        const matData = new Float32Array(12);\r\n        const baseColor = material.getParameter('BaseColor').value;\r\n        matData[0] = baseColor.r;\r\n        matData[1] = baseColor.g;\r\n        matData[2] = baseColor.b;\r\n        matData[3] = baseColor.a;\r\n        matData[4] = material.getParameter('PointSize').value;\r\n        matData[5] = material.getParameter('Overlay').value;\r\n        return matData;\r\n    }\r\n    /**\r\n     * Each shader provides a template material that each material instance is\r\n     * based on. The shader specifies the parameters needed by the shader, and\r\n     * the material provides values to the shader during rendering.\r\n     * @return - The template material value.\r\n     */\r\n    static getMaterialTemplate() {\r\n        return material;\r\n    }\r\n}\r\nconst material = new PointsMaterial('PointsShader_template');\r\nRegistry.register('PointsShader', PointsShader);\r\nexport { PointsShader };\r\n//# sourceMappingURL=PointsShader.js.map","import { Registry } from '../../Registry';\r\nimport { FatPointsMaterial } from '../../SceneTree';\r\nimport { GLShader } from '../GLShader';\r\nimport './GLSL/index';\r\n// @ts-ignore\r\nimport vert from './FatPoints.vert';\r\n// @ts-ignore\r\nimport frag from './FatPoints.frag';\r\nclass FatPointsShader extends GLShader {\r\n    /**\r\n     * Create a GL shader.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'FatPointsShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n        this.setShaderStage('FRAGMENT_SHADER', frag);\r\n    }\r\n    bind(renderstate, key) {\r\n        if (super.bind(renderstate, key)) {\r\n            renderstate.supportsInstancing = false;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * The supportsInstancing method.\r\n     * @return - return false for shaders that cannot be rendered in instanced mode.\r\n     */\r\n    static supportsInstancing() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Each shader provides a template material that each material instance is\r\n     * based on. The shader specifies the parameters needed by the shader, and\r\n     * the material provides values to the shader during rendering.\r\n     * @return - The template material value.\r\n     */\r\n    static getMaterialTemplate() {\r\n        return material;\r\n    }\r\n}\r\nconst material = new FatPointsMaterial('FatPointsShader_template');\r\nRegistry.register('FatPointsShader', FatPointsShader);\r\nexport { FatPointsShader };\r\n//# sourceMappingURL=FatPointsShader.js.map","/* eslint-disable require-jsdoc */\r\nimport { Registry } from '../../Registry';\r\nimport { GLShader } from '../GLShader';\r\nimport './GLSL/index';\r\n// @ts-ignore\r\nimport frag from './SimpleSurface.frag';\r\n// @ts-ignore\r\nimport vert from './SimpleSurface.vert';\r\nimport { SimpleSurfaceMaterial } from '../../SceneTree/Materials/SimpleSurfaceMaterial';\r\n/** A simple shader with no support for PBR or textures\r\n * @ignore\r\n */\r\nclass SimpleSurfaceShader extends GLShader {\r\n    /**\r\n     * Create a SimpleSurfaceShader\r\n     * @param gl - gl context\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'SimpleSurfaceShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n        this.setShaderStage('FRAGMENT_SHADER', frag);\r\n    }\r\n    /**\r\n     * The getPackedMaterialData method.\r\n     * @param material - The material param.\r\n     * @return - The return value.\r\n     */\r\n    static getPackedMaterialData(material) {\r\n        const matData = new Float32Array(8);\r\n        const baseColor = material.getParameter('BaseColor').value;\r\n        matData[0] = baseColor.r;\r\n        matData[1] = baseColor.g;\r\n        matData[2] = baseColor.b;\r\n        matData[3] = baseColor.a;\r\n        matData[4] = material.getParameter('Opacity').value;\r\n        matData[5] = material.getParameter('EmissiveStrength').value;\r\n        return matData;\r\n    }\r\n    /**\r\n     * Each shader provides a template material that each material instance is\r\n     * based on. The shader specifies the parameters needed by the shader, and\r\n     * the material provides values to the shader during rendering.\r\n     * @return - The template material value.\r\n     */\r\n    static getMaterialTemplate() {\r\n        return material;\r\n    }\r\n}\r\nconst material = new SimpleSurfaceMaterial('SimpleSurfaceShader_template');\r\nRegistry.register('SimpleSurfaceShader', SimpleSurfaceShader);\r\nexport { SimpleSurfaceShader };\r\n//# sourceMappingURL=SimpleSurfaceShader.js.map","import { Registry } from '../../Registry';\r\nimport { GLShader } from '../GLShader';\r\nimport './GLSL/index';\r\n// @ts-ignore\r\nimport vert from './StandardSurface.vert';\r\n// @ts-ignore\r\nimport frag from './StandardSurface.frag';\r\nimport { StandardSurfaceMaterial } from '../../SceneTree/Materials/StandardSurfaceMaterial';\r\n/** A standard shader handling Opaque and transparent items and PBR rendering.\r\n * @extends GLShader\r\n * @private\r\n */\r\nclass StandardSurfaceShader extends GLShader {\r\n    /**\r\n     * Create a GL shader.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'StandardSuraceShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n        this.setShaderStage('FRAGMENT_SHADER', frag);\r\n    }\r\n    /**\r\n     * The bind method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param key - The key value.\r\n     * @return - The return value.\r\n     */\r\n    bind(renderstate, key) {\r\n        const colorRenderState = renderstate;\r\n        super.bind(renderstate, key);\r\n        const gl = this.__gl;\r\n        if (colorRenderState.envMap) {\r\n            colorRenderState.envMap.bind(colorRenderState);\r\n        }\r\n        const { exposure } = colorRenderState.unifs;\r\n        if (exposure) {\r\n            gl.uniform1f(exposure.location, colorRenderState.exposure);\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * The getPackedMaterialData method.\r\n     * @param material - The material param.\r\n     * @return - The return value.\r\n     */\r\n    static getPackedMaterialData(material) {\r\n        const matData = new Float32Array(12); // TODO: no extra space needed right?\r\n        const baseColor = material.getParameter('BaseColor').value;\r\n        matData[0] = baseColor.r;\r\n        matData[1] = baseColor.g;\r\n        matData[2] = baseColor.b;\r\n        matData[3] = baseColor.a;\r\n        matData[4] = material.getParameter('AmbientOcclusion').value;\r\n        matData[5] = material.getParameter('Metallic').value;\r\n        matData[6] = material.getParameter('Roughness').value;\r\n        matData[7] = material.getParameter('Reflectance').value;\r\n        matData[8] = material.getParameter('EmissiveStrength').value;\r\n        matData[9] = material.getParameter('Opacity').value;\r\n        return matData;\r\n    }\r\n    /**\r\n     * Each shader provides a template material that each material instance is\r\n     * based on. The shader specifies the parameters needed by the shader, and\r\n     * the material provides values to the shader during rendering.\r\n     * @return - The template material value.\r\n     */\r\n    static getMaterialTemplate() {\r\n        return material;\r\n    }\r\n}\r\nconst material = new StandardSurfaceMaterial('StandardSurfaceShader_template');\r\nRegistry.register('StandardSurfaceShader', StandardSurfaceShader);\r\nRegistry.register('TransparentSurfaceShader', StandardSurfaceShader);\r\nexport { StandardSurfaceShader };\r\n//# sourceMappingURL=StandardSurfaceShader.js.map","import { Registry } from '../../Registry';\r\nimport { ScreenSpaceMaterial } from '../../SceneTree/Materials/ScreenSpaceMaterial';\r\nimport { GLShader } from '../GLShader';\r\nimport './GLSL/index';\r\n// @ts-ignore\r\nimport frag from './ScreenSpace.frag';\r\n// @ts-ignore\r\nimport vert from './ScreenSpace.vert';\r\nclass ScreenSpaceShader extends GLShader {\r\n    /**\r\n     * Create a GL shader.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'ScreenSpaceShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n        this.setShaderStage('FRAGMENT_SHADER', frag);\r\n    }\r\n    static isOverlay() {\r\n        return true;\r\n    }\r\n    /**\r\n     * The getPackedMaterialData method.\r\n     * @param material - The material param.\r\n     * @return - The return value.\r\n     */\r\n    static getPackedMaterialData(material) {\r\n        const matData = new Float32Array(8);\r\n        const baseColor = material.getParameter('BaseColor').value;\r\n        matData[0] = baseColor.r;\r\n        matData[1] = baseColor.g;\r\n        matData[2] = baseColor.b;\r\n        matData[3] = baseColor.a;\r\n        return matData;\r\n    }\r\n    /**\r\n     * Each shader provides a template material that each material instance is\r\n     * based on. The shader specifies the parameters needed by the shader, and\r\n     * the material provides values to the shader during rendering.\r\n     * @return - The template material value.\r\n     */\r\n    static getMaterialTemplate() {\r\n        return material;\r\n    }\r\n}\r\nconst material = new ScreenSpaceMaterial('ScreenSpaceShader_template');\r\nRegistry.register('ScreenSpaceShader', ScreenSpaceShader);\r\nexport { ScreenSpaceShader };\r\n//# sourceMappingURL=ScreenSpaceShader.js.map","import { GLPass } from './GLPass';\r\nimport { GeomItem } from '../../SceneTree/index';\r\nimport { MathFunctions } from '../../Utilities/MathFunctions';\r\n/** This class abstracts the rendering of a collection of geometries to screen.\r\n * @extends GLPass\r\n */\r\nclass GLStandardGeomsPass extends GLPass {\r\n    /**\r\n     * Create a GL pass.\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n    /**\r\n     * The init method.\r\n     * @param renderer - The renderer value.\r\n     * @param passIndex - The index of the pass in the GLBAseRenderer\r\n     */\r\n    init(renderer, passIndex) {\r\n        super.init(renderer, passIndex);\r\n    }\r\n    /**\r\n     * The itemAddedToScene method is called on each pass when a new item\r\n     * is added to the scene, and the renderer must decide how to render it.\r\n     * It allows Passes to select geometries to handle the drawing of.\r\n     * @param treeItem - The treeItem value.\r\n     * @param rargs - Extra return values are passed back in this object.\r\n     * The object contains a parameter 'continueInSubTree', which can be set to false,\r\n     * so the subtree of this node will not be traversed after this node is handled.\r\n     * @return - Returns true if the item is now added to the pass.\r\n     */\r\n    itemAddedToScene(treeItem, rargs) {\r\n        if (treeItem instanceof GeomItem) {\r\n            const geomItem = treeItem;\r\n            {\r\n                {\r\n                    if (this.filterGeomItem(geomItem)) {\r\n                        this.addGeomItem(geomItem);\r\n                        geomItem.setMetadata('glpass', this);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * The itemRemovedFromScene method is called on each pass when aa item\r\n     * is removed to the scene, and the pass must handle cleaning up any resources.\r\n     * @param treeItem - The treeItem value.\r\n     * @param rargs - Extra return values are passed back in this object.\r\n     * @return - The return value.\r\n     */\r\n    itemRemovedFromScene(treeItem, rargs) {\r\n        if (treeItem instanceof GeomItem && treeItem.getMetadata('glpass') == this) {\r\n            return this.removeGeomItem(treeItem);\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * The filterGeomItem method.\r\n     * @param geomItem - The geomItem value.\r\n     * @return - The return value.\r\n     */\r\n    filterGeomItem(geomItem) {\r\n        return true;\r\n    }\r\n    /**\r\n     * The addGeomItem method.\r\n     * @param geomItem - The geomItem value.\r\n     */\r\n    addGeomItem(geomItem) { }\r\n    /**\r\n     * The removeGeomItem method.\r\n     * @param geomItem - The geomItem value.\r\n     */\r\n    removeGeomItem(geomItem) {\r\n        return false;\r\n    }\r\n    /**\r\n     * The constructShaders method.\r\n     * Given a material, generate the various shaders required to render objects\r\n     * using this material. There should always be at least a single glShader\r\n     * and optionally a glgeomdatashader for rendering the goem data buffer\r\n     * and a glselectedshader for rendering selection hilghlights\r\n     * @param shaderName - The name of the base shader.\r\n     * @return - The object containing the shader instances.\r\n     */\r\n    constructShaders(shaderName) {\r\n        let glgeomdatashader;\r\n        let glselectedshader;\r\n        const glShader = this.__renderer.getOrCreateShader(shaderName);\r\n        if (glShader.getGeomDataShaderName()) {\r\n            glgeomdatashader = this.__renderer.getOrCreateShader(glShader.getGeomDataShaderName());\r\n        }\r\n        else {\r\n            glgeomdatashader = glShader;\r\n        }\r\n        if (glShader.getSelectedShaderName()) {\r\n            glselectedshader = this.__renderer.getOrCreateShader(glShader.getSelectedShaderName());\r\n        }\r\n        else {\r\n            glselectedshader = glShader;\r\n        }\r\n        return {\r\n            glShader,\r\n            glgeomdatashader,\r\n            glselectedshader,\r\n        };\r\n    }\r\n    /**\r\n     * The getGeomItemAndDist method.\r\n     * @param geomData - The geomData value.\r\n     * @return - The return value.\r\n     */\r\n    getGeomItemAndDist(geomData) {\r\n        let itemId;\r\n        let dist;\r\n        if (geomData instanceof Float32Array) {\r\n            itemId = Math.round(geomData[1]);\r\n            dist = geomData[3];\r\n        }\r\n        else {\r\n            itemId = geomData[0] + ((geomData[1] & 63) << 8);\r\n            dist = MathFunctions.decode16BitFloatFrom2xUInt8(geomData.slice(2, 3));\r\n        }\r\n        const geomItem = this.renderer.glGeomItemLibrary.getGeomItem(itemId);\r\n        if (geomItem) {\r\n            return {\r\n                geomItem,\r\n                dist,\r\n            };\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\nexport { GLStandardGeomsPass };\r\n//# sourceMappingURL=GLStandardGeomsPass.js.map","import '../../SceneTree/GeomItem';\r\nimport { EventEmitter, MathFunctions } from '../../Utilities/index';\r\nimport { GLTexture2D } from '../GLTexture2D';\r\n/** This class abstracts the rendering of a collection of geometries to screen.\r\n * @extends EventEmitter\r\n * @private\r\n */\r\nclass GLGeomItemSetMultiDraw extends EventEmitter {\r\n    /**\r\n     * Create a GL geom item set.\r\n     * @param renderer - The renderer object.\r\n     */\r\n    constructor(renderer) {\r\n        super();\r\n        this.drawIdsTexture = null;\r\n        this.highlightedIdsTexture = null;\r\n        this.renderer = renderer;\r\n        this.gl = renderer.gl;\r\n        this.glGeomItems = [];\r\n        this.glGeomIdsMapping = {};\r\n        this.glgeomItemEventHandlers = [];\r\n        this.freeIndices = [];\r\n        this.drawElementCounts = new Int32Array(0);\r\n        this.drawElementOffsets = new Int32Array(0);\r\n        this.highlightElementCounts = new Int32Array(0);\r\n        this.highlightElementOffsets = new Int32Array(0);\r\n        this.reserved = 0;\r\n        this.visibleItems = [];\r\n        this.drawIdsArray = new Float32Array(0);\r\n        this.drawIdsBufferDirty = true;\r\n        this.drawIdsTexture = null;\r\n        this.highlightedItems = [];\r\n        this.highlightedIdsArray = null;\r\n        this.highlightedIdsTexture = null;\r\n        this.highlightedIdsBufferDirty = true;\r\n        this.renderer.glGeomLibrary.on('geomDataChanged', (event) => {\r\n            const geomItemIndices = this.glGeomIdsMapping[event.index];\r\n            if (geomItemIndices != undefined) {\r\n                geomItemIndices.forEach((index) => {\r\n                    const glGeomItem = this.glGeomItems[index];\r\n                    if (glGeomItem.isVisible()) {\r\n                        const index = this.visibleItems.indexOf(glGeomItem);\r\n                        const offsetAndCount = this.renderer.glGeomLibrary.getGeomOffsetAndCount(glGeomItem.geomId);\r\n                        this.drawElementOffsets[index] = offsetAndCount[0];\r\n                        this.drawElementCounts[index] = offsetAndCount[1];\r\n                        const highlightIndex = this.highlightedItems.indexOf(glGeomItem);\r\n                        if (highlightIndex != -1) {\r\n                            this.highlightElementOffsets[highlightIndex] = offsetAndCount[0];\r\n                            this.highlightElementCounts[highlightIndex] = offsetAndCount[1];\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * The addGLGeomItem method.\r\n     * @param glGeomItem - The glGeomItem value.\r\n     */\r\n    addGLGeomItem(glGeomItem) {\r\n        const index = this.freeIndices.length > 0 ? this.freeIndices.pop() : this.glGeomItems.length;\r\n        // Keep track of which geomitems use which geoms, so we can update the offset and count array if they change.\r\n        if (!this.glGeomIdsMapping[glGeomItem.geomId]) {\r\n            this.glGeomIdsMapping[glGeomItem.geomId] = [index];\r\n        }\r\n        else {\r\n            this.glGeomIdsMapping[glGeomItem.geomId].push(index);\r\n        }\r\n        const eventHandlers = {};\r\n        // //////////////////////////////\r\n        // Visibility\r\n        if (glGeomItem.visible) {\r\n            this.visibleItems.push(glGeomItem);\r\n        }\r\n        eventHandlers.visibilityChanged = (event) => {\r\n            if (event.visible) {\r\n                this.visibleItems.push(glGeomItem);\r\n            }\r\n            else {\r\n                this.visibleItems.splice(this.visibleItems.indexOf(glGeomItem), 1);\r\n            }\r\n            // console.log(this.constructor.name, ' visibleItems', this.visibleItems.length)\r\n            if (!this.drawIdsBufferDirty) {\r\n                this.drawIdsBufferDirty = true;\r\n                this.emit('updated');\r\n            }\r\n        };\r\n        glGeomItem.on('visibilityChanged', eventHandlers.visibilityChanged);\r\n        // //////////////////////////////\r\n        // Highlighted\r\n        if (glGeomItem.geomItem.isHighlighted()) {\r\n            this.highlightedItems.push(glGeomItem);\r\n            this.highlightedIdsBufferDirty = true;\r\n        }\r\n        eventHandlers.highlightChanged = (event) => {\r\n            if (event && event.name) {\r\n                // Note: highlightChanged is fired when the color changes\r\n                // or another highlight is added over the top. We avoid\r\n                // adding the same index again here. (TODO: use Set?)\r\n                if (this.highlightedItems.includes(glGeomItem))\r\n                    return;\r\n                this.highlightedItems.push(glGeomItem);\r\n            }\r\n            else {\r\n                this.highlightedItems.splice(this.highlightedItems.indexOf(glGeomItem), 1);\r\n            }\r\n            // console.log(\"highlightChanged:\", glGeomItem.geomItem.getName(), glGeomItem.geomItem.isHighlighted(), this.highlightedItems)\r\n            this.highlightedIdsBufferDirty = true;\r\n            this.emit('updated');\r\n        };\r\n        glGeomItem.geomItem.on('highlightChanged', eventHandlers.highlightChanged);\r\n        this.glGeomItems[index] = glGeomItem;\r\n        this.glgeomItemEventHandlers[index] = eventHandlers;\r\n        this.drawIdsBufferDirty = true;\r\n        this.emit('updated');\r\n    }\r\n    /**\r\n     * The removeGLGeomItem method.\r\n     * @param glGeomItem - The glGeomItem value.\r\n     */\r\n    removeGLGeomItem(glGeomItem) {\r\n        const index = this.glGeomItems.indexOf(glGeomItem);\r\n        const geomItemIndices = this.glGeomIdsMapping[glGeomItem.geomId];\r\n        geomItemIndices.splice(geomItemIndices.indexOf(index), 1);\r\n        if (geomItemIndices.length == 0) {\r\n            delete this.glGeomIdsMapping[glGeomItem.geomId];\r\n        }\r\n        const eventHandlers = this.glgeomItemEventHandlers[index];\r\n        glGeomItem.geomItem.off('highlightChanged', eventHandlers.highlightChanged);\r\n        glGeomItem.off('visibilityChanged', eventHandlers.visibilityChanged);\r\n        this.glGeomItems[index] = null;\r\n        this.glgeomItemEventHandlers[index] = null;\r\n        this.drawIdsArray[index] = 0;\r\n        this.drawElementOffsets[index] = 0;\r\n        this.drawElementCounts[index] = 0;\r\n        this.freeIndices.push(index);\r\n        if (glGeomItem.isVisible()) {\r\n            const visibleItemIndex = this.visibleItems.indexOf(glGeomItem);\r\n            this.visibleItems.splice(visibleItemIndex, 1);\r\n            this.drawIdsBufferDirty = true;\r\n        }\r\n        if (glGeomItem.geomItem.isHighlighted()) {\r\n            const highlightIndex = this.highlightedItems.indexOf(glGeomItem);\r\n            this.highlightedItems.splice(highlightIndex, 1);\r\n            this.highlightedIdsBufferDirty = true;\r\n        }\r\n        this.emit('updated');\r\n    }\r\n    // ////////////////////////////////////\r\n    // Draw Ids\r\n    // ////////////////////////////////////\r\n    // Instance Ids\r\n    /**\r\n     * The updateDrawIDsBuffer method.\r\n     * @param renderstate - The object used to track state changes during rendering.\r\n     */\r\n    updateDrawIDsBuffer(renderstate) {\r\n        {\r\n            if (!this.drawIdsArray || this.visibleItems.length > this.drawIdsArray.length) {\r\n                this.drawIdsArray = new Float32Array(this.visibleItems.length);\r\n                this.drawElementOffsets = new Int32Array(this.visibleItems.length);\r\n                this.drawElementCounts = new Int32Array(this.visibleItems.length);\r\n            }\r\n            this.visibleItems.forEach((glGeomItem, index) => {\r\n                const offsetAndCount = this.renderer.glGeomLibrary.getGeomOffsetAndCount(glGeomItem.geomId);\r\n                this.drawElementOffsets[index] = offsetAndCount[0];\r\n                this.drawElementCounts[index] = offsetAndCount[1];\r\n                this.drawIdsArray[index] = glGeomItem.drawItemId;\r\n            });\r\n        }\r\n        const gl = this.renderer.gl;\r\n        if (!gl.multiDrawElements) {\r\n            return;\r\n        }\r\n        const unit = renderstate.boundTextures++;\r\n        gl.activeTexture(gl.TEXTURE0 + unit);\r\n        const drawIdsTextureSize = MathFunctions.nextPow2(Math.ceil(Math.sqrt(this.visibleItems.length))) * 2;\r\n        if (!this.drawIdsTexture) {\r\n            this.drawIdsTexture = new GLTexture2D(this.gl, {\r\n                format: gl.name == 'webgl2' ? 'RED' : 'ALPHA',\r\n                type: 'FLOAT',\r\n                width: drawIdsTextureSize,\r\n                height: drawIdsTextureSize,\r\n                filter: 'NEAREST',\r\n                wrap: 'CLAMP_TO_EDGE',\r\n                mipMapped: false,\r\n            });\r\n        }\r\n        else if (this.drawIdsTexture.width < drawIdsTextureSize || this.drawIdsTexture.height < drawIdsTextureSize) {\r\n            this.drawIdsTexture.resize(drawIdsTextureSize, drawIdsTextureSize);\r\n        }\r\n        {\r\n            const tex = this.drawIdsTexture;\r\n            const texWidth = this.drawIdsTexture.width;\r\n            gl.bindTexture(gl.TEXTURE_2D, tex.glTex);\r\n            const level = 0;\r\n            const xoffset = 0;\r\n            const height = 1;\r\n            const format = tex.getFormat();\r\n            const type = tex.getType();\r\n            const rows = Math.ceil((xoffset + this.visibleItems.length) / texWidth);\r\n            let consumed = 0;\r\n            let remaining = this.visibleItems.length;\r\n            let rowStart = xoffset;\r\n            for (let i = 0; i < rows; i++) {\r\n                let width;\r\n                if (rowStart + remaining > texWidth) {\r\n                    width = texWidth - rowStart;\r\n                    rowStart = 0;\r\n                }\r\n                else {\r\n                    width = remaining;\r\n                }\r\n                const x = consumed % texWidth;\r\n                const y = Math.floor(consumed / texWidth);\r\n                const data = this.drawIdsArray.subarray(consumed, consumed + width);\r\n                gl.texSubImage2D(gl.TEXTURE_2D, level, x, y, width, height, format, type, data);\r\n                consumed += width;\r\n                remaining -= width;\r\n            }\r\n        }\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        renderstate.boundTextures--;\r\n        this.drawIdsBufferDirty = false;\r\n    }\r\n    // ////////////////////////////////////\r\n    // Selected Items\r\n    /**\r\n     * The updateHighlightedIDsBuffer method.\r\n     * @param renderstate - The object used to track state changes during rendering.\r\n     */\r\n    updateHighlightedIDsBuffer(renderstate) {\r\n        if (this.highlightedIdsBufferDirty) {\r\n            if (!this.highlightedIdsArray || this.highlightedItems.length > this.highlightedIdsArray.length) {\r\n                this.highlightedIdsArray = new Float32Array(this.highlightedItems.length);\r\n                this.highlightElementOffsets = new Int32Array(this.highlightedItems.length);\r\n                this.highlightElementCounts = new Int32Array(this.highlightedItems.length);\r\n            }\r\n            // Collect all visible geom ids into the instanceIds array.\r\n            // Note: the draw count can be less than the number of instances\r\n            // we re-use the same buffer and simply invoke fewer draw calls.\r\n            this.highlightedItems.forEach((glGeomItem, index) => {\r\n                this.highlightedIdsArray[index] = glGeomItem.drawItemId;\r\n                const offsetAndCount = this.renderer.glGeomLibrary.getGeomOffsetAndCount(glGeomItem.geomId);\r\n                this.highlightElementOffsets[index] = offsetAndCount[0];\r\n                this.highlightElementCounts[index] = offsetAndCount[1];\r\n            });\r\n            for (let i = this.highlightedItems.length; i < this.highlightElementCounts.length; i++) {\r\n                this.highlightElementOffsets[i] = 0;\r\n                this.highlightElementCounts[i] = 0;\r\n            }\r\n            this.highlightedIdsBufferDirty = false;\r\n        }\r\n        const gl = this.renderer.gl;\r\n        if (!gl.multiDrawElements) {\r\n            return;\r\n        }\r\n        const unit = renderstate.boundTextures++;\r\n        gl.activeTexture(gl.TEXTURE0 + unit);\r\n        const highlightIdsTextureSize = MathFunctions.nextPow2(Math.ceil(Math.sqrt(this.highlightedItems.length)));\r\n        if (!this.highlightedIdsTexture) {\r\n            this.highlightedIdsTexture = new GLTexture2D(this.gl, {\r\n                format: gl.name == 'webgl2' ? 'RED' : 'ALPHA',\r\n                type: 'FLOAT',\r\n                width: highlightIdsTextureSize,\r\n                height: highlightIdsTextureSize,\r\n                filter: 'NEAREST',\r\n                wrap: 'CLAMP_TO_EDGE',\r\n                mipMapped: false,\r\n            });\r\n        }\r\n        else if (this.highlightedIdsTexture.width < highlightIdsTextureSize ||\r\n            this.highlightedIdsTexture.height < highlightIdsTextureSize) {\r\n            this.highlightedIdsTexture.resize(highlightIdsTextureSize, highlightIdsTextureSize);\r\n        }\r\n        {\r\n            const tex = this.highlightedIdsTexture;\r\n            const texWidth = this.highlightedIdsTexture.width;\r\n            gl.bindTexture(gl.TEXTURE_2D, tex.glTex);\r\n            const level = 0;\r\n            const xoffset = 0;\r\n            const height = 1;\r\n            const format = tex.getFormat();\r\n            const type = tex.getType();\r\n            const rows = Math.ceil((xoffset + this.highlightedIdsArray.length) / texWidth);\r\n            let consumed = 0;\r\n            let remaining = this.highlightedIdsArray.length;\r\n            let rowStart = xoffset;\r\n            for (let i = 0; i < rows; i++) {\r\n                let width;\r\n                if (rowStart + remaining > texWidth) {\r\n                    width = texWidth - rowStart;\r\n                    rowStart = 0;\r\n                }\r\n                else {\r\n                    width = remaining;\r\n                }\r\n                const x = consumed % texWidth;\r\n                const y = Math.floor(consumed / texWidth);\r\n                const data = this.highlightedIdsArray.subarray(consumed, consumed + width);\r\n                gl.texSubImage2D(gl.TEXTURE_2D, level, x, y, width, height, format, type, data);\r\n                consumed += width;\r\n                remaining -= width;\r\n            }\r\n        }\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        renderstate.boundTextures--;\r\n    }\r\n    // ////////////////////////////////////\r\n    // Drawing\r\n    /**\r\n     * The draw method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    draw(renderstate) {\r\n        if (this.drawIdsBufferDirty) {\r\n            this.updateDrawIDsBuffer(renderstate);\r\n        }\r\n        // Note: updateDrawIDsBuffer first, as this avoids a case where the buffers stay dirty\r\n        // because the last item was removed.\r\n        if (this.visibleItems.length == 0) {\r\n            return;\r\n        }\r\n        if (this.drawIdsTexture) {\r\n            const { drawIdsTexture } = renderstate.unifs;\r\n            this.drawIdsTexture.bindToUniform(renderstate, drawIdsTexture);\r\n        }\r\n        this.bindAndRender(renderstate, this.drawIdsArray, this.drawElementCounts, this.drawElementOffsets, this.visibleItems.length);\r\n    }\r\n    /**\r\n     * The drawHighlighted method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    drawHighlighted(renderstate) {\r\n        if (this.highlightedItems.length == 0) {\r\n            return;\r\n        }\r\n        if (this.highlightedIdsBufferDirty) {\r\n            this.updateHighlightedIDsBuffer(renderstate);\r\n        }\r\n        if (this.highlightedIdsTexture) {\r\n            const { drawIdsTexture } = renderstate.unifs;\r\n            this.highlightedIdsTexture.bindToUniform(renderstate, drawIdsTexture);\r\n        }\r\n        this.bindAndRender(renderstate, this.highlightedIdsArray, this.highlightElementCounts, this.highlightElementOffsets, this.highlightedItems.length);\r\n    }\r\n    /**\r\n     * The bindAndRender method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param counts - the counts for each element drawn in by this draw call.\r\n     * @param offsets - the offsets for each element drawn in by this draw call.\r\n     * @private\r\n     */\r\n    bindAndRender(renderstate, drawIdsArray, counts, offsets, drawCount) {\r\n        const gl = this.gl;\r\n        const unifs = renderstate.unifs;\r\n        // Specify an instanced draw to the shader so it knows how\r\n        // to retrieve the modelmatrix.\r\n        if (unifs.instancedDraw) {\r\n            gl.uniform1i(renderstate.unifs.instancedDraw.location, 1);\r\n        }\r\n        renderstate.bindViewports(unifs, () => {\r\n            this.multiDraw(renderstate, drawIdsArray, counts, offsets, drawCount);\r\n        });\r\n    }\r\n    /**\r\n     * Sorts the drawn items in order furthest to nearest when rendering transparent objects.\r\n     * @param viewPos - The position of the camera that we are sorting relative to.\r\n     */\r\n    sortItems(viewPos) {\r\n        const distances = [];\r\n        const indices = [];\r\n        this.visibleItems.forEach((glGeomItem, index) => {\r\n            if (glGeomItem) {\r\n                const mat4 = glGeomItem.geomItem.geomMatParam.value;\r\n                const dist = mat4.translation.distanceTo(viewPos);\r\n                distances.push(dist);\r\n                indices.push(index);\r\n            }\r\n        });\r\n        indices.sort((a, b) => distances[b] - distances[a]);\r\n        const visibleItems = [];\r\n        const drawElementCounts = new Int32Array(this.drawElementCounts.length);\r\n        const drawElementOffsets = new Int32Array(this.drawElementOffsets.length);\r\n        indices.forEach((tgtIndex, srcIndex) => {\r\n            visibleItems[srcIndex] = this.visibleItems[tgtIndex];\r\n            drawElementCounts[srcIndex] = this.drawElementCounts[tgtIndex];\r\n            drawElementOffsets[srcIndex] = this.drawElementOffsets[tgtIndex];\r\n            this.drawIdsArray[srcIndex] = this.visibleItems[tgtIndex].drawItemId;\r\n        });\r\n        this.visibleItems = visibleItems;\r\n        this.drawElementCounts = drawElementCounts;\r\n        this.drawElementOffsets = drawElementOffsets;\r\n        this.drawIdsBufferDirty = true;\r\n    }\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() {\r\n        if (this.drawIdsTexture) {\r\n            this.drawIdsTexture.destroy();\r\n        }\r\n        if (this.highlightedIdsTexture) {\r\n            this.highlightedIdsTexture.destroy();\r\n        }\r\n        this.emit('destructing');\r\n    }\r\n}\r\nexport { GLGeomItemSetMultiDraw };\r\n//# sourceMappingURL=GLGeomItemSetMultiDraw.js.map","import { GLGeomItemSetMultiDraw } from './GLGeomItemSetMultiDraw';\r\nimport '../../SceneTree/Geometry/Mesh';\r\n/** Class representing a GL mesh.\r\n * @extends GLGeom\r\n * @private\r\n */\r\nclass GLLinesItemSet extends GLGeomItemSetMultiDraw {\r\n    /**\r\n     * Draw an item to screen.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param drawIds - the draw id for each element drawn in by this draw call.\r\n     * @param counts - the geom element count for each element drawn in by this draw call.\r\n     * @param offsets - the geom element offset for each element drawn in by this draw call.\r\n     * @param drawCount - the number of active draw calls for this invocation\r\n     */\r\n    multiDraw(renderstate, drawIds, counts, offsets, drawCount) {\r\n        const gl = this.gl;\r\n        if (gl.multiDrawArrays) {\r\n            const { occluded } = renderstate.unifs;\r\n            if (occluded) {\r\n                gl.uniform1i(occluded.location, 0);\r\n            }\r\n            gl.multiDrawElements(gl.LINES, counts, 0, gl.UNSIGNED_INT, offsets, 0, drawCount);\r\n            if (occluded) {\r\n                gl.uniform1i(occluded.location, 1);\r\n                gl.depthFunc(gl.GREATER);\r\n                gl.multiDrawElements(gl.LINES, counts, 0, gl.UNSIGNED_INT, offsets, 0, drawCount);\r\n                gl.depthFunc(gl.LEQUAL);\r\n            }\r\n        }\r\n        else {\r\n            const { drawId, occluded } = renderstate.unifs;\r\n            if (occluded) {\r\n                gl.uniform1i(occluded.location, 0);\r\n            }\r\n            for (let i = 0; i < drawCount; i++) {\r\n                gl.uniform1i(drawId.location, drawIds[i]);\r\n                gl.drawElements(gl.LINES, counts[i], gl.UNSIGNED_INT, offsets[i]);\r\n            }\r\n            if (occluded) {\r\n                gl.uniform1i(occluded.location, 1);\r\n                gl.depthFunc(gl.GREATER);\r\n                for (let i = 0; i < drawCount; i++) {\r\n                    gl.uniform1i(drawId.location, drawIds[i]);\r\n                    gl.drawElements(gl.LINES, counts[i], gl.UNSIGNED_INT, offsets[i]);\r\n                }\r\n                gl.depthFunc(gl.LEQUAL);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport { GLLinesItemSet };\r\n//# sourceMappingURL=GLLinesItemSet.js.map","import { GLGeomItemSetMultiDraw } from './GLGeomItemSetMultiDraw';\r\nimport '../../SceneTree/Geometry/Mesh';\r\n/** Class representing a GL mesh.\r\n * @extends GLGeom\r\n * @private\r\n */\r\nclass GLPointsItemSet extends GLGeomItemSetMultiDraw {\r\n    /**\r\n     * Draw an item to screen.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param drawIds - the draw id for each element drawn in by this draw call.\r\n     * @param counts - the geom element count for each element drawn in by this draw call.\r\n     * @param offsets - the geom element offset for each element drawn in by this draw call.\r\n     * @param drawCount - the number of active draw calls for this invocation\r\n     */\r\n    multiDraw(renderstate, drawIds, counts, offsets, drawCount) {\r\n        const gl = this.gl;\r\n        if (gl.multiDrawArrays) {\r\n            gl.multiDrawArrays(gl.POINTS, offsets, 0, counts, 0, drawCount);\r\n        }\r\n        else {\r\n            const { drawId } = renderstate.unifs;\r\n            for (let i = 0; i < drawCount; i++) {\r\n                gl.uniform1i(drawId.location, drawIds[i]);\r\n                gl.drawArrays(gl.TRIANGLES, offsets[i], counts[i]);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport { GLPointsItemSet };\r\n//# sourceMappingURL=GLPointsItemSet.js.map","import { GLGeomItemSetMultiDraw } from './GLGeomItemSetMultiDraw';\r\nimport '../../SceneTree/Geometry/Mesh';\r\n/** Class representing a GL mesh.\r\n * @extends GLGeom\r\n * @private\r\n */\r\nclass GLMeshItemSet extends GLGeomItemSetMultiDraw {\r\n    /**\r\n     * Draw an item to screen.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param drawIds - the draw id for each element drawn in by this draw call.\r\n     * @param counts - the geom element count for each element drawn in by this draw call.\r\n     * @param offsets - the geom element offset for each element drawn in by this draw call.\r\n     * @param drawCount - the number of active draw calls for this invocation\r\n     */\r\n    multiDraw(renderstate, drawIds, counts, offsets, drawCount) {\r\n        const gl = this.gl;\r\n        if (gl.multiDrawElements) {\r\n            gl.multiDrawElements(gl.TRIANGLES, counts, 0, gl.UNSIGNED_INT, offsets, 0, drawCount);\r\n        }\r\n        else {\r\n            const { drawId } = renderstate.unifs;\r\n            for (let i = 0; i < drawCount; i++) {\r\n                gl.uniform1i(drawId.location, drawIds[i]);\r\n                gl.drawElements(gl.TRIANGLES, counts[i], gl.UNSIGNED_INT, offsets[i]);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport { GLMeshItemSet };\r\n//# sourceMappingURL=GLMeshItemSet.js.map","/* eslint-disable guard-for-in */\r\nimport { EventEmitter } from '../../Utilities/index';\r\nimport { Points, Lines, Mesh, PointsProxy, LinesProxy, MeshProxy } from '../../SceneTree/index';\r\nimport { GLLinesItemSet } from './GLLinesItemSet';\r\nimport { GLPointsItemSet } from './GLPointsItemSet';\r\nimport { GLMeshItemSet } from './GLMeshItemSet';\r\n/** Class representing GL shader materials.\r\n * @private\r\n */\r\nclass GLShaderGeomSets extends EventEmitter {\r\n    /**\r\n     * Create a GL shader material.\r\n     * @param pass - The pass that owns this object.\r\n     * @param gl - The glShader value.\r\n     * @param shaders - The shader value.\r\n     */\r\n    constructor(pass, gl, shaders) {\r\n        super();\r\n        this.glGeomDataShaderKey = '';\r\n        this.glHighlightShaderKey = '';\r\n        this.pass = pass;\r\n        this.gl = gl;\r\n        // this.shaderAttrSpec = {}\r\n        this.glShader = shaders.glShader;\r\n        this.glGeomDataShader = shaders.glgeomdatashader ? shaders.glgeomdatashader : shaders.glShader;\r\n        this.glHighlightShader = shaders.glselectedshader ? shaders.glselectedshader : shaders.glShader;\r\n        this.glGeomItemSets = {};\r\n        this.glShaderKey = shaders.glShader.getId() + 'multidraw-draw';\r\n        if (this.glGeomDataShader)\r\n            this.glGeomDataShaderKey = this.glGeomDataShader.getId() + 'multidraw-geomdata';\r\n        if (this.glHighlightShader)\r\n            this.glHighlightShaderKey = this.glHighlightShader.getId() + 'multidraw-highlight';\r\n    }\r\n    /**\r\n     * Given a GeomItem, constructs the GLGeomItemSet that handles drawing that type of geometry.\r\n     * @param geom - The geomitem value.\r\n     * @return - The return value.\r\n     * */\r\n    getOrCreateGLGeomItemSet(geom) {\r\n        let glGeomItemSet;\r\n        if (geom instanceof Mesh || geom instanceof MeshProxy) {\r\n            if (this.glGeomItemSets['GLMesh'])\r\n                return this.glGeomItemSets['GLMesh'];\r\n            glGeomItemSet = new GLMeshItemSet(this.pass.renderer);\r\n            this.glGeomItemSets['GLMesh'] = glGeomItemSet;\r\n        }\r\n        else if (geom instanceof Lines || geom instanceof LinesProxy) {\r\n            if (this.glGeomItemSets['GLLines'])\r\n                return this.glGeomItemSets['GLLines'];\r\n            glGeomItemSet = new GLLinesItemSet(this.pass.renderer);\r\n            this.glGeomItemSets['GLLines'] = glGeomItemSet;\r\n        }\r\n        else if (geom instanceof Points || geom instanceof PointsProxy) {\r\n            if (this.glGeomItemSets['GLPoints'])\r\n                return this.glGeomItemSets['GLPoints'];\r\n            glGeomItemSet = new GLPointsItemSet(this.pass.renderer);\r\n            this.glGeomItemSets['GLPoints'] = glGeomItemSet;\r\n        }\r\n        else {\r\n            throw new Error('Unsupported geom type:' + geom.constructor.name);\r\n        }\r\n        glGeomItemSet.on('updated', () => {\r\n            this.emit('updated');\r\n        });\r\n        return glGeomItemSet;\r\n    }\r\n    /**\r\n     * The addGLGeomItem method.\r\n     * @param glGeomItem - The glGeomItem value.\r\n     */\r\n    addGLGeomItem(glGeomItem) {\r\n        const geomItem = glGeomItem.geomItem;\r\n        const geom = geomItem.geomParam.value;\r\n        const material = glGeomItem.geomItem.materialParam.value;\r\n        const geomItemParamChanged = () => {\r\n            this.pass.removeGeomItem(geomItem);\r\n            this.pass.renderer.assignTreeItemToGLPass(geomItem);\r\n        };\r\n        material.on('transparencyChanged', geomItemParamChanged);\r\n        geomItem.materialParam.on('valueChanged', geomItemParamChanged);\r\n        geomItem.geomParam.on('valueChanged', geomItemParamChanged);\r\n        const glGeomItemSet = this.getOrCreateGLGeomItemSet(geom);\r\n        glGeomItem.material = material;\r\n        glGeomItem.GLGeomItemSet = glGeomItemSet;\r\n        glGeomItem.geomItemParamChanged = geomItemParamChanged;\r\n        glGeomItemSet.addGLGeomItem(glGeomItem);\r\n    }\r\n    /**\r\n     *  Called by the GLPass to remove an item from this GLShaderGeomSets object.\r\n     * @param glGeomItem - The glGeomItem value.\r\n     */\r\n    removeGLGeomItem(glGeomItem) {\r\n        const geomItem = glGeomItem.geomItem;\r\n        const material = glGeomItem.material;\r\n        const geomItemParamChanged = glGeomItem.geomItemParamChanged;\r\n        material.off('transparencyChanged', geomItemParamChanged);\r\n        geomItem.materialParam.off('valueChanged', geomItemParamChanged);\r\n        geomItem.geomParam.off('valueChanged', geomItemParamChanged);\r\n        glGeomItem.material = null;\r\n        glGeomItem.geomItemParamChanged = null;\r\n        const glGeomItemSet = glGeomItem.GLGeomItemSet;\r\n        glGeomItemSet.removeGLGeomItem(glGeomItem);\r\n        glGeomItem.GLGeomItemSet = null;\r\n    }\r\n    /**\r\n     * Binds one of its shaders for rendering, and also the other textures and values needed.\r\n     * @param glShader - The shader to bind\r\n     * @param renderstate - The render state for the current draw traversal\r\n     * @param key - The key to use to cache the shader binding.\r\n     * @private\r\n     */\r\n    bindShader(glShader, renderstate, key) {\r\n        const gl = this.gl;\r\n        if (!glShader.isCompiledForTarget(key)) {\r\n            if (gl.multiDrawElements) {\r\n                renderstate.shaderopts.directives.push('#define ENABLE_MULTI_DRAW\\n#extension GL_ANGLE_multi_draw : enable');\r\n            }\r\n            else {\r\n                renderstate.shaderopts.directives.push('#define ENABLE_MULTI_DRAW');\r\n            }\r\n            glShader.compileForTarget(key, renderstate.shaderopts);\r\n            renderstate.shaderopts.directives.pop();\r\n        }\r\n        if (!glShader.bind(renderstate, key)) {\r\n            throw new Error('Unable to bind shader:' + glShader);\r\n        }\r\n        this.pass.renderer.glGeomItemLibrary.bind(renderstate);\r\n        this.pass.renderer.glGeomLibrary.bind(renderstate);\r\n        this.pass.renderer.glMaterialLibrary.bind(renderstate);\r\n    }\r\n    /**\r\n     * Draws all elements, binding the shader and continuing into the GLGLGeomSetGeomItemSets\r\n     * @param renderstate - The render state for the current draw traversal\r\n     */\r\n    draw(renderstate) {\r\n        this.bindShader(this.glShader, renderstate, this.glShaderKey);\r\n        for (const elementType in this.glGeomItemSets) {\r\n            this.glGeomItemSets[elementType].draw(renderstate);\r\n        }\r\n        this.glShader.unbind(renderstate);\r\n    }\r\n    /**\r\n     * The drawHighlightedGeoms method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    drawHighlightedGeoms(renderstate) {\r\n        if (!this.glHighlightShader)\r\n            return;\r\n        this.bindShader(this.glHighlightShader, renderstate, this.glHighlightShaderKey);\r\n        for (const elementType in this.glGeomItemSets) {\r\n            this.glGeomItemSets[elementType].drawHighlighted(renderstate);\r\n        }\r\n        this.glHighlightShader.unbind(renderstate);\r\n    }\r\n    /**\r\n     * The drawGeomData method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    drawGeomData(renderstate) {\r\n        this.bindShader(this.glGeomDataShader, renderstate, this.glGeomDataShaderKey);\r\n        const gl = renderstate.gl;\r\n        const { floatGeomBuffer, passId } = renderstate.unifs;\r\n        if (floatGeomBuffer) {\r\n            gl.uniform1i(floatGeomBuffer.location, renderstate.floatGeomBuffer ? 1 : 0);\r\n        }\r\n        if (passId) {\r\n            gl.uniform1i(passId.location, renderstate.passIndex);\r\n        }\r\n        for (const elementType in this.glGeomItemSets) {\r\n            this.glGeomItemSets[elementType].draw(renderstate);\r\n        }\r\n        this.glGeomDataShader.unbind(renderstate);\r\n    }\r\n    /**\r\n     * Sorts the drawn items in order furthest to nearest when rendering transparent objects.\r\n     * @param viewPos - The position of the camera that we are sorting relative to.\r\n     */\r\n    sortItems(viewPos) {\r\n        // Note: sorting here will not sort geometries of different types.\r\n        // this is a flawed solution that only sorts geomemtries of the same\r\n        // time and same shader against each other. Given that this is the data 99% o\r\n        // of the time, this is an acceptable tradeoff\r\n        for (const elementType in this.glGeomItemSets) {\r\n            this.glGeomItemSets[elementType].sortItems(viewPos);\r\n        }\r\n    }\r\n}\r\nexport { GLShaderGeomSets };\r\n//# sourceMappingURL=GLShaderGeomSets.js.map","import { PassType } from './GLPass';\r\nimport { GLStandardGeomsPass } from './GLStandardGeomsPass';\r\nimport { GLRenderer } from '../GLRenderer';\r\nimport { GLShaderMaterials } from '../Drawing/GLShaderMaterials';\r\nimport { GLShaderGeomSets } from '../Drawing/GLShaderGeomSets';\r\n/** Class representing a GL opaque geoms pass.\r\n * @extends GLStandardGeomsPass\r\n * @private\r\n */\r\nclass GLOpaqueGeomsPass extends GLStandardGeomsPass {\r\n    /**\r\n     * Create a GL opaque geoms pass.\r\n     */\r\n    constructor() {\r\n        super();\r\n        // Optimized Render Tree\r\n        // Structured like so for efficient render traversial.\r\n        // {GLShaders}[GLMaterials][GLGeoms][GLGeomItems]\r\n        this.__glshadermaterials = {};\r\n        this.__glShaderGeomSets = {};\r\n    }\r\n    /**\r\n     * The init method.\r\n     * @param renderer - The renderer value.\r\n     * @param passIndex - The index of the pass in the GLBAseRenderer\r\n     */\r\n    init(renderer, passIndex) {\r\n        super.init(renderer, passIndex);\r\n    }\r\n    /**\r\n     * Returns the pass type. OPAQUE passes are always rendered first, followed by TRANSPARENT passes, and finally OVERLAY.\r\n     * @return - The pass type value.\r\n     */\r\n    getPassType() {\r\n        return PassType.OPAQUE;\r\n    }\r\n    // ///////////////////////////////////\r\n    // Bind to Render Tree\r\n    /**\r\n     * The filterGeomItem method.\r\n     * @param geomItem - The geomItem value.\r\n     * @return - The return value.\r\n     */\r\n    filterGeomItem(geomItem) {\r\n        const material = geomItem.materialParam.value;\r\n        return this.checkMaterial(material);\r\n    }\r\n    /**\r\n     * Checks the material to see if it is not transparent.\r\n     * @param material - The geomItem value.\r\n     * @return - The return value.\r\n     */\r\n    checkMaterial(material) {\r\n        return !material.isTransparent();\r\n    }\r\n    /**\r\n     * Removes the GeomITem from this pass, and then asks the renderer to re-add it.\r\n     * @param geomItem - The geomItem value.\r\n     */\r\n    removeAndReAddGeomItem(geomItem) {\r\n        this.removeGeomItem(geomItem);\r\n        this.__renderer.assignTreeItemToGLPass(geomItem);\r\n    }\r\n    /**\r\n     * The addGeomItem method.\r\n     * @param geomItem - The geomItem value.\r\n     * @return - The return value.\r\n     */\r\n    addGeomItem(geomItem) {\r\n        const materialParam = geomItem.materialParam;\r\n        const material = materialParam.value;\r\n        const glGeomLibrary = this.renderer.glGeomLibrary;\r\n        const glGeomItemLibrary = this.renderer.glGeomItemLibrary;\r\n        if (!material.isTextured()) {\r\n            if (material.getShaderClass().supportsInstancing()) {\r\n                const shaderName = material.getShaderName();\r\n                let glShaderGeomSets = this.__glShaderGeomSets[shaderName];\r\n                if (!glShaderGeomSets) {\r\n                    const shaders = this.constructShaders(shaderName);\r\n                    glShaderGeomSets = new GLShaderGeomSets(this, this.__gl, shaders);\r\n                    glShaderGeomSets.on('updated', () => {\r\n                        this.__renderer.requestRedraw();\r\n                    });\r\n                    this.__glShaderGeomSets[shaderName] = glShaderGeomSets;\r\n                }\r\n                // const glGeomItem = this.constructGLGeomItem(geomItem)\r\n                const glGeomItem = this.renderer.glGeomItemLibrary.getGLGeomItem(geomItem);\r\n                glShaderGeomSets.addGLGeomItem(glGeomItem);\r\n                glGeomItem.GLShaderGeomSets = glShaderGeomSets;\r\n                this.emit('updated');\r\n                return true;\r\n            }\r\n        }\r\n        const glGeom = glGeomLibrary.constructGLGeom(geomItem.geomParam.value);\r\n        const glGeomItem = glGeomItemLibrary.getGLGeomItem(geomItem);\r\n        // ////////////////////////////////////\r\n        // Tracking Material Transparency changes...\r\n        // In the case that a geometry material changes, we may need to\r\n        // select a different pass. e.g. if the new material is transparent.\r\n        const materialChanged = () => {\r\n            this.removeGeomItem(geomItem);\r\n            this.__renderer.assignTreeItemToGLPass(geomItem);\r\n        };\r\n        materialParam.on('valueChanged', materialChanged);\r\n        glGeomItem.materialChanged = materialChanged;\r\n        // ////////////////////////////////////\r\n        // Shaders\r\n        const shaderName = material.getShaderName();\r\n        const glMaterial = this.renderer.glMaterialLibrary.getGLMaterial(material);\r\n        let glshaderMaterials = this.__glshadermaterials[shaderName];\r\n        if (!glshaderMaterials) {\r\n            const shaders = this.constructShaders(shaderName);\r\n            glshaderMaterials = new GLShaderMaterials(this.__gl, this, shaders);\r\n            this.__glshadermaterials[shaderName] = glshaderMaterials;\r\n            glshaderMaterials.on('updated', () => {\r\n                this.__renderer.requestRedraw();\r\n            });\r\n        }\r\n        glshaderMaterials.addGLGeomItem(glGeomItem, glGeom, glMaterial);\r\n        return true;\r\n    }\r\n    /**\r\n     * The removeGeomItem method.\r\n     * @param geomItem - The geomItem value.\r\n     * @return - The return value.\r\n     */\r\n    removeGeomItem(geomItem) {\r\n        const glGeomItem = this.renderer.glGeomItemLibrary.getGLGeomItem(geomItem);\r\n        if (glGeomItem.GLShaderGeomSets) {\r\n            const glShaderGeomSets = glGeomItem.GLShaderGeomSets;\r\n            glShaderGeomSets.removeGLGeomItem(glGeomItem);\r\n            glGeomItem.GLShaderGeomSets = null;\r\n            return true;\r\n        }\r\n        const materialParam = geomItem.materialParam;\r\n        const materialChanged = glGeomItem.materialChanged;\r\n        if (materialParam && materialChanged) {\r\n            materialParam.off('valueChanged', materialChanged);\r\n            glGeomItem.materialChanged = null;\r\n        }\r\n        if (glGeomItem.GLGeomItemSet) {\r\n            const glGeomItemSet = glGeomItem.GLGeomItemSet;\r\n            glGeomItemSet.removeGLGeomItem(glGeomItem);\r\n            glGeomItem.GLGeomItemSet = null;\r\n            return true;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * The removeMaterial method.\r\n     * @param material - The material value.\r\n     */\r\n    removeMaterial(material) {\r\n        const shaderName = material.getShaderName();\r\n        const glshaderMaterials = this.__glshadermaterials[shaderName];\r\n        if (!glshaderMaterials || glshaderMaterials != material.getMetadata('glshaderMaterials')) {\r\n            console.warn('Material not found in pass');\r\n            return;\r\n        }\r\n        const glMaterialGeomItemSets = material.getMetadata('glMaterialGeomItemSets');\r\n        glshaderMaterials.removeMaterialGeomItemSets(glMaterialGeomItemSets);\r\n    }\r\n    /**\r\n     * The __traverseTreeAndDraw method.\r\n     * @param renderstate - The renderstate value.\r\n     * @private\r\n     */\r\n    __traverseTreeAndDraw(renderstate) {\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const shaderName in this.__glShaderGeomSets) {\r\n            this.__glShaderGeomSets[shaderName].draw(renderstate);\r\n        }\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const shaderName in this.__glshadermaterials) {\r\n            this.__glshadermaterials[shaderName].draw(renderstate);\r\n        }\r\n        if (renderstate.glGeom) {\r\n            renderstate.glGeom.unbind(renderstate);\r\n        }\r\n    }\r\n    /**\r\n     * The draw method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    draw(renderstate) {\r\n        const gl = this.__gl;\r\n        gl.disable(gl.BLEND);\r\n        // Note: our zcad files can contain surfaces with flipped normals.\r\n        // This is due to re-using geoms on various sides of a mesh, while applying\r\n        // a -1 scale on one of the axes to flip. We need 2-sided rendering enabled\r\n        // by default.\r\n        if (true) {\r\n            // 2-sided rendering.\r\n            gl.disable(gl.CULL_FACE);\r\n        }\r\n        else {\r\n            gl.enable(gl.CULL_FACE);\r\n            gl.cullFace(gl.BACK);\r\n        }\r\n        gl.enable(gl.DEPTH_TEST);\r\n        gl.depthFunc(gl.LEQUAL);\r\n        gl.depthMask(true);\r\n        this.__traverseTreeAndDraw(renderstate);\r\n        renderstate.viewport.drawSilhouettes(renderstate);\r\n    }\r\n    /**\r\n     * The drawHighlightedGeoms method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    drawHighlightedGeoms(renderstate) {\r\n        const gl = this.__gl;\r\n        gl.disable(gl.CULL_FACE); // 2-sided rendering.\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const shaderName in this.__glShaderGeomSets) {\r\n            this.__glShaderGeomSets[shaderName].drawHighlightedGeoms(renderstate);\r\n        }\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const shaderName in this.__glshadermaterials) {\r\n            const glshaderMaterials = this.__glshadermaterials[shaderName];\r\n            glshaderMaterials.drawHighlightedGeoms(renderstate);\r\n        }\r\n        if (renderstate.glGeom) {\r\n            renderstate.glGeom.unbind(renderstate);\r\n        }\r\n    }\r\n    /**\r\n     * The drawGeomData method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    drawGeomData(renderstate) {\r\n        renderstate.passIndex = this.passIndex;\r\n        const gl = this.__gl;\r\n        gl.disable(gl.BLEND);\r\n        gl.disable(gl.CULL_FACE);\r\n        gl.enable(gl.DEPTH_TEST);\r\n        gl.depthFunc(gl.LEQUAL);\r\n        gl.depthMask(true);\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const shaderName in this.__glShaderGeomSets) {\r\n            this.__glShaderGeomSets[shaderName].drawGeomData(renderstate);\r\n        }\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const shaderName in this.__glshadermaterials) {\r\n            const glshaderMaterials = this.__glshadermaterials[shaderName];\r\n            glshaderMaterials.drawGeomData(renderstate);\r\n        }\r\n        if (renderstate.glGeom) {\r\n            renderstate.glGeom.unbind(renderstate);\r\n        }\r\n    }\r\n}\r\nGLRenderer.registerPass(GLOpaqueGeomsPass, PassType.OPAQUE);\r\nexport { GLOpaqueGeomsPass };\r\n//# sourceMappingURL=GLOpaqueGeomsPass.js.map","/* eslint-disable require-jsdoc */\r\nimport { GLShader } from '../GLShader';\r\nimport './GLSL/index';\r\n// @ts-ignore\r\nimport vert from './FattenLines.vert';\r\n// @ts-ignore\r\nimport frag from './FattenLines.frag';\r\nclass FattenLinesShader extends GLShader {\r\n    /**\r\n     * Create a GL shader.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'FattenLinesShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n        this.setShaderStage('FRAGMENT_SHADER', frag);\r\n    }\r\n}\r\nexport { FattenLinesShader };\r\n//# sourceMappingURL=FattenLinesShader.js.map","import { PassType } from './GLPass';\r\nimport { GLOpaqueGeomsPass } from './GLOpaqueGeomsPass';\r\nimport { GLRenderer } from '../GLRenderer';\r\nimport { GLTexture2D } from '../GLTexture2D';\r\nimport { Lines, LinesProxy, Points, PointsProxy } from '../../SceneTree/index';\r\nimport { FattenLinesShader } from '../Shaders/FattenLinesShader';\r\nimport { Plane } from '../../SceneTree/index';\r\nimport { GLMesh } from '../Drawing/GLMesh';\r\n/** Class representing a GL opaque geoms pass.\r\n * @extends GLOpaqueGeomsPass\r\n * @private\r\n */\r\nclass GLLinesPass extends GLOpaqueGeomsPass {\r\n    /**\r\n     * Create a GL opaque geoms pass.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.linesGeomDataBuffer = null;\r\n        this.fattenLinesShader = null;\r\n        this.quad = null;\r\n        this.fbo = null;\r\n    }\r\n    /**\r\n     * The init method.\r\n     * @param renderer - The renderer value.\r\n     * @param passIndex - The index of the pass in the GLBAseRenderer\r\n     */\r\n    init(renderer, passIndex) {\r\n        super.init(renderer, passIndex);\r\n    }\r\n    /**\r\n     * The filterGeomItem method.\r\n     * @param geomItem - The geomItem value.\r\n     * @return - The return value.\r\n     */\r\n    filterGeomItem(geomItem) {\r\n        const geom = geomItem.geomParam.value;\r\n        if (geom instanceof Lines || geom instanceof LinesProxy || geom instanceof Points || geom instanceof PointsProxy) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * The __checkFramebuffer method.\r\n     * @private\r\n     */\r\n    __checkFramebuffer(width, height) {\r\n        const gl = this.__gl;\r\n        let check;\r\n        if (gl.name == 'webgl2')\r\n            check = gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER);\r\n        else\r\n            check = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n        if (check !== gl.FRAMEBUFFER_COMPLETE) {\r\n            gl.bindTexture(gl.TEXTURE_2D, null);\r\n            if (gl.name == 'webgl2')\r\n                gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\r\n            else\r\n                gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n            console.warn('Error creating Fbo width:', width, ', height:', height);\r\n            switch (check) {\r\n                case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\r\n                    throw new Error('The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.');\r\n                case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\r\n                    throw new Error('There is no attachment.');\r\n                case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\r\n                    throw new Error('Height and width of the attachment are not the same.');\r\n                case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\r\n                    throw new Error('The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.');\r\n                case 36061: // gl.GL_FRAMEBUFFER_UNSUPPORTED:\r\n                    throw new Error('The framebuffer is unsupported');\r\n                default:\r\n                    throw new Error('Incomplete Frambuffer');\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * The draw method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    draw(renderstate) {\r\n        const gl = this.__gl;\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        gl.enable(gl.DEPTH_TEST);\r\n        gl.depthFunc(gl.LEQUAL);\r\n        gl.depthMask(true);\r\n        this.__traverseTreeAndDraw(renderstate);\r\n        gl.disable(gl.BLEND);\r\n    }\r\n    /**\r\n     * The drawGeomData method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    drawGeomData(renderstate) {\r\n        const gl = this.__gl;\r\n        //  Note: lines in VR are not fattened...\r\n        if (renderstate.geomDataFbo) {\r\n            if (!this.linesGeomDataBuffer) {\r\n                this.linesGeomDataBuffer = new GLTexture2D(gl, {\r\n                    type: this.__renderer.floatGeomBuffer ? 'FLOAT' : 'UNSIGNED_BYTE',\r\n                    format: 'RGBA',\r\n                    filter: 'NEAREST',\r\n                    width: 1,\r\n                    height: 2,\r\n                });\r\n                this.fattenLinesShader = new FattenLinesShader(gl);\r\n                this.quad = new GLMesh(gl, new Plane(1, 1));\r\n            }\r\n            const geomDataFbo = renderstate.geomDataFbo;\r\n            const width = geomDataFbo.width;\r\n            const height = geomDataFbo.height;\r\n            if (this.linesGeomDataBuffer.width != width || this.linesGeomDataBuffer.height != height) {\r\n                if (this.fbo) {\r\n                    gl.deleteFramebuffer(this.fbo);\r\n                    this.fbo = null;\r\n                }\r\n                this.linesGeomDataBuffer.resize(width, height);\r\n                this.fbo = gl.createFramebuffer();\r\n                const colorTex = this.linesGeomDataBuffer.glTex;\r\n                const depthBuffer = geomDataFbo.__depthTexture; // Share the existing depth buffer.\r\n                if (gl.name == 'webgl2') {\r\n                    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.fbo);\r\n                    gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, colorTex, 0);\r\n                    gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthBuffer, 0);\r\n                }\r\n                else {\r\n                    gl.bindFramebuffer(gl.FRAMEBUFFER, this.fbo);\r\n                    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, colorTex, 0);\r\n                    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthBuffer, 0);\r\n                }\r\n                this.__checkFramebuffer(width, height);\r\n            }\r\n            else {\r\n                if (gl.name == 'webgl2')\r\n                    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.fbo);\r\n                else\r\n                    gl.bindFramebuffer(gl.FRAMEBUFFER, this.fbo);\r\n            }\r\n            gl.colorMask(true, true, true, true);\r\n            gl.clearColor(0, 0, 0, 0);\r\n            gl.clear(gl.COLOR_BUFFER_BIT);\r\n        }\r\n        super.drawGeomData(renderstate);\r\n        if (renderstate.geomDataFbo) {\r\n            renderstate.geomDataFbo.bindForWriting(renderstate);\r\n            this.fattenLinesShader.bind(renderstate);\r\n            const { colorTexture, screenSize } = renderstate.unifs;\r\n            this.linesGeomDataBuffer.bindToUniform(renderstate, colorTexture);\r\n            const geomDataFbo = renderstate.geomDataFbo;\r\n            gl.uniform2f(screenSize.location, geomDataFbo.width, geomDataFbo.height);\r\n            this.quad.bindAndDraw(renderstate);\r\n        }\r\n    }\r\n}\r\nGLRenderer.registerPass(GLLinesPass, PassType.OPAQUE);\r\nexport { GLLinesPass };\r\n//# sourceMappingURL=GLLinesPass.js.map","import { Vec3 } from '../../Math/Vec3';\r\nimport { PassType } from './GLPass';\r\nimport { Points, Lines, PointsProxy, LinesProxy } from '../../SceneTree/index';\r\nimport { GLStandardGeomsPass } from './GLStandardGeomsPass';\r\nimport { GLRenderer } from '../GLRenderer';\r\nimport { GLShaderGeomSets } from '../Drawing/GLShaderGeomSets';\r\n/** Class representing a GL transparent geoms pass.\r\n * @extends GLStandardGeomsPass\r\n * @private\r\n */\r\nclass GLTransparentGeomsPass extends GLStandardGeomsPass {\r\n    /**\r\n     * Create GL transparent geoms pass.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.listenerIDs = {};\r\n        this.itemCount = 0;\r\n        this.__glShaderGeomSets = {}; // GLShaderGeomSets\r\n        this.transparentItems = [];\r\n        this.transparentItemIndices = {};\r\n        this.freeList = [];\r\n        this.visibleItems = [];\r\n        this.prevSortCameraPos = new Vec3();\r\n        this.sortCameraMovementDistance = 0; // meters\r\n        this.reSort = false;\r\n    }\r\n    /**\r\n     * The init method.\r\n     * @param renderer - The renderer value.\r\n     * @param passIndex - The index of the pass in the GLBAseRenderer\r\n     */\r\n    init(renderer, passIndex) {\r\n        super.init(renderer, passIndex);\r\n        this.itemCount = 0;\r\n        this.__glShaderGeomSets = {};\r\n        this.transparentItems = [];\r\n        this.transparentItemIndices = {};\r\n        this.freeList = [];\r\n        this.visibleItems = [];\r\n        this.prevSortCameraPos = new Vec3(999, 999, 999);\r\n        this.sortCameraMovementDistance = 0.25; // meters\r\n        this.reSort = false;\r\n    }\r\n    /**\r\n     * Returns the pass type. OPAQUE passes are always rendered first, followed by TRANSPARENT passes, and finally OVERLAY.\r\n     * @return - The pass type value.\r\n     */\r\n    getPassType() {\r\n        return PassType.TRANSPARENT;\r\n    }\r\n    /**\r\n     * The init method.\r\n     * @param geomItem - The geomItem value.\r\n     * @return - The return value.\r\n     */\r\n    filterGeomItem(geomItem) {\r\n        const geom = geomItem.geomParam.value;\r\n        if (geom instanceof Lines || geom instanceof Points || geom instanceof PointsProxy || geom instanceof LinesProxy)\r\n            return false;\r\n        const material = geomItem.materialParam.value;\r\n        return material.isTransparent();\r\n    }\r\n    /**\r\n     * When an item visibility changes, we trigger this method, as new items become visible\r\n     */\r\n    resortNeeded() {\r\n        this.reSort = true;\r\n    }\r\n    /**\r\n     * The addGeomItem method.\r\n     * @param geomItem - The geomItem value.\r\n     */\r\n    addGeomItem(geomItem) {\r\n        this.itemCount++;\r\n        const listenerIDs = {};\r\n        this.listenerIDs[geomItem.getId()] = listenerIDs;\r\n        const materialParam = geomItem.materialParam;\r\n        const material = materialParam.value;\r\n        const shaderName = material.getShaderName();\r\n        const shaders = this.constructShaders(shaderName);\r\n        if (!material.isTextured()) {\r\n            if (material.getShaderClass().supportsInstancing()) {\r\n                let glShaderGeomSets = this.__glShaderGeomSets[shaderName];\r\n                if (!glShaderGeomSets) {\r\n                    glShaderGeomSets = new GLShaderGeomSets(this, this.__gl, shaders);\r\n                    glShaderGeomSets.on('updated', () => {\r\n                        this.renderer.requestRedraw();\r\n                    });\r\n                    this.__glShaderGeomSets[shaderName] = glShaderGeomSets;\r\n                }\r\n                const glGeomItem = this.renderer.glGeomItemLibrary.getGLGeomItem(geomItem);\r\n                glShaderGeomSets.addGLGeomItem(glGeomItem);\r\n                listenerIDs['glGeomItem.visibilityChanged'] = glGeomItem.on('visibilityChanged', () => {\r\n                    this.resortNeeded();\r\n                });\r\n                this.emit('updated');\r\n                glGeomItem.GLShaderGeomSets = glShaderGeomSets;\r\n                // force a reSort.\r\n                this.reSort = true;\r\n                return;\r\n            }\r\n        }\r\n        const glGeom = this.renderer.glGeomLibrary.constructGLGeom(geomItem.geomParam.value);\r\n        // const glGeomItem = this.constructGLGeomItem(geomItem)\r\n        const glGeomItem = this.renderer.glGeomItemLibrary.getGLGeomItem(geomItem);\r\n        if (!glGeomItem)\r\n            throw new Error('glGeomItem not found for geomItem:' + geomItem.getName());\r\n        // @todo - make sure we remove materials and GeomItems from the base pass.\r\n        // This code will leak memory for these classes as we are not cleaning them up.\r\n        const glMaterial = this.renderer.glMaterialLibrary.getGLMaterial(material);\r\n        // ////////////////////////////////////\r\n        // Tracking Material Transparency changes...\r\n        // In the case that a geometry material changes, we may need to\r\n        // select a different pass. e.g. if the new material is not transparent\r\n        // then the object moves to the OpaqueGeomsPass\r\n        const materialChanged = () => {\r\n            material.removeListenerById('valueChanged', listenerIDs['material.valueChanged']);\r\n            material.removeListenerById('transparencyChanged', listenerIDs['material.transparencyChanged']);\r\n            materialParam.removeListenerById('valueChanged', listenerIDs['materialParam.valueChanged']);\r\n            this.removeGeomItem(geomItem);\r\n            this.renderer.assignTreeItemToGLPass(geomItem);\r\n        };\r\n        listenerIDs['material.valueChanged'] = material.on('valueChanged', materialChanged);\r\n        listenerIDs['material.transparencyChanged'] = material.on('transparencyChanged', materialChanged);\r\n        listenerIDs['materialParam.valueChanged'] = materialParam.on('valueChanged', materialChanged);\r\n        // ////////////////////////////////////\r\n        // Tracking visibility changes.\r\n        const visibilityChanged = (event) => {\r\n            if (event.visible) {\r\n                this.visibleItems.push(item);\r\n            }\r\n            else {\r\n                const index = this.visibleItems.indexOf(item);\r\n                this.visibleItems.splice(index, 1);\r\n            }\r\n            this.reSort = true;\r\n        };\r\n        listenerIDs['glGeomItem.visibilityChanged'] = glGeomItem.on('visibilityChanged', visibilityChanged);\r\n        // ////////////////////////////////////\r\n        // Tracking GeomMat changes.\r\n        listenerIDs['GeomMat.valueChanged'] = geomItem.geomMatParam.on('valueChanged', () => {\r\n            this.reSort = true;\r\n        });\r\n        const item = {\r\n            geomItem,\r\n            shaders,\r\n            glGeom,\r\n            glMaterial,\r\n            glGeomItem,\r\n            material,\r\n        };\r\n        let itemindex;\r\n        if (this.freeList.length > 0)\r\n            itemindex = this.freeList.pop();\r\n        else\r\n            itemindex = this.transparentItems.length;\r\n        this.transparentItems[itemindex] = item;\r\n        this.transparentItemIndices[geomItem.getId()] = itemindex;\r\n        if (geomItem.isVisible()) {\r\n            this.visibleItems.push(item);\r\n        }\r\n        // force a reSort.\r\n        this.reSort = true;\r\n    }\r\n    /**\r\n     * The removeGeomItem method.\r\n     * @param geomItem - The geomItem value.\r\n     */\r\n    // TODO: needs to return boolean\r\n    removeGeomItem(geomItem) {\r\n        this.itemCount--;\r\n        const glGeomItem = this.renderer.glGeomItemLibrary.getGLGeomItem(geomItem);\r\n        if (!glGeomItem)\r\n            throw new Error('glGeomItem not found for geomItem:' + geomItem.getName());\r\n        const listenerIDs = this.listenerIDs[geomItem.getId()];\r\n        delete this.listenerIDs[geomItem.getId()];\r\n        const materialParam = geomItem.getParameter('Material');\r\n        const material = materialParam.value;\r\n        glGeomItem.removeListenerById('visibilityChanged', listenerIDs['glGeomItem.visibilityChanged']);\r\n        if (glGeomItem.GLShaderGeomSets) {\r\n            const glShaderGeomSets = glGeomItem.GLShaderGeomSets;\r\n            glShaderGeomSets.removeGLGeomItem(glGeomItem);\r\n            glGeomItem.GLShaderGeomSets = null;\r\n            return true; // TODO: is returning true here correct?\r\n        }\r\n        {\r\n            const itemindex = this.transparentItemIndices[geomItem.getId()];\r\n            const item = this.transparentItems[itemindex];\r\n            delete this.transparentItemIndices[geomItem.getId()];\r\n            material.removeListenerById('valueChanged', listenerIDs['material.valueChanged']);\r\n            material.removeListenerById('transparencyChanged', listenerIDs['material.transparencyChanged']);\r\n            materialParam.removeListenerById('valueChanged', listenerIDs['materialParam.valueChanged']);\r\n            geomItem.getParameter('GeomMat').removeListenerById('valueChanged', listenerIDs['GeomMat.valueChanged']);\r\n            this.transparentItems[itemindex] = null;\r\n            this.freeList.push(itemindex);\r\n            const visibleindex = this.visibleItems.indexOf(item);\r\n            if (visibleindex != -1)\r\n                this.visibleItems.splice(visibleindex, 1);\r\n        }\r\n        this.emit('updated');\r\n        return true;\r\n    }\r\n    /**\r\n     * Sorts the drawn items in order furthest to nearest when rendering transparent objects.\r\n     * @param viewPos - The position of the camera that we are sorting relative to.\r\n     */\r\n    sortItems(viewPos) {\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const shaderName in this.__glShaderGeomSets) {\r\n            this.__glShaderGeomSets[shaderName].sortItems(viewPos);\r\n        }\r\n        for (const transparentItem of this.visibleItems) {\r\n            const mat4 = transparentItem.glGeomItem.geomItem.geomMatParam.value;\r\n            transparentItem.dist = mat4.translation.distanceTo(viewPos);\r\n        }\r\n        this.visibleItems.sort((a, b) => (a.dist > b.dist ? -1 : a.dist < b.dist ? 1 : 0));\r\n        this.reSort = false;\r\n    }\r\n    /**\r\n     * Draw n individual item, binding the shader and material if necessary.\r\n     * @param renderstate - current renderstad\r\n     * @param transparentItem - current item to render\r\n     * @param cache - cache tracking which material/shader is currently bound.\r\n     */\r\n    _drawItem(renderstate, transparentItem, cache) {\r\n        if (cache.currentGLMaterial != transparentItem.glMaterial) {\r\n            cache.currentGLMaterial = transparentItem.glMaterial;\r\n            if (!cache.currentGLMaterial.bind(renderstate)) {\r\n                return;\r\n            }\r\n        }\r\n        if (cache.currentGLGeom != transparentItem.glGeom) {\r\n            cache.currentGLGeom = transparentItem.glGeom;\r\n            if (!cache.currentGLGeom.bind(renderstate)) {\r\n                return;\r\n            }\r\n        }\r\n        const glGeomItem = transparentItem.glGeomItem;\r\n        if (glGeomItem.bind(renderstate)) {\r\n            renderstate.bindViewports(renderstate.unifs, () => {\r\n                cache.currentGLGeom.draw(renderstate);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * The _drawItems method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @private\r\n     */\r\n    _drawItems(renderstate) {\r\n        // Note: sorting here will not sort geometries of different types.\r\n        // this is a flawed solution that only sorts geomemtries of the same\r\n        // time and same shader against each other. Given that this is the data 99% o\r\n        // of the time, this is an acceptable tradeoff\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const shaderName in this.__glShaderGeomSets) {\r\n            this.__glShaderGeomSets[shaderName].draw(renderstate);\r\n        }\r\n        const cache = {\r\n            currentglShader: null,\r\n            currentGLMaterial: null,\r\n            currentGLGeom: null,\r\n        };\r\n        for (const transparentItem of this.visibleItems) {\r\n            const glShader = transparentItem.shaders.glShader;\r\n            if (cache.currentglShader != glShader) {\r\n                // Some passes, like the depth pass, bind custom uniforms.\r\n                // Note: No 'unbind' here before binding the next shader.\r\n                // That is to support a simple hack. LinesShader enables blend\r\n                // each time it is bound, and then disables on unbind.\r\n                if (!glShader.bind(renderstate, 'color')) {\r\n                    continue;\r\n                }\r\n                // Specify an non-instanced draw to the shader\r\n                const gl = this.__gl;\r\n                const unifs = renderstate.unifs;\r\n                if (unifs.instancedDraw) {\r\n                    gl.uniform1i(unifs.instancedDraw.location, 0);\r\n                }\r\n                // Note: this disables the attribute location, which must be enabled again for\r\n                // the next geom, which might use a different attribute location.\r\n                // e.g.\r\n                // one shader might specify attributes ['positions', 'instancedIds]\r\n                // another  might specify attributes ['positions', 'texCoords' 'instancedIds]\r\n                // In this case, we should re-enabled location 2 and then disable 3.\r\n                // if (renderstate.attrs.instancedIds && renderstate.attrs.instancedIds.location != -1) {\r\n                //   gl.disableVertexAttribArray(renderstate.attrs.instancedIds.location)\r\n                // }\r\n                this.renderer.glGeomItemLibrary.bind(renderstate);\r\n                cache.currentglShader = glShader;\r\n            }\r\n            this._drawItem(renderstate, transparentItem, cache);\r\n        }\r\n        // if (cache.currentGLGeom) cache.currentGLGeom.unbind(renderstate)\r\n    }\r\n    /**\r\n     * The draw method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    draw(renderstate) {\r\n        if (this.itemCount == 0)\r\n            return;\r\n        const gl = this.__gl;\r\n        const viewPos = renderstate.viewXfo.tr;\r\n        // Avoid sorting if the camera did not move more than the specified tolerance.\r\n        if (this.reSort || viewPos.distanceTo(this.prevSortCameraPos) > this.sortCameraMovementDistance) {\r\n            this.sortItems(viewPos);\r\n            this.prevSortCameraPos = viewPos;\r\n            if (renderstate.vrviewport) {\r\n                // Adapt the sort tolerance to the focal distance.\r\n                // In a tiny scene, we want to sort more frequently.\r\n                this.sortCameraMovementDistance = renderstate.viewScale * 0.2;\r\n            }\r\n            else if (renderstate.viewport) {\r\n                // Adapt the sort tolerance to the focal distance.\r\n                // In a tiny scene, we want to sort more frequently.\r\n                const camera = renderstate.viewport.getCamera();\r\n                this.sortCameraMovementDistance = camera.getFocalDistance() * 0.3;\r\n            }\r\n        }\r\n        gl.enable(gl.DEPTH_TEST);\r\n        gl.depthFunc(gl.LESS);\r\n        gl.enable(gl.BLEND);\r\n        gl.blendEquation(gl.FUNC_ADD);\r\n        // Complex transparent surfaces require multiple passes.\r\n        // First the multiply pass tints the background color, simulating\r\n        // light passing through the surface, and then the add layer\r\n        // adds new color to the backbuffer to simulate light bouncing off\r\n        // the surface.\r\n        // TODO: Optimise this system.\r\n        // After depth sorting, we should split the items into 2 groups.\r\n        // Multiply items, and Add  items. (Many items will be in both)\r\n        // Then we can simply check if we have any multiply items here\r\n        // before rendering all items.\r\n        // for Multiply pass, we can use front and back surfaces to calculate depth and how much\r\n        // of the background layer to let through.\r\n        // gl.disable(gl.CULL_FACE)\r\n        // gl.blendFunc(gl.DST_COLOR, gl.ZERO) // For multiply, select this.\r\n        // this._drawItems(renderstate)\r\n        // for the Add\r\n        renderstate.pass = 'ADD';\r\n        // https://google.github.io/filament/Filament.html#lighting/transparencyandtranslucencylighting/transparency\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        // Only draw font faces. BEcause all faces are drawn, it can make a mess to see the back faces through the front faces.\r\n        // e.g. we might see the triangles on the other side of a sphere rendered over the top of triangles on the near side.\r\n        gl.enable(gl.CULL_FACE);\r\n        gl.cullFace(gl.BACK);\r\n        this._drawItems(renderstate);\r\n        gl.disable(gl.BLEND);\r\n        gl.depthMask(true);\r\n    }\r\n    /**\r\n     * The drawHighlightedGeoms method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    drawHighlightedGeoms(renderstate) {\r\n        const gl = this.__gl;\r\n        gl.disable(gl.CULL_FACE); // 2-sided rendering.\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const shaderName in this.__glShaderGeomSets) {\r\n            this.__glShaderGeomSets[shaderName].drawHighlightedGeoms(renderstate);\r\n        }\r\n        const cache = {\r\n            currentglShader: null,\r\n            currentGLMaterial: null,\r\n            currentGLGeom: null,\r\n        };\r\n        for (const transparentItem of this.visibleItems) {\r\n            if (!transparentItem.geomItem.isHighlighted())\r\n                continue;\r\n            if (!transparentItem.shaders.glselectedshader)\r\n                continue;\r\n            const shaders = transparentItem.shaders;\r\n            if (cache.currentglShader != shaders.glselectedshader) {\r\n                // Some passes, like the depth pass, bind custom uniforms.\r\n                if (!shaders.glselectedshader.bind(renderstate, 'highlight')) {\r\n                    continue;\r\n                }\r\n                cache.currentglShader = shaders.glselectedshader;\r\n            }\r\n            const { floatGeomBuffer, passId, instancedDraw } = renderstate.unifs;\r\n            if (floatGeomBuffer) {\r\n                gl.uniform1i(floatGeomBuffer.location, gl.floatGeomBuffer ? 1 : 0);\r\n            }\r\n            if (passId) {\r\n                gl.uniform1i(passId.location, this.passIndex);\r\n            }\r\n            if (instancedDraw) {\r\n                gl.uniform1i(instancedDraw.location, 0);\r\n            }\r\n            this.renderer.glGeomItemLibrary.bind(renderstate);\r\n            this._drawItem(renderstate, transparentItem, cache);\r\n        }\r\n        if (cache.currentGLGeom)\r\n            cache.currentGLGeom.unbind(renderstate);\r\n    }\r\n    /**\r\n     * The drawGeomData method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    drawGeomData(renderstate) {\r\n        const gl = this.__gl;\r\n        gl.disable(gl.BLEND);\r\n        gl.disable(gl.CULL_FACE);\r\n        gl.enable(gl.DEPTH_TEST);\r\n        gl.depthFunc(gl.LESS);\r\n        gl.depthMask(true);\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const shaderName in this.__glShaderGeomSets) {\r\n            this.__glShaderGeomSets[shaderName].drawGeomData(renderstate);\r\n        }\r\n        const cache = {\r\n            currentglShader: null,\r\n            currentGLMaterial: null,\r\n            currentGLGeom: null,\r\n        };\r\n        for (const transparentItem of this.visibleItems) {\r\n            if (!transparentItem.glGeomItem.geomItem.isSelectable())\r\n                continue;\r\n            const shaders = transparentItem.shaders;\r\n            if (!shaders.glgeomdatashader) {\r\n                continue;\r\n            }\r\n            if (cache.currentglShader != shaders.glgeomdatashader) {\r\n                // Some passes, like the depth pass, bind custom uniforms.\r\n                if (!shaders.glgeomdatashader.bind(renderstate, 'geomdata')) {\r\n                    continue;\r\n                }\r\n                cache.currentglShader = shaders.glgeomdatashader;\r\n            }\r\n            const { floatGeomBuffer, passId, instancedDraw } = renderstate.unifs;\r\n            if (floatGeomBuffer) {\r\n                gl.uniform1i(floatGeomBuffer.location, gl.floatGeomBuffer ? 1 : 0);\r\n            }\r\n            if (passId) {\r\n                gl.uniform1i(passId.location, this.passIndex);\r\n            }\r\n            if (instancedDraw) {\r\n                gl.uniform1i(instancedDraw.location, 0);\r\n            }\r\n            this.renderer.glGeomItemLibrary.bind(renderstate);\r\n            this._drawItem(renderstate, transparentItem, cache);\r\n        }\r\n        if (cache.currentGLGeom)\r\n            cache.currentGLGeom.unbind(renderstate);\r\n    }\r\n}\r\nGLRenderer.registerPass(GLTransparentGeomsPass, PassType.TRANSPARENT);\r\nexport { GLTransparentGeomsPass };\r\n//# sourceMappingURL=GLTransparentGeomsPass.js.map","/* eslint-disable require-jsdoc */\r\nimport { GLShader } from '../GLShader';\r\nimport './GLSL/index';\r\n// @ts-ignore\r\nimport vert from './AtlasLayout.vert';\r\n// @ts-ignore\r\nimport frag from './AtlasLayout.frag';\r\n// eslint-disable-next-line require-jsdoc\r\nclass AtlasLayoutShader extends GLShader {\r\n    /**\r\n     * Create an atlas layout shader.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'AtlasLayoutShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n        this.setShaderStage('FRAGMENT_SHADER', frag);\r\n    }\r\n}\r\n// Registry.register('AtlasLayoutShader', AtlasLayoutShader)\r\nexport { AtlasLayoutShader };\r\n//# sourceMappingURL=AtlasLayoutShader.js.map","import { Vec2, Vec4, Color } from '../Math/index';\r\nimport { GrowingPacker } from '../Utilities/index';\r\nimport { BaseImage } from '../SceneTree/index';\r\nimport { GLTexture2D } from './GLTexture2D';\r\nimport { GLRenderTarget } from './GLRenderTarget';\r\nimport { generateShaderGeomBinding } from './Drawing/GeomShaderBinding';\r\nimport { MathFunctions } from '../Utilities/MathFunctions';\r\nimport { AtlasLayoutShader } from './Shaders/AtlasLayoutShader';\r\n/**\r\n * An Image Atlas lays out multiple smaller images within a larger image atlas, and tracks their positions.\r\n * @private\r\n */\r\nclass GLImageAtlas extends GLRenderTarget {\r\n    /**\r\n     * Create an image atlas..\r\n     * @param gl - The webgl rendering context.\r\n     * @param name - The name value.\r\n     * @param format - The format value.\r\n     * @param type - The type value.\r\n     */\r\n    constructor(gl, name, format = 'RGBA', type = 'FLOAT') {\r\n        super(gl);\r\n        this.__asyncCount = 0;\r\n        this.loaded = false;\r\n        this.ready = false;\r\n        this.__layout = [];\r\n        this.__layoutVec4s = [];\r\n        this.__atlasLayoutShaderBinding = null;\r\n        this.__atlasLayoutShader = null;\r\n        this.__name = name;\r\n        this.__formatParam = format;\r\n        this.__typeParam = type;\r\n        this.clearColor = new Color(0, 0, 0, 0);\r\n        this.__subImages = [];\r\n        this.__layoutNeedsRegeneration = false;\r\n        this.__asyncCount = 0;\r\n        this.loaded = false;\r\n    }\r\n    // eslint-disable-next-line require-jsdoc\r\n    incAsyncCount(count = 1) {\r\n        this.__asyncCount += count;\r\n        this.ready = false;\r\n    }\r\n    // eslint-disable-next-line require-jsdoc\r\n    decAsyncCount() {\r\n        if (this.__asyncCount > 0) {\r\n            this.__asyncCount--;\r\n            if (this.__asyncCount == 0) {\r\n                this.loaded = true;\r\n                this.emit('loaded');\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * The isLoaded method.\r\n     * @return - The return value.\r\n     */\r\n    isLoaded() {\r\n        return this.__asyncCount == 0;\r\n    }\r\n    /**\r\n     * The getMainImage method.\r\n     * @return - The return value.\r\n     */\r\n    getMainImage() {\r\n        return this.frameBuffer; // TODO: is this correct?\r\n    }\r\n    /**\r\n     * The addSubImage method.\r\n     * @param subImage - The subImage value.\r\n     * @return - The return value.\r\n     */\r\n    // TODO: WebGLTexture is not handled here\r\n    addSubImage(subImage) {\r\n        if (subImage instanceof BaseImage) {\r\n            const gltexture = new GLTexture2D(this.__gl, subImage);\r\n            if (!subImage.isLoaded()) {\r\n                this.incAsyncCount();\r\n                subImage.on('loaded', () => {\r\n                    this.decAsyncCount();\r\n                });\r\n            }\r\n            subImage.setMetadata('ImageAtlas_gltex', gltexture);\r\n            gltexture.addRef(this);\r\n            const updated = () => {\r\n                // TODO: Check to see if the new dimensions\r\n                // do not match the previous. If not, then we\r\n                // need to relayout. wE could also avlid a complete\r\n                // relaout by reremoving and re-adding this image.\r\n                this.__layoutNeedsRegeneration = true;\r\n                this.renderAtlas();\r\n            };\r\n            subImage.on('updated', updated);\r\n            this.__subImages.push(gltexture);\r\n        }\r\n        else {\r\n            const subImage_casted = subImage;\r\n            subImage_casted.addRef(this); // subImage is a GLTexture2D\r\n            this.__subImages.push(subImage_casted);\r\n        }\r\n        this.__layoutNeedsRegeneration = true;\r\n        return this.__subImages.length - 1;\r\n    }\r\n    /**\r\n     * The removeSubImage method.\r\n     * @param subImage - The subImage value.\r\n     */\r\n    removeSubImage(subImage) {\r\n        let index;\r\n        if (subImage instanceof BaseImage) {\r\n            const gltext = subImage.getMetadata('ImageAtlas_gltex'); // TODO: refactor\r\n            index = this.__subImages.indexOf(gltext);\r\n            subImage.deleteMetadata('ImageAtlas_gltex');\r\n        }\r\n        else {\r\n            index = this.__subImages.indexOf(subImage);\r\n        }\r\n        const gltexture = this.__subImages[index];\r\n        gltexture.removeRef(this);\r\n        this.__subImages.splice(index, 1);\r\n        this.__layoutNeedsRegeneration = true;\r\n    }\r\n    /**\r\n     * The getSubImage method.\r\n     * @param index - The index value.\r\n     * @return - The image value.\r\n     */\r\n    getSubImage(index) {\r\n        return this.__subImages[index];\r\n    }\r\n    /**\r\n     * The numSubImages method.\r\n     * @return - The return value.\r\n     */\r\n    numSubImages() {\r\n        if (this.__layout)\r\n            return this.__layout.length;\r\n        return this.__subImages.length;\r\n    }\r\n    /**\r\n     * The generateAtlasLayout method.\r\n     */\r\n    generateAtlasLayout(minTileSize) {\r\n        if (this.__subImages.length == 0) {\r\n            this.__layoutNeedsRegeneration = false;\r\n            return;\r\n        }\r\n        const border = 2;\r\n        // We must lay out the sub images in order of size.\r\n        // else the paker might have trouble.\r\n        const blocks = [];\r\n        this.__subImages.forEach((subImage, index) => {\r\n            blocks.push({\r\n                w: subImage.width + border * 2,\r\n                h: subImage.height + border * 2,\r\n                area: subImage.width * subImage.height,\r\n                index,\r\n            });\r\n        });\r\n        blocks.sort((a, b) => (a.area > b.area ? -1 : a.area < b.area ? 1 : 0));\r\n        const packer = new GrowingPacker();\r\n        packer.fit(blocks);\r\n        this.__layout = [];\r\n        blocks.forEach((block, index) => {\r\n            // const subImage = this.__subImages[block.index]\r\n            if (block.fit) {\r\n                this.__layout[block.index] = {\r\n                    pos: new Vec2(block.fit.x + border, block.fit.y + border),\r\n                    size: new Vec2(block.w, block.h),\r\n                };\r\n            }\r\n            else {\r\n                console.warn('Unable to fit image');\r\n            }\r\n        });\r\n        const width = packer.root.w;\r\n        const height = packer.root.h;\r\n        // console.log(this.__name + \" Atlas Texture size:\" + width.toFixed() + \", \" + height.toFixed());\r\n        // Note: only RGBA Float textures can be rendered to on Firefox.(Not RGB)\r\n        this.configure({\r\n            width,\r\n            height,\r\n            format: this.__typeParam == 'FLOAT' && this.__formatParam == 'RGB' ? 'RGBA' : this.__formatParam,\r\n            type: this.__typeParam,\r\n            filter: 'LINEAR',\r\n        });\r\n        const gl = this.__gl;\r\n        // this.__fbo = new GLFbo(gl, this)\r\n        // this.__fbo.setClearColor(this.__clearColor)\r\n        if (!gl.__quadVertexIdsBuffer)\r\n            gl.setupInstancedQuad();\r\n        if (!this.__atlasLayoutShader) {\r\n            this.__atlasLayoutShader = new AtlasLayoutShader(this.__gl);\r\n            const directives = [];\r\n            if (gl.name == 'webgl2')\r\n                directives.push('#define ENABLE_ES3');\r\n            const shaderComp = this.__atlasLayoutShader.compileForTarget('GLImageAtlas', { directives });\r\n            this.__atlasLayoutShaderBinding = generateShaderGeomBinding(this.__gl, shaderComp.attrs, gl.__quadattrbuffers, gl.__quadIndexBuffer);\r\n        }\r\n        const pixelsPerItem = 1;\r\n        let size = Math.round(Math.sqrt(this.__layout.length * pixelsPerItem) + 0.5);\r\n        // Only support power 2 textures. Else we get strange corruption on some GPUs\r\n        // in some scenes.\r\n        size = MathFunctions.nextPow2(size);\r\n        // Size should be a multiple of pixelsPerItem, so each geom item is always contiguous\r\n        // in memory. (makes updating a lot easier. See __updateItemInstanceData below)\r\n        if (size % pixelsPerItem != 0)\r\n            size += pixelsPerItem - (size % pixelsPerItem);\r\n        if (!gl.floatTexturesSupported) {\r\n            this.__layoutVec4s = [];\r\n            this.__layout.forEach((layoutItem, index) => {\r\n                this.__layoutVec4s[index] = [\r\n                    layoutItem.pos.x / width,\r\n                    layoutItem.pos.y / height,\r\n                    layoutItem.size.x / width,\r\n                    layoutItem.size.y / height,\r\n                ];\r\n            });\r\n        }\r\n        else {\r\n            const dataArray = new Float32Array(size * size * 4); /* each pixel has 4 floats*/\r\n            for (let i = 0; i < this.__layout.length; i++) {\r\n                const layoutItem = this.__layout[i];\r\n                const vec4 = new Vec4(new Float32Array(dataArray.buffer, i * 4 * 4, 4));\r\n                vec4.set(layoutItem.pos.x / width, layoutItem.pos.y / height, layoutItem.size.x / width, layoutItem.size.y / height);\r\n            }\r\n            if (!this.__atlasLayoutTexture ||\r\n                this.__atlasLayoutTexture.width != size ||\r\n                this.__atlasLayoutTexture.height != size) {\r\n                if (this.__atlasLayoutTexture)\r\n                    this.__atlasLayoutTexture.destroy();\r\n                this.__atlasLayoutTexture = new GLTexture2D(gl, {\r\n                    format: 'RGBA',\r\n                    type: 'FLOAT',\r\n                    filter: 'NEAREST',\r\n                    wrap: 'CLAMP_TO_EDGE',\r\n                    mipMapped: false,\r\n                    width: size,\r\n                    height: size,\r\n                    data: dataArray,\r\n                });\r\n            }\r\n            else {\r\n                this.__atlasLayoutTexture.bufferData(dataArray, size, size);\r\n            }\r\n        }\r\n        this.textureDesc[0] = this.width;\r\n        this.textureDesc[1] = this.height;\r\n        this.textureDesc[2] = this.__atlasLayoutTexture.width;\r\n        // this.textureDesc[3] // flags\r\n        this.__layoutNeedsRegeneration = false;\r\n    }\r\n    /**\r\n     * The getLayoutData method.\r\n     * @param index - The index value.\r\n     * @return - The return value.\r\n     */\r\n    getLayoutData(index) {\r\n        return this.__layoutVec4s[index];\r\n    }\r\n    /**\r\n     * The renderAtlas method.\r\n     * @param cleanup - The cleanup value.\r\n     * @param off - The off value.\r\n     */\r\n    renderAtlas(cleanup = false, off = 0) {\r\n        if (this.__subImages.length == 0) {\r\n            return;\r\n        }\r\n        if (this.__layoutNeedsRegeneration) {\r\n            this.generateAtlasLayout();\r\n        }\r\n        const gl = this.__gl;\r\n        const renderstate = {};\r\n        this.bindForWriting(renderstate, true);\r\n        this.__atlasLayoutShader.bind(renderstate, 'GLImageAtlas');\r\n        this.__atlasLayoutShaderBinding.bind(renderstate);\r\n        const scl = new Vec2(1.0 / this.width, 1.0 / this.height);\r\n        const unifs = renderstate.unifs;\r\n        for (let j = off; j < this.__subImages.length; j++) {\r\n            const glimage = this.__subImages[j];\r\n            const layoutItem = this.__layout[j];\r\n            // Some images may not have fully loaded yet, so skip those.\r\n            if (!glimage.bindToUniform(renderstate, unifs.srctexture))\r\n                continue;\r\n            gl.uniform2fv(unifs.pos.location, layoutItem.pos.multiply(scl).asArray());\r\n            gl.uniform2fv(unifs.size.location, layoutItem.size.multiply(scl).asArray());\r\n            gl.uniform2f(unifs.srctextureDim.location, glimage.width, glimage.height);\r\n            gl.uniform1i(unifs.alphaFromLuminance.location, glimage.alphaFromLuminance ? 1 : 0);\r\n            gl.uniform1i(unifs.invert.location, glimage.invert ? 1 : 0);\r\n            gl.drawQuad();\r\n            // After rendering the texture, we can reuse the texture unit.\r\n            renderstate.boundTextures--;\r\n        }\r\n        if (cleanup) {\r\n            this.cleanup();\r\n        }\r\n        this.unbind(renderstate);\r\n        // this.__fbo.unbind()\r\n        this.emit('updated');\r\n    }\r\n    /**\r\n     * The isReady method.\r\n     * @return - The return value.\r\n     */\r\n    isReady() {\r\n        return this.__atlasLayoutTexture != undefined;\r\n    }\r\n    /**\r\n     * The bindToUniform method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param unif - The WebGL uniform\r\n     * @return - The return value.\r\n     */\r\n    bindToUniform(renderstate, unif) {\r\n        super.bindToUniform(renderstate, unif);\r\n        const unifs = renderstate.unifs;\r\n        if (this.__atlasLayoutTexture) {\r\n            const atlasLayoutUnif = unifs[unif.name + '_layout'];\r\n            if (atlasLayoutUnif)\r\n                this.__atlasLayoutTexture.bindToUniform(renderstate, atlasLayoutUnif);\r\n            const atlasDescUnif = unifs[unif.name + '_desc'];\r\n            if (atlasDescUnif) {\r\n                this.__gl.uniform4fv(atlasDescUnif.location, this.textureDesc);\r\n            }\r\n        }\r\n        else {\r\n            const atlasDescUnif = unifs[unif.name + '_desc'];\r\n            if (atlasDescUnif)\r\n                this.__gl.uniform4f(atlasDescUnif.location, this.width, this.height, 0.0, 0.0);\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * The cleanup method.\r\n     */\r\n    cleanup() {\r\n        for (const glimage of this.__subImages) {\r\n            glimage.removeRef(this);\r\n        }\r\n        this.__subImages = [];\r\n        this.destroy();\r\n    }\r\n    /**\r\n     * The destroy is called by the system to cause explicit resources cleanup.\r\n     * Users should never need to call this method directly.\r\n     */\r\n    destroy() {\r\n        this.cleanup();\r\n        super.destroy();\r\n    }\r\n}\r\nexport { GLImageAtlas };\r\n//# sourceMappingURL=GLImageAtlas.js.map","import { Color, Vec3, Vec4 } from '../../Math/index';\r\nimport { BillboardItem } from '../../SceneTree/index';\r\nimport { BillboardShader } from '../Shaders/BillboardShader';\r\nimport { GLPass, PassType } from './GLPass';\r\nimport { GLImageAtlas } from '../GLImageAtlas';\r\nimport { GLTexture2D } from '../GLTexture2D';\r\nimport { GLRenderer } from '../GLRenderer';\r\nimport { generateShaderGeomBinding } from '../Drawing/index';\r\nimport { MathFunctions } from '../../Utilities/MathFunctions';\r\nconst pixelsPerItem = 7; // The number of pixels per draw item.\r\n/** Class representing a GL billboards pass.\r\n * @extends GLPass\r\n * @private\r\n */\r\nclass GLBillboardsPass extends GLPass {\r\n    /**\r\n     * Create a GL billboards pass.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.atlas = null;\r\n        this.indexArrayUpdateNeeded = false;\r\n        this.instanceIdsBuffer = null;\r\n        this.indexArray = new Float32Array(0);\r\n        this.glshader = null;\r\n        this.shaderComp = {};\r\n        this.shaderBinding = null;\r\n        this.modelMatrixArray = [];\r\n        this.billboardDataArray = []; // TODO: map vs array? refactor\r\n        this.tintColorArray = [];\r\n        this.width = 0;\r\n        this.drawItemsTexture = null;\r\n        this.billboards = [];\r\n        this.dirtyBillboards = new Set();\r\n        this.freeIndices = [];\r\n        this.drawCount = 0;\r\n        this.threshold = 0.0;\r\n        this.updateRequested = false;\r\n        this.prevSortCameraPos = new Vec3();\r\n    }\r\n    /**\r\n     * The init method.\r\n     * @param renderer - The renderer value.\r\n     * @param passIndex - The index of the pass in the GLBAseRenderer\r\n     */\r\n    init(renderer, passIndex) {\r\n        super.init(renderer, passIndex);\r\n        // TODO: this.atlas = new GLImageAtlas(this.renderer.gl, 'Billboards', 'RGBA', 'UNSIGNED_BYTE', [1, 1, 1, 0]) // TODO: Check if last arg was for color\r\n        this.atlas = new GLImageAtlas(this.renderer.gl, 'Billboards', 'RGBA', 'UNSIGNED_BYTE');\r\n        this.atlas.clearColor = new Color(1, 1, 1, 0);\r\n        const emitUpdated = (event) => this.emit('updated', event);\r\n        this.atlas.on('loaded', emitUpdated);\r\n        this.atlas.on('updated', emitUpdated);\r\n    }\r\n    /**\r\n     * Returns the pass type. OPAQUE passes are always rendered first, followed by TRANSPARENT passes, and finally OVERLAY.\r\n     * @return - The pass type value.\r\n     */\r\n    getPassType() {\r\n        return PassType.TRANSPARENT;\r\n    }\r\n    /**\r\n     * The itemAddedToScene method is called on each pass when a new item\r\n     * is added to the scene, and the renderer must decide how to render it.\r\n     * It allows Passes to select geometries to handle the drawing of.\r\n     * @param treeItem - The treeItem value.\r\n     * @param rargs - Extra return values are passed back in this object.\r\n     * The object contains a parameter 'continueInSubTree', which can be set to false,\r\n     * so the subtree of this node will not be traversed after this node is handled.\r\n     * @return - The return value.\r\n     */\r\n    itemAddedToScene(treeItem, rargs) {\r\n        if (treeItem instanceof BillboardItem) {\r\n            this.addBillboard(treeItem);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * The itemRemovedFromScene method is called on each pass when aa item\r\n     * is removed to the scene, and the pass must handle cleaning up any resources.\r\n     * @param treeItem - The treeItem value.\r\n     * @param rargs - Extra return values are passed back in this object.\r\n     * @return - The return value.\r\n     */\r\n    itemRemovedFromScene(treeItem, rargs) {\r\n        if (treeItem instanceof BillboardItem) {\r\n            this.removeBillboard(treeItem);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    // ///////////////////////////////////\r\n    // Bind to Render Tree\r\n    /**\r\n     * The filterRenderTree method.\r\n     */\r\n    filterRenderTree() { }\r\n    /**\r\n     * The addBillboard method.\r\n     * @param billboard - The billboard value.\r\n     */\r\n    addBillboard(billboard) {\r\n        const imageParam = billboard.imageParam;\r\n        const image = imageParam.value;\r\n        if (!image) {\r\n            imageParam.on('valueChanged', () => this.addBillboard(billboard));\r\n            return;\r\n        }\r\n        let index;\r\n        if (this.freeIndices.length > 0)\r\n            index = this.freeIndices.pop();\r\n        else\r\n            index = this.billboards.length;\r\n        const imageIndex = this.atlas.addSubImage(image);\r\n        billboard.setMetadata('GLBillboardsPass_Index', index);\r\n        const visibilityChanged = () => {\r\n            if (billboard.isVisible()) {\r\n                this.drawCount++;\r\n                // The billboard Xfo might have changed while it was\r\n                // not visible. We need to update here.\r\n                this.dirtyBillboards.add(index);\r\n            }\r\n            else\r\n                this.drawCount--;\r\n            this.reqUpdateIndexArray();\r\n        };\r\n        billboard.on('visibilityChanged', visibilityChanged);\r\n        const updateBillboard = () => {\r\n            if (billboard.isVisible()) {\r\n                this.dirtyBillboards.add(index);\r\n                this.emit('updated');\r\n            }\r\n        };\r\n        billboard.globalXfoParam.on('valueChanged', updateBillboard);\r\n        billboard.alphaParam.on('valueChanged', updateBillboard);\r\n        billboard.on('highlightChanged', updateBillboard);\r\n        if (billboard.isVisible())\r\n            this.drawCount++;\r\n        this.billboards[index] = {\r\n            billboard,\r\n            imageIndex,\r\n            visibilityChanged,\r\n            updateBillboard,\r\n        };\r\n        this.indexArrayUpdateNeeded = true;\r\n        this.requestUpdate();\r\n    }\r\n    /**\r\n     * The removeBillboard method.\r\n     * @param billboard - The billboard value.\r\n     */\r\n    removeBillboard(billboard) {\r\n        const index = billboard.getMetadata('GLBillboardsPass_Index');\r\n        if (index == -1) {\r\n            console.warn('Billboard already removed.');\r\n            return;\r\n        }\r\n        const billboardData = this.billboards[index];\r\n        // Currently we are getting errors when trying to re-generate the Fbo\r\n        // after removing and then adding images back to the atlas.\r\n        // I don't have time to figure it out, so simply adding images\r\n        // to the atlas. (for the Zahner demo)\r\n        // Eventually we need to clean up the atlas, so debug this using the\r\n        // survey-point-calibration 190528_Dummy_Srvy_Data.vlexe test\r\n        const image = billboardData.billboard.imageParam.value;\r\n        this.atlas.removeSubImage(image);\r\n        billboard.off('visibilityChanged', billboardData.visibilityChanged);\r\n        billboard.off('highlightChanged', billboardData.updateBillboard);\r\n        billboard.globalXfoParam.off('valueChanged', billboardData.updateBillboard);\r\n        billboard.alphaParam.off('valueChanged', billboardData.updateBillboard);\r\n        this.billboards[index] = null;\r\n        this.freeIndices.push(index);\r\n        if (billboard.isVisible())\r\n            this.drawCount--;\r\n        this.indexArrayUpdateNeeded = true;\r\n        this.requestUpdate();\r\n    }\r\n    /**\r\n     * The populateBillboardDataArray method.\r\n     * @param billboardData - The billboardData value.\r\n     * @param index - The index value.\r\n     * @param dataArray - The dataArray value.\r\n     * @private\r\n     */\r\n    populateBillboardDataArray(billboardData, index, dataArray) {\r\n        const billboard = billboardData.billboard;\r\n        const mat4 = billboard.globalXfoParam.value.toMat4();\r\n        const ppm = billboard.pixelsPerMeterParam.value;\r\n        const pivot = billboard.pivotParam.value;\r\n        const scale = 1 / ppm;\r\n        // Until webgl2 is standard, we will avoid using bit flags.\r\n        // instead, we will use decimals.\r\n        let flags = 0;\r\n        if (billboard.alignedToCameraParam.value)\r\n            flags |= 1 << 2;\r\n        if (billboard.drawOnTopParam.value)\r\n            flags |= 1 << 3;\r\n        if (billboard.fixedSizeOnscreenParam.value)\r\n            flags |= 1 << 4;\r\n        const alpha = billboard.alphaParam.value;\r\n        const color = billboard.colorParam.value;\r\n        const offset = index * pixelsPerItem * 4;\r\n        const col0 = new Vec4(new Float32Array(dataArray.buffer, offset * 4, 4));\r\n        const col1 = new Vec4(new Float32Array(dataArray.buffer, (offset + 4) * 4, 4));\r\n        const col2 = new Vec4(new Float32Array(dataArray.buffer, (offset + 8) * 4, 4));\r\n        const col3 = new Vec4(new Float32Array(dataArray.buffer, (offset + 12) * 4, 4));\r\n        col0.set(mat4.xAxis.x, mat4.yAxis.x, mat4.zAxis.x, mat4.translation.x);\r\n        col1.set(mat4.xAxis.y, mat4.yAxis.y, mat4.zAxis.y, mat4.translation.y);\r\n        col2.set(mat4.xAxis.z, mat4.yAxis.z, mat4.zAxis.z, mat4.translation.z);\r\n        col3.set(scale, flags, billboardData.imageIndex, alpha);\r\n        const col4 = new Vec4(new Float32Array(dataArray.buffer, (offset + 16) * 4, 4));\r\n        col4.set(pivot.x, pivot.y, 0, 0);\r\n        const col5 = new Vec4(new Float32Array(dataArray.buffer, (offset + 20) * 4, 4));\r\n        col5.set(color.r, color.g, color.b, color.a);\r\n        // /////////////////////////\r\n        // Highlight\r\n        if (billboard.isHighlighted()) {\r\n            const highlight = billboard.getHighlight();\r\n            const col6 = new Vec4(new Float32Array(dataArray.buffer, (offset + 24) * 4, 4));\r\n            col6.set(highlight.r, highlight.g, highlight.b, highlight.a);\r\n        }\r\n    }\r\n    /**\r\n     * The requestUpdate method.\r\n     * @private\r\n     */\r\n    requestUpdate() {\r\n        if (!this.updateRequested) {\r\n            this.updateRequested = true;\r\n            this.emit('updated');\r\n        }\r\n    }\r\n    /**\r\n     * The reqUpdateIndexArray method.\r\n     * @private\r\n     */\r\n    reqUpdateIndexArray() {\r\n        if (this.indexArrayUpdateNeeded)\r\n            return;\r\n        this.indexArrayUpdateNeeded = true;\r\n        this.emit('updated');\r\n    }\r\n    // eslint-disable-next-line require-jsdoc\r\n    updateIndexArray() {\r\n        const gl = this.__gl;\r\n        // Note: When the camera moves, this array is sorted and re-upload.\r\n        if (this.indexArray && this.indexArray.length != this.drawCount) {\r\n            gl.deleteBuffer(this.instanceIdsBuffer);\r\n            this.instanceIdsBuffer = null;\r\n        }\r\n        this.indexArray = new Float32Array(this.drawCount);\r\n        let offset = 0;\r\n        for (let i = 0; i < this.billboards.length; i++) {\r\n            if (this.billboards[i] && this.billboards[i].billboard.isVisible()) {\r\n                this.indexArray[offset] = i;\r\n                offset++;\r\n            }\r\n        }\r\n        if (!this.instanceIdsBuffer)\r\n            this.instanceIdsBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.instanceIdsBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.indexArray, gl.STATIC_DRAW);\r\n        this.indexArrayUpdateNeeded = false;\r\n    }\r\n    /**\r\n     * The updateBillboards method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @private\r\n     */\r\n    updateBillboards(renderstate) {\r\n        const doIt = () => {\r\n            if (this.indexArrayUpdateNeeded)\r\n                this.updateIndexArray();\r\n            const gl = this.__gl;\r\n            if (!this.glshader) {\r\n                if (!gl.__quadVertexIdsBuffer) {\r\n                    gl.setupInstancedQuad();\r\n                }\r\n                this.glshader = new BillboardShader(gl);\r\n                const shaderComp = this.glshader.compileForTarget('GLBillboardsPass', renderstate.shaderopts);\r\n                this.shaderBinding = generateShaderGeomBinding(gl, shaderComp.attrs, gl.__quadattrbuffers, gl.__quadIndexBuffer);\r\n            }\r\n            // Note: Maybe the atlas is alreadu up to date. It should\r\n            // maintain its own coherencey by listening to the sub images.\r\n            this.atlas.renderAtlas();\r\n            if (!gl.floatTexturesSupported || !gl.drawElementsInstanced) {\r\n                this.modelMatrixArray = [];\r\n                this.billboardDataArray = [];\r\n                this.tintColorArray = [];\r\n                this.indexArray.forEach((index) => {\r\n                    // if (index == -1) return;\r\n                    const billboardData = this.billboards[index];\r\n                    const billboard = billboardData.billboard;\r\n                    const mat4 = billboard.globalXfoParam.value.toMat4();\r\n                    const ppm = billboard.pixelsPerMeterParam.value;\r\n                    const scale = 1 / ppm;\r\n                    let flags = 0;\r\n                    if (billboard.alignedToCameraParam.value)\r\n                        flags |= 1 << 2;\r\n                    if (billboard.drawOnTopParam.value)\r\n                        flags |= 1 << 3;\r\n                    if (billboard.fixedSizeOnscreenParam.value)\r\n                        flags |= 1 << 4;\r\n                    const alpha = billboard.alphaParam.value;\r\n                    const color = billboard.colorParam.value;\r\n                    this.modelMatrixArray[index] = mat4.asArray();\r\n                    this.billboardDataArray[index] = [scale, flags, billboardData.imageIndex, alpha];\r\n                    this.tintColorArray[index] = [color.r, color.g, color.b, color.a];\r\n                });\r\n                this.updateRequested = false;\r\n                return;\r\n            }\r\n            let size = Math.round(Math.sqrt((this.billboards.length - this.freeIndices.length) * pixelsPerItem) + 0.5);\r\n            // Note: the following few lines need a cleanup.\r\n            // We should be using power of 2 textures. The problem is that pot texture sizes don't\r\n            // align with the 6 pixels per draw item. So we need to upload a slightly bigger texture\r\n            // but upload the 'usable' size.\r\n            // Only support power 2 textures. Else we get strange corruption on some GPUs\r\n            // in some scenes.\r\n            // Size should be a multiple of pixelsPerItem, so each geom item is always contiguous\r\n            // in memory. (makes updating a lot easier. See __updateItemInstanceData below)\r\n            // size = Math.nextPow2(size);\r\n            if (size % pixelsPerItem != 0)\r\n                size += pixelsPerItem - (size % pixelsPerItem);\r\n            this.width = size;\r\n            // if((this.width % pixelsPerItem) != 0)\r\n            //     this.width -= (this.width % pixelsPerItem);\r\n            if (!this.drawItemsTexture) {\r\n                const params = {\r\n                    format: 'RGBA',\r\n                    type: 'FLOAT',\r\n                    width: size,\r\n                    height: size,\r\n                    filter: 'NEAREST',\r\n                    wrap: 'CLAMP_TO_EDGE',\r\n                    mipMapped: false,\r\n                };\r\n                this.drawItemsTexture = new GLTexture2D(gl, params);\r\n                this.drawItemsTexture.clear();\r\n            }\r\n            else {\r\n                this.drawItemsTexture.resize(size, size);\r\n            }\r\n            this.indexArray.forEach((index) => {\r\n                if (index != -1)\r\n                    this.updateBillboard(index);\r\n            });\r\n            this.updateRequested = false;\r\n        };\r\n        if (this.atlas.isLoaded()) {\r\n            doIt();\r\n        }\r\n        else {\r\n            this.atlas.on('loaded', doIt);\r\n        }\r\n    }\r\n    /**\r\n     * The updateBillboard method.\r\n     * @param index - The index of the Billboard to update .\r\n     * @private\r\n     */\r\n    updateBillboard(index) {\r\n        if (this.drawCount == 0 || !this.drawItemsTexture) {\r\n            return;\r\n        }\r\n        const billboardData = this.billboards[index];\r\n        if (!billboardData.billboard.isVisible())\r\n            return;\r\n        const gl = this.__gl;\r\n        const dataArray = new Float32Array(pixelsPerItem * 4);\r\n        this.populateBillboardDataArray(billboardData, 0, dataArray);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.drawItemsTexture.glTex);\r\n        const xoffset = (index * pixelsPerItem) % this.width;\r\n        const yoffset = Math.floor((index * pixelsPerItem) / this.width);\r\n        const width = pixelsPerItem;\r\n        const height = 1;\r\n        const type = this.drawItemsTexture.getType();\r\n        const format = this.drawItemsTexture.getFormat();\r\n        if (type == gl.FLOAT) {\r\n            gl.texSubImage2D(gl.TEXTURE_2D, 0, xoffset, yoffset, width, height, format, type, dataArray);\r\n        }\r\n        else {\r\n            const unit16s = MathFunctions.convertFloat32ArrayToUInt16Array(dataArray);\r\n            gl.texSubImage2D(gl.TEXTURE_2D, 0, xoffset, yoffset, width, height, format, type, unit16s);\r\n        }\r\n    }\r\n    /**\r\n     * The sort method.\r\n     * @param cameraPos - The cameraPos value.\r\n     */\r\n    sort(cameraPos) {\r\n        for (const billboardData of this.billboards) {\r\n            const { billboard } = billboardData;\r\n            if (billboard && billboard.isVisible()) {\r\n                const xfo = billboard.globalXfoParam.value;\r\n                billboardData.dist = xfo.tr.distanceTo(cameraPos);\r\n            }\r\n        }\r\n        this.indexArray.sort((a, b) => {\r\n            if (a == -1)\r\n                return 1;\r\n            if (b == -1)\r\n                return -1;\r\n            return this.billboards[a].dist > this.billboards[b].dist\r\n                ? -1\r\n                : this.billboards[a].dist < this.billboards[b].dist\r\n                    ? 1\r\n                    : 0;\r\n        });\r\n        const gl = this.__gl;\r\n        if (gl.floatTexturesSupported && this.instanceIdsBuffer) {\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.instanceIdsBuffer);\r\n            gl.bufferData(gl.ARRAY_BUFFER, this.indexArray, gl.STATIC_DRAW);\r\n        }\r\n    }\r\n    /**\r\n     * Invoke the drawing of each item, compiling the shader using the provided key.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     * @param key - The key to cache the compiler results against.\r\n     */\r\n    __draw(renderstate, key) {\r\n        const gl = this.__gl;\r\n        if (!this.glshader)\r\n            return;\r\n        this.glshader.bind(renderstate, key);\r\n        this.shaderBinding.bind(renderstate);\r\n        const unifs = renderstate.unifs;\r\n        const { atlasBillboards, passId, floatGeomBuffer, inVR } = renderstate.unifs;\r\n        if (atlasBillboards) {\r\n            this.atlas.bindToUniform(renderstate, unifs.atlasBillboards);\r\n        }\r\n        if (floatGeomBuffer) {\r\n            gl.uniform1i(floatGeomBuffer.location, renderstate.floatGeomBuffer ? 1 : 0);\r\n        }\r\n        if (passId) {\r\n            gl.uniform1i(passId.location, this.passIndex);\r\n        }\r\n        if (inVR) {\r\n            gl.uniform1i(inVR.location, renderstate.vrPresenting ? 1 : 0);\r\n        }\r\n        if (!gl.floatTexturesSupported || !gl.drawElementsInstanced) {\r\n            const { modelMatrix, billboardData, tintColor, layoutData } = renderstate.unifs;\r\n            const len = this.indexArray.length;\r\n            for (let i = 0; i < len; i++) {\r\n                gl.uniformMatrix4fv(modelMatrix.location, false, this.modelMatrixArray[i]);\r\n                gl.uniform4fv(billboardData.location, this.billboardDataArray[i]);\r\n                gl.uniform4fv(tintColor.location, this.tintColorArray[i]);\r\n                gl.uniform4fv(layoutData.location, this.atlas.getLayoutData(this.billboards[i].imageIndex));\r\n                renderstate.bindViewports(unifs, () => {\r\n                    gl.drawQuad();\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            const { instancesTexture, instancesTextureSize } = renderstate.unifs;\r\n            this.drawItemsTexture.bindToUniform(renderstate, instancesTexture);\r\n            gl.uniform1i(instancesTextureSize.location, this.width);\r\n            {\r\n                // The instance billboard ids are bound as an instanced attribute.\r\n                const location = renderstate.attrs.instanceIds.location;\r\n                gl.enableVertexAttribArray(location);\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.instanceIdsBuffer);\r\n                gl.vertexAttribPointer(location, 1, gl.FLOAT, false, 4, 0);\r\n                gl.vertexAttribDivisor(location, 1); // This makes it instanced\r\n            }\r\n            renderstate.bindViewports(unifs, () => {\r\n                gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, this.drawCount);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * The sort method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    draw(renderstate) {\r\n        if (this.drawCount == 0)\r\n            return;\r\n        if (this.updateRequested) {\r\n            this.updateBillboards(renderstate);\r\n        }\r\n        if (this.dirtyBillboards.size > 0) {\r\n            this.dirtyBillboards.forEach((index) => {\r\n                this.updateBillboard(index);\r\n            });\r\n            this.dirtyBillboards.clear();\r\n        }\r\n        if (this.indexArrayUpdateNeeded)\r\n            this.updateIndexArray();\r\n        if (!this.glshader)\r\n            return;\r\n        const cameraPos = renderstate.viewXfo.tr;\r\n        const dist = cameraPos.distanceTo(this.prevSortCameraPos);\r\n        // Avoid sorting if the camera did not move more than 3 meters.\r\n        if (dist > this.threshold) {\r\n            this.sort(cameraPos);\r\n            this.prevSortCameraPos = cameraPos.clone();\r\n            if (this.drawCount > 1) {\r\n                const idx0 = this.indexArray[this.indexArray.length - 1];\r\n                const idx1 = this.indexArray[this.indexArray.length - 2];\r\n                const billboard0 = this.billboards[idx0].billboard;\r\n                const billboard1 = this.billboards[idx1].billboard;\r\n                const tr0 = billboard0.globalXfoParam.value.tr;\r\n                const tr1 = billboard1.globalXfoParam.value.tr;\r\n                this.threshold = tr0.distanceTo(tr1);\r\n            }\r\n            else {\r\n                this.threshold = 9999;\r\n            }\r\n        }\r\n        const gl = this.__gl;\r\n        gl.depthMask(false);\r\n        gl.disable(gl.CULL_FACE);\r\n        gl.enable(gl.BLEND);\r\n        gl.blendEquation(gl.FUNC_ADD);\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        this.__draw(renderstate, 'DRAW_COLOR');\r\n        gl.disable(gl.BLEND);\r\n        gl.depthMask(true);\r\n    }\r\n    /**\r\n     * The drawHighlightedGeoms method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    drawHighlightedGeoms(renderstate) {\r\n        if (this.drawCount == 0)\r\n            return;\r\n        this.__draw(renderstate, 'DRAW_HIGHLIGHT');\r\n    }\r\n    /**\r\n     * The drawGeomData method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    drawGeomData(renderstate) {\r\n        if (this.drawCount == 0)\r\n            return;\r\n        this.__draw(renderstate, 'DRAW_GEOMDATA');\r\n    }\r\n    /**\r\n     * The getGeomItemAndDist method.\r\n     * @param geomData - The geomData value.\r\n     * @return - The return value.\r\n     */\r\n    getGeomItemAndDist(geomData) {\r\n        let itemId;\r\n        let dist;\r\n        if (geomData instanceof Float32Array) {\r\n            itemId = Math.round(geomData[1]);\r\n            dist = geomData[3];\r\n        }\r\n        else {\r\n            itemId = geomData[0] + ((geomData[1] & 63) << 8);\r\n            dist = MathFunctions.decode16BitFloatFrom2xUInt8(geomData.slice(2, 3));\r\n        }\r\n        if (itemId >= this.billboards.length) {\r\n            console.warn('Invalid Draw Item id:' + itemId + ' NumBillboards:' + (this.billboards.length - 1));\r\n            return undefined;\r\n        }\r\n        return {\r\n            geomItem: this.billboards[itemId].billboard,\r\n            dist,\r\n        };\r\n    }\r\n}\r\nGLRenderer.registerPass(GLBillboardsPass, PassType.TRANSPARENT);\r\nexport { GLBillboardsPass };\r\n//# sourceMappingURL=GLBillboardsPass.js.map","import { PassType } from './GLPass';\r\nimport { GLOpaqueGeomsPass } from './GLOpaqueGeomsPass';\r\nimport { GLRenderer } from '../GLRenderer';\r\n/** Class representing a GL overlay pass.\r\n * @extends GLOpaqueGeomsPass\r\n */\r\nclass GLOverlayPass extends GLOpaqueGeomsPass {\r\n    /**\r\n     * Create a GL overlay pass.\r\n     * @param name - The name value.\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n    /**\r\n     * Returns the pass type. OPAQUE passes are always rendered first, followed by TRANSPARENT passes, and finally OVERLAY.\r\n     * @return - The pass type value.\r\n     */\r\n    getPassType() {\r\n        return PassType.OVERLAY;\r\n    }\r\n    // ///////////////////////////////////\r\n    // Bind to Render Tree\r\n    /**\r\n     * The filterGeomItem method.\r\n     * @param geomItem - The geomItem value.\r\n     * @return - The return value.\r\n     */\r\n    filterGeomItem(geomItem) {\r\n        if (geomItem.isOverlay())\r\n            return true;\r\n        const shaderClass = geomItem.materialParam.value.getShaderClass();\r\n        if (shaderClass) {\r\n            if (shaderClass.isOverlay())\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * The draw method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    draw(renderstate) {\r\n        const gl = this.__gl;\r\n        // Clear the depth buffer so handls are always drawn over the top.\r\n        gl.clear(gl.DEPTH_BUFFER_BIT);\r\n        if (false)\r\n            // 2-sided rendering.\r\n            gl.disable(gl.CULL_FACE);\r\n        // 2-sided rendering.\r\n        else {\r\n            gl.enable(gl.CULL_FACE);\r\n            gl.cullFace(gl.BACK);\r\n        }\r\n        gl.enable(gl.BLEND);\r\n        gl.blendEquation(gl.FUNC_ADD);\r\n        renderstate.pass = 'ADD';\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA); // For add\r\n        this.__traverseTreeAndDraw(renderstate);\r\n        gl.disable(gl.BLEND);\r\n        // gl.enable(gl.DEPTH_TEST);\r\n    }\r\n    /**\r\n     * The drawGeomData method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    drawGeomData(renderstate) {\r\n        const gl = this.__gl;\r\n        // Clear the depth buffer so handls are always drawn over the top.\r\n        gl.clear(gl.DEPTH_BUFFER_BIT);\r\n        gl.enable(gl.CULL_FACE);\r\n        gl.cullFace(gl.BACK);\r\n        gl.enable(gl.BLEND);\r\n        gl.blendEquation(gl.FUNC_ADD);\r\n        renderstate.pass = 'ADD';\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA); // For add\r\n        super.drawGeomData(renderstate);\r\n        gl.disable(gl.BLEND);\r\n        gl.enable(gl.DEPTH_TEST);\r\n    }\r\n}\r\nGLRenderer.registerPass(GLOverlayPass, PassType.OVERLAY);\r\nexport { GLOverlayPass };\r\n//# sourceMappingURL=GLOverlayPass.js.map","/* eslint-disable require-jsdoc */\r\nimport { GLShader } from '../GLShader';\r\nimport './GLSL/index';\r\n// @ts-ignore\r\nimport frag from './BoundingBox.frag';\r\n// @ts-ignore\r\nimport vert from './BoundingBox.vert';\r\nclass BoundingBoxShader extends GLShader {\r\n    /**\r\n     * Create a GL shader.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'BoundingBoxShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n        this.setShaderStage('FRAGMENT_SHADER', frag);\r\n    }\r\n}\r\nexport { BoundingBoxShader };\r\n//# sourceMappingURL=BoundingBoxShader.js.map","import packageJson from './package.json';\r\nimport { LibsRegistry } from './LibsRegistry';\r\nconst libsRegistry = new LibsRegistry(packageJson.version);\r\nconsole.log(`Zea Engine v${packageJson.version}`);\r\nexport * from './SystemDesc';\r\nexport * from './Registry';\r\nexport * from './Math/index';\r\nexport * from './Utilities/index';\r\nexport * from './SceneTree/index';\r\nexport * from './Renderer/index';\r\nexport { libsRegistry, packageJson };\r\n//# sourceMappingURL=index.js.map","/**\r\n * Libraries registry.\r\n */\r\nclass LibsRegistry {\r\n    /**\r\n     * Construct a new libraries registry for the specific version.\r\n     * @param version - The version of the Zea Engine that will be validated against the registered libraries.\r\n     */\r\n    constructor(version) {\r\n        this.version = version;\r\n        this.registry = {};\r\n    }\r\n    /**\r\n     * Validate and register a library.\r\n     * @param packageJson - The package.json of the library to register.\r\n     */\r\n    registerLib(packageJson) {\r\n        const libName = packageJson.name;\r\n        const libVersion = packageJson.version;\r\n        if (this.registry[libName]) {\r\n            console.warn(\"Library already registered:\" + libName);\r\n        }\r\n        this.registry[libName] = libVersion;\r\n        console.log(`Registered lib '${libName}' v${libVersion}`);\r\n    }\r\n    /**\r\n     * List the registered libraries with their versions.\r\n     * @return Libraries list.\r\n     */\r\n    listLibs() {\r\n        return this.registry;\r\n    }\r\n}\r\nexport { LibsRegistry };\r\n//# sourceMappingURL=LibsRegistry.js.map","import { MathFunctions } from '../Utilities/MathFunctions';\r\n/**\r\n * Writes `TypedArray` types in binary using a specific encoding.\r\n */\r\nclass BinWriter {\r\n    /**\r\n     * Create a bin writer.\r\n     * @param dataSize - The dataSize value.\r\n     */\r\n    constructor(dataSize = 0) {\r\n        this.__data = new ArrayBuffer(dataSize);\r\n        this.__byteOffset = 0;\r\n        this.__reserved = dataSize;\r\n        this.__dataView = new DataView(this.__data);\r\n    }\r\n    /**\r\n     * Returns the byte offset position.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    pos() {\r\n        return this.__byteOffset;\r\n    }\r\n    /**\r\n     * Sets byte offset value.\r\n     *\r\n     * @param byteOffset - The byteOffset value.\r\n     */\r\n    seek(byteOffset) {\r\n        this.__byteOffset = byteOffset;\r\n    }\r\n    /**\r\n     * The seekEnd method.\r\n     */\r\n    seekEnd() {\r\n        this.__byteOffset = this.__reserved;\r\n    }\r\n    /**\r\n     * Returns written buffer data to current point.\r\n     *\r\n     * @return - Returns an array buffer.\r\n     */\r\n    getBuffer() {\r\n        if (this.__data.byteLength == this.__byteOffset) {\r\n            return this.__data;\r\n        }\r\n        else {\r\n            const unit8Array = new Uint8Array(this.__data);\r\n            return unit8Array.slice(0, this.__byteOffset).buffer;\r\n        }\r\n    }\r\n    /**\r\n     * The __grow method.\r\n     * @private\r\n     */\r\n    __grow() {\r\n        const newSize = (this.__reserved > 0 ? this.__reserved : 1) * 2;\r\n        const data = new ArrayBuffer(newSize);\r\n        const unit8Array = new Uint8Array(data);\r\n        const old_unit8Array = new Uint8Array(this.__data);\r\n        unit8Array.set(old_unit8Array);\r\n        this.__data = data;\r\n        this.__dataView = new DataView(this.__data);\r\n        this.__reserved = newSize;\r\n    }\r\n    /**\r\n     * The __reserve method.\r\n     * @param offset - The offset value.\r\n     * @private\r\n     */\r\n    __reserve(offset) {\r\n        if (this.__byteOffset + offset > this.__reserved) {\r\n            this.__grow();\r\n        }\r\n    }\r\n    /**\r\n     * The __offset method.\r\n     * @param byteCount - The byteCount value.\r\n     * @private\r\n     */\r\n    __offset(byteCount) {\r\n        this.__byteOffset += byteCount;\r\n        if (this.__byteOffset > this.__reserved) {\r\n            this.__grow();\r\n        }\r\n    }\r\n    /**\r\n     * Writes an unsigned Int8 value in current byte offset.\r\n     *\r\n     * @param value - The value param.\r\n     */\r\n    writeUInt8(value) {\r\n        this.__reserve(1);\r\n        this.__dataView.setUint8(this.__byteOffset, value);\r\n        this.__offset(1);\r\n    }\r\n    /**\r\n     * Writes an unsigned Int16 value in current byte offset.\r\n     * @param value - The value param.\r\n     */\r\n    writeUInt16(value) {\r\n        this.__reserve(2);\r\n        this.__dataView.setUint16(this.__byteOffset, value, true);\r\n        this.__offset(2);\r\n    }\r\n    /**\r\n     * Writes an unsigned Int32 value in current byte offset.\r\n     * @param value - The value param.\r\n     */\r\n    writeUInt32(value) {\r\n        this.__reserve(4);\r\n        this.__dataView.setUint32(this.__byteOffset, value, true);\r\n        this.__offset(4);\r\n    }\r\n    /**\r\n     * Writes a signed Int32 value in current byte offset.\r\n     * @param value - The value param.\r\n     */\r\n    writeSInt32(value) {\r\n        this.__reserve(4);\r\n        this.__dataView.setInt32(this.__byteOffset, value, true);\r\n        this.__offset(4);\r\n    }\r\n    /**\r\n     * Writes a Float16 value in current byte offset.\r\n     *\r\n     * @param value - The value param.\r\n     */\r\n    writeFloat16(value) {\r\n        const uint16 = MathFunctions.encode16BitFloat(value);\r\n        this.writeUInt16(uint16);\r\n    }\r\n    /**\r\n     * Writes a Float32 value in current byte offset.\r\n     *\r\n     * @param value - The value param.\r\n     */\r\n    writeFloat32(value) {\r\n        this.__reserve(4);\r\n        this.__dataView.setFloat32(this.__byteOffset, value, true);\r\n        this.__offset(4);\r\n    }\r\n    /**\r\n     * Writes an unsigned Int8 array value from current byte offset.\r\n     *\r\n     * @param value - The value param.\r\n     * @param writeSize - The writeSize value.\r\n     */\r\n    writeUInt8Array(value, writeSize = true) {\r\n        const count = value.length ? value.length : value.length;\r\n        this.__reserve(count + (writeSize ? 4 : 0));\r\n        if (writeSize)\r\n            this.writeUInt32(count);\r\n        for (let i = 0; i < count; i++) {\r\n            this.writeUInt8(value[i]);\r\n        }\r\n    }\r\n    /**\r\n     * Writes an unsigned Int16 array value from current byte offset.\r\n     *\r\n     * @param value - The value param.\r\n     * @param writeSize - The writeSize value.\r\n     */\r\n    writeUInt16Array(value, writeSize = true) {\r\n        const count = value.length ? value.length : value.length;\r\n        this.__reserve(count * 2 + (writeSize ? 4 : 0));\r\n        if (writeSize)\r\n            this.writeUInt32(count);\r\n        for (let i = 0; i < count; i++) {\r\n            this.writeUInt16(value[i]);\r\n        }\r\n    }\r\n    /**\r\n     * Writes an unsigned Int32 array value from current byte offset.\r\n     *\r\n     * @param value - The value param.\r\n     * @param writeSize - The writeSize value.\r\n     */\r\n    writeUInt32Array(value, writeSize = true) {\r\n        const count = value.length ? value.length : value.length;\r\n        this.__reserve(count * 4 + (writeSize ? 4 : 0));\r\n        if (writeSize)\r\n            this.writeUInt32(count);\r\n        for (let i = 0; i < count; i++) {\r\n            this.writeUInt32(value[i]);\r\n        }\r\n    }\r\n    /**\r\n     * Writes a Float32 array value from current byte offset.\r\n     *\r\n     * @param value - The value param.\r\n     * @param writeSize - The writeSize value.\r\n     */\r\n    writeFloat32Array(value, writeSize = true) {\r\n        const count = value.length ? value.length : value.length;\r\n        this.__reserve(count * 4 + (writeSize ? 4 : 0));\r\n        if (writeSize)\r\n            this.writeUInt32(count);\r\n        for (let i = 0; i < count; i++) {\r\n            this.writeFloat32(value[i]);\r\n        }\r\n    }\r\n    /**\r\n     * Writes string value in current position, first writing an unsigned Int32 describing its length, then adding the string in Float32 values.\r\n     *\r\n     * @param str - The str value.\r\n     * @param writeSize - The writeSize value.\r\n     */\r\n    writeStr(str, writeSize = true) {\r\n        const count = str.length;\r\n        this.__reserve(count * 4 + (writeSize ? 4 : 0));\r\n        if (writeSize)\r\n            this.writeUInt32(count);\r\n        for (let i = 0; i < count; i++) {\r\n            this.writeFloat32(str.charCodeAt(i));\r\n        }\r\n    }\r\n    /**\r\n     * Writes a `Vec2` in the buffer using signed Int32 values(In `x,y` order).\r\n     * @param value - The Vec2 to write.\r\n     */\r\n    writeSInt32Vec2(value) {\r\n        this.writeSInt32(value.x);\r\n        this.writeSInt32(value.y);\r\n    }\r\n    /**\r\n     * Writes a `Vec2` in the buffer using unsigned Int32 values(In `x,y` order).\r\n     *\r\n     * @param value - The Vec2 to write.\r\n     */\r\n    writeUInt32Vec2(value) {\r\n        this.writeUInt32(value.x);\r\n        this.writeUInt32(value.y);\r\n    }\r\n    /**\r\n     * Writes a `Vec2` in the buffer using Float16 values(In `x,y` order).\r\n     * @param value - The Vec2 to write.\r\n     */\r\n    writeFloat16Vec2(value) {\r\n        this.writeFloat16(value.x);\r\n        this.writeFloat16(value.y);\r\n    }\r\n    /**\r\n     * Writes a `Vec2` in the buffer using Float32 values(In `x,y` order).\r\n     *\r\n     * @param value - The Vec2 to write.\r\n     */\r\n    writeFloat32Vec2(value) {\r\n        this.writeFloat32(value.x);\r\n        this.writeFloat32(value.y);\r\n    }\r\n    /**\r\n     * Writes a `Vec3` in the buffer using Float16 values(In `x,y,z` order).\r\n     *\r\n     * @param value - The Vec3 to write.\r\n     */\r\n    writeFloat16Vec3(value) {\r\n        this.writeFloat16(value.x);\r\n        this.writeFloat16(value.y);\r\n        this.writeFloat16(value.z);\r\n    }\r\n    /**\r\n     * Writes a `Vec3` in the buffer using Float32 values(In `x,y,z` order).\r\n     * @param value - The Vec3 to write.\r\n     */\r\n    writeFloat32Vec3(value) {\r\n        this.writeFloat32(value.x);\r\n        this.writeFloat32(value.y);\r\n        this.writeFloat32(value.z);\r\n    }\r\n    /**\r\n     * Writes a `Quat` in the buffer using Float16 values(In `x,y,z,w` order).\r\n     *\r\n     * @param value - The Quat to write.\r\n     */\r\n    writeFloat16Quat(value) {\r\n        this.writeFloat16(value.x);\r\n        this.writeFloat16(value.y);\r\n        this.writeFloat16(value.z);\r\n        this.writeFloat16(value.w);\r\n    }\r\n    /**\r\n     * Writes a `Quat` in the buffer using Float32 values(In `x,y,z,w` order).\r\n     *\r\n     * @param value - The Quat to write.\r\n     */\r\n    writeFloat32Quat(value) {\r\n        this.writeFloat32(value.x);\r\n        this.writeFloat32(value.y);\r\n        this.writeFloat32(value.z);\r\n        this.writeFloat32(value.w);\r\n    }\r\n    /**\r\n     * Writes a RGB `Color` in the buffer using Float32 values(In `r,g,b` order).\r\n     *\r\n     * @param value - The Color to write.\r\n     */\r\n    writeRGBFloat32Color(value) {\r\n        this.writeFloat32(value.r);\r\n        this.writeFloat32(value.g);\r\n        this.writeFloat32(value.b);\r\n    }\r\n    /**\r\n     * Writes a RGBA `Color` in the buffer using Float32 values(In `r,g,b,a` order).\r\n     *\r\n     * @param value - The Color to write.\r\n     */\r\n    writeRGBAFloat32Color(value) {\r\n        this.writeFloat32(value.r);\r\n        this.writeFloat32(value.g);\r\n        this.writeFloat32(value.b);\r\n        this.writeFloat32(value.a);\r\n    }\r\n    /**\r\n     * Writes a RGB `Color` in the buffer using unsigned Int8 values(In `r,g,b` order).\r\n     *\r\n     * @param value - The Color to write.\r\n     */\r\n    writeRGBUInt8Color(value) {\r\n        this.writeUInt8(value.r);\r\n        this.writeUInt8(value.g);\r\n        this.writeUInt8(value.b);\r\n    }\r\n    /**\r\n     * Writes a RGBA `Color` in the buffer using unsigned Int8 values(In `r,g,b,a` order).\r\n     *\r\n     * @param value - The Color to write.\r\n     */\r\n    writeRGBAUInt8Color(value) {\r\n        this.writeUInt8(value.r);\r\n        this.writeUInt8(value.g);\r\n        this.writeUInt8(value.b);\r\n        this.writeUInt8(value.a);\r\n    }\r\n    /**\r\n     * Writes a `Box2` in the buffer using Floar32 values(In `p0,p1` order).\r\n     *\r\n     * @param value - The Box2 to write.\r\n     */\r\n    writeBox2(value) {\r\n        this.writeFloat32Vec2(value.p0);\r\n        this.writeFloat32Vec2(value.p1);\r\n    }\r\n    /**\r\n     * Writes a `Box3` in the buffer using Floar32 values(In `p0,p1` order).\r\n     *\r\n     * @param value - The Box3 to write.\r\n     */\r\n    writeBox3(value) {\r\n        this.writeFloat32Vec3(value.p0);\r\n        this.writeFloat32Vec3(value.p1);\r\n    }\r\n    /**\r\n     * The writePadd method.\r\n     * @param size - The size value.\r\n     */\r\n    writePadd(size) {\r\n        const bytes = size - this.__byteOffset;\r\n        this.__reserve(bytes);\r\n        this.__offset(bytes);\r\n    }\r\n    /**\r\n     * The writeAlignment method.\r\n     * @param numBytes - The numBytes value.\r\n     */\r\n    writeAlignment(numBytes) {\r\n        const bytes = this.__byteOffset % numBytes;\r\n        if (bytes != 0) {\r\n            this.__reserve(numBytes - bytes);\r\n            this.__offset(numBytes - bytes);\r\n        }\r\n    }\r\n}\r\nexport { BinWriter };\r\n//# sourceMappingURL=BinWriter.js.map","/* eslint-disable new-cap */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { StringFunctions } from '../Utilities/StringFunctions';\r\nimport { Vec3 } from './Vec3';\r\nimport { PlaneType } from './PlaneType';\r\n/**\r\n * Class representing a Frustum. Frustums are used to determine what\r\n * is inside the camera's field of view.\r\n * @private\r\n * */\r\nclass Frustum {\r\n    /**\r\n     * Create a Frustum\r\n     * @param p0 - the p0 value.\r\n     * @param p1 - the p1 value.\r\n     * @param p2 - the p2 value.\r\n     * @param p3 - the p3 value.\r\n     * @param p4 - the p4 value.\r\n     * @param p5 - the p5 value.\r\n     */\r\n    constructor(p0, p1, p2, p3, p4, p5) {\r\n        this.planes = [\r\n            p0 || new PlaneType(),\r\n            p1 || new PlaneType(),\r\n            p2 || new PlaneType(),\r\n            p3 || new PlaneType(),\r\n            p4 || new PlaneType(),\r\n            p5 || new PlaneType(),\r\n        ];\r\n    }\r\n    /**\r\n     * The setFromMatrix configures a Frustum object using a matrix.\r\n     * Typically the matrix is a model view projection matrix.\r\n     * @param mat4 - The matrix to use.\r\n     */\r\n    setFromMatrix(mat4) {\r\n        const m = mat4;\r\n        const planes = this.planes;\r\n        planes[0].set(m.m03 - m.m00, m.m13 - m.m10, m.m23 - m.m20, m.m33 - m.m30);\r\n        planes[1].set(m.m03 + m.m00, m.m13 + m.m10, m.m23 + m.m20, m.m33 + m.m30);\r\n        planes[2].set(m.m03 + m.m01, m.m13 + m.m11, m.m23 + m.m21, m.m33 + m.m31);\r\n        planes[3].set(m.m03 - m.m01, m.m13 - m.m11, m.m23 - m.m21, m.m33 - m.m31);\r\n        planes[4].set(m.m03 - m.m02, m.m13 - m.m12, m.m23 - m.m22, m.m33 - m.m32);\r\n        planes[5].set(m.m03 + m.m02, m.m13 + m.m12, m.m23 + m.m22, m.m33 + m.m32);\r\n        planes.forEach((plane) => plane.normalizeInPlace());\r\n    }\r\n    /**\r\n     * Tests a box to see if it is entirely within the frustum.\r\n     * @param box3 - The box to test.\r\n     * @return - True if the frustum intersects the box.\r\n     */\r\n    intersectsBox(box3) {\r\n        const p = new Vec3();\r\n        const planes = this.planes;\r\n        const { min, max } = box3;\r\n        for (let i = 0; i < 6; i++) {\r\n            const plane = planes[i];\r\n            // corner at max distance\r\n            p.x = plane.normal.x > 0 ? max.x : min.x;\r\n            p.y = plane.normal.y > 0 ? max.y : min.y;\r\n            p.z = plane.normal.z > 0 ? max.z : min.z;\r\n            if (plane.distanceToPoint(p) < 0)\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    // ////////////////////////////////////////\r\n    // Persistence\r\n    /**\r\n     * The toJSON method encodes this type as a json object for persistence.\r\n     *\r\n     * @return - The json object.\r\n     */\r\n    toJSON() {\r\n        return {\r\n            p0: this.planes[0].toJSON(),\r\n            p1: this.planes[1].toJSON(),\r\n            p2: this.planes[2].toJSON(),\r\n            p3: this.planes[3].toJSON(),\r\n            p4: this.planes[4].toJSON(),\r\n            p5: this.planes[5].toJSON(),\r\n        };\r\n    }\r\n    /**\r\n     * The fromJSON method decodes a json object for this type.\r\n     *\r\n     * @param j - The json object.\r\n     */\r\n    fromJSON(j) {\r\n        this.planes[0].fromJSON(j.p0);\r\n        this.planes[1].fromJSON(j.p1);\r\n        this.planes[2].fromJSON(j.p2);\r\n        this.planes[3].fromJSON(j.p3);\r\n        this.planes[4].fromJSON(j.p4);\r\n        this.planes[5].fromJSON(j.p5);\r\n    }\r\n    /**\r\n     * Calls `toJSON` method and stringifies it.\r\n     *\r\n     * @return - The return value.\r\n     */\r\n    toString() {\r\n        return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());\r\n    }\r\n}\r\nexport { Frustum };\r\n//# sourceMappingURL=Frustum.js.map","import { Color, Vec4 } from '../../Math/index';\r\nimport { LinesCuboid, TreeItem } from '../../SceneTree/index';\r\nimport { BoundingBoxShader } from '../Shaders/BoundingBoxShader';\r\nimport { GLLines } from '../Drawing/GLLines';\r\nimport { GLPass, PassType } from './GLPass';\r\nimport { GLTexture2D } from '../GLTexture2D';\r\nimport { MathFunctions } from '../../Utilities/MathFunctions';\r\nconst pixelsPerItem = 6; // The number of pixels per draw item.\r\n/** Class representing a GL treeitems pass.\r\n * @extends GLPass\r\n * @private\r\n */\r\nclass GLBoundingBoxPass extends GLPass {\r\n    /**\r\n     * Create a GL treeitems pass.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.boxes = [];\r\n        this.dirtyBoxes = new Set();\r\n        this.freeIndices = [];\r\n        this.idToIndex = [];\r\n        this.drawCount = 0;\r\n        this.indexArrayUpdateNeeded = false;\r\n        this.__updateRequested = false;\r\n        this.__modelMatrixArray = [];\r\n        this.__treeitemDataArray = [];\r\n        this.__tintColorArray = [];\r\n        this.__indexArray = new Float32Array(0);\r\n        this.__width = 0;\r\n    }\r\n    /**\r\n     * The getPassType method.\r\n     * @return - The pass type value.\r\n     */\r\n    getPassType() {\r\n        return PassType.OPAQUE;\r\n    }\r\n    /**\r\n     * The init method.\r\n     * @param renderer - The renderer value.\r\n     * @param passIndex - The index of the pass in the GLBAseRenderer\r\n     */\r\n    init(renderer, passIndex) {\r\n        super.init(renderer, passIndex);\r\n        const gl = this.__renderer.gl;\r\n        this.glgeom = new GLLines(gl, new LinesCuboid(1, 1, 1));\r\n        this.glshader = new BoundingBoxShader(gl);\r\n    }\r\n    /**\r\n     * The itemAddedToScene method is called on each pass when a new item\r\n     * is added to the scene, and the renderer must decide how to render it.\r\n     * It allows Passes to select geometries to handle the drawing of.\r\n     * @param treeItem - The treeItem value.\r\n     * @param rargs - Extra return values are passed back in this object.\r\n     * The object contains a parameter 'continueInSubTree', which can be set to false,\r\n     * so the subtree of this node will not be traversed after this node is handled.\r\n     * @return - The return value.\r\n     */\r\n    itemAddedToScene(treeItem, rargs) {\r\n        // if (treeItem instanceof TreeItem) {\r\n        //   this.bindTreeItem(treeItem)\r\n        //   return false\r\n        // }\r\n        return false;\r\n    }\r\n    /**\r\n     * The itemRemovedFromScene method is called on each pass when aa item\r\n     * is removed to the scene, and the pass must handle cleaning up any resources.\r\n     * @param treeItem - The treeItem value.\r\n     * @param rargs - Extra return values are passed back in this object.\r\n     * @return - The return value.\r\n     */\r\n    itemRemovedFromScene(treeItem, rargs) {\r\n        // if (treeItem instanceof TreeItem) {\r\n        //   this.unbindTreeItem(treeItem)\r\n        //   return true\r\n        // }\r\n        return false;\r\n    }\r\n    // ///////////////////////////////////\r\n    // Bind to Render Tree\r\n    /**\r\n     * Adds tree items to the renderer, selecting the correct pass to delegate rendering too, and listens to future changes in the tree.\r\n     *\r\n     * @param treeItem - The tree item to add.\r\n     */\r\n    addTreeItem(treeItem, continueIntoSubTree = true) {\r\n        // Note: we can have BaseItems in the tree now.\r\n        if (!(treeItem instanceof TreeItem))\r\n            return;\r\n        this.bindTreeItem(treeItem);\r\n        if (continueIntoSubTree) {\r\n            // Traverse the tree adding items until we hit the leaves (which are usually GeomItems.)\r\n            for (const childItem of treeItem.getChildren()) {\r\n                if (childItem)\r\n                    this.addTreeItem(childItem);\r\n            }\r\n            treeItem.on('childAdded', (event) => {\r\n                this.addTreeItem(event.childItem);\r\n            });\r\n            treeItem.on('childRemoved', (event) => {\r\n                this.unbindTreeItem(event.childItem);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * The bindTreeItem method.\r\n     * @param treeitem - The treeitem value.\r\n     */\r\n    bindTreeItem(treeitem) {\r\n        let index;\r\n        let index_check = this.freeIndices.pop();\r\n        if (index_check)\r\n            index = index_check;\r\n        else\r\n            index = this.boxes.length;\r\n        this.idToIndex[treeitem.getId()] = index;\r\n        const visibilityChanged = () => {\r\n            if (treeitem.isVisible()) {\r\n                this.drawCount++;\r\n                // The treeitem Xfo might have changed while it was\r\n                // not visible. We need to update here.\r\n                this.dirtyBoxes.add(index);\r\n            }\r\n            else\r\n                this.drawCount--;\r\n            this.indexArrayUpdateNeeded = true;\r\n        };\r\n        treeitem.on('visibilityChanged', visibilityChanged);\r\n        const xfoChanged = () => {\r\n            if (treeitem.isVisible()) {\r\n                this.dirtyBoxes.add(index);\r\n                this.emit('updated');\r\n            }\r\n        };\r\n        treeitem.globalXfoParam.on('valueChanged', xfoChanged);\r\n        treeitem.boundingBoxParam.on('valueChanged', xfoChanged);\r\n        if (treeitem.isVisible())\r\n            this.drawCount++;\r\n        // TODO: make this a type\r\n        this.boxes[index] = {\r\n            treeitem,\r\n            visibilityChanged,\r\n            xfoChanged,\r\n        };\r\n        this.indexArrayUpdateNeeded = true;\r\n        this.__updateRequested = true;\r\n        this.emit('updated');\r\n    }\r\n    /**\r\n     * The unbindTreeItem method.\r\n     * @param treeitem - The treeitem value.\r\n     */\r\n    unbindTreeItem(treeitem) {\r\n        if (!(treeitem.getId() in this.idToIndex)) {\r\n            console.warn('Billboard already removed.');\r\n            return;\r\n        }\r\n        const index = this.idToIndex[treeitem.getId()];\r\n        const treeitemData = this.boxes[index];\r\n        treeitem.off('visibilityChanged', treeitemData.visibilityChanged);\r\n        treeitem.globalXfoParam.off('valueChanged', treeitemData.xfoChanged);\r\n        treeitem.boundingBoxParam.off('valueChanged', treeitemData.xfoChanged);\r\n        this.boxes[index] = null;\r\n        this.freeIndices.push(index);\r\n        if (treeitem.isVisible())\r\n            this.drawCount--;\r\n        this.indexArrayUpdateNeeded = true;\r\n        this.__updateRequested = true;\r\n        this.__updateBoxes();\r\n        this.emit('updated');\r\n    }\r\n    /**\r\n     * The __populateBoxesDataArray method.\r\n     * @param treeitemData - The treeitemData value.\r\n     * @param index - The index value.\r\n     * @param dataArray - The dataArray value.\r\n     * @private\r\n     */\r\n    __populateBoxesDataArray(treeitemData, index, dataArray) {\r\n        const treeitem = treeitemData.treeitem;\r\n        const globalXfoParam = treeitem.globalXfoParam;\r\n        const geomMatParam = treeitem.geomMatParam;\r\n        const color = geomMatParam ? new Color(1, 0, 0, 1) : new Color(0, 0, 1, 1);\r\n        const mat4 = geomMatParam ? geomMatParam.value : globalXfoParam.value.toMat4();\r\n        const bbox = treeitem.boundingBoxParam.value;\r\n        const offset = index * pixelsPerItem * 4;\r\n        const pixel0 = new Vec4(new Float32Array(dataArray.buffer, offset * 4, 4));\r\n        const pixel1 = new Vec4(new Float32Array(dataArray.buffer, (offset + 4) * 4, 4));\r\n        const pixel2 = new Vec4(new Float32Array(dataArray.buffer, (offset + 8) * 4, 4));\r\n        const pixel3 = new Vec4(new Float32Array(dataArray.buffer, (offset + 12) * 4, 4));\r\n        const pixel4 = new Vec4(new Float32Array(dataArray.buffer, (offset + 16) * 4, 4));\r\n        const pixel5 = new Vec4(new Float32Array(dataArray.buffer, (offset + 20) * 4, 4));\r\n        pixel0.set(mat4.xAxis.x, mat4.yAxis.x, mat4.zAxis.x, mat4.translation.x);\r\n        pixel1.set(mat4.xAxis.y, mat4.yAxis.y, mat4.zAxis.y, mat4.translation.y);\r\n        pixel2.set(mat4.xAxis.z, mat4.yAxis.z, mat4.zAxis.z, mat4.translation.z);\r\n        pixel3.set(bbox.p0.x, bbox.p0.y, bbox.p0.z, 0.0);\r\n        pixel4.set(bbox.p1.x, bbox.p1.y, bbox.p1.z, 0.0);\r\n        pixel5.set(color.r, color.g, color.b, color.a);\r\n    }\r\n    // eslint-disable-next-line require-jsdoc\r\n    __updateIndexArray() {\r\n        const gl = this.__gl;\r\n        // Note: When the camera moves, this array is sorted and re-upload.\r\n        if (this.__indexArray && this.__indexArray.length != this.drawCount) {\r\n            gl.deleteBuffer(this.__instanceIdsBuffer);\r\n            this.__instanceIdsBuffer = undefined;\r\n        }\r\n        this.__indexArray = new Float32Array(this.drawCount);\r\n        let offset = 0;\r\n        for (let i = 0; i < this.boxes.length; i++) {\r\n            if (this.boxes[i] && this.boxes[i].treeitem.isVisible()) {\r\n                this.__indexArray[offset] = i;\r\n                offset++;\r\n            }\r\n        }\r\n        if (!this.__instanceIdsBuffer)\r\n            this.__instanceIdsBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.__instanceIdsBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.__indexArray, gl.STATIC_DRAW);\r\n        this.indexArrayUpdateNeeded = false;\r\n    }\r\n    /**\r\n     * The __updateBoxes method.\r\n     * @private\r\n     */\r\n    __updateBoxes() {\r\n        if (this.indexArrayUpdateNeeded)\r\n            this.__updateIndexArray();\r\n        const gl = this.__renderer.gl;\r\n        let size = Math.round(Math.sqrt((this.boxes.length - this.freeIndices.length) * pixelsPerItem) + 0.5);\r\n        // Note: the following few lines need a cleanup.\r\n        // We should be using power of 2 textures. The problem is that pot texture sizes don't\r\n        // align with the 6 pixels per draw item. So we need to upload a slightly bigger texture\r\n        // but upload the 'usable' size.\r\n        // Only support power 2 textures. Else we get strange corruption on some GPUs\r\n        // in some scenes.\r\n        // Size should be a multiple of pixelsPerItem, so each geom item is always contiguous\r\n        // in memory. (makes updating a lot easier. See __updateItemInstanceData below)\r\n        // size = Math.nextPow2(size);\r\n        if (size % pixelsPerItem != 0)\r\n            size += pixelsPerItem - (size % pixelsPerItem);\r\n        this.__width = size;\r\n        // if((this.__width % pixelsPerItem) != 0)\r\n        //     this.__width -= (this.__width % pixelsPerItem);\r\n        if (!this.__drawItemsTexture) {\r\n            this.__drawItemsTexture = new GLTexture2D(gl, {\r\n                format: 'RGBA',\r\n                type: 'FLOAT',\r\n                width: size,\r\n                height: size,\r\n                filter: 'NEAREST',\r\n                wrap: 'CLAMP_TO_EDGE',\r\n                mipMapped: false,\r\n            });\r\n            this.__drawItemsTexture.clear();\r\n        }\r\n        else {\r\n            this.__drawItemsTexture.resize(size, size);\r\n        }\r\n        this.__indexArray.forEach((index) => {\r\n            if (index != -1)\r\n                this.__updateBox(index);\r\n        });\r\n        this.__updateRequested = false;\r\n    }\r\n    /**\r\n     * The __updateBoxes method.\r\n     * @param index - The index value.\r\n     * @private\r\n     */\r\n    __updateBox(index) {\r\n        if (this.drawCount == 0 || !this.__drawItemsTexture) {\r\n            return;\r\n        }\r\n        const treeitemData = this.boxes[index];\r\n        if (!treeitemData.treeitem.isVisible())\r\n            return;\r\n        const gl = this.__gl;\r\n        const dataArray = new Float32Array(pixelsPerItem * 4);\r\n        this.__populateBoxesDataArray(treeitemData, 0, dataArray);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.__drawItemsTexture.glTex);\r\n        const xoffset = (index * pixelsPerItem) % this.__width;\r\n        const yoffset = Math.floor((index * pixelsPerItem) / this.__width);\r\n        const width = pixelsPerItem;\r\n        const height = 1;\r\n        const type = this.__drawItemsTexture.getType();\r\n        const format = this.__drawItemsTexture.getFormat();\r\n        if (type == gl.FLOAT) {\r\n            gl.texSubImage2D(gl.TEXTURE_2D, 0, xoffset, yoffset, width, height, format, type, dataArray);\r\n        }\r\n        else {\r\n            const unit16s = MathFunctions.convertFloat32ArrayToUInt16Array(dataArray);\r\n            gl.texSubImage2D(gl.TEXTURE_2D, 0, xoffset, yoffset, width, height, format, type, unit16s);\r\n        }\r\n    }\r\n    /**\r\n     * The sort method.\r\n     * @param renderstate - The object tracking the current state of the renderer\r\n     */\r\n    draw(renderstate) {\r\n        if (this.drawCount == 0) {\r\n            return;\r\n        }\r\n        if (this.__updateRequested) {\r\n            this.__updateBoxes();\r\n        }\r\n        if (this.dirtyBoxes.size > 0) {\r\n            this.dirtyBoxes.forEach((index) => {\r\n                this.__updateBox(index);\r\n            });\r\n            this.dirtyBoxes.clear();\r\n        }\r\n        if (this.indexArrayUpdateNeeded)\r\n            this.__updateIndexArray();\r\n        const gl = this.__gl;\r\n        // gl.disable(gl.CULL_FACE)\r\n        // gl.enable(gl.BLEND)\r\n        // gl.blendEquation(gl.FUNC_ADD)\r\n        // gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n        this.glshader.bind(renderstate);\r\n        this.glgeom.bind(renderstate);\r\n        const unifs = renderstate.unifs;\r\n        if (!gl.floatTexturesSupported || !gl.drawElementsInstanced) {\r\n            const len = this.__indexArray.length;\r\n            for (let i = 0; i < len; i++) {\r\n                // gl.uniformMatrix4fv(unifs.modelMatrix.location, false, this.__modelMatrixArray[i])\r\n                // gl.uniform4fv(unifs.treeitemData.location, this.__treeitemDataArray[i])\r\n                // gl.uniform4fv(unifs.tintColor.location, this.__tintColorArray[i])\r\n                renderstate.bindViewports(unifs, () => {\r\n                    gl.drawQuad();\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.__drawItemsTexture.bindToUniform(renderstate, unifs.instancesTexture);\r\n            gl.uniform1i(unifs.instancesTextureSize.location, this.__width);\r\n            {\r\n                // The instance transform ids are bound as an instanced attribute.\r\n                const location = renderstate.attrs.instanceIds.location;\r\n                gl.enableVertexAttribArray(location);\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.__instanceIdsBuffer);\r\n                gl.vertexAttribPointer(location, 1, gl.FLOAT, false, 4, 0);\r\n                gl.vertexAttribDivisor(location, 1); // This makes it instanced\r\n            }\r\n            renderstate.bindViewports(unifs, () => {\r\n                this.glgeom.drawInstanced(renderstate, this.drawCount);\r\n            });\r\n        }\r\n        // gl.disable(gl.BLEND)\r\n    }\r\n}\r\nexport { GLBoundingBoxPass };\r\n//# sourceMappingURL=GLBoundingBoxPass.js.map","/* eslint-disable require-jsdoc */\r\nimport { GLShader } from '../GLShader';\r\nimport './GLSL/index';\r\n// @ts-ignore\r\nimport frag from './Normals.frag';\r\n// @ts-ignore\r\nimport vert from './Normals.vert';\r\nclass NormalsShader extends GLShader {\r\n    /**\r\n     * Create a GL shader.\r\n     * @param gl - The webgl rendering context.\r\n     */\r\n    constructor(gl) {\r\n        super(gl, 'NormalsShader');\r\n        this.setShaderStage('VERTEX_SHADER', vert);\r\n        this.setShaderStage('FRAGMENT_SHADER', frag);\r\n    }\r\n}\r\nexport { NormalsShader };\r\n//# sourceMappingURL=NormalsShader.js.map","import { __awaiter } from \"tslib\";\r\n/* eslint-disable guard-for-in */\r\n/* eslint-disable camelcase */\r\n/* eslint-disable no-array-constructor */\r\nimport { Vec2, Vec3, Xfo, Color } from '../Math/index';\r\nimport { GeomItem } from './GeomItem';\r\nimport { AssetItem } from './AssetItem';\r\nimport { Mesh } from './Geometry/Mesh';\r\nimport { loadTextfile } from './Utils';\r\nimport { Material } from './Material';\r\nimport { FileImage } from './Images/FileImage';\r\nimport { resourceLoader } from './resourceLoader';\r\nimport { BooleanParameter, NumberParameter, StringParameter } from './Parameters/index';\r\nimport { Vec3Attribute } from './Geometry/Vec3Attribute';\r\nimport { Vec2Attribute } from './Geometry/Vec2Attribute';\r\n// AssetItem.registerDataLoader('.obj', ObjDataLoader);\r\n/**\r\n * Class designed to load and handle `.obj` files.\r\n * Which define the geometry and other properties for objects.\r\n *\r\n * **Parameters**\r\n * * **splitObjects(`BooleanParameter`):** _todo_\r\n * * **splitGroupsIntoObjects(`BooleanParameter`):** _todo_\r\n * * **loadMtlFile(`BooleanParameter`):** _todo_\r\n * * **unitsConversion(`NumberParameter`):** _todo_\r\n * * **defaultShader(`StringParameter`):** _todo_\r\n *\r\n * **Events**\r\n * * **loaded:** Triggered once everything is loaded.\r\n * * **geomsLoaded:** Triggered once all geometries are loaded.\r\n *\r\n * @extends AssetItem\r\n */\r\nclass ObjAsset extends AssetItem {\r\n    constructor(name) {\r\n        super(name);\r\n        this.splitObjects = new BooleanParameter('splitObjects', false);\r\n        this.splitGroupsIntoObjects = new BooleanParameter('splitGroupsIntoObjects', false);\r\n        this.loadMtlFile = new BooleanParameter('loadMtlFile', true);\r\n        this.unitsConversion = new NumberParameter('unitsConversion', 1.0);\r\n        this.defaultShader = new StringParameter('defaultShader', '');\r\n        /**\r\n         * Create an obj asset.\r\n         * @param name - The name of the object asset.\r\n         */\r\n        /**\r\n         * @member splitObjectsParam - TODO\r\n         */\r\n        this.splitObjectsParam = new BooleanParameter('splitObjects', false);\r\n        /**\r\n         * @member splitGroupsIntoObjectsParam - TODO\r\n         */\r\n        this.splitGroupsIntoObjectsParam = new BooleanParameter('splitGroupsIntoObjects', false);\r\n        /**\r\n         * @member loadMtlFileParam - TODO\r\n         */\r\n        this.loadMtlFileParam = new BooleanParameter('loadMtlFile', true);\r\n        /**\r\n         * @member unitsConversionParam - TODO\r\n         */\r\n        this.unitsConversionParam = new NumberParameter('unitsConversion', 1.0);\r\n        /**\r\n         * @member defaultShaderParam - The default shader to use.\r\n         */\r\n        this.defaultShaderParam = new StringParameter('defaultShader', '');\r\n        this.addParameter(this.splitObjectsParam);\r\n        this.addParameter(this.splitGroupsIntoObjectsParam);\r\n        this.addParameter(this.loadMtlFileParam);\r\n        this.addParameter(this.unitsConversionParam);\r\n        this.addParameter(this.defaultShaderParam);\r\n    }\r\n    /**\r\n     * Loads all the geometries and metadata from the Obj file.\r\n     * @param url - The URL of the asset to load\r\n     * @return - Returns a promise that resolves once the initial load is complete\r\n     */\r\n    load(url) {\r\n        this.loaded = false;\r\n        return new Promise((resolve, reject) => {\r\n            const fileFolder = url.substring(0, url.lastIndexOf('/')) + '/';\r\n            const parseMtlData = (mtlFileData) => {\r\n                const lines = mtlFileData.split('\\n');\r\n                const WHITESPACE_RE = /\\s+/;\r\n                let material;\r\n                const parseColor = function (elements) {\r\n                    if (elements.length == 3)\r\n                        return new Color(parseFloat(elements[0]), parseFloat(elements[1]), parseFloat(elements[2]));\r\n                    else\r\n                        throw new Error('Unable to parse a color from the following parts:' + elements.join('_'));\r\n                };\r\n                const parseMap = (name, filename) => {\r\n                    const fileImage = new FileImage(name);\r\n                    fileImage.load(fileFolder + filename);\r\n                    return fileImage;\r\n                };\r\n                for (let i = 0; i < lines.length; i++) {\r\n                    let line = lines[i].trim();\r\n                    if (line.startsWith('#'))\r\n                        continue;\r\n                    if (line.includes('#'))\r\n                        line = line.substring(0, line.indexOf('#')).trim();\r\n                    const elements = line.split(WHITESPACE_RE);\r\n                    const key = elements.shift();\r\n                    const value = elements.join(' ');\r\n                    if (material == undefined)\r\n                        throw Error('no material defined.');\r\n                    switch (key) {\r\n                        case 'newmtl':\r\n                            material = new Material(value);\r\n                            material.setShaderName('StandardSurfaceShader');\r\n                            this.materialLibrary.addMaterial(material);\r\n                            break;\r\n                        case 'Kd':\r\n                            material.getParameter('BaseColor').value = parseColor(elements);\r\n                            break;\r\n                        case 'map_Kd':\r\n                            material.getParameter('BaseColor').value = parseMap('map_Kd', elements[0]);\r\n                            break;\r\n                        case 'Ks':\r\n                            const specular = (parseFloat(elements[0]) + parseFloat(elements[1]) + parseFloat(elements[2])) / 3.0;\r\n                            material.getParameter('Roughness').value = 1.0 - specular;\r\n                            material.getParameter('Reflectance').value = specular;\r\n                            break;\r\n                        case 'map_Ks':\r\n                            material.getParameter('Roughness').value = parseMap('map_Ks', elements[0] /* flags=TEXTURE_INVERT */);\r\n                            material.getParameter('Reflectance').value = 0.2;\r\n                            break;\r\n                        case 'd':\r\n                            const d = parseFloat(value);\r\n                            if (d < 1.0) {\r\n                                material.setShaderName('TransparentSurfaceShader');\r\n                                material.getParameter('Opacity').value = d;\r\n                            }\r\n                            break;\r\n                        case 'map_d':\r\n                            material.getParameter('alpha').value = parseFloat(elements[0]);\r\n                            break;\r\n                        case 'map_bump':\r\n                            material.getParameter('normal').value = parseMap('map_Ks', elements[0] /* flags=BUMP_TO_NORMAL */);\r\n                            break;\r\n                        default:\r\n                        // console.warn(\"Unhandled material parameter: '\" + key +\"' in:\" + filePath);\r\n                    }\r\n                }\r\n            };\r\n            const loadMtlFile = (mtlFile) => {\r\n                return new Promise((resolve) => {\r\n                    loadTextfile(mtlFile, (fileData) => {\r\n                        resourceLoader.incrementWorkDone(1);\r\n                        parseMtlData(fileData);\r\n                        resourceLoader.incrementWorkDone(1);\r\n                        resolve();\r\n                    });\r\n                });\r\n            };\r\n            const vertices = [];\r\n            const normals = [];\r\n            const texCoords = [];\r\n            const geomDatas = {};\r\n            const parseObjData = (fileData) => __awaiter(this, void 0, void 0, function* () {\r\n                // performance.mark(\"parseObjData\");\r\n                // array of lines separated by the newline\r\n                const lines = fileData.split('\\n');\r\n                const WHITESPACE_RE = /\\s+/;\r\n                let currGeom = undefined;\r\n                let currMtl = undefined;\r\n                let numGeoms = 0;\r\n                const newGeom = (name) => {\r\n                    if (name in geomDatas) {\r\n                        let suffix = 1;\r\n                        while (name + String(suffix) in geomDatas) {\r\n                            suffix++;\r\n                        }\r\n                        name = name + String(suffix);\r\n                    }\r\n                    currGeom = {\r\n                        verticesRemapping: {},\r\n                        texCoordsRemapping: {},\r\n                        normalsRemapping: {},\r\n                        vertexIndices: [],\r\n                        texCoordIndices: [],\r\n                        normalIndices: [],\r\n                        numVertices: 0,\r\n                        numTexCoords: 0,\r\n                        numNormals: 0,\r\n                        faceCounts: [],\r\n                        material: currMtl,\r\n                    };\r\n                    geomDatas[name] = currGeom;\r\n                    numGeoms++;\r\n                };\r\n                newGeom('geom');\r\n                const splitGroupsIntoObjects = this.splitGroupsIntoObjectsParam.value;\r\n                const stop = false;\r\n                // let numPolys = 0;\r\n                for (let i = 0; i < lines.length && !stop; i++) {\r\n                    let line = lines[i].trim();\r\n                    if (line.startsWith('#'))\r\n                        continue;\r\n                    if (line.includes('#'))\r\n                        line = line.substring(0, line.indexOf('#')).trim();\r\n                    const elements = line.split(WHITESPACE_RE);\r\n                    const key = elements.shift();\r\n                    const value = elements.join(' ');\r\n                    switch (key) {\r\n                        case '':\r\n                        case 's':\r\n                            // ignore shading groups\r\n                            continue;\r\n                        case 'mtllib':\r\n                            if (!this.loadMtlFileParam.value)\r\n                                continue;\r\n                            // Load and parse the mat lib.\r\n                            resourceLoader.incrementWorkload(2);\r\n                            const mtlFile = fileFolder + value;\r\n                            if (mtlFile) {\r\n                                yield loadMtlFile(mtlFile);\r\n                            }\r\n                            break;\r\n                        case 'o':\r\n                            newGeom(value);\r\n                            break;\r\n                        case 'usemtl':\r\n                            currMtl = value;\r\n                            newGeom(value + Object.keys(geomDatas).length);\r\n                            break;\r\n                        case 'g':\r\n                            if (splitGroupsIntoObjects) {\r\n                                newGeom(value ? elements.join('_') : 'Group' + numGeoms);\r\n                            }\r\n                            break;\r\n                        case 'v':\r\n                            vertices.push(elements.map((i) => parseFloat(i)));\r\n                            break;\r\n                        case 'vt':\r\n                            texCoords.push(elements.map((i) => parseFloat(i)));\r\n                            break;\r\n                        case 'vn':\r\n                            normals.push(elements.map((i) => parseFloat(i)));\r\n                            break;\r\n                        case 'f': {\r\n                            const v_poly = [];\r\n                            const vt_poly = [];\r\n                            const vn_poly = [];\r\n                            for (let j = 0, eleLen = elements.length; j < eleLen; j++) {\r\n                                // v/vt/vn\r\n                                const indices = elements[j].split('/').map((i) => parseInt(i) - 1);\r\n                                const v = indices[0];\r\n                                // v_poly.push(v);\r\n                                let v_index = currGeom.verticesRemapping[v];\r\n                                if (v_index == undefined) {\r\n                                    v_index = currGeom.numVertices;\r\n                                    currGeom.verticesRemapping[v] = v_index;\r\n                                    currGeom.numVertices++;\r\n                                }\r\n                                v_poly.push(v_index);\r\n                                if (indices.length > 1 && !isNaN(indices[1])) {\r\n                                    const vt = indices[1];\r\n                                    vt_poly.push(vt);\r\n                                }\r\n                                if (indices.length > 2 && !isNaN(indices[2])) {\r\n                                    const vn = indices[2];\r\n                                    vn_poly.push(vn);\r\n                                }\r\n                            }\r\n                            currGeom.vertexIndices.push(v_poly);\r\n                            if (vn_poly.length > 0)\r\n                                currGeom.normalIndices.push(vn_poly);\r\n                            if (vt_poly.length > 0)\r\n                                currGeom.texCoordIndices.push(vt_poly);\r\n                            if (currGeom.faceCounts[v_poly.length - 3] == undefined) {\r\n                                currGeom.faceCounts[v_poly.length - 3] = [];\r\n                            }\r\n                            currGeom.faceCounts[v_poly.length - 3]++;\r\n                            // numPolys++;\r\n                            // if(numPolys == 16000)\r\n                            //     stop = true;\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            console.warn('Unhandled line:' + line);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            const buildChildItems = () => {\r\n                // performance.mark(\"parseObjDataDone\");\r\n                // performance.mark(\"buildObjTree\");\r\n                for (const geomName in geomDatas) {\r\n                    if (geomDatas[geomName].numVertices == 0)\r\n                        continue;\r\n                    buildChildItem(geomName, geomDatas[geomName]);\r\n                }\r\n                // Done.\r\n                this.emit('loaded');\r\n                this.getGeometryLibrary().emit('loaded');\r\n                this.emit('geomsLoaded');\r\n                resolve();\r\n            };\r\n            const buildChildItem = (geomName, geomData) => {\r\n                for (let i = 0; i < geomData.faceCounts.length; i++) {\r\n                    if (geomData.faceCounts[i] == undefined) {\r\n                        geomData.faceCounts[i] = 0;\r\n                    }\r\n                }\r\n                const numVertices = geomData.numVertices;\r\n                const mesh = new Mesh(); // geomName\r\n                mesh.setDebugName(geomName);\r\n                mesh.setFaceCounts(geomData.faceCounts);\r\n                mesh.setNumVertices(numVertices);\r\n                const positionsAttr = mesh.getVertexAttribute('positions');\r\n                const unitsConversion = this.unitsConversionParam.value;\r\n                for (const vsrcKey in geomData.verticesRemapping) {\r\n                    const vsrc = Number.parseInt(vsrcKey);\r\n                    const vtgt = geomData.verticesRemapping[vsrc];\r\n                    positionsAttr\r\n                        .getValueRef(vtgt)\r\n                        .set(vertices[vsrc][0] * unitsConversion, vertices[vsrc][1] * unitsConversion, vertices[vsrc][2] * unitsConversion);\r\n                }\r\n                let normalsAttr;\r\n                let texCoordsAttr;\r\n                if (geomData.normalIndices.length > 0) {\r\n                    normalsAttr = new Vec3Attribute();\r\n                    mesh.addVertexAttribute('normals', normalsAttr); // TODO: this method returns void\r\n                }\r\n                if (geomData.texCoordIndices.length > 0) {\r\n                    texCoordsAttr = new Vec2Attribute();\r\n                    mesh.addVertexAttribute('texCoords', texCoordsAttr);\r\n                }\r\n                const loadedFaces = Array(geomData.faceCounts.length).fill(0);\r\n                for (let i = 0; i < geomData.vertexIndices.length; i++) {\r\n                    const v_poly = geomData.vertexIndices[i];\r\n                    let faceId = 0;\r\n                    for (let j = 0; j < v_poly.length - 3; ++j) {\r\n                        if (geomData.faceCounts[j])\r\n                            faceId += geomData.faceCounts[j];\r\n                    }\r\n                    faceId += loadedFaces[v_poly.length - 3];\r\n                    loadedFaces[v_poly.length - 3]++;\r\n                    mesh.setFaceVertexIndices(faceId, v_poly);\r\n                    // Set the texCoords and normals...\r\n                    if (normalsAttr) {\r\n                        const vn_poly = geomData.normalIndices[i];\r\n                        for (let j = 0; j < vn_poly.length; j++) {\r\n                            const value = new Vec3(normals[vn_poly[j]][0], normals[vn_poly[j]][1], normals[vn_poly[j]][2]);\r\n                            normalsAttr.setFaceVertexValue(faceId, j, value);\r\n                        }\r\n                    }\r\n                    if (texCoordsAttr && geomData.texCoordIndices.length == geomData.vertexIndices.length) {\r\n                        const vt_poly = geomData.texCoordIndices[i];\r\n                        for (let j = 0; j < vt_poly.length; j++) {\r\n                            const value = new Vec2(texCoords[vt_poly[j]][0], texCoords[vt_poly[j]][1]);\r\n                            texCoordsAttr.setFaceVertexValue(faceId, j, value);\r\n                        }\r\n                    }\r\n                }\r\n                const geomItem = new GeomItem(geomName, mesh);\r\n                // Move the transform of the geom item to the center of the geom.\r\n                // This is so that transparent objects can render correctly, and the\r\n                // transform gizmo becomes centered on each geom(for testing)\r\n                const delta = mesh.getBoundingBox().center();\r\n                {\r\n                    const offset = delta.negate();\r\n                    const positions = mesh.getVertexAttribute('positions');\r\n                    for (let i = 0; i < positions.getCount(); i++)\r\n                        positions.getValueRef(i).addInPlace(offset); // TODO: is getCount() == positions.length?\r\n                    mesh.setBoundingBoxDirty();\r\n                }\r\n                geomItem.localXfoParam.value = new Xfo(delta);\r\n                if (geomData.material != undefined && this.materialLibrary.hasMaterial(geomData.material)) {\r\n                    geomItem.materialParam.value = this.materialLibrary.getMaterial(geomData.material);\r\n                }\r\n                else {\r\n                    const defaultShader = this.defaultShaderParam.value;\r\n                    const material = new Material(geomName + ' mat');\r\n                    material.setShaderName(defaultShader != '' ? defaultShader : 'StandardSurfaceShader');\r\n                    this.materialLibrary.addMaterial(material);\r\n                    geomItem.materialParam.value = material;\r\n                }\r\n                this.addChild(geomItem, false);\r\n            };\r\n            const loadObjData = () => {\r\n                resourceLoader.incrementWorkload(2);\r\n                loadTextfile(url, (fileData) => {\r\n                    resourceLoader.incrementWorkDone(1);\r\n                    parseObjData(fileData).then(() => {\r\n                        buildChildItems();\r\n                        resourceLoader.incrementWorkDone(1);\r\n                    });\r\n                }, (error) => {\r\n                    this.emit('error', error);\r\n                    reject(error);\r\n                });\r\n            };\r\n            loadObjData();\r\n        });\r\n    }\r\n}\r\nexport { ObjAsset };\r\n//# sourceMappingURL=ObjAsset.js.map"],"names":["SystemDesc","globalThis","navigator","isMobileDevice","isIOSDevice","browserName","webGLSupported","deviceCategory","hardwareConcurrency","isMobile","userAgent","match","browserDesc","nAgt","nameOffset","verOffset","ix","appName","fullVersion","parseFloat","appVersion","majorVersion","parseInt","brave","indexOf","substring","lastIndexOf","toLowerCase","toUpperCase","isNaN","getBrowserDesc","gpuDesc","webgl","webgl2","document","createElement","getContext","e","vendor","renderer","gpuVendor","maxTextureSize","supportsWebGL","supportsWebGL2","debugInfo","getExtension","console","warn","undefined","getParameter","UNMASKED_VENDOR_WEBGL","UNMASKED_RENDERER_WEBGL","MAX_TEXTURE_SIZE","getGPUDesc","parts","replace","split","gtxIdx","model","endsWith","length","includes","radeonIdx","rxIdx","modelNumber","ZeaSystemDesc","registeredClasses","classNames","classDefinitions","Registry","static","className","classDef","index","push","Error","classDefinition","classId","StringFunctions","str","pattern","replacement","RegExp","val","space","precision","JSON","stringify","_","toFixed","Number","i","chr","len","hash","charCodeAt","Math","abs","Vec2","constructor","x","y","Float32Array","Uint32Array","Int32Array","this","__data","fromJSON","set","setFromOther","other","isEqual","notEqual","approxEqual","EPSILON","add","addInPlace","subtract","subtractInPlace","scale","scalar","scaleInPlace","invert","invertInPlace","multiply","multiplyInPlace","lengthSquared","sqrt","distanceTo","normalize","normalizeInPlace","dot","cross","angleTo","cosine","PI","acos","signedAngleTo","angle","rotate","cosA","cos","sinA","sin","lerp","t","ax","ay","setRandomDir","r","random","setRandom","clone","asArray","toString","stringifyJSONWithFixedPrecision","toJSON","j","readBinary","reader","loadFloat32","p1","p2","p3","p4","d","u1","u4","u2x","u3x","u2y","u3y","isValid","v","Infinity","Vec3","z","ArrayBuffer","buffer","byteOffset","xy","yz","setDataArray","float32Array","isNull","is111","divide","vec3","divideInPlace","negate","inverse","tmp","resize","currLen","scl","resizeInPlace","az","bx","by","bz","zScale","Vec4","w","xyz","at","bt","tempA","tempB","toVec3","RGBA","g","b","a","Uint8Array","startsWith","setFromHex","setFromCSSColorName","setFromArray","values","hex","rgb","result","exec","hexToRgb","name","hexColor","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","toHex","componentToHex","int","equal","notEquals","applyGamma","gamma","pow","toLinear","toGamma","luminance","ar","ag","ab","aa","gammaOffset","randomAlpha","as3ComponentArray","toCSSString","round","Color","setFromScalarArray","vals","getAsRGBArray","getAsRGBDict","setFromRGB","setFromRGBArray","setFromRGBDict","c","EulerAngles","order","json","Mat3","m00","m01","m02","m10","m11","m12","m20","m21","m22","xAxis","yAxis","zAxis","setIdentity","setFromMat","mat","setFromDirectionAndUpvector","dir","up","zLen","xLen","yLen","a00","a01","a02","a10","a11","a12","a20","a21","a22","b01","b11","b21","det","transpose","transposeInPlace","transformVec3","loadFloat32Array","Mat4","m03","m13","m23","m30","m31","m32","m33","translation","setFromMat4","mat4","toMat3","a03","a13","a23","a30","a31","a32","a33","b00","b02","b03","b04","b05","b06","b07","b08","b09","b10","setInverse","b0","b1","b2","b3","postMultiplyInPlace","translateInPlace","v3","setLookAt","pos","target","setRotation","axis","rad","s","setXRotation","setYRotation","setZRotation","transformVec4","vec","rotateVec3","setPerspectiveMatrix","fovy","aspect","near","far","f","rangeInv","setOrthographicMatrix","left","right","bottom","top","lr","nf","setScale","setFromMat3x4Array","m3x4","Quat","setFromEulerAngles","eulerAngles","ordered","ti","tj","tk","ci","cj","ck","si","sj","sk","cc","cs","sc","ss","ai","aj","ak","toEulerAngles","rotationOrder","euler","test","atan2","sqx","sqy","sqz","asin","setFromAxisAndAngle","halfAngle","mat3","setFromMat3","setFrom2Vectors","v0","v1","data","fTrace","fRoot","k","isIdentity","getAngle","conjugate","alignWith","aw","bw","vq","pq","rotateX","rotateY","rotateZ","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","getXaxis","xz","yw","zw","getYaxis","xw","getZaxis","mirror","axisIndex","toMat4","slerp","dotProduct","lambda","theta","st","sut","coeff1","coeff2","MathFunctions","deg","number","isFinite","min","max","ceil","floor","value","log","log10","fract","log2","exp","start1","end1","start2","end2","edge0","edge1","clamp","iexp","norm","mantissa","signum","rest","exponent","limit","msb","lsb","bits","m","toUInt16","h","NaN","unit16s","Uint16Array","int32View","Ray","start","closestPoint","point","c1","c2","closestPointOnLineSegment","p0","u","v_len","D","this_t","seg_t","pointAtDist","dist","intersectRayVector","ray","ray_t","intersectRayPlane","plane","N","PRECISION","sI","intersectRayBox3","box3","tolerance","invDir","sign","bounds","diag","diagonal","tMin","tMax","tyMin","tyMax","tzMin","tzMax","Xfo","tr","ori","setFromFloat32Array","xfo","this_sc","rot","trn","float32array","Box2","POSITIVE_INFINITY","NEGATIVE_INFINITY","reset","addPoint","size","center","SphereType","radius","intersectsBox","box","intersectsSphere","Box3","addBox3","transform","scx","scy","scz","getBoundingSphere","sphere","intersectsPlane","normal","isNumeric","PlaneType","divideScalar","distanceToPoint","inverseNormalLength","counter","BaseClass","__id","getId","getClassName","Object","getPrototypeOf","BaseEvent","EventEmitter","super","listeners","on","eventName","listener","id","once","cb","event","off","removeListenerById","ids","forEach","emit","fn","ResizedEvent","newWidth","newHeight","width","height","GrowingPacker","root","fit","blocks","resized","block","__addBlock","node","findNode","splitNode","growNode","addBlock","used","down","canGrowDown","canGrowRight","shouldGrowRight","shouldGrowDown","growRight","growDown","res","Allocation1D","Allocator1D","freeList","allocations","allocationsMap","allocatedSpace","reservedSpace","freeSpace","getAllocation","allocate","allocation","splitBlockSize","freeBlock","nextIndex","splice","removeBlock","consumed","freeItemIndex","freeIndex","freeItem","sort","reserved","nextPow2","prevIndex","nextAllocation","deallocate","getFragmentation","defragment","verifyConsistency","keys","POINTER_TYPES","mouse","touch","xr","capturedItem","ZeaPointerEvent","pointerType","propagating","stopPropagation","setCapture","item","getCapture","releaseCapture","ZeaUIEvent","ZeaMouseEvent","sourceEvent","rect","button","clientX","clientY","rendererX","rendererY","altKey","metaKey","ctrlKey","shiftKey","preventDefault","Touch","screenX","screenY","pageX","pageY","radiusX","radiusY","rotationAngle","force","altitudeAngle","azimuthAngle","touchType","identifier","touchPos","touchRay","ZeaTouchEvent","touches","changedTouches","targetTouches","ZeaWheelEvent","wheelDelta","deltaMode","deltaX","deltaY","deltaZ","XRControllerEvent","controller","XRPoseEvent","viewport","viewXfo","controllers","RefCounted","__refs","__destroyed","numRefs","addRef","referer","removeRef","destroy","getRefer","getRefIndex","isDestroyed","ParameterAddedEvent","ParameterRemovedEvent","ParameterOwner","paramEventListenerIDs","paramMapping","params","deprecatedParamMapping","getNumParameters","getParameters","getParameterIndex","paramName","getParameterByIndex","hasParameter","addParameterDeprecationMapping","key","newParamName","parameterValueChanged","addParameter","param","insertParameter","getName","removeParameter","setOwner","newEvent","replaceParameter","context","type","paramsJSON","savedParams","paramJSON","pj","paramPath","resolvePath","versions","compare","numProps","loadUInt32","propType","loadStr","propName","constructClass","error","setName","copyFrom","src","srcParam","loadValue","SelectabilityChangedEvent","SelectedEvent","selected","numBaseItems","NameChangedEvent","oldName","newName","BaseItem","__ownerItem","__selectable","__selected","__metaData","__name","__path","updatePath","getPath","path","getOwner","ownerItem","isSelectable","setSelectable","isSelected","setSelected","sel","getMetadata","hasMetadata","setMetadata","metaData","deleteMetadata","loadFile","url","responseType","onSucceed","onFail","onProgress","xhr","XMLHttpRequest","addEventListener","readyState","total","loaded","status","statusText","open","send","err","loadTextfile","responseText","loadBinfile","response","numCores","ResourceLoader","baseUrl","__totalWork","__doneWork","plugins","systemUrls","commonResources","registerPlugin","plugin","init","getType","incrementWorkload","promise","then","incrementWorkDone","getCommonResource","resourceId","setCommonResource","resource","amount","percent","resourceLoader","archiveUnpackerPlugin","__callbacks","__workers","__nextWorker","__getWorker","Promise","resolve","reject","worker","ArchiveUnpackerWorker","postMessage","onmessage","__onFinishedReceiveFileData","__constructWorker","__terminateWorkers","terminate","fetch","ok","checkStatus","arrayBuffer","fileData","callbacks","callback","entries","shutDownWorkers","workerPromise","jsonLoaderPlugin","textLoaderPlugin","text","binaryLoaderPlugin","Version","versionStr","branch","numbers","major","minor","patch","BinReader","__byteOffset","__dataView","DataView","__isMobileDevice","utf8decoder","TextDecoder","byteLength","remainingByteLength","seek","advance","loadUInt8","getUint8","loadUInt16","getUint16","getUint32","loadSInt32","getInt32","loadFloat16","uint16","decode16BitFloat","loadUFloat16","loadFloat16From2xUInt8","loadUInt32From2xUFloat16","loadSInt32From2xFloat16","getFloat32","loadUInt8Array","loadUInt16Array","readPad","loadUInt32Array","numChars","chars","decode","loadStrArray","loadSInt32Vec2","loadUInt32Vec2","loadFloat16Vec2","loadFloat32Vec2","loadFloat16Vec3","loadFloat32Vec3","loadFloat16Quat","loadFloat32Quat","loadRGBFloat32Color","loadRGBAFloat32Color","loadRGBUInt8Color","loadRGBAUInt8Color","loadBox2","loadBox3","stride","pad","OperatorOutputMode","Parameter","dataType","dirty","boundInputs","boundOutputs","cleaning","dirtyOpIndex","firstOP_WRITE","__value","prevName","getDataType","bindOperatorInput","operatorInput","unbindOperatorInput","bindOperatorOutput","operatorOutput","setParamBindIndex","__findFirstOP_WRITE","setDirty","unbindOperatorOutput","getParamBindIndex","getMode","OP_WRITE","newDirtyIndex","getOperator","isDirty","getDirtyBindingIndex","setCleanFromOp","thisClassName","op","opClassName","getValueFromOp","_clean","evaluate","getValue","setValue","backPropagateValue","paramValueChanged","NumberParameter","range","step","getRange","setRange","getStep","setStep","register","MultiChoiceParameter","choices","getChoices","BooleanParameter","mode","Vec2Parameter","_a","vec2","clonedParam","Vec3Parameter","vec4","Vec4Parameter","ColorParameter","QuatParameter","quat","Mat3Parameter","Mat4Parameter","XfoParameter","ImageParameter","imageType","StringParameter","multiLine","setMultiLine","getMultiLine","StringListParameter","ListParameter","filter","getCount","getElement","setElement","addElement","elem","removeElement","insertElement","items","p","clonedValue","slice","StructParameter","members","addMember","parameter","getMember","getMemberNames","names","member","OperatorOutput","operatorOutputMode","_op","_mode","_param","_paramBindIndex","detached","setOperator","isConnected","getParam","setParam","setClean","makeRelative","paramBindIndex","reason","detach","reattach","rebind","Vec4OperatorOutput","XfoOperatorOutput","Mat4OperatorOutput","Operator","__inputs","Map","__outputs","output","addInput","input","removeInput","getInput","delete","getNumInputs","getInputByIndex","Array","from","get","addOutput","removeOutput","getOutput","getNumOutputs","getOutputByIndex","inputs","outputs","inputJson","outputJson","OperatorInput","absPath","XfoOperatorInput","CalcGlobalXfoOperator","globalXfoParam","localXfoParam","parentGlobal","localXfo","globalXfo","parentGlobalXfo","BoundingBoxParameter","treeItem","setParameterAsDirty","_cleanBoundingBox","bBox3Clone","TreeItem","disableBoundingBox","__childItems","__childItemsEventHandlers","__childItemsMapping","boundingBoxParam","visibleParam","__highlightMapping","__highlights","__visible","__visibleCounter","globalXfoOp","setBoundingBoxDirty","updateVisibility","parentItem","owner_TreeItem","isVisible","getChildIndex","unbindChild","childItem","getParentItem","setParentItem","setVisible","visible","propagateVisibility","addHighlight","color","propagateToChildren","removeHighlight","pop","nextName","nextColor","getHighlight","isHighlighted","bbox","childBBoxChanged","getChildren","getNumChildren","generateUniqueName","substr","uniqueName","suffix","updateChildNameMapping","childNameChanged","insertChild","maintainXfo","fixCollisions","listenerIDs","childGlobalXfo","newLocalXfo","addChild","getChild","getChildByName","getChildNames","removeChild","removeChildByName","removeChildByHandle","removeAllChildren","displayError","childName","traverse","includeThis","__c","depth","children","__t","onPointerDown","onPointerUp","onPointerMove","onPointerEnter","onPointerLeave","onWheel","onTouchCancel","childItemsJSON","childJSON","onDone","numTreeItems","childrenJson","isArray","childJson","itemFlags","numChildren","toc","childType","cloned","srcChildItem","TreeItemParameter","filterFn","owner","emitTreeItemGlobalXfoChanged","setFilterFn","getFilterFn","ItemEvent","ItemSetParameter","Set","getItem","addItem","emitValueChanged","addItems","removeItem","setItems","has","clearItems","clear","getNumItems","itemPath","GeometryParameter","emitBoundingBoxDirtied","geometry","FilePathParameter","getFilename","getExt","filename","suffixSt","getStem","BaseImage","format","mipMapped","wrapS","wrapT","minFilter","magFilter","isLoaded","getParams","MaterialFloatParam","getImage","image","setImage","disconnectImage","textureName","materialLibrary","MaterialColorParam","imageUpdated","ShaderNameChangedEvent","shaderName","TransparencyChangedEvent","isTransparent","TexturedChangedEvent","isTextured","Material","__isTransparent","__isTextured","__shaderName","setShaderName","getShaderName","materialTemplate","getClassDefinition","getMaterialTemplate","paramMap","__checkTransparency","removeAllTextures","getParamTextures","textures","getShaderClass","opacity","baseColorParam","__checkTextures","shader","MaterialParameter","valueParameterValueChanged","material","onlyPath","String","assetItem","getMaterialLibrary","getMaterial","some","Attribute","dataTypeName","initRange","splits","splitValues","setMesh","mesh","getDataTypeName","setCount","count","prevLength","newLength","numElements","getFloat32Value","setFloat32Value","getSplits","getFaceVertexValueRef_array","face","faceVertex","vertex","getFaceVertexIndex","subarray","setFaceVertexValue_array","setFaceVertexValue_ByVertexIndex","currValue","isInitialized","vertexSplitIds","fid","splitId","setSplitVertexValue_array","setSplitVertexValues","faceGroup","splitIndex","generateSplitValues","splitIndices","splitCount","numUnSplitValues","faces","tgt","map","dataElement","loadSplitValues","offset","numSplitValues","vertexId","numSplits","faceId","dim","genBuffer","normalized","Vec3Attribute","getValueRef","valueData","getFaceVertexValueRef","array","setFaceVertexValue","setSplitVertexValue","Vec2Attribute","BaseGeom","__boundingBox","__boundingBoxDirty","__numVertices","__vertexAttributes","debugColor","addVertexAttribute","setNumVertices","setDebugName","attr","hasVertexAttribute","getVertexAttribute","getVertexAttributes","vertexAttributes","positions","numVertices","getNumVertices","getBoundingBox","updateBoundingBox","numVerts","genBuffers","opts","attrBuffers","attrName","loadBaseGeomBinary","flags","positionsAttr","normalsAttr","texCoordsAttr","parse8BitPositionsArray","sclVec","positions_8bit","parse8BitNormalsArray","normals_8bit","parse8BitTextureCoordsArray","texCoords_8bit","textureCoord","numClusters","box2","clusters","clusterData","normalsRange","texCoordsRange","skipTopology","skipAttributes","attrJSON","Vec4Attribute","ColorAttribute","Points","loadBin","bboxMat","posAttr8bit","Lines","__indices","setNumSegments","getIndices","getNumSegments","numOfSegments","indices","setSegmentVertexIndices","getSegmentVertexIndex","line","lineVertex","buffers","bytes","Mesh","edgeFaces","faceEdges","faceCounts","__faceVertexIndices","__logTopologyWarnings","__edgeAttributes","__faceAttributes","numEdges","edgeVerts","vertexEdges","edgeAngles","edgeVecs","getFaceCounts","getNumFaces","reduce","numFaces","fc","setFaceCounts","numFacesVertices","numVertsPerFace","faceVertexIndices","startSrc","startTgt","endSrc","getFaceVertexCount","faceIndex","idx","getFaceVertexOffset","setFaceVertexIndices","vertexIndices","faceVertexCount","addFace","getFaceVertexIndices","addFaceAttribute","hasFaceAttribute","getFaceAttribute","addEdgeAttribute","hasEdgeAttribute","getEdgeAttribute","genTopologyInfo","connectedVertices","getEdgeIndex","tmp0","tmp1","edgeVec","edgeData","edgeIndex","addEdge","edgeFaceIndex","faceVerts","computeFaceNormals","faceNormals","prev","faceNormal","pn","calculateEdgeAngles","n0","n1","computeVertexNormals","hardAngle","setVertexNormal","getConnectedEdgeVecs","vertexIndex","e0","e1","edges","faceGroups","addFaceToGroup","inGroup","f0","f1","f0groupIndex","f1groupIndex","groupIndex","concat","firstVertex","weight","computeHardEdgesIndices","hardEdges","attrSplits","polygon","vertices","numUnSplitVertices","totalNumVertices","includeIndices","generateTriangulatedIndices","dimension","numRenderVerts","computeNumTriangles","trisCount","triangulatedIndices","triangleVertex","addTriangleVertexIndex","faceVertexCounts","offsetRange","faceVertexIndexDeltas","numFaceVerts","faceOffsetsByCount","srcOffset","prevCount","faceOffsets","delta","prevFaceVertex","BaseProxy","__buffers","geomBuffers","boundingBox","PointsProxy","LinesProxy","getNumLineSegments","MeshProxy","getNumTriangles","ProceduralPoints","dirtyTopology","dirtyVertices","topologyParams","update","rebuild","ProceduralLines","ProceduralMesh","PointGrid","xDivisions","yDivisions","addTextureCoords","sizeXParam","sizeYParam","divisionsXParam","divisionsYParam","texCoords","newY","newX","Rect","bind","Circle","sides","radiusParam","angleParam","sidesParam","segs","arc","Cross","sizeParam","LinesCuboid","baseZAtZero","sizeZParam","baseZAtZeroParam","zoff","Grid","skipCenterLines","xParam","yParam","xDivisionsParam","yDivisionsParam","skipCenterLinesParam","xSize","ySize","Cone","detail","cap","addNormals","heightParam","detailParam","capParam","nbSides","tipPoint","basePoint","tri","Cuboid","normals","Cylinder","loops","caps","loopsParam","capsParam","nbLoops","v2","phi","normal1","normal2","Disc","Plane","SizeX","SizeY","DetailX","DetailY","detailXParam","detailYParam","detailX","detailY","quadId","voff","sizeX","sizeY","Sphere","numTris","numQuads","uv0","uv1","uv2","Torus","innerRadius","outerRadius","arcAngle","innerRadiusParam","outerRadiusParam","arcAngleParam","nbSlices","ip","jp","ctheta","stheta","sphi","cphi","DataImage","__loaded","isStream","setData","imageDataLibrary","FileImage","filePath","crossOrigin","load","setCrossOrigin","getDOMElement","complete","Image","setImageURL","basePath","LDRImage","VLHImage","filepath","__exposure","__ambientLightFactor","__hdrTint","__stream","__decodeData","ldr","cdm","blob","Blob","ldrPic","onload","URL","createObjectURL","stem","setHDRTint","hdrTint","getHDRTint","LDRVideo","videoElem","HTMLVideoElement","muteParam","loopParam","spatializeAudioParam","refDistanceParam","maxDistanceParam","rolloffFactorParam","coneInnerAngleParam","coneOuterAngleParam","coneOuterGainParam","gainParam","getAudioSource","style","display","preload","body","appendChild","muted","loop","videoHeight","videoWidth","prevFrame","timerCallback","paused","ended","currentFrame","currentTime","setTimeout","play","catch","ByteStream","DataParser","stream","prototype","readByte","peekByte","readBytes","n","peekBytes","readString","fromCharCode","readBitArray","arr","bite","readUnsigned","littleEndian","parse","schema","parseParts","obj","part","parsePart","label","requires","parser","skip","parseBits","details","out","Parsers","countFunc","parent","subBlocks","gce","codes","future","disposal","userInput","transparentColorGiven","exists","interlaced","descriptor","lct","blockSize","frames","nextCode","gifSchema","resolution","lsd","gct","GIF","raw","hasImages","decompressFrame","buildPatch","frame","totalPixels","pixels","minCodeSize","pixelCount","available","code_mask","code_size","end_of_information","in_code","old_code","code","datum","data_size","first","bi","pi","MAX_STACK_SIZE","nullCode","npix","dstPixels","prefix","pixelStack","lzw","newPixels","rows","cpRow","toRow","fromRow","fromPixels","apply","offsets","steps","pass","deinterlace","dims","colorTable","delay","disposalType","extras","transparentIndex","transparentColorIndex","patchData","Uint8ClampedArray","colorIndex","generatePatch","decompressFrames","GIFImage","streamAtlasDescParam","streamAtlasIndexParam","__streamAtlas","frameParam","playing","incrementFrame","numFrames","getFrameDelay","__resourcePromise","frameParam_check","stop","__unpackedData","frameDelays","performance","now","sideLength","atlasSize","tempCanvas","tempCtx","gifCanvas","gifCtx","atlasCanvas","atlasCtx","frameImageData","renderFrame","createImageData","putImageData","clearRect","drawImage","imageData","getImageData","ms","frameRange","msg","unpackedData","EnvMap","headlightModeParam","shCoeffs","samples","luminanceData","dirToLuminance","LabelManager","__labelLibraries","__language","searchParams","URLSearchParams","window","location","search","nav","language","clean","languages","getLanguage","__foundLabelLibraries","loadLibrary","library","XLSX","unit8array","workbook","read","SheetNames","sheetName","utils","sheet_to_json","Sheets","row","Identifier","isLibraryFound","isLibraryLoaded","getLabelText","libraryName","labelName","labelText","setLabelText","setLanguage","ln","labelManager","Label","requestedReRender","libraryParam","textParam","fontColorParam","fontSizeParam","fontParam","borderWidthParam","outlineParam","outlineColorParam","backgroundParam","backgroundColorParam","fillBackgroundParam","strokeBackgroundOutlineParam","canvasElem","marginParam","fontSize","borderRadiusParam","loadLabelData","needsRender","__parameterValueChanged","all","getLibraryText","loadText","fonts","font","loadFont","renderLabelToImage","ctx2d","alpha","fontColor","margin","borderWidth","borderRadius","outline","outlineColor","background","backgroundColor","fillBackground","strokeBackgroundOutline","marginAndBorder","lines","measureText","fontHeight","canvas","fillStyle","fillRect","strokeStyle","ctx","fill","stroke","strokeWidth","tl","br","bl","defaultRadius","side","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","lineWidth","roundRect","textAlign","textBaseline","fillText","strokeText","VideoStreamImage2D","connectWebcam","rearCamera","video","frameRate","ideal","facingMode","exact","domElement","mediaDevices","getUserMedia","audio","mediaStream","srcObject","onloadedmetadata","setVideoStream","clearInterval","__intervalId","setInterval","flipY","FatLinesMaterial","opacityParam","lineThicknessParam","overlayParam","FatPointsMaterial","pointSizeParam","roundedParam","FlatSurfaceMaterial","LinesMaterial","stippleScaleParam","stippleValueParam","occludedStippleValueParam","PointsMaterial","ScreenSpaceMaterial","SimpleSurfaceMaterial","emissiveStrengthParam","StandardSurfaceMaterial","normalParam","ambientOcclusion","metallicParam","roughnessParam","reflectanceParam","InstanceItem","srcTree","setSrcTree","clonedTree","getSrcTree","message","BaseGeomItem","materialParam","overlay","__cutAway","__cutAwayVector","__cutAwayDist","__layers","setOverlay","isOverlay","addLayer","getLayers","isCutawayEnabled","setCutawayEnabled","state","getCutVector","setCutVector","cutAwayVector","getCutDist","setCutDist","cutAwayDist","materialName","addMaterial","layer","addGeomToLayer","calculatePreciseBoundingBoxes","CalcGeomMatOperator","geomOffsetXfoParam","geomMatParam","geomOffsetXfo","geomMat","globalMat4","geomOffsetMat4","GeomItem","geomIndex","cullable","geomParam","geomChanged","calcGeomMatOperator","geomBBox","geom","getVertex","numGeomItems","geomLibrary","getGeometryLibrary","getGeom","onGeomLoaded","onGeomLoadedListenerID","BaseGroup","itemsParam","__itemsEventHandlers","bindItem","unbindItem","setSearchRoot","searchRoot","paramItems","itemIndex","getItems","treeItems","loadDone","SelectionSet","highlightedParam","highlightColorParam","highlightFillParam","updateHighlight","__updateHighlightHelper","highlighted","StreamFileParsedEvent","geomFileID","geomCount","RangeLoadedEvent","workerId","workers","getWorker","geomLibraryId","__workerId","GeomParserWorker","GeomLibrary","__numGeoms","geoms","__loadedCount","__streamInfos","__genBuffersOpts","loadCount","queue","geomsData","readBinaryBuffer","loadContext","loadGeomFile","incrementProgress","geomFileUrl","streamFileParsedListenerID","loadGeomFilesStream","geomLibraryJSON","numGeomFiles","numGeomsPerFile","numGeoms","setGenBufferOption","setNumGeoms","expectedNumGeoms","getNumGeoms","geomIndexOffset","done","numGeomsPerWorkload","bufferSliceStart","bufferSliceEnd","geomsRange","bufferSlice","__receiveGeomDatas","genBuffersOpts","geomDatas","storedRange","geomData","proxy","streamInfo","MaterialLibrary","__images","__materials","lod","Default","getNumMaterials","getMaterials","getMaterialNames","hasMaterial","assert","hasImage","addImage","getImageNames","ontimeout","numMaterials","materials","numTextures","texture","getUnitsFactor","units","AssetItem","unitsScale","getEngineDataVersion","engineDataVersion","getUnitsConversion","loadUnits","unitsFactor","contextUnitsFactor","layerRoot","layers","geomItem","group","postLoadCallbacks","addPLCB","postLoadCallback","assetPath","relativePath","version","srcLocalXfo","AssetLoadContext","assets","resources","folder","sdk","asyncCount","incrementAsync","decrementAsync","BillboardItem","imageParam","pixelsPerMeterParam","alphaParam","colorParam","alignedToCameraParam","drawOnTopParam","fixedSizeOnscreenParam","pivotParam","imageParamResult","Camera","isOrthographicParam","fovParam","nearParam","farParam","focalDistanceParam","viewHeight","__orthoIntervalId","__focusIntervalId","emitProjChanged","setPositionAndTarget","setLensFocalLength","adjustNearAndFarPlanesToFocalDist","nearDistFactor","farDistFactor","frameOnBoundingSphere","getNear","setNear","getFar","setFar","getFov","setFov","getFrustumHeight","setFrustumHeight","mapping","degToRad","getFocalDistance","setFocalDistance","isOrthographic","setIsOrthographic","duration","fov","focalDistance","prevValue","applyMovement","lerpValue","position","getTargetPosition","frameView","fovY","aspectRatio","getWidth","getHeight","fovX","atan","newFocalDistance","targetOffset","currTarget","pan","boundaryPoints","angleX","angleY","frustumPlaneNormals","XPos","XNeg","YPos","YNeg","ZPos","ZNeg","frustumPlaneNormalsWs","frustumPlaneOffsets","centroid","planeOffset","dolly","zrange","viewWidth","frameBorder","xP0","xP1","xP2","xP3","xP","intersectionOfLines","yP0","yP1","yP2","yP3","yP","frameBorderAdjustment","updateProjectionMatrix","orthoMat","halfHeight","GroupTransformXfoOperator","groupGlobalXfoParam","groupTransformXfoParam","bindXfo","invBindXfo","groupGlobalXfo","groupTransformXfo","setBindXfo","GroupMemberXfoOperator","memberXfoGlobalParam","memberGlobalXfo","OP_READ_WRITE","_enabled","disable","enable","GROUP_XFO_MODES","disabled","manual","average","globalOri","KinematicGroup","initialXfoModeParam","groupTransformParam","calculatingGroupXfo","memberXfoOps","calcGroupXfo","groupTransformOp","INITIAL_XFO_MODES","initialXfoMode","itemXfo","memberGlobalXfoParam","memberXfoOp","MaterialGroup","__backupMaterials","__updateMaterial","__updateMaterialHelper","__unbindItem","CuttingPlaneOperator","cuttingPlaneParam","cuttingPlane","CuttingPlane","cutAwayEnabledParam","cutPlaneParam","cutPlaneOp","updateCutaway","borderMaterial","border","cutEnabled","cutPlane","sizex","sizey","GridTreeItem","gridSize","gridColor","gridMaterial","grid","gridItem","axisLine","gridXAxisMaterial","gridXAxis","gridYAxisMaterial","zAxisLineItem","geomOffset","bBox","defaultGridColor","VLAAsset","numGeomsFiles","treeReader","tree2","entry","tree","__awaiter","thisArg","_arguments","P","generator","fulfilled","next","rejected","BaseTool","__activated","activateTool","activated","deactivateTool","onPointerDoublePress","onKeyDown","onKeyUp","PassType","OPAQUE","TRANSPARENT","OVERLAY","GLPass","enabled","passIndex","__gl","__renderer","enabledParam","requestRedraw","gl","setPassIndex","getPassType","itemAddedToScene","rargs","itemRemovedFromScene","startPresenting","stopPresenting","draw","renderstate","drawHighlightedGeoms","drawGeomData","getGeomItemAndDist","MANIPULATION_MODES","focussing","look","turntable","tumbler","trackball","CameraManipulator","appData","__mouseWheelMovementDist","__mouseWheelZoomCount","__mouseWheelZoomId","orbitRateParam","dollySpeedParam","mouseWheelDollySpeedParam","orbitAroundCursor","walkSpeedParam","walkModeCollisionDetection","__defaultManipulationState","__manipulationState","__pointerDown","__dragging","aimFocusOnTouchTap","aimFocusOnMouseClick","enabledWASDWalkMode","__keyboardMovement","__keysPressed","__velocity","__prevVelocityIntegrationTime","__ongoingTouches","prevCursor","getGLCanvas","cursor","setDefaultManipulationMode","manipulationMode","dragVec","camera","getCamera","orbitRate","orbit","pitch","cameraTargetOffset","__orbitTarget","xVec","yVec","zVec","rotateAxis","dragVecLength","frustumHeight","frustumWidth","cameraPlaneHeight","cameraPlaneWidth","cameraXfo","dollyDist","applyViewScale","zoomDist","initDrag","pointerPos","intersectionData","intersectionPos","__prevPointerPos","endDrag","aimFocus","distance","initalMode","prevGlobalXfo","initialDist","currDist","targetGlobalXfo","currDir","newDir","roll","displacement","orientPointOfView","initialGlobalXfo","initialTarget","dirToPosition","currDistToPosition","targetPos","pointerRay","aimTarget","aimDistance","mouseEvent","_onTouchStart","_onMouseMove","_onTouchMove","touchData","touch0","touchData0","touch1","touchData1","touch0Pos","touch1Pos","separationDist","touch0Drag","touch1Drag","dragDist","vecPrev","vecNow","deltaAngle","cameraGlobalXfo","touchEvent","__endTouch","mouseWheelDollySpeed","modulator","viewVec","direction","integrateVelocityChange","time","timeDelta","speed","movement","newXfo","headHeight","area","raycastXfo","results","getRenderer","raycastCluster","avgDist","animationFrame","requestAnimationFrame","keyIndex","__startTouch","onTouchEnd","create3DContext","opt_attribs","webglContextType","sizeInBytes","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","floatTexturesSupported","__ext_float_linear","__ext_texture_half_float_linear","__ext_color_buffer_float","__ext_float","__ext_half_float","HALF_FLOAT","HALF_FLOAT_OES","__ext_std_derivatives","__ext_Inst","vertexAttribDivisor","vertexAttribDivisorANGLE","drawArraysInstanced","drawArraysInstancedANGLE","drawElementsInstanced","drawElementsInstancedANGLE","__ext_VAO","createVertexArray","createVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","bindVertexArray","bindVertexArrayOES","__ext_element_index_uint","__ext_WEBGL_depth_texture","UNSIGNED_INT_24_8","UNSIGNED_INT_24_8_WEBGL","DRAW_FRAMEBUFFER","FRAMEBUFFER","__ext_frag_depth","setupInstancedQuad","vertexIDs","__quadVertexIdsBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","__quadIndexBuffer","ELEMENT_ARRAY_BUFFER","__quadattrbuffers","shared","drawQuad","drawElements","TRIANGLES","processTextureParams","maxSize","getGLConst","nameOrValue","processParam","defaultValue","LINEAR","wrap","CLAMP_TO_EDGE","NEAREST","channels","RGB","__ext_sRGB","internalFormat","RED","R32F","RG","RG32F","RGB32F","RGBA32F","R16F","RGB16F","RGBA16F","R8","RGB8","RGBA8","depthFormat","depthType","depthInternalFormat","DEPTH_COMPONENT16","GLTexture2D","__image","__internalFormat","__type","__format","__wrapParam","__minFilter","__magFilter","__wrapS","__wrapT","__flipY","__mipMapped","alphaFromLuminance","__gltex","__typeParam","__formatParam","ready","textureType","textureDesc","__bound","configure","getInternalFormat","getFormat","getWrap","getMipMapped","deleteTexture","createTexture","__updateGLTexParams","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","ImageData","HTMLCanvasElement","HTMLImageElement","texImage2D","numPixels","numChannels","RED_INTEGER","ALPHA","LUMINANCE","LUMINANCE_ALPHA","pixelStorei","UNPACK_ALIGNMENT","convertFloat32ArrayToUInt16Array","generateMipmap","preserveData","gltex","fbo","createFramebuffer","bindFramebuffer","framebufferTexture2D","COLOR_ATTACHMENT0","copyTexImage2D","deleteFramebuffer","populate","dataArray","offsetX","offsetY","texSubImage2D","getSize","glTex","getTexHdl","preBind","unif","unifs","textureTypeUnif","textureDescUnif","bindToUniform","bindings","unit","boundTextures","activeTexture","TEXTURE0","uniform1i","uniform4fv","GlslTypes","bool","uint","float","ivec2","ivec3","ivec4","sampler2D","samplerCube","WHITESPACE_RE","ShaderLibrary","__shaderModules","materialTemplates","setShaderModule","getShaderModule","getShaderModuleNames","shaderNames","parseAttr","instanced","attributes","join","handleImport","includeFile","lineNumber","includedGLSL","reursiveResult","parseShaderHelper","glsl","numLines","uniforms","assign","parseShader","addLine","trimmedLine","trim","typeIndex","typeName","shaderLibrary","shaderInstanceId","GLShader","__shaderStagesGLSL","__shaderStages","__shaderProgramHdls","__gltextures","setGLContext","setShaderStage","stageName","clearProgramsCache","getShaderStage","shaderProgramkey","shaderCompilationResult","shaderKey","shaderHdls","deleteShader","deleteProgram","shaderProgramHdl","__compileShaderStage","stageID","shaderopts","repl","replaceAll","directives","shaderHdl","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","errors","getShaderInfoLog","errorLines","lineNum","numberedLinesWithErrors","padStart","__createProgram","__shaderCompilationAttempted","createProgram","vertexShaderGLSL","vertexShader","VERTEX_SHADER","attachShader","fragmentShaderGLSL","fragshaderopts","frag","defines","fragmentShader","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","info","getProgramInfoLog","debugExt","hlsl","getTranslatedShaderSource","__extractAttributeAndUniformLocations","attrs","getAttributes","getAttribLocation","attrDesc","getUniforms","uniformName","unifType","getUniformLocation","shaderStageBlock","unifName","isCompiledForTarget","shaderkey","compileForTarget","compile","glShader","useProgram","glGeom","bindRendererUnifs","supportsInstancing","unbind","getGeomDataShaderName","getSelectedShaderName","GLFbo","colorTexture","createDepthTexture","colorTextureResizeEventId","__depthTexture","__fbo","__prevBoundFbo","__colorTexture","__createDepthTexture","__clearColor","setup","textureResized","setClearColor","clearColor","getColorTexture","getDepthTextureGL","setColorTexture","depthTextureGL","DEPTH_COMPONENT24","DEPTH_COMPONENT","DEPTH_ATTACHMENT","depthBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","__checkFramebuffer","resizeTexture","check","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","bindForWriting","boundRendertarget","unbindForWriting","bindForReading","READ_FRAMEBUFFER","unbindForReading","colorMask","col","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","bindAndClear","GLRenderTarget","textureTargets","depthTexture","frameBuffer","numColorChannels","drawBuffers","bufferIds","checkFramebuffer","clearDepth","colMask","clearCol","bindColorTexture","channelId","bindDepthTexture","texId","UnpackHDRShader","genDataTypeDesc","attrDataType","elementSize","IGeomShaderBinding","GeomShaderBinding","shaderAttrs","geomAttrBuffers","indexBuffer","glattrbuffers","shaderAttrDesc","geomAttrBuffer","disableVertexAttribArray","geomAttrDesc","enableVertexAttribArray","vertexAttribPointer","VAOGeomShaderBinding","vao","generateShaderGeomBinding","GLHDRImage","hdrImage","srcLDRTex","srcCDMTex","unpackHDRShader","shaderBinding","loadImage","__unpackHDRImage","hdrImageParams","shaderComp","ldrSampler","cdmSampler","srcRegion","PreComputeBRDFShader","ConvolveIrradianceShader","ConvolveSpecularShader","GLProbe","gl_casted","maxFragmentShaderTextureUnits","MAX_TEXTURE_IMAGE_UNITS","__convolved","__fbos","convolveProbe","srcGLTex","brdfLUTTexture","RG16F","brdfShader","brdfShaderComp","brdfShaderBinding","brdfFboId","convolveIrradianceShader","convolveIrradianceShaderComp","convolveIrradianceShaderBinding","envMap","irradianceCubeTex","TEXTURE_CUBE_MAP","LINEAR_MIPMAP_LINEAR","TEXTURE_WRAP_R","TEXTURE_CUBE_MAP_POSITIVE_X","irradianceFboId","convolverShader","covolverShaderComp","covolverShaderBinding","specularCubetex","maxMipLevels","mip","mipWidth","mipHeight","fboId","roughness","uniform1f","irradianceMap","prefilterMap","brdfLUT","envMapFlags","EnvMapShader","GLEnvMap","__srcGLTex","__envMapShader","__envMapShaderBinding","__envMap","__backgroundFocus","envMapShaderComp","headlightParam","updateHeadlightModeFlag","getEnvMap","getBackgroundFocus","setBackgroundFocus","focus","exposure","depthMask","bindViewports","global","freeSelf","self","freeGlobal","Function","Date","reWhitespace","string","charAt","reTrimStart","trimmedEndIndex","Symbol","objectProto","hasOwnProperty","nativeObjectToString","symToStringTag","toStringTag","isOwn","call","tag","unmasked","getRawTag","objectToString","isObjectLike","baseGetTag","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","isSymbol","isObject","valueOf","baseTrim","isBinary","nativeMax","nativeMin","func","wait","options","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","args","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","timeWaiting","remainingWait","debounced","isInvoking","arguments","clearTimeout","toNumber","cancel","flush","debounce","ScreenQuadShader","GLScreenQuad","__pos","__size","__glshader","__quadBinding","list","uniform2fv","bindShader","GLGeom","genBufferOpts","__indexBuffer","__geom","__glattrbuffers","__shaderBindings","buffersDirty","dirtyBuffers","clearBuffers","updateBuffers","drawInstanced","instanceCount","bindAndDraw","glbuffer","deleteBuffer","GLMesh","__numTriIndices","__indexDataType","__numTriangles","__numRenderVerts","attrData","attrBuffer","glattr","MSAA_RENDERBUFFER","COLORBUFFER","DEPTHBUFFER","GLBaseViewport","offscreenBuffer","__backgroundTexture","__backgroundGLTexture","offscreenBufferFbo","__width","__height","__canvasWidth","__canvasHeight","fb","EXT_frag_depth","depthRange","doubleClickTimeParam","quad","DEPTH_STENCIL","DEPTH24_STENCIL8","highlightedGeomsBuffer","highlightedGeomsBufferFbo","processBGValue","canvasWidth","canvasHeight","resizeRenderTargets","outlineThickness","colorRenderbuffer","deleteRenderbuffer","renderbufferStorageMultisample","prevRendertarget","bg","DEPTH_TEST","drawScene","drawHighlights","gl2","clearBufferfv","COLOR","blitFramebuffer","screenQuad","drawSilhouettes","BLEND","blendEquation","FUNC_ADD","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","silhouetteShader","uniform2f","screenSize","oc","uniform4f","outlineSensitivity","outlineDepthBias","depthFunc","LESS","highlightsShader","highlightOutlineThickness","highlightDataTexture","highlightDataTextureSize","region","getManipulator","manipulator","setManipulator","tool","onMouseLeave","ViewChangedEvent","interfaceType","IntersectionData","screenPos","geomItemAndDist","GLViewport","debugHighlightedGeomsBuffer","__x","__y","__cameraXfo","__cameraMat","__viewMat","__geomDataBufferInvalid","__screenPos","__projectionMatrix","__frustumDim","__bl","__tr","__prevDownTime","__geomDataBufferSizeFactor","debugGeomShader","__geomDataBuffer","floatGeomBuffer","__geomDataBufferFbo","__camera","setCamera","getBl","setBl","getTr","setTr","getPosX","getPosY","__updateProjectionMatrix","renderGeomDataFbo","getCameraParams","invalidateGeomDataBuffer","frustumH","frustumW","getProjectionMatrix","getViewMatrix","calcRayFromScreenPos","topy","sx","sy","cameraMat","projInv","rayStart","rayDirection","cameraSpaceOffset","geomDataRenderstate","__initRenderState","geomDataFbo","drawSceneGeomData","getGeomDataAtPos","__intersectionData","finish","bufferWidth","bufferHeight","passId","readPixels","getPass","getGeomItemsInRect","widthFactor","heightFactor","tlX","tlY","brX","brY","rectBottom","rectLeft","rectWidth","rectHeight","geomItems","__getPointerPos","prepareUIEvent","downTime","pointerOverItem","leftGeometry","viewScale","cameraMatrix","viewports","viewMatrix","projectionMatrix","viewportFrustumSize","VRHead","xrvp","stageTreeItem","__xrvp","__treeItem","__mat4","__localXfo","hmdGeomItem","getAsset","pose","matrix","getTreeItem","getXfo","VRController","inputSource","activeVolumeSize","buttonPressed","handedness","tipItem","tipXfo","targetRayMode","profiles","localStorage","setItem","loadHMDResources","srcControllerTree","controllerTree","tick","getHandedness","getTipItem","getTipXfo","getTouchPadValue","touchpadValue","isButtonPressed","getControllerStageLocalXfo","getControllerTipStageLocalXfo","updatePose","refSpace","xrFrame","inputPose","getPose","gripSpace","hitTested","getGeomItemAtTip","vol","raycastWithXfo","VRViewManipulator","__controllerTriggersHeld","vrControllerToolTip","vrControllerToolTipMat","addIconToController","getControllers","__initMoveStage","__grabPos","stageXfo__GrabStart","__invOri","__grabDir","__grabDist","__grab_to_stage","onVRControllerButtonDown","onVRControllerButtonUp","onVRControllerDoubleClicked","stageXfo","setXfo","onVRPoseChanged","grabPos","deltaXfo","grabDir","grabDist","oriTrDelta","deltaSc","deltaTr","VRViewChangedEvent","hmd","ControllerAddedEvent","StateChangedEvent","VRViewport","__stageXfo","__stageMatrix","__hmd","__projectionMatrices","__projectionMatricesUpdated","__stageTreeItem","addTreeItem","__vrhead","controllersMap","controllerPointerDownTime","spectatorMode","__leftViewMatrix","__leftProjectionMatrix","__rightViewMatrix","__rightProjectionMatrix","__vrAsset","getVRHead","__stageScale","canPresent","__canPresent","isPresenting","session","setSpectatorMode","drawingBufferWidth","drawingBufferHeight","__startSession","onAnimationFrame","drawXRFrame","__hmdAssetPromise","hmdAssetId","asset","materialNames","requestSession","requiredFeatures","optionalFeatures","__xrViewportPresenting","getViewport","createController","ev","added","glLayer","XRWebGLLayer","updateRenderState","baseLayer","framebufferWidth","framebufferHeight","__region","onRefSpaceCreated","__refSpace","requestReferenceSpace","end","togglePresenting","getHMDCanvasSize","__hmdCanvasSize","updateControllers","inputSources","renderState","getViewerPose","views","__viewMatrices","__cameraMatrices","view","projMat","framebuffer","depthNear","depthFar","vrviewport","vp","vrPresenting","capturedElement","viewChangedEvent","ParamUniformBinding","SimpleUniformBinding","glMaterial","gltexture","textureUnif","uniformXX","uniform1ui","bindValue","genGLTex","texBinding","boundImage","imageLoadedId","connectImage","ComplexUniformBinding","uniform3fv","MatrixUniformBinding","uniformMatrixXXX","uniformMatrix3fv","uniformMatrix4fv","ColorUniformBinding","logged","MaterialShaderBinding","warnMissingUnifs","uniformBindings","bindParam","uniformBinding","GLMaterial","__material","getGLShader","__boundTexturesBeforeMaterial","GLMaterialLibrary","materialIndices","glMaterials","refCounts","freeIndices","materialsAllocator","dirtyIndices","matData","getPackedMaterialData","getGLMaterial","getOrCreateShader","getMaterialAllocation","removeMaterial","uploadMaterials","materialsTextureSize","materialsTexture","tex","texWidth","xoffset","remaining","rowStart","dirtyItemIndices","drawItemsTexture","glGeomItemsTexture","uniform2i","GLPoints","points","__vboState","numVertsChanged","PointSize","attrbuffers","drawArrays","POINTS","GLLines","__numSegIndices","__fatBuffersNeedUpload","fatBuffers","__buffersNeedUpload","positionsTexture","segmentIndices","genFatBuffers","drawCount","lineThicknessAttr","lineThickness","makeIndices","indexArray","seqentialIndex","topologyChanged","LineThickness","positionsTextureSize","drawPoints","LINES","occluded","GREATER","LEQUAL","VisibilityChangedEvent","GLGeomItemFlags","GEOMITEM_FLAG_CUTAWAY","GEOMITEM_INVISIBLE_IN_GEOMDATA","GLGeomItem","drawItemId","geomId","materialId","supportInstancing","GLShaderGeomSets","cutDataChanged","cutData","geomMatrixDirty","geomVisible","culled","getGeomItem","getDrawItemId","setCulled","modelMatrixunif","modelMatrix","modelMatrixArray","drawItemDataunif","drawItemData","cutawayDataUnif","cutawayData","CountChangedEvent","change","GLGeomItemSet","drawIdsArray","drawIdsBuffer","highlightedIdsArray","highlightedIdsBuffer","glGeomItems","glgeomItems_freeIndices","glgeomItemEventHandlers","drawIdsBufferDirty","highlightedIdsBufferDirty","visibleItems","highlightedItems","getGLGeom","getDrawCount","addGLGeomItem","glGeomItem","eventHandlers","highlightChanged","visibilityChanged","removeGLGeomItem","updateDrawIDsBuffer","getDrawIdsArray","tgtIndex","updateHighlightedIDsBuffer","getHighlightedIdsArray","__bindAndRender","drawHighlighted","itemIndices","instancedDraw","instancedIds","GLMaterialGeomItemSets","glGeomItemSets","materialChanged","glGeomItemSet","removeGeomItem","assignTreeItemToGLPass","geomItemSet","addGeomItemSet","drawCountChanged","__materialChanged","checkMaterial","listenerID","GLShaderMaterials","shaders","glgeomdatashader","glselectedshader","glMaterialGeomItemSets","findMaterialGeomItemSets","matGeomItemSet","addMaterialGeomItemSets","updated","destructing","removeMaterialGeomItemSets","getMaterialGeomItemSets","glGeomItemLibrary","glMaterialGeomItemSet","IndexEvent","resizeIntArray","intArray","newSize","newArray","GLGeomLibrary","shaderAttrSpec","freeGeomIndices","geomRefCounts","geomsDict","glGeomsDict","geomBuffersTmp","shaderBindings","bufferNeedsRealloc","attributesAllocator","dirtyGeomIndices","geomVertexOffsets","geomVertexCounts","indicesCounts","indicesOffsets","numIndices","indicesAllocator","constructGLGeom","glgeom","addGeom","prevSize","removeGeom","getGeomOffsetAndCount","allocateBuffers","attrSpec","numValues","uploadBuffers","glattrbuffer","dstByteOffsetInBytes","bufferSubData","attributesAllocation","offsettedIndices","cleanGeomBuffers","GLGeomItemLibrary","dirtyWorkerItemIndices","glGeomItemEventHandlers","glGeomItemsMap","glGeomItemsIndexFreeList","removedItemIndices","enableFrustumCulling","setupCullingWorker","GLGeomItemLibraryCullingWorker","workerReady","applyCullResults","viewportChanged","solidAngleLimit","frustumHalfAngleY","frustumHalfAngleX","xrViewport","cullFreq","cameraPos","cameraOri","forceViewChanged","addGeomItem","matIndex","glMaterialLibrary","geomItemChanged","geomParm","glGeomLibrary","drawItemChanged","workerItemDataChanged","newlyCulled","newlyUnCulled","handlers","getGLGeomItem","populateDrawItemDataArray","subIndex","pixelsPerItem","pix0","pix1","pix2","pix3","pix4","highlight","pix5","getCullingWorkerData","boundingRadius","fixedSizeParam","uploadGeomItemsToWorker","geomItemsUpdateToCullingWorker","uploadGeomItems","typeId","indexStart","yoffset","indexEnd","uploadCount","instancesTexture","instancesTextureSize","SceneSetEvent","scene","XrViewportEvent","KeyboardEvent","isComposing","repeat","which","activeGLRenderer","pointerIsDown","pointerLeft","registeredPasses","GLBaseRenderer","$canvas","__glcanvas","__scene","__shaderDirectives","__renderGeomDataFbosRequested","__shaders","__passes","__passesRegistrationOrder","__passCallbacks","__viewports","__activeViewport","__continuousDrawing","__redrawRequested","__isMobile","__drawSuspensionLevel","__supportXR","__xrViewport","setupWebGL","bindEventHandlers","addViewport","passType","cls","addPass","supportXR","__xrViewportPromise","_b","setupXRViewport","makeXRCompatible","__setupXRViewport","isSessionSupported","isSupported","addShaderPreprocessorDirective","getViewportAtPos","activateViewport","activateViewportAtPos","getActiveViewport","suspendDrawing","resumeDrawing","renderGeomDataFbos","getScene","setScene","getRoot","geomAssigned","removeTreeItem","handled","continueInSubTree","passCbs","itemAddedFn","itemRemovedFn","getGL","handleResize","getDiv","parentElement","webglOptions","tagName","rootIsDiv","throttledResize","throttle","contentRect","displayWidth","displayHeight","resizeObserver","ResizeObserver","clientWidth","clientHeight","observe","parentNode","ex","preserveDrawingBuffer","antialias","stencil","xrCompatible","powerPreference","alert","ext","disableMultiDraw","multiDrawArrays","multiDrawArraysWEBGL","multiDrawElements","multiDrawElementsWEBGL","multiDrawElementsInstanced","multiDrawElementsInstancedWEBGL","multiDrawArraysInstanced","multiDrawArraysInstancedWEBGL","isValidCanvas","isMobileSafariMouseEvent","pointerEvent","getBoundingClientRect","passive","oncontextmenu","keyboardEvent","frameAll","viewportIndex","updateIndices","passSet","supportsVR","emitViewChanged","getVRViewport","getXRViewport","isXRViewportPresenting","isContinuouslyDrawing","startContinuousDrawing","stopContinuousDrawing","toggleContinuousDrawing","forceRender","bindGLBaseRenderer","vp_region","eye","mask","disconnect","HighlightsShader","SilhouetteShader","EnvMapAssignedEvent","ALL_PASSES","GLRenderer","__glEnvMap","__rayCastRenderTarget","__backgroundMapShader","__backgroundMapShaderBinding","__rayCastRenderTargetProjMatrix","__tonemap","__gamma","__displayEnvironment","__debugMode","_planeDist","__cutPlaneNormal","rayCastDist","rayCastArea","__debugTextures","disableTextures","debugGeomIds","__bindEnvMap","env","backgroundMap","__glBackgroundMap","envMapParam","displayEnvMapParam","displayEnvironment","raycastWithRay","raycast","CULL_FACE","dataPixels","pixelID","drawBackground","backgroundImage","bindGLRenderer","BillboardShader","EnvProjectionShader","FatLinesShader","FlatSurfaceShader","baseColor","LinesShader","PointsShader","FatPointsShader","SimpleSurfaceShader","StandardSurfaceShader","colorRenderState","ScreenSpaceShader","GLStandardGeomsPass","filterGeomItem","constructShaders","itemId","decode16BitFloatFrom2xUInt8","GLGeomItemSetMultiDraw","drawIdsTexture","highlightedIdsTexture","glGeomIdsMapping","drawElementCounts","drawElementOffsets","highlightElementCounts","highlightElementOffsets","geomItemIndices","offsetAndCount","highlightIndex","visibleItemIndex","drawIdsTextureSize","level","highlightIdsTextureSize","bindAndRender","counts","multiDraw","sortItems","viewPos","distances","srcIndex","GLLinesItemSet","drawIds","drawId","GLPointsItemSet","GLMeshItemSet","glGeomDataShaderKey","glHighlightShaderKey","glGeomDataShader","glHighlightShader","glShaderKey","getOrCreateGLGeomItemSet","geomItemParamChanged","elementType","GLOpaqueGeomsPass","__glshadermaterials","__glShaderGeomSets","removeAndReAddGeomItem","glShaderGeomSets","glshaderMaterials","__traverseTreeAndDraw","registerPass","FattenLinesShader","GLLinesPass","linesGeomDataBuffer","fattenLinesShader","colorTex","GLTransparentGeomsPass","itemCount","transparentItems","transparentItemIndices","prevSortCameraPos","sortCameraMovementDistance","reSort","resortNeeded","itemindex","visibleindex","transparentItem","_drawItem","cache","currentGLMaterial","currentGLGeom","_drawItems","currentglShader","cullFace","BACK","AtlasLayoutShader","GLImageAtlas","__asyncCount","__layout","__layoutVec4s","__atlasLayoutShaderBinding","__atlasLayoutShader","__subImages","__layoutNeedsRegeneration","incAsyncCount","decAsyncCount","getMainImage","addSubImage","subImage","renderAtlas","subImage_casted","removeSubImage","gltext","getSubImage","numSubImages","generateAtlasLayout","minTileSize","packer","layoutItem","__atlasLayoutTexture","getLayoutData","cleanup","glimage","srctexture","srctextureDim","isReady","atlasLayoutUnif","atlasDescUnif","GLBillboardsPass","atlas","indexArrayUpdateNeeded","instanceIdsBuffer","glshader","billboardDataArray","tintColorArray","billboards","dirtyBillboards","threshold","updateRequested","emitUpdated","addBillboard","removeBillboard","filterRenderTree","billboard","imageIndex","reqUpdateIndexArray","updateBillboard","requestUpdate","billboardData","populateBillboardDataArray","ppm","pivot","col0","col1","col2","col3","updateIndexArray","updateBillboards","doIt","__draw","atlasBillboards","inVR","instanceIds","tintColor","layoutData","idx0","idx1","billboard0","billboard1","tr0","tr1","GLOverlayPass","shaderClass","BoundingBoxShader","libsRegistry","registry","registerLib","packageJson","libName","libVersion","listLibs","dataSize","__reserved","seekEnd","getBuffer","__grow","unit8Array","old_unit8Array","__reserve","__offset","byteCount","writeUInt8","setUint8","writeUInt16","setUint16","writeUInt32","setUint32","writeSInt32","setInt32","writeFloat16","encode16BitFloat","writeFloat32","setFloat32","writeUInt8Array","writeSize","writeUInt16Array","writeUInt32Array","writeFloat32Array","writeStr","writeSInt32Vec2","writeUInt32Vec2","writeFloat16Vec2","writeFloat32Vec2","writeFloat16Vec3","writeFloat32Vec3","writeFloat16Quat","writeFloat32Quat","writeRGBFloat32Color","writeRGBAFloat32Color","writeRGBUInt8Color","writeRGBAUInt8Color","writeBox2","writeBox3","writePadd","writeAlignment","numBytes","p5","planes","setFromMatrix","boxes","dirtyBoxes","idToIndex","__updateRequested","__modelMatrixArray","__treeitemDataArray","__tintColorArray","__indexArray","continueIntoSubTree","bindTreeItem","unbindTreeItem","treeitem","index_check","xfoChanged","treeitemData","__updateBoxes","__populateBoxesDataArray","pixel0","pixel1","pixel2","pixel3","pixel4","pixel5","__updateIndexArray","__instanceIdsBuffer","__drawItemsTexture","__updateBox","GEOMITEM_CHANGED","GEOM_CHANGED","VISIBILITY_CHANGED","HIGHLIGHT_CHANGED","splitObjects","splitGroupsIntoObjects","loadMtlFile","unitsConversion","defaultShader","splitObjectsParam","splitGroupsIntoObjectsParam","loadMtlFileParam","unitsConversionParam","defaultShaderParam","fileFolder","mtlFile","mtlFileData","elements","shift","parseMtlData","parseObjData","currGeom","currMtl","newGeom","verticesRemapping","texCoordsRemapping","normalsRemapping","texCoordIndices","normalIndices","numTexCoords","numNormals","v_poly","vt_poly","vn_poly","eleLen","v_index","vt","vn","buildChildItems","geomName","buildChildItem","vsrcKey","vsrc","vtgt","loadedFaces","loadObjData","envMapLODParam","getResourceLoader","setEnvMap","setupGrid","gridTreeItem","responseXML"],"mappings":"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"}