import { Box3 } from '../../../Math/Box3';
import { Mesh } from '../Mesh';
/**
 * Base Class for procedural meshes generated by mathematical functions.
 *
 * @extends {Mesh}
 */
declare abstract class ProceduralMesh extends Mesh {
    dirtyTopology: boolean;
    dirtyVertices: boolean;
    topologyParams: string[];
    /**
     * Creates an instance of ProceduralMesh.
     */
    constructor();
    abstract rebuild(): void;
    abstract resize(): void;
    /**
     * This method can be overridden in derived classes
     * to perform general updates (see GLPass or BaseItem).
     * @param event - The event object emitted by the parameter.
     * @private
     */
    protected parameterValueChanged(event: Record<string, any>): void;
    /**
     * If the Procedural geometry is out of date, for example if a parameter has been changed,
     * this method explicitly forces the geometry to be recomputed.
     */
    update(): void;
    /**
     * Returns the bounding box for geometry.
     * @return - The return value.
     */
    getBoundingBox(): Box3;
    /**
     * Returns the number of vertex attributes.
     *
     * @return - The return value.
     */
    getNumVertices(): number;
    /**
     * Compute vertex normals.
     * @param hardAngle - The hardAngle value in radians.
     * @return - The return value.
     */
    computeVertexNormals(hardAngle?: number): import("../Vec3Attribute").Vec3Attribute;
    /**
     * The computeHardEdgesIndices method.
     * @param hardAngle - The hardAngle value in radians.
     * @return - The return value.
     */
    computeHardEdgesIndices(hardAngle?: number): Uint32Array;
    /**
     * The genBuffers method.
     * @param opts - The opts value.
     * @return - The return value.
     */
    genBuffers(opts?: Record<string, any>): Record<string, any>;
    /**
     * The toJSON method encodes this type as a json object for persistence.
     *
     * @param context - The context value.
     * @return - Returns the json object.
     */
    toJSON(context?: Record<string, any>): Record<string, unknown>;
}
export { ProceduralMesh };
