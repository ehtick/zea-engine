import { Vec3, Mat4 } from '../Math/index';
import { TreeItem } from './TreeItem';
import { NumberParameter } from './Parameters/index';
import { GLBaseViewport } from '../Renderer/GLBaseViewport';
/**
 * The Camera class is used to provide a point of view of the scene. The viewport is assigned
 * a camera, which is uses during drawing. The camera controls the view and projection used to
 * render the scene.
 *
 * Cameras can provide a perspective projection, or an orthographic projection, and anything in between.
 * To configure whether th projection provided by the camera is Orthographic or Perspective, set
 * the value of the 'isOrthographic' Parameter to a value between 0 and 1. 0.0 being fully perspective
 * and 1.0 being fully Orthographic.
 * Alternatively, you can call camera.setIsOrthographic and pass the value, and a time in milliseconds to
 * take to transition between the current value and your new value.
 * ```javascript
 *   camera.setIsOrthographic(1, 400);
 * ```
 *
 * By default, the Camera automatically adjusts the near and far planes as the focal distance is modified. This
 * behavior can be disabled, by setting the adjustNearAndFarPlanesToFocalDist property to false.
 * Alternatively, you can also adjust the factors that are used to modify the near and far plane based on the
 * focal distance.
 * ```javascript
 *   camera.adjustNearAndFarPlanesToFocalDist = true
 *   camera.nearDistFactor = 0.01
 *   camera.farDistFactor = 5
 * ```
 *
 * **Parameters**
 * * **isOrthographic(`NumberParameter`):** Controls the projection matrix generated by the camera. A value of 0.0, means a perspective projection, while 1 an orthographic projection. Any value in between generates a blended perspective -> orthographic projection.
 * * **fov(`NumberParameter`):** The vertical angle of the view frustum when generating a perspective projection. In orthographic mode, this value is used to calculate the size of the view at the target distance.
 * * **near(`NumberParameter`):** The near clipping distance of the camera.
 * * **far(`NumberParameter`):** The far clipping distance of the camera.
 * * **focalDistance(`NumberParameter`):** The distance at which the camera is focussed. Note: the CameraManipulator sets the focal distance when zooming in on a target.
 *
 * **Events**
 * * **projectionParamChanged:** When on of the parameters above change, the camera emits this event. Note: the Viewport listens to this event and triggers re-rendering.
 * * **movementFinished:** Triggered at the conclusion of some action. E.g. when a zoom action is finished, or when the mouse is released after an orbit action. The viewport listens to this event and triggers a re-rendering of the selection buffers.
 * @extends TreeItem
 */
declare class Camera extends TreeItem {
    isOrthographicParam: NumberParameter;
    fovParam: NumberParameter;
    nearParam: NumberParameter;
    farParam: NumberParameter;
    focalDistanceParam: NumberParameter;
    protected adjustNearAndFarPlanesToFocalDist: boolean;
    protected nearDistFactor: number;
    protected farDistFactor: number;
    protected frameOnBoundingSphere: boolean;
    protected viewHeight: number;
    protected __orthoIntervalId: number;
    protected __focusIntervalId: number;
    /**
     * Instantiates a camera object, setting default configuration like zoom, target and positioning.
     *
     * @param name - The name of the camera.
     */
    constructor(name?: string);
    /**
     * Returns `near` parameter value.
     *
     * @return - Returns the near value.
     */
    getNear(): number;
    /**
     * Sets `near` parameter value
     *
     * @param value - The near value.
     */
    setNear(value: number): void;
    /**
     * Returns `far` parameter value.
     *
     * @return - Returns the far value.
     */
    getFar(): number;
    /**
     * Sets `far` parameter value
     *
     * @param value - The far value.
     */
    setFar(value: number): void;
    /**
     * Getter for the camera field of view (FOV).
     * The FOV defines the vertical angle of the view frustum
     * The horizontal angle is calculated from the FOV and the Viewport aspect ratio.
     *
     * @return - Returns the FOV value.
     */
    getFov(): number;
    /**
     * Setter for the camera field of view (FOV).
     * The FOV defines the vertical angle of the view frustum
     * The horizontal angle is calculated from the FOV and the Viewport aspect ratio.
     * > Note: The Fov can also be set by calling #setLensFocalLength
     *
     * @param value - The new FOV value.
     */
    setFov(value: number): void;
    /**
     * Getter for the camera frustum height value.
     * The frustum hight value is used to compute the orthographic projection of the scene.
     *
     * @return - Returns the Frustum Height value.
     */
    getFrustumHeight(): number;
    /**
     * Setter for the camera frustum height in orthographic mode.
     * > Note: in perspective mode, the frustum height is calculated based on the FOV value and focal distance.
     *
     * @param value - The new Frustum Height value.
     */
    setFrustumHeight(value: number): void;
    /**
     * Setter for the camera lens focal length. This method calculates a new vertical Field of View value
     * from the provided camera lense focal length.
     * > Note: conversion from Lense Focal length to Fov is based on the table found here: https://www.nikonians.org/reviews/fov-tables
     *
     * **Focal Length accepted values as string values:** 10mm, 11mm, 12mm, 14mm, 15mm, 17mm, 18mm,
     * 19mm, 20mm, 24mm, 28mm, 30mm, 35mm, 45mm, 50mm, 55mm, 60mm, 70mm, 75mm, 80mm,
     * 85mm, 90mm, 100mm, 105mm, 120mm, 125mm, 135mm, 150mm, 170mm, 180mm, 210mm, 300mm,
     * 400mm, 500mm, 600mm, 800mm
     *
     * @param value - The lens focal length value.
     */
    setLensFocalLength(value: string): void;
    /**
     * Returns `focalDistance` parameter value.
     *
     * @return - Returns the lens focal length value..
     */
    getFocalDistance(): number;
    /**
     * Sets `focalDistance` parameter value.
     *
     * @errors on dist value lower or less than zero.
     * @param dist - The focal distance value.
     */
    setFocalDistance(dist: number): void;
    /**
     * Returns true if the camera is providing an orthographic projection.
     * @return - true if orthographic else false
     */
    isOrthographic(): boolean;
    /**
     * Sets the camera to be orthographic. The value can be between 0, and 1.
     * A value of 0 means fully perspective. A value of 1 means fully orthographic.
     * Any value in between produces a linear interpolation of perspective and orthographic.
     *
     * @param value - The value param.
     * @param duration - The duration in milliseconds to change the projection.
     */
    setIsOrthographic(value: number, duration?: number): void;
    /**
     * Setter for the camera position and target.
     * As described at the start of the class, this is a `TreeItem`,
     * which means we can move it around using translation modifiers.
     * You can do it this way or using the changing `TreeItem` parameters,
     * although we recommend this one because it also changes focal distance.
     *
     * @param position - The position of the camera.
     * @param target - The target of the camera.
     */
    setPositionAndTarget(position: Vec3, target: Vec3): void;
    /**
     * Getter for the target position.
     * @return - Returns the target position.
     */
    getTargetPosition(): Vec3;
    /**
     * Calculates a new camera position that frames all the items passed in `treeItems` array, moving
     * the camera to a point where we can see all of them.
     *
     * @param viewport - The viewport value.
     * @param treeItems - The treeItems value.
     */
    frameView(viewport: GLBaseViewport, treeItems: TreeItem[]): void;
    /**
     * Sets camera perspective from a Mat4 object.
     *
     * @param mat - The mat value.
     * @param aspect - The aspect value.
     */
    updateProjectionMatrix(mat: Mat4, aspect: number): void;
}
export { Camera };
