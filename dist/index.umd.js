!function(U,F){"object"==typeof exports&&"undefined"!=typeof module?F(exports):"function"==typeof define&&define.amd?define(["exports"],F):F((U="undefined"!=typeof globalThis?globalThis:U||self).zeaEngine={})}(this,(function(U){"use strict";var F={name:"@zeainc/zea-engine",fileName:"index",libraryName:"ZeaEngine",version:"4.0.0",description:"Zea Engine",browser:"dist/index.umd.js",author:"Zea Inc.",typings:"dist/index.d.ts",files:["dist/**/*.ts","dist/index.umd.js.map","dist/index.umd.js"],engines:{node:">=10"},scripts:{"build:tsc":"npx tsc","build:tsc:watch":"npx tsc --watch","build:rollup":"rollup -c","build:rollup:watch":"rollup -w -c",copyJSFilesToDist:"copyfiles -u 1 src/**/*.{js,wasm,glsl,vert,frag} dist",copyPackageJson:'copyfiles -f "./package.json" dist',docs:"cp CHANGELOG.md docs_src/docs/Manual/ && yarn --cwd ./docs_src/ changelog && yarn --cwd ./docs_src/ run docs",prepare:"yarn run build",generate:"plop",release:"standard-version",start:"http-server --cors --port 8000 --silent","start:watch":"es-dev-server --cors --app-index testing-e2e/index.html --open --watch",build:"npm-run-all clean:build build:tsc copyJSFilesToDist copyPackageJson build:rollup",dev:"npm-run-all --parallel build:tsc:watch copyJSFilesToDist copyPackageJson build:rollup:watch start:watch",test:"jest","test:coverage":"jest --coverage","test:debug":"node --inspect ./node_modules/jest/bin/jest.js --runInBand --watch","test:watch":"jest --watch","test:e2e":"percy exec cypress run --browser chrome --headless","test:e2e:watch":"percy exec cypress open",lint:"tsdx lint",size:"size-limit",analyze:"size-limit --why","clean:build":"rm -Rf dist/ buildcache","clean:all":"rm -Rf dist/ node_modules/ buildcache yarn.lock"},husky:{hooks:{"pre-commit":"tsdx lint"}},dependencies:{lodash:"^4.17.21"},"size-limit":[{path:"dist/zea-engine.cjs.production.min.js",limit:"2100 KB"},{path:"dist/zea-engine.esm.js",limit:"2100 KB"}],devDependencies:{"@percy/cypress":"^2.3.1","@rollup/plugin-commonjs":"^15.1.0","@rollup/plugin-json":"^4.1.0","@rollup/plugin-node-resolve":"^9.0.0","@rollup/plugin-replace":"^3.0.0","@size-limit/preset-small-lib":"^5.0.3","@types/debug":"^4.1.7","@types/jest":"^26.0.23","@types/semver":"^7.3.8","@zeainc/gltf-loader":"^3.2.2","@zeainc/jsdocs2md":"^0.0.8","@zeainc/zea-cad":"^4.0.0","@zeainc/zea-collab":"^5.2.0","@zeainc/zea-potree":"^3.2.1","@zeainc/zea-ux":"^3.2.0","babel-jest":"^27.0.5",copyfiles:"latest",cypress:"^5.1.0","es-dev-server":"^2.1.0","http-server":"^13.0.1",husky:"^7.0.4",jest:"^27.0.6","jest-coverage-badges":"^1.1.2","npm-run-all":"^4.1.5",prettier:"^2.4.1",rollup:"^2.32.1","rollup-plugin-base64":"^1.0.1","rollup-plugin-glslify":"^1.2.0","rollup-plugin-node-polyfills":"^0.2.1","rollup-plugin-svg":"^2.0.0","rollup-plugin-terser":"^7.0.2","rollup-plugin-typescript2":"0.30.0","rollup-plugin-web-worker-loader":"^1.6.1","size-limit":"^5.0.3","standard-version":"^9.3.2","ts-jest":"^27.0.3",tsdx:"^0.14.1",tslib:"^2.3.1",typescript:"^4.4.2"}};const e=function(){if(!globalThis.navigator)return{isMobileDevice:!1,isIOSDevice:!1,browserName:"Node",webGLSupported:!1,deviceCategory:"High",hardwareConcurrency:4};const U=null!=(navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/webOS/i)||navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)||navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/Pixel/i)||navigator.userAgent.match(/Windows Phone/i)),F=function(){const U=navigator.userAgent;let F,e,t,Q=navigator.appName,l=""+parseFloat(navigator.appVersion),n=parseInt(navigator.appVersion,10);return navigator.brave?(Q="Brave",e=U.indexOf("Chrome"),l=U.substring(e+7,U.indexOf(" ",e+7))):-1!=(e=U.indexOf("Opera"))?(Q="Opera",l=U.substring(e+6),-1!=(e=U.indexOf("Version"))&&(l=U.substring(e+8))):-1!=(e=U.indexOf("MSIE"))?(Q="Microsoft Internet Explorer",l=U.substring(e+5)):-1!=(e=U.indexOf("Edge"))?(Q="Edge",l=U.substring(e+4)):-1!=(e=U.indexOf("Chrome"))?(Q="Chrome",l=U.substring(e+7,U.indexOf(" ",e+7))):-1!=(e=U.indexOf("Safari"))?(Q="Safari",l=U.substring(e+7),-1!=(e=U.indexOf("Version"))&&(l=U.substring(e+8))):-1!=(e=U.indexOf("Firefox"))?(Q="Firefox",l=U.substring(e+8)):(F=U.lastIndexOf(" ")+1)<(e=U.lastIndexOf("/"))&&(Q=U.substring(F,e),l=U.substring(e+1),Q.toLowerCase()==Q.toUpperCase()&&(Q=navigator.appName)),-1!=(t=l.indexOf(";"))&&(l=l.substring(0,t)),-1!=(t=l.indexOf(" "))&&(l=l.substring(0,t)),n=parseInt(""+l,10),isNaN(n)&&(l=""+parseFloat(navigator.appVersion),n=parseInt(navigator.appVersion,10)),{browserName:Q,fullVersion:l,majorVersion:n,appName:navigator.appName,userAgent:navigator.userAgent}}(),e=function(){let U,F;try{U=document.createElement("canvas").getContext("webgl")}catch(U){}if(!U)return{vendor:"Unknown",renderer:"Unknown",gpuVendor:"Unknown",maxTextureSize:0,supportsWebGL:!1,supportsWebGL2:!1};try{F=document.createElement("canvas").getContext("webgl2")}catch(U){}const e=U.getExtension("WEBGL_debug_renderer_info");if(!e)return console.warn("Unable to determine GPU Info:"),{vendor:"Unknown",renderer:"Unknown",gpuVendor:"Unknown",maxTextureSize:0,supportsWebGL:null!=U,supportsWebGL2:null!=F};const t=U.getParameter(e.UNMASKED_VENDOR_WEBGL),Q=U.getParameter(e.UNMASKED_RENDERER_WEBGL),l=U.getParameter(U.MAX_TEXTURE_SIZE);let n;return Q.match(/NVIDIA/i)?n="NVidia":Q.match(/AMD/i)||Q.match(/Radeon/i)?n="AMD":Q.match(/Intel/i)?n="Intel":Q.match(/Mali/i)?n="ARM":Q.match(/Apple/i)?n="Apple":Q.match(/Adreno/i)?n="Adreno":Q.match(/Swiftshader/i)?(n="Google",console.warn("Hardware rendering is disabled or not working on your system. Falling back to the Swiftshader. Expect poor performance:",Q)):console.warn("Unable to determine GPU vendor:",Q),{vendor:t,renderer:Q,gpuVendor:n,maxTextureSize:l,supportsWebGL:!0,supportsWebGL2:null!=F}}();let t="Low";if(e.supportsWebGL)if(U)t="Low";else{const U=e.renderer.replace(/[()]/g,"").split(" ");if("NVidia"==e.gpuVendor){const F=U.indexOf("GTX");if(-1!=F){const e=U[F+1];if(e.endsWith("M")){t=parseInt(e.substring(0,e.length-2))>=900?"Medium":"Low"}else{t=parseInt(e)>=1030?"High":"Medium"}}else t=U.includes("RTX")||U.includes("TITAN")||U.includes("Quadro")?"High":"Low"}else if("AMD"==e.gpuVendor){const F=U.indexOf("Radeon");if(-1!=F){const e=U.indexOf("RX");if(-1!=e)if("Vega"==U[e+1])t="High";else{const F=U[e+1];let Q;F.endsWith("X")?(Q=parseInt(F.substring(0,F.length-2)),t="High"):Q=parseInt(F),t=Q>=480?"High":"Medium"}else if("Pro"==U[F+1]){t=parseInt(U[e+1])>=450?"Medium":"Low"}else if("Sky"==U[F+1]){t=parseInt(U[e+1])>=700?"Medium":"Low"}else t="Low"}else t=U.includes("FirePro")||U.includes("Quadro")?"High":"Low"}else("Adreno"==e.gpuVendor||"Intel"==e.gpuVendor||"Google"==e.gpuVendor)&&(t="Low")}let Q=globalThis.navigator.hardwareConcurrency;return Q||(Q=U?4:6),{isMobileDevice:U,isIOSDevice:null!=(navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)),browserName:F.browserName,fullVersion:F.fullVersion,majorVersion:F.majorVersion,appName:F.appName,userAgent:F.userAgent,webGLSupported:e.supportsWebGL,gpuDesc:e,deviceCategory:t,hardwareConcurrency:Q}}();globalThis.ZeaSystemDesc||(globalThis.ZeaSystemDesc=e);let t={},Q={},l=[];class n{static register(U,F){U in t&&console.warn(`There's a class registered with '${U}' name`);const e=l.length;l.push(F),Q[e]=U,t[U]=e}static getClassDefinition(U){if(!(U in t))throw new Error(`${U} class is not registered`);return l[t[U]]}static getClassName(U){const F=l.indexOf(U);if(F>=0&&Q[F])return Q[F];throw new Error("class is not registered")}static constructClass(U){const F=l[t[U]];if(!F)throw new Error(`${U} class is not registered`);return new F}static flush(){t={},Q={},l=[]}}class a{static replaceAll(U,F,e){return U.replace(new RegExp(F,"g"),e)}static stringifyJSONWithFixedPrecision(U,F=0,e=5){return JSON.stringify(U,((U,F)=>F&&F.toFixed?Number(F.toFixed(e)):F),F)}static hashStr(U){let F,e,t,Q=0;if(0===U.length)return Q;for(F=0,t=U.length;F<t;F++)e=U.charCodeAt(F),Q=(Q<<5)-Q+e,Q|=0;return Math.abs(Q)}}class d{constructor(U=0,F=0){U instanceof Float32Array||U instanceof Uint32Array||U instanceof Int32Array?this.__data=U:"number"==typeof U&&"number"==typeof F?(this.__data=new Float32Array(2),this.__data[0]=U,this.__data[1]=F):"object"==typeof U?(this.__data=new Float32Array(2),this.fromJSON(U)):this.__data=new Float32Array(2)}get x(){return this.__data[0]}set x(U){this.__data[0]=U}get y(){return this.__data[1]}set y(U){this.__data[1]=U}set(U,F){this.__data[0]=U,this.__data[1]=F}setFromOther(U){this.x=U.x,this.y=U.y}isEqual(U){return this.x==U.x&&this.y==U.y}notEqual(U){return this.x!=U.x&&this.y!=U.y}approxEqual(U,F=Number.EPSILON){return Math.abs(this.x-U.x)<F&&Math.abs(this.y-U.y)<F}add(U){return new d(this.x+U.x,this.y+U.y)}addInPlace(U){this.x+=U.x,this.y+=U.y}subtract(U){return new d(this.x-U.x,this.y-U.y)}subtractInPlace(U){return this.x-=U.x,this.y-=U.y,this}scale(U){return new d(this.x*U,this.y*U)}scaleInPlace(U){this.x*=U,this.y*=U}invert(){return new d(1/this.x,1/this.y)}invertInPlace(){return this.x=1/this.x,this.y=1/this.y,this}multiply(U){return new d(this.x*U.x,this.y*U.y)}multiplyInPlace(U){this.x*=U.x,this.y*=U.y}lengthSquared(){const U=this.__data[0],F=this.__data[1];return U*U+F*F}length(){return Math.sqrt(this.lengthSquared())}distanceTo(U){const F=this.__data[0]-U.x,e=this.__data[1]-U.y;return Math.sqrt(F*F+e*e)}normalize(){const U=this.__data[0],F=this.__data[1];let e=U*U+F*F;return e<Number.EPSILON?new d:(e=1/Math.sqrt(e),new d(U*e,F*e))}normalizeInPlace(){const U=this.__data[0],F=this.__data[1];let e=U*U+F*F;e<Number.EPSILON||(e=1/Math.sqrt(e),this.set(U*e,F*e))}dot(U){return this.x*U.x+this.y*U.y}cross(U){return this.x*U.y-this.y*U.x}angleTo(U){const F=this.normalize().dot(U.normalize());return F>1?0:F<-1?Math.PI:Math.acos(F)}signedAngleTo(U){const F=this.angleTo(U);return this.cross(U)<0?-F:F}rotate(U){const F=Math.cos(U),e=Math.sin(U);return new d(this.x*F-this.y*e,this.x*e+this.y*F)}lerp(U,F){const e=this.x,t=this.y;return new d(e+F*(U.x-e),t+F*(U.y-t))}setRandomDir(U=1){const F=2*Math.random()*Math.PI;return this.__data[0]=Math.cos(F)*U,this.__data[1]=Math.sin(F)*U,this}setRandom(U=1){return this.__data[0]=Math.random()*U,this.__data[1]=Math.random()*U,this}clone(){return new d(this.__data[0],this.__data[1])}asArray(){return this.__data}toString(){return a.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.x,y:this.y}}fromJSON(U){this.x=U.x,this.y=U.y}readBinary(U){this.x=U.loadFloat32(),this.y=U.loadFloat32()}static intersectionOfLines(U,F,e,t){const Q=(U.x-F.x)*(e.y-t.y)-(U.y-F.y)*(e.x-t.x);if(0==Q)return null;const l=U.x*F.y-U.y*F.x,n=e.x*t.y-e.y*t.x,a=e.x-t.x,i=U.x-F.x,s=e.y-t.y,R=U.y-F.y;return new d((l*a-i*n)/Q,(l*s-R*n)/Q)}isValid(){for(const U of this.__data)if(U==1/0||isNaN(U))return!1;return!0}}class i{constructor(U=0,F=0,e=0){if(U instanceof Float32Array||U instanceof Uint32Array)this.__data=U;else if(U instanceof ArrayBuffer){console.warn("deprecated, please use new Vec3(new Float32Array(buffer, byteOffset, 3))");const e=U,t=F;this.__data=new Float32Array(e,t,3)}else"number"==typeof U&&"number"==typeof F&&"number"==typeof e?(this.__data=new Float32Array(3),this.__data[0]=U,this.__data[1]=F,this.__data[2]=e):null!=U&&"object"==typeof U?(this.__data=new Float32Array(3),this.fromJSON(U)):this.__data=new Float32Array(3)}get x(){return this.__data[0]}set x(U){this.__data[0]=U}get y(){return this.__data[1]}set y(U){this.__data[1]=U}get z(){return this.__data[2]}set z(U){this.__data[2]=U}get xy(){return new d(this.__data[0],this.__data[1])}get yz(){return new d(this.__data[1],this.__data[2])}set(U,F,e){this.x=U,this.y=void 0!==F?F:U,this.z=void 0!==e?e:U}setDataArray(U){this.__data=U}setFromOther(U){this.x=U.x,this.y=U.y,this.z=U.z}isNull(){return Math.abs(this.x)<Number.EPSILON&&Math.abs(this.y)<Number.EPSILON&&Math.abs(this.z)<Number.EPSILON}is111(){return Math.abs(1-this.x)<Number.EPSILON&&Math.abs(1-this.y)<Number.EPSILON&&Math.abs(1-this.z)<Number.EPSILON}isEqual(U){return this.x==U.x&&this.y==U.y&&this.z==U.z}notEqual(U){return this.x!=U.x&&this.y!=U.y&&this.z!=U.z}approxEqual(U,F=Number.EPSILON){return Math.abs(this.x-U.x)<F&&Math.abs(this.y-U.y)<F&&Math.abs(this.z-U.z)<F}add(U){return new i(this.x+U.x,this.y+U.y,this.z+U.z)}addInPlace(U){this.x+=U.x,this.y+=U.y,this.z+=U.z}subtract(U){return new i(this.x-U.x,this.y-U.y,this.z-U.z)}subtractInPlace(U){this.x-=U.x,this.y-=U.y,this.z-=U.z}multiply(U){return new i(this.x*U.x,this.y*U.y,this.z*U.z)}multiplyInPlace(U){this.x*=U.x,this.y*=U.y,this.z*=U.z}divide(U){return new i(this.x/U.x,this.y/U.y,this.z/U.z)}divideInPlace(U){this.x/=U.x,this.y/=U.y,this.z/=U.z}scale(U){return new i(this.x*U,this.y*U,this.z*U)}scaleInPlace(U){this.x*=U,this.y*=U,this.z*=U}negate(){return new i(-this.x,-this.y,-this.z)}inverse(){return new i(1/this.x,1/this.y,1/this.z)}lengthSquared(){const U=this.__data[0],F=this.__data[1],e=this.__data[2];return U*U+F*F+e*e}length(){return Math.sqrt(this.lengthSquared())}distanceTo(U){const F=this.__data[0]-U.x,e=this.__data[1]-U.y,t=this.__data[2]-U.z;return Math.sqrt(F*F+e*e+t*t)}normalize(){let U=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];return U<Number.EPSILON?new i:(U=1/Math.sqrt(U),new i(this.__data[0]*U,this.__data[1]*U,this.__data[2]*U))}normalizeInPlace(){let U=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];if(U<Number.EPSILON)return;U=Math.sqrt(U);const F=1/U;return this.__data[0]*=F,this.__data[1]*=F,this.__data[2]*=F,U}resize(U){const F=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];if(F<Number.EPSILON)return;const e=U/Math.sqrt(F);return new i(this.__data[0]*e,this.__data[1]*e,this.__data[2]*e)}resizeInPlace(U){const F=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];if(F<Number.EPSILON)return;const e=U/Math.sqrt(F);this.__data[0]*=e,this.__data[1]*=e,this.__data[2]*=e}dot(U){return this.x*U.x+this.y*U.y+this.z*U.z}cross(U){const F=this.x,e=this.y,t=this.z,Q=U.x,l=U.y,n=U.z;return new i(e*n-t*l,t*Q-F*n,F*l-e*Q)}angleTo(U){const F=this.dot(U);return F>1?0:Math.acos(F)}lerp(U,F){const e=this.x,t=this.y,Q=this.z;return new i(e+F*(U.x-e),t+F*(U.y-t),Q+F*(U.z-Q))}abs(){return new i(Math.abs(this.x),Math.abs(this.y),Math.abs(this.z))}setRandomDir(U=1){const F=2*Math.random()*Math.PI,e=2*Math.random()-1,t=Math.sqrt(1-e*e)*U;return this.__data[0]=Math.cos(F)*t,this.__data[1]=Math.sin(F)*t,this.__data[2]=e*U,this}setRandom(U=1){return this.__data[0]=(Math.random()-.5)*U,this.__data[1]=(Math.random()-.5)*U,this.__data[2]=(Math.random()-.5)*U,this}clone(){return new i(this.__data[0],this.__data[1],this.__data[2])}asArray(){return this.__data}toString(){return a.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.x,y:this.y,z:this.z}}fromJSON(U){this.x=U.x,this.y=U.y,this.z=U.z}readBinary(U){this.x=U.loadFloat32(),this.y=U.loadFloat32(),this.z=U.loadFloat32()}isValid(){for(const U of this.__data)if(U==1/0||isNaN(U))return!1;return!0}}class s{constructor(U=0,F=0,e=0,t=0){if(U instanceof Float32Array||U instanceof Uint32Array)this.__data=U;else if(U instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const e=U,t=F;this.__data=new Float32Array(e,t,4)}else"number"==typeof U&&"number"==typeof F&&"number"==typeof e&&"number"==typeof t?(this.__data=new Float32Array(4),this.__data[0]=U,this.__data[1]=F,this.__data[2]=e,this.__data[3]=t):null!=U&&"object"==typeof U?(this.__data=new Float32Array(4),this.fromJSON(U)):this.__data=new Float32Array(4)}get x(){return this.__data[0]}set x(U){this.__data[0]=U}get y(){return this.__data[1]}set y(U){this.__data[1]=U}get z(){return this.__data[2]}set z(U){this.__data[2]=U}get t(){return this.__data[3]}set t(U){this.__data[3]=U}get w(){return this.__data[3]}set w(U){this.__data[3]=U}get xyz(){return new i(this.__data[0],this.__data[1],this.__data[2])}set(U,F,e,t){this.x=U,this.y=F,this.z=e,this.t=t}setFromOther(U){this.x=U.x,this.y=U.y,this.z=U.z,this.t=U.t}isEqual(U){return this.x==U.x&&this.y==U.y&&this.z==U.z&&this.t==U.t}notEqual(U){return this.x!=U.x&&this.y!=U.y&&this.z!=U.z&&this.t!=U.t}approxEqual(U,F=Number.EPSILON){return Math.abs(this.x-U.x)<F&&Math.abs(this.y-U.y)<F&&Math.abs(this.z-U.z)<F&&Math.abs(this.t-U.t)<F}add(U){return new s(this.x+U.x,this.y+U.y,this.z+U.z,this.t+U.t)}addInPlace(U){this.x+=U.x,this.y+=U.y,this.z+=U.z,this.t+=U.t}subtract(U){return new s(this.x-U.x,this.y-U.y,this.z-U.z,this.t-U.t)}subtractInPlace(U){this.x-=U.x,this.y-=U.y,this.z-=U.z,this.t-=U.t}multiply(U){return new s(this.x*U.x,this.y*U.y,this.z*U.z,this.t*U.t)}multiplyInPlace(U){this.x*=U.x,this.y*=U.y,this.z*=U.z,this.t*=U.t}divide(U){return new s(this.x/U.x,this.y/U.y,this.z/U.z,this.t/U.t)}divideInPlace(U){this.x/=U.x,this.y/=U.y,this.z/=U.z,this.t/=U.t}scale(U){return new s(this.x*U,this.y*U,this.z*U,this.t*U)}scaleInPlace(U){this.set(this.x*U,this.y*U,this.z*U,this.t*U)}length(){const U=this.__data[0],F=this.__data[1],e=this.__data[2],t=this.__data[2];return Math.sqrt(U*U+F*F+e*e+t*t)}lengthSquared(){const U=this.__data[0],F=this.__data[1],e=this.__data[2],t=this.__data[3];return U*U+F*F+e*e+t*t}normalize(){const U=this.__data[0],F=this.__data[1],e=this.__data[2],t=this.__data[3];let Q=U*U+F*F+e*e+t*t;return Q<Number.EPSILON?new s:(Q=1/Math.sqrt(Q),new s(U*Q,F*Q,e*Q))}normalizeInPlace(){const U=this.__data[0],F=this.__data[1],e=this.__data[2],t=this.__data[3];let Q=U*U+F*F+e*e+t*t;Q<Number.EPSILON||(Q=1/Math.sqrt(Q),this.set(U*Q,F*Q,e*Q,t*Q))}dot(U){return this.x*U.x+this.y*U.y+this.z*U.z+this.t*U.t}cross(U){const F=this.x,e=this.y,t=this.z,Q=this.t,l=U.x,n=U.y,a=U.z,d=U.t;return new s(e*a-t*n,t*d-Q*a,Q*l-F*d,F*n-e*l)}angleTo(U){const F=this.normalize(),e=U.normalize(),t=F.dot(e);return t>1?0:Math.acos(t)}lerp(U,F){const e=this.x,t=this.y,Q=this.z,l=this.t;return new s(e+F*(U.x-e),t+F*(U.y-t),Q+F*(U.z-Q),l+F*(U.t-l))}clone(){return new s(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}toVec3(){return new i(this.__data[0],this.__data[1],this.__data[2])}asArray(){return this.__data}toString(){return a.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.x,y:this.y,z:this.z,t:this.t}}fromJSON(U){this.x=U.x,this.y=U.y,this.z=U.z,this.t=U.t}readBinary(U){this.x=U.loadFloat32(),this.y=U.loadFloat32(),this.z=U.loadFloat32(),this.t=U.loadFloat32()}isValid(){for(const U of this.__data)if(U==1/0||isNaN(U))return!1;return!0}}class R{constructor(U=0,F=0,e=0,t=255){if(U instanceof Uint8Array)this.__data=U;else if(U instanceof ArrayBuffer){const e=U,t=F;this.__data=new Uint8Array(e,t,4)}else this.__data=new Uint8Array(4),"string"==typeof U?U.startsWith("#")?this.setFromHex(U):this.setFromCSSColorName(U):(this.__data[0]=U,this.__data[1]=F,this.__data[2]=e,this.__data[3]=t)}get r(){return this.__data[0]}set r(U){this.__data[0]=U}get g(){return this.__data[1]}set g(U){this.__data[1]=U}get b(){return this.__data[2]}set b(U){this.__data[2]=U}get a(){return this.__data[3]}set a(U){this.__data[3]=U}set(U,F,e,t=255){this.r=U,this.g=F,this.b=e,this.a=t}setFromOther(U){this.r=U.r,this.g=U.g,this.b=U.b,this.a=U.a}setFromArray(U){this.r=U[0],this.g=U[1],this.b=U[2],this.a=4==U.length?U[3]:1}setFromHex(U){const F=function(U){const F=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(U);return F?{r:parseInt(F[1],16),g:parseInt(F[2],16),b:parseInt(F[3],16)}:null}(U);F?this.set(F.r,F.g,F.b):console.warn("Invalid hex code:"+U)}setFromCSSColorName(U){if(U.startsWith("#"))this.setFromHex(U);else{const F={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4","indianred ":"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"}[U.toLowerCase()];F&&this.setFromHex(F)}}toHex(){function U(U){const F=U.toString(16);return 1==F.length?"0"+F:F}return"#"+U(this.r)+U(this.g)+U(this.b)}equal(U){return this.r==U.r&&this.g==U.g&&this.b==U.b&&this.a==U.a}notEquals(U){return this.r!=U.r&&this.g!=U.g&&this.b!=U.b&&this.a!=U.a}approxEqual(U,F=Number.EPSILON){return Math.abs(this.r-U.r)<F&&Math.abs(this.g-U.g)<F&&Math.abs(this.b-U.b)<F&&Math.abs(this.a-U.a)<F}add(U){return new R(this.r+U.r,this.g+U.g,this.b+U.b,this.a+U.a)}subtract(U){return new R(this.r-U.r,this.g-U.g,this.b-U.b,this.a-U.a)}scale(U){return new R(this.r*U,this.g*U,this.b*U,this.a*U)}scaleInPlace(U){this.r*=U,this.g*=U,this.b*=U,this.a*=U}applyGamma(U){this.set(Math.pow(this.r,U),Math.pow(this.g,U),Math.pow(this.b,U),this.a)}toLinear(U=2.2){return new R(Math.pow(this.r,U),Math.pow(this.g,U),Math.pow(this.b,U),this.a)}toGamma(U=2.2){return new R(Math.pow(this.r,1/U),Math.pow(this.g,1/U),Math.pow(this.b,1/U),this.a)}luminance(){return.2126*this.r+.7152*this.g+.0722*this.b}lerp(U,F){const e=this.r,t=this.g,Q=this.b,l=this.a;return new R(e+F*(U.r-e),t+F*(U.g-t),Q+F*(U.b-Q),l+F*(U.a-l))}static random(U=0,F=!1){return U>0?new R(U+Math.random()*(1-U),U+Math.random()*(1-U),U+Math.random()*(1-U),F?U+Math.random()*(1-U):1):U<0?new R(Math.random()*(1+U),Math.random()*(1+U),Math.random()*(1+U),F?Math.random()*(1+U):1):new R(Math.random(),Math.random(),Math.random(),F?Math.random():1)}clone(){return new R(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}asArray(){return this.__data}as3ComponentArray(){return[this.__data[0],this.__data[1],this.__data[2]]}toJSON(){return{r:this.r,g:this.g,b:this.b,a:this.a}}fromJSON(U){this.r=U.r,this.g=U.g,this.b=U.b,this.a=U.a}toCSSString(){return"rgba("+Math.round(255*this.r)+", "+Math.round(255*this.g)+", "+Math.round(255*this.b)+", "+this.a+")"}}class B{constructor(U=0,F=0,e=0,t=1){if(U instanceof Float32Array)this.__data=U;else if(U instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const e=U,t=F;this.__data=new Float32Array(e,t,4)}else this.__data=new Float32Array(4),"string"==typeof U?U.startsWith("#")?this.setFromHex(U):this.setFromCSSColorName(U):(this.__data[0]=U,this.__data[1]=F,this.__data[2]=e,this.__data[3]=t)}get r(){return this.__data[0]}set r(U){this.__data[0]=U}get g(){return this.__data[1]}set g(U){this.__data[1]=U}get b(){return this.__data[2]}set b(U){this.__data[2]=U}get a(){return this.__data[3]}set a(U){this.__data[3]=U}set(U,F,e,t=1){this.r=U,this.g=F,this.b=e,this.a=t}setFromOther(U){this.r=U.r,this.g=U.g,this.b=U.b,this.a=U.a}setFromScalarArray(U){this.r=U[0],this.g=U[1],this.b=U[2],this.a=4==U.length?U[3]:1}getAsRGBArray(){return[255*this.r,255*this.g,255*this.b]}getAsRGBDict(){return{r:255*this.r,g:255*this.g,b:255*this.b}}setFromRGB(U,F,e,t){this.r=U/255,this.g=F/255,this.b=e/255,this.a=t?t/255:1}setFromRGBArray(U){this.r=U[0]/255,this.g=U[1]/255,this.b=U[2]/255,this.a=4==U.length?U[3]/255:1}setFromRGBDict(U){this.r=U.r/255,this.g=U.g/255,this.b=U.b/255,this.a=4==U.a?U.a/255:1}setFromHex(U){const F=function(U){const F=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(U);return F?{r:parseInt(F[1],16),g:parseInt(F[2],16),b:parseInt(F[3],16)}:null}(U);F?this.setFromRGB(F.r,F.g,F.b):console.warn("Invalid hex code:"+U)}setFromCSSColorName(U){if(U.startsWith("#"))this.setFromHex(U);else{const F={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4","indianred ":"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"}[U.toLowerCase()];F&&this.setFromHex(F)}}toHex(){function U(U){const F=Math.round(255*U).toString(16);return 1==F.length?"0"+F:F}return"#"+U(this.r)+U(this.g)+U(this.b)}isEqual(U){return this.r==U.r&&this.g==U.g&&this.b==U.b&&this.a==U.a}notEquals(U){return this.r!=U.r&&this.g!=U.g&&this.b!=U.b&&this.a!=U.a}approxEqual(U,F=Number.EPSILON){return Math.abs(this.r-U.r)<F&&Math.abs(this.g-U.g)<F&&Math.abs(this.b-U.b)<F&&Math.abs(this.a-U.a)<F}add(U){return new B(this.r+U.r,this.g+U.g,this.b+U.b,this.a+U.a)}addInPlace(U){this.r+=U.r,this.g+=U.g,this.b+=U.b,this.a+=U.a}subtract(U){return new B(this.r-U.r,this.g-U.g,this.b-U.b,this.a-U.a)}scale(U){return new B(this.r*U,this.g*U,this.b*U,this.a*U)}scaleInPlace(U){this.r*=U,this.g*=U,this.b*=U,this.a*=U}applyGamma(U){this.set(Math.pow(this.r,U),Math.pow(this.g,U),Math.pow(this.b,U),this.a)}toLinear(U=2.2){return new B(Math.pow(this.r,U),Math.pow(this.g,U),Math.pow(this.b,U),this.a)}toGamma(U=2.2){return new B(Math.pow(this.r,1/U),Math.pow(this.g,1/U),Math.pow(this.b,1/U),this.a)}luminance(){return.2126*this.r+.7152*this.g+.0722*this.b}lerp(U,F){const e=this.r,t=this.g,Q=this.b,l=this.a;return new B(e+F*(U.r-e),t+F*(U.g-t),Q+F*(U.b-Q),l+F*(U.a-l))}static random(U=0,F=!1){return U>0?new B(U+Math.random()*(1-U),U+Math.random()*(1-U),U+Math.random()*(1-U),F?U+Math.random()*(1-U):1):U<0?new B(Math.random()*(1+U),Math.random()*(1+U),Math.random()*(1+U),F?Math.random()*(1+U):1):new B(Math.random(),Math.random(),Math.random(),F?Math.random():1)}clone(){return new B(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}asArray(){return this.__data}as3ComponentArray(){return[this.__data[0],this.__data[1],this.__data[2]]}toJSON(){return{r:this.r,g:this.g,b:this.b,a:this.a}}fromJSON(U){this.r=U.r,this.g=U.g,this.b=U.b,this.a=U.a}readBinary(U){this.r=U.loadFloat32(),this.g=U.loadFloat32(),this.b=U.loadFloat32(),this.a=U.loadFloat32()}toCSSString(){return"rgba("+Math.round(255*this.r)+", "+Math.round(255*this.g)+", "+Math.round(255*this.b)+", "+this.a+")"}}class V{constructor(U=0,F=0,e=0,t=0){if("number"!=typeof t||isNaN(t))switch(t){case"XYZ":this.order=0;break;case"YZX":this.order=1;break;case"ZXY":this.order=2;break;case"XZY":this.order=3;break;case"ZYX":this.order=4;break;case"YXZ":this.order=5;break;default:throw new Error("Invalid Euler Angles Order:"+t)}else this.order=t;if(U instanceof ArrayBuffer){const e=U,t=F;this.__data=new Float32Array(e,t,4)}else this.__data=new Float32Array(3),this.__data[0]=U,this.__data[1]=F,this.__data[2]=e}get x(){return this.__data[0]}set x(U){this.__data[0]=U}get y(){return this.__data[1]}set y(U){this.__data[1]=U}get z(){return this.__data[2]}set z(U){this.__data[2]=U}set(U,F,e){this.__data[0]=U,this.__data[1]=F,this.__data[2]=e}toString(){return a.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.__data[0],y:this.__data[1],z:this.__data[2],order:this.order}}fromJSON(U){this.__data[0]=U.x,this.__data[1]=U.y,this.__data[2]=U.z,this.order=U.order}}class r{constructor(U=1,F=0,e=0,t=0,Q=1,l=0,n=0,a=0,d=1){if(U instanceof i&&F instanceof i&&e instanceof i)this.__data=new Float32Array(9),this.set(U.x,U.y,U.z,F.x,F.y,F.z,e.x,e.y,e.z);else if(U instanceof Float32Array)this.__data=U;else if(U instanceof ArrayBuffer){console.warn("Deprecated, please use new Vec3(new Float32Array(buffer, byteOffset, 9))");const e=U,t=F;this.__data=new Float32Array(e,t,9)}else this.__data=new Float32Array(9),this.set(U,F,e,t,Q,l,n,a,d)}get m00(){return this.__data[0]}set m00(U){this.__data[0]=U}get m01(){return this.__data[1]}set m01(U){this.__data[1]=U}get m02(){return this.__data[2]}set m02(U){this.__data[2]=U}get m10(){return this.__data[3]}set m10(U){this.__data[3]=U}get m11(){return this.__data[4]}set m11(U){this.__data[4]=U}get m12(){return this.__data[5]}set m12(U){this.__data[5]=U}get m20(){return this.__data[6]}set m20(U){this.__data[6]=U}get m21(){return this.__data[7]}set m21(U){this.__data[7]=U}get m22(){return this.__data[8]}set m22(U){this.__data[8]=U}get xAxis(){return new i(new Float32Array(this.__data.buffer,0,3))}set xAxis(U){this.xAxis.set(U.x,U.y,U.z)}get yAxis(){return new i(new Float32Array(this.__data.buffer,12,3))}set yAxis(U){this.yAxis.set(U.x,U.y,U.z)}get zAxis(){return new i(new Float32Array(this.__data.buffer,24,3))}set zAxis(U){this.zAxis.set(U.x,U.y,U.z)}set(U=1,F=0,e=0,t=0,Q=1,l=0,n=0,a=0,d=1){this.__data[0]=U,this.__data[1]=F,this.__data[2]=e,this.__data[3]=t,this.__data[4]=Q,this.__data[5]=l,this.__data[6]=n,this.__data[7]=a,this.__data[8]=d}setIdentity(){this.set()}setFromMat(U){this.__data[0]=U.m00,this.__data[1]=U.m01,this.__data[2]=U.m02,this.__data[3]=U.m10,this.__data[4]=U.m11,this.__data[5]=U.m12,this.__data[6]=U.m20,this.__data[7]=U.m21,this.__data[8]=U.m22}setFromDirectionAndUpvector(U,F){const e=U,t=e.length();if(t<Number.EPSILON)return void this.setIdentity();e.scaleInPlace(1/t);const Q=F.cross(e),l=Q.length();l>Number.EPSILON&&Q.scaleInPlace(1/l);const n=e.cross(Q),a=n.length();a>Number.EPSILON&&n.scaleInPlace(1/a),this.set(Q.x,Q.y,Q.z,n.x,n.y,n.z,e.x,e.y,e.z)}inverse(){const U=this.__data[0],F=this.__data[1],e=this.__data[2],t=this.__data[3],Q=this.__data[4],l=this.__data[5],n=this.__data[6],a=this.__data[7],d=this.__data[8],i=d*Q-l*a,s=-d*t+l*n,R=a*t-Q*n;let B=U*i+F*s+e*R;return B?(B=1/B,new r(i*B,(-d*F+e*a)*B,(l*F-e*Q)*B,s*B,(d*U-e*n)*B,(-l*U+e*t)*B,R*B,(-a*U+F*n)*B,(Q*U-F*t)*B)):(console.warn("Unable to invert Mat3"),new r)}invertInPlace(){const U=this.__data[0],F=this.__data[1],e=this.__data[2],t=this.__data[3],Q=this.__data[4],l=this.__data[5],n=this.__data[6],a=this.__data[7],d=this.__data[8],i=d*Q-l*a,s=-d*t+l*n,R=a*t-Q*n;let B=U*i+F*s+e*R;return B?(B=1/B,this.set(i*B,(-d*F+e*a)*B,(l*F-e*Q)*B,s*B,(d*U-e*n)*B,(-l*U+e*t)*B,R*B,(-a*U+F*n)*B,(Q*U-F*t)*B),!0):(console.warn("Unable to invert Mat3"),!1)}transpose(){return new r(this.__data[0],this.__data[3],this.__data[6],this.__data[1],this.__data[4],this.__data[7],this.__data[2],this.__data[5],this.__data[8])}transposeInPlace(){const U=this.__data[1],F=this.__data[2],e=this.__data[5];this.__data[1]=this.__data[3],this.__data[2]=this.__data[6],this.__data[3]=U,this.__data[5]=this.__data[7],this.__data[6]=F,this.__data[7]=e}transformVec3(U){return new i(this.__data[0]*U.x+this.__data[1]*U.y+this.__data[2]*U.z,this.__data[3]*U.x+this.__data[4]*U.y+this.__data[5]*U.z,this.__data[6]*U.x+this.__data[7]*U.y+this.__data[8]*U.z)}clone(){return new r(this.__data[0],this.__data[1],this.__data[2],this.__data[3],this.__data[4],this.__data[5],this.__data[6],this.__data[7],this.__data[8])}readBinary(U){this.__data=U.loadFloat32Array(9)}toJSON(){return this.__data}fromJSON(U){this.__data=new Float32Array(U)}toString(){return a.stringifyJSONWithFixedPrecision(this.toJSON())}asArray(){return this.__data}}class h{constructor(U=1,F=0,e=0,t=0,Q=0,l=1,n=0,a=0,d=0,i=0,s=1,R=0,B=0,V=0,r=0,h=1){if(U instanceof Float32Array)this.__data=U;else if(U instanceof ArrayBuffer){const e=U,t=F;this.__data=new Float32Array(e,t,16)}else this.__data=new Float32Array(16),this.set(U,F,e,t,Q,l,n,a,d,i,s,R,B,V,r,h)}get m00(){return this.__data[0]}set m00(U){this.__data[0]=U}get m01(){return this.__data[1]}set m01(U){this.__data[1]=U}get m02(){return this.__data[2]}set m02(U){this.__data[2]=U}get m03(){return this.__data[3]}set m03(U){this.__data[3]=U}get m10(){return this.__data[4]}set m10(U){this.__data[4]=U}get m11(){return this.__data[5]}set m11(U){this.__data[5]=U}get m12(){return this.__data[6]}set m12(U){this.__data[6]=U}get m13(){return this.__data[7]}set m13(U){this.__data[7]=U}get m20(){return this.__data[8]}set m20(U){this.__data[8]=U}get m21(){return this.__data[9]}set m21(U){this.__data[9]=U}get m22(){return this.__data[10]}set m22(U){this.__data[10]=U}get m23(){return this.__data[11]}set m23(U){this.__data[11]=U}get m30(){return this.__data[12]}set m30(U){this.__data[12]=U}get m31(){return this.__data[13]}set m31(U){this.__data[13]=U}get m32(){return this.__data[14]}set m32(U){this.__data[14]=U}get m33(){return this.__data[15]}set m33(U){this.__data[15]=U}get xAxis(){return new i(new Float32Array(this.__data.buffer,0,3))}set xAxis(U){this.xAxis.set(U.x,U.y,U.z)}get yAxis(){return new i(new Float32Array(this.__data.buffer,16,3))}set yAxis(U){this.yAxis.set(U.x,U.y,U.z)}get zAxis(){return new i(new Float32Array(this.__data.buffer,32,3))}set zAxis(U){this.zAxis.set(U.x,U.y,U.z)}get translation(){return new i(new Float32Array(this.__data.buffer,48,3))}set translation(U){this.translation.set(U.x,U.y,U.z)}set(U=1,F=0,e=0,t=0,Q=0,l=1,n=0,a=0,d=0,i=0,s=1,R=0,B=0,V=0,r=0,h=1){this.__data[0]=U,this.__data[1]=F,this.__data[2]=e,this.__data[3]=t,this.__data[4]=Q,this.__data[5]=l,this.__data[6]=n,this.__data[7]=a,this.__data[8]=d,this.__data[9]=i,this.__data[10]=s,this.__data[11]=R,this.__data[12]=B,this.__data[13]=V,this.__data[14]=r,this.__data[15]=h}setIdentity(){this.set()}setDataArray(U){this.__data=U}setFromMat4(U){this.__data[0]=U.m00,this.__data[1]=U.m01,this.__data[2]=U.m02,this.__data[3]=U.m03,this.__data[4]=U.m10,this.__data[5]=U.m11,this.__data[6]=U.m12,this.__data[7]=U.m13,this.__data[8]=U.m20,this.__data[9]=U.m21,this.__data[10]=U.m22,this.__data[11]=U.m23,this.__data[12]=U.m30,this.__data[13]=U.m31,this.__data[14]=U.m32,this.__data[15]=U.m33}toMat3(){return new r(this.__data[0],this.__data[1],this.__data[2],this.__data[4],this.__data[5],this.__data[6],this.__data[8],this.__data[9],this.__data[10])}transposeInPlace(){const U=this.__data[1],F=this.__data[2],e=this.__data[3],t=this.__data[6],Q=this.__data[7],l=this.__data[11];this.__data[1]=this.__data[4],this.__data[2]=this.__data[8],this.__data[3]=this.__data[12],this.__data[4]=U,this.__data[6]=this.__data[9],this.__data[7]=this.__data[13],this.__data[8]=F,this.__data[9]=t,this.__data[11]=this.__data[14],this.__data[12]=e,this.__data[13]=Q,this.__data[14]=l}transpose(){return new h(this.__data[0],this.__data[4],this.__data[8],this.__data[12],this.__data[1],this.__data[5],this.__data[9],this.__data[13],this.__data[2],this.__data[6],this.__data[10],this.__data[14],this.__data[3],this.__data[7],this.__data[11],this.__data[15])}inverse(){const U=this.__data[0],F=this.__data[1],e=this.__data[2],t=this.__data[3],Q=this.__data[4],l=this.__data[5],n=this.__data[6],a=this.__data[7],d=this.__data[8],i=this.__data[9],s=this.__data[10],R=this.__data[11],B=this.__data[12],V=this.__data[13],r=this.__data[14],o=this.__data[15],J=U*l-F*Q,Z=U*n-e*Q,c=U*a-t*Q,m=F*n-e*l,S=F*a-t*l,W=e*a-t*n,E=d*V-i*B,p=d*r-s*B,u=d*o-R*B,N=i*r-s*V,k=i*o-R*V,b=s*o-R*r;let C=J*b-Z*k+c*N+m*u-S*p+W*E;return C?(C=1/C,new h((l*b-n*k+a*N)*C,(e*k-F*b-t*N)*C,(V*W-r*S+o*m)*C,(s*S-i*W-R*m)*C,(n*u-Q*b-a*p)*C,(U*b-e*u+t*p)*C,(r*c-B*W-o*Z)*C,(d*W-s*c+R*Z)*C,(Q*k-l*u+a*E)*C,(F*u-U*k-t*E)*C,(B*S-V*c+o*J)*C,(i*c-d*S-R*J)*C,(l*p-Q*N-n*E)*C,(U*N-F*p+e*E)*C,(V*Z-B*m-r*J)*C,(d*m-i*Z+s*J)*C)):(console.warn("Unable to invert Mat4"),this)}invertInPlace(){const U=this.__data[0],F=this.__data[1],e=this.__data[2],t=this.__data[3],Q=this.__data[4],l=this.__data[5],n=this.__data[6],a=this.__data[7],d=this.__data[8],i=this.__data[9],s=this.__data[10],R=this.__data[11],B=this.__data[12],V=this.__data[13],r=this.__data[14],h=this.__data[15],o=U*l-F*Q,J=U*n-e*Q,Z=U*a-t*Q,c=F*n-e*l,m=F*a-t*l,S=e*a-t*n,W=d*V-i*B,E=d*r-s*B,p=d*h-R*B,u=i*r-s*V,N=i*h-R*V,k=s*h-R*r;let b=o*k-J*N+Z*u+c*p-m*E+S*W;return b?(b=1/b,this.set((l*k-n*N+a*u)*b,(e*N-F*k-t*u)*b,(V*S-r*m+h*c)*b,(s*m-i*S-R*c)*b,(n*p-Q*k-a*E)*b,(U*k-e*p+t*E)*b,(r*Z-B*S-h*J)*b,(d*S-s*Z+R*J)*b,(Q*N-l*p+a*W)*b,(F*p-U*N-t*W)*b,(B*m-V*Z+h*o)*b,(i*Z-d*m-R*o)*b,(l*E-Q*u-n*W)*b,(U*u-F*E+e*W)*b,(V*J-B*c-r*o)*b,(d*c-i*J+s*o)*b),!0):(console.warn("Unable to invert Mat4"),!1)}setInverse(U){const F=U.__data[0],e=U.__data[1],t=U.__data[2],Q=U.__data[3],l=U.__data[4],n=U.__data[5],a=U.__data[6],d=U.__data[7],i=U.__data[8],s=U.__data[9],R=U.__data[10],B=U.__data[11],V=U.__data[12],r=U.__data[13],h=U.__data[14],o=U.__data[15],J=F*n-e*l,Z=F*a-t*l,c=F*d-Q*l,m=e*a-t*n,S=e*d-Q*n,W=t*d-Q*a,E=i*r-s*V,p=i*h-R*V,u=i*o-B*V,N=s*h-R*r,k=s*o-B*r,b=R*o-B*h;let C=J*b-Z*k+c*N+m*u-S*p+W*E;if(!C)throw new Error("Unable to invert Mat4");C=1/C,this.set((n*b-a*k+d*N)*C,(t*k-e*b-Q*N)*C,(r*W-h*S+o*m)*C,(R*S-s*W-B*m)*C,(a*u-l*b-d*p)*C,(F*b-t*u+Q*p)*C,(h*c-V*W-o*Z)*C,(i*W-R*c+B*Z)*C,(l*k-n*u+d*E)*C,(e*u-F*k-Q*E)*C,(V*S-r*c+o*J)*C,(s*c-i*S-B*J)*C,(n*p-l*N-a*E)*C,(F*N-e*p+t*E)*C,(r*Z-V*m-h*J)*C,(i*m-s*Z+R*J)*C)}multiply(U){const F=this.__data[0],e=this.__data[1],t=this.__data[2],Q=this.__data[3],l=this.__data[4],n=this.__data[5],a=this.__data[6],d=this.__data[7],i=this.__data[8],s=this.__data[9],R=this.__data[10],B=this.__data[11],V=this.__data[12],r=this.__data[13],o=this.__data[14],J=this.__data[15],Z=U.asArray();let c=Z[0],m=Z[1],S=Z[2],W=Z[3];const E=new h;return E.m00=c*F+m*l+S*i+W*V,E.m01=c*e+m*n+S*s+W*r,E.m02=c*t+m*a+S*R+W*o,E.m03=c*Q+m*d+S*B+W*J,c=Z[4],m=Z[5],S=Z[6],W=Z[7],E.m10=c*F+m*l+S*i+W*V,E.m11=c*e+m*n+S*s+W*r,E.m12=c*t+m*a+S*R+W*o,E.m13=c*Q+m*d+S*B+W*J,c=Z[8],m=Z[9],S=Z[10],W=Z[11],E.m20=c*F+m*l+S*i+W*V,E.m21=c*e+m*n+S*s+W*r,E.m22=c*t+m*a+S*R+W*o,E.m23=c*Q+m*d+S*B+W*J,c=Z[12],m=Z[13],S=Z[14],W=Z[15],E.m30=c*F+m*l+S*i+W*V,E.m31=c*e+m*n+S*s+W*r,E.m32=c*t+m*a+S*R+W*o,E.m33=c*Q+m*d+S*B+W*J,E}multiplyInPlace(U){const F=this.asArray(),e=F[0],t=F[1],Q=F[2],l=F[3],n=F[4],a=F[5],d=F[6],i=F[7],s=F[8],R=F[9],B=F[10],V=F[11],r=F[12],h=F[13],o=F[14],J=F[15],Z=U.asArray();let c=Z[0],m=Z[1],S=Z[2],W=Z[3];return this.m00=c*e+m*n+S*s+W*r,this.m01=c*t+m*a+S*R+W*h,this.m02=c*Q+m*d+S*B+W*o,this.m03=c*l+m*i+S*V+W*J,c=Z[4],m=Z[5],S=Z[6],W=Z[7],this.m10=c*e+m*n+S*s+W*r,this.m11=c*t+m*a+S*R+W*h,this.m12=c*Q+m*d+S*B+W*o,this.m13=c*l+m*i+S*V+W*J,c=Z[8],m=Z[9],S=Z[10],W=Z[11],this.m20=c*e+m*n+S*s+W*r,this.m21=c*t+m*a+S*R+W*h,this.m22=c*Q+m*d+S*B+W*o,this.m23=c*l+m*i+S*V+W*J,c=Z[12],m=Z[13],S=Z[14],W=Z[15],this.m30=c*e+m*n+S*s+W*r,this.m31=c*t+m*a+S*R+W*h,this.m32=c*Q+m*d+S*B+W*o,this.m33=c*l+m*i+S*V+W*J,this}postMultiplyInPlace(U){const F=U.asArray(),e=F[0],t=F[1],Q=F[2],l=F[3],n=F[4],a=F[5],d=F[6],i=F[7],s=F[8],R=F[9],B=F[10],V=F[11],r=F[12],h=F[13],o=F[14],J=F[15],Z=this.asArray();let c=Z[0],m=Z[1],S=Z[2],W=Z[3];return this.m00=c*e+m*n+S*s+W*r,this.m01=c*t+m*a+S*R+W*h,this.m02=c*Q+m*d+S*B+W*o,this.m03=c*l+m*i+S*V+W*J,c=Z[4],m=Z[5],S=Z[6],W=Z[7],this.m10=c*e+m*n+S*s+W*r,this.m11=c*t+m*a+S*R+W*h,this.m12=c*Q+m*d+S*B+W*o,this.m13=c*l+m*i+S*V+W*J,c=Z[8],m=Z[9],S=Z[10],W=Z[11],this.m20=c*e+m*n+S*s+W*r,this.m21=c*t+m*a+S*R+W*h,this.m22=c*Q+m*d+S*B+W*o,this.m23=c*l+m*i+S*V+W*J,c=Z[12],m=Z[13],S=Z[14],W=Z[15],this.m30=c*e+m*n+S*s+W*r,this.m31=c*t+m*a+S*R+W*h,this.m32=c*Q+m*d+S*B+W*o,this.m33=c*l+m*i+S*V+W*J,this}translateInPlace(U){const F=this.__data,e=U.x,t=U.y,Q=U.z;return F[12]=F[0]*e+F[4]*t+F[8]*Q+F[12],F[13]=F[1]*e+F[5]*t+F[9]*Q+F[13],F[14]=F[2]*e+F[6]*t+F[10]*Q+F[14],F[15]=F[3]*e+F[7]*t+F[11]*Q+F[15],this}setLookAt(U,F,e){const t=U.subtract(F),Q=t.length();if(Q<Number.EPSILON)return void this.setIdentity();t.scaleInPlace(1/Q);const l=e.cross(t),n=l.length();n>Number.EPSILON&&l.scaleInPlace(1/n);const a=t.cross(l),d=a.length();d>Number.EPSILON&&a.scaleInPlace(1/d),this.set(l.x,l.y,l.z,0,a.x,a.y,a.z,0,t.x,t.y,t.z,0,U.x,U.y,U.z,1)}setRotation(U,F){const e=U.length();if(Math.abs(e)<Number.EPSILON)return null;const t=U.x/e,Q=U.y/e,l=U.z/e,n=Math.sin(F),a=Math.cos(F),d=1-a,i=this.__data;return i[0]=t*t*d+a,i[1]=Q*t*d+l*n,i[2]=l*t*d-Q*n,i[3]=0,i[4]=t*Q*d-l*n,i[5]=Q*Q*d+a,i[6]=l*Q*d+t*n,i[7]=0,i[8]=t*l*d+Q*n,i[9]=Q*l*d-t*n,i[10]=l*l*d+a,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,this}setXRotation(U){const F=Math.sin(U),e=Math.cos(U),t=this.__data;return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=F,t[7]=0,t[8]=0,t[9]=-F,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}setYRotation(U){const F=Math.sin(U),e=Math.cos(U),t=this.__data;return t[0]=e,t[1]=0,t[2]=-F,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=F,t[9]=0,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}setZRotation(U){const F=Math.sin(U),e=Math.cos(U),t=this.__data;return t[0]=e,t[1]=F,t[2]=0,t[3]=0,t[4]=-F,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}transformVec4(U){const F=this.__data,e=U.x,t=U.y,Q=U.z,l=U.t;return new s(F[0]*e+F[4]*t+F[8]*Q+F[12]*l,F[1]*e+F[5]*t+F[9]*Q+F[13]*l,F[2]*e+F[6]*t+F[10]*Q+F[14]*l,F[3]*e+F[7]*t+F[11]*Q+F[15]*l)}transformVec3(U){const F=this.__data,e=U.x,t=U.y,Q=U.z;return new i(F[0]*e+F[4]*t+F[8]*Q+F[12],F[1]*e+F[5]*t+F[9]*Q+F[13],F[2]*e+F[6]*t+F[10]*Q+F[14])}rotateVec3(U){const F=this.__data,e=U.x,t=U.y,Q=U.z;return new i(F[0]*e+F[4]*t+F[8]*Q,F[1]*e+F[5]*t+F[9]*Q,F[2]*e+F[6]*t+F[10]*Q)}setPerspectiveMatrix(U,F,e,t){const Q=Math.tan(.5*Math.PI-.5*U),l=1/(e-t);this.set(Q/F,0,0,0,0,Q,0,0,0,0,(e+t)*l,-1,0,0,e*t*l*2,0)}setOrthographicMatrix(U,F,e,t,Q,l){const n=1/(U-F),a=1/(e-t),d=1/(Q-l);this.set(-2*n,0,0,0,0,-2*a,0,0,0,0,2*d,0,(U+F)*n,(t+e)*a,(l+Q)*d,1)}setScale(U,F,e){U instanceof i?this.set(U.x,0,0,0,0,U.y,0,0,0,0,U.z,0,0,0,0,1):this.set(U,0,0,0,0,F,0,0,0,0,e,0,0,0,0,1)}setFromMat3x4Array(U){this.set(U[0],U[1],U[2],0,U[3],U[4],U[5],0,U[6],U[7],U[8],0,U[9],U[10],U[11],1)}clone(){return new h(this.__data[0],this.__data[1],this.__data[2],this.__data[3],this.__data[4],this.__data[5],this.__data[6],this.__data[7],this.__data[8],this.__data[9],this.__data[10],this.__data[11],this.__data[12],this.__data[13],this.__data[14],this.__data[15])}toString(){return a.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return this.__data}fromJSON(U){this.__data=new Float32Array(U)}readBinary(U){this.__data=U.loadFloat32Array(16)}asArray(){return this.__data}}class o{constructor(U=0,F=0,e=0,t=1){if(U instanceof Float32Array)this.__data=U;else if(U instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const e=U,t=F;this.__data=new Float32Array(e,t,4)}else this.__data=new Float32Array(4),"object"==typeof U?(this.__data[0]=0,this.__data[1]=0,this.__data[2]=0,this.__data[3]=1,this.fromJSON(U)):(this.__data[0]=U,this.__data[1]=F,this.__data[2]=e,this.__data[3]=t)}get x(){return this.__data[0]}set x(U){this.__data[0]=U}get y(){return this.__data[1]}set y(U){this.__data[1]=U}get z(){return this.__data[2]}set z(U){this.__data[2]=U}get w(){return this.__data[3]}set w(U){this.__data[3]=U}set(U,F,e,t){this.__data[0]=U,this.__data[1]=F,this.__data[2]=e,this.__data[3]=t}setDataArray(U){this.__data=U}setFromOther(U){this.__data[0]=U.x,this.__data[1]=U.y,this.__data[2]=U.z,this.__data[3]=U.w}setFromEulerAngles(U){const F=new i;switch(U.order){case 0:F.set(U.x,-U.y,U.z);break;case 1:F.set(U.y,-U.z,U.x);break;case 2:F.set(U.z,-U.x,U.y);break;case 3:F.set(U.x,U.z,U.y);break;case 4:F.set(U.z,U.y,U.x);break;case 5:F.set(U.y,U.x,U.z);break;default:throw new Error(`Invalid EulerAngles order: ${U.order}`)}const e=.5*F.x,t=.5*F.y,Q=.5*F.z,l=Math.cos(e),n=Math.cos(t),a=Math.cos(Q),d=Math.sin(e),s=Math.sin(t),R=Math.sin(Q),B=l*a,V=l*R,r=d*a,h=d*R,o=n*r-s*V,J=n*h+s*B,Z=n*V-s*r;switch(this.w=n*B+s*h,U.order){case 0:this.x=o,this.y=-J,this.z=Z;break;case 1:this.x=Z,this.y=o,this.z=-J;break;case 2:this.x=-J,this.y=Z,this.z=o;break;case 3:this.x=o,this.y=Z,this.z=J;break;case 4:this.x=Z,this.y=J,this.z=o;break;case 5:this.x=J,this.y=o,this.z=Z;break;default:throw new Error(`Invalid EulerAngles order: ${U.order}`)}}toEulerAngles(U){const F=new i;switch(U){case 0:F.set(this.z,this.x,this.y);break;case 1:F.set(this.x,this.y,this.z);break;case 2:F.set(this.y,this.z,this.x);break;case 3:F.set(this.y,-this.x,this.z);break;case 4:F.set(this.x,-this.z,this.y);break;case 5:F.set(this.z,-this.y,this.x);break;default:throw new Error("Invalid rotation order:"+U)}const e=new i,t=F.x*F.y+F.z*this.w;if(t>.49999)e.y=2*Math.atan2(F.x,this.w),e.z=.5*Math.PI,e.x=0;else if(t<-.49999)e.y=-2*Math.atan2(F.x,this.w),e.z=-.5*Math.PI,e.x=0;else{const U=F.x*F.x,Q=F.y*F.y,l=F.z*F.z;e.y=Math.atan2(2*F.y*this.w-2*F.x*F.z,1-2*Q-2*l),e.z=Math.asin(2*t),e.x=Math.atan2(2*F.x*this.w-2*F.y*F.z,1-2*U-2*l)}switch(U){case 0:return new V(e.y,e.z,e.x,U);case 1:return new V(e.x,e.y,e.z,U);case 2:return new V(e.z,e.x,e.y,U);case 3:return new V(-e.y,e.x,e.z,U);case 4:return new V(e.x,e.z,-e.y,U);case 5:return new V(e.z,-e.y,e.x,U)}}setFromAxisAndAngle(U,F){const e=F/2,t=U.normalize().scale(Math.sin(e));this.set(t.x,t.y,t.z,Math.cos(e))}setFromDirectionAndUpvector(U,F){const e=new r;e.setFromDirectionAndUpvector(U,F),this.setFromMat3(e)}setFrom2Vectors(U,F){const e=U.cross(F),t=U.dot(F),Q=Math.sqrt(2*(1+t));this.set(e.x/Q,e.y/Q,e.z/Q,Q/2),this.normalizeInPlace()}setFromMat3(U){const F=U.asArray(),e=F[0]+F[4]+F[8];let t;if(e>0)t=Math.sqrt(e+1),this.__data[3]=.5*t,t=.5/t,this.__data[0]=(F[5]-F[7])*t,this.__data[1]=(F[6]-F[2])*t,this.__data[2]=(F[1]-F[3])*t;else{let U=0;F[4]>F[0]&&(U=1),F[8]>F[3*U+U]&&(U=2);const e=(U+1)%3,Q=(U+2)%3;t=Math.sqrt(F[3*U+U]-F[3*e+e]-F[3*Q+Q]+1),this.__data[U]=.5*t,t=.5/t,this.__data[3]=(F[3*e+Q]-F[3*Q+e])*t,this.__data[e]=(F[3*e+U]+F[3*U+e])*t,this.__data[Q]=(F[3*Q+U]+F[3*U+Q])*t}this.normalizeInPlace()}setFromMat4(U){const F=U.asArray(),e=F[0]+F[5]+F[10];let t;if(e>0)t=Math.sqrt(e+1),this.__data[3]=.5*t,t=.5/t,this.__data[0]=(F[6]-F[9])*t,this.__data[1]=(F[8]-F[2])*t,this.__data[2]=(F[1]-F[4])*t;else{let U=0;F[5]>F[0]&&(U=1),F[10]>F[4*U+U]&&(U=2);const e=(U+1)%3,Q=(U+2)%3;t=Math.sqrt(F[4*U+U]-F[4*e+e]-F[4*Q+Q]+1),this.__data[U]=.5*t,t=.5/t,this.__data[3]=(F[4*e+Q]-F[4*Q+e])*t,this.__data[e]=(F[4*e+U]+F[4*U+e])*t,this.__data[Q]=(F[4*Q+U]+F[4*U+Q])*t}this.normalizeInPlace()}isIdentity(){return this.getAngle()<Number.EPSILON}getAngle(){return 2*Math.acos(this.w)}isEqual(U){return this.x==U.x&&this.y==U.y&&this.z==U.z&&this.w==U.w}notEquals(U){return this.x!=U.x&&this.y!=U.y&&this.z!=U.z&&this.w!=U.w}approxEqual(U,F=Number.EPSILON){return Math.abs(this.x-U.x)<F&&Math.abs(this.y-U.y)<F&&Math.abs(this.z-U.z)<F&&Math.abs(this.w-U.w)<F}add(U){return new o(this.x+U.x,this.y+U.y,this.z+U.z,this.w+U.w)}addInPlace(U){this.x+=U.x,this.y+=U.y,this.z+=U.z,this.w+=U.w}subtract(U){return new o(this.x-U.x,this.y-U.y,this.z-U.z,this.w-U.w)}scale(U){return new o(this.x*U,this.y*U,this.z*U,this.w*U)}scaleInPlace(U){this.x*=U,this.y*=U,this.z*=U,this.w*=U}length(){const U=this.__data[0],F=this.__data[1],e=this.__data[2],t=this.__data[3];return Math.sqrt(U*U+F*F+e*e+t*t)}lengthSquared(){const U=this.__data[0],F=this.__data[1],e=this.__data[2],t=this.__data[3];return U*U+F*F+e*e+t*t}normalize(){const U=this.__data[0],F=this.__data[1],e=this.__data[2],t=this.__data[3];let Q=U*U+F*F+e*e+t*t;return Q<Number.EPSILON?new o:(Q=1/Math.sqrt(Q),new o(U*Q,F*Q,e*Q,t*Q))}normalizeInPlace(){const U=this.__data[0],F=this.__data[1],e=this.__data[2],t=this.__data[3];let Q=U*U+F*F+e*e+t*t;Q<Number.EPSILON||(Q=1/Math.sqrt(Q),this.set(U*Q,F*Q,e*Q,t*Q))}dot(U){return this.x*U.x+this.y*U.y+this.z*U.z+this.w*U.w}cross(U){const F=this.x,e=this.y,t=this.z,Q=this.w,l=U.x,n=U.y,a=U.z,d=U.w;return new o(e*a-t*n,t*d-Q*a,Q*l-F*d,F*n-e*l)}conjugate(){return new o(-this.x,-this.y,-this.z,this.w)}inverse(){return this.conjugate()}alignWith(U){this.dot(U)<0&&this.set(-this.x,-this.y,-this.z,-this.w)}multiply(U){const F=this.__data[0],e=this.__data[1],t=this.__data[2],Q=this.__data[3],l=U.__data[0],n=U.__data[1],a=U.__data[2],d=U.__data[3];return new o(F*d+Q*l+e*a-t*n,e*d+Q*n+t*l-F*a,t*d+Q*a+F*n-e*l,Q*d-F*l-e*n-t*a)}multiplyInPlace(U){const F=this.__data[0],e=this.__data[1],t=this.__data[2],Q=this.__data[3],l=U.__data[0],n=U.__data[1],a=U.__data[2],d=U.__data[3];this.set(F*d+Q*l+e*a-t*n,e*d+Q*n+t*l-F*a,t*d+Q*a+F*n-e*l,Q*d-F*l-e*n-t*a)}rotateVec3(U){const F=new o(U.x,U.y,U.z,0),e=this.multiply(F).multiply(this.conjugate());return new i(e.x,e.y,e.z)}rotateX(U){U*=.5;const F=this.x,e=this.y,t=this.z,Q=this.w,l=Math.sin(U),n=Math.cos(U);this.x=F*n+Q*l,this.y=e*n+t*l,this.z=t*n-e*l,this.w=Q*n-F*l}rotateY(U){U*=.5;const F=this.x,e=this.y,t=this.z,Q=this.w,l=Math.sin(U),n=Math.cos(U);this.x=F*n-t*l,this.y=e*n+Q*l,this.z=t*n+F*l,this.w=Q*n-e*l}rotateZ(U){U*=.5;const F=this.x,e=this.y,t=this.z,Q=this.w,l=Math.sin(U),n=Math.cos(U);this.x=F*n+e*l,this.y=e*n-F*l,this.z=t*n+Q*l,this.w=Q*n-t*l}toMat3(){const U=this.x,F=this.y,e=this.z,t=this.w,Q=U+U,l=F+F,n=e+e,a=U*Q,d=F*Q,i=F*l,s=e*Q,R=e*l,B=e*n,V=t*Q,h=t*l,o=t*n,J=new r;return J.m00=1-i-B,J.m10=d-o,J.m20=s+h,J.m01=d+o,J.m11=1-a-B,J.m21=R-V,J.m02=s-h,J.m12=R+V,J.m22=1-a-i,J}getXaxis(){const U=this.x*this.y,F=this.x*this.z,e=this.y*this.y,t=this.y*this.w,Q=this.z*this.z,l=this.z*this.w;return new i(1-2*(Q+e),2*(U+l),2*(F-t))}getYaxis(){const U=this.x*this.x,F=this.x*this.y,e=this.x*this.w,t=this.y*this.z,Q=this.z*this.z,l=this.z*this.w;return new i(2*(F-l),1-2*(Q+U),2*(t+e))}getZaxis(){const U=this.x*this.x,F=this.x*this.z,e=this.x*this.w,t=this.y*this.y,Q=this.y*this.z,l=this.y*this.w;return new i(2*(l+F),2*(Q-e),1-2*(t+U))}mirror(U){switch(U){default:return new o(this.z,this.w,this.x,this.y);case 1:return new o(-this.w,this.z,this.y,-this.x);case 2:return new o(this.x,this.y,this.z,-this.w)}}toMat4(){const U=this.x,F=this.y,e=this.z,t=this.w,Q=U+U,l=F+F,n=e+e,a=U*Q,d=F*Q,i=F*l,s=e*Q,R=e*l,B=e*n,V=t*Q,r=t*l,o=t*n,J=new h;return J.m00=1-i-B,J.m10=d-o,J.m20=s+r,J.m01=d+o,J.m11=1-a-B,J.m21=R-V,J.m02=s-r,J.m12=R+V,J.m22=1-a-i,J}lerp(U,F){const e=new o(this.x+F*(U.x-this.x),this.y+F*(U.y-this.y),this.z+F*(U.z-this.z),this.w+F*(U.w-this.w));return e.normalizeInPlace(),e}slerp(U,F){const e=this.dot(U),t=F/2;let Q=Math.acos(e);Q<0&&(Q=-Q);const l=Math.sin(Q),n=Math.sin(t*Q),a=Math.sin((1-t)*Q)/l,d=n/l,i=new o(a*this.x+d*U.x,a*this.y+d*U.y,a*this.z+d*U.z,a*this.w+d*U.w);return i.normalizeInPlace(),i}clone(){return new o(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}asArray(){return this.__data}toString(){return a.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.x,y:this.y,z:this.z,w:this.w}}fromJSON(U){this.__data[0]=U.x,this.__data[1]=U.y,this.__data[2]=U.z,this.__data[3]=U.w,this.normalizeInPlace()}readBinary(U){this.x=U.loadFloat32(),this.y=U.loadFloat32(),this.z=U.loadFloat32(),this.w=U.loadFloat32()}}class J{static radToDeg(U){return U/(Math.PI/180)}static degToRad(U){return U*(Math.PI/180)}static isNumeric(U){return!isNaN(parseFloat(U))&&isFinite(U)}static randomInt(U,F){return U=Math.ceil(U),F=Math.floor(F),Math.floor(Math.random()*(F-U))+U}static lerp(U,F,e){return U+e*(F-U)}static clamp(U,F,e){return Math.min(Math.max(U,F),e)}static nearestPow2(U){return Math.pow(2,Math.round(Math.log(U)/Math.log(2)))}static nearestPow10(U){return Math.pow(10,Math.round(Math.log10(U)/Math.log10(10)))}static nextPow2(U){if(0==this.fract(Math.log2(U)))return U;let F=0;for(;U>0;)F++,U>>=1;return 1<<F}static fract(U){return 0==U?0:U<0?U>-1?-U:-U%Math.floor(-U):U<1?U:U%Math.floor(U)}static remap(U,F,e,t,Q){return t+(U-F)/(e-F)*(Q-t)}static smoothStep(U,F,e){const t=this.clamp((e-U)/(F-U),0,1);return t*t*(3-2*t)}static linStep(U,F,e){return this.clamp((e-U)/(F-U),0,1)}static decode16BitFloatFrom2xUInt8(U){const F=U[0],e=(120&F)>>3;let t=0==e?0:2048;const Q=t+((7&F)<<8)+U[1];t=0==e?1:0;return(128&F?1:-1)*Q*Math.pow(2,e+t-16)}static encode16BitFloatInto2xUInt8(U){const F=new Uint8Array(2),e=U>=0?128:0;U=Math.abs(U);let t,Q=15,l=1024;for(let F=15;F>0;F--)U<l&&(l/=2,Q--);t=0==Q?U/l/2:(U-l)/l;const n=Math.round(2048*t),a=n/256,d=n-256*a;return F[0]=e+8*Q+a,F[1]=d,U>=2048&&(F[0]=255),F}static encode16BitFloat(U){const F=new Float32Array(1);F[0]=U;return(U=>{let F=U>>16&32768,e=U>>12&2047;const t=U>>23&255;return t<103?F:t>142?(F|=31744,F|=(255==t?0:1)&&8388607&U,F):t<113?(e|=2048,F|=(e>>114-t)+(e>>113-t&1),F):(F|=t-112<<10|e>>1,F+=1&e,F)})(new Int32Array(F.buffer)[0])}static decode16BitFloat(U){const F=(32768&U)>>15,e=(31744&U)>>10,t=1023&U;return 0==e?(F?-1:1)*Math.pow(2,-14)*(t/Math.pow(2,10)):31==e?t?NaN:1/0*(F?-1:1):(F?-1:1)*Math.pow(2,e-15)*(1+t/Math.pow(2,10))}static convertFloat32ArrayToUInt16Array(U){const F=new Uint16Array(U.length),e=new Int32Array(U.buffer),t=U=>{let F=U>>16&32768,e=U>>12&2047;const t=U>>23&255;return t<103?F:t>142?(F|=31744,F|=(255==t?0:1)&&8388607&U,F):t<113?(e|=2048,F|=(e>>114-t)+(e>>113-t&1),F):(F|=t-112<<10|e>>1,F+=1&e,F)};for(let Q=0;Q<U.length;Q++)F[Q]=t(e[Q]);return F}}class Z{constructor(U,F){this.start=U instanceof i?U:new i,this.dir=F instanceof i?F:new i}closestPoint(U){const F=U.subtract(this.start).dot(this.dir);if(F<Number.EPSILON)return 0;const e=this.dir.dot(this.dir);return e<Number.EPSILON?0:F/e}closestPointOnLineSegment(U,F){const e=this.dir,t=F.subtract(U),Q=t.length();t.normalizeInPlace();const l=this.start.subtract(U),n=e.dot(e),a=e.dot(t),d=t.dot(t),i=e.dot(l),s=t.dot(l);if(0==n&&0==d)return[this.start.distanceTo(U),0];if(0==n)return[0,0];if(0==d)return[this.closestPoint(U),0];const R=n*d-a*a;let B,V;return R<.001?(B=0,V=a>d?i/a:s/d):(B=(a*s-d*i)/R,V=(n*s-a*i)/R),[B,J.clamp(V/Q,0,1)]}pointAtDist(U){return this.start.add(this.dir.scale(U))}intersectRayVector(U){const F=this.dir,e=U.dir,t=this.start.subtract(U.start),Q=F.dot(F),l=F.dot(e),n=e.dot(e),a=F.dot(t),d=e.dot(t);if(0==Q&&0==n)return this.start.distanceTo(U.start);if(0==Q)return U.closestPoint(this.start);if(0==n)return this.closestPoint(U.start);const i=Q*n-l*l;let s,R;return i<.001?(s=0,R=l>n?a/l:d/n):(s=(l*d-n*a)/i,R=(Q*d-l*a)/i),[s,R]}intersectRayPlane(U){const F=this.start.subtract(U.start),e=U.dir.dot(this.dir),t=-U.dir.dot(F);if(Math.abs(e)<Number.PRECISION)return-1;const Q=t/e;return Q<-Number.PRECISION?-1:Q}intersectRayBox3(U,F=0){const e=new i(1/this.dir.x,1/this.dir.y,1/this.dir.z),t=[];t[0]=e.x<0?1:0,t[1]=e.y<0?1:0,t[2]=e.z<0?1:0;const Q=[];if(F>0){const e=U.diagonal();e.normalizeInPlace(),e.scaleInPlace(F),Q[0]=U.p0.subtract(e),Q[1]=U.p1.add(e)}else Q[0]=U.p0,Q[1]=U.p1;let l=(Q[t[0]].x-this.start.x)*e.x,n=(Q[1-t[0]].x-this.start.x)*e.x;const a=(Q[t[1]].y-this.start.y)*e.y,d=(Q[1-t[1]].y-this.start.y)*e.y;if(l>d||a>n)return!1;a>l&&(l=a),d<n&&(n=d);const s=(Q[t[2]].z-this.start.z)*e.z,R=(Q[1-t[2]].z-this.start.z)*e.z;return!(l>R||s>n)&&(s>l&&(l=s),R<n&&(n=R),!0)}clone(){return new Z(this.start.clone(),this.dir.clone())}toJSON(){return{start:this.start.toJSON(),dir:this.dir.toJSON()}}fromJSON(U){this.start.fromJSON(U.start),this.dir.fromJSON(U.dir)}toString(){return a.stringifyJSONWithFixedPrecision(this.toJSON())}}class c{constructor(U,F,e){if(U instanceof Float32Array)this.setFromFloat32Array(U);else{if(U instanceof i)this.tr=U;else{if(U instanceof o&&null==F&&null==e)return this.tr=new i,this.ori=U,void(this.sc=new i(1,1,1));this.tr=new i}this.ori=F instanceof o?F:new o,this.sc=e instanceof i?e:new i(1,1,1)}}set(U,F,e){this.tr=U,this.ori=F,e instanceof i&&(this.sc=e)}setFromOther(U){this.tr=U.tr,this.ori=U.ori,this.sc=U.sc}isIdentity(){return this.tr.isNull()&&this.ori.isIdentity()&&this.sc.is111()}isEqual(U){return this.tr.isEqual(U.tr)&&this.ori.isEqual(U.ori)&&this.sc.isEqual(U.sc)}approxEqual(U,F=Number.EPSILON){return(!U.tr||this.tr.approxEqual(U.tr,F))&&(!U.ori||this.ori.approxEqual(U.ori,F))&&(!U.sc||this.sc.approxEqual(U.sc,F))}setLookAt(U,F,e){const t=U.subtract(F);if(t.length()<Number.EPSILON)throw new Error("Invalid dir");this.ori.setFromDirectionAndUpvector(t,e),this.tr=U}multiply(U){let F=this.sc;this.sc.x==this.sc.y&&this.sc.x==this.sc.z||(F=U.ori.rotateVec3(this.sc),Math.sign(F.x)!=Math.sign(this.sc.x)&&(F.x=-F.x),Math.sign(F.y)!=Math.sign(this.sc.y)&&(F.y=-F.y),Math.sign(F.z)!=Math.sign(this.sc.z)&&(F.z=-F.z));return new c(this.tr.add(this.ori.rotateVec3(F.multiply(U.tr))),this.ori.multiply(U.ori),F.multiply(U.sc))}inverse(){const U=new c;return U.ori=this.ori.inverse(),this.sc.x!=this.sc.y||this.sc.x!=this.sc.z?(U.sc=U.ori.rotateVec3(this.sc),Math.sign(U.sc.x)!=Math.sign(this.sc.x)&&(U.sc.x=-U.sc.x),Math.sign(U.sc.y)!=Math.sign(this.sc.y)&&(U.sc.y=-U.sc.y),Math.sign(U.sc.z)!=Math.sign(this.sc.z)&&(U.sc.z=-U.sc.z)):U.sc=this.sc.inverse(),U.tr=U.ori.rotateVec3(this.tr.negate().multiply(U.sc)),U}transformVec3(U){return this.tr.add(this.ori.rotateVec3(this.sc.multiply(U)))}toMat4(){const U=new h(this.sc.x,0,0,0,0,this.sc.y,0,0,0,0,this.sc.z,0,0,0,0,1),F=this.ori.toMat4(),e=new h;return e.translation=this.tr,e.multiply(F).multiply(U)}setFromMat4(U){this.tr=U.translation,this.ori.setFromMat4(U)}setFromFloat32Array(U){if(7==U.length)return this.tr=new i(new Float32Array(U.buffer,U.byteOffset,3)),this.ori=new o(new Float32Array(U.buffer,U.byteOffset+12,4)),void(this.sc=new i(1,1,1));if(8!=U.length){if(10==U.length)return this.tr=new i(new Float32Array(U.buffer,U.byteOffset,3)),this.ori=new o(new Float32Array(U.buffer,U.byteOffset+12,4)),void(this.sc=new i(new Float32Array(U.buffer,U.byteOffset+21,3)));console.warn("unitialized: float32array.length == ",U.length)}else{this.tr=new i(new Float32Array(U.buffer,U.byteOffset,3)),this.ori=new o(new Float32Array(U.buffer,U.byteOffset+12,4));const F=U[7];this.sc=new i(F,F,F)}}clone(){return new c(this.tr.clone(),this.ori.clone(),this.sc.clone())}toJSON(){const U={tr:this.tr.toJSON(),ori:this.ori.toJSON()};return this.sc.is111()||(U.sc=this.sc.toJSON()),U}fromJSON(U){this.tr.fromJSON(U.tr),this.ori.fromJSON(U.ori),U.sc&&this.sc.fromJSON(U.sc)}readBinary(U){this.tr.readBinary(U),this.ori.readBinary(U),this.sc.readBinary(U)}toString(){return a.stringifyJSONWithFixedPrecision(this.toJSON())}}class m{constructor(U,F){this.p0=U instanceof d?U:new d(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY),this.p1=F instanceof d?F:new d(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY)}set(U,F){this.p0=U,this.p1=F}reset(){this.p0.x=Number.POSITIVE_INFINITY,this.p1.x=Number.NEGATIVE_INFINITY,this.p0.y=Number.POSITIVE_INFINITY,this.p1.y=Number.NEGATIVE_INFINITY}isValid(){return this.p0.x!=Number.POSITIVE_INFINITY&&this.p1.x!=Number.NEGATIVE_INFINITY&&this.p0.y!=Number.POSITIVE_INFINITY&&this.p1.y!=Number.NEGATIVE_INFINITY}addPoint(U){(this.p0.x==Number.POSITIVE_INFINITY||U.x<this.p0.x)&&(this.p0.x=U.x),(this.p0.y==Number.POSITIVE_INFINITY||U.y<this.p0.y)&&(this.p0.y=U.y),(this.p1.y==Number.NEGATIVE_INFINITY||U.x>this.p1.x)&&(this.p1.x=U.x),(this.p1.y==Number.NEGATIVE_INFINITY||U.y>this.p1.y)&&(this.p1.y=U.y)}size(){return this.p1.distanceTo(this.p0)}diagonal(){return this.p1.subtract(this.p0)}center(){const U=this.p1.subtract(this.p0);return U.scaleInPlace(.5),U.addInPlace(this.p0),U}toJSON(){return{p0:this.p0.toJSON(),p1:this.p1.toJSON()}}toString(){return a.stringifyJSONWithFixedPrecision(this.toJSON())}}class S{constructor(U=new i,F=0){this.pos=U instanceof i?U:new i,this.radius=F}clone(){return new S(this.pos.clone(),this.radius)}intersectsBox(U){return U.intersectsSphere(this)}toJSON(){return{pos:this.pos.toJSON(),radius:this.radius}}toString(){return a.stringifyJSONWithFixedPrecision(this.toJSON())}}class W{constructor(U,F){U instanceof Float32Array?(this.p0=new i(new Float32Array(U.buffer,U.byteOffset,3)),this.p1=new i(new Float32Array(U.buffer,U.byteOffset+12,3))):(this.p0=U instanceof i?U:new i(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY),this.p1=F instanceof i?F:new i(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY))}get min(){return this.p0}get max(){return this.p1}set(U,F){this.p0=U,this.p1=F}reset(){this.p0.x=Number.POSITIVE_INFINITY,this.p0.y=Number.POSITIVE_INFINITY,this.p0.z=Number.POSITIVE_INFINITY,this.p1.x=Number.NEGATIVE_INFINITY,this.p1.y=Number.NEGATIVE_INFINITY,this.p1.z=Number.NEGATIVE_INFINITY}isValid(){return this.p0.x!=Number.POSITIVE_INFINITY&&this.p1.x!=Number.NEGATIVE_INFINITY&&this.p0.y!=Number.POSITIVE_INFINITY&&this.p1.y!=Number.NEGATIVE_INFINITY&&this.p0.z!=Number.POSITIVE_INFINITY&&this.p1.z!=Number.NEGATIVE_INFINITY}addPoint(U){U.x!=Number.POSITIVE_INFINITY&&U.x!=Number.NEGATIVE_INFINITY&&(U.x<this.p0.x&&(this.p0.x=U.x),U.x>this.p1.x&&(this.p1.x=U.x)),U.y!=Number.POSITIVE_INFINITY&&U.y!=Number.NEGATIVE_INFINITY&&(U.y<this.p0.y&&(this.p0.y=U.y),U.y>this.p1.y&&(this.p1.y=U.y)),U.z!=Number.POSITIVE_INFINITY&&U.z!=Number.NEGATIVE_INFINITY&&(U.z<this.p0.z&&(this.p0.z=U.z),U.z>this.p1.z&&(this.p1.z=U.z))}addBox3(U,F){F?(this.addPoint(F.transformVec3(U.p0)),this.addPoint(F.transformVec3(new i(U.p0.x,U.p0.y,U.p1.z))),this.addPoint(F.transformVec3(new i(U.p0.x,U.p1.y,U.p0.z))),this.addPoint(F.transformVec3(new i(U.p1.x,U.p0.y,U.p0.z))),this.addPoint(F.transformVec3(new i(U.p0.x,U.p1.y,U.p1.z))),this.addPoint(F.transformVec3(new i(U.p1.x,U.p0.y,U.p1.z))),this.addPoint(F.transformVec3(new i(U.p1.x,U.p1.y,U.p0.z))),this.addPoint(F.transformVec3(U.p1))):(this.addPoint(U.p0),this.addPoint(U.p1))}size(){return this.p1.distanceTo(this.p0)}diagonal(){return this.p1.subtract(this.p0)}center(){const U=this.p1.subtract(this.p0);return U.scaleInPlace(.5),U.addInPlace(this.p0),U}toMat4(){const U=this.p1.x-this.p0.x,F=this.p1.y-this.p0.y,e=this.p1.z-this.p0.z;return new h(U,0,0,0,0,F,0,0,0,0,e,0,this.p0.x,this.p0.y,this.p0.z,1)}getBoundingSphere(){return new S(this.center(),.5*this.diagonal().length())}intersectsBox(U){return!(U.max.x<this.min.x||U.min.x>this.max.x||U.max.y<this.min.y||U.min.y>this.max.y||U.max.z<this.min.z||U.min.z>this.max.z)}intersectsSphere(U){return(new i).distanceTo(U.pos)<=U.radius*U.radius}intersectsPlane(U){let F,e;return U.normal.x>0?(F=U.normal.x*this.min.x,e=U.normal.x*this.max.x):(F=U.normal.x*this.max.x,e=U.normal.x*this.min.x),U.normal.y>0?(F+=U.normal.y*this.min.y,e+=U.normal.y*this.max.y):(F+=U.normal.y*this.max.y,e+=U.normal.y*this.min.y),U.normal.z>0?(F+=U.normal.z*this.min.z,e+=U.normal.z*this.max.z):(F+=U.normal.z*this.max.z,e+=U.normal.z*this.min.z),F<=-U.w&&e>=-U.w}clone(){return new W(this.p0.clone(),this.p1.clone())}toJSON(){return{p0:this.p0.toJSON(),p1:this.p1.toJSON()}}fromJSON(U){const F={x:J.isNumeric(U.p0.x)?U.p0.x:Number.POSITIVE_INFINITY,y:J.isNumeric(U.p0.y)?U.p0.y:Number.POSITIVE_INFINITY,z:J.isNumeric(U.p0.z)?U.p0.z:Number.POSITIVE_INFINITY},e={x:J.isNumeric(U.p1.x)?U.p1.x:Number.NEGATIVE_INFINITY,y:J.isNumeric(U.p1.y)?U.p1.y:Number.NEGATIVE_INFINITY,z:J.isNumeric(U.p1.z)?U.p1.z:Number.NEGATIVE_INFINITY};this.p0.fromJSON(F),this.p1.fromJSON(e)}setFromFloat32Array(U){this.p0=new i(U.buffer,U.byteOffset),this.p1=new i(U.buffer,U.byteOffset+12)}toString(){return a.stringifyJSONWithFixedPrecision(this.toJSON())}}class E{constructor(U,F=0){this.normal=U instanceof i?U:new i,this.w=F}set(U,F,e,t){this.normal.set(U,F,e),this.w=t}divideScalar(U){this.normal.scaleInPlace(1/U),this.w/=U}distanceToPoint(U){return U.dot(this.normal)+this.w}normalizeInPlace(){const U=1/this.normal.length();this.normal.scaleInPlace(U),this.w*=U}clone(){return new E(this.normal.clone(),this.w)}toJSON(){return{normal:this.normal.toJSON(),w:this.w}}fromJSON(U){this.normal.fromJSON(U.normal),this.w=U.w}toString(){return a.stringifyJSONWithFixedPrecision(this.toJSON())}}let p=0;class u{constructor(){this.__id=++p}getId(){return this.__id}getClassName(){return n.getClassName(Object.getPrototypeOf(this).constructor)}}class N{constructor(){}}class k extends u{constructor(){super(),this.listeners={}}on(U,F){if(!F)throw new Error("Missing listener.");this.listeners[U]||(this.listeners[U]=[]);const e=this.listeners[U];if(e.includes(F))throw new Error(`Listener "${F.name}" already connected to event "${U}".`);const t=e.length;return e[t]=F,t}once(U,F){const e=t=>{F(t),this.off(U,e)};return this.on(U,e)}off(U,F){if(!F)throw new Error("Missing callback function (listener).");if("number"==typeof F)return console.warn("Deprecated. Un-register using the original listener instead."),void this.removeListenerById(U,F);const e=this.listeners[U]||[],t=[];if(e.forEach(((U,e)=>{U===F&&t.push(e)})),0==t.length)throw new Error(`Listener "${F.name}" is not connected to "${U}" event`);for(const U of t)e[U]=null}removeListenerById(U,F){const e=this.listeners[U];if(e){if(!e[F])throw new Error("Invalid ID");e[F]=null}else console.warn("callback :"+F+" was not connected to this event:"+U)}emit(U,F=new N){(this.listeners[U]||[]).forEach((U=>{U&&U(F)}))}}class b extends N{constructor(U,F){super(),this.width=U,this.height=F}}class C extends k{constructor(U=0,F=0){super(),this.root={x:0,y:0,w:U,h:F}}fit(U){if(0==U.length)return;let F=!1;if(this.root.w<U[0].w&&(this.root.w=U[0].w,F=!0),this.root.h<U[0].h&&(this.root.h=U[0].h,F=!0),F){const U=new b(this.root.w,this.root.h);this.emit("resized",U)}U.forEach((U=>{U.fit=this.__addBlock(U)}))}__addBlock(U){const F=this.findNode(this.root,U.w,U.h);return F?this.splitNode(F,U.w,U.h):this.growNode(U.w,U.h)}addBlock(U){let F=!1;if(this.root.w<U.w&&(this.root.w=U.w,F=!0),this.root.h<U.h&&(this.root.h=U.h,F=!0),F){const U=new b(this.root.w,this.root.h);this.emit("resized",U)}const e=this.findNode(this.root,U.w,U.h);return e?this.splitNode(e,U.w,U.h):this.growNode(U.w,U.h)}findNode(U,F,e){return U.used?this.findNode(U.right,F,e)||this.findNode(U.down,F,e):F<=U.w&&e<=U.h?U:null}splitNode(U,F,e){return U.used=!0,U.down={x:U.x,y:U.y+e,w:U.w,h:U.h-e},U.right={x:U.x+F,y:U.y,w:U.w-F,h:e},U}growNode(U,F){const e=U<=this.root.w,t=F<=this.root.h,Q=t&&this.root.h>=this.root.w+U,l=e&&this.root.w>=this.root.h+F;return Q?this.growRight(U,F):l?this.growDown(U,F):t?this.growRight(U,F):e?this.growDown(U,F):null}growRight(U,F){this.root={used:!0,x:0,y:0,w:this.root.w+U,h:this.root.h,down:this.root,right:{x:this.root.w,y:0,w:U,h:this.root.h}};const e=this.findNode(this.root,U,F);let t;e&&(t=this.splitNode(e,U,F));const Q=new b(this.root.w,this.root.h);return this.emit("resized",Q),t}growDown(U,F){this.root={used:!0,x:0,y:0,w:this.root.w,h:this.root.h+F,down:{x:0,y:this.root.h,w:this.root.w,h:F},right:this.root};const e=this.findNode(this.root,U,F);let t;e&&(t=this.splitNode(e,U,F));const Q=new b(this.root.w,this.root.h);return this.emit("resized",Q),t}}class T{constructor(U=0,F=0){this.start=U,this.size=F}}class G extends k{constructor(){super(),this.freeList=[],this.allocations=[],this.allocationsMap={},this.allocatedSpace=0,this.reservedSpace=0,this.freeSpace=0}getAllocation(U){return this.allocations[this.allocationsMap[U]]}allocate(U,F){if(null!=this.allocationsMap[U]){const e=this.allocationsMap[U],t=this.allocations[e];if(F==t.size)return t;if(F<t.size){const U=t.size-F;return this.addBlock(e+1,new T(t.start+F,U)),this.freeBlock(e+1),t.size=F,t}{const Q=e+1;if(this.freeList.includes(Q)&&t.size+this.allocations[Q].size>=F){const U=this.allocations[Q];if(t.size+U.size==F)return t.size+=U.size,this.freeSpace-=U.size,this.freeList.splice(this.freeList.indexOf(Q),1),this.removeBlock(Q),t;{const e=F-t.size;return t.size+=e,this.freeSpace-=e,U.start+=e,U.size-=e,t}}delete this.allocationsMap[U],t.start+t.size==this.allocatedSpace?(this.removeBlock(e),this.allocatedSpace-=t.size):this.freeBlock(e)}}let e=-1;for(let U=0;U<this.freeList.length;U++){const t=this.freeList[U],Q=this.allocations[t];if(Q.size==F){e=t;break}Q.size>F&&(e=t)}if(-1!=e){const t=this.allocations[e];if(this.freeSpace-=t.size,this.freeList.splice(this.freeList.indexOf(e),1),t.size>F){const U=t.size-F;this.addBlock(e+1,new T(t.start+F,U)),this.freeBlock(e+1),this.freeList.sort(((U,F)=>this.allocations[F].size-this.allocations[U].size)),this.allocations[e].size=F}this.allocationsMap[U]=e}else{const e=this.allocatedSpace,t=this.allocations.length;this.allocatedSpace+=F;const Q=J.nextPow2(this.allocatedSpace);Q!=this.reservedSpace&&(this.reservedSpace=Q,this.emit("resized",{reservedSpace:this.reservedSpace})),this.allocations.push(new T(e,F)),this.allocationsMap[U]=t}return this.allocations[this.allocationsMap[U]]}addBlock(U,F){this.allocations.splice(U,0,F);for(const F in this.allocationsMap)this.allocationsMap[F]>=U&&this.allocationsMap[F]++;for(let F=0;F<this.freeList.length;F++)this.freeList[F]>=U&&this.freeList[F]++}removeBlock(U){this.allocations.splice(U,1);for(const F in this.allocationsMap)this.allocationsMap[F]>U&&this.allocationsMap[F]--;for(let F=0;F<this.freeList.length;F++)this.freeList[F]>U&&this.freeList[F]--}freeBlock(U){const F=this.allocations[U];this.freeSpace+=F.size;const e=U-1;if(this.freeList.includes(e)){return this.allocations[e].size+=F.size,void this.removeBlock(U)}const t=U+1;if(this.freeList.includes(t)){const e=this.allocations[t];return e.start-=F.size,e.size+=F.size,void this.removeBlock(U)}this.freeList.push(U)}deallocate(U){const F=this.allocationsMap[U];if(null==F)throw new Error(`allocation ${U} does not exist.`);this.freeBlock(F),delete this.allocationsMap[U]}getFragmentation(){return this.freeSpace/this.allocatedSpace}defragment(){}verifyConsistency(){if(Object.keys(this.allocationsMap).length+this.freeList.length!=this.allocations.length)throw new Error("number of blocks does not match the number of allocations");for(const U in this.allocationsMap){const F=this.allocationsMap[U];if(this.freeList.includes(F))throw new Error("block of used memory is also on the free list")}let U=0;for(let F=0;F<this.allocations.length;F++){const e=this.allocations[F];if(e.start!=U)throw"blocks of memory are not sequential";U+=e.size}if(U!=this.allocatedSpace)throw`allocated size: ${this.allocatedSpace}  does not match allocated blocks: ${U}`;if(this.reservedSpace<this.allocatedSpace)throw`reserved space: ${this.reservedSpace} is less than allocated space: ${this.allocatedSpace}`}}const X={mouse:"mouse",touch:"touch",xr:"xr"};let g=null;class y extends N{constructor(U){super(),this.propagating=!0,this.pointerType=U}stopPropagation(){this.propagating=!1}setCapture(U){g=U}getCapture(){return g}releaseCapture(){g=null}}class I extends y{constructor(U){super(U)}}class x extends I{constructor(U,F){super(X.mouse),this.sourceEvent=U,this.button=U.button,this.clientX=U.clientX,this.clientY=U.clientY;this.rendererX=1*(this.clientX-F.left),this.rendererY=1*(this.clientY-F.top),this.altKey=U.altKey,this.metaKey=U.metaKey,this.ctrlKey=U.ctrlKey,this.shiftKey=U.shiftKey}stopPropagation(){super.stopPropagation(),this.sourceEvent&&this.sourceEvent.stopPropagation()}preventDefault(){this.sourceEvent&&this.sourceEvent.preventDefault()}}class f{constructor(U,F){this.clientX=0,this.clientY=0,this.screenX=0,this.screenY=0,this.pageX=0,this.pageY=0,this.radiusX=0,this.radiusY=0,this.rotationAngle=0,this.force=0,this.altitudeAngle=0,this.azimuthAngle=0,this.touchType="direct",this.identifier=U.identifier,this.clientX=U.clientX,this.clientY=U.clientY,this.screenX=U.screenX,this.screenY=U.screenY,this.pageX=U.pageX,this.pageY=U.pageY,this.radiusX=U.radiusX,this.radiusY=U.radiusY,this.rotationAngle=U.rotationAngle,this.force=U.force;this.rendererX=1*(this.clientX-F.left),this.rendererY=1*(this.clientY-F.top),this.touchPos=new d,this.touchRay=new Z}}class M extends I{constructor(U,F){super(X.touch),this.touches=[],this.changedTouches=[],this.targetTouches=[],this.altKey=!1,this.metaKey=!1,this.ctrlKey=!1,this.shiftKey=!1,this.sourceEvent=U,this.sourceEvent.stopPropagation(),this.altKey=U.altKey,this.metaKey=U.metaKey,this.ctrlKey=U.ctrlKey,this.shiftKey=U.shiftKey;for(let e=0;e<U.touches.length;e++)this.touches.push(new f(U.touches[e],F));if(U.changedTouches)for(let e=0;e<U.changedTouches.length;e++)this.changedTouches.push(new f(U.changedTouches[e],F));if(U.targetTouches)for(let e=0;e<U.targetTouches.length;e++)this.targetTouches.push(new f(U.targetTouches[e],F))}stopPropagation(){super.stopPropagation(),this.sourceEvent&&this.sourceEvent.stopPropagation()}preventDefault(){}}class v extends x{constructor(U,F){super(U,F),this.wheelDelta=U.wheelDelta,this.deltaMode=U.deltaMode,this.deltaX=U.deltaX,this.deltaY=U.deltaY,this.deltaZ=U.deltaZ}}class D extends y{constructor(U,F){super(X.xr),this.button=U,this.controller=F}}class L extends y{constructor(U,F,e){super(X.xr),this.controllers=[],this.viewport=U,this.viewXfo=F,e.forEach((U=>{this.controllers.push(U)}))}}let Y=0;class _ extends k{constructor(){if(super(),"RefCounted"==this.constructor.name)throw new Error("RefCounted should not be instantiated directly.");this.__id=++Y,this.__refs=[],this.__destroyed=!1}getId(){return this.__id}numRefs(){return this.__refs.length}addRef(U){if(!U)throw new Error("Error in RefCounted.addRef: Must provide a referer");return this.__refs.push(U),!0}removeRef(U){if(!U)throw new Error("Error in RefCounted.removeRef: Must provide a referer");const F=this.__refs.indexOf(U);if(-1==F)throw new Error("Error in RefCounted.removeRef: referer not found in refs list.");this.__refs.splice(F,1),0==this.__refs.length&&this.destroy()}getRefer(U){return this.__refs[U]}getRefIndex(U){return this.__refs.indexOf(U)}isDestroyed(){return this.__destroyed}destroy(){this.__destroyed=!0,this.emit("destructing")}}class w extends N{constructor(U){super(),this.name=U}}class z extends N{constructor(U){super(),this.name=U}}class K extends k{constructor(){super(),this.paramEventListenerIDs={},this.paramMapping={},this.params=[],this.deprecatedParamMapping={}}getNumParameters(){return this.params.length}getParameters(){return this.params}getParameterIndex(U){return this.paramMapping[U]}getParameterByIndex(U){return this.params[U]}hasParameter(U){return U in this.paramMapping}addParameterDeprecationMapping(U,F){this.deprecatedParamMapping[U]=F}getParameter(U){let F=this.paramMapping[U];if(null==F){const e=this.deprecatedParamMapping[U];if(!e)return null;console.warn(`Parameter name ${U} is now deprecated. Please use ${e} instead.`),F=this.paramMapping[e]}return this.params[F]}parameterValueChanged(U){this.emit("parameterValueChanged",U)}addParameter(U){return this.insertParameter(U,this.params.length)}insertParameter(U,F){const e=U.getName();null!=this.paramMapping[e]&&(console.warn("Replacing Parameter:"+e),this.removeParameter(e)),U.setOwner(this),this.paramEventListenerIDs[e]=U.on("valueChanged",(F=>{const e={param:U};for(const U in F)e[U]=F[U];this.parameterValueChanged(e)})),this.params.splice(F,0,U);for(let U=F;U<this.params.length;U++)this.paramMapping[this.params[U].getName()]=U;const t=new w(e);return this.emit("parameterAdded",t),U}removeParameter(U){if(null==this.paramMapping[U])throw new Error("Unable to remove Parameter:"+U);const F=this.paramMapping[U];this.params[this.paramMapping[U]].removeListenerById("valueChanged",this.paramEventListenerIDs[U]),this.params.splice(F,1),delete this.paramMapping[U];for(let U=F;U<this.params.length;U++)this.paramMapping[this.params[U].getName()]=U;const e=new z(U);this.emit("parameterRemoved",e)}replaceParameter(U){const F=U.getName();if(null==this.paramMapping[F])throw new Error("Unable to replace Parameter:"+F);const e=this.paramMapping[F];return this.removeParameter(F),this.insertParameter(U,e),U}toJSON(U){const F={type:this.getClassName()},e={};let t=0;for(const F of this.params){const Q=F.toJSON(U);Q&&(e[F.getName()]=Q,t++)}return t>0&&(F.params=e),F}fromJSON(U,F){if(U.params)for(const e in U.params){const t=U.params[e],Q=this.getParameter(e);Q?t.paramPath?null==F||F.resolvePath(t.paramPath,(U=>{this.replaceParameter(U)}),(()=>{console.warn("Unable to resolve shared parameter:"+t.paramPath)})):Q.fromJSON(t,F):console.warn("Param not found:"+e)}}readBinary(U,F){if((null==F?void 0:F.versions["zea-engine"].compare([0,0,3]))>=0){const e=U.loadUInt32();for(let t=0;t<e;t++){const e=U.loadStr(),t=U.loadStr();let Q=this.getParameter(t);if(!Q){if(Q=n.constructClass(e),!Q){console.error("Unable to construct prop:"+t+" of type:"+e);continue}Q.setName(t),this.addParameter(Q)}Q.readBinary(U,F)}}}toString(U){return JSON.stringify(this.toJSON(),null,2)}copyFrom(U,F){let e=U.getNumParameters();for(;e--;){const F=U.getParameterByIndex(e),t=this.getParameter(F.getName());t?t.loadValue(F.value):this.addParameter(F.clone())}}}class H extends N{constructor(U){super(),this.value=U}}class P extends N{constructor(U){super(),this.selected=U}}let O=0;class j extends N{constructor(U,F){super(),this.oldName=U,this.newName=F}}class A extends K{constructor(U=""){super(),this.__ownerItem=void 0,this.__selectable=!0,this.__selected=!1,this.__metaData={},this.__name=U,this.__path=[this.__name],O++}static getNumBaseItems(){return O}getName(){return this.__name}setName(U){if(this.__name!=U){const F=this.__name;this.__name=U,this.updatePath();const e=new j(F,U);this.emit("nameChanged",e)}}updatePath(){null==this.__ownerItem?this.__path=[this.__name]:this.__path=[...this.__ownerItem.getPath(),this.__name]}getPath(){return this.__path}resolvePath(U,F=0){if(0==F&&("."!=U[0]&&U[0]!=this.__name||F++),F==U.length)return this;if(">"==U[F]&&F==U.length-1)return this.getParameter(U[F+1]);const e=this.getParameter(U[F]);if(e)return e;throw new Error("Invalid path:"+U+"["+F+"] member not found")}getOwner(){return this.__ownerItem}setOwner(U){this.__ownerItem!==U?(this.__ownerItem=U,this.updatePath()):U||(this.__ownerItem=void 0,this.updatePath())}isSelectable(){return this.__selectable}setSelectable(U){if(this.__selectable!=U){this.__selectable=U;let F=new H(this.__selectable);return this.emit("selectabilityChanged",F),!0}return!1}isSelected(){return this.__selected}setSelected(U){this.__selected=U;let F=new P(this.__selected);this.emit("selectedChanged",F)}getMetadata(U){return this.__metaData[U]}hasMetadata(U){return U in this.__metaData}setMetadata(U,F){this.__metaData[U]=F}deleteMetadata(U){delete this.__metaData[U]}toJSON(U){const F=super.toJSON(U);return F.name=this.__name,F}fromJSON(U,F){U.name&&(this.__name=U.name),super.fromJSON(U,F)}readBinary(U,F){U.loadStr(),this.setName(U.loadStr()),super.readBinary(U,F)}clone(U){throw new Error(this.constructor.name+" does not implement its clone method")}copyFrom(U,F){super.copyFrom(U,F),this.setName(U.getName())}}const q=function(U,F,e,t,Q){try{const l=new XMLHttpRequest;l.responseType=F,l.addEventListener("timeout",(F=>{throw new Error("The request for "+U+" timed out.")})),l.addEventListener("error",(F=>{throw new Error("The request for "+U+": xhr.readyState:"+l.readyState)})),l.addEventListener("abort",(F=>{throw new Error("The request for "+U+": xhr.readyState:"+l.readyState)})),l.addEventListener("progress",(U=>{Q&&Q(U.total,U.loaded)})),l.addEventListener("loadend",(U=>{200==l.status?e(l):t(l.statusText)})),l.open("GET",U,!0),l.send()}catch(U){t(U)}},$=function(U,F,e,t){q(U,"text",(U=>{F(U.responseText)}),(F=>{if(null==e)throw new Error("Unable to XHR File:"+U);e(F)}),t)},UU=function(U,F,e,t){q(U,"arraybuffer",(U=>{F(U.response)}),(F=>{if(null==e)throw new Error("Unable to XHR File:"+U);e(F)}),t)};function FU(U,F,e){var t=void 0===F?null:F,Q=function(U,F){var e=atob(U);if(F){for(var t=new Uint8Array(e.length),Q=0,l=e.length;Q<l;++Q)t[Q]=e.charCodeAt(Q);return String.fromCharCode.apply(null,new Uint16Array(t.buffer))}return e}(U,void 0!==e&&e),l=Q.indexOf("\n",10)+1,n=Q.substring(l)+(t?"//# sourceMappingURL="+t:""),a=new Blob([n],{type:"application/javascript"});return URL.createObjectURL(a)}function eU(U,F,e){var t;return function(Q){return t=t||FU(U,F,e),new Worker(t,Q)}}var tU=eU("",null,!1);const QU=e.hardwareConcurrency-1;class lU extends k{constructor(){super(),this.baseUrl="",this.__totalWork=0,this.__doneWork=0,this.plugins={},this.systemUrls={};const U="https://storage.googleapis.com/visualive-tmp/zea-engine-resources";this.systemUrls["ZeaEngine/Vive.vla"]=U+"/Vive.vla",this.systemUrls["ZeaEngine/Oculus.vla"]=U+"/Oculus.vla",this.commonResources={}}registerPlugin(U){U.init(this),this.plugins[U.getType()]=U}loadFile(U,F){const e=this.plugins[U];if(!e)throw new Error(`There's no plugin registered for the type of file "${U}". Did you add the plugins script? See: https://docs.zea.live/zea-engine/#/adding-default-plugins`);this.incrementWorkload();const t=e.loadFile(F);return t.then((()=>{this.incrementWorkDone(),this.emit("loaded",{url:F})}),(()=>{this.incrementWorkDone()})),t}getCommonResource(U){return this.commonResources[U]}setCommonResource(U,F){this.commonResources[U]=F}incrementWorkload(U=1){this.__totalWork+=U;const F=this.__doneWork/this.__totalWork*100;this.emit("progressIncremented",{percent:F})}incrementWorkDone(U=1){this.__doneWork+=U;const F=this.__doneWork/this.__totalWork*100;if(this.emit("progressIncremented",{percent:F}),this.__doneWork>this.__totalWork)throw new Error("Mismatch between work loaded and work done.")}}const nU=new lU,aU=new class{constructor(){this.__callbacks={},this.__workers=[],this.__nextWorker=0}init(U){this.resourceLoader=U}getType(){return"archive"}__getWorker(){return this.__nextWorker=(this.__nextWorker+1)%QU,null==this.__workers[this.__nextWorker]&&(this.__workers[this.__nextWorker]=(()=>new Promise(((U,F)=>{const e=new tU;e.postMessage({type:"init"}),e.onmessage=t=>{if("WASM_LOADED"===t.data.type)U(e);else if("FINISHED"===t.data.type)this.__onFinishedReceiveFileData(t.data);else if("ERROR"===t.data.type){const U=t.data;F(new Error(`Unable to load Resource: ${U.resourceId}`))}}})))()),this.__workers[this.__nextWorker]}__terminateWorkers(){for(const U of this.__workers)U.terminate();this.__workers=[]}loadFile(U){this.resourceLoader.incrementWorkload(1);return new Promise(((F,e)=>{U in this.__callbacks||(this.__callbacks[U]=[]),this.__callbacks[U].push(F),fetch(U).then((F=>(this.resourceLoader.incrementWorkDone(1),function(U){return!!U.ok&&U}(F)?F.arrayBuffer():(e(new Error(`loadArchive: ${F.status} - ${F.statusText} : ${U}`)),null)))).then((e=>{const t=U;t in this.__callbacks||(this.__callbacks[t]=[]),this.__callbacks[t].push(F),this.__getWorker().then((U=>{U.postMessage({type:"unpack",resourceId:t,buffer:e})}))}))}))}__onFinishedReceiveFileData(U){const F=U.resourceId,e=this.__callbacks[F];if(e){for(const F of e)F(U.entries);delete this.__callbacks[F]}}shutDownWorkers(){this.__workers.forEach((U=>{U.then((U=>{U.terminate()}))}))}};nU.registerPlugin(aU);const dU=new class{init(U){this.resourceLoader=U}getType(){return"json"}loadFile(U){this.resourceLoader.incrementWorkload(1);return new Promise(((F,e)=>{fetch(U).then((t=>{this.resourceLoader.incrementWorkDone(1),!function(U){return!!U.ok&&U}(t)?e(`loadJSON: ${t.status} - ${t.statusText} : ${U}`):F(t.json())}))}))}};nU.registerPlugin(dU);const iU=new class{init(U){this.resourceLoader=U}getType(){return"text"}loadFile(U){this.resourceLoader.incrementWorkload(1);return new Promise(((F,e)=>{fetch(U).then((t=>{this.resourceLoader.incrementWorkDone(1),!function(U){return!!U.ok&&U}(t)?e(`loadText: ${t.status} - ${t.statusText} : ${U}`):F(t.text())}))}))}};nU.registerPlugin(iU);const sU=new class{init(U){this.resourceLoader=U}getType(){return"binary"}loadFile(U){this.resourceLoader.incrementWorkload(1);return new Promise(((F,e)=>{fetch(U).then((t=>{this.resourceLoader.incrementWorkDone(1),!function(U){return!!U.ok&&U}(t)?e(`loadBinary: ${t.status} - ${t.statusText} : ${U}`):F(t.arrayBuffer())}))}))}};nU.registerPlugin(sU);class RU{constructor(U=""){if(this.branch="",U){const F=U.split("-"),e=F[0].split(".");this.major=parseInt(e[0]),this.minor=parseInt(e[1]),this.patch=parseInt(e[2]),2==F.length&&(this.branch=F[1])}else this.major=0,this.minor=0,this.patch=0}compare(U){const F=[this.major,this.minor,this.patch];for(let e=0;e<3;e++)if(F[e]!==U[e])return F[e]-U[e];return 0}}class BU{constructor(U,F=0,e=!0){this.__data=U,this.__byteOffset=F,this.__dataView=new DataView(this.__data),this.__isMobileDevice=e,this.utf8decoder=new TextDecoder}get isMobileDevice(){return this.__isMobileDevice}get data(){return this.__data}get byteLength(){return this.__dataView.byteLength}get remainingByteLength(){return this.__dataView.byteLength-this.__byteOffset}pos(){return this.__byteOffset}seek(U){this.__byteOffset=U}advance(U){this.__byteOffset+=U}loadUInt8(){const U=this.__dataView.getUint8(this.__byteOffset);return this.__byteOffset+=1,U}loadUInt16(){const U=this.__dataView.getUint16(this.__byteOffset,!0);return this.__byteOffset+=2,U}loadUInt32(){const U=this.__dataView.getUint32(this.__byteOffset,!0);return this.__byteOffset+=4,U}loadSInt32(){const U=this.__dataView.getInt32(this.__byteOffset,!0);return this.__byteOffset+=4,U}loadFloat16(){const U=this.loadUInt16();return J.decode16BitFloat(U)}loadUFloat16(){const U=this.loadFloat16();return U<0?2048-U:U}loadFloat16From2xUInt8(){throw Error("loadFloat16From2xUInt8 not implemented!")}loadUInt32From2xUFloat16(){return this.loadUFloat16()+4096*this.loadUFloat16()}loadSInt32From2xFloat16(){return this.loadFloat16()+2048*this.loadFloat16()}loadFloat32(){const U=this.__dataView.getFloat32(this.__byteOffset,!0);return this.__byteOffset+=4,U}loadUInt8Array(U,F=!1){null==U&&(U=this.loadUInt32());const e=new Uint8Array(this.__data,this.__byteOffset,U);return this.__byteOffset+=U,e}loadUInt16Array(U,F=!1){if(null==U&&(U=this.loadUInt32()),0==U)return new Uint16Array;let e;if(this.readPad(2),this.__isMobileDevice){e=new Uint16Array(U);for(let F=0;F<U;F++)e[F]=this.__dataView.getUint16(this.__byteOffset,!0),this.__byteOffset+=2}else e=new Uint16Array(this.__data,this.__byteOffset,U),this.__byteOffset+=2*U;return e}loadUInt32Array(U,F=!1){if(null==U&&(U=this.loadUInt32()),0==U)return new Uint32Array;let e;if(this.readPad(4),this.__isMobileDevice){e=new Uint32Array(U);for(let F=0;F<U;F++)e[F]=this.__dataView.getUint32(this.__byteOffset,!0),this.__byteOffset+=4}else e=new Uint32Array(this.__data,this.__byteOffset,U),this.__byteOffset+=4*U;return e}loadFloat32Array(U,F=!1){if(null==U&&(U=this.loadUInt32()),0==U)return new Float32Array;let e;if(this.readPad(4),this.__isMobileDevice){e=new Float32Array(U);for(let F=0;F<U;F++)e[F]=this.__dataView.getFloat32(this.__byteOffset,!0),this.__byteOffset+=4}else e=new Float32Array(this.__data,this.__byteOffset,U),this.__byteOffset+=4*U;return e}loadStr(){const U=this.loadUInt32(),F=new Uint8Array(this.__data,this.__byteOffset,U);return this.__byteOffset+=U,this.utf8decoder.decode(F)}loadStrArray(){const U=this.loadUInt32(),F=[];for(let e=0;e<U;e++)F[e]=this.loadStr();return F}loadSInt32Vec2(){const U=this.loadSInt32(),F=this.loadSInt32();return new d(U,F)}loadUInt32Vec2(){const U=this.loadUInt32(),F=this.loadUInt32();return new d(U,F)}loadFloat16Vec2(){const U=this.loadFloat16(),F=this.loadFloat16();return new d(U,F)}loadFloat32Vec2(){const U=this.loadFloat32(),F=this.loadFloat32();return new d(U,F)}loadFloat16Vec3(){const U=this.loadFloat16(),F=this.loadFloat16(),e=this.loadFloat16();return new i(U,F,e)}loadFloat32Vec3(){const U=this.loadFloat32(),F=this.loadFloat32(),e=this.loadFloat32();return new i(U,F,e)}loadFloat16Quat(){const U=this.loadFloat16(),F=this.loadFloat16(),e=this.loadFloat16(),t=this.loadFloat16();return new o(U,F,e,t)}loadFloat32Quat(){const U=this.loadFloat32(),F=this.loadFloat32(),e=this.loadFloat32(),t=this.loadFloat32();return new o(U,F,e,t)}loadRGBFloat32Color(){const U=this.loadFloat32(),F=this.loadFloat32(),e=this.loadFloat32();return new B(U,F,e)}loadRGBAFloat32Color(){const U=this.loadFloat32(),F=this.loadFloat32(),e=this.loadFloat32(),t=this.loadFloat32();return new B(U,F,e,t)}loadRGBUInt8Color(){const U=this.loadUInt8(),F=this.loadUInt8(),e=this.loadUInt8();return new B(U/255,F/255,e/255)}loadRGBAUInt8Color(){const U=this.loadUInt8(),F=this.loadUInt8(),e=this.loadUInt8(),t=this.loadUInt8();return new B(U/255,F/255,e/255,t/255)}loadBox2(){return new m(this.loadFloat32Vec2(),this.loadFloat32Vec2())}loadBox3(){return new W(this.loadFloat32Vec3(),this.loadFloat32Vec3())}readPad(U){const F=this.__byteOffset%U;0!=F&&(this.__byteOffset+=U-F)}}var VU;U.OperatorOutputMode=void 0,(VU=U.OperatorOutputMode||(U.OperatorOutputMode={}))[VU.OP_WRITE=0]="OP_WRITE",VU[VU.OP_READ_WRITE=1]="OP_READ_WRITE";class rU extends k{constructor(U="",F,e){super(),this.dirty=!1,this.boundInputs=[],this.boundOutputs=[],this.cleaning=!1,this.dirtyOpIndex=0,this.firstOP_WRITE=0,this.name=U,this.__value=F,this.dataType=e}getName(){return this.name}setName(U){if(U===this.name)return;const F=this.name;this.name=U,this.emit("nameChanged",{newName:this.name,prevName:F})}getOwner(){return this.ownerItem}setOwner(U){this.ownerItem=U}getPath(){return this.ownerItem&&this.ownerItem instanceof A?[...this.ownerItem.getPath(),this.name]:[this.name]}getDataType(){return this.dataType}bindOperatorInput(U){this.boundInputs.push(U)}unbindOperatorInput(U){const F=this.boundInputs.indexOf(U);this.boundInputs.splice(F,1)}bindOperatorOutput(U,F=-1){-1==F&&(F=this.boundOutputs.length),this.boundOutputs.splice(F,0,U);for(let U=F;U<this.boundOutputs.length;U++)this.boundOutputs[U].setParamBindIndex(U);return this.__findFirstOP_WRITE(),this.dirtyOpIndex=this.boundOutputs.length,this.setDirty(F),F}unbindOperatorOutput(U){const F=U.getParamBindIndex();this.boundOutputs.splice(F,1);for(let U=F;U<this.boundOutputs.length;U++)this.boundOutputs[U].setParamBindIndex(U);return this.__findFirstOP_WRITE(),this.dirtyOpIndex=this.boundOutputs.length,this.setDirty(Math.max(0,F-1)),F}__findFirstOP_WRITE(){if(this.firstOP_WRITE=this.boundOutputs.length,this.boundOutputs.length>0)for(this.firstOP_WRITE--;this.firstOP_WRITE>0&&this.boundOutputs[this.firstOP_WRITE].getMode()!=U.OperatorOutputMode.OP_WRITE;this.firstOP_WRITE--);}setDirty(U){if(U<this.dirtyOpIndex){let F=this.firstOP_WRITE;if(F<=U){for(this.dirtyOpIndex=F,F++;F<this.boundOutputs.length;F++)F!=U&&this.boundOutputs[F].getOperator().setDirty();for(let U=0;U<this.boundInputs.length;U++)this.boundInputs[U].setDirty();return this.emit("valueChanged"),!0}}return!1}isDirty(){return this.dirtyOpIndex<this.boundOutputs.length}getDirtyBindingIndex(){return this.dirtyOpIndex}setCleanFromOp(F,e){if(e!=this.dirtyOpIndex)if(e<this.dirtyOpIndex)console.log("Parameter is cleaned when it was already clean to that point in the stack:",this.getPath());else if(this.boundOutputs[e].getMode()!=U.OperatorOutputMode.OP_WRITE){const U=this.getClassName(),F=this.boundOutputs[e].getOperator(),t=F.getClassName();throw new Error(`Parameter: ${U} with name: ${this.getName()} is not cleaning all outputs during evaluation of op: ${t} with name: ${F.getName()}`)}this.__value=F,this.dirtyOpIndex=e+1}getValueFromOp(U){return this.dirtyOpIndex<U&&this._clean(U),this.__value}_clean(U){if(this.cleaning)throw new Error(`Cycle detected when cleaning: ${this.getPath()}. Operators need to be rebound to fix errors`);for(this.cleaning=!0;this.dirtyOpIndex<U;){const U=this.dirtyOpIndex;if(this.boundOutputs[this.dirtyOpIndex].getOperator().evaluate(),U==this.dirtyOpIndex){const U=this.boundOutputs[this.dirtyOpIndex].getOperator(),F=U.getClassName();console.warn(`Operator: ${F} with name: ${U.getName()} is not cleaning its outputs during evaluation`),this.dirtyOpIndex++}}this.cleaning=!1}getValue(){return this.dirtyOpIndex<this.boundOutputs.length&&this._clean(this.boundOutputs.length),this.__value}setValue(U){if(null==U)throw"undefined was passed into the set value for param:"+this.getName();if(this.boundOutputs.length>0)for(let F=this.boundOutputs.length-1;F>=0;F--){const e=this.boundOutputs[F];if(U=e.backPropagateValue(U),0==e.getMode())return}if("object"==typeof U||this.__value!=U){this.__value=U;for(let U=0;U<this.boundInputs.length;U++)this.boundInputs[U].paramValueChanged();this.emit("valueChanged")}}get value(){return this.getValue()}set value(U){this.setValue(U)}loadValue(U){this.__value=U}readBinary(U,F){console.warn(`TODO: Parameter: ${this.constructor.name} with name: ${this.name} does not implement readBinary`)}destroy(){console.warn("nothing destroyed. This method was not overwritten in subclass")}}class hU extends rU{constructor(U="",F=0,e,t){super(U,F,"Number"),this.range=e,this.step=t}getRange(){return this.range}setRange(U){this.range=U}getStep(){return this.step}setStep(U){this.step=U}toJSON(U){const F={value:this.__value};return this.range&&(F.range=this.range),this.step&&(F.step=this.step),F}fromJSON(U,F){this.__value=U.value,U.range&&(this.range=U.range),U.step&&(this.step=U.step)}readBinary(U,F){this.__value=U.loadFloat32()}clone(){return new hU(this.name,this.__value,this.range,this.step)}}n.register("NumberParameter",hU),n.register("Property_SInt32",class extends hU{readBinary(U,F){this.__value=U.loadSInt32()}}),n.register("Property_UInt32",class extends hU{readBinary(U,F){this.__value=U.loadUInt32()}}),n.register("Property_Float32",class extends hU{readBinary(U,F){this.__value=U.loadFloat32()}});class oU extends hU{constructor(U,F,e=[]){super(U,F,[0,e.length],1),this.choices=e}getChoices(){return this.choices}setValue(U){"string"==typeof U?super.setValue(this.choices.indexOf(U)):super.setValue(U)}}n.register("MultiChoiceParameter",oU);class JU extends rU{constructor(U="",F){super(U,null!=F&&F,"Boolean")}readBinary(U,F){this.__value=0!=U.loadUInt8()}toJSON(U){return{value:this.__value}}fromJSON(U,F){this.__value=U.value,this.emit("valueChanged",{mode:0})}clone(){return new JU(this.name,this.__value)}}n.register("BooleanParameter",JU),n.register("Property_Boolean",JU);class ZU extends rU{constructor(U="",F,e){super(U,F||new d,"Vec2"),this.range=e}getRange(){return this.range}setRange(U){this.range=U,this.emit("rangeChanged",{range:U})}readBinary(U,F){var e;null===(e=this.__value)||void 0===e||e.readBinary(U)}toJSON(U){var F;return{name:this.name,value:null===(F=this.__value)||void 0===F?void 0:F.toJSON()}}fromJSON(U,F){const e=new d;e.fromJSON(U.value),this.__value=e,U.name&&(this.name=U.name)}clone(){var U;const F=new ZU(this.name,null===(U=this.__value)||void 0===U?void 0:U.clone());return this.range&&F.setRange(this.range),F}}n.register("Vec2Parameter",ZU),n.register("Property_Vec2_32f",ZU);class cU extends rU{constructor(U="",F,e){super(U,F||new i,"Vec3"),this.range=e}readBinary(U,F){var e;null===(e=this.__value)||void 0===e||e.readBinary(U)}toJSON(U){var F;return{name:this.name,value:null===(F=this.__value)||void 0===F?void 0:F.toJSON()}}fromJSON(U,F){const e=new i;e.fromJSON(U.value),this.__value=e,U.name&&(this.name=U.name)}clone(){var U;return new cU(this.name,null===(U=this.__value)||void 0===U?void 0:U.clone())}}n.register("Vec3Parameter",cU),n.register("Property_Vec3_32f",cU);class mU extends rU{constructor(U="",F){super(U,F||new s,"Vec4")}readBinary(U,F){var e;null===(e=this.__value)||void 0===e||e.readBinary(U)}toJSON(U){var F;return{name:this.name,value:null===(F=this.__value)||void 0===F?void 0:F.toJSON()}}fromJSON(U,F){const e=new s;e.fromJSON(U.value),this.__value=e,U.name&&(this.name=U.name)}clone(){var U;return new mU(this.name,null===(U=this.__value)||void 0===U?void 0:U.clone())}}n.register("Vec4Parameter",mU),n.register("Property_Vec4_32f",mU);class SU extends rU{constructor(U="",F){super(U,F||new B,"Color")}readBinary(U,F){const e=U.loadRGBAFloat32Color();e.applyGamma(2.2),this.__value=e}toJSON(U){var F;return{value:null===(F=this.__value)||void 0===F?void 0:F.toJSON()}}fromJSON(U,F){var e;null===(e=this.__value)||void 0===e||e.fromJSON(U.value)}clone(){var U;return new SU(this.name,null===(U=this.__value)||void 0===U?void 0:U.clone())}}n.register("ColorParameter",SU),n.register("Property_Color_32f",SU);class WU extends rU{constructor(U="",F){super(U,F||new o,"Quat")}readBinary(U,F){var e;null===(e=this.__value)||void 0===e||e.readBinary(U)}toJSON(U){var F;return{value:null===(F=this.__value)||void 0===F?void 0:F.toJSON()}}fromJSON(U,F){const e=new o;e.fromJSON(U.value),this.__value=e}clone(){var U;return new WU(this.name,null===(U=this.__value)||void 0===U?void 0:U.clone())}}n.register("QuatParameter",WU),n.register("Property_Quat_32f",WU);class EU extends rU{constructor(U="",F){super(U,F||new r,"Mat3")}readBinary(U,F){var e;null===(e=this.__value)||void 0===e||e.readBinary(U)}toJSON(U){var F;return{value:null===(F=this.__value)||void 0===F?void 0:F.toJSON()}}fromJSON(U,F){const e=new r;e.fromJSON(U.value),this.__value=e}clone(){var U;return new EU(this.name,null===(U=this.__value)||void 0===U?void 0:U.clone())}}n.register("Mat3Parameter",EU),n.register("Property_Mat3_32f",EU);class pU extends rU{constructor(U="",F){super(U,F||new h,"Mat4")}readBinary(U,F){var e;null===(e=this.__value)||void 0===e||e.readBinary(U)}toJSON(U){var F;return{value:null===(F=this.__value)||void 0===F?void 0:F.toJSON()}}fromJSON(U,F){const e=new h;e.fromJSON(U.value),this.__value=e}clone(){var U;return new pU(this.name,null===(U=this.__value)||void 0===U?void 0:U.clone())}}n.register("Mat4Parameter",pU),n.register("Property_Mat4_32f",pU);class uU extends rU{constructor(U="",F){super(U,F||new c,"Xfo")}readBinary(U,F){this.__value.readBinary(U)}toJSON(U){return{name:this.name,value:this.__value.toJSON()}}fromJSON(U,F){const e=new c;e.fromJSON(U.value),this.__value=e,U.name&&(this.name=U.name)}clone(){return new uU(this.name,this.__value.clone())}}n.register("XfoParameter",uU),n.register("Property_Xfo_32f",uU);class NU extends rU{constructor(U="",F){super(U,F,"BaseImage")}toJSON(U){const F={name:this.name};return this.__value&&(F.imageType=this.__value.getClassName(),F.value=this.__value.toJSON()),F}fromJSON(U,F){var e;U.imageType&&(this.__value=n.constructClass(U.imageType),U.value&&(null===(e=this.__value)||void 0===e||e.fromJSON(U.value,F)))}clone(){return new NU(this.name,this.__value)}}n.register("ImageParameter",NU);class kU extends rU{constructor(U="",F=""){super(U,F,"String"),this.multiLine=!1}setMultiLine(U){this.multiLine=U}getMultiLine(){return this.multiLine}readBinary(U,F){this.__value=U.loadStr()}toJSON(U){return{value:this.__value}}fromJSON(U,F){this.__value=U.value?U.value:"",this.emit("valueChanged",{mode:0})}clone(){return new kU(this.name,this.__value)}}n.register("StringParameter",kU),n.register("Property_String",kU);class bU extends rU{constructor(U="",F=[]){super(U,F,"String[]")}readBinary(U,F){this.__value=U.loadStrArray()}toJSON(U){return{value:this.__value}}fromJSON(U,F){this.__value=U.value,this.emit("valueChanged",{mode:0})}clone(){return new bU(this.name,this.__value)}}n.register("StringListParameter",bU),n.register("Property_StringList",bU);class CU extends rU{constructor(U="",F){super(U,[],F)}filter(U){return!0}getCount(){var U;return(null===(U=this.__value)||void 0===U?void 0:U.length)||0}getElement(U){if(this.__value)return this.__value[U]}setElement(U,F){this.__value||(this.__value=[]),this.__value[U]=F,this.emit("valueChanged")}addElement(U){if((U||0==U)&&this.filter(U))return this.__value||(this.__value=[]),this.__value.push(U),this.emit("elementAdded",{elem:U,index:this.__value.length-1}),this.emit("valueChanged"),U}removeElement(U){this.__value||(this.__value=[]);const F=this.__value[U];this.__value.splice(U,1),this.emit("elementRemoved",{elem:F,index:U}),this.emit("valueChanged")}insertElement(U,F){this.__value&&this.filter(F)&&(this.__value.splice(U,0,F),this.emit("elementAdded",{elem:F,index:U}),this.emit("valueChanged"))}toJSON(U){const F=[];if(this.__value)for(const e of this.__value)"string"==typeof this.dataType?F.push(e):F.push(e.toJSON(U));return{value:F}}fromJSON(U,F){if(null!=U.items){this.__value=[];for(let e=0;e<U.items.length;e++){let t;if("string"==typeof this.dataType)t=U.items[e];else{if(!this.dataType)throw"No DataType";t=n.constructClass(this.dataType),t.fromJSON(U.items[e],F)}this.__value.push(t),this.emit("elementAdded",{elem:t,index:this.__value.length-1})}this.emit("valueChanged",{mode:0})}else console.warn("Invalid Parameter JSON")}clone(){const U=this.__value?this.__value.slice(0):[];if(!this.dataType)throw"This parameter does not have a DataType";const F=new CU(this.name,this.dataType);return F.setValue(U),F}destroy(){if(this.__value)for(let U=0;U<this.__value.length;U++)this.__value[U]instanceof rU&&this.__value[U].destroy(),this.removeElement(U)}}class TU extends rU{constructor(U){super(U,{},"Struct"),this.members=[]}addMember(U){return this.__value&&(this.__value[U.getName()]=U.value),U.on("valueChanged",(()=>{this.__value&&(this.__value[U.getName()]=U.value)})),this.members.push(U),this.emit("valueChanged"),U}getParameter(U){for(const F of this.members)if(F.getName()==U)return F}getMember(U){return this.getParameter(U)}getMemberNames(){const U=[];for(let F=0;F<this.members.length;F++){const e=this.members[F];null!=e&&(U[F]=e.getName())}return U}toJSON(U){const F={},e=[];for(const F of this.members)e.push(F.toJSON(U));return F.members=e,F.name=this.name,F}fromJSON(U,F){if(null!=U.members){for(let e=0;e<U.members.length;e++)U.members[e]&&this.members[e].fromJSON(U.members[e],F);this.name=U.name}else console.warn("Invalid Parameter JSON")}clone(){return new TU(this.name)}destroy(){for(const U of this.members)U.destroy()}}n.register("StructParameter",TU);class GU extends k{constructor(F,e=U.OperatorOutputMode.OP_WRITE){super(),this._op=null,this.__name=F,this._mode=e,this._param=void 0,this._paramBindIndex=-1,this.detached=!1}getName(){return this.__name}setOperator(U){this._op=U}getOperator(){return this._op}getMode(){return this._mode}isConnected(){return null!=this._param}getParam(){return this._param}setParam(U,F=-1){this._param&&this._param.unbindOperatorOutput(this),this._param=U,this._param&&(this._paramBindIndex=this._param.bindOperatorOutput(this,F)),this.emit("paramSet",{param:this._param})}getParamBindIndex(){return this._paramBindIndex}setParamBindIndex(U){this._paramBindIndex=U}setDirty(){this._param&&this._param.setDirty(this._paramBindIndex)}getValue(){if(this._param)return this._param.getValueFromOp(this._paramBindIndex);throw new Error("Cannot call getValue on OperatorOutput that is not connected:",this.__name)}backPropagateValue(U){return this._op&&(U=this._op.backPropagateValue(U)),U}setClean(U){this._param&&this._param.setCleanFromOp(U,this._paramBindIndex)}toJSON(U){const F=this._param?this._param.getPath():"";return{name:this.__name,paramPath:U&&U.makeRelative?U.makeRelative(F):F,paramBindIndex:this._paramBindIndex}}fromJSON(U,F){U.paramPath&&(null==F||F.resolvePath(U.paramPath,(F=>{this.setParam(F,U.paramBindIndex)}),(F=>{console.warn("OperatorOutput: '"+this.getName()+"'. Unable to connect to:"+U.paramPath)})))}detach(){this.detached=!0,this._paramBindIndex=this._param?this._param.unbindOperatorOutput(this):-1}reattach(){this.detached=!1,this._param&&(this._paramBindIndex=this._param.bindOperatorOutput(this,this._paramBindIndex))}rebind(){this._param&&(this._param.unbindOperatorOutput(this),this._paramBindIndex=this._param.bindOperatorOutput(this))}}class XU extends GU{}class gU extends GU{}class yU extends GU{}class IU extends A{constructor(U=""){super(U),this.__inputs=new Map,this.__outputs=new Map}setDirty(){this.__outputs.forEach((U=>U.setDirty()))}parameterValueChanged(U){super.parameterValueChanged(U),this.setDirty()}addInput(U){return U.setOperator(this),this.__inputs.set(U.getName(),U),this.setDirty(),U}removeInput(U){"string"==typeof U&&(U=this.getInput(U)),U.getParam()&&U.setParam(void 0),this.__inputs.delete(U.getName())}getNumInputs(){return this.__inputs.size}getInputByIndex(U){return Array.from(this.__inputs.values())[U]}getInput(U){const F=this.__inputs.get(U);if(!F)throw`Couldn't find an Input with the name of '${U}'`;return F}addOutput(U){return U.setOperator(this),this.__outputs.set(U.getName(),U),this.setDirty(),U}removeOutput(U){if("string"==typeof U&&(U=this.getOutput(U)),!(U instanceof GU))throw new Error("removeOutput only accepts string or OperatorInput");U.getParam()&&U.setParam(),this.__outputs.delete(U.getName())}getNumOutputs(){return this.__outputs.size}getOutputByIndex(U){return Array.from(this.__outputs.values())[U]}getOutput(U){const F=this.__outputs.get(U);if(!F)throw new Error(`Couldn't find an Output with the name of '${U}'`);return F}evaluate(){throw new Error("Not yet implemented")}backPropagateValue(U){return U}toJSON(U){const F=super.toJSON(U);F.type=this.getClassName();const e=[];this.__inputs.forEach((F=>{e.push(F.toJSON(U))})),F.inputs=e;const t=[];return this.__outputs.forEach((F=>{t.push(F.toJSON(U))})),F.outputs=t,F}fromJSON(U,F){super.fromJSON(U,F),U.inputs&&U.inputs.forEach(((U,e)=>{let t;U.name?(t=this.getInput(U.name),t||(t=this.addInput(U.name))):t=this.getInputByIndex(e),t.fromJSON(U,F)})),U.outputs&&U.outputs.forEach(((U,e)=>{let t;U.name?(t=this.getOutput(U.name),t||(t=this.addOutput(U.name))):t=this.getOutputByIndex(e),t.fromJSON(U,F)}))}detach(){this.__inputs.forEach((U=>U.detach())),this.__outputs.forEach((U=>U.detach()))}reattach(){this.__inputs.forEach((U=>U.reattach())),this.__outputs.forEach((U=>U.reattach()))}rebind(){this.__outputs.forEach((U=>U.rebind()))}}class xU extends k{constructor(U){super(),this.detached=!1,this.name=U}getName(){return this.name}setOperator(U){this._op=U}getOperator(){return this._op}isConnected(){return null!=this.param}getParam(){return this.param}paramValueChanged(){this._op&&this._op.setDirty()}setParam(U){this.param&&this.param.unbindOperatorInput(this),this.param=U,this.param&&this.param.bindOperatorInput(this),this.emit("paramSet",{param:this.param})}getValue(){if(this.param)return this.param.value;throw new Error("Unable to getValue")}setValue(U){this.param&&this.param.setValue(U)}setDirty(){this._op&&this._op.setDirty()}toJSON(U){const F=this.param?this.param.getPath():[],e=U&&U.makeRelative?U.makeRelative(F):F;return{name:this.name,paramPath:e}}fromJSON(U,F){U.paramPath&&(null==F||F.resolvePath(U.paramPath,(U=>{this.setParam(U)}),(()=>{console.warn("OperatorInput: '"+this.getName()+"'. Unable to connect to:"+U.paramPath)})))}detach(){this.param&&this.param.unbindOperatorInput(this)}reattach(){this.detached=!1,this.param&&this.param.bindOperatorInput(this)}}class fU extends xU{}class MU extends IU{constructor(U,F){super("CalcGlobalXfoOperator"),this.parentGlobal=new fU("ParentGlobal"),this.localXfo=new fU("LocalXfo"),this.globalXfo=new gU("GlobalXfo"),this.localXfo.setParam(F),this.globalXfo.setParam(U),this.addInput(this.parentGlobal),this.addInput(this.localXfo),this.addOutput(this.globalXfo)}backPropagateValue(U){if(this.parentGlobal.isConnected()){const F=this.parentGlobal.getValue();this.localXfo.setValue(F.inverse().multiply(U))}else this.localXfo.setValue(U)}evaluate(){const U=this.localXfo.getValue();if(this.parentGlobal.isConnected()){const F=this.parentGlobal.getValue();this.globalXfo.setClean(F.multiply(U))}else this.globalXfo.setClean(U)}}n.register("CalcGlobalXfoOperator",MU);class vU extends rU{constructor(U="",F){super(U,new W,"Box3"),this.treeItem=F,this.dirty=!0}setParameterAsDirty(){this.dirty=!0}setDirty(U){const F=super.setDirty(U);return F&&(this.dirty=!0),F}getValue(){return this.dirty&&(this.__value=this.treeItem._cleanBoundingBox(this.__value)),this.__value}toJSON(U){var F;return{value:null===(F=this.__value)||void 0===F?void 0:F.toJSON()}}fromJSON(U,F){var e;null===(e=this.__value)||void 0===e||e.fromJSON(U.value)}readBinary(U,F){throw new Error("Method not implemented.")}clone(){var U;const F=new vU(this.name,this.treeItem);return F.value=null===(U=this.__value)||void 0===U?void 0:U.clone(),F}}class DU extends A{constructor(U){super(U),this.disableBoundingBox=!1,this.__childItems=[],this.__childItemsEventHandlers=[],this.__childItemsMapping={},this.globalXfoParam=new uU("GlobalXfo",new c),this.localXfoParam=new uU("LocalXfo",new c),this.boundingBoxParam=new vU("BoundingBox",this),this.visibleParam=new JU("Visible",!0),this.__highlightMapping={},this.__highlights=[],this.__visible=!0,this.__visibleCounter=1,this.addParameter(this.visibleParam),this.addParameter(this.localXfoParam),this.addParameter(this.globalXfoParam),this.addParameter(this.boundingBoxParam),this.globalXfoOp=new MU(this.globalXfoParam,this.localXfoParam),this.globalXfoParam.on("valueChanged",(U=>{this.setBoundingBoxDirty(),this.emit("globalXfoChanged",U)})),this.visibleParam.on("valueChanged",(()=>{this.__visibleCounter+=this.visibleParam.value?1:-1,this.updateVisibility()}))}setOwner(U){if(this.__ownerItem){const U=this.__ownerItem;if(U&&U instanceof DU){U.isVisible()||this.__visibleCounter++;const F=U.getChildIndex(this);F>=0&&U.unbindChild(F,this)}}if(super.setOwner(U),this.__ownerItem){const U=this.__ownerItem;U&&(U.isVisible()||this.__visibleCounter--,this.globalXfoOp.getInput("ParentGlobal").setParam(U.globalXfoParam))}else this.globalXfoOp.getInput("ParentGlobal").setParam(void 0);this.updateVisibility()}updatePath(){super.updatePath();for(const U of this.__childItems)U&&U.updatePath()}getParentItem(){return this.getOwner()}setParentItem(U){this.setOwner(U)}isVisible(){return this.__visibleCounter>0}setVisible(U){this.visibleParam.value=U}propagateVisibility(U){this.__visibleCounter+=U,this.updateVisibility()}updateVisibility(){const U=this.__visibleCounter>0;if(U!=this.__visible){this.__visible=U;for(const U of this.__childItems)U.propagateVisibility(this.__visible?1:-1);this.emit("visibilityChanged",{visible:U});const F=this.__ownerItem;return F&&F instanceof DU&&F.setBoundingBoxDirty(),!0}return!1}addHighlight(U,F,e=!1){if(U in this.__highlightMapping)if(this.__highlights[this.__highlights.length-1]!=U){const e=this.__highlights.indexOf(U);this.__highlights.splice(e,1),this.__highlights.push(U),this.emit("highlightChanged",{name:U,color:F})}else this.__highlightMapping[U].isEqual(F)||(this.__highlightMapping[U]=F,this.emit("highlightChanged",{name:U,color:F}));else this.__highlights.push(U),this.__highlightMapping[U]=F,this.emit("highlightChanged",{name:U,color:F});e&&this.__childItems.forEach((t=>{t.addHighlight(U,F,e)}))}removeHighlight(U,F=!1){if(U in this.__highlightMapping){if(this.__highlights[this.__highlights.length-1]==U)if(this.__highlights.pop(),delete this.__highlightMapping[U],this.__highlights.length>0){const U=this.__highlights[this.__highlights.length-1],F=this.__highlightMapping[U];this.emit("highlightChanged",{name:U,color:F})}else this.emit("highlightChanged");else{const F=this.__highlights.indexOf(U);this.__highlights.splice(F,1),delete this.__highlightMapping[U],this.emit("highlightChanged")}F&&this.__childItems.forEach((e=>{e.removeHighlight(U,F)}))}}getHighlight(){if(!(this.__highlights.length>0))throw Error("highlight length > 0");return this.__highlightMapping[this.__highlights[this.__highlights.length-1]]}isHighlighted(){return this.__highlights.length>0}_cleanBoundingBox(U){return U.reset(),this.__childItems.forEach((F=>{if(F.isVisible()){const e=F.boundingBoxParam.value;e&&U.addBox3(e)}})),U}childBBoxChanged(){this.setBoundingBoxDirty()}setBoundingBoxDirty(){this.boundingBoxParam&&this.boundingBoxParam.setDirty(-1);const U=this.__ownerItem;U&&U instanceof DU&&U.setBoundingBoxDirty()}getChildren(){return this.__childItems}getNumChildren(){return this.__childItems.length}generateUniqueName(U){if(!(U in this.__childItemsMapping))return U;let F=1;U.length>4&&!Number.isNaN(parseInt(U.substring(U.length-4)))?F=parseInt(U.substr(U.length-4)):U.length>3&&!Number.isNaN(parseInt(U.substring(U.length-3)))?F=parseInt(U.substr(U.length-3)):U.length>2&&!Number.isNaN(parseInt(U.substring(U.length-2)))&&(F=parseInt(U.substr(U.length-2)));const e=[];for(const U of this.__childItems)U&&e.push(U.getName());let t=U;for(;;){let Q=""+F;for(;Q.length<2;)Q="0"+Q;if(t=U+Q,!e.includes(t))break;F++}return t}updateChildNameMapping(U){for(let F=U;F<this.__childItems.length;F++)this.__childItemsMapping[this.__childItems[F].getName()]=F}childNameChanged(U){const F=this.__childItemsMapping[U.oldName];delete this.__childItemsMapping[U.oldName],this.__childItemsMapping[U.newName]=F}insertChild(U,F,e=!1,t=!0){if(U.getName()in this.__childItemsMapping){if(!t)throw new Error("Item '"+U.getName()+"' is already a child of :"+this.getPath());U.setName(this.generateUniqueName(U.getName()))}if(!(U instanceof DU))throw new Error("Object is is not a tree item :"+U);const Q={};if(Q.nameChanged=U.on("nameChanged",(U=>{this.childNameChanged(U)})),e){const F=this.globalXfoParam.value,e=U.globalXfoParam.value,t=F.inverse().multiply(e);U.localXfoParam.value=t}return this.setBoundingBoxDirty(),this.__highlights.forEach((F=>{const e=this.__highlightMapping[F];U.addHighlight(F,e,!0)})),this.__childItems.splice(F,0,U),this.__childItemsEventHandlers.splice(F,0,Q),this.__childItemsMapping[U.getName()]=F,this.updateChildNameMapping(F),U.setOwner(this),this.emit("childAdded",{childItem:U,index:F}),U}addChild(U,F=!0,e=!0){const t=this.__childItems.length;return this.insertChild(U,t,F,e),U}getChild(U){return this.__childItems[U]}getChildByName(U){const F=this.__childItemsMapping[U];return null!=F?this.__childItems[F]:null}getChildNames(){const U=[];for(let F=0;F<this.__childItems.length;F++){const e=this.__childItems[F];null!=e&&(U[F]=e.getName())}return U}unbindChild(U,F){const e=this.__childItemsEventHandlers[U];for(const U in e)F.removeListenerById(U,e[U]);this.__childItems.splice(U,1),this.__childItemsEventHandlers.splice(U,1),delete this.__childItemsMapping[F.getName()],this.updateChildNameMapping(U),this.setBoundingBoxDirty(),this.emit("childRemoved",{childItem:F,index:U})}removeChild(U){const F=this.__childItems[U];F&&(this.unbindChild(U,F),F.setOwner(void 0))}removeChildByName(U){const F=this.__childItemsMapping[U];if(null!=F)return this.removeChild(F)}removeChildByHandle(U){const F=this.__childItems.indexOf(U);if(-1==F)throw new Error("Error in removeChildByHandle. Child not found:"+U.getName());this.removeChild(F)}removeAllChildren(){let U=this.__childItems.length;for(;U--;)this.removeChild(U);this.setBoundingBoxDirty()}getChildIndex(U){return this.__childItems.indexOf(U)}resolvePath(U,F=0,e=!1){if("string"==typeof U&&(U=U.split("/")),0==F)if("."==U[0]||U[0]==this.__name)F++;else if(".."==U[0]){if(this.__ownerItem)return this.__ownerItem.resolvePath(U,F+1);if(e)throw Error("this.__ownerItem is undefined");console.warn("this.__ownerItem is undefined")}if(F==U.length)return this;const t=U[F],Q=this.getChildByName(t);if(null==Q){const e=this.getParameter(U[F]);if(e)return e;throw new Error(`Unable to resolve path : [${U.toString()}] after: ${this.getName()} \nNo child or parameter called : "${U[F]}"`)}return Q.resolvePath(U,F+1)}traverse(U,F=!0){const e=(U,F)=>{const e=U.getChildren();for(const U of e)U&&U instanceof DU&&t(U,F+1)},t=(F,t)=>{0!=U(F,t)&&F instanceof DU&&e(F,t)};F?t(this,1):e(this,0)}onPointerDown(U){this.emit("pointerDown",U);const F=this.__ownerItem;U.propagating&&F&&F.onPointerDown(U)}onPointerUp(U){this.emit("pointerUp",U);const F=this.__ownerItem;U.propagating&&F&&F.onPointerUp(U)}onPointerMove(U){this.emit("pointerMove",U);const F=this.__ownerItem;U.propagating&&F&&F.onPointerMove(U)}onPointerEnter(U){this.emit("pointerEnter",U);const F=this.__ownerItem;U.propagating&&F&&F.onPointerEnter(U)}onPointerLeave(U){this.emit("pointerLeave",U);const F=this.__ownerItem;U.propagating&&F&&F.onPointerLeave(U)}onWheel(U){this.emit("mouseWheel",U);const F=this.__ownerItem;U.propagating&&F&&F.onWheel(U)}onTouchCancel(U){this.emit("touchCancel",U);const F=this.__ownerItem;U.propagating&&F&&F.onTouchCancel(U)}toJSON(U){let F=super.toJSON(U);const e={};for(const F of this.__childItems)if(F){const t=F.toJSON(U);t&&(e[F.getName()]=t)}return Object.keys(e).length>0&&(F?F.children=e:F={name:this.__name,children:e}),F}fromJSON(U,F,e){if(super.fromJSON(U,F),F&&!Number.isNaN(F.numTreeItems)&&F.numTreeItems++,null!=U.children){const e=U.children;if(Array.isArray(e))for(const U of e){let e=this.getChildByName(U.name);e?e.fromJSON(U,F):U.type&&(e=n.constructClass(U.type),e&&(e.fromJSON(U,F),this.addChild(e,!1,!1)))}else for(const U in e){const t=e[U];let Q=this.getChildByName(U);Q?Q.fromJSON(t,F):t.type&&(Q=n.constructClass(t.type),Q&&(Q.fromJSON(t,F),this.addChild(Q,!1,!1)))}}}readBinary(U,F){super.readBinary(U,F),F.numTreeItems++;const e=U.loadUInt8();this.setVisible(0!=(2&e));if(4&e){const F=new c;if(F.tr=U.loadFloat32Vec3(),F.ori=U.loadFloat32Quat(),32&e)F.sc=U.loadFloat32Vec3();else{const e=U.loadFloat32();F.sc.set(e,e,e)}this.localXfoParam.value=F}8&e&&this.boundingBoxParam.loadValue(new W(U.loadFloat32Vec3(),U.loadFloat32Vec3()));const t=U.loadUInt32();if(t>0){const e=U.loadUInt32Array(t);for(let Q=0;Q<t;Q++)try{U.seek(e[Q]);let t=U.loadStr();const l=n.constructClass(t);if(!l){const F=U.loadStr();console.warn("Unable to construct child:"+F+" of type:"+t);continue}U.seek(e[Q]),l.readBinary(U,F),this.addChild(l,!1,!0)}catch(U){console.warn("Error loading tree item: ",U)}}}clone(U){const F=new DU("");return F.copyFrom(this,U),F}copyFrom(U,F){super.copyFrom(U,F),U.getChildren().forEach((U=>{U&&this.addChild(U.clone(),!1,!1)}))}}n.register("TreeItem",DU);class LU extends rU{constructor(U="",F){super(U,void 0,"TreeItem"),this.listenerIDs={},this.owner=new DU(""),this.filterFn=F}emitTreeItemGlobalXfoChanged(U){this.emit("treeItemGlobalXfoChanged",U)}setOwner(U){this.owner=U}getOwner(){return this.owner}setFilterFn(U){this.filterFn=U}getFilterFn(){return this.filterFn}setValue(U){this.filterFn&&!this.filterFn(U)||this.__value!==U&&(this.__value&&this.__value.removeListenerById("globalXfoChanged",this.listenerIDs.globalXfoChanged),this.__value=U,this.__value&&(this.listenerIDs.globalXfoChanged=this.__value.on("globalXfoChanged",(U=>{this.emitTreeItemGlobalXfoChanged(U)}))),this.emit("valueChanged"))}toJSON(U){var F;return{value:U.makeRelative(null===(F=this.__value)||void 0===F?void 0:F.getPath())}}fromJSON(U,F){null!=U.value?F.resolvePath(U.value,(U=>{this.setValue(U)}),(()=>{console.warn("Unable to resolve tree item parameter value:"+U.paramPath)})):console.warn("Invalid Parameter JSON")}clone(U){const F=new LU(this.name,this.filterFn);return this.__value&&F.setValue(this.__value.clone(U)),F}}n.register("TreeItemParameter",LU);class YU extends N{constructor(U,F){super(),this.index=F,this.item=U}}class _U extends rU{constructor(U="",F){super(U,new Set,"TreeItem"),this.filterFn=F}setFilterFn(U){this.filterFn=U}getFilterFn(){return this.filterFn}getItem(U){return Array.from(this.__value)[U]}addItem(U,F=!0){if(this.filterFn&&!this.filterFn(U))return void console.warn("ItemSet __filterFn rejecting item:",U.getPath());this.__value.add(U);const e=Array.from(this.__value).indexOf(U);return this.emit("itemAdded",new YU(U,e)),F&&this.emit("valueChanged"),e}addItems(U,F=!0){U.forEach((U=>this.addItem(U,!1))),F&&this.emit("valueChanged")}removeItem(U,F=!0){const e=Array.from(this.__value)[U];return this.__value.delete(e),this.emit("itemRemoved",new YU(e,U)),F&&this.emit("valueChanged"),e}setItems(U,F=!0){const e=Array.from(this.__value);for(let F=e.length-1;F>=0;F--){const t=e[F];U.has(t)||this.removeItem(F,!1)}for(const F of U)this.__value.has(F)||this.addItem(F,!1);F&&this.emit("valueChanged")}clearItems(U=!0){this.__value.clear(),U&&this.emit("valueChanged")}getNumItems(){return this.__value.size}toJSON(U){this.__value||(this.__value=new Set);const F=[];if(U)for(const U of this.__value)F.push(U.getPath());return{value:F}}fromJSON(U,F){if(F)for(const e in U.value){const U=F.resolvePath(e);this.__value.add(U)}}clone(){return new _U(this.name,this.filterFn)}}class wU extends rU{constructor(U="",F){super(U,F,"Geometry"),this.listenerIDs={},F&&this.setValue(F)}emitBoundingBoxDirtied(U){this.emit("boundingBoxChanged",U)}setValue(U){this.__value!==U&&(this.__value&&this.__value.removeListenerById("boundingBoxChanged",this.listenerIDs.boundingBoxChanged),this.__value=U,this.__value&&(this.listenerIDs.boundingBoxChanged=this.__value.on("boundingBoxChanged",(U=>{this.emitBoundingBoxDirtied(U)}))),this.emit("valueChanged"))}loadValue(U){this.__value&&this.__value.removeListenerById("boundingBoxChanged",this.listenerIDs.boundingBoxChanged),this.__value=U,this.__value&&(this.listenerIDs.boundingBoxChanged=this.__value.on("boundingBoxChanged",(U=>{this.emitBoundingBoxDirtied(U)})))}toJSON(U){var F;return{name:this.name,value:null===(F=this.__value)||void 0===F?void 0:F.toJSON(U)}}fromJSON(U,F){U.name&&(this.name=U.name);const e=n.constructClass(U.value.type);e.fromJSON(U.value,F),this.__value=e}clone(){return new wU(this.name,this.__value)}}n.register("GeometryParameter",wU);class zU extends rU{constructor(U=""){super(U,"","FilePath")}getFilename(){if(!this.__value)throw"No file value";return this.__value.lastIndexOf("/")>-1?this.__value.substring(this.__value.lastIndexOf("/")+1):""}getExt(){const U=this.getFilename(),F=U.lastIndexOf(".");if(-1!=F)return U.substring(F).toLowerCase()}getStem(){const U=this.getFilename();if(U){const F=U.split(".");return 2==F.length?F[0]:U}return null}setValue(U){if(!U)throw new Error("Invalid value for setValue.");U!=this.__value&&(this.__value=U,this.emit("valueChanged"))}toJSON(U){return{value:this.__value}}fromJSON(U,F){U.value&&(this.__value=U.value)}clone(){const U=new zU(this.name);return this.__value&&U.setValue(this.__value),U}}n.register("FilePathParameter",zU);class KU extends A{constructor(U){super(U),this.width=0,this.height=0,this.format="RGB",this.type="UNSIGNED_BYTE",this.mipMapped=!0,this.wrapS="REPEAT",this.wrapT="REPEAT",this.minFilter="LINEAR",this.magFilter="LINEAR",this.loaded=!1,this.width=0,this.height=0,this.format="RGB",this.type="UNSIGNED_BYTE",this.wrapS="CLAMP_TO_EDGE",this.wrapT="CLAMP_TO_EDGE",this.minFilter="LINEAR",this.magFilter="LINEAR",this.on("parameterValueChanged",(()=>{this.emit("updated")}))}isLoaded(){return this.loaded}getParams(){return{type:this.type,format:this.format,width:this.width,height:this.height,wrapS:this.wrapS,wrapT:this.wrapT,minFilter:this.minFilter,magFilter:this.magFilter,mipMapped:this.mipMapped}}}class HU extends hU{constructor(U="",F,e){super(U,F,e)}toJSON(U){return super.toJSON(U)}getImage(){return this.image}setImage(U){const F=()=>{this.emit("textureDisconnected")};U?(null!=this.image&&this.image!==U&&F(),this.image=U,this.emit("textureConnected"),this.emit("valueChanged",{mode:0})):null!=this.image&&(F(),this.image=void 0,this.emit("textureDisconnected"))}setValue(U){U instanceof KU?this.setImage(U):super.setValue(U)}readBinary(U,F){super.readBinary(U,F);const e=U.loadStr();""!=e&&(console.log("Load Texture"),this.setImage(F.materialLibrary.getImage(e)))}clone(){return new HU(this.name,this.__value,this.range)}}n.register("MaterialFloatParam",HU);class PU extends SU{constructor(U,F){super(U,F),this.listenerIDs={}}getImage(){return this.image}imageUpdated(){this.emit("valueChanged")}setImage(U){const F=()=>{this.image&&(this.image.removeListenerById("loaded",this.listenerIDs.loaded),this.image.removeListenerById("updated",this.listenerIDs.updated),this.image=void 0),this.emit("textureDisconnected")};U?(null!=this.image&&this.image!==U&&F(),this.image=U,this.listenerIDs.updated=this.image.on("updated",(()=>{this.imageUpdated()})),this.emit("textureConnected"),this.emit("valueChanged")):null!=this.image&&(F(),this.image=void 0,this.emit("textureDisconnected"))}setValue(U){U instanceof KU?this.setImage(U):super.setValue(U)}readBinary(U,F){super.readBinary(U,F);const e=U.loadStr();""!=e&&this.setImage(F.materialLibrary.getImage(e))}clone(){var U;return new PU(this.name,null===(U=this.__value)||void 0===U?void 0:U.clone())}}n.register("MaterialColorParam",PU);class OU extends N{constructor(U){super(),this.shaderName=U}}class jU extends N{constructor(U){super(),this.isTransparent=U}}class AU extends N{constructor(U,F){super(),this.isTextured=U,this.param=F}}class qU extends A{constructor(U,F){super(U),this.__isTransparent=!1,this.__isTextured=!1,this.__shaderName="",F&&this.setShaderName(F)}getShaderName(){return this.__shaderName}setShaderName(U){if(this.__shaderName==U)return;this.__shaderName=U;const F=n.getClassDefinition(U).getMaterialTemplate();if(!F)throw new Error("Error setting Shader. Material template not registered found:"+U);const e={};let t=F.getNumParameters();for(;t--;){const U=F.getParameterByIndex(t);this.getParameter(U.getName())||this.addParameter(U.clone()),e[U.getName()]=!0}for(const U of this.params)e[U.getName()]||this.removeParameter(U.getName());this.__shaderName=U,this.__checkTransparency({});const Q=new OU(U);this.emit("shaderNameChanged",Q)}removeAllTextures(){for(const U of this.params)U instanceof PU?U.getImage()&&U.setImage(null):U instanceof HU&&U.getImage()&&U.setImage(null)}getParamTextures(){const U={};for(const F of this.params)F instanceof PU?F.getImage()&&(U[F.getName()]=F.getImage()):F instanceof HU&&F.getImage()&&(U[F.getName()]=F.getImage());return U}isTransparent(){return this.__isTransparent}__checkTransparency(U){let F=!1;try{this.getShaderClass().isTransparent()&&(F=!0)}catch(U){}if(!F){const U=this.getParameter("Opacity");if(U&&(U.value<.99||U instanceof HU&&U.getImage()))F=!0;else{const U=this.getParameter("BaseColor");if(U){if(U instanceof PU){const e=U.getImage();e&&"RGBA"==e.format&&(F=!0)}if(!F&&U.value){U.value.a<1&&(F=!0)}}}}if(F!=this.__isTransparent){this.__isTransparent=F;const U=new jU(F);this.emit("transparencyChanged",U)}}isTextured(){return this.__isTextured}__checkTextures(U){const F=U||{};let e=!1;for(const U of this.params)if(U instanceof PU){if(U.getImage()){e=!0;break}}else if(U instanceof HU&&U.getImage()){e=!0;break}if(e!=this.__isTextured){this.__isTextured=e;let U=new AU(e,F);this.emit("texturedChanged",U)}}parameterValueChanged(U){this.__checkTransparency(U),this.__checkTextures(U),super.parameterValueChanged(U)}getShaderClass(){return n.getClassDefinition(this.getShaderName())}toJSON(U){const F=super.toJSON(U);return F.shader=this.__shaderName,F}fromJSON(U,F={}){U.shader?(this.setShaderName(U.shader),super.fromJSON(U,F)):console.warn("Invalid Material JSON")}readBinary(U,F){let e=U.loadStr();if("StandardMaterial"==e&&(e="StandardSurfaceShader"),"TransparentMaterial"==e&&(e="StandardSurfaceShader"),this.setShaderName(e),F.versions["zea-engine"].compare([0,0,3])<0)throw`Loading zcad files of version ${F.versions["zea-engine"]} is not longer support`;super.readBinary(U,F),this.__checkTransparency(),this.__checkTextures()}clone(U){const F=new qU("clone","");return F.copyFrom(this,U),F}copyFrom(U,F){this.setShaderName(U.getShaderName()),super.copyFrom(U,F)}}n.register("Material",qU);class $U extends rU{constructor(U="",F){super(U,F,"Material"),this.listenerIDs={},F&&this.setValue(F)}valueParameterValueChanged(U){this.emit("valueParameterValueChanged",U)}setValue(U){this.__value!==U&&(this.__value&&this.__value.removeListenerById("parameterValueChanged",this.listenerIDs.parameterValueChanged),this.__value=U,this.__value&&(this.listenerIDs.parameterValueChanged=this.__value.on("parameterValueChanged",(U=>{this.valueParameterValueChanged(U)}))),this.emit("valueChanged"))}loadValue(U){this.__value&&this.__value.removeListenerById("parameterValueChanged",this.listenerIDs.parameterValueChanged),this.__value=U,this.__value&&(this.listenerIDs.parameterValueChanged=this.__value.on("parameterValueChanged",(U=>{this.valueParameterValueChanged(U)})))}toJSON(U){let F={};return F.name=this.name,this.__value&&(F={value:U&&U.onlyPath?this.__value.getPath():this.__value.toJSON(U)}),F}fromJSON(U,F){if(null!=U.value)if(U.value instanceof Array||U.value instanceof String){if(F&&F.assetItem){const e=F.assetItem.getMaterialLibrary().getMaterial(U.value instanceof Array?U.value[1]:U.value);e&&this.loadValue(e)}}else{const e=new qU;U.value&&e.fromJSON(U.value,F),this.loadValue(e)}else console.warn("Invalid Parameter JSON")}clone(){return new $U(this.name,this.__value)}}function UF(U,F){return!U.some(((U,e)=>Math.abs(F[e]-U)>.001))}n.register("MaterialParameter",$U);class FF extends u{constructor(U,F){super(),this.data=new Float32Array(0),this.dataTypeName=U,this.stride=F,this.initRange(0),this.splits={},this.splitValues=[]}setMesh(U){this.mesh=U}asArray(){return this.data}getDataTypeName(){return this.dataTypeName}getCount(){return this.data.length/this.stride}setCount(U){const F=this.data.length,e=U*this.stride;if(e>F){const U=new Float32Array(e);U.set(this.data,0),this.data=U,this.initRange(F)}else e<F&&(this.data=this.data.slice(0,e));this.splits={},this.splitValues=[]}initRange(U){for(let F=U;F<this.data.length;F++)this.data[F]=Number.NaN}get numElements(){return this.stride}getFloat32Value(U){return this.data[U]}setFloat32Value(U,F){this.data[U]=F}getSplits(){return this.splits}getFaceVertexValueRef_array(U,F){const e=this.mesh.getFaceVertexIndex(U,F);return e in this.splits&&U in this.splits[e]?this.splitValues[this.splits[e][U]]:this.data.subarray(e*this.stride,(e+1)*this.stride)}setFaceVertexValue_array(U,F,e){const t=this.mesh.getFaceVertexIndex(U,F);this.setFaceVertexValue_ByVertexIndex(U,t,e)}setFaceVertexValue_ByVertexIndex(U,F,e){const t=this.data.subarray(F*this.stride,(F+1)*this.stride);if(function(U){for(let F=0;F<U.length;F++)if(!Number.isNaN(U[F]))return!0;return!1}(t))if(UF(t,e));else{if(F in this.splits){const t=this.splits[F];for(const F in t){const Q=t[F];if(UF(this.splitValues[Q],e))return void(t[U]=Q)}if(U in this.splits[F])return void(this.splitValues[this.splits[F][U]]=e)}else this.splits[F]={};this.splits[F][U]=this.splitValues.length,this.splitValues.push(e)}else t.set(e)}setSplitVertexValue_array(U,F,e){if(U in this.splits||(this.splits[U]={}),F in this.splits[U]){if(UF(this.splitValues[this.splits[U][F]],e))return;console.warn("Face Vertex Already Split with different value")}this.splits[U][F]=this.splitValues.length,this.splitValues.push(e)}setSplitVertexValues(U,F,e){U in this.splits||(this.splits[U]={});const t=this.splitValues.length;this.splitValues.push(e);for(const e of F)this.splits[U][e]=t}generateSplitValues(U,F){if(0==F)return this.data;const e=this.getCount(),t=new Float32Array((e+F)*this.stride);t.set(this.data);for(const F in U){const Q=U[F];for(const U in Q){const l=e+Q[U];if(F in this.splits&&U in this.splits[F]){const e=this.splits[F][U];this.splitValues[e].forEach(((U,F)=>{t[l*this.stride+F]=U}))}else{const U=parseInt(F);for(let F=0;F<this.stride;F++)t[l*this.stride+F]=this.data[U*this.stride+F]}}}return t}toJSON(U){return{data:this.data,dataType:this.dataTypeName,length:this.data.length/this.stride}}fromJSON(U){const F=U.data.map((U=>J.isNumeric(U)?U:Number.POSITIVE_INFINITY));this.data=Float32Array.from(F)}loadSplitValues(U){const F=U.loadUInt32Array();if(0==F.length)return;let e=0,t=0;for(;;){const U=F[e++],Q=F[e++],l={};for(let U=0;U<Q;U++){const U=F[e++],Q=F[e++];l[U]=Q,Q>=t&&(t=Q+1)}if(this.splits[U]=l,e>=F.length)break}const Q=this.stride,l=U.loadFloat32Array(t*Q);this.splitValues=[];for(let U=0;U<t;U++){const F=l.slice(U*Q,U*Q+Q);this.splitValues.push(F)}}toString(){return JSON.stringify(this.toJSON(),null,2)}genBuffer(){return{values:this.data,count:this.getCount(),dataType:this.dataTypeName,normalized:this.normalized}}}class eF extends FF{constructor(){super("Vec3",3),this.normalized=!1}getValueRef(U){if(U>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+U+". Num Vertices:"+this.data.length/3);const F=U*this.stride,e=this.data.subarray(F,F+this.stride);return new i(e)}getValue(U){if(U>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+U+". Num Vertices:"+this.data.length/3);const F=U*this.stride,e=this.data.slice(F,F+this.stride);return new i(e)}setValue(U,F){if(U>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+U+". Num Vertices:"+this.data.length/3);const e=U*this.stride;this.data.set(F.asArray(),e)}getFaceVertexValueRef(U,F){const e=this.getFaceVertexValueRef_array(U,F);return new i(e)}setFaceVertexValue(U,F,e){this.setFaceVertexValue_array(U,F,e.asArray())}setSplitVertexValue(U,F,e){this.setSplitVertexValue_array(U,F,e.asArray())}}n.register("Vec3Attribute",eF);class tF extends FF{constructor(){super("Vec2",2),this.normalized=!1}getValueRef(U){if(U>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+U+". Num Vertices:"+this.data.length/3);const F=U*this.stride,e=this.data.subarray(F,F+this.stride);return new d(e)}getValue(U){if(U>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+U+". Num Vertices:"+this.data.length/3);const F=U*this.stride,e=this.data.slice(F,F+this.stride);return new d(e)}setValue(U,F){if(U>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+U+". Num Vertices:"+this.data.length/3);const e=U*this.stride;this.data.set(F.asArray(),e)}getFaceVertexValueRef(U,F){const e=this.getFaceVertexValueRef_array(U,F);return new d(e)}setFaceVertexValue(U,F,e){this.setFaceVertexValue_array(U,F,e.asArray())}setSplitVertexValue(U,F,e){this.setSplitVertexValue_array(U,F,e.asArray())}}n.register("Vec2Attribute",tF);class QF extends K{constructor(){super(),this.__boundingBox=new W,this.__boundingBoxDirty=!0,this.__metaData=new Map,this.__name="",this.__numVertices=0,this.__vertexAttributes=new Map,this.debugColor=new B(1,0,0,1),this.name="",this.addVertexAttribute("positions",new eF)}clear(){this.setNumVertices(0)}setDebugName(U){this.name=U}addVertexAttribute(U,F){F.setCount(this.__numVertices),this.__vertexAttributes.set(U,F)}hasVertexAttribute(U){return this.__vertexAttributes.has(U)}getVertexAttribute(U){return this.__vertexAttributes.get(U)}getVertexAttributes(){const U={};for(const[F,e]of this.__vertexAttributes.entries())U[F]=e;return U}get positions(){return this.__vertexAttributes.get("positions")}numVertices(){return this.__numVertices}getNumVertices(){return this.__numVertices}setNumVertices(U){this.__numVertices=U,this.__vertexAttributes.forEach((U=>U.setCount(this.__numVertices))),this.setBoundingBoxDirty()}getBoundingBox(){return this.__boundingBoxDirty&&this.updateBoundingBox(),this.__boundingBox}setBoundingBoxDirty(){this.__boundingBoxDirty=!0,this.emit("boundingBoxChanged")}updateBoundingBox(){const U=this.positions,F=new W;if(U){const e=U.getCount();for(let t=0;t<e;t++)F.addPoint(U.getValueRef(t))}this.__boundingBox=F,this.__boundingBoxDirty=!1}getMetadata(U){return this.__metaData.get(U)}hasMetadata(U){return this.__metaData.has(U)}setMetadata(U,F){this.__metaData.set(U,F)}deleteMetadata(U){this.__metaData.delete(U)}genBuffers(U){const F={};for(const[U,e]of this.__vertexAttributes)F[U]=e.genBuffer();return{numVertices:this.numVertices(),attrBuffers:F}}loadBaseGeomBinary(U){this.name=U.loadStr();const F=U.loadUInt8();this.debugColor=U.loadRGBFloat32Color();const e=U.loadUInt32();this.__boundingBox.set(U.loadFloat32Vec3(),U.loadFloat32Vec3()),this.setNumVertices(e);const t=this.positions;let Q,l;2&F&&(Q=this.getVertexAttribute("normals"),Q||(Q=new eF,this.addVertexAttribute("normals",Q))),4&F&&(l=this.getVertexAttribute("texCoords"),l||(l=new tF,this.addVertexAttribute("texCoords",l)));const n=(U,F,e,Q)=>{for(let l=U[0];l<U[1];l++){const U=new i(Q[3*l+0]/255,Q[3*l+1]/255,Q[3*l+2]/255);U.multiplyInPlace(e),U.addInPlace(F),t&&t.setValue(l,U)}},a=(U,F,e,t)=>{e.isNull()&&e.set(1,1,1);for(let l=U[0];l<U[1];l++){const U=new i(t[3*l+0]/255,t[3*l+1]/255,t[3*l+2]/255);U.multiplyInPlace(e),U.addInPlace(F),U.normalizeInPlace(),Q.setValue(l,U)}},s=(U,F,e,t)=>{for(let Q=U[0];Q<U[1];Q++){const U=new d(t[2*Q+0]/255,t[2*Q+1]/255);U.multiplyInPlace(e),U.addInPlace(F),l.setValue(Q,U)}},R=U.loadUInt32();if(1==R){{const F=this.__boundingBox,t=U.loadUInt8Array(3*e);n([0,e],F.p0,F.diagonal(),t)}if(Q){const F=new W(U.loadFloat32Vec3(),U.loadFloat32Vec3()),t=U.loadUInt8Array(3*e);a([0,e],F.p0,F.diagonal(),t),Q.loadSplitValues(U)}if(l){const F=new m(U.loadFloat32Vec2(),U.loadFloat32Vec2()),t=U.loadUInt8Array(2*e);s([0,e],F.p0,F.diagonal(),t),l.loadSplitValues(U)}}else{const F=[];let t=0;for(let e=0;e<R;e++){const e=U.loadUInt32(),n={range:[t,t+e],bbox:new W(U.loadFloat32Vec3(),U.loadFloat32Vec3()),normalsRange:new W,texCoordsRange:new m};Q&&n.normalsRange.set(U.loadFloat32Vec3(),U.loadFloat32Vec3()),l&&n.texCoordsRange.set(U.loadFloat32Vec2(),U.loadFloat32Vec2()),F.push(n),t+=e}const d=U.loadUInt8Array(3*e);let i=null,B=null;Q&&(i=U.loadUInt8Array(3*e)),l&&(B=U.loadUInt8Array(2*e));for(let U=0;U<R;U++){{const e=F[U].bbox;n(F[U].range,e.p0,e.diagonal(),d)}if(Q){const e=F[U].normalsRange;a(F[U].range,e.p0,e.diagonal(),i)}if(l){const e=F[U].texCoordsRange;s(F[U].range,e.p0,e.diagonal(),B)}}Q&&Q.loadSplitValues(U),l&&l.loadSplitValues(U)}}toJSON(U){const F=super.toJSON(U);U&&U.skipTopology||(F.numVertices=this.__numVertices||0);const e={};for(const[F,t]of this.__vertexAttributes.entries())U&&"skipAttributes"in U&&U.skipAttributes.includes(F)||(e[F]=t.toJSON(U));return F.vertexAttributes=e,F}fromJSON(U,F){this.clear(),super.fromJSON(U,F),this.setNumVertices(U.numVertices);for(const F in U.vertexAttributes){let e=this.__vertexAttributes.get(F);const t=U.vertexAttributes[F];e?e.fromJSON(t):console.warn("attr undefined, cannot execute fromJSON()")}this.emit("geomDataTopologyChanged")}toString(){return JSON.stringify(this.toJSON(),null,2)}}class lF extends FF{constructor(){super("Vec4",4),this.normalized=!1}getValueRef(U){if(U>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+U+". Num Vertices:"+this.data.length/3);const F=U*this.stride,e=this.data.subarray(F,F+this.stride);return new s(e)}getValue(U){if(U>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+U+". Num Vertices:"+this.data.length/3);const F=U*this.stride,e=this.data.slice(F,F+this.stride);return new s(e)}setValue(U,F){if(U>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+U+". Num Vertices:"+this.data.length/3);const e=U*this.stride;this.data.set(F.asArray(),e)}getFaceVertexValueRef(U,F){const e=this.getFaceVertexValueRef_array(U,F);return new s(e)}setFaceVertexValue(U,F,e){this.setFaceVertexValue_array(U,F,e.asArray())}setSplitVertexValue(U,F,e){this.setSplitVertexValue_array(U,F,e.asArray())}}n.register("Vec4Attribute",lF);class nF extends FF{constructor(){super("Color",4),this.normalized=!1}getValueRef(U){if(U>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+U+". Num Vertices:"+this.data.length/3);const F=U*this.stride,e=this.data.subarray(F,F+this.stride);return new B(e)}getValue(U){if(U>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+U+". Num Vertices:"+this.data.length/3);const F=U*this.stride,e=this.data.slice(F,F+this.stride);return new B(e)}setValue(U,F){if(U>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+U+". Num Vertices:"+this.data.length/3);const e=U*this.stride;this.data.set(F.asArray(),e)}getFaceVertexValueRef(U,F){const e=this.getFaceVertexValueRef_array(U,F);return new B(e)}setFaceVertexValue(U,F,e){this.setFaceVertexValue_array(U,F,e.asArray())}setSplitVertexValue(U,F,e){this.setSplitVertexValue_array(U,F,e.asArray())}}n.register("ColorAttribute",nF);class aF extends QF{constructor(){super()}clear(){this.setNumVertices(0),this.emit("geomDataTopologyChanged")}loadBin(U){this.name=U.loadStr();const F=U.loadUInt32();this.__boundingBox.set(U.loadFloat32Vec3(),U.loadFloat32Vec3()),this.setNumVertices(F);const e=this.getVertexAttribute("positions");if(!e)throw Error("positions is undefined");if(F<256){const t=this.__boundingBox.toMat4(),Q=U.loadUInt8Array(3*F);for(let U=0;U<F;U++){const F=new i(Q[3*U+0]/255,Q[3*U+1]/255,Q[3*U+2]/255);e.setValue(U,t.transformVec3(F))}}else{const t=U.loadUInt32(),Q=[];for(let F=0;F<t;F++){const F=U.loadUInt32Vec2(),e=U.loadFloat32Vec3(),t=U.loadFloat32Vec3();Q.push({range:F,bbox:new W(e,t)})}const l=U.loadUInt8Array(3*F);for(let U=0;U<t;U++){const F=Q[U].bbox.toMat4();for(let t=Q[U].range.x;t<Q[U].range.y;t++){const U=new i(l[3*t+0]/255,l[3*t+1]/255,l[3*t+2]/255);e.setValue(t,F.transformVec3(U))}}}}readBinary(U,F){super.loadBaseGeomBinary(U),this.emit("geomDataChanged")}}n.register("Points",aF);class dF extends QF{constructor(){super(),this.__indices=new Uint32Array}clear(){this.setNumSegments(0),this.setNumVertices(0),this.emit("geomDataTopologyChanged")}getIndices(){return this.__indices}getNumSegments(){return this.__indices.length/2}setNumSegments(U){if(U>this.getNumSegments()){const F=new Uint32Array(2*U);F.set(this.__indices),this.__indices=F}else this.__indices=this.__indices.slice(0,2*U)}setSegmentVertexIndices(U,F,e){if(U>=this.__indices.length/2)throw new Error("Invalid line index:"+U+". Num Segments:"+this.__indices.length/2);this.__indices[2*U+0]=F,this.__indices[2*U+1]=e}getSegmentVertexIndex(U,F){return U<this.getNumSegments()?this.__indices[2*U+F]:-1}genBuffers(U){const F=super.genBuffers();let e;return e=F.numVertices<Math.pow(2,8)?new Uint8Array(this.__indices):F.numVertices<Math.pow(2,16)?new Uint16Array(this.__indices):this.__indices,F.indices=e,F}readBinary(U,F){super.loadBaseGeomBinary(U),this.setNumSegments(U.loadUInt32());const e=U.loadUInt8();1==e?this.__indices=U.loadUInt8Array():2==e?this.__indices=U.loadUInt16Array():4==e&&(this.__indices=U.loadUInt32Array()),this.emit("geomDataChanged")}toJSON(U){const F=super.toJSON(U);return U&&U.skipTopology||(F.indices=Array.from(this.__indices)),F}fromJSON(U,F){super.fromJSON(U,F),U.indices&&(this.__indices=Uint32Array.from(U.indices))}}n.register("Lines",dF);class iF extends QF{constructor(){super(),this.edgeFaces=[],this.faceEdges=[[]],this.faceCounts=[],this.__faceVertexIndices=new Uint32Array,this.__logTopologyWarnings=!1,this.__edgeAttributes=new Map,this.__faceAttributes=new Map,this.numEdges=0,this.edgeVerts=[],this.vertexEdges=[],this.edgeAngles=new Float32Array,this.edgeVecs=[]}init(){}clear(){super.clear(),this.edgeVerts=[],this.vertexEdges=[],this.numEdges=0,this.edgeAngles=new Float32Array,this.emit("geomDataTopologyChanged")}addVertexAttribute(U,F){super.addVertexAttribute(U,F),F.setMesh(this)}getFaceCounts(){return this.faceCounts}getNumFaces(){return 0==this.faceCounts.length?0:this.faceCounts.reduce(((U,F)=>U+F))}setFaceCounts(U){let F=0,e=3;for(const t of U)F+=t*e,e++;if(0==this.getNumFaces())this.__faceVertexIndices=new Uint32Array(F);else{const t=new Uint32Array(F);let Q=0,l=0;F=0,e=3,U.forEach(((U,F)=>{const n=Q+Math.min(U,this.faceCounts[F])*e;t.set(this.__faceVertexIndices.slice(Q,n),l),Q+=this.faceCounts[F]*e,l+=U*e,e++})),this.__faceVertexIndices=t}this.faceCounts=U}getFaceVertexCount(U){let F=0,e=0;return this.faceCounts.some(((t,Q)=>(F+=t,F>U&&(e=Q+3,!0)))),e}getFaceVertexOffset(U){let F=0,e=0;return this.faceCounts.some(((t,Q)=>F+t>U?(e+=(U-F)*(Q+3),!0):(F+=t,e+=t*(Q+3),!1))),e}setFaceVertexIndices(U,F){const e=this.getFaceVertexCount(U);if(F.length!=e)throw new Error(`Invalid indices for face:${U} vertexIndices:${F}. Expected ${e} indices`);const t=this.getFaceVertexOffset(U);this.__faceVertexIndices.set(F,t)}addFace(U){const F=[...this.faceCounts];if(F.length<=U.length-3){for(let e=F.length;e<U.length-3;e++)F[e]=0;F[U.length-3]=1}else F[U.length-3]++;this.setFaceCounts(F);let e=0,t=0;return this.faceCounts.some(((F,Q)=>Q+3==U.length?(e+=F-1,t+=(F-1)*(Q+3),!0):(e+=F,t+=F*(Q+3),!1))),this.__faceVertexIndices.set(U,t),e}getFaceVertexIndices(U){const F=[],e=this.getFaceVertexOffset(U),t=this.getFaceVertexCount(U);for(let U=0;U<t;U++)F.push(this.__faceVertexIndices[e+U]);return F}getFaceVertexIndex(U,F){const e=this.getFaceVertexOffset(U);return this.__faceVertexIndices[e+F]}addFaceAttribute(U,F){return F.setCount(this.getNumFaces()),this.__faceAttributes.set(U,F),F}hasFaceAttribute(U){return this.__faceAttributes.has(U)}getFaceAttribute(U){return this.__faceAttributes.get(U)}addEdgeAttribute(U,F){F.setCount(this.numEdges),this.__edgeAttributes.set(U,F)}hasEdgeAttribute(U){return this.__edgeAttributes.has(U)}getEdgeAttribute(U){return this.__edgeAttributes.get(U)}genTopologyInfo(){let U={};this.vertexEdges=[],this.edgeFaces=[],this.edgeVerts=[],this.faceEdges=[],this.numEdges=0;const F=this.positions,e=(e,t)=>{let Q=e,l=t;if(l<Q){const U=Q;Q=l,l=U}const n=Q+">"+l;if(n in U)return U[n];const a=F.getValueRef(Q),d=F.getValueRef(l).subtract(a),i={edgeIndex:this.edgeFaces.length/2,edgeVec:d};return U[n]=i,this.edgeFaces.push(-1),this.edgeFaces.push(-1),this.edgeVerts.push(Q),this.edgeVerts.push(l),this.numEdges++,i},t=(U,F,t)=>{const Q=e(U,F).edgeIndex;if(F<U){const U=2*Q+0;this.__logTopologyWarnings&&-1!=this.edgeFaces[U]&&console.warn("Edge poly 0 already set. Mesh is non-manifold."),this.edgeFaces[U]=t}else{const U=2*Q+1;this.__logTopologyWarnings&&-1!=this.edgeFaces[U]&&console.warn("Edge poly 1 already set. Mesh is non-manifold."),this.edgeFaces[U]=t}t in this.faceEdges||(this.faceEdges[t]=[]),this.faceEdges[t].push(Q),null==this.vertexEdges[U]&&(this.vertexEdges[U]=new Set),null==this.vertexEdges[F]&&(this.vertexEdges[F]=new Set),this.vertexEdges[U].add(Q),this.vertexEdges[F].add(Q)},Q=this.getNumFaces();for(let U=0;U<Q;U++){const F=this.getFaceVertexIndices(U);for(let e=0;e<F.length;e++){t(F[e],F[(e+1)%F.length],U)}}}computeFaceNormals(){const U=this.positions,F=new eF;this.addFaceAttribute("normals",F);const e=this.getNumFaces();for(let t=0;t<e;t++){const e=this.getFaceVertexIndices(t),Q=U.getValueRef(e[0]);let l=U.getValueRef(e[1]);const n=new i;for(let F=2;F<e.length;F++){const t=U.getValueRef(e[F]),a=l.subtract(Q),d=t.subtract(Q);n.addInPlace(a.cross(d).normalize()),l=t}n.lengthSquared()<Number.EPSILON||F.setValue(t,n.normalize())}}calculateEdgeAngles(){0==this.vertexEdges.length&&this.genTopologyInfo(),this.computeFaceNormals();const U=this.positions,F=this.getFaceAttribute("normals");this.edgeVecs=[],this.edgeAngles=new Float32Array(this.numEdges);for(let e=0;e<this.edgeFaces.length;e+=2){const t=this.edgeVerts[e],Q=this.edgeVerts[e+1],l=U.getValueRef(Q).subtract(U.getValueRef(t));l.normalizeInPlace(),this.edgeVecs.push(l);const n=this.edgeFaces[e],a=this.edgeFaces[e+1];if(-1==n||-1==a){this.edgeAngles[e/2]=2*Math.PI;continue}const d=F.getValueRef(n),i=F.getValueRef(a);this.edgeAngles[e/2]=d.angleTo(i)}}computeVertexNormals(U=1){this.calculateEdgeAngles();const F=this.getFaceAttribute("normals"),e=new eF;this.addVertexAttribute("normals",e);const t=(U,F)=>{e.setValue(U,F)},Q=(U,F)=>{let e,t;const Q=this.faceEdges[U];for(const U of Q)(this.edgeVerts[2*U]==F||this.edgeVerts[2*U+1]==F)&&(e?t=this.edgeVecs[U]:e=this.edgeVecs[U]);return[e,t]};for(let n=0;n<this.vertexEdges.length;n++){if(null==this.vertexEdges[n])continue;const a=this.vertexEdges[n],d=[],s=U=>{let F=!1;for(const e of d)if(F=e.includes(U),F)break;F||d.push([U])};for(const F of a){const e=this.edgeFaces[2*F],t=this.edgeFaces[2*F+1];if(-1!=e&&-1!=t&&this.edgeAngles[F]<U){let U=-1,F=-1;for(let Q=0;Q<d.length;Q++)-1==U&&d[Q].includes(e)&&(U=Q),-1==F&&d[Q].includes(t)&&(F=Q);-1==U&&-1==F?d.push([e,t]):-1!=U&&-1!=F?U!=F&&(d[U]=d[U].concat(d[F]),d.splice(F,1)):(-1==U&&d[F].push(e),-1==F&&d[U].push(t))}else-1!=e&&s(e),-1!=t&&s(t)}d.sort(((U,F)=>U.length<F.length?1:U.length>F.length?-1:0));let R=!0;for(const U of d){const a=new i;for(const e of U){const U=Q(e,n);let t;U[0]&&U[1]?(t=U[0].angleTo(U[1]),a.addInPlace((l=e,F.getValueRef(l)).scale(t))):console.warn("variable weight is undefined because faceEdges[0] or faceEdges[1] is undefined")}a.normalizeInPlace(),R?(t(n,a),R=!1):e.setSplitVertexValues(n,U,a.asArray())}}var l;return e}computeHardEdgesIndices(U=1){0==this.edgeVerts.length&&this.calculateEdgeAngles();const F=[],e=U=>{F.push(this.edgeVerts[U]),F.push(this.edgeVerts[U+1])};for(let F=0;F<this.edgeAngles.length;F++)this.edgeAngles[F]>U&&e(2*F);return Uint32Array.from(F)}genBuffers(U){const F={};let e=0;for(const[,U]of this.__vertexAttributes){const t=U.getSplits();for(const U in t){U in F||(F[U]={});const Q=t[U];for(const t in Q){const Q=parseInt(t);Q in F[U]||(F[U][Q]=e,e++)}}}const t=this.positions.getCount(),Q=t+e;let l;U&&0==U.includeIndices||(l=this.generateTriangulatedIndices(Q,t,F));const n={};for(const[U,t]of this.__vertexAttributes){let Q;Q=0==e?t.asArray():t.generateSplitValues(F,e);const l=t.stride,a=Q.length/l;n[U]={values:Q,count:a,dimension:l,normalized:"normals"==U,dataType:t.getDataTypeName()}}return{numVertices:this.numVertices(),numRenderVerts:Q,indices:l,attrBuffers:n}}computeNumTriangles(){let U=3,F=0;for(const e of this.faceCounts)F+=e*(U-2),U++;return F}generateTriangulatedIndices(U,F,e){const t=this.computeNumTriangles();let Q;Q=U<Math.pow(2,8)?new Uint8Array(3*t):U<Math.pow(2,16)?new Uint16Array(3*t):new Uint32Array(3*t);let l=0;const n=function(U,t){U in e&&t in e[U]&&(U=F+e[U][t]),Q[l]=U,l++},a=this.getNumFaces();for(let U=0;U<a;U++){const F=this.getFaceVertexIndices(U);for(let e=0;e<F.length;e++)e>=3&&(n(F[0],U),n(F[e-1],U)),n(F[e],U)}return Q}readBinary(U,F){super.loadBaseGeomBinary(U),this.setFaceCounts(Array.from(U.loadUInt32Array()));const e=this.getNumFaces(),t=U.loadUInt8Array(e),Q=U.loadSInt32Vec2(),l=U.loadUInt8();let n;if(1==l)n=U.loadUInt8Array();else if(2==l)n=U.loadUInt16Array();else{if(4!=l)throw Error("faceVertexIndexDeltas undefined");n=U.loadUInt32Array()}let a=3,d=0;const i=this.faceCounts.map(((U,F)=>{const e=d;return d+=U*a,a++,e}));let s=0,R=0;const B=[];for(let U=0;U<e;U++){const F=t[U],e=i[F],l=F+3;B[U]=e;for(let F=0;F<l;F++){const t=e+F,l=n[s+F]+Q.x;if(0==U)this.__faceVertexIndices[t]=l;else{let e=B[U-1];e+=F<R?F:R-1,this.__faceVertexIndices[t]=this.__faceVertexIndices[e]+l}}s+=l,i[F]+=l,R=l}this.hasVertexAttribute("normals")||this.computeVertexNormals(),this.emit("geomDataChanged")}toJSON(U){const F=super.toJSON(U);return U&&U.skipTopology||(F.faceCounts=Array.from(this.faceCounts),F.faceVertexIndices=Array.from(this.__faceVertexIndices)),F}fromJSON(U,F){super.fromJSON(U,F),U.faceCounts&&(this.faceCounts=U.faceCounts),U.faceVertexIndices&&(this.__faceVertexIndices=Uint32Array.from(U.faceVertexIndices))}}n.register("Mesh",iF);class sF extends k{constructor(U){super(),this.name=U.name,this.__buffers=U.geomBuffers,this.__buffers.attrBuffers,this.boundingBox=new W,this.boundingBox.p0.__data=U.bbox.p0.__data,this.boundingBox.p1.__data=U.bbox.p1.__data,this.__metaData=new Map}getNumVertices(){return this.__buffers.numVertices}getBoundingBox(){return this.boundingBox}genBuffers(){return this.__buffers}getMetadata(U){return this.__metaData.get(U)}hasMetadata(U){return this.__metaData.has(U)}setMetadata(U,F){this.__metaData.set(U,F)}deleteMetadata(U){this.__metaData.delete(U)}}class RF extends sF{constructor(U){super(U)}}class BF extends sF{constructor(U){super(U)}getNumLineSegments(){return this.__buffers.indices.length/2}}class VF extends sF{constructor(U){super(U)}getNumTriangles(){return this.__buffers.indices.length/3}}class rF extends aF{constructor(){super(),this.dirtyTopology=!0,this.dirtyVertices=!0,this.topologyParams=[]}parameterValueChanged(U){this.setBoundingBoxDirty(),this.topologyParams.includes(U.param.getName())?(this.dirtyTopology=!0,this.emit("geomDataTopologyChanged")):(this.dirtyVertices=!0,this.setBoundingBoxDirty(),this.emit("geomDataChanged")),super.parameterValueChanged(U)}update(){this.dirtyTopology?(this.rebuild(),this.dirtyTopology=!1,this.dirtyVertices=!1,this.rebuild()):this.dirtyVertices&&(this.dirtyVertices=!1,this.resize(),this.dirtyVertices=!1)}getBoundingBox(){return this.update(),super.getBoundingBox()}getNumVertices(){return this.update(),super.getNumVertices()}genBuffers(U){return this.update(),super.genBuffers(U)}toJSON(U){U||(U={}),U.skipTopology=!0,U.skipAttributes=["positions","normals","texCoords"];const F=super.toJSON(U);return U.skipTopology=!1,U.skipAttributes=[],F}}class hF extends dF{constructor(){super(),this.dirtyTopology=!0,this.dirtyVertices=!0,this.topologyParams=[]}parameterValueChanged(U){this.setBoundingBoxDirty(),this.topologyParams.includes(U.param.getName())?(this.dirtyTopology=!0,this.emit("geomDataTopologyChanged")):(this.dirtyVertices=!0,this.setBoundingBoxDirty(),this.emit("geomDataChanged")),super.parameterValueChanged(U)}update(){this.dirtyTopology?(this.rebuild(),this.dirtyTopology=!1,this.dirtyVertices=!1,this.rebuild()):this.dirtyVertices&&(this.resize(),this.dirtyVertices=!1,this.resize())}getBoundingBox(){return this.update(),super.getBoundingBox()}getNumVertices(){return this.update(),super.getNumVertices()}genBuffers(U){return this.update(),super.genBuffers()}toJSON(U){U||(U={}),U.skipTopology=!0,U.skipAttributes=["positions","normals","texCoords"];const F=super.toJSON(U);return U.skipTopology=!1,U.skipAttributes=[],F}fromJSON(U,F){super.fromJSON(U,F)}}class oF extends iF{constructor(){super(),this.dirtyTopology=!0,this.dirtyVertices=!0,this.topologyParams=[]}parameterValueChanged(U){this.setBoundingBoxDirty(),this.topologyParams.includes(U.param.getName())?(this.dirtyTopology=!0,this.emit("geomDataTopologyChanged")):(this.dirtyVertices=!0,this.setBoundingBoxDirty(),this.emit("geomDataChanged")),super.parameterValueChanged(U)}update(){this.dirtyTopology?(this.vertexEdges=[],this.dirtyTopology=!1,this.dirtyVertices=!1,this.rebuild()):this.dirtyVertices&&(this.dirtyVertices=!1,this.resize())}getBoundingBox(){return this.update(),super.getBoundingBox()}getNumVertices(){return this.update(),super.getNumVertices()}computeVertexNormals(U=1){return this.update(),super.computeVertexNormals(U)}computeHardEdgesIndices(U=1){return this.update(),super.computeHardEdgesIndices(U)}genBuffers(U){return this.update(),super.genBuffers(U)}toJSON(U){U||(U={}),U.skipTopology=!0,U.skipAttributes=["positions","normals","texCoords"];const F=super.toJSON(U);return U.skipTopology=!1,U.skipAttributes=[],F}}class JF extends rF{constructor(U=1,F=1,e=1,t=1,Q=!1){if(super(),this.topologyParams=[],isNaN(U)||isNaN(F)||isNaN(e)||isNaN(t))throw new Error("Invalid geom args");this.sizeXParam=this.addParameter(new hU("X",U)),this.sizeYParam=this.addParameter(new hU("Y",F)),this.divisionsXParam=this.addParameter(new hU("XDivisions",e)),this.divisionsYParam=this.addParameter(new hU("YDivisions",t)),Q&&this.addVertexAttribute("texCoords",new tF),this.topologyParams.push("XDivisions"),this.topologyParams.push("YDivisions")}rebuild(){const U=this.divisionsXParam.value,F=this.divisionsYParam.value;this.setNumVertices(U*F);const e=this.getVertexAttribute("texCoords");if(e)for(let t=0;t<F;t++){const Q=t/(F-1);for(let F=0;F<U;F++){const l=F/(U-1);e.getValueRef(t*U+F).set(l,Q)}}this.resize()}resize(){const U=this.divisionsXParam.value,F=this.divisionsYParam.value,e=this.sizeXParam.value,t=this.sizeYParam.value,Q=this.getVertexAttribute("positions");if(Q)for(let l=0;l<F;l++){const n=(l/(F-1)-.5)*t;for(let F=0;F<U;F++){const t=(F/(U-1)-.5)*e;Q.getValueRef(l*U+F).set(t,n,0)}}}}n.register("PointGrid",JF);class ZF extends hF{constructor(U=1,F=1){if(super(),isNaN(U)||isNaN(F))throw new Error("Invalid geom args");this.sizeXParam=this.addParameter(new hU("X",U)),this.sizeXParam.on("valueChanged",this.resize.bind(this)),this.sizeYParam=this.addParameter(new hU("Y",F)),this.sizeYParam.on("valueChanged",this.resize.bind(this)),this.rebuild()}rebuild(){this.setNumVertices(4),this.setNumSegments(4),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,1,2),this.setSegmentVertexIndices(2,2,3),this.setSegmentVertexIndices(3,3,0),this.resize(!1)}resize(){const U=this.sizeXParam.value,F=this.sizeYParam.value,e=this.getVertexAttribute("positions");e&&(e.getValueRef(0).set(-.5*U,-.5*F,0),e.getValueRef(1).set(.5*U,-.5*F,0),e.getValueRef(2).set(.5*U,.5*F,0),e.getValueRef(3).set(-.5*U,.5*F,0))}}n.register("Rect",ZF);class cF extends hF{constructor(U=1,F=32,e=2*Math.PI){if(super(),this.topologyParams=[],isNaN(U)||isNaN(F))throw new Error("Invalid geom args");this.radiusParam=this.addParameter(new hU("Radius",U)),this.angleParam=this.addParameter(new hU("Angle",e)),this.sidesParam=this.addParameter(new hU("Sides",F>=3?F:3,[3,200],1)),this.topologyParams.push("Sides")}rebuild(){const U=this.sidesParam.value;this.setNumVertices(U);const F=this.angleParam.value<2*Math.PI;F?this.setNumSegments(U-1):this.setNumSegments(U);for(let e=0;e<(F?U-1:U);e++)this.setSegmentVertexIndices(e,e,(e+1)%U);this.resize()}resize(){const U=this.radiusParam.value,F=this.sidesParam.value,e=this.angleParam.value/F,t=this.getVertexAttribute("positions");if(t)for(let Q=0;Q<F;Q++)t.getValueRef(Q).set(Math.cos(e*Q)*U,Math.sin(e*Q)*U,0)}}n.register("Circle",cF);class mF extends hF{constructor(U=1){if(super(),isNaN(U))throw new Error("Invalid geom args");this.sizeParam=this.addParameter(new hU("Size",U))}rebuild(){this.setNumVertices(6),this.setNumSegments(3),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,2,3),this.setSegmentVertexIndices(2,4,5),this.resize()}resize(){const U=this.sizeParam.value,F=this.getVertexAttribute("positions");F&&(F.getValueRef(0).set(-.5*U,0,0),F.getValueRef(1).set(.5*U,0,0),F.getValueRef(2).set(0,.5*U,0),F.getValueRef(3).set(0,-.5*U,0),F.getValueRef(4).set(0,0,.5*U),F.getValueRef(5).set(0,0,-.5*U))}}n.register("Cross",mF);class SF extends hF{constructor(U=1,F=1,e=1,t=!1){super(),this.sizeXParam=this.addParameter(new hU("X",U)),this.sizeYParam=this.addParameter(new hU("Y",F)),this.sizeZParam=this.addParameter(new hU("Z",e)),this.baseZAtZeroParam=this.addParameter(new JU("BaseZAtZero",t))}rebuild(){this.setNumVertices(8),this.setNumSegments(12),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,1,2),this.setSegmentVertexIndices(2,2,3),this.setSegmentVertexIndices(3,3,0),this.setSegmentVertexIndices(4,4,5),this.setSegmentVertexIndices(5,5,6),this.setSegmentVertexIndices(6,6,7),this.setSegmentVertexIndices(7,7,4),this.setSegmentVertexIndices(8,0,4),this.setSegmentVertexIndices(9,1,5),this.setSegmentVertexIndices(10,2,6),this.setSegmentVertexIndices(11,3,7),this.resize()}resize(){const U=this.sizeXParam.value,F=this.sizeYParam.value,e=this.sizeZParam.value,t=this.baseZAtZeroParam.value,Q=this.getVertexAttribute("positions");if(Q){let l=.5;t&&(l=1),Q.getValueRef(0).set(.5*U,-.5*F,l*e),Q.getValueRef(1).set(.5*U,.5*F,l*e),Q.getValueRef(2).set(-.5*U,.5*F,l*e),Q.getValueRef(3).set(-.5*U,-.5*F,l*e),l=-.5,t&&(l=0),Q.getValueRef(4).set(.5*U,-.5*F,l*e),Q.getValueRef(5).set(.5*U,.5*F,l*e),Q.getValueRef(6).set(-.5*U,.5*F,l*e),Q.getValueRef(7).set(-.5*U,-.5*F,l*e)}}}n.register("LinesCuboid",SF);class WF extends hF{constructor(U=1,F=1,e=10,t=10,Q=!1){if(super(),this.topologyParams=[],isNaN(U)||isNaN(F)||isNaN(e)||isNaN(t))throw new Error("Invalid geom args");this.xParam=this.addParameter(new hU("X",U)),this.yParam=this.addParameter(new hU("Y",F)),this.xDivisionsParam=this.addParameter(new hU("XDivisions",e)),this.yDivisionsParam=this.addParameter(new hU("YDivisions",t)),this.skipCenterLinesParam=this.addParameter(new JU("SkipCenterLines",Q)),this.topologyParams.push("XDivisions"),this.topologyParams.push("YDivisions"),this.topologyParams.push("SkipCenterLines")}rebuild(){const U=this.xDivisionsParam.value,F=this.yDivisionsParam.value,e=this.skipCenterLinesParam.value&&U%2==0&&F%2==0;this.setNumVertices(2*(U+F+2-(e?1:0))),this.setNumSegments(U+F+2-(e?1:0));let t=0;for(let F=0;F<=U;F++){if(e&&F==U/2)continue;const Q=2*t,l=2*t+1;this.setSegmentVertexIndices(t,Q,l),t++}for(let Q=0;Q<=F;Q++){if(e&&Q==U/2)continue;const F=2*t,l=2*t+1;this.setSegmentVertexIndices(t,F,l),t++}this.resize()}resize(){const U=this.getVertexAttribute("positions"),F=this.xDivisionsParam.value,e=this.yDivisionsParam.value,t=this.xParam.value,Q=this.yParam.value,l=this.skipCenterLinesParam.value&&F%2==0&&e%2==0;let n=0;for(let e=0;e<=F;e++){if(l&&e==F/2)continue;const a=2*n,d=2*n+1,i=(e/F-.5)*t;U&&(U.getValueRef(a).set(i,-.5*Q,0),U.getValueRef(d).set(i,.5*Q,0)),n++}for(let a=0;a<=e;a++){if(l&&a==F/2)continue;const d=2*n,i=2*n+1,s=(a/e-.5)*Q;U&&(U.getValueRef(d).set(-.5*t,s,0),U.getValueRef(i).set(.5*t,s,0)),n++}}}n.register("Grid",WF);class EF extends oF{constructor(U=.5,F=1,e=32,t=!0,Q=!0,l=!0){if(super(),this.topologyParams=[],isNaN(U)||isNaN(F)||isNaN(e))throw new Error("Invalid geom args");this.radiusParam=this.addParameter(new hU("Radius",U)),this.heightParam=this.addParameter(new hU("Height",F)),this.detailParam=this.addParameter(new hU("Detail",e>=3?e:3,[3,200],1)),this.capParam=this.addParameter(new JU("Cap",t)),Q&&this.addVertexAttribute("normals",new eF),l&&this.addVertexAttribute("texCoords",new tF),this.topologyParams.push("Detail"),this.topologyParams.push("Cap")}rebuild(){const U=this.detailParam.value,F=this.radiusParam.value,e=this.heightParam.value,t=this.capParam.value;let Q=U+1;t&&(Q+=1),this.setNumVertices(Q);const l=U,n=U+1,a=this.getVertexAttribute("positions");if(a){a.getValueRef(l).set(0,0,e);for(let e=0;e<U;e++){const t=-e/U*2*Math.PI;a.getValueRef(e).set(F*Math.cos(t),F*Math.sin(t),0)}t&&a.getValueRef(n).set(0,0,0)}this.setFaceCounts([U+(t?U:0)]);for(let F=0;F<U;F++){const e=(F+1)%U;this.setFaceVertexIndices(F,[e,F,l])}if(t)for(let F=0;F<U;F++){const e=(F+1)%U;this.setFaceVertexIndices(U+F,[F,e,n])}const i=this.getVertexAttribute("texCoords");if(i){let F=0;for(let e=0;e<U;e++)"setFaceVertexValue"in i&&(i.setFaceVertexValue(F,0,new d((e+1)/U,0)),i.setFaceVertexValue(F,1,new d(e/U,0)),i.setFaceVertexValue(F,2,new d((e+.5)/U,1)));if(t)for(let e=0;e<U;e++)i.setFaceVertexValue(F,0,new d(e/U,0)),i.setFaceVertexValue(F,1,new d((e+1)/U,0)),i.setFaceVertexValue(F,2,new d((e+.5)/U,1)),F++}this.resize()}resize(){const U=this.detailParam.value,F=this.radiusParam.value,e=this.heightParam.value,t=U,Q=U+1,l=this.getVertexAttribute("positions");if(l){l.getValueRef(t).set(0,0,e);for(let e=0;e<U;e++){const t=-e/U*2*Math.PI;l.getValueRef(e).set(F*Math.cos(t),F*Math.sin(t),0)}this.capParam.value&&l.getValueRef(Q).set(0,0,0)}this.dirtyTopology=!1,this.dirtyVertices=!1;this.getVertexAttribute("normals")&&this.computeVertexNormals()}}n.register("Cone",EF);class pF extends oF{constructor(U=1,F=1,e=1,t=!1){if(super(),isNaN(U)||isNaN(F)||isNaN(e))throw new Error("Invalid geom args");this.sizeXParam=this.addParameter(new hU("X",U)),this.sizeYParam=this.addParameter(new hU("Y",F)),this.sizeZParam=this.addParameter(new hU("Z",e)),this.baseZAtZeroParam=this.addParameter(new JU("BaseZAtZero",t)),this.setFaceCounts([0,6]),this.setFaceVertexIndices(0,[0,1,2,3]),this.setFaceVertexIndices(1,[7,6,5,4]),this.setFaceVertexIndices(2,[1,0,4,5]),this.setFaceVertexIndices(3,[3,2,6,7]),this.setFaceVertexIndices(4,[0,3,7,4]),this.setFaceVertexIndices(5,[2,1,5,6]),this.setNumVertices(8),this.addVertexAttribute("normals",new eF)}rebuild(){const U=this.getVertexAttribute("normals");if(U)for(let F=0;F<6;F++){let e;switch(F){case 0:e=new i(0,0,1);break;case 1:e=new i(0,0,-1);break;case 2:e=new i(1,0,0);break;case 3:e=new i(-1,0,0);break;case 4:e=new i(0,-1,0);break;default:e=new i(0,1,0)}U.setFaceVertexValue(F,0,e),U.setFaceVertexValue(F,1,e),U.setFaceVertexValue(F,2,e),U.setFaceVertexValue(F,3,e)}this.resize()}resize(){const U=this.sizeXParam.value,F=this.sizeYParam.value,e=this.sizeZParam.value,t=this.baseZAtZeroParam.value;let Q=.5;const l=this.getVertexAttribute("positions");t&&(Q=1),l&&(l.getValueRef(0).set(.5*U,-.5*F,Q*e),l.getValueRef(1).set(.5*U,.5*F,Q*e),l.getValueRef(2).set(-.5*U,.5*F,Q*e),l.getValueRef(3).set(-.5*U,-.5*F,Q*e),Q=-.5,t&&(Q=0),l.getValueRef(4).set(.5*U,-.5*F,Q*e),l.getValueRef(5).set(.5*U,.5*F,Q*e),l.getValueRef(6).set(-.5*U,.5*F,Q*e),l.getValueRef(7).set(-.5*U,-.5*F,Q*e))}}n.register("Cuboid",pF);class uF extends oF{constructor(U=.5,F=1,e=32,t=2,Q=!0,l=!1){if(super(),this.topologyParams=[],isNaN(U)||isNaN(F)||isNaN(e)||isNaN(t))throw new Error("Invalid geom args");this.radiusParam=this.addParameter(new hU("Radius",U)),this.heightParam=this.addParameter(new hU("Height",F)),this.sidesParam=this.addParameter(new hU("Sides",e>=3?e:3,[3,200],1)),this.loopsParam=this.addParameter(new hU("Loops",t>=2?t:2,[1,200],1)),this.capsParam=this.addParameter(new JU("Caps",Q)),this.baseZAtZeroParam=this.addParameter(new JU("BaseZAtZero",l)),this.addVertexAttribute("texCoords",new tF),this.addVertexAttribute("normals",new eF),this.topologyParams.push("Sides"),this.topologyParams.push("Loops"),this.topologyParams.push("Caps")}rebuild(){const U=this.sidesParam.value,F=this.loopsParam.value,e=this.capsParam.value;let t=U*F;e&&(t+=2),this.setNumVertices(t),e?this.setFaceCounts([2*U,U]):this.setFaceCounts([0,U]);let Q=0;if(e){for(let F=0;F<U;F++){const e=t-1,l=F,n=(F+1)%U;this.setFaceVertexIndices(Q++,[e,l,n])}for(let e=0;e<U;e++){const l=U*(F-1)+e,n=t-2,a=U*(F-1)+(e+1)%U;this.setFaceVertexIndices(Q++,[l,n,a])}}for(let e=0;e<F-1;e++)for(let F=0;F<U;F++){const t=U*e+(F+1)%U,l=U*e+F,n=U*(e+1)+F,a=U*(e+1)+(F+1)%U;this.setFaceVertexIndices(Q++,[t,l,n,a])}const l=this.getVertexAttribute("normals");if(l){if(Q=0,e){const F=new i(0,0,-1);for(let e=0;e<U;e++)l.setFaceVertexValue(Q,0,F),l.setFaceVertexValue(Q,1,F),l.setFaceVertexValue(Q,2,F),Q++;F.set(0,0,1);for(let e=0;e<U;e++)l.setFaceVertexValue(Q,0,F),l.setFaceVertexValue(Q,1,F),l.setFaceVertexValue(Q,2,F),Q++}for(let e=0;e<F-1;e++)for(let F=0;F<U;F++){let e=F/U*2*Math.PI;const t=new i(Math.sin(e),Math.cos(e),0);l.setFaceVertexValue(Q,0,t),l.setFaceVertexValue(Q,1,t),e=(F+1)/U*2*Math.PI;const n=new i(Math.sin(e),Math.cos(e),0);l.setFaceVertexValue(Q,2,n),l.setFaceVertexValue(Q,3,n),Q++}}const n=this.getVertexAttribute("texCoords");if(n){if(Q=0,e){for(let F=0;F<U;F++)n.setFaceVertexValue(Q,0,new d(F/U,0)),n.setFaceVertexValue(Q,1,new d((F+1)/U,0)),n.setFaceVertexValue(Q,2,new d((F+.5)/U,1)),Q++;for(let F=0;F<U;F++)n.setFaceVertexValue(Q,0,new d(F/U,0)),n.setFaceVertexValue(Q,1,new d((F+1)/U,0)),n.setFaceVertexValue(Q,2,new d((F+.5)/U,1)),Q++}for(let F=0;F<U;F++)n.setFaceVertexValue(Q,0,new d((F+1)/U,0)),n.setFaceVertexValue(Q,2,new d((F+1)/U,1)),n.setFaceVertexValue(Q,1,new d(F/U,0)),n.setFaceVertexValue(Q,3,new d(F/U,1)),Q++}this.resize()}resize(){const U=this.sidesParam.value,F=this.loopsParam.value,e=this.radiusParam.value,t=this.heightParam.value,Q=this.capsParam.value,l=this.baseZAtZeroParam.value;let n=U*F;Q&&(n+=2);let a=0,d=.5;l&&(d=0);const i=this.getVertexAttribute("positions");if(i){for(let Q=0;Q<F;Q++){const l=Q/(F-1)*t-t*d;for(let F=0;F<U;F++){const t=F/U*2*Math.PI;i.getValueRef(a).set(Math.sin(t)*e,Math.cos(t)*e,l),a++}}Q&&(i.getValueRef(n-1).set(0,0,t*(l?0:-.5)),i.getValueRef(n-2).set(0,0,t*(l?1:.5)))}this.dirtyTopology=!1,this.dirtyVertices=!1,this.computeVertexNormals()}}n.register("Cylinder",uF);class NF extends oF{constructor(U=.5,F=32){if(super(),this.topologyParams=[],isNaN(U)||isNaN(F))throw new Error("Invalid geom args");this.radiusParam=this.addParameter(new hU("Radius",U)),this.sidesParam=this.addParameter(new hU("Sides",F>=3?F:3,[3,200],1)),this.addVertexAttribute("texCoords",new tF),this.addVertexAttribute("normals",new eF),this.topologyParams.push("Sides")}rebuild(){const U=this.sidesParam.value;this.setNumVertices(U+1),this.setFaceCounts([U]);const F=this.getVertexAttribute("positions");F&&F.getValueRef(0).set(0,0,0);for(let F=0;F<U;F++){const e=F%U+1,t=(F+1)%U+1;this.setFaceVertexIndices(F,[0,e,t])}const e=this.getVertexAttribute("normals");if(e){const F=new i(0,0,1);e.setValue(0,F);for(let t=0;t<U;t++)e.setValue(t+1,F)}const t=this.getVertexAttribute("texCoords");if(t){t.getValueRef(0).set(.5,.5);for(let F=0;F<U;F++){const e=F/U*2*Math.PI;t.getValueRef(F+1).set(.5*Math.sin(e)+.5,.5*Math.cos(e)+.5)}}this.resize()}resize(){const U=this.sidesParam.value,F=this.radiusParam.value,e=this.getVertexAttribute("positions");if(e)for(let t=0;t<U;t++){const Q=t/U*2*Math.PI;e.getValueRef(t+1).set(Math.sin(Q)*F,Math.cos(Q)*F,0)}}}n.register("Disc",NF);class kF extends oF{constructor(U=1,F=1,e=1,t=1,Q=!0,l=!0){if(super(),this.topologyParams=[],isNaN(U)||isNaN(F)||isNaN(e)||isNaN(t))throw new Error("Invalid geom args");this.sizeXParam=this.addParameter(new hU("SizeX",U)),this.sizeYParam=this.addParameter(new hU("SizeY",F)),this.detailXParam=this.addParameter(new hU("DetailX",e)),this.detailYParam=this.addParameter(new hU("DetailY",t)),Q&&this.addVertexAttribute("normals",new eF),l&&this.addVertexAttribute("texCoords",new tF),this.topologyParams.push("DetailX"),this.topologyParams.push("DetailY")}rebuild(){const U=this.detailXParam.value,F=this.detailYParam.value;this.setNumVertices((U+1)*(F+1)),this.setFaceCounts([0,U*F]);let e=0;for(let t=0;t<F;t++)for(let F=0;F<U;F++){const Q=(U+1)*(t+1)+F,l=(U+1)*t+F,n=(U+1)*t+(F+1),a=(U+1)*(t+1)+(F+1);this.setFaceVertexIndices(e,[Q,l,n,a]),e+=1}let t=0;const Q=this.getVertexAttribute("normals");if(Q)for(let e=0;e<=F;e++)for(let F=0;F<=U;F++)Q.getValueRef(t).set(0,0,1),t++;t=0;const l=this.getVertexAttribute("texCoords");if(l)for(let e=0;e<=F;e++){const Q=e/F;for(let F=0;F<=U;F++){const e=F/U;l.getValueRef(t).set(e,Q),t++}}this.resize()}resize(){const U=this.sizeXParam.value,F=this.sizeYParam.value,e=this.detailXParam.value,t=this.detailYParam.value,Q=this.getVertexAttribute("positions");if(!Q)return;let l=0;for(let n=0;n<=t;n++){const a=(n/t-.5)*F;for(let F=0;F<=e;F++){const t=(F/e-.5)*U;Q.getValueRef(l).set(t,a,0),l++}}}}n.register("Plane",kF);class bF extends oF{constructor(U=1,F=12,e=12,t=!0,Q=!0){if(super(),this.radiusParam=new hU("Radius",1),this.sidesParam=new hU("Sides",12,[3,200],1),this.loopsParam=new hU("Loops",6,[3,200],1),isNaN(U)||isNaN(F)||isNaN(e))throw new Error("Invalid geom args");this.addParameter(this.radiusParam),this.addParameter(this.sidesParam),this.addParameter(this.loopsParam),this.radiusParam.value=U,this.sidesParam.value=F,this.loopsParam.value=e,t&&this.addVertexAttribute("normals",new eF),Q&&this.addVertexAttribute("texCoords",new tF),this.topologyParams.push("Sides"),this.topologyParams.push("Loops")}rebuild(){const U=this.radiusParam.value,F=this.sidesParam.value,e=this.loopsParam.value,t=2+F*e,Q=2*F,l=F*e;this.setNumVertices(t),this.setFaceCounts([Q,l]);const n=this.getVertexAttribute("positions"),a=this.getVertexAttribute("normals"),s=new i(0,0,1);let R=0;if(!n)return;n.getValueRef(R).set(0,0,U),a&&a.getValueRef(R).set(0,0,1),R++;for(let t=0;t<e;t++){const Q=(t+1)/(e+1)*Math.PI;for(let e=0;e<F;e++){const t=-e/F*2*Math.PI;s.set(Math.sin(Q)*Math.cos(t),Math.sin(Q)*Math.sin(t),Math.cos(Q)),n.getValueRef(R).setFromOther(s.scale(U)),a&&a.getValueRef(R).setFromOther(s),R++}}n.getValueRef(R).set(0,0,-U),a&&a.getValueRef(R).set(0,0,-1),R++;const B=this.getVertexAttribute("texCoords");let V=0;for(let U=0;U<F;U++){const t=0,Q=(U+1)%F+1,l=U+1;if(this.setFaceVertexIndices(V,[t,Q,l]),B){const t=new d(.5,0),Q=new d((U+1)/(F-1),1/(e+1)),l=new d(U/(F-1),1/(e+1));B.setFaceVertexValue(V,0,t),B.setFaceVertexValue(V,1,Q),B.setFaceVertexValue(V,2,l)}V++}for(let U=0;U<F;U++){const Q=t-1,l=F*(e-1)+(U+1)%F+1,n=F*(e-1)+U+1;if(this.setFaceVertexIndices(V,[Q,n,l]),B){const t=new d(.5,1),Q=new d((U+1)/(F-1),1-1/(e+1)),l=new d(U/(F-1),1-1/(e+1));B.setFaceVertexValue(V,0,t),B.setFaceVertexValue(V,1,Q),B.setFaceVertexValue(V,2,l)}V++}for(let U=0;U<e-1;U++)for(let t=0;t<F;t++){const Q=F*U+t+1,l=F*U+(t+1)%F+1,n=F*(U+1)+(t+1)%F+1,a=F*(U+1)+t+1;this.setFaceVertexIndices(V,[Q,l,n,a]),B&&(B.setFaceVertexValue(V,0,new d(t/F,(U+1)/e)),B.setFaceVertexValue(V,1,new d((t+1)/F,(U+1)/e)),B.setFaceVertexValue(V,2,new d((t+1)/F,(U+2)/e)),B.setFaceVertexValue(V,3,new d(t/F,(U+2)/e))),V++}}resize(){const U=this.radiusParam.value,F=this.sidesParam.value,e=this.loopsParam.value;if(!F||!e)return void console.warn("resize() failed");const t=this.getVertexAttribute("positions"),Q=this.getVertexAttribute("normals");let l=0;const n=new i(0,0,1);t.getValueRef(l).set(0,0,U),Q&&Q.getValueRef(l).set(0,0,1),l++;for(let a=0;a<e;a++){const d=(a+1)/(e+1)*Math.PI;for(let e=0;e<F;e++){const a=-e/F*2*Math.PI;n.set(Math.sin(d)*Math.cos(a),Math.sin(d)*Math.sin(a),Math.cos(d)),t.getValueRef(l).setFromOther(n.scale(U)),Q&&Q.getValueRef(l).setFromOther(n),l++}}t.getValueRef(l).set(0,0,-U),Q&&Q.getValueRef(l).set(0,0,-1),l++}}n.register("Sphere",bF);class CF extends oF{constructor(U=.5,F=3,e=32,t=2*Math.PI){if(super(),isNaN(U)||isNaN(F)||isNaN(e))throw new Error("Invalid geom args");this.innerRadiusParam=this.addParameter(new hU("InnerRadius",U)),this.outerRadiusParam=this.addParameter(new hU("OuterRadius",F)),this.detailParam=this.addParameter(new hU("Detail",e>=3?e:3,[3,200],1)),this.arcAngleParam=this.addParameter(new hU("ArcAngle",t)),this.addVertexAttribute("texCoords",new tF),this.addVertexAttribute("normals",new eF),this.topologyParams.push("Detail"),this.topologyParams.push("ArcAngle")}rebuild(){const U=this.arcAngleParam.value<2*Math.PI,F=this.detailParam.value,e=F,t=2*F+(U?1:0),Q=e*t;this.setNumVertices(Q),this.setFaceCounts([0,e*t]);const l=this.getVertexAttribute("texCoords");if(l){let F=0;for(let Q=0;Q<(U?t-1:t);Q++)for(let U=0;U<e;U++){const n=(Q+1)%t,a=(U+1)%e,i=e*Q+U,s=e*Q+a,R=e*n+a,B=e*n+U;this.setFaceVertexIndices(F,[i,s,R,B]),l.setFaceVertexValue(F,0,new d(Q/t,U/t)),l.setFaceVertexValue(F,1,new d(Q/t,(U+1)/t)),l.setFaceVertexValue(F,2,new d((Q+1)/t,(U+1)/t)),l.setFaceVertexValue(F,3,new d((Q+1)/t,U/t)),F++}}this.resize()}resize(){const U=this.innerRadiusParam.value,F=this.outerRadiusParam.value,e=this.arcAngleParam.value,t=this.detailParam.value,Q=e<2*Math.PI,l=t,n=2*t+(Q?1:0),a=this.getVertexAttribute("positions"),d=this.getVertexAttribute("normals");if(!a||!d)return;let i=0;for(let t=0;t<n;t++){const s=-t/(Q?n-1:n)*e,R=Math.cos(s),B=Math.sin(s);for(let e=0;e<l;e++){const t=e/l*2*Math.PI,Q=Math.sin(t),n=Math.cos(t),s=F+n*U;a.getValueRef(i).set(R*s,B*s,U*Q),d.getValueRef(i).set(R*n,B*n,Q),i++}}}}n.register("Torus",CF);class TF extends KU{constructor(U){super(U),this.__data=new Uint8Array(4),null==U&&(U=this.constructor.name),this.__name=U,this.format="RGBA",this.type="UNSIGNED_BYTE",this.__loaded=!1,this.width=1,this.height=1}isLoaded(){return this.__loaded}isStream(){return!1}setData(U,F,e){this.__data!=e&&(this.width=U,this.height=F,this.__data=e,this.__loaded?this.emit("updated"):(this.__loaded=!0,this.emit("loaded")))}getParams(){const U=super.getParams();return U.data=this.__data,U}}n.register("DataImage2D",TF),n.register("DataImage",TF);const GF={};class XF extends KU{constructor(U,F="",e={}){super(U),this.__data=null,this.type="UNSIGNED_BYTE",this.crossOrigin="anonymous",this.loaded=!1,F&&""!=F&&this.load(F)}setCrossOrigin(U){this.crossOrigin=U}getDOMElement(){return this.__data}load(U,F="RGB"){return new Promise(((e,t)=>{if(!F){const e=U.lastIndexOf(".");if(-1!=e){".png"==U.substring(e).toLowerCase()&&(F="RGBA")}}this.format=F,this.loaded=!1;const Q=()=>{this.url=U,this.width=this.__data.width,this.height=this.__data.height,this.loaded=!0,this.emit("loaded"),e()};U in GF?(this.__data=GF[U],this.__data.complete?Q():(this.__data.addEventListener("load",Q),this.__data.addEventListener("error",t))):(this.__data=new Image,this.__data.crossOrigin=this.crossOrigin,this.__data.src=U,this.__data.addEventListener("load",Q),this.__data.addEventListener("error",t),GF[U]=this.__data)}))}setImageURL(U,F="RGB"){this.load(U,F)}getParams(){const U=super.getParams();return this.loaded&&(U.data=this.__data),U}toJSON(U){return{}}fromJSON(U,F){}readBinary(U,F){this.setName(U.loadStr());const e=U.loadStr();if("string"==typeof e&&""!=e){const U=F.url.substring(0,F.url.lastIndexOf("/"));this.load(U+"/"+e)}}}n.register("FileImage2D",XF),n.register("FileImage",XF);class gF extends XF{constructor(U,F,e){super(U,F,e)}}n.register("LDRImage",gF);class yF extends KU{constructor(U,F={}){let e;super(U),this.__data={},null!=U&&U.includes(".")&&(e=U,this.setName(U.substring(U.lastIndexOf("/")+1,U.lastIndexOf(".")))),this.__exposure=1,this.__ambientLightFactor=0,this.__hdrTint=new B(1,1,1,1),this.__stream="stream"in F&&F.stream,this.type="FLOAT",e&&this.load(e)}__decodeData(U){return new Promise(((F,e)=>{const t=U.ldr,Q=U.cdm,l=new Blob([t.buffer]),n=new Image;n.onload=()=>{this.width=n.width,this.height=n.height,this.__data={ldr:n,cdm:Q},this.loaded?this.emit("updated"):(this.loaded=!0,this.emit("loaded")),F()},n.src=URL.createObjectURL(l)}))}load(U){return this.loaded=!1,new Promise(((F,e)=>{const t=U.lastIndexOf("/")>-1?U.substring(U.lastIndexOf("/")+1):"",Q=t.substring(0,t.lastIndexOf("."));""==this.getName()&&this.setName(Q),this.type="FLOAT",nU.loadFile("archive",U).then((U=>{if(!U.ldr||!U.cdm)for(const F in U)F.endsWith(".jpg")?(U.ldr=U[F],delete U[F]):F.endsWith(".bin")&&(U.cdm=U[F],delete U[F]);this.__decodeData(U).then((()=>{F()}))}),(U=>{this.emit("error",U),e(U)}))}))}isStream(){return!1}getParams(){const U=super.getParams();return this.loaded&&(U.data=this.__data,U.exposure=this.__exposure),U}setHDRTint(U){this.__hdrTint=U}getHDRTint(){return this.__hdrTint}toJSON(U){return{}}fromJSON(U,F){return{}}readBinary(U,F){this.setName(U.loadStr());let e=U.loadStr();"string"==typeof e&&""!=e&&this.load(e)}}n.register("VLHImage",yF);class IF extends XF{constructor(U,F,e){super(U,F,e),this.videoElem=new HTMLVideoElement,this.muteParam=new JU("Mute",!1),this.loopParam=new JU("Loop",!0),this.spatializeAudioParam=new JU("SpatializeAudio",!0),this.refDistanceParam=new hU("refDistance",2),this.maxDistanceParam=new hU("maxDistance",1e4),this.rolloffFactorParam=new hU("rolloffFactor",1),this.coneInnerAngleParam=new hU("coneInnerAngle",360),this.coneOuterAngleParam=new hU("coneOuterAngle",0),this.coneOuterGainParam=new hU("coneOuterGain",1),this.gainParam=new hU("Gain",2),this.format="RGB",this.type="UNSIGNED_BYTE",this.addParameter(this.muteParam),this.addParameter(this.loopParam),this.addParameter(this.spatializeAudioParam),this.addParameter(this.refDistanceParam),this.addParameter(this.maxDistanceParam),this.addParameter(this.rolloffFactorParam),this.addParameter(this.coneInnerAngleParam),this.addParameter(this.coneOuterAngleParam),this.addParameter(this.coneOuterGainParam),this.addParameter(this.gainParam).setRange([0,5])}getAudioSource(){return this.videoElem}load(U,F="RGB"){return new Promise(((F,e)=>{nU.incrementWorkload(1),this.videoElem.style.display="none",this.videoElem.preload="auto",this.videoElem.crossOrigin="anonymous",document.body.appendChild(this.videoElem),this.videoElem.addEventListener("loadedmetadata",(()=>{this.videoElem.muted=this.muteParam.value,this.muteParam.on("valueChanged",(()=>{this.videoElem.muted=this.muteParam.value})),this.videoElem.loop=this.loopParam.value,this.loopParam.on("valueChanged",(()=>{this.videoElem.loop=this.loopParam.value})),this.width=this.videoElem.videoHeight,this.height=this.videoElem.videoWidth,this.loaded=!0,nU.incrementWorkDone(1),this.emit("loaded"),F(t);let U=0;const e=()=>{if(this.videoElem.paused||this.videoElem.ended)return;const F=Math.floor(29.97*this.videoElem.currentTime);U!=F&&(this.emit("updated"),U=F),setTimeout(e,20)};e()}),!1),this.videoElem.src=U;const t=this.videoElem.play();void 0!==t&&t.then((U=>{console.log("Autoplay started!")})).catch((()=>{console.log("Autoplay was prevented.")}))}))}getParams(){const U=super.getParams();return this.loaded&&(U.data=this.videoElem),U}}function xF(U){this.data=U,this.pos=0}function fF(U){this.stream=new xF(U),this.output={}}n.register("LDRVideo",IF),xF.prototype.readByte=function(){return this.data[this.pos++]},xF.prototype.peekByte=function(){return this.data[this.pos]},xF.prototype.readBytes=function(U){for(var F=new Array(U),e=0;e<U;e++)F[e]=this.readByte();return F},xF.prototype.peekBytes=function(U){for(var F=new Array(U),e=0;e<U;e++)F[e]=this.data[this.pos+e];return F},xF.prototype.readString=function(U){for(var F="",e=0;e<U;e++)F+=String.fromCharCode(this.readByte());return F},xF.prototype.readBitArray=function(){for(var U=[],F=this.readByte(),e=7;e>=0;e--)U.push(!!(F&1<<e));return U},xF.prototype.readUnsigned=function(U){var F=this.readBytes(2);return U?(F[1]<<8)+F[0]:(F[0]<<8)+F[1]},fF.prototype.parse=function(U){return this.parseParts(this.output,U),this.output},fF.prototype.parseParts=function(U,F){for(var e=0;e<F.length;e++){var t=F[e];this.parsePart(U,t)}},fF.prototype.parsePart=function(U,F){var e,t=F.label;if(!F.requires||F.requires(this.stream,this.output,U))if(F.loop){for(var Q=[];F.loop(this.stream);){var l={};this.parseParts(l,F.parts),Q.push(l)}U[t]=Q}else F.parts?(e={},this.parseParts(e,F.parts),U[t]=e):F.parser?(e=F.parser(this.stream,this.output,U),F.skip||(U[t]=e)):F.bits&&(U[t]=this.parseBits(F.bits))},fF.prototype.parseBits=function(U){var F={},e=this.stream.readBitArray();for(var t in U){var Q=U[t];Q.length?F[t]=e.slice(Q.index,Q.index+Q.length).reduce((function(U,F){return 2*U+F}),0):F[t]=e[Q.index]}return F};var MF=function(){return function(U){return U.readByte()}},vF=function(U){return function(F){return F.readBytes(U)}},DF=function(U){return function(F){return F.readString(U)}},LF=function(U){return function(F){return F.readUnsigned(U)}},YF=function(U,F){return function(e,t,Q){for(var l=F(e,t,Q),n=new Array(l),a=0;a<l;a++)n[a]=e.readBytes(U);return n}},_F={label:"blocks",parser:function(U){for(var F=[],e=U.readByte();0!==e;e=U.readByte())F=F.concat(U.readBytes(e));return F}},wF={label:"gce",requires:function(U){var F=U.peekBytes(2);return 33===F[0]&&249===F[1]},parts:[{label:"codes",parser:vF(2),skip:!0},{label:"byteSize",parser:MF()},{label:"extras",bits:{future:{index:0,length:3},disposal:{index:3,length:3},userInput:{index:6},transparentColorGiven:{index:7}}},{label:"delay",parser:LF(!0)},{label:"transparentColorIndex",parser:MF()},{label:"terminator",parser:MF(),skip:!0}]},zF={label:"image",requires:function(U){return 44===U.peekByte()},parts:[{label:"code",parser:MF(),skip:!0},{label:"descriptor",parts:[{label:"left",parser:LF(!0)},{label:"top",parser:LF(!0)},{label:"width",parser:LF(!0)},{label:"height",parser:LF(!0)},{label:"lct",bits:{exists:{index:0},interlaced:{index:1},sort:{index:2},future:{index:3,length:2},size:{index:5,length:3}}}]},{label:"lct",requires:function(U,F,e){return e.descriptor.lct.exists},parser:YF(3,(function(U,F,e){return Math.pow(2,e.descriptor.lct.size+1)}))},{label:"data",parts:[{label:"minCodeSize",parser:MF()},_F]}]},KF={label:"text",requires:function(U){var F=U.peekBytes(2);return 33===F[0]&&1===F[1]},parts:[{label:"codes",parser:vF(2),skip:!0},{label:"blockSize",parser:MF()},{label:"preData",parser:function(U,F,e){return U.readBytes(e.text.blockSize)}},_F]},HF={label:"frames",parts:[wF,{label:"application",requires:function(U,F,e){var t=U.peekBytes(2);return 33===t[0]&&255===t[1]},parts:[{label:"codes",parser:vF(2),skip:!0},{label:"blockSize",parser:MF()},{label:"id",parser:function(U,F,e){return U.readString(e.blockSize)}},_F]},{label:"comment",requires:function(U,F,e){var t=U.peekBytes(2);return 33===t[0]&&254===t[1]},parts:[{label:"codes",parser:vF(2),skip:!0},_F]},zF,KF],loop:function(U){var F=U.peekByte();return 33===F||44===F}},PF=[{label:"header",parts:[{label:"signature",parser:DF(3)},{label:"version",parser:DF(3)}]},{label:"lsd",parts:[{label:"width",parser:LF(!0)},{label:"height",parser:LF(!0)},{label:"gct",bits:{exists:{index:0},resolution:{index:1,length:3},sort:{index:4},size:{index:5,length:3}}},{label:"backgroundColorIndex",parser:MF()},{label:"pixelAspectRatio",parser:MF()}]},{label:"gct",requires:function(U,F){return F.lsd.gct.exists},parser:YF(3,(function(U,F){return Math.pow(2,F.lsd.gct.size+1)}))},HF];function OF(U){var F=new fF(new Uint8Array(U));this.raw=F.parse(PF),this.raw.hasImages=!1;for(var e=0;e<this.raw.frames.length;e++)if(this.raw.frames[e].image){this.raw.hasImages=!0;break}}OF.prototype.decompressFrame=function(U,F){if(U>=this.raw.frames.length)return null;var e=this.raw.frames[U];if(e.image){var t=e.image.descriptor.width*e.image.descriptor.height,Q=function(U,F,e){var t,Q,l,n,a,d,i,s,R,B,V,r,h,o,J,Z,c=4096,m=-1,S=e,W=new Array(e),E=new Array(c),p=new Array(c),u=new Array(c+1);for(a=(Q=1<<(r=U))+1,t=Q+2,i=m,l=(1<<(n=r+1))-1,R=0;R<Q;R++)E[R]=0,p[R]=R;for(V=s=h=o=Z=J=0,B=0;B<S;){if(0===o){if(s<n){V+=F[J]<<s,s+=8,J++;continue}if(R=V&l,V>>=n,s-=n,R>t||R==a)break;if(R==Q){l=(1<<(n=r+1))-1,t=Q+2,i=m;continue}if(i==m){u[o++]=p[R],i=R,h=R;continue}for(d=R,R==t&&(u[o++]=h,R=i);R>Q;)u[o++]=p[R],R=E[R];h=255&p[R],u[o++]=h,t<c&&(E[t]=i,p[t]=h,0==(++t&l)&&t<c&&(n++,l+=t)),i=d}o--,W[Z++]=u[o],B++}for(B=Z;B<S;B++)W[B]=0;return W}(e.image.data.minCodeSize,e.image.data.blocks,t);e.image.descriptor.lct.interlaced&&(Q=function(U,F){for(var e=new Array(U.length),t=U.length/F,Q=function(t,Q){var l=U.slice(Q*F,(Q+1)*F);e.splice.apply(e,[t*F,F].concat(l))},l=[0,4,2,1],n=[8,8,4,2],a=0,d=0;d<4;d++)for(var i=l[d];i<t;i+=n[d])Q(i,a),a++;return e}(Q,e.image.descriptor.width));var l={pixels:Q,dims:{top:e.image.descriptor.top,left:e.image.descriptor.left,width:e.image.descriptor.width,height:e.image.descriptor.height}};return e.image.descriptor.lct&&e.image.descriptor.lct.exists?l.colorTable=e.image.lct:l.colorTable=this.raw.gct,e.gce&&(l.delay=10*(e.gce.delay||10),l.disposalType=e.gce.extras.disposal,e.gce.extras.transparentColorGiven&&(l.transparentIndex=e.gce.transparentColorIndex)),F&&(l.patch=function(U){for(var F=U.pixels.length,e=new Uint8ClampedArray(4*F),t=0;t<F;t++){var Q=4*t,l=U.pixels[t],n=U.colorTable[l];e[Q]=n[0],e[Q+1]=n[1],e[Q+2]=n[2],e[Q+3]=l!==U.transparentIndex?255:0}return e}(l)),l}return null},OF.prototype.decompressFrames=function(U){for(var F=[],e=0;e<this.raw.frames.length;e++){this.raw.frames[e].image&&F.push(this.decompressFrame(e,U))}return F};const jF={};class AF extends XF{constructor(U,F="",e={}){super(U,F,e),this.streamAtlasDescParam=new mU("StreamAtlasDesc"),this.streamAtlasIndexParam=new hU("StreamAtlasIndex",0),this.format="RGBA",this.type="UNSIGNED_BYTE",this.__streamAtlas=!0,this.addParameter(this.streamAtlasDescParam),this.addParameter(this.streamAtlasIndexParam);const t=this.streamAtlasIndexParam;let Q;t.setRange([0,1]);let l=0;const n=U=>{t.value=l,Q&&setTimeout((()=>n(U)),this.getFrameDelay(l)),l=(l+1)%U};this.play=()=>{this.__resourcePromise.then((()=>{Q=!0;let U=t.getRange();if(!U)return void console.warn("numFrames is null");const F=U[1];n(F)}))},this.stop=()=>{Q=!1}}getFrameDelay(U){return 10*this.__unpackedData.frameDelays[U]}load(U,F="RGB"){return U in jF?(this.__resourcePromise=jF[U],this.__resourcePromise):(this.__resourcePromise=new Promise(((F,e)=>{nU.incrementWorkload(1),UU(U,(e=>{console.warn("Unpacking Gif client side:"+U);const t=performance.now(),Q=new OF(e).decompressFrames(!0),l=Math.sqrt(Q.length),n=[l,l];J.fract(l)>0&&(n[0]=Math.floor(n[0]+1),J.fract(l)>.5?n[1]=Math.floor(n[1]+1):n[1]=Math.floor(n[1]));const a=Q[0].dims.width,d=Q[0].dims.height,i=document.createElement("canvas"),s=i.getContext("2d"),R=document.createElement("canvas"),B=R.getContext("2d");R.width=a,R.height=d;const V=document.createElement("canvas"),r=V.getContext("2d");let h;V.width=n[0]*a,V.height=n[1]*d;const o=[],Z=(U,F)=>{const e=U.dims;o.push(U.delay/10),h&&e.width==h.width&&e.height==h.height||(i.width=e.width,i.height=e.height,h=null==s?void 0:s.createImageData(e.width,e.height)),h.data.set(U.patch),null==s||s.putImageData(h,0,0),2==U.disposalType&&(null==B||B.clearRect(0,0,R.width,R.height)),null==B||B.drawImage(i,e.left,e.top),null==r||r.drawImage(R,F%n[0]*a,Math.floor(F/n[0])*d)};for(let U=0;U<Q.length;U++)Z(Q[U],U);nU.incrementWorkDone(1);const c=null==r?void 0:r.getImageData(0,0,V.width,V.height),m=performance.now()-t;console.log(`Decode GIF '${U}' time:`+m),F({width:V.width,height:V.height,atlasSize:n,frameRange:[0,Q.length],frameDelays:o,imageData:c})}),(F=>{const t="Unable to Load URL:"+F+":"+U;console.warn(t),e(t)}))})),jF[U]=this.__resourcePromise,this.__resourcePromise.then((U=>{this.width=U.width,this.height=U.height,this.streamAtlasDescParam.value=new s(U.atlasSize[0],U.atlasSize[1],0,0),this.streamAtlasIndexParam.setRange(U.frameRange),this.__unpackedData=U,this.__data=U.imageData,this.loaded=!0,this.emit("loaded")})),this.__resourcePromise)}}n.register("GIFImage",AF);class qF extends yF{constructor(U,F={}){super(U,F),this.headlightModeParam=new JU("HeadLightMode",!1),this.addParameter(this.headlightModeParam),this.utf8decoder=new TextDecoder,this.shCoeffs=[]}__decodeData(U){const F=U.samples;if(F&&(this.luminanceData=JSON.parse(this.utf8decoder.decode(F)),this.luminanceData.shCoeffs))for(let U=0;U<9;U++)this.shCoeffs[U]=new B(this.luminanceData.shCoeffs[3*U+0],this.luminanceData.shCoeffs[3*U+1],this.luminanceData.shCoeffs[3*U+2]);return super.__decodeData(U)}dirToLuminance(U){const F=U.x,e=U.y,t=U.z,Q=this.shCoeffs[0].scale(.886227);return Q.addInPlace(this.shCoeffs[1].scale(1.023328*e)),Q.addInPlace(this.shCoeffs[2].scale(1.023328*t)),Q.addInPlace(this.shCoeffs[3].scale(1.023328*F)),Q.addInPlace(this.shCoeffs[4].scale(.858086*F*e)),Q.addInPlace(this.shCoeffs[5].scale(.858086*e*t)),Q.addInPlace(this.shCoeffs[6].scale(.743125*t*t-.247708)),Q.addInPlace(this.shCoeffs[7].scale(.858086*F*t)),Q.addInPlace(this.shCoeffs[8].scale(.429043*(F*F-e*e))),Q.luminance()}}n.register("EnvMap",qF);class $F extends k{constructor(){super(),this.__labelLibraries={},this.__language=function(){if(!globalThis.navigator)return"en";const U=new URLSearchParams(window.location.search);if(U.has("lang"))return U.get("lang");const F=globalThis.navigator;let e,t;const Q=U=>U.startsWith("en")?"En":U.startsWith("es")?"Es":U.startsWith("fr")?"Fr":U.startsWith("gb")||U.startsWith("de")?"Gb":U;if(Array.isArray(F.languages))for(e=0;e<F.languages.length;e++)if(t=F.languages[e],t&&t.length)return Q(t);return null}(),this.__foundLabelLibraries={}}loadLibrary(U,F){const e=U.substring(0,U.lastIndexOf("."));if(this.__foundLabelLibraries[e]=F,U.endsWith(".labels"))$(F,(U=>{this.__labelLibraries[e]=JSON.parse(U),this.emit("labelLibraryLoaded",{library:e})}));else if(U.endsWith(".xlsx")){const U=globalThis.XLSX;UU(F,(F=>{const t=new Uint8Array(F),Q=U.read(t,{type:"array"}),l={};Q.SheetNames.forEach((function(F){U.utils.sheet_to_json(Q.Sheets[F],{}).forEach((function(U){const F=U.Identifier;delete U.Identifier,l[F]=U}))})),this.__labelLibraries[e]=l,this.emit("labelLibraryLoaded",{library:e})}))}}isLibraryFound(U){return U in this.__foundLabelLibraries}isLibraryLoaded(U){return U in this.__labelLibraries}getLabelText(U,F){const e=this.__labelLibraries[U];if(!e)throw new Error("LabelLibrary: '"+U+"' not found in LabelManager. Found: ["+Object.keys(this.__labelLibraries)+"]");const t=e[F];if(!t)throw new Error("Label: '"+F+"' not found in LabelLibrary: '"+U+"'. Found: ["+Object.keys(e)+"]");const Q=t[this.__language];if(!Q){if(t.En)return t.En;throw new Error("labelText: '"+this.__language+"' not found in Label. Found: ["+Object.keys(t)+"]")}return Q}setLabelText(U,F,e){let t=this.__labelLibraries[U];t||(t={},this.__labelLibraries[U]=t);let Q=t[F];Q||(Q={},t[F]=Q),Q[this.__language]=e}setLanguage(U){this.__language=U}}const Ue=new $F;class Fe extends TF{constructor(U,F){super(U),this.requestedReRender=!1,this.libraryParam=new kU("Library"),this.textParam=new kU("Text",""),this.fontColorParam=new SU("FontColor",new B(0,0,0)),this.fontSizeParam=new hU("FontSize",22),this.fontParam=new kU("Font","Helvetica"),this.borderWidthParam=new hU("BorderWidth",2),this.outlineParam=new JU("Outline",!1),this.outlineColorParam=new SU("OutlineColor",new B(0,0,0)),this.backgroundParam=new JU("Background",!0),this.backgroundColorParam=new SU("BackgroundColor",new B("#FBC02D")),this.fillBackgroundParam=new JU("FillBackground",!0),this.strokeBackgroundOutlineParam=new JU("StrokeBackgroundOutline",!0),this.canvasElem=document.createElement("canvas");this.marginParam=new hU("Margin",11),this.borderRadiusParam=new hU("BorderRadius",11),this.addParameter(this.marginParam),this.addParameter(this.borderRadiusParam),this.addParameter(this.libraryParam),this.addParameter(this.textParam),this.addParameter(this.fontColorParam),this.addParameter(this.fontSizeParam),this.addParameter(this.fontParam),this.addParameter(this.borderWidthParam),this.addParameter(this.outlineParam),this.addParameter(this.outlineColorParam),this.addParameter(this.backgroundParam),this.addParameter(this.backgroundColorParam),this.addParameter(this.fillBackgroundParam),this.addParameter(this.strokeBackgroundOutlineParam);this.on("nameChanged",(()=>{this.loadLabelData()})),F&&(this.libraryParam.value=F),this.requestedReRender=!1,this.needsRender=!1,this.loadLabelData()}__parameterValueChanged(U){super.parameterValueChanged(U),this.requestedReRender||(this.requestedReRender=!0,this.loadLabelData())}loadLabelData(){Promise.all([(()=>new Promise((U=>{const F=this.libraryParam.value;if(""==F)return void U();if(!Ue.isLibraryFound(F))return console.warn("Label Library not found:",F),void U();const e=()=>{try{const U=this.getName(),e=Ue.getLabelText(F,U);this.textParam.value=e}catch(U){console.warn(U)}U()};Ue.isLibraryLoaded(F)?e():Ue.on("labelLibraryLoaded",(U=>{U.library==F&&e()}))})))(),(()=>new Promise((U=>{if(null!=document.fonts){const F=this.fontParam.value,e=this.fontSizeParam.value;document.fonts.load(e+'px "'+F+'"').then((()=>{U()}))}else U()})))()]).then((()=>{this.requestedReRender=!1,this.needsRender=!0,this.__loaded?this.emit("updated"):(this.__loaded=!0,this.emit("loaded"))}))}renderLabelToImage(){const U=this.canvasElem.getContext("2d",{alpha:!0});let F=this.textParam.value;""==F&&(F=this.getName());const e=this.fontParam.value,t=this.fontColorParam.value,Q=this.fontSizeParam.value,l=this.marginParam.value,n=this.borderWidthParam.value,a=this.borderRadiusParam.value,d=this.outlineParam.value,i=this.outlineColorParam.value,s=this.backgroundParam.value,R=this.backgroundColorParam.value,B=this.fillBackgroundParam.value,V=this.strokeBackgroundOutlineParam.value,r=l+n,h=F.split("\n");U.font=Q+'px "'+e+'"';let o=0;h.forEach((F=>{o=Math.max(U.measureText(F).width,o)}));const J=Q;this.width=Math.ceil(o+2*r),this.height=Math.ceil(J*h.length+2*r),U.canvas.width=this.width,U.canvas.height=this.height,this.canvasElem.width=this.width,this.canvasElem.height=this.height,U.fillStyle="rgba(0, 0, 0, 0.0)",U.fillRect(0,0,this.width,this.height),s&&(U.fillStyle=R.toHex(),U.strokeStyle=i.toHex(),function(U,F,e,t,Q,l,n=!1,a=!0,d){if(void 0===a&&(a=!0),void 0===l&&(l=5),"number"==typeof l)l={tl:l,tr:l,br:l,bl:l};else{const U={tl:0,tr:0,br:0,bl:0};for(const F in U)l[F]=l[F]||U[F]}U.beginPath(),U.moveTo(F+l.tl,e),U.lineTo(F+t-l.tr,e),U.quadraticCurveTo(F+t,e,F+t,e+l.tr),U.lineTo(F+t,e+Q-l.br),U.quadraticCurveTo(F+t,e+Q,F+t-l.br,e+Q),U.lineTo(F+l.bl,e+Q),U.quadraticCurveTo(F,e+Q,F,e+Q-l.bl),U.lineTo(F,e+l.tl),U.quadraticCurveTo(F,e,F+l.tl,e),U.closePath(),n&&U.fill(),a&&(U.lineWidth=d,U.stroke())}(U,n,n,this.width-2*n,this.height-2*n,a,B,V,n)),U.font=Q+'px "'+e+'"',U.textAlign="left",U.fillStyle=t.toHex(),U.textBaseline="hanging",h.forEach(((F,e)=>{U.fillText(F,r,r+e*J)})),d&&(U.strokeStyle=i.toHex(),U.lineWidth=1.5,U.strokeText(F,r,r)),this.__data=U.getImageData(0,0,this.width,this.height),this.needsRender=!1,this.emit("labelRendered",{width:this.width,height:this.height,data:this.__data})}getParams(){return this.needsRender&&this.renderLabelToImage(),super.getParams()}toJSON(U){return super.toJSON(U)}fromJSON(U,F){super.fromJSON(U,F)}}n.register("Label",Fe);class ee extends KU{constructor(){super(""),this.loaded=!1}connectWebcam(U,F,e=!1){const t={width:U,height:F,frameRate:{ideal:60,max:60}};t.facingMode=e?{exact:"environment"}:{facingMode:"user"};const Q=document.createElement("video");Q.style.display="none",Q.preload="auto",Q.crossOrigin="anonymous",document.body.appendChild(Q),navigator.mediaDevices.getUserMedia({audio:!1,video:t}).then((U=>{Q.srcObject=U,Q.onloadedmetadata=U=>{Q.play(),this.width=Q.videoWidth,this.height=Q.videoHeight,console.log("Webcam:["+this.width+", "+this.height+"]"),this.__data=Q,this.loaded=!0,this.emit("loaded");let F=0;const e=()=>{if(Q.paused||Q.ended)return;const U=Math.floor(60*Q.currentTime);F!=U&&(this.emit("updated"),F=U),setTimeout(e,20)};e()}})).catch((function(U){}))}setVideoStream(U){this.loaded=!1,this.width=U.videoWidth,this.height=U.videoHeight,this.start(),this.__data=U,this.loaded=!0,this.emit("loaded")}stop(){clearInterval(this.__intervalId)}start(){this.__intervalId=setInterval((()=>{this.emit("updated")}),20)}isLoaded(){return this.loaded}getParams(){return{type:this.type,format:this.format,width:this.width,height:this.height,data:this.__data,flipY:!0}}}n.register("VideoStreamImage2D",ee);class te extends qU{constructor(U){super(U),this.baseColorParam=new PU("BaseColor",new B(1,1,.5)),this.opacityParam=new hU("Opacity",1),this.lineThicknessParam=new hU("LineThickness",.01),this.overlayParam=new hU("Overlay",0),this.__shaderName="FatLinesShader",this.addParameter(this.baseColorParam),this.addParameter(this.opacityParam),this.addParameter(this.overlayParam),this.addParameter(this.lineThicknessParam)}}n.register("FatLinesMaterial",te);class Qe extends qU{constructor(U){super(U),this.baseColorParam=new PU("BaseColor",new B(1,1,.5)),this.pointSizeParam=new hU("PointSize",1),this.roundedParam=new hU("Rounded",1),this.borderWidthParam=new hU("BorderWidth",.2),this.overlayParam=new hU("Overlay",0),this.__shaderName="FatPointsShader",this.addParameter(this.baseColorParam),this.addParameter(this.pointSizeParam),this.addParameter(this.roundedParam),this.addParameter(this.borderWidthParam),this.addParameter(this.overlayParam)}}n.register("FatPointsMaterial",Qe);class le extends qU{constructor(U){super(U),this.baseColorParam=new PU("BaseColor",new B(1,1,.5)),this.__shaderName="FlatSurfaceShader",this.addParameter(this.baseColorParam)}}n.register("FlatSurfaceMaterial",le);class ne extends qU{constructor(U){super(U),this.baseColorParam=new PU("BaseColor",new B(1,1,.5)),this.opacityParam=new HU("Opacity",.7,[0,1]),this.overlayParam=new HU("Overlay",1e-6),this.stippleScaleParam=new hU("StippleScale",.01),this.stippleValueParam=new hU("StippleValue",0,[0,1]),this.occludedStippleValueParam=new hU("OccludedStippleValue",1,[0,1]),this.__shaderName="LinesShader",this.addParameter(this.baseColorParam),this.addParameter(this.opacityParam),this.addParameter(this.overlayParam),this.addParameter(this.stippleScaleParam),this.addParameter(this.stippleValueParam),this.addParameter(this.occludedStippleValueParam)}}n.register("LinesMaterial",ne);class ae extends qU{constructor(U){super(U),this.baseColorParam=new PU("BaseColor",new B(1,1,.5)),this.pointSizeParam=new HU("PointSize",2),this.overlayParam=new HU("Overlay",2e-5),this.__shaderName="PointsShader",this.addParameter(this.baseColorParam),this.addParameter(this.pointSizeParam),this.addParameter(this.overlayParam)}}n.register("PointsMaterial",ae);class de extends qU{constructor(U){super(U),this.baseColorParam=new PU("BaseColor",new B(1,1,.5)),this.__shaderName="ScreenSpaceShader",this.addParameter(this.baseColorParam)}}n.register("ScreenSpaceMaterial",de);class ie extends qU{constructor(U){super(U),this.baseColorParam=new PU("BaseColor",new B(1,1,.5)),this.opacityParam=new HU("Opacity",1,[0,1]),this.emissiveStrengthParam=new HU("EmissiveStrength",0,[0,1]),this.__shaderName="SimpleSurfaceShader",this.addParameter(this.baseColorParam),this.addParameter(this.opacityParam),this.addParameter(this.emissiveStrengthParam)}}n.register("SimpleSurfaceMaterial",ie);class se extends qU{constructor(U){super(U),this.baseColorParam=new PU("BaseColor",new B(1,1,.5)),this.normalParam=new PU("Normal",new B(1,1,.5)),this.ambientOcclusion=new HU("AmbientOcclusion",1,[0,1]),this.metallicParam=new HU("Metallic",.05,[0,1]),this.roughnessParam=new HU("Roughness",.5,[0,1]),this.reflectanceParam=new HU("Reflectance",.5,[0,1]),this.emissiveStrengthParam=new HU("EmissiveStrength",0,[0,1]),this.opacityParam=new HU("Opacity",1,[0,1]),this.__shaderName="StandardSurfaceShader",this.addParameter(this.baseColorParam),this.addParameter(this.normalParam),this.addParameter(this.ambientOcclusion),this.addParameter(this.metallicParam),this.addParameter(this.roughnessParam),this.addParameter(this.reflectanceParam),this.addParameter(this.emissiveStrengthParam),this.addParameter(this.opacityParam)}}n.register("StandardSurfaceMaterial",se);class Re extends DU{constructor(U){super(U),this.srcTree=null}setSrcTree(U,F){this.srcTree=U;const e=this.srcTree.clone(F);e.localXfoParam.value=new c,this.addChild(e,!1)}getSrcTree(){return this.srcTree}readBinary(U,F={}){super.readBinary(U,F);const e=U.loadStrArray();if(e.length>0)try{F.resolvePath(e,(U=>{this.setSrcTree(U,F)}),(U=>{console.warn(`Error loading InstanceItem: ${this.getPath()}, unable to resolve: ${e}. `+U.message)}))}catch(U){console.warn(`Error loading InstanceItem: ${this.getPath()}: `+U.message)}}toJSON(U={}){return super.toJSON(U)}fromJSON(U,F={}){}clone(U){const F=new Re;return F.copyFrom(this,U),F}}n.register("InstanceItem",Re);class Be extends DU{constructor(U){super(U),this.materialParam=new $U("Material"),this.overlay=!1,this.__cutAway=!1,this.__cutAwayVector=new i(1,0,0),this.__cutAwayDist=0,this.__layers=[]}setOverlay(U){this.overlay=U}isOverlay(){return this.overlay}addLayer(U){this.__layers.push(U)}getLayers(){return this.__layers}isCutawayEnabled(){return this.__cutAway}setCutawayEnabled(U){this.__cutAway=U,this.emit("cutAwayChanged")}getCutVector(){return this.__cutAwayVector}setCutVector(U){this.__cutAwayVector=U,this.emit("cutAwayChanged")}getCutDist(){return this.__cutAwayDist}setCutDist(U){this.__cutAwayDist=U,this.emit("cutAwayChanged")}readBinary(U,F){if(super.readBinary(U,F),F.versions["zea-engine"].compare([0,0,4])>=0){const e=U.loadStr();let t=F.assetItem.getMaterialLibrary().getMaterial(e,!1);if(t||(t=new qU(e,"SimpleSurfaceShader"),t.getParameter("BaseColor").loadValue(B.random(.25)),F.assetItem.getMaterialLibrary().addMaterial(t)),this.materialParam.loadValue(t),this.__layers=U.loadStrArray(),this.__layers.length>0)for(const U of this.__layers)F.addGeomToLayer(this,U)}}}let Ve=!1;class re extends IU{constructor(U,F,e){super("CalcGeomMatOperator"),this.globalXfo=new fU("GlobalXfo"),this.geomOffsetXfo=new fU("GeomOffsetXfo"),this.geomMat=new yU("GeomMat"),this.globalXfo.setParam(U),this.geomOffsetXfo.setParam(F),this.geomMat.setParam(e),this.addInput(this.globalXfo),this.addInput(this.geomOffsetXfo),this.addOutput(this.geomMat)}evaluate(){const U=this.globalXfo.getValue().toMat4(),F=this.geomOffsetXfo.getValue().toMat4();this.geomMat.setClean(U.multiply(F))}}class he extends Be{constructor(U,F,e,t){super(U),this.listenerIDs={},this.geomIndex=-1,this.assetItem=null,this.cullable=!0,this.geomOffsetXfoParam=new uU("GeomOffsetXfo"),this.geomParam=new wU("Geometry"),this.geomMatParam=new pU("GeomMat"),this.addParameter(this.geomParam),this.addParameter(this.materialParam),this.addParameter(this.geomOffsetXfoParam),this.addParameter(this.geomMatParam);const Q=()=>{this.setBoundingBoxDirty()};this.geomParam.on("valueChanged",Q),this.geomParam.on("boundingBoxChanged",Q),this.calcGeomMatOperator=new re(this.globalXfoParam,this.geomOffsetXfoParam,this.geomMatParam),F&&this.geomParam.loadValue(F),e&&this.materialParam.loadValue(e),t&&(this.localXfoParam.value=t)}_cleanBoundingBox(U){if(this.disableBoundingBox)return U;if(U=super._cleanBoundingBox(U),this.geomBBox){const F=this.geomMatParam.value;U.addPoint(F.transformVec3(this.geomBBox.p0)),U.addPoint(F.transformVec3(this.geomBBox.p1))}else{const F=this.geomParam.value;if(F)if(Ve){const e=this.geomMatParam.value;if(F instanceof sF){const t=F.__buffers.attrBuffers.positions.values,Q=U=>{const F=3*U;return new i(t.subarray(F,F+3))};for(let t=0;t<F.getNumVertices();t++)U.addPoint(e.transformVec3(Q(t)))}else{const t=F.getVertexAttribute("positions");for(let Q=0;Q<F.getNumVertices();Q++)U.addPoint(e.transformVec3(t.getValueRef(Q)))}}else U.addBox3(F.getBoundingBox(),this.geomMatParam.value)}return U}toJSON(U){return super.toJSON(U)}fromJSON(U,F){super.fromJSON(U,F),F.numGeomItems++}readBinary(U,F){super.readBinary(U,F),F.numGeomItems++;const e=U.loadUInt8(),t=U.loadUInt32(),Q=F.assetItem.getGeometryLibrary();this.geomIndex=t,this.assetItem=F.assetItem;const l=Q.getGeom(t);if(l)this.geomParam.loadValue(l);else{const U=U=>{const{range:e}=U;if(t>=e[0]&&t<e[1]){const U=Q.getGeom(t);U?this.geomParam.value=U:console.warn("Geom not loaded:",this.getName()),Q.removeListenerById("rangeLoaded",F)}},F=Q.on("rangeLoaded",U)}if(4&e&&(this.geomOffsetXfoParam.value=new c(U.loadFloat32Vec3(),U.loadFloat32Quat(),U.loadFloat32Vec3())),F.versions["zea-engine"].compare([0,0,4])<0){if(e&8){const e=F.assetItem.getMaterialLibrary(),t=U.loadStr();let Q=e.getMaterial(t);Q||(console.warn("Geom :'"+this.__name+"' Material not found:"+t),Q=e.getMaterial("Default")),this.materialParam.loadValue(Q)}else this.materialParam.loadValue(F.assetItem.getMaterialLibrary().getMaterial("Default"))}F.versions["zea-engine"].compare([3,0,0])<0?U.loadFloat32Vec2():this.geomBBox=new W(U.loadFloat32Vec3(),U.loadFloat32Vec3())}toString(U){return JSON.stringify(this.toJSON(U),null,2)}clone(U){const F=new he;return F.copyFrom(this,U),F}copyFrom(U,F){if(super.copyFrom(U,F),!U.geomParam.value&&-1!=U.geomIndex){const F=U.assetItem.getGeometryLibrary();this.assetItem=U.assetItem,this.geomIndex=U.geomIndex,this.geomBBox=U.geomBBox;const e=U=>{const{range:e}=U;if(this.geomIndex>=e[0]&&this.geomIndex<e[1]){const U=F.getGeom(this.geomIndex);U?this.geomParam.value=U:console.warn("Geom not loaded:",this.getName()),F.removeListenerById("rangeLoaded",this.listenerIDs.rangeLoaded)}};this.listenerIDs.rangeLoaded=F.on("rangeLoaded",e)}this.geomMatParam.setDirty(0)}static setCalculatePreciseBoundingBoxes(U){Ve=U}}n.register("GeomItem",he);class oe extends DU{constructor(U){super(U),this.itemsParam=new _U("Items",(U=>U instanceof DU)),this.__itemsEventHandlers=[],this.addParameter(this.itemsParam),this.itemsParam.on("itemAdded",(U=>{this.bindItem(U.item,U.index)})),this.itemsParam.on("itemRemoved",(U=>{this.unbindItem(U.item,U.index)}))}setSearchRoot(U){this.searchRoot=U}setOwner(U){this.searchRoot&&this.searchRoot!=this.getOwner()||(this.searchRoot=U),super.setOwner(U)}bindItem(U,F){if(!(U instanceof DU))return;const e={};e.pointerDown=U.on("pointerDown",(U=>{this.onPointerDown(U)})),e.pointerUp=U.on("pointerUp",(U=>{this.onPointerUp(U)})),e.pointerMove=U.on("pointerMove",(U=>{this.onPointerMove(U)})),e.pointerEnter=U.on("pointerEnter",(U=>{this.onPointerEnter(U)})),e.pointerLeave=U.on("pointerLeave",(U=>{this.onPointerLeave(U)})),this.__itemsEventHandlers.splice(F,0,e)}unbindItem(U,F){if(!(U instanceof DU))return;const e=this.__itemsEventHandlers[F];for(let F in e){const t=F.split(".");if(t.length>1){const Q=U.getParameter(t[0]);Q&&Q.removeListenerById(t[1],e[F])}else U.removeListenerById(F,e[F])}this.__itemsEventHandlers.splice(F,1)}addItem(U,F=!0){U?this.itemsParam.addItem(U,F):console.warn("Error adding item to group. Item is null")}removeItem(U,F=!0){const e=this.itemsParam.value;if(!e)return;const t=Array.from(e).indexOf(U);t&&this.itemsParam.removeItem(t,F)}clearItems(U=!0){const F=this.itemsParam.value;if(!F)return;const e=Array.from(F);for(let U=e.length-1;U>=0;U--)this.unbindItem(e[U],U);this.itemsParam.clearItems(U)}getItems(){return this.itemsParam.value}setItems(U){this.clearItems(!1),this.itemsParam.setItems(U)}toJSON(U){const F=super.toJSON(U),e=this.itemsParam.value;if(e){const t=Array.from(e),Q=[];t.forEach((F=>{const e=F.getPath();Q.push(U?U.makeRelative(e):e)})),F.treeItems=Q}return F}fromJSON(U,F){if(super.fromJSON(U,F),!U.treeItems)return void console.warn("Invalid Parameter JSON");if(!F)throw new Error("Unable to load JSON on a BaseGroup without a load context");let e=U.treeItems.length;const t=U=>{F.resolvePath(U,(U=>{this.addItem(U),e--,0==e&&this.loadDone()}),(()=>{console.warn("BaseGroup: '"+this.getName()+"'. Unable to load item:"+U)}))};for(const F of U.treeItems)t(F)}loadDone(){}copyFrom(U,F){super.copyFrom(U,F)}}class Je extends oe{constructor(U){super(U),this.highlightedParam=new JU("Highlighted",!1),this.highlightColorParam=new SU("HighlightColor",new B(.5,.5,1)),this.highlightFillParam=new hU("HighlightFill",0,[0,1]),this.addParameter(this.highlightedParam),this.highlightedParam.on("valueChanged",(()=>{this.updateHighlight()})),this.addParameter(this.highlightColorParam),this.highlightColorParam.on("valueChanged",(()=>{this.updateHighlight()})),this.addParameter(this.highlightFillParam),this.highlightFillParam.on("valueChanged",(()=>{this.updateHighlight()}))}updateVisibility(){if(super.updateVisibility()){const U=this.isVisible();return Array.from(this.itemsParam.value).forEach((F=>{F instanceof DU&&F.propagateVisibility(U?1:-1)})),!0}return!1}updateHighlight(){this.__updateHighlightHelper()}__updateHighlightHelper(){let U,F=!1;(this.highlightedParam.value||this.isSelected())&&(F=!0,U=this.highlightColorParam.value,U.a=this.highlightFillParam.value);const e="groupItemHighlight"+this.getId();Array.from(this.itemsParam.value).forEach((t=>{t instanceof DU&&(F?t.addHighlight(e,U,!0):t.removeHighlight(e,!0))}))}setSelected(U){super.setSelected(U),this.updateHighlight()}bindItem(U,F){super.bindItem(U,F);const e=this.__itemsEventHandlers[F];if(U instanceof DU){if(U instanceof DU&&this.highlightedParam.value){const F=this.highlightColorParam.value;F.a=this.highlightFillParam.value,U.addHighlight("groupItemHighlight"+this.getId(),F,!0)}this.isVisible()||U.propagateVisibility(-1),e["BoundingBox.valueChanged"]=U.boundingBoxParam.on("valueChanged",(U=>{this.setBoundingBoxDirty()}))}}unbindItem(U,F){super.unbindItem(U,F),U instanceof DU&&(this.highlightedParam.value&&U.removeHighlight("groupItemHighlight"+this.getId(),!0),this.isVisible()||U.propagateVisibility(1),U.traverse((U=>{U instanceof Be&&U.setCutawayEnabled(!1)}),!0))}clone(U){const F=new Je(this.__name+" clone");return F.copyFrom(this,U),F}}n.register("SelectionSet",Je);var Ze=eU("",null,!1);class ce extends N{constructor(U,F){super(),this.geomFileID=U,this.geomCount=F}}class me extends N{constructor(U){super(),this.range=U}}const Se=e.hardwareConcurrency-1;let We=0;const Ee=[],pe=[],ue=(U,F)=>{const e=We;if(!Ee[e]){pe[e]=new Map;const U=new Ze;U.onmessage=U=>{const F=U.data;pe[e][F.geomLibraryId](F)},Ee[e]=U}pe[e][U]=e=>{if(F(e))for(let F=0;F<pe.length;F++)pe[F][U]&&(delete pe[F][U],0==Object.keys(pe[F]).length&&(Ee[F].terminate(),Ee[F]=null))};const t=Ee[e];return We=(e+1)%Se,t};class Ne extends k{constructor(){super(),this.listenerIDs={},this.__numGeoms=-1,this.geoms=[],this.basePath="",this.__loadedCount=0,this.__streamInfos={},this.__genBuffersOpts={},this.loadCount=0,this.queue=[],this.on("streamFileParsed",(U=>{if(this.loadCount--,this.loadCount<Se&&this.queue.length){const{geomFileID:U,geomsData:F}=this.queue.pop();this.readBinaryBuffer(U,F.buffer,this.loadContext)}})),this.clear()}clear(){this.__loadedCount=0,this.__numGeoms=-1,this.geoms=[]}isLoaded(){return this.__loadedCount==this.__numGeoms}loadGeomFile(U,F=!1){return F&&nU.incrementWorkload(1),new Promise((F=>{const e=this.basePath+U+".zgeoms";nU.loadFile("archive",e).then((t=>{const Q=t[Object.keys(t)[0]],l=this.on("streamFileParsed",(e=>{e.geomFileID==U&&(nU.incrementWorkDone(1),this.removeListenerById("streamFileParsed",l),F())}));this.loadCount<Se?(this.loadCount++,this.readBinaryBuffer(e,Q.buffer,this.loadContext)):this.queue.splice(0,0,{geomFileID:U,geomsData:Q})}))}))}loadGeomFilesStream(U,F,e){const t=U.numGeomsPerFile.length;nU.incrementWorkload(t),this.__numGeoms=U.numGeoms,this.basePath=F,this.loadContext=e;for(let U=0;U<t;U++)this.loadGeomFile(U,!1)}setGenBufferOption(U,F){this.__genBuffersOpts[U]=F}setNumGeoms(U){this.__numGeoms=U}getNumGeoms(){return this.__numGeoms}getGeom(U){return U>=this.geoms.length?null:this.geoms[U]}readBinaryBuffer(U,F,t){const Q=new BU(F,0,e.isMobileDevice),l=Q.loadUInt32(),n=Q.loadUInt32();if(this.__streamInfos[U]={total:l,done:0},0==l){const F=new ce(U,0);return void this.emit("streamFileParsed",F)}-1==this.__numGeoms&&(this.__numGeoms=l);const a=Q.loadUInt32Array(l),d=Math.max(1,Math.floor(l/Se+1));let i=0;for(;i<l;){const e=a[i];let s,R;i+d>=l?(R=[i,l],s=F.byteLength):(R=[i,i+d],s=a[R[1]]);const B=F.slice(e,s);i+=d,ue(this.getId(),(U=>this.__receiveGeomDatas(U))).postMessage({geomLibraryId:this.getId(),geomFileID:U,toc:a,geomIndexOffset:n,geomsRange:R,isMobileDevice:Q.isMobileDevice,bufferSlice:B,genBuffersOpts:this.__genBuffersOpts,context:{versions:t.versions}},[B])}}__receiveGeomDatas(U){const{geomLibraryId:F,geomFileID:e,geomDatas:t,geomIndexOffset:Q,geomsRange:l}=U;if(F!=this.getId())throw new Error("Receiving workload for a different GeomLibrary");const n=Q+l[0],a=[n,Q+l[1]];for(let U=0;U<t.length;U++){const F=t[U];if(!F.type)continue;let e;switch(F.type){case"Points":e=new RF(F);break;case"Lines":e=new BF(F);break;case"Mesh":case"Plane":case"Sphere":case"Cone":e=new VF(F);break;default:throw new Error("Unsupported Geom type:")}this.geoms[n+U]=e}const d=new me(a);this.emit("rangeLoaded",d);const i=a[1]-a[0],s=this.__streamInfos[e];if(s.done+=i,s.done==s.total){const U=new ce(e,s.done);this.emit("streamFileParsed",U)}return this.__loadedCount+=i,this.__loadedCount==this.__numGeoms&&this.emit("loaded"),this.__loadedCount==this.__numGeoms}toJSON(){return{numGeoms:this.geoms.length}}toString(){return JSON.stringify(this.toJSON(),null,2)}static shutDownWorkers(){Ee.forEach(((U,F)=>{U.terminate()}))}}class ke extends k{constructor(U="MaterialLibrary"){super(),this.__images={},this.__materials={},this.name="",this.__name=U,this.lod=0,e.isMobileDevice&&(this.lod=1),this.clear()}clear(){this.__images={},this.__materials={Default:new qU("Default","SimpleSurfaceShader")}}getPath(){return[this.__name]}resolvePath(U,F=0){return null}getNumMaterials(){return Object.keys(this.__materials).length}getMaterials(){return Object.values(this.__materials)}getMaterialNames(){const U=[];for(const F in this.__materials)U.push(F);return U}hasMaterial(U){return U in this.__materials}addMaterial(U){U.setOwner(this),this.__materials[U.getName()]=U}getMaterial(U,F=!0){const e=this.__materials[U];if(!e&&F)throw new Error("Material:"+U+" not found in library:"+this.getMaterialNames());return e}hasImage(U){return U in this.__images}addImage(U){U.setOwner(this),this.__images[U.getName()]=U}getImage(U,F=!0){const e=this.__images[U];if(!e&&F)throw new Error("Image:"+U+" not found in library:"+this.getImageNames());return e}getImageNames(){const U=[];for(const F in this.__images)U.push(F);return U}load(U){const F=new XMLHttpRequest;F.open("GET",U,!0),F.ontimeout=()=>{throw new Error("The request for "+U+" timed out.")},F.onload=()=>{4===F.readyState&&(200===F.status?this.fromJSON(JSON.parse(F.responseText)):console.warn(F.statusText))},F.send(null)}toJSON(U={}){return{numMaterials:this.getNumMaterials()}}fromJSON(U,F={}){F.lod=this.lod;for(const F in U.textures){const e=new XF(F);e.fromJSON(U.textures[F]),this.__images[F]=e}for(const F in U.materials){const e=new qU(F);e.fromJSON(U.materials[F]),this.addMaterial(e)}}readBinary(U,F={}){this.name=U.loadStr(),F.lod=this.lod,F.materialLibrary=this;const e=U.loadUInt32();for(let t=0;t<e;t++){const e=U.loadStr(),t=n.constructClass(e);t.readBinary(U,F),this.__images[t.getName()]=t}const t=U.loadUInt32();if(t>0){const e=U.loadUInt32Array(t);for(let Q=0;Q<t;Q++){let t;switch(U.loadStr()){case"StandardMaterial":case"TransparentMaterial":case"StandardSurfaceShader":t=n.constructClass("StandardSurfaceMaterial");break;case"SimpleSurfaceShader":case"SimpleSurfaceMaterial":t=n.constructClass("SimpleSurfaceMaterial");break;case"PointsShader":case"PointsMaterial":t=n.constructClass("PointsMaterial");break;case"FatPointsShader":case"FatPointsMaterial":t=n.constructClass("FatPointsMaterial");break;case"LinesShader":case"LinesMaterial":t=n.constructClass("LinesMaterial");break;default:t=new qU("")}U.seek(e[Q]),t.readBinary(U,F),this.addMaterial(t)}}this.emit("loaded")}toString(){return JSON.stringify(this.toJSON(),null,2)}}const be=U=>{switch(U.toLowerCase()){case"millimeters":return.001;case"centimeters":return.01;case"decimeters":return.1;case"meters":return 1;case"kilometers":return 1e3;case"inches":return.0254;case"feet":return.3048;case"miles":return 1609.34}return 1};class Ce extends DU{constructor(U=""){super(U),this.geomLibrary=new Ne,this.materialLibrary=new ke,this.loaded=!1,this.unitsScale=1,this.units="meters"}load(U){return Promise.reject(`This method is not implemented for this Asset Item: ${U}`)}isLoaded(){return this.loaded}getEngineDataVersion(){return this.engineDataVersion}getGeometryLibrary(){return this.geomLibrary}getMaterialLibrary(){return this.materialLibrary}getUnitsConversion(){return this.unitsScale}readBinary(U,F){F.assetItem=this,F.numTreeItems=0,F.units||(F.units="meters"),F.numGeomItems=0,F.versions["zea-engine"]||(F.versions["zea-engine"]=new RU(U.loadStr())),this.engineDataVersion=F.versions["zea-engine"];const e=()=>{this.units=U.loadStr();const e=be(this.units),t=be(F.units);this.unitsScale=e/t,F.units=this.units;const Q=this.localXfoParam,l=Q.value;l.sc.scaleInPlace(this.unitsScale),Q.value=l};let t;F.versions["zea-engine"].compare([0,0,6])>0&&e();const Q={};F.addGeomToLayer=(U,F)=>{if(!Q[F]){t||(t=new DU("Layers"),this.addChild(t,!1));const U=new Je(F);t.addChild(U,!1),Q[F]=U}Q[F].addItem(U)};const l=[];F.resolvePath=(U,F,e)=>{if(!U)throw new Error("Path not specified");try{const e=this.resolvePath(U);F(e)}catch(t){l.push((()=>{try{const e=this.resolvePath(U);F(e)}catch(U){if(!e)throw U;e(U)}}))}},F.addPLCB=U=>l.push(U),this.materialLibrary.readBinary(U,F),super.readBinary(U,F),F.versions["zea-engine"].compare([0,0,5])>=0&&F.versions["zea-engine"].compare([0,0,7])<0&&e();for(const U of l)U();this.loaded=!0}toJSON(U={}){U.makeRelative=U=>{const F=this.getPath(),e=U.slice(0,F.length);for(let t=0;t<e.length-1;t++)if(e[t]!=F[t])return console.warn("Param Path is not relative to the asset. May not be able to be resolved at load time:"+U),U;const t=U.slice(F.length-1);return t[0]=".",t},U.assetItem=this;return super.toJSON(U)}fromJSON(U,F={}){F||(F={}),F.assetItem=this,F.numTreeItems=0,F.numGeomItems=0,null==F.version&&(F.version=0),F.assetItem=this;const e=[];F.resolvePath=(U,F)=>{if(!U)throw new Error("Path not specified");const t=this.resolvePath(U);t?F(t):e.push((()=>{const e=this.resolvePath(U);e?F(e):console.warn("Path unable to be resolved:"+U)}))},F.addPLCB=U=>e.push(U),super.fromJSON(U,F);for(const U of e)U()}clone(U){const F=new Ce;return F.copyFrom(this,U),F}copyFrom(U,F){this.geomLibrary=U.geomLibrary,this.materialLibrary=U.materialLibrary,this.loaded=U.loaded,U.loaded||U.once("loaded",(e=>{const t=U.localXfoParam.value,Q=this.localXfoParam.value;Q.sc=t.sc.clone(),this.localXfoParam.value=Q,U.getChildren().forEach((U=>{U&&U!=Ce&&this.addChild(U.clone(F),!1,!1)})),this.loaded=!0,this.emit("loaded",e)})),super.copyFrom(U,F)}}n.register("AssetItem",Ce);class Te extends k{constructor(U){super(),this.units=U?U.units:"meters",this.assets=U?U.assets:{},this.resources=U?U.resources:{},this.versions={},this.url="",this.folder="",this.sdk="",this.assetItem=null,this.numTreeItems=0,this.numGeomItems=0,this.postLoadCallbacks=[],this.asyncCount=0}incrementAsync(){this.asyncCount++}decrementAsync(){this.asyncCount--,0==this.asyncCount&&this.emit("done")}resolvePath(U,F,e){try{const e=this.assetItem.resolvePath(U);F(e)}catch(t){this.postLoadCallbacks.push((()=>{try{const e=this.assetItem.resolvePath(U);F(e)}catch(U){if(!e)throw new Error(U.message);e(U)}}))}}addPLCB(U){this.postLoadCallbacks.push(U)}}class Ge extends DU{constructor(U,F){super(U),this.imageParam=new NU("Image"),this.pixelsPerMeterParam=new hU("PixelsPerMeter",1e3),this.alphaParam=new hU("Alpha",1),this.colorParam=new SU("Color",new B(1,1,1)),this.alignedToCameraParam=new JU("AlignedToCamera",!1),this.drawOnTopParam=new JU("DrawOnTop",!1),this.fixedSizeOnscreenParam=new JU("FixedSizeOnscreen",!1),this.pivotParam=new ZU("Pivot",new d(.5,0));const e=this.addParameter(this.imageParam);F&&(e.value=F),this.addParameter(this.pixelsPerMeterParam),this.addParameter(this.alphaParam),this.addParameter(this.colorParam),this.addParameter(this.alignedToCameraParam),this.addParameter(this.drawOnTopParam),this.addParameter(this.fixedSizeOnscreenParam),this.addParameter(this.pivotParam)}}n.register("BillboardItem",Ge);class Xe extends DU{constructor(U="Camera"){super(U),this.isOrthographicParam=new hU("isOrthographic",0),this.fovParam=new hU("fov",1),this.nearParam=new hU("near",.1),this.farParam=new hU("far",1e3),this.focalDistanceParam=new hU("focalDistance",5),this.viewHeight=0,this.__orthoIntervalId=-1,this.__focusIntervalId=-1,this.addParameter(this.isOrthographicParam),this.addParameter(this.fovParam),this.addParameter(this.nearParam),this.addParameter(this.farParam),this.addParameter(this.focalDistanceParam);const F=U=>{this.emit("projectionParamChanged",U)};this.isOrthographicParam.on("valueChanged",F),this.fovParam.on("valueChanged",F),this.nearParam.on("valueChanged",F),this.farParam.on("valueChanged",F),this.setPositionAndTarget(new i(3,3,1.75),new i(0,0,1)),this.setLensFocalLength("28mm"),this.adjustNearAndFarPlanesToFocalDist=!0,this.nearDistFactor=.01,this.farDistFactor=100,this.frameOnBoundingSphere=!1}getNear(){return this.nearParam.value}setNear(U){this.nearParam.value=U}getFar(){return this.farParam.value}setFar(U){this.farParam.value=U}getFov(){return this.fovParam.value}setFov(U){this.fovParam.value=U}getFrustumHeight(){return this.viewHeight}setFrustumHeight(U){this.viewHeight=U,this.emit("projectionParamChanged")}setLensFocalLength(U){const F={"10mm":100.4,"11mm":95,"12mm":90,"14mm":81.2,"15mm":77.3,"17mm":70.4,"18mm":67.4,"19mm":64.6,"20mm":61.9,"24mm":53.1,"28mm":46.4,"30mm":43.6,"35mm":37.8,"45mm":29.9,"50mm":27,"55mm":24.6,"60mm":22.6,"70mm":19.5,"75mm":18.2,"80mm":17.1,"85mm":16.1,"90mm":15.2,"100mm":13.7,"105mm":13,"120mm":11.4,"125mm":11,"135mm":10.2,"150mm":9.1,"170mm":8.1,"180mm":7.6,"210mm":6.5,"300mm":4.6,"400mm":3.4,"500mm":2.7,"600mm":2.3,"800mm":1.7};U in F?this.fovParam.value=J.degToRad(F[U]):console.warn("Camera lense focal length not supported:"+U)}getFocalDistance(){return this.focalDistanceParam.value}setFocalDistance(U){U<1e-4&&console.error("Never set focal distance to zero"),this.focalDistanceParam.value=U,this.adjustNearAndFarPlanesToFocalDist&&(this.nearParam.value=U*this.nearDistFactor,this.farParam.value=U*this.farDistFactor)}isOrthographic(){return 1==this.isOrthographicParam.value}setIsOrthographic(U,F=0){if(this.__orthoIntervalId&&clearInterval(this.__orthoIntervalId),U>.5){const U=this.fovParam.value,F=this.focalDistanceParam.value;this.viewHeight=Math.sin(.5*U)*F*2}if(0==F)this.isOrthographicParam.value=U;else{const e=Math.round(F/20);let t=0;const Q=this.isOrthographicParam.value,l=()=>{const F=J.lerp(Q,U,t/e);this.isOrthographicParam.value=F,t++,t<=e?this.__orthoIntervalId=window.setTimeout(l,20):(this.__orthoIntervalId=-1,this.emit("movementFinished"))};l()}}setPositionAndTarget(U,F){this.setFocalDistance(U.distanceTo(F));const e=new c;e.setLookAt(U,F,new i(0,0,1)),this.globalXfoParam.value=e,this.emit("movementFinished")}getTargetPosition(){const U=this.focalDistanceParam.value,F=this.globalXfoParam.value,e=F.ori.getZaxis();return e.scaleInPlace(-U),e.addInPlace(F.tr),e}frameView(U,F){const e=this.focalDistanceParam.value,t=this.fovParam.value,Q=this.globalXfoParam.value.clone(),l=U.getWidth()/U.getHeight(),n=2*Math.atan(Math.tan(.5*t)*l);let a=e;if(this.frameOnBoundingSphere){const U=new W;for(const e of F)U.addBox3(e.boundingBoxParam.value);if(!U.isValid())return void console.warn("Bounding box not valid.");const l=Q.ori.getZaxis().scale(-e),n=Q.tr.add(l),d=U.center().subtract(n);Q.tr.addInPlace(d),a=U.size()/Math.tan(t)}else{const U=[];if(F.forEach((F=>{F.traverse((F=>{if(!(F instanceof DU))return!1;if(F.disableBoundingBox)return!1;if(F instanceof he){const e=F.geomParam.value;if(e){const t=e.getBoundingBox();if(t.isValid()){const e=F.geomMatParam.value;return U.push(e.transformVec3(t.p0)),U.push(e.transformVec3(new i(t.p0.x,t.p0.y,t.p1.z))),U.push(e.transformVec3(new i(t.p0.x,t.p1.y,t.p0.z))),U.push(e.transformVec3(new i(t.p1.x,t.p0.y,t.p0.z))),U.push(e.transformVec3(new i(t.p0.x,t.p1.y,t.p1.z))),U.push(e.transformVec3(new i(t.p1.x,t.p0.y,t.p1.z))),U.push(e.transformVec3(new i(t.p1.x,t.p1.y,t.p0.z))),void U.push(e.transformVec3(t.p1))}}}if(0==F.getNumChildren()){const e=F.boundingBoxParam.value;if(e.isValid())return U.push(new i(e.p0.x,e.p0.y,e.p0.z)),U.push(new i(e.p0.x,e.p0.y,e.p1.z)),U.push(new i(e.p0.x,e.p1.y,e.p0.z)),U.push(new i(e.p1.x,e.p0.y,e.p0.z)),U.push(new i(e.p0.x,e.p1.y,e.p1.z)),U.push(new i(e.p1.x,e.p0.y,e.p1.z)),U.push(new i(e.p1.x,e.p1.y,e.p0.z)),void U.push(new i(e.p1.x,e.p1.y,e.p1.z))}}))})),0==U.length)return;const e=this.isOrthographic()?0:n/2,s=this.isOrthographic()?0:t/2,R={};R.XPos=new i(Math.cos(e),0,Math.sin(e)),R.XNeg=new i(-Math.cos(e),0,Math.sin(e)),R.YPos=new i(0,Math.cos(s),Math.sin(s)),R.YNeg=new i(0,-Math.cos(s),Math.sin(s)),R.ZPos=new i(0,0,1),R.ZNeg=new i(0,0,-1);const B={},V={};for(const U in R)B[U]=Q.ori.rotateVec3(R[U]),V[U]=Number.NEGATIVE_INFINITY;const r=new i;U.forEach(((U,F)=>{if(!Number.isFinite(U.x)||!Number.isFinite(U.y)||!Number.isFinite(U.z))return;const e=U.subtract(Q.tr);for(const U in R){const F=e.dot(B[U]);F>V[U]&&F!=Number.POSITIVE_INFINITY&&(V[U]=F)}r.addInPlace(U)}));for(const U in V)if(V[U]==Number.POSITIVE_INFINITY)return;r.scaleInPlace(1/U.length);let h=0;if(this.isOrthographic()){const U=new i(.5*(-V.XNeg+V.XPos),.5*(-V.YNeg+V.YPos),.5*(-V.ZNeg+V.ZPos)),F=V.ZNeg+V.ZPos;h=2*F,U.z=-V.ZNeg+h,Q.tr.addInPlace(Q.ori.rotateVec3(U)),a=2*F;const e=V.XPos+V.XNeg,t=V.YPos+V.YNeg;this.viewHeight=Math.max(t,e/l);const n=.1;this.viewHeight+=this.viewHeight*n}else{const U=n/2,F=t/2,e=new d(Math.cos(U)*V.XPos,Math.sin(U)*V.XPos),l=e.add(new d(Math.sin(U),-Math.cos(U))),s=new d(-Math.cos(U)*V.XNeg,Math.sin(U)*V.XNeg),R=s.add(new d(-Math.sin(U),-Math.cos(U))),B=d.intersectionOfLines(e,l,s,R),o=new d(Math.cos(F)*V.YPos,Math.sin(F)*V.YPos),J=o.add(new d(Math.sin(F),-Math.cos(F))),Z=new d(-Math.cos(F)*V.YNeg,Math.sin(F)*V.YNeg),c=Z.add(new d(-Math.sin(F),-Math.cos(F))),m=d.intersectionOfLines(o,J,Z,c);if(null===B||null===m)return void console.warn("xP or yP === null");h=Math.max(B.y,m.y);const S=new i(B.x,m.x,h);Q.tr.addInPlace(Q.ori.rotateVec3(S)),a=r.distanceTo(Q.tr);const W=a*.1;Q.tr.addInPlace(Q.ori.rotateVec3(new i(0,0,W))),h+=W}if(this.adjustNearAndFarPlanesToFocalDist){V.ZPos-=h,V.ZNeg+=h;const U=V.ZNeg*this.nearDistFactor,F=-V.ZPos*this.farDistFactor;this.nearParam.value=U,this.farParam.value=F}}this.setFocalDistance(a),this.globalXfoParam.value=Q,this.emit("movementFinished")}updateProjectionMatrix(U,F){const e=this.isOrthographicParam.value,t=this.fovParam.value,Q=this.nearParam.value,l=this.farParam.value,n=new h;if(e>0){const U=.5*this.viewHeight,e=-U,t=U,a=U*-F,d=U*F;n.setOrthographicMatrix(a,d,e,t,Q,l)}e<1&&U.setPerspectiveMatrix(t,F,Q,l),1==e?U.setFromMat4(n):e>0&&U.set(J.lerp(U.m00,n.m00,e),J.lerp(U.m01,n.m01,e),J.lerp(U.m02,n.m02,e),J.lerp(U.m03,n.m03,e),J.lerp(U.m10,n.m10,e),J.lerp(U.m11,n.m11,e),J.lerp(U.m12,n.m12,e),J.lerp(U.m13,n.m13,e),J.lerp(U.m20,n.m20,e),J.lerp(U.m21,n.m21,e),J.lerp(U.m22,n.m22,e),J.lerp(U.m23,n.m23,e),J.lerp(U.m30,n.m30,e),J.lerp(U.m31,n.m31,e),J.lerp(U.m32,n.m32,e),J.lerp(U.m33,n.m33,e))}}n.register("Camera",Xe);class ge extends IU{constructor(U,F){super(),this.bindXfo=new c,this.invBindXfo=new c,this.groupGlobalXfo=new fU("GroupGlobalXfo"),this.groupTransformXfo=new gU("GroupTransformXfo"),this.groupGlobalXfo.setParam(U),this.groupTransformXfo.setParam(F),this.addInput(this.groupGlobalXfo),this.addOutput(this.groupTransformXfo)}setBindXfo(U){this.bindXfo=U,this.invBindXfo=U.inverse(),this.setDirty()}evaluate(){if(this.invBindXfo){const U=this.groupGlobalXfo.getValue();this.groupTransformXfo.setClean(U.multiply(this.invBindXfo))}else this.groupTransformXfo.setClean(new c)}}class ye extends IU{constructor(F,e){super(),this.groupTransformXfo=new fU("GroupTransformXfo"),this.memberGlobalXfo=new gU("MemberGlobalXfo",U.OperatorOutputMode.OP_READ_WRITE),this.groupTransformXfo.setParam(F),this.memberGlobalXfo.setParam(e),this.addInput(this.groupTransformXfo),this.addOutput(this.memberGlobalXfo),this._enabled=!0}disable(){this._enabled=!1,this.setDirty()}enable(){this._enabled=!0,this.setDirty()}evaluate(){const U=this.memberGlobalXfo.getValue();if(this._enabled){const F=this.groupTransformXfo.getValue();this.memberGlobalXfo.setClean(F.multiply(U))}else this.memberGlobalXfo.setClean(U)}}const Ie={disabled:0,manual:1,first:2,average:3,globalOri:4};class xe extends oe{constructor(U=""){super(U),this.initialXfoModeParam=new oU("InitialXfoMode",Ie.average,["manual","first","average","global"]),this.groupTransformParam=new uU("GroupTransform",new c),this.calculatingGroupXfo=!1,this.memberXfoOps=[],this.addParameter(this.initialXfoModeParam),this.initialXfoModeParam.on("valueChanged",(()=>{this.calcGroupXfo()})),this.addParameter(this.groupTransformParam),this.groupTransformOp=new ge(this.globalXfoParam,this.groupTransformParam)}static get INITIAL_XFO_MODES(){return Ie}updateHighlight(){setTimeout((()=>{let U,F=!1;this.isSelected()&&(F=!0,U=this.getHighlight(),U.a=.2);const e="kinematicGroupItemHighlight"+this.getId();Array.from(this.itemsParam.value).forEach((t=>{t instanceof DU&&(F?t.addHighlight(e,U,!0):t.removeHighlight(e,!0))}))}),1)}setSelected(U){super.setSelected(U),this.updateHighlight()}calcGroupXfo(){const U=Array.from(this.itemsParam.value);if(0==U.length)return;this.calculatingGroupXfo=!0,this.memberXfoOps.forEach((U=>U.disable()));const F=this.initialXfoModeParam.value;let e;if(F==Ie.manual)e=this.globalXfoParam.value;else if(F==Ie.first&&U[0]instanceof DU)e=U[0].globalXfoParam.value;else if(F==Ie.average){e=new c,e.ori.set(0,0,0,0);let F=0;U.forEach(((U,t)=>{if(U instanceof DU){const t=U.globalXfoParam.value;e.tr.addInPlace(t.tr),e.ori.addInPlace(t.ori),F++}})),e.tr.scaleInPlace(1/F),e.ori.normalizeInPlace()}else{if(F!=Ie.globalOri)throw new Error("Invalid GROUP_XFO_MODES.");{e=new c;let F=0;U.forEach(((U,t)=>{if(U instanceof DU){const t=U.globalXfoParam.value;e.tr.addInPlace(t.tr),F++}})),e.tr.scaleInPlace(1/F)}}this.globalXfoParam.value=e,this.groupTransformOp.setBindXfo(e),this.memberXfoOps.forEach((U=>U.enable())),this.calculatingGroupXfo=!1}bindItem(U,F){if(super.bindItem(U,F),U instanceof DU){if(this.isSelected()){const F=this.getHighlight();F.a=.2;const e="kinematicGroupItemHighlight"+this.getId();U.addHighlight(e,F,!0)}{const e=U.globalXfoParam,t=new ye(this.groupTransformParam,e);this.memberXfoOps.splice(F,0,t),this.__itemsEventHandlers[F]||(this.__itemsEventHandlers[F]={});this.__itemsEventHandlers[F]["BoundingBox.valueChanged"]=U.boundingBoxParam.on("valueChanged",(U=>{this.setBoundingBoxDirty()}))}}}unbindItem(U,F){if(super.unbindItem(U,F),U instanceof DU){if(this.isSelected()){const F="kinematicGroupItemHighlight"+this.getId();U.removeHighlight(F,!0)}this.memberXfoOps[F].detach(),this.memberXfoOps.splice(F,1),this.setBoundingBoxDirty()}}addItem(U,F=!0){super.addItem(U,F),F&&this.calcGroupXfo()}removeItem(U,F=!0){super.removeItem(U,F),F&&this.calcGroupXfo()}setItems(U){super.setItems(U),this.calcGroupXfo()}clearItems(U=!0){super.clearItems(U),this.memberXfoOps=[],U&&this.calcGroupXfo()}loadDone(){this.calculatingGroupXfo=!0,this.calcGroupXfo(),this.calculatingGroupXfo=!1}clone(U){const F=new xe;return F.copyFrom(this,U),F}}n.register("KinematicGroup",xe);class fe extends oe{constructor(U){super(U),this.materialParam=new $U("Material"),this.__backupMaterials={},this.addParameter(this.materialParam),this.materialParam.on("valueChanged",(()=>{this.__updateMaterial()}))}updateHighlight(){this.__updateHighlightHelper()}__updateHighlightHelper(){let U,F=!1;this.isSelected()&&(U=this.getHighlight(),F=!0,U.a=.2);const e="kinematicGroupItemHighlight"+this.getId();Array.from(this.itemsParam.value).forEach((t=>{t instanceof DU&&(F?t.addHighlight(e,U,!0):t.removeHighlight(e,!0))}))}setSelected(U){super.setSelected(U),this.updateHighlight()}__updateMaterial(){this.__updateMaterialHelper()}__updateMaterialHelper(){const U=this.materialParam.value;Array.from(this.itemsParam.value).forEach((F=>{F.traverse((F=>{if(F instanceof Be){const e=F.materialParam;if(U){const F=e.value;F==U||F&&"LinesShader"==F.getShaderName()||(this.__backupMaterials[e.getId()]=F,e.value=U)}else this.__backupMaterials[e.getId()]&&(e.value=this.__backupMaterials[e.getId()])}}))}))}bindItem(U,F){if(super.bindItem(U,F),!(U instanceof DU))return;if(this.isSelected()){const F=this.getHighlight();F.a=.2;const e="materialGroupItemHighlight"+this.getId();U.addHighlight(e,F,!0)}const e=this.materialParam.value;e&&U.traverse((U=>{if(U instanceof Be){const F=U.materialParam;if(e){const U=F.value;U==e||U&&"LinesShader"==U.getShaderName()||(this.__backupMaterials[F.getId()]=U,F.value=e)}}}),!0)}__unbindItem(U,F){if(super.unbindItem(U,F),U instanceof DU&&this.isSelected()){const F="materialGroupItemHighlight"+this.getId();U.removeHighlight(F,!0)}}clone(U){const F=new fe(this.__name+"clone");return F.copyFrom(this,U),F}}n.register("MaterialGroup",fe);class Me extends IU{constructor(U,F){super(),this.groupGlobalXfo=new fU("GroupGlobalXfo"),this.cuttingPlane=new XU("CuttingPlane"),this.groupGlobalXfo.setParam(U),this.cuttingPlane.setParam(F),this.addInput(this.groupGlobalXfo),this.addOutput(this.cuttingPlane)}evaluate(){const U=this.groupGlobalXfo.getValue(),F=U.ori.getZaxis(),e=U.tr.dot(F);this.cuttingPlane.setClean(new s(F.x,F.y,F.z,-e))}}class ve extends oe{constructor(U=""){super(U),this.cutAwayEnabledParam=new JU("CutAwayEnabled",!1),this.cutPlaneParam=new mU("CutPlane",new s(1,0,0)),this.addParameter(this.cutAwayEnabledParam),this.addParameter(this.cutPlaneParam),this.cutPlaneOp=new Me(this.globalXfoParam,this.cutPlaneParam),this.cutAwayEnabledParam.on("valueChanged",(U=>{this.updateCutaway(U)})),this.cutPlaneParam.on("valueChanged",(U=>{this.updateCutaway(U)}));const F=new qU("plane","FlatSurfaceShader");F.getParameter("BaseColor").value=new B(1,1,1,.2);const e=new he("PlaneGeom",new kF(1,1),F);e.setSelectable(!1),this.addChild(e);const t=new qU("border","LinesShader");t.getParameter("BaseColor").value=new B(1,0,0,1);const Q=new he("BorderGeom",new ZF(1,1),t);Q.setSelectable(!1),this.addChild(Q)}updateCutaway(U){const F=this.cutAwayEnabledParam.value,e=this.cutPlaneParam.value,t=e.xyz,Q=e.w;U instanceof Be?(U.setCutawayEnabled(F),U.setCutVector(t),U.setCutDist(Q)):Array.from(this.itemsParam.value).forEach((U=>{U.traverse((U=>{U instanceof Be&&(U.setCutawayEnabled(F),U.setCutVector(t),U.setCutDist(Q))}),!0)}))}bindItem(U,F){if(!(U instanceof DU))return;this.cutAwayEnabledParam.value&&this.updateCutaway(U);const e=new W;Array.from(this.itemsParam.value).forEach((U=>{U instanceof DU&&e.addBox3(U.boundingBoxParam.value)}));{const U=e.p1.x-e.p0.x,F=e.p1.y-e.p0.y,t=new c;t.sc.set(U,F,1),this.getChild(0).localXfoParam.value=t,this.getChild(1).localXfoParam.value=t}}unbindItem(U,F){U instanceof DU&&U.traverse((U=>{U instanceof Be&&U.setCutawayEnabled(!1)}),!0)}clone(U){const F=new ve;return F.copyFrom(this,U),F}}n.register("CuttingPlane",ve);class De extends DU{constructor(U=5,F=50,e=new B("#DCDCDC")){super("GridTree"),this.disableBoundingBox=!0,this.setSelectable(!1);const t=new qU("gridMaterial","LinesShader");t.getParameter("BaseColor").value=e,t.getParameter("Overlay").value=0,t.getParameter("StippleValue").value=0,t.getParameter("OccludedStippleValue").value=1;const Q=new WF(U,U,F,F,!0),l=new he("GridItem",Q,t);l.setSelectable(!1),this.addChild(l,!1);const n=new dF;n.setNumVertices(2),n.setNumSegments(1),n.setSegmentVertexIndices(0,0,1);const a=n.getVertexAttribute("positions");a.getValueRef(0).set(-.5*U,0,0),a.getValueRef(1).set(.5*U,0,0);const d=new qU("gridXAxisMaterial","LinesShader");d.getParameter("BaseColor").value=new B(e.luminance(),0,0),d.getParameter("Overlay").value=0,d.getParameter("StippleValue").value=0,d.getParameter("OccludedStippleValue").value=1;const s=new he("xAxisLine",n,d);s.setSelectable(!1),this.addChild(s,!1);const R=new qU("gridYAxisMaterial","LinesShader");R.getParameter("BaseColor").value=new B(0,e.luminance(),0),R.getParameter("Overlay").value=0,R.getParameter("StippleValue").value=0,R.getParameter("OccludedStippleValue").value=1,R.setSelectable(!1);const V=new he("yAxisLine",n,R);V.setSelectable(!1);const r=new c;r.ori.setFromAxisAndAngle(new i(0,0,1),.5*Math.PI),V.geomOffsetXfoParam.value=r,this.addChild(V,!1);const h=this._cleanBoundingBox(this.boundingBoxParam.value);this.boundingBoxParam.value=h}_cleanBoundingBox(U){return U.reset(),U}}n.register("GridTreeItem",De);const Le=new B("#DCDCDC");class Ye extends Ce{constructor(U){super(U),this.geomLibrary.on("loaded",(()=>{this.emit("geomsLoaded")}))}readBinary(U,F){F.versions["zea-engine"]||(F.versions["zea-mesh"]=new RU(U.loadStr()));const e=U.loadUInt32();return super.readBinary(U,F),F.versions["zea-engine"].compare([2,1,0])<0&&U.loadFloat32Vec2(),this.geomLibrary.setNumGeoms(U.loadUInt32()),e}load(U,F=new Te){return new Promise(((t,Q)=>{const l=U.lastIndexOf("/")>-1?U.substring(0,U.lastIndexOf("/"))+"/":"",n=U.lastIndexOf("/")>-1?U.substring(U.lastIndexOf("/")+1):"",a=n.substring(0,n.lastIndexOf("."));let d=0;F.assetItem=this,F.url=U,F.folder=l,nU.incrementWorkload(1),this.geomLibrary.on("loaded",(()=>{nU.incrementWorkDone(1)})),nU.loadFile("archive",U).then((U=>{let Q;if(U.tree2)Q=new BU(U.tree2.buffer,0,e.isMobileDevice);else{const t=U.tree?U.tree:U[Object.keys(U)[0]];Q=new BU(t.buffer,0,e.isMobileDevice),F.versions["zea-engine"]=new RU}if(d=this.readBinary(Q,F),this.loaded=!0,this.emit("loaded"),0==d&&U.geoms)this.geomLibrary.readBinaryBuffer(n,U.geoms.buffer,F);else{const U=l+a,e={numGeomsPerFile:d,numGeoms:this.geomLibrary.getNumGeoms()};this.geomLibrary.loadGeomFilesStream(e,U,F)}t()}),(U=>{this.emit("error",U),Q(U)}))}))}}
/*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
function _e(U,F,e,t){return new(e||(e=Promise))((function(Q,l){function n(U){try{d(t.next(U))}catch(U){l(U)}}function a(U){try{d(t.throw(U))}catch(U){l(U)}}function d(U){var F;U.done?Q(U.value):(F=U.value,F instanceof e?F:new e((function(U){U(F)}))).then(n,a)}d((t=t.apply(U,F||[])).next())}))}n.register("VLAAsset",Ye);class we extends K{constructor(){super(),this.__activated=!1}activateTool(){if(this.__activated)throw new Error("Tool already activate");this.__activated=!0,this.emit("activatedChanged",{activated:this.__activated})}deactivateTool(){this.__activated=!1,this.emit("activatedChanged",{activated:this.__activated})}onPointerDown(U){}onPointerMove(U){}onPointerUp(U){}onPointerDoublePress(U){}onPointerEnter(U){}onPointerLeave(U){}onWheel(U){}onKeyDown(U){}onKeyUp(U){}onTouchCancel(U){}}const ze={OPAQUE:1,TRANSPARENT:2,OVERLAY:4};class Ke extends K{constructor(){super(),this.enabled=!0,this.passIndex=-1,this.__gl=null,this.renderer=null,this.__renderer=null,this.enabledParam=new JU("Enabled",!0),this.enabled=!0,this.passIndex=0,this.addParameter(this.enabledParam),this.enabledParam.on("valueChanged",(()=>this.enabled=this.enabledParam.value))}parameterValueChanged(U){super.parameterValueChanged(U),this.renderer&&this.renderer.requestRedraw()}init(U,F){if(null==F)throw new Error("Missing constructor argument.");this.__gl=U.gl,this.renderer=U,this.__renderer=U,this.passIndex=F}setPassIndex(U){this.passIndex=U}getPassType(){return ze.OPAQUE}itemAddedToScene(U,F){throw Error(`${this.constructor.name} must implement itemAddedToScene and itemRemovedFromScene`)}itemRemovedFromScene(U,F){throw Error(`${this.constructor.name} must implement itemAddedToScene and itemRemovedFromScene`)}startPresenting(){}stopPresenting(){}draw(U){throw Error("draw not implemented on GLPass")}drawHighlightedGeoms(U){}drawGeomData(U){}getGeomItemAndDist(U){throw Error("getGeomItemAndDist not implemented on GLPass")}}const He={pan:0,dolly:1,focussing:2,look:3,turntable:4,tumbler:5,trackball:6};class Pe extends we{constructor(U){super(),this.__mouseWheelMovementDist=0,this.__mouseWheelZoomCount=0,this.__mouseWheelZoomId=-1,this.orbitRateParam=new hU("OrbitRate",e.isMobileDevice?.5:1),this.dollySpeedParam=new hU("DollySpeed",.02),this.mouseWheelDollySpeedParam=new hU("MouseWheelDollySpeed",.1),this.orbitAroundCursor=new JU("OrbitAroundCursor",!0),this.walkSpeedParam=new hU("WalkSpeed",5),this.walkModeCollisionDetection=new JU("WalkModeCollisionDetection",!1),this.appData=U,this.__defaultManipulationState=He.turntable,this.__manipulationState=this.__defaultManipulationState,this.__pointerDown=!1,this.__dragging=0,this.aimFocusOnTouchTap=1,this.aimFocusOnMouseClick=2,this.enabledWASDWalkMode=!1,this.__keyboardMovement=!1,this.__keysPressed=[],this.__velocity=new i,this.__prevVelocityIntegrationTime=-1,this.__ongoingTouches={},this.addParameter(this.orbitRateParam),this.addParameter(this.dollySpeedParam),this.addParameter(this.mouseWheelDollySpeedParam),this.addParameter(this.orbitAroundCursor),this.addParameter(this.walkSpeedParam),this.addParameter(this.walkModeCollisionDetection)}activateTool(){super.activateTool(),this.appData&&this.appData.renderer&&(this.prevCursor=this.appData.renderer.getGLCanvas().style.cursor,this.appData.renderer.getGLCanvas().style.cursor="cursor")}deactivateTool(){super.deactivateTool(),this.appData&&this.appData.renderer&&(this.appData.renderer.getGLCanvas().style.cursor=this.appData.renderer.getGLCanvas().style.cursor)}setDefaultManipulationMode(U){if(this.__defaultManipulationState="string"==typeof U?He[U]:U,!Object.values(He).includes(this.__defaultManipulationState))throw new Error("Invalid Camera Manipulation Mode. Must be one of "+Object.keys(He))}look(U,F){const{viewport:e}=U,t=e.getCamera(),Q=this.orbitRateParam.value,l=t.globalXfoParam.value,n=new o;n.rotateZ(F.x/e.getWidth()*Math.PI*Q),l.ori=n.multiply(l.ori);const a=new o;a.rotateX(F.y/e.getHeight()*Math.PI*Q),l.ori.multiplyInPlace(a),t.globalXfoParam.value=l}turntable(U,F){const{viewport:e}=U,t=e.getCamera(),Q=this.orbitRateParam.value,l=t.globalXfoParam.value,n=l.ori.inverse().rotateVec3(l.tr.subtract(this.__orbitTarget)),a=new o;a.rotateZ(F.x/e.getWidth()*2*Math.PI*-Q),l.ori=a.multiply(l.ori);const d=new o;d.rotateX(F.y/e.getHeight()*Math.PI*-Q),l.ori.multiplyInPlace(d),l.tr=this.__orbitTarget.add(l.ori.rotateVec3(n)),t.globalXfoParam.value=l}tumbler(U,F){const{viewport:e}=U,t=e.getCamera(),Q=this.orbitRateParam.value,l=t.globalXfoParam.value,n=l.ori.getXaxis(),a=l.ori.getYaxis(),d=l.ori.getZaxis(),i=n.scale(-F.x).add(a.scale(F.y)).cross(d);i.normalizeInPlace();const s=F.length(),R=l.ori.inverse().rotateVec3(l.tr.subtract(this.__orbitTarget)),B=new o;B.setFromAxisAndAngle(i,s/e.getWidth()*Math.PI*-Q),l.ori=B.multiply(l.ori),l.tr=this.__orbitTarget.add(l.ori.rotateVec3(R)),t.globalXfoParam.value=l}trackball(U,F){const{viewport:e}=U,t=e.getCamera(),Q=this.orbitRateParam.value,l=t.globalXfoParam.value,n=l.ori.getXaxis(),a=l.ori.getYaxis(),d=l.ori.getZaxis(),i=n.scale(-F.x).add(a.scale(F.y)).cross(d);i.normalizeInPlace();const s=F.length(),R=l.ori.inverse().rotateVec3(l.tr.subtract(this.__orbitTarget)),B=new o;B.setFromAxisAndAngle(i,s/e.getWidth()*Math.PI*-Q),l.ori=B.multiply(l.ori),l.tr=this.__orbitTarget.add(l.ori.rotateVec3(R)),t.globalXfoParam.value=l}pan(U,F){const{viewport:e}=U,t=e.getCamera(),Q=new c,l=new i(1,0,0),n=new i(0,1,0);if(t.isOrthographic()){const U=t.getFrustumHeight(),a=U*(e.getWidth()/e.getHeight());Q.tr=l.scale(-F.x/e.getWidth()*a),Q.tr.addInPlace(n.scale(F.y/e.getHeight()*U))}else{const U=t.getFocalDistance(),a=t.getFov(),d=2*U*Math.tan(.5*a),i=d*(e.getWidth()/e.getHeight());Q.tr=l.scale(-F.x/e.getWidth()*i),Q.tr.addInPlace(n.scale(F.y/e.getHeight()*d))}const a=t.globalXfoParam.value;t.globalXfoParam.value=a.multiply(Q)}dolly(U,F){const{viewport:e}=U,t=e.getCamera(),Q=t.getFocalDistance(),l=()=>{const U=F.y*this.dollySpeedParam.value*Q,e=new c;e.tr.set(0,0,U);const l=t.globalXfoParam.value;t.globalXfoParam.value=l.multiply(e)},n=()=>{const U=F.y*this.dollySpeedParam.value,e=t.getFrustumHeight(),Q=e*U;t.setFrustumHeight(e+Q)};t.isOrthographic()?n():l()}initDrag(U){const{pointerPos:F}=U;U.setCapture(this),this.__pointerDown=!0;const{viewport:e}=U,t=e.getCamera(),Q=t.globalXfoParam.value,l=this.orbitAroundCursor.value;if(null!=U.intersectionData&&l){this.__orbitTarget=U.intersectionData.intersectionPos;const F=Q.inverse().transformVec3(U.intersectionData.intersectionPos);t.setFocalDistance(-F.z)}else this.__orbitTarget=Q.tr.add(Q.ori.getZaxis().scale(-t.getFocalDistance()));this.__prevPointerPos=F,this.__dragging=1}endDrag(U){U.getCapture()==this&&U.releaseCapture(),this.__dragging=0,this.__pointerDown=!1}aimFocus(U,F,e=-1,t=400){this.__focusIntervalId&&clearInterval(this.__focusIntervalId);const Q=Math.round(t/20),l=this.__manipulationState;let n=0;const a=()=>{const t=U.globalXfoParam.value,d=U.getFocalDistance(),i=F.subtract(t.tr),s=i.normalizeInPlace(),R=t.clone();if(l==He.turntable||l==He.look){{const U=t.ori.getZaxis().clone();U.z=0;const F=i.negate();F.z=0;const e=new o;e.setFrom2Vectors(U,F),R.ori=e.multiply(R.ori)}{const U=t.ori.getXaxis().clone(),F=t.ori.getZaxis().clone(),e=i.negate();e.subtractInPlace(U.scale(e.dot(U))),e.normalizeInPlace();const Q=new o;F.cross(e).dot(U)>0?Q.rotateX(F.angleTo(e)):Q.rotateX(-F.angleTo(e)),R.ori=R.ori.multiply(Q)}{const U=R.ori.getXaxis().clone(),F=U.clone();F.z=0,F.normalizeInPlace();const e=new o;e.setFrom2Vectors(U,F),R.ori=e.multiply(R.ori)}}else{const U=t.ori.getZaxis().clone(),F=i.negate(),e=new o;e.setFrom2Vectors(U,F),R.ori=e.multiply(R.ori)}const B=Math.pow(n/Q,2),V=t.clone();if(V.ori=t.ori.lerp(R.ori,B),e>0){const U=i.scale(s-e);V.tr.addInPlace(U.scale(B))}U.setFocalDistance(d+(s-d)*B),U.globalXfoParam.value=V,n++,n<=Q?this.__focusIntervalId=setTimeout(a,20):(this.__focusIntervalId=void 0,this.emit("movementFinished"),U.emit("movementFinished"))};a()}orientPointOfView(U,F,e,t=0,Q=400){this.__focusIntervalId&&clearInterval(this.__focusIntervalId);const l=Math.round(Q/20);let n=0;const a=()=>{const Q=U.globalXfoParam.value,d=U.getTargetPosition(),i=Math.pow(n/l,2),s=F.subtract(Q.tr),R=s.normalizeInPlace(),B=s.scale(R-t),V=Q.tr.add(B.scale(i)),r=d.lerp(e,i);U.setPositionAndTarget(V,r),n++,n<=l?this.__focusIntervalId=setTimeout(a,20):(this.__focusIntervalId=void 0,this.emit("movementFinished"),U.emit("movementFinished"))};a()}onPointerDoublePress(U){const F=F=>{const e=U.viewport.getCamera(),t=e.globalXfoParam.value.tr.add(F.dir.scale(U.intersectionData.dist));this.aimFocus(e,t),U.aimTarget=t,U.aimDistance=U.intersectionData.dist,this.emit("aimingFocus",U),e.emit("aimingFocus",U),U.stopPropagation()};if(U.intersectionData&&this.aimFocusOnMouseClick){if(U.pointerType===X.mouse&&2==this.aimFocusOnMouseClick){const e=U;F(e.pointerRay),e.preventDefault()}if(U.pointerType===X.touch&&2==this.aimFocusOnTouchTap){F(U.pointerRay)}}}onPointerDown(U){if(U.pointerType===X.mouse){1==this.__dragging&&this.endDrag(U),this.initDrag(U);const F=U;2==F.button?this.__manipulationState=He.pan:F.ctrlKey&&F.altKey?this.__manipulationState=He.dolly:F.ctrlKey||2==F.button?this.__manipulationState=He.look:this.__manipulationState=this.__defaultManipulationState,F.preventDefault()}else U.pointerType===X.touch&&this._onTouchStart(U);U.stopPropagation()}onPointerMove(U){0!=this.__dragging&&(U.pointerType===X.mouse&&this._onMouseMove(U),U.pointerType===X.touch&&this._onTouchMove(U),this.__dragging=2,U.stopPropagation())}_onMouseMove(U){if(!this.__pointerDown)return;const F=U.pointerPos,e=F.subtract(this.__prevPointerPos);switch(this.__manipulationState){case He.turntable:this.turntable(U,e);break;case He.tumbler:this.tumbler(U,e);break;case He.trackball:this.trackball(U,e);break;case He.look:this.look(U,e);break;case He.pan:this.pan(U,F.subtract(this.__prevPointerPos));break;case He.dolly:this.dolly(U,e)}this.__prevPointerPos=F,U.preventDefault()}_onTouchMove(U){const F=U.touches;if(1==F.length){const e=F[0],t=new d(e.clientX,e.clientY),Q=this.__ongoingTouches[e.identifier];if(!Q)return;const l=t.subtract(Q.pos);switch(this.__defaultManipulationState){case He.look:l.scaleInPlace(6),this.look(U,l);break;case He.turntable:this.turntable(U,l);break;case He.tumbler:this.tumbler(U,l);break;case He.trackball:this.trackball(U,l)}Q.pos=t}else if(2==F.length){const e=F[0],t=this.__ongoingTouches[e.identifier],Q=F[1],l=this.__ongoingTouches[Q.identifier];if(!t||!l)return;const n=new d(e.clientX,e.clientY),a=new d(Q.clientX,Q.clientY),s=l.pos.subtract(t.pos).length()-a.subtract(n).length(),R=n.subtract(t.pos),B=a.subtract(l.pos),V=R.add(B);V.scaleInPlace(.5);const r=.002*s,{viewport:h}=U,J=h.getCamera(),Z=J.getFocalDistance(),m=J.getFov(),S=new i(1,0,0),W=new i(0,1,0),E=2*Z*Math.tan(.5*m),p=E*(h.getWidth()/h.getHeight()),u=new c;u.tr=S.scale(-V.x/h.getWidth()*p),u.tr.addInPlace(W.scale(V.y/h.getHeight()*E));const N=r*Z;switch(J.setFocalDistance(Z+N),u.tr.z+=N,this.__defaultManipulationState){case He.tumbler:case He.trackball:const U=l.pos.subtract(t.pos),F=a.subtract(n);let e=U.normalize().angleTo(F.normalize());U.cross(F)<0&&(e=-e);const Q=new o;Q.rotateZ(e),u.ori.multiplyInPlace(Q)}const k=J.globalXfoParam.value;J.globalXfoParam.value=k.multiply(u),t.pos=n,l.pos=a}}onPointerUp(U){if(1==this.__dragging){if(this.endDrag(U),U.intersectionData&&(U.pointerType===X.mouse&&1==this.aimFocusOnMouseClick||U.pointerType===X.touch&&1==this.aimFocusOnTouchTap)){const F=U.viewport.getCamera(),e=F.globalXfoParam.value,t=(U.pointerType,U.pointerRay),Q=e.tr.add(t.dir.scale(U.intersectionData.dist));this.aimFocus(F,Q),U.aimTarget=Q,U.aimDistance=U.intersectionData.dist,this.emit("aimingFocus",U),F.emit("aimingFocus",U),U.stopPropagation(),U.pointerType===X.mouse&&U.preventDefault()}}else if(2==this.__dragging){if(U.pointerType===X.mouse){this.endDrag(U),this.emit("movementFinished");U.viewport.getCamera().emit("movementFinished")}else if(U.pointerType===X.touch){const F=U,{changedTouches:e,touches:t}=F;for(let U=0;U<e.length;U++)this.__endTouch(e[U]);0==Object.keys(this.__ongoingTouches).length?this.endDrag(U):t.length||(this.endDrag(U),this.__ongoingTouches={}),F.preventDefault()}U.stopPropagation()}}onPointerEnter(U){}onPointerLeave(U){this.__keysPressed.length>0&&(this.__keysPressed=[],this.__velocity.set(0,0,0),this.__keyboardMovement=!1)}onWheel(U){const F=U.viewport.getCamera(),e=this.mouseWheelDollySpeedParam.value,t=U.shiftKey?.1:.5,Q=F.globalXfoParam.value;let l;if(!F.isOrthographic())if(null!=U.intersectionData){l=Q.tr.subtract(U.intersectionData.intersectionPos),l.normalizeInPlace();const e=Q.inverse().transformVec3(U.intersectionData.intersectionPos);F.setFocalDistance(-e.z)}else l=Q.ori.getZaxis();const n=U.deltaY<0?-1:1,a=()=>{const U=F.getFocalDistance(),e=U*this.__mouseWheelMovementDist;Q.tr.addInPlace(l.scale(e)),F.setFocalDistance(U+e),F.globalXfoParam.value=Q,this.__mouseWheelZoomCount++,this.__mouseWheelZoomCount<6?this.__mouseWheelZoomId=window.setTimeout(a,10):(this.__mouseWheelZoomId=-1,this.emit("movementFinished"),F.emit("movementFinished"))},d=()=>{const e=F.getFrustumHeight(),t=e*this.__mouseWheelMovementDist;if(F.setFrustumHeight(e+t),U.intersectionData){const l=Q.tr.subtract(U.intersectionData.intersectionPos),n=Q.ori.getZaxis();l.subtractInPlace(n.scale(l.dot(n))),Q.tr.addInPlace(l.scale(t/(e+t))),F.globalXfoParam.value=Q}this.__mouseWheelZoomCount++,this.__mouseWheelZoomCount<6?this.__mouseWheelZoomId=window.setTimeout(d,10):(this.__mouseWheelZoomId=-1,this.emit("movementFinished"),F.emit("movementFinished"))};this.__mouseWheelZoomId>0?(this.__mouseWheelMovementDist+=n*e*t*.5/6,this.__mouseWheelZoomCount=0):(this.__mouseWheelMovementDist=n*e*t/6,this.__mouseWheelZoomCount=0,F.isOrthographic()?d():a()),U.preventDefault(),U.stopPropagation()}integrateVelocityChange(U){const{viewport:F}=U,e=F.getCamera(),t=performance.now();if(this.__prevVelocityIntegrationTime>0){const U=(t-this.__prevVelocityIntegrationTime)/1e3,Q=this.walkSpeedParam.value;if(Q>0){const t=new c;t.tr=this.__velocity.normalize().scale(Q*U);const l=e.globalXfoParam.value.multiply(t);if(this.walkModeCollisionDetection.value){const U=1.5,e=1.5,t=.5,Q=new c(l.tr),n=new Z(l.tr,new i(0,0,-1)),a=F.getRenderer().raycastCluster(Q,n,e,t,ze.OPAQUE);if(a.length>0){let F=0;a.forEach((U=>{F+=U.dist})),F/=a.length,l.tr=n.start.add(n.dir.scale(F-U))}}e.globalXfoParam.value=l}}this.__prevVelocityIntegrationTime=t}onKeyDown(U){if(!this.enabledWASDWalkMode)return;const F=U.key.toLowerCase();if(!this.__keysPressed.includes(F)){switch(F){case"w":this.__velocity.z-=1;break;case"s":this.__velocity.z+=1;break;case"a":this.__velocity.x-=1;break;case"d":this.__velocity.x+=1;break;default:return}if(U.stopPropagation(),this.__keysPressed.push(F),!this.__keyboardMovement){this.__keyboardMovement=!0,this.__prevVelocityIntegrationTime=performance.now();const F=()=>{this.integrateVelocityChange(U),this.__keyboardMovement&&window.requestAnimationFrame(F)};window.requestAnimationFrame(F)}}}onKeyUp(U){const F=U.key.toLowerCase();if(!this.__keysPressed.includes(F))return;switch(F){case"w":this.__velocity.z+=1;break;case"s":this.__velocity.z-=1;break;case"a":this.__velocity.x+=1;break;case"d":this.__velocity.x-=1;break;default:return}U.stopPropagation();const e=this.__keysPressed.indexOf(F);this.__keysPressed.splice(e,1),0==this.__keysPressed.length&&(this.__keyboardMovement=!1)}__startTouch(U){this.__ongoingTouches[U.identifier]={identifier:U.identifier,pos:new d(U.clientX,U.clientY)}}__endTouch(U){delete this.__ongoingTouches[U.identifier]}_onTouchStart(U){const F=U.changedTouches;for(let U=0;U<F.length;U++)this.__startTouch(F[U]);this.initDrag(U)}onTouchEnd(U){U.preventDefault(),U.stopPropagation();const F=U.changedTouches;for(let U=0;U<F.length;U++)this.__endTouch(F[U]);0==Object.keys(this.__ongoingTouches).length&&this.endDrag(U)}onTouchCancel(U){U.preventDefault();const F=U.touches;for(let U=0;U<F.length;U++)this.__endTouch(F[U]);0==Object.keys(this.__ongoingTouches).length&&this.endDrag(U)}static get MANIPULATION_MODES(){return He}}const Oe=function(U,F){let e=null;if(null!=F.webglContextType)try{e=U.getContext(F.webglContextType,F),e.name=F.webglContextType}catch(U){}else{const t=["webgl2","webgl"];for(let Q=0;Q<t.length;Q++){const l=t[Q];try{e=U.getContext(l,F),e.name=l}catch(U){}if(e)break}}if(!e)throw new Error("WebGL not supported on your system");return e.sizeInBytes=function(U){switch(U){case this.BYTE:case this.UNSIGNED_BYTE:return 1;case this.SHORT:case this.UNSIGNED_SHORT:return 2;case this.INT:case this.UNSIGNED_INT:case this.FLOAT:return 4;default:throw new Error("unknown type")}},"webgl2"==e.name?(e.floatTexturesSupported=!0,e.__ext_float_linear=e.getExtension("OES_texture_float_linear"),e.__ext_texture_half_float_linear=e.getExtension("OES_texture_half_float_linear"),e.__ext_color_buffer_float=e.getExtension("EXT_color_buffer_float")):(e.__ext_float=e.getExtension("OES_texture_float"),e.__ext_float?(e.floatTexturesSupported=!0,e.__ext_float_linear=e.getExtension("OES_texture_float_linear")):console.warn("OES_texture_float is not available"),e.__ext_half_float=e.getExtension("OES_texture_half_float"),e.__ext_half_float&&(e.HALF_FLOAT=e.__ext_half_float.HALF_FLOAT_OES,e.floatTexturesSupported=!0,e.__ext_texture_half_float_linear=e.getExtension("OES_texture_half_float_linear")),e.__ext_color_buffer_float=e.getExtension("EXT_color_buffer_float"),e.__ext_std_derivatives=e.getExtension("OES_standard_derivatives"),e.__ext_Inst=e.getExtension("ANGLE_instanced_arrays"),e.__ext_Inst&&(e.vertexAttribDivisor=e.__ext_Inst.vertexAttribDivisorANGLE.bind(e.__ext_Inst),e.drawArraysInstanced=e.__ext_Inst.drawArraysInstancedANGLE.bind(e.__ext_Inst),e.drawElementsInstanced=e.__ext_Inst.drawElementsInstancedANGLE.bind(e.__ext_Inst)),e.__ext_VAO=e.getExtension("OES_vertex_array_object"),e.__ext_VAO&&(e.createVertexArray=e.__ext_VAO.createVertexArrayOES.bind(e.__ext_VAO),e.deleteVertexArray=e.__ext_VAO.deleteVertexArrayOES.bind(e.__ext_VAO),e.bindVertexArray=e.__ext_VAO.bindVertexArrayOES.bind(e.__ext_VAO)),e.__ext_element_index_uint=e.getExtension("OES_element_index_uint"),e.__ext_WEBGL_depth_texture=e.getExtension("WEBGL_depth_texture"),e.__ext_WEBGL_depth_texture&&(e.UNSIGNED_INT_24_8=e.__ext_WEBGL_depth_texture.UNSIGNED_INT_24_8_WEBGL),e.DRAW_FRAMEBUFFER=e.FRAMEBUFFER),e.__ext_frag_depth=e.getExtension("EXT_frag_depth"),e.setupInstancedQuad=function(){const U=new Float32Array([0,1,2,3]),F=new Uint16Array([0,1,2,2,1,3]);this.__quadVertexIdsBuffer=this.createBuffer(),this.bindBuffer(this.ARRAY_BUFFER,this.__quadVertexIdsBuffer),this.bufferData(this.ARRAY_BUFFER,U,this.STATIC_DRAW),this.__quadIndexBuffer=this.createBuffer(),this.bindBuffer(this.ELEMENT_ARRAY_BUFFER,this.__quadIndexBuffer),this.bufferData(this.ELEMENT_ARRAY_BUFFER,F,this.STATIC_DRAW),this.__quadattrbuffers={vertexIDs:{buffer:this.__quadVertexIdsBuffer,dataType:"Float32",dimension:1,count:U.length,shared:!0}}},e.drawQuad=function(){this.drawElements(this.TRIANGLES,6,this.UNSIGNED_SHORT,0)},e},je=function(U,F){if(!F.width||!F.height){if(!F.width)throw new Error("Invalid texture params. 'width' not provided");if(!F.height)throw new Error("Invalid texture params. 'height' not provided")}const e=U.getParameter(U.MAX_TEXTURE_SIZE);if(F.width<=0||F.width>e||F.height<=0||F.height>e)throw new Error("GLTextureParams: Invalid texture size. width:"+F.width+" height:"+F.height+" maxSize:"+e);const t={width:F.width,height:F.height},Q=F=>isNaN(F)?U[F]:F,l=(U,e)=>{U in F?t[U]=Q(F[U]):e&&(t[U]=Q(e))};if(l("format"),l("internalFormat",t.format),l("type",U.UNSIGNED_BYTE),l("minFilter",F.filter?F.filter:U.LINEAR),l("magFilter",F.filter?F.filter:U.LINEAR),l("wrapS",F.wrap?F.wrap:U.CLAMP_TO_EDGE),l("wrapT",F.wrap?F.wrap:U.CLAMP_TO_EDGE),l("flipY",!1),l("mipMapped",!1),l("depthInternalFormat"),l("depthFormat"),l("depthType"),t.format==U.FLOAT)if("webgl2"==U.name)t.filter!=U.LINEAR||U.__ext_float_linear||(console.warn("Floating point texture filtering not supported on result device"),t.filter=U.NEAREST);else if(U.__ext_float)t.filter!=U.LINEAR||U.__ext_float_linear||(console.warn("Floating point texture filtering not supported on result device"),t.filter=U.NEAREST);else{if(!U.__ext_half_float)throw new Error("OES_texture_half_float is not available");t.format=U.HALF_FLOAT,t.filter!=U.LINEAR||U.__ext_texture_half_float_linear||(console.warn("Half Float texture filtering not supported on result device"),t.filter=U.NEAREST)}else if(t.format==U.HALF_FLOAT)if("webgl2"==U.name);else{if(!U.__ext_half_float)throw new Error("OES_texture_half_float is not available");if(t.filter!=U.LINEAR||U.__ext_texture_half_float_linear||(console.warn("Half Float texture filtering not supported on result device"),t.filter=U.NEAREST),t.channels==U.RGB)throw new Error("OES_texture_half_float onlysupports RGBA textures")}else if("sRGB"==t.format&&!U.__ext_sRGB)throw new Error("EXT_sRGB is not available");return null!=t.format&&"webgl2"==U.name&&t.internalFormat==t.format&&(t.type==U.FLOAT?t.format==U.RED?t.internalFormat=U.R32F:t.format==U.RG?t.internalFormat=U.RG32F:t.format==U.RGB?t.internalFormat=U.RGB32F:t.format==U.RGBA&&(t.internalFormat=U.RGBA32F):t.type==U.HALF_FLOAT?t.format==U.RED?t.internalFormat=U.R16F:t.format==U.RGB?t.internalFormat=U.RGB16F:t.format==U.RGBA&&(t.internalFormat=U.RGBA16F):t.type==U.UNSIGNED_BYTE&&(t.format==U.RED&&(t.internalFormat=U.R8),t.format==U.RGB?t.internalFormat=U.RGB8:t.format==U.RGBA&&(t.internalFormat=U.RGBA8))),null!=t.depthFormat&&("webgl2"==U.name?t.depthType==U.UNSIGNED_SHORT?t.depthInternalFormat=U.DEPTH_COMPONENT16:t.depthType==U.UNSIGNED_INT&&(t.depthInternalFormat=U.UNSIGNED_INT):t.depthInternalFormat=t.depthFormat),t};class Ae extends _{constructor(U,F){if(super(),this.__image=null,this.__internalFormat=0,this.__type=0,this.__format=0,this.__wrapParam=0,this.params={},this.__minFilter=0,this.__magFilter=0,this.__wrapS=0,this.__wrapT=0,this.__flipY=!1,this.__mipMapped=!1,this.invert=!1,this.alphaFromLuminance=!1,this.__gltex=null,this.__typeParam="",this.__formatParam="",this.__gl=U,this.ready=!1,this.width=0,this.height=0,this.textureType=1,this.textureDesc=[0,0,0,0],this.__loaded=!1,this.__bound=!1,null!=F)if(F instanceof KU){this.__image=F,this.__image.setMetadata("gltexture",this);const U=()=>{const U=this.__image.getParams(),F=U.width,e=U.height,t=U.data;this.bufferData(t,F,e)};this.__image.on("updated",U),this.__image.isLoaded()?this.configure(this.__image.getParams()):this.__image.on("loaded",(()=>{this.configure(this.__image.getParams())}))}else this.configure(F)}isLoaded(){return this.__loaded}getImage(){return this.__image}getInternalFormat(){return this.__internalFormat}getType(){return this.__type}getFormat(){return this.__format}getWrap(){return this.__wrapParam}getMipMapped(){return this.__mipMapped}configure(U){const F=this.__gl,e=je(F,U);this.params=e,this.__format=e.format,this.__internalFormat=e.internalFormat,this.__type=e.type,this.__minFilter=e.minFilter,this.__magFilter=e.magFilter,this.__wrapS=e.wrapS,this.__wrapT=e.wrapT,this.__flipY="flipY"in U&&U.flipY,this.__mipMapped="mipMapped"in U&&U.mipMapped,this.invert="invert"in U&&U.invert,this.alphaFromLuminance="alphaFromLuminance"in U&&U.alphaFromLuminance,this.textureType=1,this.textureDesc[0]=this.width,this.textureDesc[1]=this.height,1==this.textureType&&this.__format==F.RGBA&&(this.textureType=2),this.__gltex&&F.deleteTexture(this.__gltex),this.__gltex=F.createTexture(),this.__updateGLTexParams();const t=e.width,Q=e.height,l=U.data;l?this.bufferData(l,t,Q,!1,!1):this.resize(t,Q,!1,!1),this.__loaded||(this.emit("ready"),this.__loaded=!0)}__updateGLTexParams(){const U=this.__gl;U.bindTexture(U.TEXTURE_2D,this.__gltex),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MAG_FILTER,this.__minFilter),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MIN_FILTER,this.__magFilter),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_S,this.__wrapS),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_T,this.__wrapT)}bufferData(U,F=-1,e=-1,t=!0,Q=!0){const l=this.__gl;if(t&&l.bindTexture(l.TEXTURE_2D,this.__gltex),null!=U){if(U instanceof Image||U instanceof ImageData||U instanceof HTMLCanvasElement||U instanceof HTMLImageElement||U instanceof HTMLVideoElement)l.texImage2D(l.TEXTURE_2D,0,this.__internalFormat,this.__format,this.__type,U),this.width=U.width,this.height=U.height;else{-1==F&&(F=this.width),-1==e&&(e=this.height);const t=F*e;let Q;switch(this.__format){case l.RED:case l.RED_INTEGER:case l.ALPHA:case l.LUMINANCE:case l.LUMINANCE_ALPHA:Q=1;break;case l.RG:Q=2,l.pixelStorei(l.UNPACK_ALIGNMENT,2);break;case l.RGB:Q=3;break;case l.RGBA:Q=4;break;default:console.warn("Reaching default case: numChannels:=1"),Q=1}U.length!=t*Q&&console.warn("Invalid data for Image width:"+F+" height:"+e+" format:"+this.__formatParam+" type:"+this.__typeParam+" Data Length:"+U.length+" Expected:"+t*Q),this.__type==l.HALF_FLOAT&&U instanceof Float32Array&&(U=J.convertFloat32ArrayToUInt16Array(U)),"webgl2"==l.name?l.texImage2D(l.TEXTURE_2D,0,this.__internalFormat,F,e,0,this.__format,this.__type,U,0):l.texImage2D(l.TEXTURE_2D,0,this.__internalFormat,F,e,0,this.__format,this.__type,U),this.width=F,this.height=e}this.__mipMapped&&l.generateMipmap(l.TEXTURE_2D)}else l.texImage2D(l.TEXTURE_2D,0,this.__internalFormat,this.width,this.height,0,this.__format,this.__type,null),this.width=F,this.height=e;Q&&this.emit("updated")}clear(){const U=this.__gl,F=this.width*this.height;let e,t;switch(this.__format){case U.RED:case U.RED_INTEGER:case U.ALPHA:case U.LUMINANCE:case U.LUMINANCE_ALPHA:e=1;break;case U.RG:e=2;break;case U.RGB:e=3;break;case U.RGBA:e=4;break;default:throw new Error("Invalid Format")}switch(this.__type){case U.UNSIGNED_BYTE:t=new Uint8Array(F*e);break;case U.HALF_FLOAT:t=new Uint16Array(F*e);break;case U.FLOAT:t=new Float32Array(F*e);break;default:throw new Error("Invalid Type")}"webgl2"==U.name?U.texImage2D(U.TEXTURE_2D,0,this.__internalFormat,this.width,this.height,0,this.__format,this.__type,t,0):U.texImage2D(U.TEXTURE_2D,0,this.__internalFormat,this.width,this.height,0,this.__format,this.__type,t)}resize(U,F,e=!1,t=!0){const Q=this.__gl;if(this.width!=U||this.height!=F){const l=Q.getParameter(Q.MAX_TEXTURE_SIZE);if(U<0||U>l||F<0||F>l)throw new Error("gl-texture2d: Invalid texture size. width:"+U+" height:"+F+" maxSize:"+l);if(e){const e=Q.createTexture();Q.bindTexture(Q.TEXTURE_2D,e),Q.texImage2D(Q.TEXTURE_2D,0,this.__internalFormat,U,F,0,this.__format,this.__type,null);const t=Q.createFramebuffer();Q.bindFramebuffer(Q.FRAMEBUFFER,t),Q.framebufferTexture2D(Q.FRAMEBUFFER,Q.COLOR_ATTACHMENT0,Q.TEXTURE_2D,this.__gltex,0),Q.bindTexture(Q.TEXTURE_2D,e),Q.copyTexImage2D(Q.TEXTURE_2D,0,this.__internalFormat,0,0,this.width,this.height,0),Q.bindFramebuffer(Q.FRAMEBUFFER,null),Q.deleteFramebuffer(t),this.__gl.deleteTexture(this.__gltex),this.__gltex=e,this.__updateGLTexParams()}else this.width>0&&this.height,Q.bindTexture(Q.TEXTURE_2D,this.__gltex),Q.texImage2D(Q.TEXTURE_2D,0,this.__internalFormat,U,F,0,this.__format,this.__type,null);if(this.width=U,this.height=F,t){const e=new b(U,F);this.emit("resized",e)}}}populate(U,F,e,t=0,Q=0,l=!0){const n=this.__gl;l&&n.bindTexture(n.TEXTURE_2D,this.__gltex),n.texSubImage2D(n.TEXTURE_2D,0,t,Q,F,e,this.__format,this.__type,U)}getSize(){return[this.width,this.height]}get glTex(){return this.__gltex}getTexHdl(){return this.__gltex}preBind(U,F){return{textureTypeUnif:F[U.name+"Type"],textureDescUnif:F[U.name+"Desc"]}}bindToUniform(U,F,e){if(!this.__loaded)return!1;if(!this.__gltex)throw new Error("Unable to bind non-initialized or deleted texture.");const t=U.boundTextures++,Q=this.__gl;return Q.activeTexture(Q.TEXTURE0+t),Q.bindTexture(Q.TEXTURE_2D,this.__gltex),Q.uniform1i(F.location,t),e&&(e.textureTypeUnif&&Q.uniform1i(e.textureTypeUnif.location,this.textureType),e.textureDescUnif&&Q.uniform4fv(e.textureDescUnif.location,this.textureDesc)),!0}destroy(){super.destroy(),this.__image&&this.__image.setMetadata("gltexture",void 0),this.__gl.deleteTexture(this.__gltex),this.__gltex=null}}let qe={bool:"Boolean",int:"SInt32",uint:"UInt32",float:"Float32",ivec2:"Vec2",ivec3:"Vec3",ivec4:"Vec4",vec2:"Vec2",vec3:"Vec3",vec4:"Vec4",color:"Color",mat3:"Mat3",mat4:"Mat4",sampler2D:"BaseImage",samplerCube:"BaseImage"};const $e=/\s+/;class Ut{constructor(){this.__shaderModules={},this.materialTemplates={}}setShaderModule(U,F){U in this.__shaderModules||(this.__shaderModules[U]=F)}getShaderModule(U){return this.__shaderModules[U]}getShaderModuleNames(){const U=[];for(const F in this.__shaderModules)U.push(F);return U}parseAttr(U,F,e,t){if(!(U[1]in qe))throw new Error("Error while parsing \nType not recognized:"+U[1]);const Q=U[2].slice(0,U[2].length-1);e.attributes[Q]={type:qe[U[1]],instanced:F},"color"==U[1]&&(U[1]="vec4",U.join(" "))}handleImport(U,F,e,t,Q){if(e in this.__shaderModules){const l=this.__shaderModules[e];if(!l)throw Error("snippet not loaded or does not exists!");const n=this.parseShaderHelper(F,l,t,Q);t.push(e),U.glsl=U.glsl+n.glsl,U.numLines+=n.numLines,U.uniforms=Object.assign(Object.assign({},U.uniforms),n.uniforms),U.attributes=Object.assign(Object.assign({},U.attributes),n.attributes)}else console.log("shaderName: "+F),console.log("SNIPPET NOT FOUND: "+e)}parseShader(U,F){return this.parseShaderHelper(U,F,[],0)}parseShaderHelper(U,F,e,t){const Q=(U,F)=>{U.glsl=U.glsl+F+"\n",U.numLines++};e.push(U);const l={glsl:"",numLines:0,uniforms:{},attributes:{}},n=(F=F.toString()).split("\n");for(let F=0;F<n.length;F++){let a=n[F];const d=a.trim(),i=d.split($e);switch(i[0]){case"<%include":case"import":{const F=d.split(/'|"|`/)[1].split("/").pop();e.includes(F)||this.handleImport(l,U,F,e,t);break}case"attribute":this.parseAttr(i,!1,l,a),Q(l,a);break;case"instancedattribute":this.parseAttr(i,!0,l,a),i[0]="attribute",a=i.join(" "),Q(l,a);break;case"uniform":{let F=1;4==i.length&&(F=2);const e=i[F];if(!(e in qe))throw new Error("Error while parsing :"+U+" \nType not recognized:"+i[1]);const t=i[F+1].slice(0,i[F+1].length-1);t.includes("[")?l.uniforms[t.substring(0,t.indexOf("["))]=qe[e]:l.uniforms[t]=qe[e],"struct"==l.uniforms[t]&&console.log(i),"color"==i[1]&&(i[1]="vec4",a=i.join(" ")),Q(l,a);break}default:Q(l,a)}}return l}}const Ft=new Ut;let et=0;class tt extends A{constructor(U,F){super(F),U&&(this.__gl=U),this.__shaderStagesGLSL={},this.__shaderStages={},this.__shaderProgramHdls={},this.__gltextures={},this.__id=et++}setGLContext(U){this.__gl=U}setShaderStage(U,F){this.__shaderStagesGLSL[U]=F,this.clearProgramsCache()}getShaderStage(U){return this.__shaderStagesGLSL[U]}clearProgramsCache(){const U=this.__gl;for(const F in this.__shaderProgramHdls){const e=this.__shaderProgramHdls[F];for(const F in e.shaderHdls)U.deleteShader(e.shaderHdls[F]);U.deleteProgram(e.shaderProgramHdl)}}static isTransparent(){return!1}static isOverlay(){return!1}__compileShaderStage(U,F,e,t){const Q=this.__gl;if(t||(t=Q.shaderopts),t){if(t.repl)for(const F in t.repl)U=a.replaceAll(U,F,t.repl[F]);if(t.directives){U=t.directives.join("\n")+"\n"+U}}let l;"webgl2"==Q.name&&(U=a.replaceAll(U,"attribute","in"),U="vertexShader"==e?a.replaceAll(U,"varying","out"):a.replaceAll(U,"varying","in"),l="#version 300 es\n",U="#version 300 es\n"+(U=a.replaceAll(U,"texture2D","texture")));const n=Q.createShader(F);if(!n)throw Error("shaderHdl not defined");if(Q.shaderSource(n,U),Q.compileShader(n),!Q.getShaderParameter(n,Q.COMPILE_STATUS)){console.log("Errors in :"+this.constructor.name);const F=Q.getShaderInfoLog(n).split("\n"),t={};for(let U=0;U<F.length;U++){if(F[U].startsWith("'")){F[U-1]=F[U-1]+F[U],delete F[U],U--;continue}const e=F[U].split(":");if(e.length>=2){const Q=parseInt(e[2]);isNaN(Q)||(t[Q]?t[Q].push(F[U]):t[Q]=[F[U]])}}const l=[],a=U.split("\n");for(const U in t){const F=Number.parseInt(U)-1;for(let U=Math.max(0,F-4);U<F;U++)l.push((F+1+" ").padStart(3)+a[U]);l.push((F+1+">").padStart(3)+a[F]);for(let U=F+1;U<Math.min(a.length-1,F+5);U++)l.push((F+1+" ").padStart(3)+a[U]);const e=t[U];for(const U of e)l.push(U)}throw new Error("An error occurred compiling the shader \n=================\n"+this.constructor.name+"."+e+": \n\n"+l.join("\n"))}return n}__createProgram(U){const F=this.__gl;this.__shaderCompilationAttempted=!0;const e=F.createProgram();if(!e)throw Error("shaderProgramHdl not defined");const t={};this.__shaderStages.VERTEX_SHADER||(this.__shaderStages.VERTEX_SHADER=Ft.parseShader("VERTEX_SHADER",this.__shaderStagesGLSL.VERTEX_SHADER));const Q=this.__shaderStages.VERTEX_SHADER.glsl;if(null!=Q){const l=this.__compileShaderStage(Q,F.VERTEX_SHADER,"vertexShader",U);if(!l)return!1;F.attachShader(e,l),t[F.VERTEX_SHADER]=l}this.__shaderStages.FRAGMENT_SHADER||(this.__shaderStages.FRAGMENT_SHADER=Ft.parseShader("FRAGMENT_SHADER",this.__shaderStagesGLSL.FRAGMENT_SHADER));const l=this.__shaderStages.FRAGMENT_SHADER.glsl;if(null!=l){const Q=Object.assign({},F.shaderopts,U);Q.frag&&(Q.defines=Q.frag.defines+Q.defines);const n=this.__compileShaderStage(l,F.FRAGMENT_SHADER,"fragmentShader",Q);if(!n)return!1;F.attachShader(e,n),t[F.FRAGMENT_SHADER]=n}if(F.linkProgram(e),!F.getProgramParameter(e,F.LINK_STATUS)){const U=F.getProgramInfoLog(e);if(!U)throw Error("info not defined");if(U.includes("D3D shader compilation failed")){const U=F.getExtension("WEBGL_debug_shaders");if(U){const e=U.getTranslatedShaderSource(t[F.VERTEX_SHADER]);console.log(e)}}throw console.log("vertexShaderGLSL:"+Q),console.log("fragmentShaderGLSL:"+l),new Error("Unable to link the shader program:"+this.constructor.name+"\n==================\n"+U)}const n=this.__extractAttributeAndUniformLocations(e,U);return n.shaderHdls=t,n.shaderProgramHdl=e,n}__extractAttributeAndUniformLocations(U,F){const e=this.__gl,t=this.getAttributes(),Q={attrs:{},unifs:{}};for(const F in t){const l=e.getAttribLocation(U,F);if(null==l){console.warn("Shader attribute not found:"+F);continue}const n=t[F];Q.attrs[F]={name:F,location:l,type:n.type,instanced:n.instanced}}const l=this.getUniforms();for(let t in l){const n=l[t];if(F&&F.repl)for(const U in F.repl)t=t.replace(U,F.repl[U]);const a=e.getUniformLocation(U,t);null!=a&&(Q.unifs[t]={name:t,location:a,type:n})}return Q}getAttributes(){const U={};for(const F in this.__shaderStages){const e=this.__shaderStages[F];for(const F in e.attributes)U[F]=e.attributes[F]}return U}getUniforms(){const U={};for(const F in this.__shaderStages){const e=this.__shaderStages[F];for(const F in e.uniforms)U[F]=e.uniforms[F]}return U}isCompiledForTarget(U){const F=U||this.getId();return null!=this.__shaderProgramHdls[F]}compileForTarget(U,F){const e=U||this.getId();let t=this.__shaderProgramHdls[e];return t||!1!==t&&(t=this.__createProgram(F||{}),t.shaderkey=e,this.__shaderProgramHdls[e]=t),t}compile(){this.compileForTarget()}bind(U,F){const e=this.__gl;if(U.glShader!=this){const t=this.compileForTarget(F,U.shaderopts);if(t==={})return console.warn(this.constructor.name+" is not compiled for "+F),!1;const Q=t.shaderProgramHdl;e.useProgram(Q),U.glShader=this,U.shaderkey=t.shaderkey,U.unifs=t.unifs,U.attrs=t.attrs,U.boundTextures=0,U.glGeom=void 0,U.bindRendererUnifs&&U.bindRendererUnifs(t.unifs)}return U.supportsInstancing=!0,!0}unbind(U){return U.glShader=null,U.shaderkey="",U.unifs={},U.attrs={},!0}getGeomDataShaderName(){return""}getSelectedShaderName(){return""}static supportsInstancing(){return!0}static getPackedMaterialData(U){return new Float32Array(4)}static getMaterialTemplate(){throw new Error("Shader does not provide a material template.")}destroy(){const U=this.__gl;for(const F in this.__shaderProgramHdls){const e=this.__shaderProgramHdls[F];U.deleteProgram(e.shaderProgramHdl)}this.__shaderProgramHdls={}}}new qU;class Qt{constructor(U,F,t=!1){this.colorTextureResizeEventId=-1,this.__depthTexture=null,this.__fbo=null,this.__prevBoundFbo=null,!e.isIOSDevice||"webgl"!=U.name||F.getType()!=U.FLOAT&&F.getType()!=U.HALF_FLOAT||console.error("IOS devices are unable to render to float textures."),this.__gl=U,this.__colorTexture=F,this.__createDepthTexture=t,this.__clearColor=new B(0,0,0,0),this.__colorTexture&&(this.colorTextureResizeEventId=this.__colorTexture.on("resized",(U=>{this.resize(this.__colorTexture.width,this.__colorTexture.height,!1)}))),this.setup()}textureResized(U){this.resize(this.__colorTexture.width,this.__colorTexture.height,!1)}setClearColor(U){this.__clearColor=U}getWidth(){return this.__colorTexture.width}getHeight(){return this.__colorTexture.height}getSize(){return[this.__colorTexture.width,this.__colorTexture.height]}getColorTexture(){return this.__colorTexture}getDepthTextureGL(){return this.__depthTexture}get width(){return this.__colorTexture.width}get height(){return this.__colorTexture.height}get size(){return[this.__colorTexture.width,this.__colorTexture.height]}get colorTexture(){return this.__colorTexture}setColorTexture(U){const F=this.__gl;this.__colorTexture=U,F.framebufferTexture2D(F.FRAMEBUFFER,F.COLOR_ATTACHMENT0,F.TEXTURE_2D,this.__colorTexture.glTex,0)}get depthTextureGL(){return this.__depthTexture}setup(){const U=this.__gl;if(this.__fbo=U.createFramebuffer(),"webgl2"==U.name?U.bindFramebuffer(U.DRAW_FRAMEBUFFER,this.__fbo):U.bindFramebuffer(U.FRAMEBUFFER,this.__fbo),this.__colorTexture&&("webgl2"==U.name?U.framebufferTexture2D(U.DRAW_FRAMEBUFFER,U.COLOR_ATTACHMENT0,U.TEXTURE_2D,this.__colorTexture.glTex,0):U.framebufferTexture2D(U.FRAMEBUFFER,U.COLOR_ATTACHMENT0,U.TEXTURE_2D,this.__colorTexture.glTex,0)),this.__createDepthTexture)if("webgl2"==U.name||U.__ext_WEBGL_depth_texture)U.activeTexture(U.TEXTURE0),this.__depthTexture=U.createTexture(),U.bindTexture(U.TEXTURE_2D,this.__depthTexture),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MAG_FILTER,U.LINEAR),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MIN_FILTER,U.LINEAR),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_S,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_T,U.CLAMP_TO_EDGE),"webgl2"==U.name?(U.texImage2D(U.TEXTURE_2D,0,U.DEPTH_COMPONENT24,this.width,this.height,0,U.DEPTH_COMPONENT,U.UNSIGNED_INT,null),U.framebufferTexture2D(U.DRAW_FRAMEBUFFER,U.DEPTH_ATTACHMENT,U.TEXTURE_2D,this.__depthTexture,0)):(U.texImage2D(U.TEXTURE_2D,0,U.DEPTH_COMPONENT,this.width,this.height,0,U.DEPTH_COMPONENT,U.UNSIGNED_INT,null),U.framebufferTexture2D(U.FRAMEBUFFER,U.DEPTH_ATTACHMENT,U.TEXTURE_2D,this.__depthTexture,0));else{const F=U.createRenderbuffer();U.bindRenderbuffer(U.RENDERBUFFER,F),U.renderbufferStorage(U.RENDERBUFFER,U.DEPTH_COMPONENT16,this.width,this.height),U.framebufferRenderbuffer(U.FRAMEBUFFER,U.DEPTH_ATTACHMENT,U.RENDERBUFFER,F)}this.__checkFramebuffer(),"webgl2"==U.name?U.bindFramebuffer(U.DRAW_FRAMEBUFFER,null):U.bindFramebuffer(U.FRAMEBUFFER,null)}resize(U,F,e){const t=this.__gl;e&&this.__colorTexture.resize(U,F,!1,!1),"webgl2"==t.name?t.bindFramebuffer(t.DRAW_FRAMEBUFFER,this.__fbo):t.bindFramebuffer(t.FRAMEBUFFER,this.__fbo),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,this.__colorTexture.glTex,0),this.__depthTexture&&(t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,this.__depthTexture),"webgl2"==t.name?t.texImage2D(t.TEXTURE_2D,0,t.DEPTH_COMPONENT24,this.width,this.height,0,t.DEPTH_COMPONENT,t.UNSIGNED_INT,null):t.texImage2D(t.TEXTURE_2D,0,t.DEPTH_COMPONENT,this.width,this.height,0,t.DEPTH_COMPONENT,t.UNSIGNED_INT,null)),this.__checkFramebuffer()}__checkFramebuffer(){const U=this.__gl;let F;if(F="webgl2"==U.name?U.checkFramebufferStatus(U.DRAW_FRAMEBUFFER):U.checkFramebufferStatus(U.FRAMEBUFFER),F!==U.FRAMEBUFFER_COMPLETE)switch(U.bindTexture(U.TEXTURE_2D,null),"webgl2"==U.name?U.bindFramebuffer(U.DRAW_FRAMEBUFFER,null):U.bindFramebuffer(U.FRAMEBUFFER,null),console.warn("Error creating Fbo width:",this.width,", height:",this.height," Texture Type:",this.__colorTexture.getType()),F){case U.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case U.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case U.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case U.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}}bindForWriting(U){U&&(this.__prevBoundFbo=U.boundRendertarget,U.boundRendertarget=this.__fbo);const F=this.__gl;"webgl2"==F.name?F.bindFramebuffer(F.DRAW_FRAMEBUFFER,this.__fbo):F.bindFramebuffer(F.FRAMEBUFFER,this.__fbo),F.viewport(0,0,this.width,this.height)}unbindForWriting(U){U&&(U.boundRendertarget=this.__prevBoundFbo);const F=this.__gl;"webgl2"==F.name?F.bindFramebuffer(F.DRAW_FRAMEBUFFER,this.__prevBoundFbo):F.bindFramebuffer(F.FRAMEBUFFER,this.__prevBoundFbo)}bind(U){this.bindForWriting(U)}unbind(U){if(U)this.unbindForWriting(U);else{const U=this.__gl;U.bindFramebuffer(U.FRAMEBUFFER,null)}}bindForReading(U){const F=this.__gl;"webgl2"==F.name?F.bindFramebuffer(F.READ_FRAMEBUFFER,this.__fbo):F.bindFramebuffer(F.FRAMEBUFFER,this.__fbo)}unbindForReading(){const U=this.__gl;"webgl2"==U.name?U.bindFramebuffer(U.READ_FRAMEBUFFER,null):U.bindFramebuffer(U.FRAMEBUFFER,null)}clear(){const U=this.__gl;U.colorMask(!0,!0,!0,!0);const F=this.__clearColor.asArray();U.clearColor(F[0],F[1],F[2],F[3]),this.__createDepthTexture?U.clear(U.COLOR_BUFFER_BIT|U.DEPTH_BUFFER_BIT):U.clear(U.COLOR_BUFFER_BIT)}bindAndClear(U){this.bind(U),this.clear()}destroy(){const U=this.__gl;U.bindFramebuffer(U.FRAMEBUFFER,null),U.deleteFramebuffer(this.__fbo),this.__fbo=null,this.__colorTexture.removeListenerById("resized",this.colorTextureResizeEventId)}}class lt extends k{constructor(U,F){super(),this.params={},this.width=0,this.height=0,this.__gl=U,this.textureTargets=[],this.depthTexture=null,this.textureDesc=[0,0,0,0],this.clearColor=new B(0,0,0,0),this.colorMask=[!0,!0,!0,!0],F&&this.configure(F)}configure(U){const F=this.__gl,e=je(F,U);this.textureTargets.forEach((U=>{F.deleteTexture(U)})),this.textureTargets=[],this.depthTexture&&(F.deleteTexture(this.depthTexture),this.depthTexture=null),this.frameBuffer&&F.deleteFramebuffer(this.frameBuffer),this.params=e,this.type=e.type,this.format=e.format,this.internalFormat=e.internalFormat,this.filter=e.filter,this.wrap=e.wrap,this.flipY=e.flipY,this.width=e.width,this.height=e.height,this.textureType=1,this.textureDesc[0]=this.width,this.textureDesc[1]=this.height;const t=null!=U.numColorChannels?U.numColorChannels:null!=e.format?1:0;for(let U=0;U<t;U++){F.activeTexture(F.TEXTURE0+1);const U=F.createTexture();F.bindTexture(F.TEXTURE_2D,U),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_S,e.wrapS),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_T,e.wrapT),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MIN_FILTER,e.minFilter),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MAG_FILTER,e.magFilter),F.texImage2D(F.TEXTURE_2D,0,this.internalFormat,e.width,e.height,0,this.format,this.type,null),this.textureTargets.push(U)}if(e.depthFormat){if("webgl"==F.name&&!F.__ext_WEBGL_depth_texture)throw new Error("Depth textures not support on this device");F.activeTexture(F.TEXTURE0),this.depthTexture=F.createTexture(),F.bindTexture(F.TEXTURE_2D,this.depthTexture),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_S,e.wrapS),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_T,e.wrapT),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MIN_FILTER,e.minFilter),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MAG_FILTER,e.magFilter),F.texImage2D(F.TEXTURE_2D,0,e.depthInternalFormat,e.width,e.height,0,e.depthFormat,e.depthType,null)}if(this.frameBuffer=F.createFramebuffer(),this.bindForWriting(),this.textureTargets.length>0){this.textureTargets.length>1&&"webgl"==F.name&&F.drawBuffers;const U=[];for(let e=0;e<this.textureTargets.length;e++)F.framebufferTexture2D(F.DRAW_FRAMEBUFFER,F.COLOR_ATTACHMENT0+e,F.TEXTURE_2D,this.textureTargets[e],0),U.push(F.COLOR_ATTACHMENT0+e);this.textureTargets.length>1&&F.drawBuffers(U)}this.depthTexture&&F.framebufferTexture2D(F.DRAW_FRAMEBUFFER,F.DEPTH_ATTACHMENT,F.TEXTURE_2D,this.depthTexture,0),this.checkFramebuffer()}checkFramebuffer(){this.bindForWriting();const U=this.__gl,F=U.checkFramebufferStatus(U.DRAW_FRAMEBUFFER);if(F!=U.FRAMEBUFFER_COMPLETE)switch(F){case U.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case U.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case U.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case U.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}this.unbindForWriting()}bindForWriting(U,F=!1){U&&(this.__prevBoundFbo=U.boundRendertarget,U.boundRendertarget=this.frameBuffer);const e=this.__gl;"webgl2"==e.name?e.bindFramebuffer(e.DRAW_FRAMEBUFFER,this.frameBuffer):e.bindFramebuffer(e.FRAMEBUFFER,this.frameBuffer),e.viewport(0,0,this.width,this.height),F&&this.clear()}unbindForWriting(U){U&&(U.boundRendertarget=this.__prevBoundFbo);const F=this.__gl;"webgl2"==F.name?F.bindFramebuffer(F.DRAW_FRAMEBUFFER,this.__prevBoundFbo):F.bindFramebuffer(F.FRAMEBUFFER,this.__prevBoundFbo)}clear(U=!0){const F=this.__gl,e=this.colorMask;F.colorMask(e[0],e[1],e[2],e[3]);const t=this.clearColor.asArray();F.clearColor(t[0],t[1],t[2],t[3]);let Q=0;this.textureTargets.length>0&&(Q|=F.COLOR_BUFFER_BIT),this.depthTexture&&(Q|=F.DEPTH_BUFFER_BIT),F.clear(Q)}bindForReading(){const U=this.__gl;"webgl2"==U.name?U.bindFramebuffer(U.READ_FRAMEBUFFER,this.frameBuffer):U.bindFramebuffer(U.FRAMEBUFFER,this.frameBuffer)}unbindForReading(){const U=this.__gl;"webgl2"==U.name?U.bindFramebuffer(U.READ_FRAMEBUFFER,null):U.bindFramebuffer(U.FRAMEBUFFER,null)}bindColorTexture(U,F,e=0){const t=this.__gl,Q=U.boundTextures++;return t.uniform1i(F.location,Q),t.activeTexture(t.TEXTURE0+Q),t.bindTexture(t.TEXTURE_2D,this.textureTargets[e]),!0}bindDepthTexture(U,F){const e=this.__gl,t=U.boundTextures++;return e.uniform1i(F.location,t),e.activeTexture(e.TEXTURE0+t),e.bindTexture(e.TEXTURE_2D,this.depthTexture),!0}unbind(U){this.unbindForWriting(U)}resize(U,F,e=!1){const t=this.__gl;if(this.width!=U||this.height!=F){const Q=t.getParameter(t.MAX_TEXTURE_SIZE);if(U<0||U>Q||F<0||F>Q)throw new Error(`GLRenderTarget: Invalid texture size. width: ${U} height: ${F} maxSize: ${Q}`);e&&this.bindForReading();const l=this.params;for(let Q=0;Q<this.textureTargets.length;Q++){const n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,l.wrapS),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,l.wrapT),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,l.minFilter),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,l.magFilter),t.texImage2D(t.TEXTURE_2D,0,this.internalFormat,U,F,0,this.format,this.type,null),e&&t.copyTexImage2D(t.TEXTURE_2D,0,this.internalFormat,0,0,Math.min(U,this.width),Math.min(F,this.height),0),t.deleteTexture(this.textureTargets[Q]),this.textureTargets[Q]=n}if(l.depthFormat){if("webgl"==t.name&&!t.__ext_WEBGL_depth_texture)throw new Error("Depth textures not support on this device");t.activeTexture(t.TEXTURE0);const Q=t.createTexture();t.bindTexture(t.TEXTURE_2D,Q),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,l.wrapS),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,l.wrapT),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,l.minFilter),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,l.magFilter),t.texImage2D(t.TEXTURE_2D,0,l.depthInternalFormat,U,F,0,l.depthFormat,l.depthType,null),e&&t.copyTexImage2D(t.TEXTURE_2D,0,this.internalFormat,0,0,Math.min(U,this.width),Math.min(F,this.height),0),t.deleteTexture(this.depthTexture),this.depthTexture=Q}if(e&&this.unbindForReading(),this.width=U,this.height=F,this.frameBuffer&&t.deleteFramebuffer(this.frameBuffer),this.frameBuffer=t.createFramebuffer(),this.bindForWriting(),this.textureTargets.length>0){this.textureTargets.length>1&&"webgl"==t.name&&t.drawBuffers;const U=[];for(let F=0;F<this.textureTargets.length;F++)t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0+F,t.TEXTURE_2D,this.textureTargets[F],0),U.push(t.COLOR_ATTACHMENT0+F);this.textureTargets.length>1&&t.drawBuffers(U)}this.depthTexture&&t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.TEXTURE_2D,this.depthTexture,0),this.checkFramebuffer()}}bindToUniform(U,F,e){const t=U.boundTextures++,Q=this.__gl.TEXTURE0+t,l=this.__gl;return l.activeTexture(Q),l.bindTexture(l.TEXTURE_2D,this.textureTargets[0]),l.uniform1i(F.location,t),e&&(e.textureTypeUnif&&l.uniform1i(e.textureTypeUnif.location,this.textureType),e.textureDescUnif&&this.__gl.uniform4fv(e.textureDescUnif.location,this.textureDesc)),!0}destroy(){const U=this.__gl;this.textureTargets.forEach((F=>{U.deleteTexture(F)})),this.textureTargets=[],this.depthTexture&&(U.deleteTexture(this.depthTexture),this.depthTexture=null),this.frameBuffer&&U.deleteFramebuffer(this.frameBuffer)}}Ft.setShaderModule("imageAtlas.glsl","#define GLSLIFY 1\n// Note: On mobile, I can't seem to pass around a stuct containing sampler2D.\n// I have to unpack the struct and pass its members. :(\n// struct ImageAtlas {\n//     sampler2D layout;\n//     sampler2D image;\n//     vec4 desc;\n// };\n\nimport 'GLSLUtils.glsl'\n\nvec4 getSubImageLayout(int index, in sampler2D atlasLayout, in vec4 atlasDesc){\n    return fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);\n}\nvec2 calcSubImageTexCoords(vec2 texCoord, int index, in sampler2D atlasLayout, in vec4 atlasDesc){\n    vec4 layoutData = fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);\n    // The following line is a hack to fix artifacts in our PBR lighting\n    // We were seeing loads of lighting garbage on some sufaces that were orthogonal\n    // to the world. The UV coordinates would have been landing right on the edges\n    // of our subimages and were often sampling outside the image. This couuld\n    // have been because of filtering, or an error in the uv coords. \n    texCoord = clamp(texCoord, vec2(0.01, 0.01), vec2(0.99, 0.99));\n    vec2 subimageTexel = texCoord * layoutData.zw;\n    // subimageTexel = clamp(subimageTexel, vec2(0.0, 0.0), vec2(1.0, 1.0));\n    return subimageTexel + layoutData.xy;\n}\nvec4 sampleSubImage(vec2 texCoord, int index, in sampler2D atlasLayout, in sampler2D atlasImage, in vec4 atlasDesc){\n    vec4 layoutData = fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);\n    vec2 atlasCoords = calcSubImageTexCoords(texCoord, index, atlasLayout, atlasDesc);\n    return texture2D(atlasImage, atlasCoords);\n}"),Ft.setShaderModule("surfaceGeomData.glsl","#define GLSLIFY 1\n  uniform int floatGeomBuffer;\n  uniform int passId;\n\n  import 'GLSLBits.glsl'\n  \n  vec4 setFragColor_geomData(vec3 v_viewPos, int floatGeomBuffer, int passId, float v_drawItemId, int isOrthographic){\n    vec4 fragColor;\n\n    float viewDist;\n    if (isOrthographic > 0) {\n      viewDist = v_viewPos.z;\n    } else {\n      viewDist = length(v_viewPos);\n    }\n    if (floatGeomBuffer != 0) {\n      fragColor.r = float(passId); \n      fragColor.g = float(v_drawItemId);\n      fragColor.b = 0.0;// TODO: store poly-id or something.\n      fragColor.a = viewDist;\n    }\n    else {\n      ///////////////////////////////////\n      // UInt8 buffer\n      fragColor.r = mod(v_drawItemId, 256.) / 255.;\n      fragColor.g = (floor(v_drawItemId / 256.) + float(passId) * 32.) / 255.;\n\n      // encode the dist as a 16 bit float\n      vec2 float16bits = encode16BitFloatInto2xUInt8(viewDist);\n      fragColor.b = float16bits.x;\n      fragColor.a = float16bits.y;\n    }\n\n    return fragColor;\n  }"),Ft.setShaderModule("surfaceHighlight.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getHighlightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);\n}\n#else\n\nuniform vec4 highlightColor;\n\nvec4 getHighlightColor(int id) {\n    return highlightColor;\n}\n\n#endif\n\nvec4 setFragColor_highlight(float v_drawItemId){\n  vec4 fragColor; \n  int drawItemId = int(v_drawItemId + 0.5);\n  fragColor = getHighlightColor(drawItemId);\n  return fragColor;\n}\n"),Ft.setShaderModule("computeViewNormal.glsl","#define GLSLIFY 1\n  \n#ifdef ENABLE_ES3\nvec3 computeViewNormal(vec3 viewPos) {\n  vec3 fdx = dFdx(viewPos);\n  vec3 fdy = dFdy(viewPos);\n  return normalize(cross(fdx, fdy));\n}\n#else \nvec3 computeViewNormal(vec3 viewPos) {\n  return vec3(0.0, 0.0, 0.0);\n}\n#endif\n"),Ft.setShaderModule("calcFatLinesViewPos.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nvec3 calcFatLinesViewPos(int vertexID, mat4 modelViewMatrix, inout vec3 viewNormal, inout vec2 texCoord, inout vec3 pos) {\n\n  int seqentialIndex_0 = int(mod(segmentIndices.x, 2.));\n  int seqentialIndex_1 = int(mod(segmentIndices.y, 2.));\n  int index_0 = int(segmentIndices.x) / 2;\n  int index_1 = int(segmentIndices.y) / 2;\n\n  vec3 viewPos;\n  vec4 data_0 = fetchTexel(positionsTexture, positionsTextureSize, index_0);\n  vec4 data_1 = fetchTexel(positionsTexture, positionsTextureSize, index_1);\n\n  // During XR sessions, there is a scaling applied to the view matrix\n  // which causes a distortion to the line width. We extract that scale here\n  // and use to correct the distortion.\n  // See also: FatPointsShader\n  vec3 viewZ = modelViewMatrix[2].xyz;\n  float viewScale = length(viewZ);\n\n  vec4 pos_0 = modelViewMatrix * vec4(data_0.xyz, 1.0);\n  vec4 pos_1 = modelViewMatrix * vec4(data_1.xyz, 1.0);\n  // Note: multiply the per-vertex line thickness with the line thickness uniform value;\n  float lineThickness_0 = LineThickness * data_0.w * viewScale;\n  float lineThickness_1 = LineThickness * data_1.w * viewScale;\n\n  if (vertexID < 2) {\n    pos = data_0.xyz;\n    viewPos = pos_0.xyz;\n  }\n  else {\n    pos = data_1.xyz;\n    viewPos = pos_1.xyz;\n  }\n  if (pos_1 != pos_0) {\n    vec3 segmentDir = normalize(pos_1.xyz - pos_0.xyz);\n    vec3 viewVector = normalize(viewPos);\n\n    if (vertexID < 2) {\n      vec3 segmentStartDir = segmentDir;\n      if (seqentialIndex_0 != 0) {\n        //if index_0 == 0, get the last index in the line as previous\n        int index_prev = (index_0 > 0) ? (index_0-1) : (positionsTextureSize-1);\n        vec4 data_prev = fetchTexel(positionsTexture, positionsTextureSize, index_prev);\n        vec4 pos_prev = modelViewMatrix * vec4(data_prev.xyz, 1.0);\n        segmentStartDir = normalize(segmentDir + normalize(pos_0.xyz - pos_prev.xyz));\n        // segmentStartDir = segmentDir;\n      }\n      // vec3 startBiTangent = normalize(cross(segmentStartDir, viewVector));\n      // viewNormal = normalize(cross(segmentStartDir, startBiTangent));\n      vec3 startBiTangent = normalize(vec3(-segmentStartDir.y, segmentStartDir.x, 0.0));\n      viewNormal = normalize(-viewVector);\n      // Move the endpoints to overlap a bit more.\n      //viewPos -= vec3(segmentStartDir * lineThickness_0 * 0.25);\n      if (mod(vertexIDs, 2.0) == 0.0) {\n        viewPos += vec3(startBiTangent * lineThickness_0);\n        texCoord.x = 1.0;\n      }\n      else {\n        viewPos -= vec3(startBiTangent * lineThickness_0);\n        texCoord.x = 0.0;\n      }\n      texCoord.y = 0.0;\n    }\n    else {\n      vec3 segmentEndDir = segmentDir;\n      if (seqentialIndex_1 != 0) {\n        //if index_1 == numPoints-1, get the first index in the line as next\n        int index_next = (index_1 < (positionsTextureSize-1)) ? (index_1+1) : 0;\n        vec4 data_next = fetchTexel(positionsTexture, positionsTextureSize, index_next);\n        vec4 pos_next = modelViewMatrix * vec4(data_next.xyz, 1.0);\n        segmentEndDir = normalize(segmentDir + normalize(pos_next.xyz - pos_1.xyz));\n        // segmentEndDir = segmentDir;\n      }\n      // vec3 endBiTangent = normalize(cross(segmentEndDir, viewVector));\n      // viewNormal = normalize(cross(segmentEndDir, endBiTangent));\n      vec3 endBiTangent = normalize(vec3(-segmentEndDir.y, segmentEndDir.x, 0.0));\n      viewNormal = normalize(-viewVector);\n      // Move the endpoints to overlap a bit more.\n      //viewPos += vec3(segmentEndDir * lineThickness_1 * 0.25);\n      if (mod(vertexIDs, 2.0) == 0.0) {\n        viewPos += vec3(endBiTangent * lineThickness_1);\n        texCoord.x = 1.0;\n      }\n      else {\n        viewPos -= vec3(endBiTangent * lineThickness_1);\n        texCoord.x = 0.0;\n      }\n      texCoord.y = 1.0;\n    }\n\n    // Move the line towards the viewer by the line thickness.\n    // this is to avoid depth issues when lines are rendered over meshes. \n    viewPos.z += (lineThickness_0 + lineThickness_1) * 0.5;\n  }\n\n  return viewPos;\n}\n\n"),Ft.setShaderModule("constants.glsl","#define GLSLIFY 1\n#define PI 3.141592653589793\n#define TwoPI (2.0 * PI)\n#define HalfPI (0.5 * PI)\n\n"),Ft.setShaderModule("convolve-helpers.glsl","#define GLSLIFY 1\n\n#ifdef ENVMAP_CUBE\n\nuniform samplerCube envMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return texture(envMap, dir);\n}\n\n#else \n\nuniform sampler2D   envMap;\n\nimport 'envmap-octahedral.glsl'\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = dirToSphOctUv(dir);\n  vec4 texel = texture2D(envMap, vec2(uv.x, 1.0 - uv.y));\n  return vec4(texel.rgb/texel.a, 1.0); // TODO: Check this line. Do we need it?\n}\n\n#endif \n\nvec3 cubeFaceUvToDir(float u, float v, int faceId) {\n\n  // normalize into [-1, 1] range\n  float n_u = 2.0 * u - 1.0;\n  float n_v = 2.0 * v - 1.0;\n\n  vec3 dir;\n  switch (faceId)\n  {\n  case 0: //TEXTURE_CUBE_MAP_POSITIVE_X:\n    dir.x = 1.0f;\n    dir.y = n_v;\n    dir.z = -n_u;\n    break;\n  case 1: //TEXTURE_CUBE_MAP_NEGATIVE_X:\n    dir.x = -1.0f;\n    dir.y = n_v;\n    dir.z = n_u;\n    break;\n  case 3: //TEXTURE_CUBE_MAP_POSITIVE_Y:\n    dir.x = n_u;\n    dir.y = 1.0f;\n    dir.z = -n_v;\n    break;\n  case 2: //TEXTURE_CUBE_MAP_NEGATIVE_Y:\n    dir.x = n_u;\n    dir.y = -1.0f;\n    dir.z = n_v;\n    break;\n  case 4: //TEXTURE_CUBE_MAP_POSITIVE_Z:\n    dir.x = n_u;\n    dir.y = n_v;\n    dir.z = 1.0f;\n    break;\n  case 5: //TEXTURE_CUBE_MAP_NEGATIVE_Z:\n    dir.x = -n_u;\n    dir.y = n_v;\n    dir.z = -1.0f;\n    break;\n  }\n  return normalize(dir);\n}\n\n"),Ft.setShaderModule("cutaways.glsl","#define GLSLIFY 1\nconst int GEOMITEM_FLAG_CUTAWAY = 1; // 1<<0;\nconst int GEOMITEM_INVISIBLE_IN_GEOMDATA = 2; // 1<<1;\n\n#define RAY_EPS 0.0000001\nstruct Ray {\n  vec3 start;\n  vec3 dir;\n};\n\nfloat intersectRayPlane(Ray ray, Ray plane) {\n  vec3 w = ray.start - plane.start;\n  float D = dot(plane.dir, ray.dir);\n  float N = dot(-plane.dir, w);\n\n  if (abs(D) < RAY_EPS) {\n    // segment is parallel to plane\n    if (N == 0.0)\n      return -1.0; // segment lies in plane\n    else\n      return -1.0; // no intersection\n  }\n  // they are not parallel\n  // compute intersect param\n  float sI = N / D;\n  if (sI < -RAY_EPS) {\n    return -1.0; // no intersection\n  }\n  return sI;\n}\n\nbool cutaway(vec3 worldPos, vec3 planeNormal, float planeDist) {\n\n  vec3 planePos = planeNormal * planeDist;\n  vec3 planeDir = worldPos + planePos;\n  float planeOffset = dot(planeDir, planeNormal);\n  if (planeOffset > 0.0) {\n    return true;\n  }\n  return false;\n}\n"),Ft.setShaderModule("debugColors.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\n\nvec3 getDebugColor(float id) {\n  int sel = int(round(mod(round(id), 16.0)));\n  \n  if (sel==0)\n    return vec3(0.0, 1.0, 1.0);\n  else if (sel==1)\n    return vec3(0.0, 1.0, 0.0);\n  else if (sel==2)\n    return vec3(1.0, 0.0, 1.0);\n  else if (sel==3)\n    return vec3(0.75, 0.75, 0.0);\n  else if (sel==4)\n    return vec3(0.0, 0.75, 0.75);\n  else if (sel==5)\n    return vec3(0.75, 0.0, 0.75);\n  else if (sel==6)\n    return vec3(0.45, 0.95, 0.0);\n  else if (sel==7)\n    return vec3(0.0, 0.45, 0.95);\n  else if (sel==8)\n    return vec3(0.95, 0.0, 0.45);\n  else if (sel==9)\n    return vec3(0.95, 0.45, 0.0);\n  else if (sel==10)\n    return vec3(0.0, 0.95, 0.45);\n  else if (sel==11)\n    return vec3(0.45, 0.0, 0.95);\n  else if (sel==12)\n    return vec3(0.45, 0.45, 0.95);\n  else if (sel==13)\n    return vec3(0.0, 0.0, 0.45);\n  else if (sel==14)\n    return vec3(0.0, 0.45, 0.45);\n  else if (sel==15)\n    return vec3(0.45, 0.0, 0.45);\n  else return vec3(0.2, 0.2, 0.2);\n}\n\n"),Ft.setShaderModule("drawItemId.glsl","#define GLSLIFY 1\n\n#ifdef ENABLE_MULTI_DRAW\n\nuniform sampler2D drawIdsTexture;\n\n#ifdef EMULATE_MULTI_DRAW\n\nuniform int drawId;\nint getDrawItemId() {\n  return drawId;\n}\n\n#else // EMULATE_MULTI_DRAW\n\nint getDrawItemId() {\n  ivec2 drawIdsTextureSize = textureSize(drawIdsTexture, 0);\n  ivec2 drawIdsArrayCoords = ivec2(gl_DrawID % drawIdsTextureSize.x, gl_DrawID / drawIdsTextureSize.x);\n  return int(texelFetch(drawIdsTexture, drawIdsArrayCoords, 0).r + 0.5);\n}\n\n#endif // EMULATE_MULTI_DRAW\n\n#else // ENABLE_MULTI_DRAW\n\nuniform int drawItemId;\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\nattribute float instancedIds;    // instanced attribute..\nuniform int instancedDraw;\n\nint getDrawItemId() {\n  if (instancedDraw == 0) {\n    return drawItemId;\n  }\n  else {\n    return int(instancedIds);\n  }\n}\n\n#else\n\nint getDrawItemId() {\n  return drawItemId;\n}\n\n#endif // ENABLE_FLOAT_TEXTURES\n#endif // ENABLE_MULTI_DRAW\n\n"),Ft.setShaderModule("drawItemTexture.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\nuniform sampler2D instancesTexture;\nuniform highp int instancesTextureSize;\n\nconst int pixelsPerItem = 6;\n\nvec4 getInstanceData(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 0);\n}\n\n#else\n\nuniform vec4 drawItemData;\n\nvec4 getInstanceData(int id) {\n  return drawItemData;\n}\n\n#endif\n\n"),Ft.setShaderModule("envmap-dualfisheye.glsl","#define GLSLIFY 1\n\nvec2 dualfisheyeUVsFromDir(vec3 dir) {\n  vec2 result;\n  float angle = 0.465;\n  if (dir.x < 0.0) {\n    result = vec2(((dir.z * -angle) + 0.5) * 0.5, (dir.y * angle) + 0.5);\n  }\n  else {\n    result = vec2( 0.5 + ((dir.z * angle) + 0.5) * 0.5, (dir.y * angle) + 0.5);\n  }\n  return result;\n}\n\n"),Ft.setShaderModule("envmap-equirect.glsl","#define GLSLIFY 1 \nimport 'constants.glsl'\n\nvec2 latLongUVsFromDir(vec3 dir) {\n  // Math function taken from...\n  // http://gl.ict.usc.edu/Data/HighResProbes/\n  // Note: Scaling from u=[0,2], v=[0,1] to u=[0,1], v=[0,1]\n  float phi = acos(dir.z);\n  float theta = atan(dir.x, dir.y);\n  return vec2((1.0 + theta / PI) / 2.0, phi / PI);\n}\n\n// Note: when u == 0.5 z = 1.0\nvec3 dirFromLatLongUVs(float u, float v) {\n  // http://gl.ict.usc.edu/Data/HighResProbes/\n  float theta = PI*((u * 2.0) - 1.0);\n  float phi = PI*v;\n  return vec3(sin(phi)*sin(theta), sin(phi)*cos(theta), cos(phi));\n}\n\nvec3 dirFromPolar(vec2 polar) {\n  float u = polar.x / (PI * 2.0);\n  float v = polar.y / PI;\n  return dirFromLatLongUVs(u, v);\n}\n\n"),Ft.setShaderModule("envmap-octahedral.glsl","#define GLSLIFY 1\nimport 'constants.glsl'\nimport 'GLSLUtils.glsl'\n#define sectorize(value) step(0.0, (value))*2.0-1.0\n#define sum(value) dot(clamp((value), 1.0, 1.0), (value))\n\nvec2 dirToSphOctUv(vec3 normal) {\n  normal = normalize(normal);\n  vec3 aNorm = abs(normal);\n  vec3 sNorm = sectorize(normal);\n  \n  vec2 dir = aNorm.xy;\n  float orient = atan(dir.x, max(dir.y,0.0000000000000001))/HalfPI;\n\n  dir = vec2(aNorm.z, length(aNorm.xy));\n  float pitch = atan(dir.y, dir.x)/HalfPI;\n\n  vec2 uv = vec2(sNorm.x*orient, sNorm.y*(1.0-orient))*pitch;\n\n  if (normal.z < 0.0) {\n    uv = sNorm.xy - abs(uv.ts)*sNorm.xy;\n  }\n  vec2 res = uv*0.5+0.5;\n  // Flip-v\n  // return res;\n  return vec2(res.x, 1.0 - res.y);\n}\n\nvec3 sphOctUvToDir(vec2 uv) {\n  uv = uv*2.0-1.0;\n  // Flip-v\n  uv.y = -uv.y;\n  vec2 suv = sectorize(uv);\n  float sabsuv = sum(abs(uv));\n  float pitch = sabsuv*HalfPI;\n\n  if (pitch <= 0.0) {\n    return vec3(0.0, 0.0, 1.0);\n  }\n  if (abs(pitch - PI) < 0.000001) {\n    return vec3(0.0, 0.0, -1.0);\n  }\n  if (sabsuv > 1.0) {\n    uv = (1.0-abs(uv.ts))*suv;\n  }\n\n  float orient = (abs(uv.s)/sabsuv)*HalfPI;\n  float sOrient = sin(orient);\n  float cOrient = cos(orient);\n  float sPitch = sin(pitch);\n  float cPitch = cos(pitch);\n\n  return vec3(\n    sOrient*suv.s*sPitch,\n    cOrient*suv.t*sPitch,\n    cPitch\n  );\n}\n\n"),Ft.setShaderModule("GLSLBits.glsl",'#define GLSLIFY 1\n    \n/////////////////////////////////////////////////////////////////\n// http://concord-consortium.github.io/lab/experiments/webgl-gpgpu/script.js\nfloat shift_right(float v, float amt) {\n  v = floor(v) + 0.5;\n  return floor(v / exp2(amt));\n}\nfloat shift_left(float v, float amt) {\n  return floor(v * exp2(amt) + 0.5);\n}\n\nfloat mask_last(float v, float bits) {\n  return mod(v, shift_left(1.0, bits));\n}\nfloat extract_bits(float num, float from, float to) {\n  from = floor(from + 0.5);\n  to = floor(to + 0.5);\n  return mask_last(shift_right(num, from), to - from);\n}\n\n/////////////////////////////////////////////////////////////////\n// https://stackoverflow.com/questions/18453302/how-do-you-pack-one-32bit-int-into-4-8bit-ints-in-glsl-webgl\n\nconst vec4 bitEnc = vec4(1.,255.,65025.,16581375.);\nconst vec4 bitDec = 1./bitEnc;\nvec4 EncodeFloatRGBA (float v) {\n  vec4 enc = bitEnc * v;\n  enc = fract(enc);\n  enc -= enc.yzww * vec2(1./255., 0.).xxxy;\n  return enc;\n}\nfloat DecodeFloatRGBA (vec4 v) {\n  return dot(v, bitDec);\n}\n\n/////////////////////////////////////////////////////////////////\n// https://gist.github.com/Flexi23/1713774\n// \nvec2 encode16BitFloatInto2xUInt8(float v) {\n  vec2 c = vec2(0.);\n\n  int signum = (v >= 0.) ? 128 : 0;\n  v = abs(v);\n  int exponent = 15;\n  float limit = 1024.; // considering the bias from 2^-5 to 2^10 (==1024)\n  for(int exp = 15; exp > 0; exp--) {\n    if ( v < limit) {\n      limit /= 2.;\n      exponent--;\n    }\n  }\n\n  float rest;\n  if (exponent == 0) {\n    rest = v / limit / 2.;      // "subnormalize" implicite preceding 0. \n  } \n  else {\n    rest = (v - limit)/limit;   // normalize accordingly to implicite preceding 1.\n  }\n\n  int mantissa = int(rest * 2048.);   // 2048 = 2^11 for the (split) 11 bit mantissa\n  int msb = mantissa / 256;           // the most significant 3 bits go into the lower part of the first byte\n  int lsb = mantissa - msb * 256;     // there go the other 8 bit of the lower significance\n\n  c.x = float(signum + exponent * 8 + msb) / 255.;    // color normalization for texture2D\n  c.y = float(lsb) / 255.;\n\n  if (v >= 2048.) {\n    c.y = 1.;\n  }\n\n  return c;\n}\n\nfloat decode16BitFloatFrom2xUInt8(vec2 c) {\n  float v = 0.;\n\n  int ix = int(c.x*255.); // 1st byte: 1 bit signum, 4 bits exponent, 3 bits mantissa (MSB)\n  int iy = int(c.y*255.); // 2nd byte: 8 bit mantissa (LSB)\n\n  int s = (c.x >= 0.5) ? 1 : -1;\n  ix = (s > 0) ? ix - 128 : ix;   // remove the signum bit from exponent\n  int iexp = ix / 8;              // cut off the last 3 bits of the mantissa to select the 4 exponent bits\n  int msb = ix - iexp * 8;        // subtract the exponent bits to select the 3 most significant bits of the mantissa\n\n  int norm = (iexp == 0) ? 0 : 2048;          // distinguish between normalized and subnormalized numbers\n  int mantissa = norm + msb * 256 + iy;       // implicite preceding 1 or 0 added here\n  norm = (iexp == 0) ? 1 : 0;                 // normalization toggle\n  float exponent = pow( 2., float(iexp + norm) - 16.); // -5 for the the exponent bias from 2^-5 to 2^10 plus another -11 for the normalized 12 bit mantissa \n  v = float( s * mantissa ) * exponent;\n\n  return v;\n}\n\n// TODO : Encoding Float32 to 4x UInt8\n// http://concord-consortium.github.io/lab/experiments/webgl-gpgpu/script.js\n// http://ultraist.hatenablog.com/entry/20110608/1307539319\n\n'),Ft.setShaderModule("GLSLUtils.glsl","#define GLSLIFY 1\n\nint ftoi(float val) {\n  return int(floor(val + 0.5));\n}\nivec2 ftoi(vec2 v2) {\n  return ivec2(ftoi(v2.x), ftoi(v2.y));\n}\nivec3 ftoi(vec3 v4) {\n  return ivec3(ftoi(v4.x), ftoi(v4.y), ftoi(v4.z));\n}\nivec4 ftoi(vec4 v4) {\n  return ivec4(ftoi(v4.x), ftoi(v4.y), ftoi(v4.z), ftoi(v4.w));\n}\n\n#ifdef ENABLE_ES3\n\nint imod(int x, int y) {\n  return x % y;\n}\n\nvoid setFlag(inout int flags, int flag) {\n  flags |= flag;\n}\n\nvoid clearFlag(inout int flags, int flag) {\n  flags &= ~flag;\n}\n\nbool testFlag(int flags, int flag) {\n  return (flags & flag) != 0;\n}\n\n// private function: Mangle me...\nivec2 _pixelIndexToUV(int index, int textureWidth) {\n  return ivec2(index % textureWidth, index / textureWidth);\n}\n\nvec4 fetchTexel(sampler2D texture, int textureWidth, int index) {\n  return texelFetch(texture, _pixelIndexToUV(index, textureWidth), 0);\n}\n\nvec4 fetchTexel(sampler2D texture, ivec2 textureSize, ivec2 texCoord) {\n  return texelFetch(texture, texCoord, 0);\n}\n\n#else\n\n// TODO: integrate: https://gist.github.com/mattatz/70b96f8c57d4ba1ad2cd\n\nint max(int a, int b) {\n  return a > b ? a : b;\n}\nint min(int a, int b) {\n  return a < b ? a : b;\n}\n\nfloat round(float val) {\n  return floor(val + 0.4);\n}\n\nint imod(int x, int y) {\n  return x-y*(x/y);\n}\n\nvoid setFlag(inout int flags, int flag) {\n  flags += flag;\n}\nvoid clearFlag(inout int flags, int flag) {\n  flags -= flag;\n}\n\nbool testFlag(int flags, int flag) {\n  return imod(flags / flag, 2) != 0;\n}\n\n// private function: Mangle me...\nvec2 _pixelIndexToUV(int index, int textureSize) {\n  float flTexSize = float(textureSize);\n  float x = (float(imod(index, textureSize))+0.5)/flTexSize;\n  float y = (floor(float(index / textureSize))+0.5)/flTexSize;\n  return vec2(x, y);\n}\n\nvec4 fetchTexel(sampler2D texture, int textureSize, int index) {\n  vec2 texCoord = _pixelIndexToUV(index, textureSize);\n  return texture2D(texture, texCoord);\n}\n\nvec4 fetchTexel(sampler2D texture, ivec2 textureSize, ivec2 texCoord) {\n  vec2 ftextureSize = vec2(textureSize);\n  return texture2D(texture, (vec2(texCoord) + 0.5) / ftextureSize);\n}\n\n#endif // ENABLE_ES3\n\nint uvToPixelIndex(vec2 uv, int textureSize) {\n  return int(uv.x * float(textureSize)) + (int(floor(uv.y * float(textureSize))) * textureSize);\n}\n\n"),Ft.setShaderModule("Hammersley.glsl","#define GLSLIFY 1\nfloat RadicalInverse_VdC(uint bits) \n{\n  bits = (bits << 16u) | (bits >> 16u);\n  bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\n  bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\n  bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\n  bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\n  return float(bits) * 2.3283064365386963e-10; // / 0x100000000\n}\n// ----------------------------------------------------------------------------\nvec2 Hammersley(uint i, uint N)\n{\n  return vec2(float(i)/float(N), RadicalInverse_VdC(i));\n} \n"),Ft.setShaderModule("ImportanceSampleGGX.glsl","#define GLSLIFY 1\nimport 'constants.glsl'\n\nvec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)\n{\n  float a = roughness*roughness;\n\n  float phi = 2.0 * PI * Xi.x;\n  float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));\n  float sinTheta = sqrt(1.0 - cosTheta*cosTheta);\n\n  // from spherical coordinates to cartesian coordinates\n  vec3 H = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);\n\n  // from tangent-space vector to world-space sample vector\n  vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n  vec3 tangent   = normalize(cross(up, N));\n  vec3 bitangent = cross(N, tangent);\n\n  vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n  return normalize(sampleVec);\n} \n"),Ft.setShaderModule("materialparams.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nimport 'gamma.glsl'\n\n#ifdef ENABLE_MULTI_DRAW\n \nuniform sampler2D materialsTexture;\nuniform highp ivec2 materialsTextureSize;\n\nvec4 getMaterialValue(vec2 materialCoords, int valueIndex) {\n  int index = ftoi(materialCoords.x) + valueIndex;\n  ivec2 texelCoords = ivec2(imod(index, materialsTextureSize.x), index / materialsTextureSize.x);\n  \n  return fetchTexel(materialsTexture, materialsTextureSize, texelCoords);\n}\n\n#else // ENABLE_MULTI_DRAW\n\n////////////////////////\n// Material Param Helpers.\n\nvec4 getColorParamValue(vec4 value, sampler2D tex, int texType, vec2 texCoord) {\n  if (texType == 0) {\n    return toLinear(value);\n  }\n  else if (texType == 1 || texType == 2) {\n    // TODO: Use SRGB textures.\n    return toLinear(texture2D(tex, texCoord));\n  }\n  else if (texType == 3) {\n    // Float HDR Texture\n    return texture2D(tex, texCoord);\n  }\n  else\n    return value;\n}\n\nfloat luminanceFromRGB(vec3 rgb) {\n  return 0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b;\n}\n\nfloat getLuminanceParamValue(float value, sampler2D tex, int texType, vec2 texCoord) {\n  if (texType == 0)\n    return value;\n  else\n    return luminanceFromRGB(texture2D(tex, texCoord).rgb);\n}\n\n#endif // ENABLE_MULTI_DRAW\n"),Ft.setShaderModule("modelMatrix.glsl","#define GLSLIFY 1\n#ifdef ENABLE_FLOAT_TEXTURES\nimport 'GLSLUtils.glsl'\nimport 'transpose.glsl'\nmat4 getMatrix(sampler2D texture, int textureSize, int index) {\n  // Unpack 3 x 4 matrix columns into a 4 x 4 matrix.\n  vec4 col0 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 1);\n  vec4 col1 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 2);\n  vec4 col2 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 3);\n  mat4 result = transpose(mat4(col0, col1, col2, vec4(0.0, 0.0, 0.0, 1.0)));\n  return result;\n}\n\nmat4 getModelMatrix(int id) {\n  return getMatrix(instancesTexture, instancesTextureSize, id);\n}\n\n#else\n\nuniform mat4 modelMatrix;\n\nmat4 getModelMatrix(int id) {\n  return modelMatrix;\n}\n\n#endif\n\n"),Ft.setShaderModule("PBRSurfaceRadiance.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nconst int ENVMAP_FLAG_HEADLIGHT =  1; // 1<<0;\n\nstruct MaterialParams {\n  vec3 baseColor;\n  float ambientOcclusion;\n  float metallic;\n  float roughness;\n  float reflectance;\n  float opacity;\n  float emission;\n};\n\n#ifndef ENABLE_PBR\n\nvec4 pbrSurfaceRadiance(in MaterialParams material, vec3 normal, in vec3 viewVector) {\n  vec3 irradiance = vec3(dot(normal, viewVector));\n  float ao = material.ambientOcclusion; \n  return vec4(material.baseColor * ao * irradiance + (material.emission * material.baseColor), material.opacity);\n\n  // return vec4(material.baseColor * ao * irradiance , material.opacity);\n}\n\n#else\n\nuniform int envMapFlags;\nuniform samplerCube irradianceMap;\nuniform samplerCube prefilterMap;\nuniform sampler2D brdfLUT;\n\nvec3 sampleIrradiance(vec3 dir) {\n  return texture(irradianceMap, dir).rgb;\n}\n\nvec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness) {\n  return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);\n}\n\nfloat luminance(vec3 color) {\n  return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n}\n\nvec4 pbrSurfaceRadiance(in MaterialParams material, vec3 normal, in vec3 viewVector) {\n  if (envMapFlags == -1) {\n    vec3 irradiance = vec3(dot(normal, viewVector));\n    float ao = material.ambientOcclusion; \n    return vec4(material.baseColor * ao * irradiance + (material.emission * material.baseColor), material.opacity);\n  }\n\n  vec3 N = normal;\n  vec3 V = viewVector;\n  vec3 R = reflect(-V, N);\n  float roughness = material.roughness * material.roughness;\n  vec3 diffuseColor = (1.0 - material.metallic) * material.baseColor;\n\n  // Note: The specular reflectance of metallic surfaces is chromatic\n  // https://google.github.io/filament/Filament.html#listing_fnormal\n  vec3 F0 = 0.16 * material.reflectance * material.reflectance * (1.0 - material.metallic) + material.baseColor * material.metallic;\n\n  float NdotV = dot(N, V);\n\n  vec3 F = fresnelSchlickRoughness(max(NdotV, 0.0), F0, roughness);\n\n  vec3 kS = F;\n  vec3 kD = 1.0 - kS;\n  kD *= 1.0 - material.metallic;\n  float ao = material.ambientOcclusion; \n  \n  vec3 irradiance;\n  vec3 irradianceSampleDir = normal;\n  \n  bool headLightMode = testFlag(envMapFlags, ENVMAP_FLAG_HEADLIGHT);\n  if (headLightMode) {\n    irradianceSampleDir = viewVector;\n  }\n  irradiance = sampleIrradiance(irradianceSampleDir);\n  // vec3 irradiance = shGetIrradianceAt(shCoefficients, N);\n  vec3 diffuse    = irradiance * diffuseColor;\n  \n  const float MAX_REFLECTION_LOD = 4.0;\n  vec3 prefilteredColor = textureLod(prefilterMap, R,  roughness * MAX_REFLECTION_LOD).rgb;   \n  vec2 envBRDF  = texture(brdfLUT, vec2(max(NdotV, 0.0), roughness)).rg;\n  vec3 specular = prefilteredColor * (F * envBRDF.x + envBRDF.y);\n  \n  vec3 radiance = (kD * diffuse + specular) * ao;\n  \n  // Now handle semi-transparent objects. We need to be able to linearly interpolate\n  // opacity to make objects disappear, so we need a continuous change.\n  float opacity = material.opacity;\n  vec4 transparent = vec4((radiance * opacity) + specular, opacity + luminance(specular) + luminance(F));\n  vec4 result = mix(transparent, vec4(radiance, 1.0), opacity);\n\n  // Add emission on as the final component.\n  // Note: emission allows a material to blend off its specular component, \n  // which can also be used to make an object completely disappear if also transparent.\n  return mix(result, vec4(material.baseColor, opacity), material.emission);\n}\n\n#endif // ENABLE_PBR\n"),Ft.setShaderModule("SHCoeffs.glsl","#define GLSLIFY 1\nuniform vec3 shCoeffs[9];\n\nvec3 sampleSHCoeffs(vec3 dir) {\n  // dir is assumed to have unit length\n  float x = dir.x, y = dir.y, z = dir.z;\n  // band 0\n  vec3 result = shCoeffs[ 0 ] * 0.886227;\n  // band 1\n  result += shCoeffs[ 1 ] * 2.0 * 0.511664 * y;\n  result += shCoeffs[ 2 ] * 2.0 * 0.511664 * z;\n  result += shCoeffs[ 3 ] * 2.0 * 0.511664 * x;\n  // band 2\n  result += shCoeffs[ 4 ] * 2.0 * 0.429043 * x * y;\n  result += shCoeffs[ 5 ] * 2.0 * 0.429043 * y * z;\n  result += shCoeffs[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n  result += shCoeffs[ 7 ] * 2.0 * 0.429043 * x * z;\n  result += shCoeffs[ 8 ] * 0.429043 * ( x * x - y * y );\n  return result;\n}\n"),Ft.setShaderModule("gamma.glsl","#define GLSLIFY 1\nconst float gamma_const = 2.2;\n\nfloat toLinear(float v) {\n  return pow(v, gamma_const);\n}\n\nvec2 toLinear(vec2 v) {\n  return pow(v, vec2(gamma_const));\n}\n\nvec3 toLinear(vec3 v) {\n  return pow(v, vec3(gamma_const));\n}\n\nvec4 toLinear(vec4 v) {\n  return vec4(toLinear(v.rgb), v.a);\n}\n\nfloat toGamma(float v) {\n  return pow(v, 1.0 / gamma_const);\n}\n\nvec2 toGamma(vec2 v) {\n  return pow(v, vec2(1.0 / gamma_const));\n}\n\nvec3 toGamma(vec3 v) {\n  return pow(v, vec3(1.0 / gamma_const));\n}\n\nvec4 toGamma(vec4 v) {\n  return vec4(toGamma(v.rgb), v.a);\n}\n\nfloat toGamma(float v, float gamma) {\n  return pow(v, 1.0 / gamma);\n}\n\nvec2 toGamma(vec2 v, float gamma) {\n  return pow(v, vec2(1.0 / gamma));\n}\n\nvec3 toGamma(vec3 v, float gamma) {\n  return pow(v, vec3(1.0 / gamma));\n}\n\nvec4 toGamma(vec4 v, float gamma) {\n  return vec4(toGamma(v.rgb, gamma), v.a);\n}\n\n"),Ft.setShaderModule("inverse.glsl","#define GLSLIFY 1\n\n#ifndef ENABLE_ES3\n\nfloat inverse(float m) {\n  return 1.0 / m;\n}\n\nmat2 inverse(mat2 m) {\n  return mat2(m[1][1],-m[0][1],\n             -m[1][0], m[0][0]) / (m[0][0]*m[1][1] - m[0][1]*m[1][0]);\n}\n\nmat3 inverse(mat3 m) {\n  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n  float b01 = a22 * a11 - a12 * a21;\n  float b11 = -a22 * a10 + a12 * a20;\n  float b21 = a21 * a10 - a11 * a20;\n\n  float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\n#endif\n\n"),Ft.setShaderModule("transpose.glsl","#define GLSLIFY 1\n\n#ifndef ENABLE_ES3\n\nfloat transpose(float m) {\n  return m;\n}\n\nmat2 transpose(mat2 m) {\n  return mat2(m[0][0], m[1][0],\n              m[0][1], m[1][1]);\n}\n\nmat3 transpose(mat3 m) {\n  return mat3(m[0][0], m[1][0], m[2][0],\n              m[0][1], m[1][1], m[2][1],\n              m[0][2], m[1][2], m[2][2]);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(m[0][0], m[1][0], m[2][0], m[3][0],\n              m[0][1], m[1][1], m[2][1], m[3][1],\n              m[0][2], m[1][2], m[2][2], m[3][2],\n              m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\n#endif\n\n"),Ft.setShaderModule("quadVertexFromID.glsl","#define GLSLIFY 1\nattribute float vertexIDs;\n\nvec2 getQuadVertexPositionFromID() {\n  int vertexID = int(vertexIDs);\n  if (vertexID == 0)\n    return vec2(-0.5, -0.5);\n  else if (vertexID == 1)\n    return vec2(0.5, -0.5);\n  else if (vertexID == 2)\n    return vec2(-0.5, 0.5);\n  else if (vertexID == 3)\n    return vec2(0.5, 0.5);\n  return vec2(0,0);\n}\n"),Ft.setShaderModule("unpackHDR.glsl","#define GLSLIFY 1\n\nvec3 decodeHDR(const in vec3 ldrPixel, const in float cdmAlpha) {\n  float avg = (cdmAlpha * 16.0 - 8.0);\n  float scl = 1.0;\n  vec3 color;\n  color.x = (tan((ldrPixel.x-0.5)*1.5)/scl)+avg;\n  color.y = (tan((ldrPixel.y-0.5)*1.5)/scl)+avg;\n  color.z = (tan((ldrPixel.z-0.5)*1.5)/scl)+avg;\n\n  // convert from logarithmic curve to linear curve.\n  // subtract the epsilon that was added during encoding.\n  const float eps = 0.001;\n  color.x = pow(10.0, color.x) - eps;\n  color.y = pow(10.0, color.y) - eps;\n  color.z = pow(10.0, color.z) - eps;\n  return color;\n}\n\nvec3 decodeHDR(sampler2D ldrSampler, sampler2D cdmSampler, vec2 texCoord) {\n#ifdef ENABLE_ES3\n  float cdm = texture2D(cdmSampler, texCoord).r;\n#else\n  float cdm = texture2D(cdmSampler, texCoord).a;\n#endif\n  return decodeHDR(texture2D(ldrSampler, texCoord).rgb, cdm);\n}\n\n");class nt extends tt{constructor(U){super(U,"UnpackHDRShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER"," \nprecision highp float;\n#define GLSLIFY 1\n\nvarying vec2 v_texCoord;\nuniform sampler2D ldrSampler;\nuniform sampler2D cdmSampler;\nuniform vec4 srcRegion; // pos, and size of the source region\n\nimport 'unpackHDR.glsl'\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec2 srcUv = srcRegion.xy + (v_texCoord * srcRegion.zw);\n\n  fragColor = vec4(decodeHDR(ldrSampler, cdmSampler, srcUv), 1.0);\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n\n")}}const at=(U,F)=>{let e,t,Q;switch(F){case"UInt8":e=1,t=4,Q=U.UNSIGNED_BYTE;break;case"SInt8":e=1,t=4,Q=U.BYTE;break;case"UInt16":e=1,t=4,Q=U.UNSIGNED_SHORT;break;case"SInt16":e=1,t=4,Q=U.SHORT;break;case"UInt32":e=1,t=4,Q=U.UNSIGNED_INT;break;case"SInt32":e=1,t=4,Q=U.INT;break;case"Float32":e=1,t=4,Q=U.FLOAT;break;case"Vec2":e=2,t=4,Q=U.FLOAT;break;case"Vec3":e=3,t=4,Q=U.FLOAT;break;case"Vec4":case"Color":e=4,t=4,Q=U.FLOAT;break;case"RGBA":e=4,t=1,Q=U.UNSIGNED_BYTE;break;default:throw"Unhandled Type"}return{dimension:e,elementSize:t,dataType:Q}};class dt{}class it extends dt{constructor(U,F,e,t){super(),this.gl=U,this.shaderAttrs=F,this.glattrbuffers=e,this.indexBuffer=t}bind(U){const F=this.gl;for(const U in this.shaderAttrs){if("instancedIds"==U)continue;const e=this.shaderAttrs[U],t=e.location;if(-1==t)continue;const Q=this.glattrbuffers[U];if(!Q){F.disableVertexAttribArray(t);continue}const l=at(this.gl,Q.dataType),n=l.dimension*l.elementSize,a=null!=Q.offset?Q.offset*l.dimension*l.elementSize:0,d=1==Q.normalized,i=e.instanced;F.enableVertexAttribArray(t),F.bindBuffer(F.ARRAY_BUFFER,Q.buffer),F.vertexAttribPointer(t,l.dimension,l.dataType,d,n,a),F.vertexAttribDivisor&&(1==i?F.vertexAttribDivisor(t,1):F.vertexAttribDivisor(t,0))}return F.bindBuffer(F.ELEMENT_ARRAY_BUFFER,this.indexBuffer),!0}unbind(){const U=this.gl;for(const F in this.shaderAttrs){const e=this.shaderAttrs[F],t=e.location;-1==t&&U.enableVertexAttribArray(t),e.instanced&&U.vertexAttribDivisor(t,0)}U.bindBuffer(U.ELEMENT_ARRAY_BUFFER,null)}destroy(){}}class st extends dt{constructor(U,F,e,t){super(),this.gl=U,this.vao=U.createVertexArray(),U.bindVertexArray(this.vao);for(const t in F){if("instancedIds"==t)continue;const Q=F[t],l=Q.location;if(-1==l)continue;let n=e[t];if(!n&&(t.endsWith("Next")&&(n=e[t.substring(0,t.length-4)],Q.offset=1),!n)){U.disableVertexAttribArray(l);continue}const a=at(U,n.dataType),d=a.dimension*a.elementSize,i=null!=Q.offset?Q.offset*a.dimension*a.elementSize:0,s=1==n.normalized,R=Q.instanced;U.enableVertexAttribArray(l),U.bindBuffer(U.ARRAY_BUFFER,n.buffer),U.vertexAttribPointer(l,a.dimension,a.dataType,s,d,i),U.vertexAttribDivisor&&(1==R?U.vertexAttribDivisor(l,1):U.vertexAttribDivisor(l,0))}this.indexBuffer=t,this.indexBuffer&&U.bindBuffer(U.ELEMENT_ARRAY_BUFFER,this.indexBuffer)}bind(U){const F=this.gl;return F.bindVertexArray(this.vao),this.indexBuffer&&F.bindBuffer(F.ELEMENT_ARRAY_BUFFER,this.indexBuffer),!0}unbind(){const U=this.gl;U.bindVertexArray(null),this.indexBuffer&&U.bindBuffer(U.ELEMENT_ARRAY_BUFFER,null)}destroy(){const U=this.gl;this.indexBuffer&&(U.bindVertexArray(this.vao),U.bindBuffer(U.ELEMENT_ARRAY_BUFFER,null)),U.deleteVertexArray(this.vao)}}function Rt(U,F,e,t){return null==U.createVertexArray?new it(U,F,e,t):new st(U,F,e,t)}class Bt extends Ae{constructor(U,F){super(U),this.listenerIDs={},this.fbo=null,this.srcLDRTex=null,this.srcCDMTex=null,this.unpackHDRShader=null,this.shaderBinding=null,this.hdrImage=F,this.hdrImage.setMetadata("gltexture",this);const e=()=>{this.__unpackHDRImage(this.hdrImage.getParams())};this.listenerIDs.updated=this.hdrImage.on("updated",e),this.hdrImage.isLoaded()?e():this.listenerIDs.loaded=this.hdrImage.on("loaded",e)}getImage(){return this.hdrImage}__unpackHDRImage(U){const F=this.__gl,e=U.data.ldr,t=U.data.cdm;if(this.fbo)this.srcLDRTex.bufferData(e),this.srcCDMTex.bufferData(t);else{this.configure({format:"RGBA",type:"FLOAT",width:e.width,height:e.height,filter:"LINEAR",wrap:"CLAMP_TO_EDGE"}),this.fbo=new Qt(this.__gl,this),this.fbo.setClearColor(new B(0,0,0,0)),this.srcLDRTex=new Ae(this.__gl,{format:"RGB",type:"UNSIGNED_BYTE",width:e.width,height:e.height,filter:"NEAREST",mipMapped:!1,wrap:"CLAMP_TO_EDGE",data:e}),this.srcCDMTex=new Ae(this.__gl,{format:"webgl2"==F.name?"RED":"ALPHA",type:"UNSIGNED_BYTE",width:e.width,height:e.height,filter:"NEAREST",mipMapped:!1,wrap:"CLAMP_TO_EDGE",data:t}),this.unpackHDRShader=new nt(this.__gl);const U=this.unpackHDRShader.compileForTarget("GLHDRImage",{directives:["#define ENABLE_ES3"]});this.shaderBinding=Rt(this.__gl,U.attrs,F.__quadattrbuffers,F.__quadIndexBuffer)}this.fbo.bindAndClear();const Q={};this.unpackHDRShader.bind(Q,"GLHDRImage"),this.shaderBinding.bind(Q);const l=Q.unifs;this.srcLDRTex.bindToUniform(Q,l.ldrSampler),this.srcCDMTex.bindToUniform(Q,l.cdmSampler),F.uniform4fv(l.srcRegion.location,[0,0,1,1]),F.drawQuad(),this.fbo.unbind(),this.emit("updated")}bindToUniform(U,F,e){return super.bindToUniform(U,F,e)}destroy(){super.destroy(),this.fbo&&(this.fbo.destroy(),this.srcLDRTex.destroy(),this.srcCDMTex.destroy()),this.unpackHDRShader&&this.unpackHDRShader.destroy(),this.shaderBinding&&this.shaderBinding.destroy(),"loaded"in this.listenerIDs&&this.hdrImage.removeListenerById("loaded",this.listenerIDs.loaded),this.hdrImage.removeListenerById("updated",this.listenerIDs.updated)}}class Vt extends tt{constructor(U){super(U,"PreComputeBRDFShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nvarying vec2 v_texCoord;\n\nimport 'GLSLUtils.glsl'\nimport 'Hammersley.glsl'\nimport 'ImportanceSampleGGX.glsl'\n\nfloat GeometrySchlickGGX(float NdotV, float roughness)\n{\n  float a = roughness;\n  float k = (a * a) / 2.0;\n\n  float nom   = NdotV;\n  float denom = NdotV * (1.0 - k) + k;\n\n  return nom / denom;\n}\n// ----------------------------------------------------------------------------\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)\n{\n  float NdotV = max(dot(N, V), 0.0);\n  float NdotL = max(dot(N, L), 0.0);\n  float ggx2 = GeometrySchlickGGX(NdotV, roughness);\n  float ggx1 = GeometrySchlickGGX(NdotL, roughness);\n\n  return ggx1 * ggx2;\n}\n\nvec2 IntegrateBRDF(float NdotV, float roughness)\n{\n  vec3 V;\n  V.x = sqrt(1.0 - NdotV*NdotV);\n  V.y = 0.0;\n  V.z = NdotV;\n\n  float A = 0.0;\n  float B = 0.0;\n\n  vec3 N = vec3(0.0, 0.0, 1.0);\n\n  for(uint i = 0u; i < SAMPLE_COUNT; ++i)\n  {\n    vec2 Xi = Hammersley(i, SAMPLE_COUNT);\n    vec3 H  = ImportanceSampleGGX(Xi, N, roughness);\n    vec3 L  = normalize(2.0 * dot(V, H) * H - V);\n\n    float NdotL = max(L.z, 0.0);\n    float NdotH = max(H.z, 0.0);\n    float VdotH = max(dot(V, H), 0.0);\n\n    if (NdotL > 0.0)\n    {\n      float G = GeometrySmith(N, V, L, roughness);\n      float G_Vis = (G * VdotH) / (NdotH * NdotV);\n      float Fc = pow(1.0 - VdotH, 5.0);\n\n      A += (1.0 - Fc) * G_Vis;\n      B += Fc * G_Vis;\n    }\n  }\n  A /= float(SAMPLE_COUNT);\n  B /= float(SAMPLE_COUNT);\n  return vec2(A, B);\n}\n\nout vec2 fragColor;\nvoid main(void) {\n  vec2 integratedBRDF = IntegrateBRDF(v_texCoord.x, v_texCoord.y);\n  fragColor = integratedBRDF;\n}\n\n")}}class rt extends tt{constructor(U){super(U,"ConvolveIrradianceShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\nimport 'constants.glsl'\nimport 'convolve-helpers.glsl'\n\nuniform float roughness;\nuniform int faceId;\nvarying vec2 v_texCoord;\n\nout vec4 fragColor;\nvoid main(void) {\n\n  vec3 N = cubeFaceUvToDir(v_texCoord.x, v_texCoord.y, faceId);   \n\n  vec3 irradiance = vec3(0.0);\n\n  vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n  vec3 tangent   = normalize(cross(up, N));\n  vec3 bitangent = cross(N, tangent);\n\n  float nrSamples = 0.0; \n  for(float phi = 0.0; phi < 2.0 * PI; phi += SAMPLE_DELTA)\n  {\n    for(float theta = 0.0; theta < 0.5 * PI; theta += SAMPLE_DELTA)\n    {\n      // spherical to cartesian (in tangent space)\n      // from spherical coordinates to cartesian coordinates\n      vec3 H = vec3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));\n      // tangent space to world\n      vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n\n      irradiance += sampleEnvMap(normalize(sampleVec)).rgb * cos(theta) * sin(theta);\n      nrSamples++;\n    }\n  }\n  irradiance = PI * irradiance * (1.0 / float(nrSamples));\n\n  fragColor = vec4(irradiance, 1.0);\n}\n")}}class ht extends tt{constructor(U){super(U,"ConvolveSpecularShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","precision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'ImportanceSampleGGX.glsl'\nimport 'convolve-helpers.glsl'\nimport 'Hammersley.glsl'\n  \n  \nuniform float roughness;\nuniform int faceId;\nvarying vec2 v_texCoord;\n\nout vec4 fragColor;\nvoid main(void) {\n\n  vec3 N = cubeFaceUvToDir(v_texCoord.x, v_texCoord.y, faceId);   \n\n  vec3 R = N;\n  vec3 V = R;\n\n  float totalWeight = 0.0;   \n  vec3 prefilteredColor = vec3(0.0);     \n  for(uint i = 0u; i < SAMPLE_COUNT; ++i)\n  {\n    vec2 Xi = Hammersley(i, SAMPLE_COUNT);\n    vec3 H  = ImportanceSampleGGX(Xi, N, roughness);\n    vec3 L  = normalize(2.0 * dot(V, H) * H - V);\n\n    float NdotL = max(dot(N, L), 0.0);\n    if (NdotL > 0.0)\n    {\n      prefilteredColor += sampleEnvMap(L).rgb * NdotL;\n      totalWeight      += NdotL;\n    }\n  }\n  prefilteredColor = prefilteredColor / totalWeight;\n\n  fragColor = vec4(prefilteredColor, 1.0);\n}\n")}}class ot extends k{constructor(U,F){super(),this.__gl=U;const e=U;this.maxFragmentShaderTextureUnits=U.getParameter(this.__gl.MAX_TEXTURE_IMAGE_UNITS),e.__quadVertexIdsBuffer||e.setupInstancedQuad(),this.textureType=1,this.textureDesc=[0,0,0,0],this.__convolved=!1,this.__fbos=[]}convolveProbe(U){const F=this.__gl,t={shaderopts:{directives:["#define ENABLE_ES3","#define ENABLE_FLOAT_TEXTURES"]}};"Low"==e.deviceCategory?(t.shaderopts.directives.push("#define SAMPLE_DELTA 0.1"),t.shaderopts.directives.push("#define SAMPLE_COUNT 64u")):"Medium"==e.deviceCategory?(t.shaderopts.directives.push("#define SAMPLE_DELTA 0.08"),t.shaderopts.directives.push("#define SAMPLE_COUNT 256u")):(t.shaderopts.directives.push("#define SAMPLE_DELTA 0.025"),t.shaderopts.directives.push("#define SAMPLE_COUNT 1024u")),this.brdfLUTTexture=F.createTexture(),F.bindTexture(F.TEXTURE_2D,this.brdfLUTTexture),F.texImage2D(F.TEXTURE_2D,0,F.RG16F,512,512,0,F.RG,F.FLOAT,null),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_S,F.CLAMP_TO_EDGE),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_T,F.CLAMP_TO_EDGE),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MIN_FILTER,F.LINEAR),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MAG_FILTER,F.LINEAR);const Q=new Vt(this.__gl),l=Q.compileForTarget("GLProbe",t.shaderopts),n=Rt(this.__gl,l.attrs,F.__quadattrbuffers,F.__quadIndexBuffer),a=F.createFramebuffer();F.bindFramebuffer(F.DRAW_FRAMEBUFFER,a),F.framebufferTexture2D(F.DRAW_FRAMEBUFFER,F.COLOR_ATTACHMENT0,F.TEXTURE_2D,this.brdfLUTTexture,0),Q.bind(t),n.bind(t),F.clear(F.COLOR_BUFFER_BIT|F.DEPTH_BUFFER_BIT),F.viewport(0,0,512,512),F.drawQuad(),F.bindFramebuffer(F.DRAW_FRAMEBUFFER,null),F.deleteFramebuffer(a),Q.unbind(t),Q.destroy();{const e=new rt(this.__gl),Q=e.compileForTarget("GLProbe",t.shaderopts),l=Rt(this.__gl,Q.attrs,F.__quadattrbuffers,F.__quadIndexBuffer);e.bind(t,"GLProbe"),l.bind(t);const n=t.unifs;U.bindToUniform(t,n.envMap);const a=64;this.irradianceCubeTex=F.createTexture(),F.bindTexture(F.TEXTURE_CUBE_MAP,this.irradianceCubeTex),F.texParameteri(F.TEXTURE_CUBE_MAP,F.TEXTURE_MAG_FILTER,F.LINEAR),F.texParameteri(F.TEXTURE_CUBE_MAP,F.TEXTURE_MIN_FILTER,F.LINEAR_MIPMAP_LINEAR),F.texParameteri(F.TEXTURE_CUBE_MAP,F.TEXTURE_WRAP_S,F.CLAMP_TO_EDGE),F.texParameteri(F.TEXTURE_CUBE_MAP,F.TEXTURE_WRAP_T,F.CLAMP_TO_EDGE),F.texParameteri(F.TEXTURE_CUBE_MAP,F.TEXTURE_WRAP_R,F.CLAMP_TO_EDGE);for(let U=0;U<6;U++)F.texImage2D(F.TEXTURE_CUBE_MAP_POSITIVE_X+U,0,F.RGBA32F,a,a,0,F.RGBA,F.FLOAT,null);const d=F.createFramebuffer();F.bindFramebuffer(F.DRAW_FRAMEBUFFER,d);for(let U=0;U<6;++U)F.uniform1i(n.faceId.location,U),F.framebufferTexture2D(F.DRAW_FRAMEBUFFER,F.COLOR_ATTACHMENT0,F.TEXTURE_CUBE_MAP_POSITIVE_X+U,this.irradianceCubeTex,0),F.viewport(0,0,a,a),F.clearColor(1,0,0,1),F.clear(F.COLOR_BUFFER_BIT|F.DEPTH_BUFFER_BIT),F.drawQuad();F.bindFramebuffer(F.DRAW_FRAMEBUFFER,null),F.deleteFramebuffer(d),F.generateMipmap(F.TEXTURE_CUBE_MAP)}{const e=new ht(this.__gl),Q=e.compileForTarget("GLProbe",t.shaderopts),l=Rt(this.__gl,Q.attrs,F.__quadattrbuffers,F.__quadIndexBuffer);e.bind(t,"GLProbe"),l.bind(t);const n=t.unifs;U.bindToUniform(t,n.envMap),this.specularCubetex=F.createTexture(),F.bindTexture(F.TEXTURE_CUBE_MAP,this.specularCubetex),F.texParameteri(F.TEXTURE_CUBE_MAP,F.TEXTURE_MAG_FILTER,F.LINEAR),F.texParameteri(F.TEXTURE_CUBE_MAP,F.TEXTURE_MIN_FILTER,F.LINEAR_MIPMAP_LINEAR),F.texParameteri(F.TEXTURE_CUBE_MAP,F.TEXTURE_WRAP_S,F.CLAMP_TO_EDGE),F.texParameteri(F.TEXTURE_CUBE_MAP,F.TEXTURE_WRAP_T,F.CLAMP_TO_EDGE),F.texParameteri(F.TEXTURE_CUBE_MAP,F.TEXTURE_WRAP_R,F.CLAMP_TO_EDGE);const a=256;for(let U=0;U<6;U++)F.texImage2D(F.TEXTURE_CUBE_MAP_POSITIVE_X+U,0,F.RGBA32F,a,a,0,F.RGBA,F.FLOAT,null);F.generateMipmap(F.TEXTURE_CUBE_MAP);const d=5;for(let U=0;U<d;++U){const e=a*Math.pow(.5,U),t=a*Math.pow(.5,U),Q=F.createFramebuffer();F.bindFramebuffer(F.DRAW_FRAMEBUFFER,Q),F.viewport(0,0,e,t);const l=U/(d-1);F.uniform1f(n.roughness.location,l);for(let e=0;e<6;++e)F.uniform1i(n.faceId.location,e),F.framebufferTexture2D(F.DRAW_FRAMEBUFFER,F.COLOR_ATTACHMENT0,F.TEXTURE_CUBE_MAP_POSITIVE_X+e,this.specularCubetex,U),F.drawQuad();F.bindFramebuffer(F.DRAW_FRAMEBUFFER,null),F.deleteFramebuffer(Q)}e.destroy()}this.__convolved=!0}bind(U){const F=this.__gl,{irradianceMap:e,prefilterMap:t,brdfLUT:Q,envMapFlags:l}=U.unifs;if(!this.__convolved)return e&&F.uniform1i(e.location,this.maxFragmentShaderTextureUnits-1),t&&F.uniform1i(t.location,this.maxFragmentShaderTextureUnits-1),l&&F.uniform1i(l.location,-1),!1;if(Q){const e=U.boundTextures++;F.activeTexture(this.__gl.TEXTURE0+e),F.bindTexture(F.TEXTURE_2D,this.brdfLUTTexture),F.uniform1i(Q.location,e)}if(e){const t=U.boundTextures++,Q=this.__gl.TEXTURE0+t;F.activeTexture(Q),F.bindTexture(F.TEXTURE_CUBE_MAP,this.irradianceCubeTex),F.uniform1i(e.location,t)}if(t){const e=U.boundTextures++,Q=this.__gl.TEXTURE0+e;F.activeTexture(Q),F.bindTexture(F.TEXTURE_CUBE_MAP,this.specularCubetex),F.uniform1i(t.location,e)}return l&&F.uniform1i(l.location,0),!0}destroy(){}}class Jt extends tt{constructor(U){super(U,"EnvMapShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\n\nimport 'inverse.glsl'\nimport 'transpose.glsl'\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID() * 2.0;\n  v_texCoord = position * 0.5 + 0.5;\n\n  mat4 inverseProjection = inverse(projectionMatrix);\n  mat3 inverseModelview = transpose(mat3(viewMatrix));\n\n  // transform from the normalized device coordinates back to the view space\n  vec3 unprojected = (inverseProjection * vec4(position, 0, 1)).xyz;\n\n  // transfrom from the view space back to the world space\n  // and use it as a sampling vector\n  v_worldDir = inverseModelview * unprojected;\n\n  gl_Position = vec4(position, 0, 1);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'gamma.glsl'\nimport 'constants.glsl'\n\nuniform float focus;\nuniform float exposure;\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\nvarying vec2 v_texCoord;\n\n#define ENABLE_INLINE_GAMMACORRECTION\n\n#define ENV_MAP_LATLONG 0\n#define ENV_MAP_OCT 1\n#define ENV_MAP_CUBE 2\n#define ENV_MAP_irradianceMap 8\n#define ENV_MAP_prefilterMap 3\n#define ENV_MAP_STEREO_LATLONG 4\n#define ENV_MAP_DUALFISHEYE 5\n#define ENV_MAP_SH 6\n#define ENV_MAP_BRDF_LUT 7\n\n#define ENV_MAPTYPE ENV_MAP_OCT\n\n#if (ENV_MAPTYPE == ENV_MAP_LATLONG)  \n\nimport 'envmap-equirect.glsl'\n\nuniform sampler2D backgroundImage;\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = latLongUVsFromDir(normalize(dir));\n  vec4 texel = texture2D(backgroundImage, uv) * exposure;\n  return vec4(texel.rgb/texel.a, 1.0);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_OCT)  \n\nimport 'envmap-octahedral.glsl'\n\nuniform sampler2D   envMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = dirToSphOctUv(normalize(dir));\n  if (false) {\n    vec4 texel = texture2D(envMap, uv);\n    return vec4(texel.rgb/texel.a, 1.0);\n  }\n  else {\n    return texture2D(envMap, uv) * exposure;\n  }\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_CUBE)\n\nuniform samplerCube cubeMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return texture(cubeMap, dir, 0.0);// * exposure;\n  // return textureLod(cubeMap, dir, exposure);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_irradianceMap)\n\nuniform samplerCube irradianceMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return textureLod(irradianceMap, dir, exposure);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_prefilterMap)\n\nuniform samplerCube prefilterMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return textureLod(prefilterMap, dir, exposure);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_STEREO_LATLONG)  \n\nimport 'envmap-equirect.glsl'\nuniform int eye;// L = 0, R = 1;\nuniform sampler2D backgroundImage;\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = latLongUVsFromDir(normalize(v_worldDir));\n  uv.y *= 0.5;\n  if (eye == 1) {\n    uv.y += 0.5;\n  }\n  vec4 texel = texture2D(backgroundImage, uv) * exposure;\n  fragColor = vec4(texel.rgb/texel.a, 1.0);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_DUALFISHEYE)\n\nimport 'envmap-dualfisheye.glsl'\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = dualfisheyeUVsFromDir(dir);\n  return texture2D(backgroundImage, uv) * exposure;\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_SH)\n\nimport 'SHCoeffs.glsl'\n\nvec4 sampleEnvMap(vec3 dir) {\n\treturn vec4(sampleSHCoeffs(dir) * exposure, 1.0);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_BRDF_LUT)\n\nuniform sampler2D brdfLUT;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return texture2D(brdfLUT, v_texCoord);\n}\n#endif\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  fragColor = sampleEnvMap(normalize(v_worldDir));\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb);\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}class Zt extends ot{constructor(U,F){super(U.gl,"EnvMap"),this.__srcGLTex=null,this.__envMapShader=null,this.__envMapShaderBinding=null,this.__renderer=U,this.__envMap=F,this.__backgroundFocus=0,this.__envMap.isLoaded()?this.init():this.__envMap.once("loaded",(U=>{this.init()}))}init(){const U=this.__renderer.gl;U.__quadVertexIdsBuffer||U.setupInstancedQuad(),this.__srcGLTex=new Bt(U,this.__envMap),this.__envMapShader=new Jt(U);const F=this.__envMapShader.compileForTarget("GLEnvMap",{directives:["#define ENABLE_ES3"]});this.__envMapShaderBinding=Rt(U,F.attrs,U.__quadattrbuffers,U.__quadIndexBuffer);const e=this.__envMap.headlightModeParam,t=()=>{e.value?this.textureDesc[3]|=1:this.textureDesc[3]&=-2};t(),e.on("valueChanged",(()=>{t(),this.emit("updated")})),this.convolveProbe(this.__srcGLTex),this.emit("updated")}getEnvMap(){return this.__envMap}getBackgroundFocus(){return this.__backgroundFocus}setBackgroundFocus(U){this.__backgroundFocus=U,this.__renderer.requestRedraw()}draw(U){if(this.__envMap.isLoaded()){const F=this.__gl;{this.__envMapShader.bind(U,"GLEnvMap");const e=U.unifs,{envMap:t,focus:Q,exposure:l}=U.unifs;t&&this.__srcGLTex.bindToUniform(U,t),Q&&F.uniform1f(Q.location,this.__backgroundFocus),l&&F.uniform1f(l.location,U.exposure),this.__envMapShaderBinding.bind(U),F.depthMask(!1),U.bindViewports(e,(()=>{F.drawQuad()}))}}}destroy(){super.destroy(),this.__srcGLTex&&this.__srcGLTex.destroy()}}var ct=function(U){var F=typeof U;return null!=U&&("object"==F||"function"==F)},mt="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},St="object"==typeof mt&&mt&&mt.Object===Object&&mt,Wt="object"==typeof self&&self&&self.Object===Object&&self,Et=St||Wt||Function("return this")(),pt=function(){return Et.Date.now()},ut=/\s/;var Nt=function(U){for(var F=U.length;F--&&ut.test(U.charAt(F)););return F},kt=/^\s+/;var bt=function(U){return U?U.slice(0,Nt(U)+1).replace(kt,""):U},Ct=Et.Symbol,Tt=Object.prototype,Gt=Tt.hasOwnProperty,Xt=Tt.toString,gt=Ct?Ct.toStringTag:void 0;var yt=function(U){var F=Gt.call(U,gt),e=U[gt];try{U[gt]=void 0;var t=!0}catch(U){}var Q=Xt.call(U);return t&&(F?U[gt]=e:delete U[gt]),Q},It=Object.prototype.toString;var xt=function(U){return It.call(U)},ft=Ct?Ct.toStringTag:void 0;var Mt=function(U){return null==U?void 0===U?"[object Undefined]":"[object Null]":ft&&ft in Object(U)?yt(U):xt(U)};var vt=function(U){return null!=U&&"object"==typeof U};var Dt=function(U){return"symbol"==typeof U||vt(U)&&"[object Symbol]"==Mt(U)},Lt=/^[-+]0x[0-9a-f]+$/i,Yt=/^0b[01]+$/i,_t=/^0o[0-7]+$/i,wt=parseInt;var zt=function(U){if("number"==typeof U)return U;if(Dt(U))return NaN;if(ct(U)){var F="function"==typeof U.valueOf?U.valueOf():U;U=ct(F)?F+"":F}if("string"!=typeof U)return 0===U?U:+U;U=bt(U);var e=Yt.test(U);return e||_t.test(U)?wt(U.slice(2),e?2:8):Lt.test(U)?NaN:+U},Kt=Math.max,Ht=Math.min;var Pt=function(U,F,e){var t,Q,l,n,a,d,i=0,s=!1,R=!1,B=!0;if("function"!=typeof U)throw new TypeError("Expected a function");function V(F){var e=t,l=Q;return t=Q=void 0,i=F,n=U.apply(l,e)}function r(U){return i=U,a=setTimeout(o,F),s?V(U):n}function h(U){var e=U-d;return void 0===d||e>=F||e<0||R&&U-i>=l}function o(){var U=pt();if(h(U))return J(U);a=setTimeout(o,function(U){var e=F-(U-d);return R?Ht(e,l-(U-i)):e}(U))}function J(U){return a=void 0,B&&t?V(U):(t=Q=void 0,n)}function Z(){var U=pt(),e=h(U);if(t=arguments,Q=this,d=U,e){if(void 0===a)return r(d);if(R)return clearTimeout(a),a=setTimeout(o,F),V(d)}return void 0===a&&(a=setTimeout(o,F)),n}return F=zt(F)||0,ct(e)&&(s=!!e.leading,l=(R="maxWait"in e)?Kt(zt(e.maxWait)||0,F):l,B="trailing"in e?!!e.trailing:B),Z.cancel=function(){void 0!==a&&clearTimeout(a),i=0,t=d=Q=a=void 0},Z.flush=function(){return void 0===a?n:J(pt())},Z};var Ot=function(U,F,e){var t=!0,Q=!0;if("function"!=typeof U)throw new TypeError("Expected a function");return ct(e)&&(t="leading"in e?!!e.leading:t,Q="trailing"in e?!!e.trailing:Q),Pt(U,F,{leading:t,maxWait:F,trailing:Q})};class jt extends tt{constructor(U){super(U,"ScreenQuadShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\nuniform vec2 pos;\nuniform vec2 size;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(vec2(-1.0, -1.0) + (pos * 2.0) + (v_texCoord * abs(size) * 2.0), 0.0, 1.0);\n  if (size.x < 0.0)\n    v_texCoord.x = 1.0 - v_texCoord.x;\n  if (size.y < 0.0)\n    v_texCoord.y = 1.0 - v_texCoord.y;\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D image;\n\nvarying vec2 v_texCoord;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n  fragColor = texture2D(image, v_texCoord);\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}class At{constructor(U,F){this.__gl=U,this.__pos=[0,0],this.__size=[1,1],this.flipY=!0,this.__glshader=new jt(U),U.__quadVertexIdsBuffer||U.setupInstancedQuad();const e=this.__glshader.compileForTarget("GLScreenQuad",F);this.__quadBinding=Rt(this.__gl,e.attrs,U.__quadattrbuffers,U.__quadIndexBuffer),this.ready=!0}bind(U,F,e,t){const Q=U.unifs;F&&F.bindToUniform(U,U.unifs.image);const l=this.__gl;{const U=Q.pos;if(U){let F=e?e instanceof d?e.asArray():e:this.__pos;l.uniform2fv(U.location,F)}}{const U=Q.size;if(U){let F=t?t instanceof d?t.asArray():t:this.__size;l.uniform2fv(U.location,F)}}this.__quadBinding.bind(U)}bindShader(U){return this.__glshader.bind(U,"GLScreenQuad")}draw(U,F,e,t){this.bind(U,F,e,t);const Q=this.__gl;Q.drawElements(Q.TRIANGLES,6,Q.UNSIGNED_SHORT,0)}destroy(){}}class qt extends _{constructor(U,F){super(),this.genBufferOpts={},this.__indexBuffer=null,this.__gl=U,this.__geom=F,this.__glattrbuffers={},this.__shaderBindings={},this.buffersDirty=!0;this.__geom.on("geomDataChanged",(U=>{this.dirtyBuffers(U)}));this.__geom.on("geomDataTopologyChanged",(U=>{this.clearBuffers(),this.dirtyBuffers(U)}))}getGeom(){return this.__geom}dirtyBuffers(U){this.genBufferOpts=U,this.buffersDirty=!0,this.emit("updated")}genBuffers(U){}updateBuffers(U){this.genBuffers(U),this.buffersDirty=!1}bind(U){if(this.__destroyed)throw new Error("Error binding a destroyed geom");this.buffersDirty&&this.updateBuffers();let F=this.__shaderBindings[U.shaderkey];if(!F){F=Rt(this.__gl,U.attrs,this.__glattrbuffers,this.__indexBuffer),this.__shaderBindings[U.shaderkey]=F}return F.bind(U),!0}unbind(U){const F=this.__shaderBindings[U.shaderkey];F&&F.unbind(U)}draw(U){throw new Error("Not implemented. Implement this method in a derived class.")}drawInstanced(U,F){throw new Error("Not implemented. Implement this method in a derived class.")}bindAndDraw(U){this.bind(U),this.draw(U)}clearBuffers(){const U=this.__gl;for(const F in this.__glattrbuffers){const e=this.__glattrbuffers[F];e.shared||U.deleteBuffer(e.buffer)}this.__glattrbuffers={};for(const U in this.__shaderBindings){this.__shaderBindings[U].destroy()}this.__shaderBindings={}}destroy(){this.__geom.deleteMetadata("glgeom"),this.clearBuffers(),this.__destroyed=!0,this.emit("destructing")}}class $t extends qt{constructor(U,F){super(U,F),this.__numTriIndices=0,this.__indexDataType=0,this.__numVertices=0,this.__numTriangles=0,this.__numRenderVerts=0}genBuffers(){super.genBuffers();const U=this.__gl,F=this.__geom.genBuffers(),e=F.indices;this.__numTriIndices=F.indices.length,e instanceof Uint8Array&&(this.__indexDataType=this.__gl.UNSIGNED_BYTE),e instanceof Uint16Array&&(this.__indexDataType=this.__gl.UNSIGNED_SHORT),e instanceof Uint32Array&&(this.__indexDataType=this.__gl.UNSIGNED_INT),this.__numVertices=this.__geom.getNumVertices(),this.__numTriangles=e.length/3,this.__numRenderVerts=F.numRenderVerts,this.__indexBuffer&&U.deleteBuffer(this.__indexBuffer),this.__indexBuffer=U.createBuffer(),U.bindBuffer(U.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),U.bufferData(U.ELEMENT_ARRAY_BUFFER,F.indices,U.STATIC_DRAW);for(const e in F.attrBuffers){const t=F.attrBuffers[e];this.__glattrbuffers[e]&&this.__glattrbuffers[e].buffer&&U.deleteBuffer(this.__glattrbuffers[e].buffer);const Q=U.createBuffer();U.bindBuffer(U.ARRAY_BUFFER,Q),U.bufferData(U.ARRAY_BUFFER,t.values,U.STATIC_DRAW),this.__glattrbuffers[e]={buffer:Q,dataType:t.dataType,normalized:t.normalized},"textureCoords"==e&&(this.__glattrbuffers.texCoords=this.__glattrbuffers.textureCoords)}}updateBuffers(U){const F=this.__gl;if(this.__numVertices!=this.__geom.getNumVertices())return void this.genBuffers();const e=this.__geom.genBuffers({includeIndices:!1});for(const U in e.attrBuffers){const t=e.attrBuffers[U],Q=this.__glattrbuffers[U];F.bindBuffer(F.ARRAY_BUFFER,Q.buffer),F.bufferData(F.ARRAY_BUFFER,t.values,F.STATIC_DRAW)}this.buffersDirty=!1}clearBuffers(){this.__gl.deleteBuffer(this.__indexBuffer),this.__indexBuffer=null,super.clearBuffers()}draw(U){this.__gl.drawElements(this.__gl.TRIANGLES,this.__numTriIndices,this.__indexDataType,0)}drawInstanced(U,F){this.__gl.drawElementsInstanced(this.__gl.TRIANGLES,this.__numTriIndices,this.__indexDataType,0,F)}destroy(){super.destroy();this.__gl.deleteBuffer(this.__indexBuffer),this.__indexBuffer=null}}const UQ={MSAA_RENDERBUFFER:0,COLORBUFFER:1,DEPTHBUFFER:2};class FQ extends K{constructor(U){super(),this.__fbo=null,this.offscreenBuffer=null,this.depthTexture=null,this.__backgroundTexture=null,this.__backgroundGLTexture=null,this.offscreenBufferFbo=null,this.__width=0,this.__height=0,this.__canvasWidth=0,this.__canvasHeight=0,this.fb=null,this.depthBuffer=null,this.EXT_frag_depth=null,this.depthRange=[0,0],this.backgroundColorParam=new SU("BackgroundColor",new B("#eeeeee")),this.doubleClickTimeParam=new hU("DoubleClickTimeMS",200),this.renderer=U,this.__renderer=U,this.addParameter(this.doubleClickTimeParam);const F=this.__renderer.gl;this.__gl=F,this.quad=new $t(F,new kF(1,1)),"webgl2"==F.name&&(this.offscreenBuffer=new Ae(F,{type:"UNSIGNED_BYTE",format:"RGBA",filter:"LINEAR",width:4,height:4}),this.depthTexture=new Ae(F,{type:F.UNSIGNED_INT_24_8,format:F.DEPTH_STENCIL,internalFormat:"webgl2"==F.name?F.DEPTH24_STENCIL8:F.DEPTH_COMPONENT,filter:F.NEAREST,wrap:F.CLAMP_TO_EDGE,width:4,height:4})),this.highlightedGeomsBuffer=new Ae(F,{type:"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:4,height:4}),this.highlightedGeomsBufferFbo=new Qt(F,this.highlightedGeomsBuffer,!0),this.highlightedGeomsBufferFbo.setClearColor(new B(0,0,0,0));const e=()=>{const U=this.backgroundColorParam.value;U instanceof KU?U instanceof yF?(this.__backgroundTexture=U,this.__backgroundGLTexture=new Bt(F,U)):(this.__backgroundTexture=U,this.__backgroundGLTexture=new Ae(F,U)):U instanceof B?(this.__backgroundGLTexture&&(this.__backgroundGLTexture.destroy(),this.__backgroundGLTexture=null,this.__backgroundTexture=null),this.offscreenBufferFbo&&this.offscreenBufferFbo.setClearColor(new B(U.asArray()))):console.warn("Invalid background:"+U),this.emit("updated")};e(),this.backgroundColorParam.on("valueChanged",e)}getWidth(){return this.__width}getHeight(){return this.__height}resize(U,F){if(this.__canvasWidth==U&&this.__canvasHeight==F)return;this.__canvasWidth=U,this.__canvasHeight=F,this.__width=U,this.__height=F,this.resizeRenderTargets(U,F);const e=new b(this.__width,this.__height);this.emit("resized",e)}resizeRenderTargets(U,F){const e=this.__renderer.gl;if(this.renderer.outlineThickness>0&&"webgl2"==e.name){this.fb&&(e.deleteFramebuffer(this.fb[UQ.MSAA_RENDERBUFFER]),e.deleteFramebuffer(this.fb[UQ.COLORBUFFER]),e.deleteFramebuffer(this.fb[UQ.DEPTHBUFFER]),this.colorRenderbuffer&&e.deleteRenderbuffer(this.colorRenderbuffer),this.depthBuffer&&e.deleteRenderbuffer(this.depthBuffer)),this.offscreenBuffer.resize(U,F),this.depthTexture.resize(U,F),this.fb=[],this.fb[UQ.MSAA_RENDERBUFFER]=e.createFramebuffer(),e.bindFramebuffer(e.FRAMEBUFFER,this.fb[UQ.MSAA_RENDERBUFFER]),this.colorRenderbuffer=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,this.colorRenderbuffer),e.renderbufferStorageMultisample(e.RENDERBUFFER,4,e.RGBA8,U,F),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.RENDERBUFFER,this.colorRenderbuffer),this.depthBuffer=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,this.depthBuffer),e.renderbufferStorageMultisample(e.RENDERBUFFER,4,e.DEPTH24_STENCIL8,U,F),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,this.depthBuffer),this.fb[UQ.COLORBUFFER]=e.createFramebuffer(),e.bindFramebuffer(e.FRAMEBUFFER,this.fb[UQ.COLORBUFFER]),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,this.offscreenBuffer.glTex,0),e.bindFramebuffer(e.FRAMEBUFFER,null),this.fb[UQ.DEPTHBUFFER]=e.createFramebuffer(),e.bindFramebuffer(e.FRAMEBUFFER,this.fb[UQ.DEPTHBUFFER]),e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,this.depthTexture.glTex,0),e.bindFramebuffer(e.FRAMEBUFFER,null);const t=e.checkFramebufferStatus("webgl2"==e.name?e.DRAW_FRAMEBUFFER:e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}}this.highlightedGeomsBuffer&&this.highlightedGeomsBuffer.resize(U,F)}draw(U){const F=this.__renderer.gl,e=U.boundRendertarget;if(this.renderer.outlineThickness>0&&"webgl2"==F.name){this.fb||this.resizeRenderTargets(this.__width,this.__height);const e=this.fb[UQ.MSAA_RENDERBUFFER];F.bindFramebuffer("webgl2"==F.name?F.DRAW_FRAMEBUFFER:F.FRAMEBUFFER,e),U.boundRendertarget=e}else U.boundRendertarget||F.bindFramebuffer(F.FRAMEBUFFER,null);F.viewport(0,0,this.__width,this.__height);const t=this.backgroundColorParam.value.asArray();if(F.clearColor(t[0],t[1],t[2],t[3]),F.colorMask(!0,!0,!0,!1),F.clear(F.COLOR_BUFFER_BIT|F.DEPTH_BUFFER_BIT),F.enable(F.DEPTH_TEST),this.__renderer.drawScene(U),this.drawHighlights(U),this.fb&&"webgl2"==F.name){const t=F;t.bindFramebuffer(t.READ_FRAMEBUFFER,this.fb[UQ.MSAA_RENDERBUFFER]),t.bindFramebuffer(t.DRAW_FRAMEBUFFER,this.fb[UQ.COLORBUFFER]),t.clearBufferfv(t.COLOR,0,[0,0,0,0]),t.blitFramebuffer(0,0,this.__width,this.__height,0,0,this.__width,this.__height,t.COLOR_BUFFER_BIT,t.LINEAR),F.bindFramebuffer(F.DRAW_FRAMEBUFFER,e),U.boundRendertarget=e,F.viewport(0,0,this.__width,this.__height),F.disable(F.DEPTH_TEST);const Q=this.__renderer.screenQuad;Q.bindShader(U),Q.draw(U,this.offscreenBuffer)}}drawSilhouettes(U){const F=this.__renderer.gl;if(0==this.renderer.outlineThickness||"webgl2"!=F.name||!this.fb)return;const e=F;if(e.bindFramebuffer(e.READ_FRAMEBUFFER,this.fb[UQ.MSAA_RENDERBUFFER]),e.bindFramebuffer(e.DRAW_FRAMEBUFFER,this.fb[UQ.DEPTHBUFFER]),e.clearBufferfv(e.COLOR,0,[1,1,1,1]),e.blitFramebuffer(0,0,this.__width,this.__height,0,0,this.__width,this.__height,e.DEPTH_BUFFER_BIT,e.NEAREST),e.bindFramebuffer(e.DRAW_FRAMEBUFFER,this.fb[UQ.MSAA_RENDERBUFFER]),U.boundRendertarget=this.fb[UQ.MSAA_RENDERBUFFER],e.viewport(0,0,this.__width,this.__height),0==this.renderer.outlineThickness)return;e.enable(e.BLEND),e.blendEquation(e.FUNC_ADD),e.blendFunc(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA),e.disable(e.DEPTH_TEST),e.depthMask(!1),this.renderer.silhouetteShader.bind(U);const t=U.unifs;this.depthTexture.bindToUniform(U,t.depthTexture),e.uniform2f(t.screenSize.location,this.__width,this.__height),e.uniform1f(t.outlineThickness.location,this.renderer.outlineThickness);const Q=this.renderer.outlineColor.asArray();e.uniform4f(t.outlineColor.location,Q[0],Q[1],Q[2],Q[3]),e.uniform1f(t.outlineSensitivity.location,this.renderer.outlineSensitivity),e.uniform1f(t.outlineDepthBias.location,this.renderer.outlineDepthBias),e.uniform2f(t.depthRange.location,this.depthRange[0],this.depthRange[1]),this.quad.bindAndDraw(U),e.enable(e.DEPTH_TEST),e.depthMask(!0)}drawHighlights(U){if(this.highlightedGeomsBufferFbo){const F=this.__renderer.gl;this.highlightedGeomsBufferFbo.bindForWriting(U),this.highlightedGeomsBufferFbo.clear(),F.disable(F.BLEND),F.enable(F.DEPTH_TEST),F.depthFunc(F.LESS),F.depthMask(!0),U.glShader=null,this.__renderer.drawHighlightedGeoms(U),this.highlightedGeomsBufferFbo.unbindForWriting(U),F.viewport(0,0,this.__width,this.__height);{this.renderer.highlightsShader.bind(U),F.enable(F.BLEND),F.blendEquation(F.FUNC_ADD),F.blendFunc(F.SRC_ALPHA,F.ONE_MINUS_SRC_ALPHA);const e=U.unifs;F.uniform1f(e.outlineThickness.location,this.renderer.highlightOutlineThickness),this.highlightedGeomsBuffer.bindToUniform(U,e.highlightDataTexture),F.uniform2f(e.highlightDataTextureSize.location,U.region[2],U.region[3]),this.quad.bindAndDraw(U),F.disable(F.BLEND)}}}getManipulator(){return this.manipulator}setManipulator(U){this.manipulator!=U&&(this.manipulator&&this.manipulator.deactivateTool&&this.manipulator.deactivateTool(),this.manipulator=U,this.manipulator.activateTool&&this.manipulator.activateTool())}onPointerDown(U){console.warn("@GLBaseViewport#onPointerDown - Implement me!")}onPointerUp(U){console.warn("@GLBaseViewport#onPointerUp - Implement me!")}onPointerMove(U){console.warn("@GLBaseViewport#onPointerMove - Implement me!")}onPointerEnter(U){console.warn("@GLBaseViewport#onPointerEnter - Implement me!")}onPointerLeave(U){console.warn("@GLBaseViewport#onPointerLeave - Implement me!")}onMouseLeave(U){}onKeyDown(U){}onKeyUp(U){}}class eQ extends N{constructor(U,F){super(),this.interfaceType=U,this.viewXfo=F}}class tQ{constructor(U,F,e,t,Q){this.screenPos=U,this.pointerRay=F,this.intersectionPos=e,this.geomData=t,this.geomItem=Q.geomItem,this.dist=Q.dist}}class QQ extends FQ{constructor(U,F,e,t){super(U),this.debugHighlightedGeomsBuffer=!1,this.__x=0,this.__y=0,this.region=[0,0,0,0],this.__cameraXfo=new c,this.__cameraMat=new h,this.__viewMat=new h,this.__geomDataBufferInvalid=!0,this.__screenPos=null,this.__name=F,this.__projectionMatrix=new h,this.__frustumDim=new d,this.__bl=new d(0,0),this.__tr=new d(1,1),this.__prevDownTime=0,this.__geomDataBufferSizeFactor=1,this.debugGeomShader=!1;const Q=this.__renderer.gl;this.__geomDataBuffer=new Ae(Q,{type:U.floatGeomBuffer?"FLOAT":"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:e<=1?1:Math.floor(e/this.__geomDataBufferSizeFactor),height:t<=1?1:Math.floor(t/this.__geomDataBufferSizeFactor)}),this.__geomDataBufferFbo=new Qt(Q,this.__geomDataBuffer,!0),this.__geomDataBufferFbo.setClearColor(new B(0,0,0,0)),this.__camera=new Xe("DefaultCamera"),this.setCamera(this.__camera),this.setManipulator(new Pe({renderer:U})),this.resize(e,t)}getBl(){return this.__bl}setBl(U){this.__bl.x=U,this.__bl.y=U,this.resize(this.__canvasWidth,this.__canvasHeight)}getTr(){return this.__tr}setTr(U){this.__tr.x=U,this.__tr.y=U,this.resize(this.__canvasWidth,this.__canvasHeight)}getPosX(){return this.__x}getPosY(){return this.__y}resize(U,F){if(this.__canvasWidth==U&&this.__canvasHeight==F)return;this.__canvasWidth=U,this.__canvasHeight=F,this.__x=U*this.__bl.x,this.__y=U*this.__bl.y,this.__width=U*this.__tr.x-U*this.__bl.x,this.__height=F*this.__tr.y-F*this.__bl.y,this.region=[this.__x,this.__y,this.__width,this.__height],this.resizeRenderTargets(this.__width,this.__height),this.__camera&&this.__updateProjectionMatrix();const e=new b(this.__width,this.__height);this.emit("resized",e)}resizeRenderTargets(U,F){super.resizeRenderTargets(U,F),this.__geomDataBufferFbo&&(this.__geomDataBuffer.resize(Math.floor(this.__width/this.__geomDataBufferSizeFactor),Math.floor(this.__height/this.__geomDataBufferSizeFactor)),this.renderGeomDataFbo())}getCamera(){return this.__camera}setCamera(U){this.__camera=U,this.depthRange=[this.__camera.getNear(),this.__camera.getFar()];const F=U.globalXfoParam,e=()=>{this.__cameraXfo=F.value,this.__cameraMat=this.__cameraXfo.toMat4(),this.__viewMat=this.__cameraMat.inverse()};e(),F.on("valueChanged",(()=>{e(),this.invalidateGeomDataBuffer(),this.emit("updated");const U=new eQ("CameraAndPointer",this.__cameraXfo);this.emit("viewChanged",U)})),this.__camera.on("projectionParamChanged",(()=>{this.__updateProjectionMatrix(),this.depthRange=[this.__camera.getNear(),this.__camera.getFar()],this.emit("updated")})),this.__updateProjectionMatrix()}__updateProjectionMatrix(){const U=this.__width/this.__height;this.__camera.updateProjectionMatrix(this.__projectionMatrix,U);const F=Math.tan(this.__camera.getFov()/2)*this.__camera.getNear()*2,e=F*U;this.__frustumDim.set(e,F)}getProjectionMatrix(){return this.__projectionMatrix}getViewMatrix(){return this.__viewMat}frameView(U){this.__width>0&&this.__height>0?this.__camera.frameView(this,U):this.once("resized",(()=>this.frameView()))}calcRayFromScreenPos(U){const F=this.__canvasHeight*(1-this.__tr.y);let e=(U.x-this.__x)/this.__width,t=(U.y-F)/this.__height;e=2*e-1,t=2*t-1;const Q=this.__cameraMat,l=this.__projectionMatrix.inverse();if(null==l)return console.warn(`Unable to generate Ray from screen pos:${U.toString()} in region ${this.region}`),new Z;let n,a;if(this.__camera.isOrthographic()){const U=l.transformVec3(new i(e,-t,-1));U.z=0,n=Q.transformVec3(U),a=new i(0,0,-1)}else n=Q.translation,a=l.transformVec3(new i(e,-t,-1));return a=Q.rotateVec3(a).normalize(),new Z(n,a)}renderGeomDataFbo(){if(this.__geomDataBufferFbo){const U={};this.__initRenderState(U),U.geomDataFbo=this.__geomDataBufferFbo,this.__geomDataBufferFbo.bindAndClear(U),this.__renderer.drawSceneGeomData(U),this.__geomDataBufferInvalid=!1,this.__geomDataBufferFbo.unbind()}}invalidateGeomDataBuffer(){this.__geomDataBufferInvalid=!0}getGeomDataAtPos(U,F){if(this.__geomDataBufferFbo){if(this.__geomDataBufferInvalid&&(this.renderGeomDataFbo(),this.__screenPos=null),U===this.__screenPos)return this.__intersectionData;this.__screenPos=U,this.__intersectionData=null;const e=this.__renderer.gl;e.finish(),this.__geomDataBufferFbo.bindForReading();const t=this.__geomDataBufferFbo.width,Q=this.__geomDataBufferFbo.height,l=Math.floor(U.x*(t/this.__width)),n=Math.floor(U.y*(Q/this.__height));let a,d;if(this.__renderer.floatGeomBuffer){if(d=new Float32Array(4),e.readPixels(l,Q-n-1,1,1,e.RGBA,e.FLOAT,d),0==d[3])return null;a=63&Math.round(d[0])}else{if(d=new Uint8Array(4),e.readPixels(l,Q-n-1,1,1,e.RGBA,e.UNSIGNED_BYTE,d),e.bindFramebuffer(e.FRAMEBUFFER,null),0==d[0]&&0==d[1])return;a=Math.floor(d[1]/32)}this.__geomDataBufferFbo.unbind();const i=this.__renderer.getPass(a);if(!i)return console.warn("Geom data buffer returns invalid pass id:",a),null;const s=i.getGeomItemAndDist(d);if(s){if(!s.geomItem.isSelectable())return null;F||(F=this.calcRayFromScreenPos(U));const e=F.start.add(F.dir.scale(s.dist));this.__intersectionData=new tQ(U,F,e,d,s)}return this.__intersectionData}return null}getGeomItemsInRect(U,F){var e;if(this.__geomDataBufferFbo){const t=this.__renderer.gl;t.finish();const Q=this.__geomDataBufferFbo.width,l=this.__geomDataBufferFbo.height,n=Q/this.__width,a=l/this.__height,d=Math.round(U.x*n),i=Math.round(U.y*a),s=Math.round(F.x*n),R=Math.round(F.y*a),B=Math.round(l-R),V=Math.round(d),r=Math.round(s-d),h=Math.round(R-i),o=r*h;let J;this.__geomDataBufferFbo.bindForReading(),this.__renderer.floatGeomBuffer?(J=new Float32Array(4*o),t.readPixels(V,B,r,h,t.RGBA,t.FLOAT,J)):(J=new Uint8Array(4*o),t.readPixels(V,B,r,h,t.RGBA,t.UNSIGNED_BYTE,J)),t.bindFramebuffer(t.FRAMEBUFFER,null);const Z=new Set;for(let U=0;U<o;U++){let F;const t=J.subarray(4*U,4*(U+1));if(this.__renderer.floatGeomBuffer){if(0==t[3])continue;F=Math.round(t[0])}else{if(0==t[0]&&0==t[1])continue;F=Math.floor(t[1]/64)}const Q=null===(e=this.__renderer.getPass(F))||void 0===e?void 0:e.getGeomItemAndDist(t);if(Q){if(!Q.geomItem.isSelectable())continue;Z.add(Q.geomItem)}}return Z}return new Set}__getPointerPos(U,F){return new d(U-this.getPosX(),F-this.getPosY())}prepareUIEvent(U){U.viewport=this}onPointerDown(U){if(this.prepareUIEvent(U),U.pointerType===X.mouse){const F=U;F.pointerPos=this.__getPointerPos(F.rendererX,F.rendererY),F.pointerRay=this.calcRayFromScreenPos(F.pointerPos),F.intersectionData=this.getGeomDataAtPos(F.pointerPos,F.pointerRay)}else if(U.pointerType===X.touch){const F=U;if(1==F.touches.length){const U=F.touches[0];F.pointerPos=this.__getPointerPos(U.rendererX,U.rendererY),F.pointerRay=this.calcRayFromScreenPos(F.pointerPos),F.intersectionData=this.getGeomDataAtPos(F.pointerPos,F.pointerRay)}}const F=Date.now();if(F-this.__prevDownTime<this.doubleClickTimeParam.value){if(this.manipulator&&(this.manipulator.onPointerDoublePress(U),!U.propagating))return;if(this.emit("pointerDoublePressed",U),!U.propagating)return}else this.__prevDownTime=F;U.getCapture()?U.getCapture().onPointerDown(U):null!=U.intersectionData&&(U.intersectionData.geomItem.onPointerDown(U),!U.propagating||U.getCapture())||(this.emit("pointerDown",U),U.propagating&&!U.getCapture()&&(!this.manipulator||(this.manipulator.onPointerDown(U),U.propagating)))}onPointerUp(U){if(this.prepareUIEvent(U),U.pointerType===X.mouse){const F=U;F.pointerPos=this.__getPointerPos(F.rendererX,F.rendererY),F.pointerRay=this.calcRayFromScreenPos(F.pointerPos),F.intersectionData=this.getGeomDataAtPos(F.pointerPos,F.pointerRay)}else if(U.pointerType===X.touch){const F=U;if(0==F.touches.length&&1==F.changedTouches.length){const U=F.changedTouches[0];F.pointerPos=this.__getPointerPos(U.rendererX,U.rendererY),F.pointerRay=this.calcRayFromScreenPos(F.pointerPos),F.intersectionData=this.getGeomDataAtPos(F.pointerPos,F.pointerRay)}}U.getCapture()&&(U.getCapture().onPointerUp(U),!U.propagating)||(null==U.intersectionData||(U.intersectionData.geomItem.onPointerUp(U),U.propagating))&&(this.emit("pointerUp",U),U.propagating&&(!this.manipulator||(this.manipulator.onPointerUp(U),U.propagating)))}onPointerMove(U){if(this.prepareUIEvent(U),U.pointerType===X.mouse){const F=U,e=this.__getPointerPos(F.rendererX,F.rendererY);F.pointerPos=e,F.pointerRay=this.calcRayFromScreenPos(e)}else if(U.pointerType===X.touch){const F=U;for(let U=0;U<F.touches.length;U++){const e=F.touches[U];e.touchPos=this.__getPointerPos(e.rendererX,e.rendererY),e.touchRay=this.calcRayFromScreenPos(e.touchPos)}F.pointerPos=F.touches[0].touchPos,F.pointerRay=F.touches[0].touchRay}if(!U.getCapture()||(U.getCapture().onPointerMove(U),U.propagating)){if(U.intersectionData=this.getGeomDataAtPos(U.pointerPos,U.pointerRay),U.intersectionData){if(U.intersectionData.geomItem!=this.pointerOverItem){if(this.pointerOverItem&&(U.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(U),U.propagating&&this.emit("pointerLeaveGeom",U)),this.pointerOverItem=U.intersectionData.geomItem,this.pointerOverItem.onPointerEnter(U),!U.propagating)return;this.emit("pointerOverGeom",U)}if(U.intersectionData.geomItem.onPointerMove(U),!U.propagating||U.getCapture())return}else if(this.pointerOverItem){if(U.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(U),this.pointerOverItem=null,!U.propagating)return;this.emit("pointerLeaveGeom",U)}this.emit("pointerMove",U),U.propagating&&(!this.manipulator||(this.manipulator.onPointerMove(U),U.propagating))}}onPointerEnter(U){this.prepareUIEvent(U),this.emit("pointerEnter",U),U.propagating&&(!this.manipulator||!this.manipulator.onPointerEnter||(this.manipulator.onPointerEnter(U),U.propagating))}onPointerLeave(U){this.prepareUIEvent(U),this.emit("pointerLeave",U),U.propagating&&(!this.manipulator||!this.manipulator.onPointerLeave||(this.manipulator.onPointerLeave(U),U.propagating))}onKeyDown(U){this.manipulator&&(this.manipulator.onKeyDown(U),!U.propagating)||this.emit("keyDown",U)}onKeyUp(U){this.manipulator&&(this.manipulator.onKeyUp(U),!U.propagating)||this.emit("keyUp",U)}onWheel(U){this.prepareUIEvent(U),U.pointerPos=this.__getPointerPos(U.rendererX,U.rendererY),U.pointerRay=this.calcRayFromScreenPos(U.pointerPos),U.intersectionData=this.getGeomDataAtPos(U.pointerPos,U.pointerRay),(null==U.intersectionData||(U.intersectionData.geomItem.onWheel(U),U.propagating))&&(this.manipulator?this.manipulator.onWheel(U):this.emit("mouseWheel",U))}onTouchCancel(U){this.prepareUIEvent(U),U.getCapture()?U.getCapture().onTouchCancel(U):this.manipulator?this.manipulator.onTouchCancel(U):this.emit("touchCancel",U)}__initRenderState(U){U.viewXfo=this.__cameraXfo,U.viewScale=1,U.region=this.region,U.cameraMatrix=this.__cameraMat,U.viewport=this,U.viewports=[{region:this.region,viewMatrix:this.__viewMat,projectionMatrix:this.__projectionMatrix,viewportFrustumSize:this.__frustumDim,isOrthographic:this.__camera.isOrthographic(),fovY:this.__camera.getFov()}]}draw(){const U={};if(this.__initRenderState(U),super.draw(U),this.debugGeomShader){this.renderGeomDataFbo();const F=this.__renderer.screenQuad;F.bindShader(U),F.draw(U,this.__geomDataBuffer,new d(0,0),new d(1,1))}if(this.debugHighlightedGeomsBuffer){const F=this.__renderer.screenQuad;F.bindShader(U),F.draw(U,this.highlightedGeomsBuffer,new d(0,0),new d(1,1))}}}class lQ{constructor(U,F){this.__xrvp=U,this.__treeItem=new DU("VRHead"),F.addChild(this.__treeItem),this.__mat4=new h,this.__localXfo=new c}setVisible(U){if(U&&!this.hmdGeomItem){const U=this.__xrvp.getAsset();if(!U)return;const F=U.getChildByName("HMD");if(!F)return;this.hmdGeomItem=F.clone({assetItem:U}),this.hmdGeomItem&&(this.hmdGeomItem.localXfoParam.value=new c(new i(0,-.035,-.03),new o(0,1,0,Math.PI),new i(.001,.001,.001)),this.__treeItem.addChild(this.hmdGeomItem,!1))}this.hmdGeomItem&&(this.hmdGeomItem.visibleParam.value=U)}update(U){this.__mat4.setDataArray(U.transform.matrix),this.__localXfo.setFromMat4(this.__mat4),this.__treeItem.localXfoParam.value=this.__localXfo}getTreeItem(){return this.__treeItem}getXfo(){return this.__localXfo}}class nQ{constructor(U,F,t){if(this.activeVolumeSize=.04,this.xrvp=U,this.inputSource=F,this.id=t,this.buttonPressed=!1,this.mat4=new h,this.xfo=new c,this.treeItem=new DU("VRController:"+F.handedness+t),!e.isMobileDevice){this.tipItem=new DU("Tip");const e=new c;if(e.tr.set(0,-.05,-.13),this.tipItem.localXfoParam.value=e,this.treeItem.addChild(this.tipItem,!1),U.getTreeItem().addChild(this.treeItem),"tracked-pointer"==F.targetRayMode){switch(F.profiles[0]){case"htc-vive":localStorage.setItem("ZeaEngine_XRDevice","Vive");break;case"oculus-touch":case"oculus-touch-v2":case"oculus-touch-v3":localStorage.setItem("ZeaEngine_XRDevice","Oculus")}U.loadHMDResources().then((U=>{if(!U)return;const e=new c;let t;if(e.ori.setFromAxisAndAngle(new i(0,1,0),Math.PI),e.sc.set(.001,.001,.001),"htc-vive"==F.profiles[0])t=U.getChildByName("Controller"),e.tr.set(0,-.035,-.085);else switch(F.handedness){case"left":t=U.getChildByName("LeftController"),e.tr.set(0,-.035,-.085),e.sc.scaleInPlace(.85);break;case"right":t=U.getChildByName("RightController"),e.tr.set(0,-.035,-.085),e.sc.scaleInPlace(.85);break;case"none":case"left-right":case"left-right-none":t=U.getChildByName("Controller")}if(t){const F=t.clone({assetItem:U});F.localXfoParam.value=e,this.treeItem.addChild(F,!1)}}))}}this.tick=0}getHandedness(){return this.inputSource.handedness}getId(){return this.id}getTreeItem(){return this.treeItem}getTipItem(){return this.tipItem}getTipXfo(){return this.tipItem.globalXfoParam.value}getTouchPadValue(){return this.touchpadValue}isButtonPressed(){return this.buttonPressed}getControllerStageLocalXfo(){return this.xfo}getControllerTipStageLocalXfo(){return this.xfo.multiply(this.tipItem.localXfoParam.value)}updatePose(U,F,e,t){const Q=F.getPose(e.gripSpace,U);if(Q&&Q.transform){if(this.mat4.setDataArray(Q.transform.matrix),this.xfo.setFromMat4(this.mat4),this.treeItem.localXfoParam.value=this.xfo,this.hitTested=!1,this.tick%5==0&&!t.getCapture()){const U=this.getGeomItemAtTip();null!=U?(t.intersectionData=U,U.geomItem!=this.pointerOverItem&&(this.pointerOverItem&&this.pointerOverItem.onPointerLeave(t),this.pointerOverItem=U.geomItem,t.intersectionData=U,this.pointerOverItem.onPointerEnter(t)),U.geomItem.onPointerMove(t)):this.pointerOverItem&&(t.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(t),this.pointerOverItem=null)}this.tick++}}getGeomItemAtTip(){if(this.hitTested)return this.intersectionData;this.hitTested=!0;const U=this.xrvp.getRenderer(),F=this.tipItem.globalXfoParam.value,e=this.activeVolumeSize;return this.intersectionData=U.raycastWithXfo(F,e,e),this.intersectionData}}class aQ extends we{constructor(U){super(),this.listenerIDs={},this.__controllerTriggersHeld=[],this.xrvp=U,this.vrControllerToolTip=new bF(.015),this.vrControllerToolTipMat=new qU("Cross","FlatSurfaceShader"),this.vrControllerToolTipMat.getParameter("BaseColor").value=new B("#03E3AC"),this.listenerIDs={}}addIconToController(U){const F=new he("HandleToolTip",this.vrControllerToolTip,this.vrControllerToolTipMat);F.setSelectable(!1),U.getTipItem().removeAllChildren(),U.getTipItem().addChild(F,!1)}activateTool(){super.activateTool();for(const U of this.xrvp.getControllers())this.addIconToController(U);this.listenerIDs.controllerAdded=this.xrvp.on("controllerAdded",(U=>{this.addIconToController(U.controller)}))}deactivateTool(){super.deactivateTool();for(const U of this.xrvp.getControllers())U.getTipItem().removeAllChildren();this.xrvp.removeListenerById("controllerAdded",this.listenerIDs.controllerAdded)}__initMoveStage(){if(1==this.__controllerTriggersHeld.length)this.__grabPos=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr.clone(),this.stageXfo__GrabStart=this.xrvp.getXfo().clone(),this.__invOri=this.stageXfo__GrabStart.ori.inverse();else if(2==this.__controllerTriggersHeld.length){const U=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr,F=this.__controllerTriggersHeld[1].getControllerTipStageLocalXfo().tr;this.__grabDir=F.subtract(U),this.__grabPos=U.lerp(F,.5),this.__grabDir.y=0,this.__grabDist=this.__grabDir.length(),this.__grabDir.scaleInPlace(1/this.__grabDist),this.stageXfo__GrabStart=this.xrvp.getXfo().clone(),this.__grab_to_stage=this.__grabPos.subtract(this.stageXfo__GrabStart.tr)}}onVRControllerButtonDown(U){1==U.button&&(this.__controllerTriggersHeld.push(U.controller),this.__initMoveStage(),U.stopPropagation())}onVRControllerButtonUp(U){if(1!=U.button)return;const F=this.__controllerTriggersHeld.indexOf(U.controller);this.__controllerTriggersHeld.splice(F,1),this.__initMoveStage(),U.stopPropagation()}onVRControllerDoubleClicked(U){console.log("onVRControllerDoubleClicked:",this.__controllerTriggersHeld.length);const F=this.xrvp.getXfo().clone();F.sc.set(1,1,1),this.xrvp.setXfo(F)}onVRPoseChanged(U){if(1==this.__controllerTriggersHeld.length){const U=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr,F=new c;F.tr=this.__grabPos.subtract(U);const e=this.stageXfo__GrabStart.multiply(F);this.xrvp.setXfo(e)}else if(2==this.__controllerTriggersHeld.length){const U=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr,F=this.__controllerTriggersHeld[1].getControllerTipStageLocalXfo().tr,e=U.lerp(F,.5),t=F.subtract(U);t.y=0;const Q=t.length();if(Q<1e-4)return;t.scaleInPlace(1/Q);const l=new c,n=Math.max(Math.min(this.__grabDist/Q,10),.1);l.sc.set(n,n,n);let a=this.__grabDir.angleTo(t);this.__grabDir.cross(t).y>0&&(a=-a),l.ori.rotateY(a);const d=l.ori.rotateVec3(this.__grabPos);l.tr.addInPlace(this.__grabPos.subtract(d));const i=this.__grabPos.scale(1-n);l.tr.addInPlace(l.ori.rotateVec3(i));const s=this.__grabPos.subtract(e).scale(n);l.tr.addInPlace(l.ori.rotateVec3(s));const R=this.stageXfo__GrabStart.multiply(l);this.xrvp.setXfo(R)}}onPointerDown(U){U.pointerType===X.xr&&this.onVRControllerButtonDown(U)}onPointerMove(U){U.pointerType===X.xr&&this.onVRPoseChanged(U)}onPointerUp(U){U.pointerType===X.xr&&this.onVRControllerButtonUp(U)}onPointerDoublePress(U){U.pointerType===X.xr&&this.onVRControllerDoubleClicked(U)}}class dQ extends eQ{constructor(U){super("VR",U),this.hmd="",this.controllers=[]}}class iQ extends N{constructor(U){super(),this.controller=U}}class sQ extends N{constructor(U){super(),this.state=U}}class RQ extends FQ{constructor(U){super(U),this.__stageXfo=new c,this.__stageMatrix=new h,this.__hmd="",this.__projectionMatrices=[],this.doubleClickTimeParam.value=300,this.__projectionMatricesUpdated=!1,this.__stageTreeItem=new DU("VRStage"),this.__stageTreeItem.setVisible(!1),this.__renderer.addTreeItem(this.__stageTreeItem),this.__vrhead=new lQ(this,this.__stageTreeItem),this.controllersMap={},this.controllers=[],this.controllerPointerDownTime=[],this.spectatorMode=!1,this.tick=0;const F=new c;F.ori.setFromAxisAndAngle(new i(1,0,0),.5*Math.PI),this.setXfo(F),this.__leftViewMatrix=new h,this.__leftProjectionMatrix=new h,this.__rightViewMatrix=new h,this.__rightProjectionMatrix=new h,this.setManipulator(new aQ(this))}getRenderer(){return this.renderer}getAsset(){return this.__vrAsset}getTreeItem(){return this.__stageTreeItem}getVRHead(){return this.__vrhead}getXfo(){return this.__stageXfo}setXfo(U){this.__stageXfo=U,this.__stageTreeItem.globalXfoParam.value=U,this.__stageMatrix=U.inverse().toMat4(),this.__stageScale=U.sc.x}getControllers(){return this.controllers}canPresent(){return this.__canPresent}isPresenting(){return this.session}setSpectatorMode(U){if(!U){const U=this.__renderer.gl;U.bindFramebuffer(U.FRAMEBUFFER,null),U.viewport(0,0,U.drawingBufferWidth,U.drawingBufferHeight);let F=this.backgroundColorParam.value.asArray();U.clearColor(F[0],F[1],F[2],F[3]),U.colorMask(!0,!0,!0,!0),U.clear(U.COLOR_BUFFER_BIT|U.DEPTH_BUFFER_BIT)}this.spectatorMode=U}__startSession(){const U=(F,e)=>{this.session&&(this.session.requestAnimationFrame(U),this.drawXRFrame(e))};this.session.requestAnimationFrame(U)}loadHMDResources(){if(e.isMobileDevice)return Promise.resolve(null);let U=localStorage.getItem("ZeaEngine_XRDevice");if(U||(U="Vive",localStorage.setItem("ZeaEngine_XRDevice",U)),this.__hmd!=U)this.__hmdAssetPromise=void 0;else if(this.__hmdAssetPromise)return this.__hmdAssetPromise;return this.__hmd=U,this.__hmdAssetPromise=new Promise(((F,e)=>{{let e;if("Oculus"===U)e="ZeaEngine/Oculus.vla";else e="ZeaEngine/Vive.vla";if(!nU.commonResources[e]){const U=new Ye(e);U.load(nU.systemUrls[e]),nU.commonResources[e]=U}this.__vrAsset=nU.getCommonResource(e);const t=()=>{const U=this.__vrAsset.getMaterialLibrary(),e=U.getMaterialNames();for(const F of e){const e=U.getMaterial(F,!1);e&&e.setShaderName("SimpleSurfaceShader")}this.__vrAsset.traverse((U=>{U.setSelectable(!1)})),F(this.__vrAsset)};this.__vrAsset.isLoaded()?t():this.__vrAsset.once("loaded",t)}})),this.__hmdAssetPromise}startPresenting(){return new Promise(((U,F)=>{this.spectatorMode||this.setSpectatorMode(!1);(()=>{var t;null===(t=navigator)||void 0===t||t.xr.requestSession("immersive-vr",{requiredFeatures:["local-floor"],optionalFeatures:["bounded-floor"]}).then((t=>{this.__renderer.__xrViewportPresenting=!0;const Q=this.__renderer.getViewport();if(Q){const U=Q.getCamera().globalXfoParam.value,F=new c;F.tr=U.tr.clone(),F.tr.z-=1.3;const e=U.ori.getZaxis();e.z=0,e.normalizeInPlace(),F.ori.setFromDirectionAndUpvector(e,new i(0,0,1)),this.setXfo(F)}t.addEventListener("end",(U=>{this.__stageTreeItem.setVisible(!1),this.session=null,this.emit("presentingChanged",new sQ(!1))}));const l=U=>{console.log("creating controller:",U.handedness,U.profiles);const F=this.controllers.length,e=new nQ(this,U,F);this.controllersMap[U.handedness]=e,this.controllers[F]=e;const t=new iQ(e);return this.emit("controllerAdded",t),e};t.addEventListener("selectstart",(U=>{const F=this.controllersMap[U.inputSource.handedness];F&&(F.buttonPressed=!0,this.onPointerDown(new D(1,F)))})),t.addEventListener("selectend",(U=>{const F=this.controllersMap[U.inputSource.handedness];F&&(F.buttonPressed=!1,this.onPointerUp(new D(1,F)))})),t.addEventListener("inputsourceschange",(U=>{for(const F of U.added)0!=F.profiles.length&&l(F)})),this.session=t;const n=new XRWebGLLayer(t,this.__gl);t.updateRenderState({baseLayer:n}),this.__width=n.framebufferWidth,this.__height=n.framebufferHeight,this.__region=[0,0,this.__width,this.__height],this.resizeRenderTargets(this.__width,this.__height);const a=F=>{this.__refSpace=F,this.__stageTreeItem.setVisible(!0),this.emit("presentingChanged",new sQ(!0)),this.loadHMDResources().then((()=>{this.__startSession(),U()}))};t.requestReferenceSpace(e.isMobileDevice?"local":"bounded-floor").catch((U=>{console.log("Falling back to local-floor reference space"),t.requestReferenceSpace("local-floor").then(a)})).then((U=>{a(U)})).catch((U=>{console.warn(U.message),F(new Error("Unable to start XR Session:"+U.message))}))})).catch((U=>{console.warn(U.message)}))})()}))}stopPresenting(){this.session&&this.session.end()}togglePresenting(){this.session?this.stopPresenting():this.startPresenting()}getHMDCanvasSize(){return this.__hmdCanvasSize}updateControllers(U,F){const e=this.session.inputSources;for(let t=0;t<e.length;t++){const Q=e[t];if(0==Q.profiles.length)return;this.controllers[t]?this.controllers[t].updatePose(this.__refSpace,U,Q,F):console.warn("Missing controller")}}drawXRFrame(U){const F=U.session,t=F.renderState.baseLayer,Q=U.getViewerPose(this.__refSpace);if(!Q)return;this.__vrhead.update(Q);const l=this.__vrhead.getTreeItem().globalXfoParam.value,n=Q.views;if(!this.__projectionMatricesUpdated){this.__projectionMatrices=[],this.__viewMatrices=[],this.__cameraMatrices=[];for(let U=0;U<n.length;U++){const F=n[U],e=new h;e.setDataArray(F.projectionMatrix),this.__projectionMatrices[U]=e,this.__viewMatrices[U]=new h,this.__cameraMatrices[U]=new h}this.__projectionMatricesUpdated=!0}const a=this.__renderer.gl;a.bindFramebuffer(a.FRAMEBUFFER,t.framebuffer);let d=this.backgroundColorParam.value.asArray();a.clearColor(d[0],d[1],d[2],d[3]),a.colorMask(!0,!0,!0,!0),a.clear(a.COLOR_BUFFER_BIT|a.DEPTH_BUFFER_BIT),this.depthRange=[F.renderState.depthNear,F.renderState.depthFar];const i={};i.boundRendertarget=t.framebuffer,i.region=this.__region,i.viewport=this,i.vrviewport=this,i.viewports=[];for(let U=0;U<n.length;U++){const F=n[U];this.__viewMatrices[U].setDataArray(F.transform.inverse.matrix),this.__viewMatrices[U].multiplyInPlace(this.__stageMatrix);const e=t.getViewport(F);i.viewports.push({viewMatrix:this.__viewMatrices[U],projectionMatrix:this.__projectionMatrices[U],region:[e.x,e.y,e.width,e.height],isOrthographic:!1})}i.viewXfo=l,i.viewScale=1/this.__stageScale,i.cameraMatrix=i.viewXfo.toMat4(),i.region=this.__region,i.vrPresenting=!0,this.draw(i);const s=new L(this,l,this.controllers);this.updateControllers(U,s),this.capturedElement&&s.propagating&&this.capturedElement.onPointerMove(s),this.manipulator&&s.propagating&&this.manipulator.onPointerMove(s);const R=new dQ(i.viewXfo);if(R.hmd=this.__hmd,R.controllers=this.controllers,R.viewport=this,R.vrviewport=this,this.emit("viewChanged",R),this.spectatorMode&&!e.isMobileDevice&&this.tick%5==0){const U=this.__renderer.getViewport();U&&(this.__vrhead.setVisible(!0),U.draw(),this.__vrhead.setVisible(!1))}this.tick++}onPointerDown(U){U.intersectionData=U.controller.getGeomItemAtTip();const F=Date.now();if(F-this.controllerPointerDownTime[U.controller.id]<this.doubleClickTimeParam.value){if(this.emit("pointerDoublePressed",U),!U.propagating)return;if(this.manipulator&&(this.manipulator.onPointerDoublePress(U),!U.propagating))return}this.controllerPointerDownTime[U.controller.id]=F,this.capturedItem?this.capturedItem.onPointerDown(U):null!=U.intersectionData&&(U.intersectionData.geomItem.onPointerDown(U),!U.propagating||this.capturedItem)||(this.emit("pointerDown",U),U.propagating&&!this.capturedItem&&this.manipulator&&this.manipulator.onPointerDown(U))}onPointerUp(U){this.controllerPointerDownTime[U.controller.id]=0,this.capturedItem?this.capturedItem.onPointerUp(U):(U.intersectionData=U.controller.getGeomItemAtTip(),(null==U.intersectionData||(U.intersectionData.geomItem.onPointerUp(U),U.propagating))&&(this.emit("pointerUp",U),U.propagating&&(!this.manipulator||(this.manipulator.onPointerUp(U),U.propagating))))}}class BQ extends u{constructor(U){super(),this.dirty=!1,this.unif=U}bind(U){}unbind(U){}destroy(){}}class VQ extends BQ{constructor(U,F,e,t,Q){super(t),this.gltexture=null,this.textureType=-1;const l=e.getName();switch(this.param=e,this.unif=t,this.textureUnif=Q[l+"Tex"],this.textureTypeUnif=Q[l+"TexType"],this.uniform1i=U.uniform1i.bind(U),this.unif.type){case"Boolean":case"SInt32":this.uniformXX=U.uniform1i.bind(U);break;case"UInt32":"webgl2"==U.name?this.uniformXX=U.uniform1ui.bind(U):this.uniformXX=U.uniform1i.bind(U);break;case"Float32":this.uniformXX=U.uniform1f.bind(U)}this.bind=this.bindValue;const n=e=>{let t=e.getMetadata("gltexture");t||(t="FLOAT"===e.type?new Bt(U,e):new Ae(U,e)),this.texBinding=t.preBind(this.textureUnif,Q),t.on("updated",(()=>{F.emit("updated")})),this.gltexture=t,this.gltexture.addRef(this),this.textureType=1,this.bind=this.bindTexture,F.emit("updated")};let a,d;if(this.update=()=>{try{a||(this.val=e.value)}catch(U){}F.emit("updated")},e instanceof HU){const U=U=>{U.isLoaded()?n(U):d=U.on("loaded",(()=>{n(a)})),a=U},t=()=>{a.getMetadata("gltexture").removeRef(this),this.texBinding=null,this.gltexture=null,this.textureType=-1,this.bind=this.bindValue,d&&a.removeListenerById("loaded",d),a=null,d=null,F.emit("updated")};e.getImage()&&U(e.getImage()),e.on("textureConnected",(()=>{U(e.getImage())})),e.on("textureDisconnected",(()=>{t()}))}this.dirty=!0,e.on("valueChanged",(()=>{this.dirty=!0,F.emit("updated")}))}bindValue(U){this.dirty&&(this.update(),this.dirty=!1),this.unif&&this.uniformXX(this.unif.location,this.val),this.textureTypeUnif&&this.uniform1i(this.textureTypeUnif.location,0)}bindTexture(U){this.dirty&&(this.update(),this.dirty=!1),this.gltexture.bindToUniform(U,this.textureUnif,this.texBinding)}}class rQ extends BQ{constructor(U,F,e,t){switch(super(t),this.param=e,this.unif.type){case"Vec2":this.uniformXX=U.uniform2fv.bind(U);break;case"Vec3":this.uniformXX=U.uniform3fv.bind(U);break;case"Vec4":this.uniformXX=U.uniform4fv.bind(U)}this.dirty=!0,e.on("valueChanged",(()=>{this.dirty=!0,F.emit("updated")}))}bind(U){this.dirty&&(this.values=this.param.value.asArray(),this.dirty=!1),this.uniformXX(this.unif.location,this.values)}unbind(){}destroy(){}}class hQ extends BQ{constructor(U,F,e,t){switch(super(t),this.values=new Float32Array(0),this.param=e,this.unif.type){case"Mat3":this.uniformMatrixXXX=U.uniformMatrix3fv.bind(U);break;case"Mat4":this.uniformMatrixXXX=U.uniformMatrix4fv.bind(U)}this.dirty=!0,e.on("valueChanged",(()=>{this.dirty=!0,F.emit("updated")}))}bind(U){this.dirty&&(this.values=this.param.value.asArray(),this.dirty=!1),this.uniformMatrixXXX(this.unif.location,!1,this.values)}unbind(){}destroy(){}}class oQ extends BQ{constructor(U,F,e,t,Q){super(t);const l=e.getName();this.param=e,this.textureUnif=Q[l+"Tex"],this.textureTypeUnif=Q[l+"TexType"],this.values=Float32Array.from([0,0,0,0]),this.bind=this.bindValue;const n=e=>{a=e;let t=e.getMetadata("gltexture");t||(t="FLOAT"===e.type?new Bt(U,e):new Ae(U,e)),this.texBinding=t.preBind(this.textureUnif,Q),t.on("updated",(()=>{F.emit("updated")})),this.gltexture=t,this.gltexture.addRef(this),this.textureType=1,this.bind=this.bindTexture,F.emit("updated")};let a,d;const i=U=>{U.isLoaded()?n(U):d=U.once("loaded",(()=>{n(U)}))},s=()=>{this.gltexture.removeRef(this),this.gltexture=null,this.texBinding=null,this.textureType=null,d&&a.removeListenerById("loaded",d),this.bind=this.bindValue,a=null,d=null,F.emit("updated")};this.update=()=>{try{a||this.unif&&(this.values=e.value.asArray())}catch(U){}F.emit("updated")},e instanceof PU&&(e.getImage()&&i(e.getImage()),e.on("textureConnected",(()=>{i(e.getImage())})),e.on("textureDisconnected",(()=>{s()}))),this.dirty=!0,e.on("valueChanged",(()=>{this.dirty=!0})),this.uniform1i=U.uniform1i.bind(U),this.uniform4fv=U.uniform4fv.bind(U)}bindValue(U){this.unif&&(this.dirty&&(this.update(),this.dirty=!1),this.unif&&this.uniform4fv(this.unif.location,this.values),this.textureTypeUnif&&this.uniform1i(this.textureTypeUnif.location,0))}bindTexture(U){this.dirty&&(this.update(),this.dirty=!1),this.gltexture.bindToUniform(U,this.textureUnif,this.texBinding)}}const JQ={};class ZQ{constructor(U,F,e,t){this.uniformBindings=[];const Q=Q=>{const l=Q.getName(),n=e[l];if(null!=n)switch(n.type){case"Boolean":case"UInt32":case"SInt32":case"Float32":this.uniformBindings.push(new VQ(U,F,Q,n,e));break;case"Vec2":case"Vec3":case"Vec4":this.uniformBindings.push(new rQ(U,F,Q,n));break;case"Color":this.uniformBindings.push(new oQ(U,F,Q,n,e));break;case"Mat4":this.uniformBindings.push(new hQ(U,F,Q,n));break;default:return void console.warn("Param :"+l+" has unhandled data type:"+n.type)}else{if(e[l+"Tex"])return void this.uniformBindings.push(new oQ(U,F,Q,n,e));if(t){const U=F.getMaterial().getShaderName();JQ[U]||(JQ[U]={}),JQ[U][l]||(console.warn("Material:"+F.getMaterial().getName(),"with Shader ",U,"Param has no unif",l),JQ[U][l]=!0)}}},l=F.getMaterial().getParameters();for(const U of l)Q(U)}bind(U){for(const F of this.uniformBindings)F.bind(U);return!0}unbind(U){for(const F of this.uniformBindings)F.unbind(U)}destroy(){for(const U of this.uniformBindings)U.destroy()}}class cQ extends k{constructor(U,F,e){super(),this.__gl=U,this.__material=F,this.__glshader=e,this.__shaderBindings={},F.on("parameterValueChanged",(()=>this.emit("updated")))}getMaterial(){return this.__material}getGLShader(){return this.__glshader}bind(U,F){this.__boundTexturesBeforeMaterial=U.boundTextures;let e=this.__shaderBindings[U.shaderkey];if(!e){const t=this.__gl;e=new ZQ(t,this,U.unifs,F),this.__shaderBindings[U.shaderkey]=e}return e.bind(U)}unbind(U){U.boundTextures=this.__boundTexturesBeforeMaterial}}class mQ extends k{constructor(U){super(),this.materials=[],this.materialIndices={},this.glMaterials={},this.refCounts=[],this.freeIndices=[],this.materialsAllocator=new G,this.renderer=U,this.materials=[],this.refCounts=[],this.materialIndices={},this.glMaterials={},this.freeIndices=[],this.dirtyIndices=new Set,this.materialsAllocator=new G,this.materialsAllocator.on("dataReallocated",(U=>{const F=U.id;this.dirtyIndices.add(F)}))}addMaterial(U){let F=this.materialIndices[U.getId()];if(null!=F)return this.refCounts[F]++,F;F=this.freeIndices.length?this.freeIndices.pop():this.materials.length,this.materials[F]=U,this.refCounts[F]=1,this.materialIndices[U.getId()]=F;const e=U.getShaderClass().getPackedMaterialData(U);this.materialsAllocator.allocate(F,e.length/4);return U.on("parameterValueChanged",(()=>{this.dirtyIndices.add(F),this.emit("updated")})),this.dirtyIndices.add(F),F}getGLMaterial(U){if(this.glMaterials[U.getId()])return this.glMaterials[U.getId()];const F=this.renderer.getOrCreateShader(U.getShaderName()),e=this.renderer.gl,t=new cQ(e,U,F);return t.on("updated",(()=>{this.renderer.requestRedraw()})),U.setMetadata("glMaterial",t),this.glMaterials[U.getId()]=t,t}getMaterialAllocation(U){const F=this.materialIndices[U.getId()];if(null!=F)return this.materialsAllocator.getAllocation(F)}removeMaterial(U){const F=this.materialIndices[U.getId()];this.refCounts[F]--,this.refCounts[F]>0||(this.freeIndices.push(F),this.materialsAllocator.deallocate(F),this.materials[F]=null,delete this.materialIndices[U.getId()],this.dirtyIndices.has(F)&&this.dirtyIndices.delete(F))}uploadMaterials(U){const F=this.renderer.__gl,e=J.nextPow2(Math.ceil(Math.sqrt(this.materialsAllocator.reservedSpace))),t=U.boundTextures++;if(F.activeTexture(F.TEXTURE0+t),this.materialsTexture){if(this.materialsTexture.width<e){this.materialsTexture.resize(e,e);for(let U=0;U<this.materials.length;U++)this.materialsAllocator.getAllocation(U)&&this.dirtyIndices.add(U)}}else this.materialsTexture=new Ae(this.renderer.__gl,{format:"RGBA",type:"FLOAT",width:e,height:e,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.materialsTexture.clear();const Q=this.materialsTexture,l=this.materialsTexture.width;F.bindTexture(F.TEXTURE_2D,Q.glTex),this.dirtyIndices.forEach((U=>{const e=this.materialsAllocator.getAllocation(U),t=this.materials[U],n=t.getShaderClass().getPackedMaterialData(t),a=e.start%l,d=Math.ceil((a+e.size)/l);let i=0,s=e.size,R=a;for(let U=0;U<d;U++){let U;R+s>l?(U=l-R,R=0):U=s;const t=(e.start+i)%l,a=Math.floor((e.start+i)/l),d=n.subarray(4*i,4*(i+U));F.texSubImage2D(F.TEXTURE_2D,0,t,a,U,1,Q.__format,Q.__type,d),i+=U,s-=U}})),this.dirtyIndices=new Set,F.bindTexture(F.TEXTURE_2D,null),U.boundTextures--}update(U){this.dirtyItemIndices.length>0&&this.uploadMaterials(U),U.drawItemsTexture=this.glGeomItemsTexture}bind(U){if(this.dirtyIndices.size>0&&this.uploadMaterials(U),!this.materialsTexture)return!1;const{materialsTexture:F,materialsTextureSize:e}=U.unifs;if(F&&(this.materialsTexture.bindToUniform(U,F),e)){this.renderer.gl.uniform2i(e.location,this.materialsTexture.width,this.materialsTexture.height)}return!0}}class SQ extends qt{constructor(U,F){super(U,F),this.__numVertices=9,this.__vboState=-1,this.genBuffers()}genBuffers(U){super.genBuffers(U);const F=this.__gl,e=this.__geom.genBuffers();for(const U in e.attrBuffers){const t=e.attrBuffers[U],Q=F.createBuffer();F.bindBuffer(F.ARRAY_BUFFER,Q),F.bufferData(F.ARRAY_BUFFER,t.values,F.STATIC_DRAW),this.__glattrbuffers[U]={buffer:Q,dataType:t.dataType,normalized:t.normalized}}this.__numVertices=e.numVertices,this.__vboState=2}updateBuffers(U){const F=this.__gl,e=this.__geom.genBuffers(),t=e.numVertices!=this.__numVertices;for(const U in e.attrBuffers){const Q=e.attrBuffers[U],l=this.__glattrbuffers[U];t&&(F.deleteBuffer(l.buffer),l.buffer=F.createBuffer()),F.bindBuffer(F.ARRAY_BUFFER,l.buffer),F.bufferData(F.ARRAY_BUFFER,Q.values,F.STATIC_DRAW)}this.__numVertices=e.numVertices}bind(U){if(U.unifs.PointSize){const F=this.__gl;let e=this.__shaderBindings[U.shaderkey];if(!e){F.__quadVertexIdsBuffer||F.setupInstancedQuad();const t=Object.assign(this.__glattrbuffers,F.__quadattrbuffers);e=Rt(this.__gl,U.attrs,t,F.__quadIndexBuffer),this.__shaderBindings[U.shaderkey]=e}return e.bind(U),!0}return super.bind(U)}draw(U){const F=this.__gl;U.unifs.PointSize?F.drawElementsInstanced(F.TRIANGLES,6,F.UNSIGNED_SHORT,0,this.__numVertices):F.drawArrays(F.POINTS,0,this.__numVertices)}drawInstanced(U,F){this.__gl.drawArraysInstanced(this.__gl.POINTS,0,this.__numVertices,F)}}class WQ extends qt{constructor(U,F){super(U,F),this.__numSegIndices=0,this.__numVertices=0,this.__fatBuffersNeedUpload=!1,this.fatBuffers=null,this.__buffersNeedUpload=!1,this.__indexDataType=0,this.__numSegIndices=0,this.__numVertices=0,this.__fatBuffersNeedUpload=!0}dirtyBuffers(U){super.dirtyBuffers(U),this.__fatBuffersNeedUpload=!0,this.emit("updated")}clearBuffers(){const U=this.__gl;if(U.deleteBuffer(this.__indexBuffer),this.__indexBuffer=null,this.fatBuffers&&this.fatBuffers.positionsTexture){this.fatBuffers.positionsTexture&&(this.fatBuffers.positionsTexture.destroy(),this.fatBuffers.positionsTexture=null);const F=this.fatBuffers.glattrbuffers.segmentIndices;F.buffer&&(U.deleteBuffer(F.buffer),this.fatBuffers.glattrbuffers.segmentIndices=null)}super.clearBuffers()}genFatBuffers(U){const F=this.__gl,e=this.__geom.genBuffers(),t=e.indices,Q=e.numVertices!=this.__numVertices;F.__quadVertexIdsBuffer||F.setupInstancedQuad(),this.fatBuffers||(this.fatBuffers={drawCount:0,positionsTexture:null,glattrbuffers:{}},this.fatBuffers.glattrbuffers.vertexIDs=F.__quadattrbuffers.vertexIDs);const l=U.boundTextures++;F.activeTexture(this.__gl.TEXTURE0+l),this.fatBuffers.drawCount=t.length/2;const n=this.__geom.getVertexAttributes(),a=n.positions,d=n.lineThickness,s=new Float32Array(4*a.getCount());for(let U=0;U<a.getCount();U++){new i(new Float32Array(s.buffer,4*U*4,3)).setFromOther(a.getValueRef(U)),s[4*U+3]=d?d.getFloat32Value(U):1}Q&&this.fatBuffers.positionsTexture&&(this.fatBuffers.positionsTexture.destroy(),this.fatBuffers.positionsTexture=null),this.fatBuffers.positionsTexture?this.fatBuffers.positionsTexture.bufferData(s,a.getCount(),1):this.fatBuffers.positionsTexture=new Ae(this.__gl,{format:"RGBA",type:"FLOAT",width:a.getCount(),height:1,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",data:s,mipMapped:!1});const R=()=>{const U=new Float32Array(t.length);for(let F=0;F<t.length;F++){let e;e=F%2==0?F>0?t[F]==t[F-1]:t[F]==t[t.length-1]:F<t.length-1?t[F]==t[F+1]:t[F]==t[0],U[F]=(e?1:0)+2*t[F]}return U};if(this.fatBuffers.glattrbuffers.segmentIndices)(!this.genBufferOpts||this.genBufferOpts&&this.genBufferOpts.topologyChanged)&&(F.bindBuffer(F.ARRAY_BUFFER,this.fatBuffers.glattrbuffers.segmentIndices.buffer),F.bufferData(F.ARRAY_BUFFER,R(),F.STATIC_DRAW));else{const U=F.createBuffer();F.bindBuffer(F.ARRAY_BUFFER,U),F.bufferData(F.ARRAY_BUFFER,R(),F.STATIC_DRAW),this.fatBuffers.glattrbuffers.segmentIndices={buffer:U,dimension:2,dataType:"Vec2"}}this.__numSegIndices=t.length,this.__numVertices=e.numVertices,F.bindTexture(F.TEXTURE_2D,null),U.boundTextures--,this.__fatBuffersNeedUpload=!1}genBuffers(U){const F=this.__gl,e=this.__geom.genBuffers(),t=e.indices,Q=e.numVertices!=this.__numVertices;this.__indexBuffer?(!this.genBufferOpts||this.genBufferOpts&&this.genBufferOpts.topologyChanged)&&(this.__numSegIndices!=t.length&&(F.deleteBuffer(this.__indexBuffer),this.__indexBuffer=F.createBuffer()),F.bindBuffer(F.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),F.bufferData(F.ELEMENT_ARRAY_BUFFER,t,F.STATIC_DRAW),this.__numSegIndices=t.length):(this.__indexBuffer=F.createBuffer(),F.bindBuffer(F.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),F.bufferData(F.ELEMENT_ARRAY_BUFFER,t,F.STATIC_DRAW));for(const U in e.attrBuffers){const t=e.attrBuffers[U];if(this.__glattrbuffers[U]){const e=this.__glattrbuffers[U];Q&&(F.deleteBuffer(e.buffer),e.buffer=F.createBuffer()),F.bindBuffer(F.ARRAY_BUFFER,e.buffer),F.bufferData(F.ARRAY_BUFFER,t.values,F.STATIC_DRAW)}else{const e=F.createBuffer();F.bindBuffer(F.ARRAY_BUFFER,e),F.bufferData(F.ARRAY_BUFFER,t.values,F.STATIC_DRAW),this.__glattrbuffers[U]={buffer:e,dataType:t.dataType,normalized:t.normalized}}}this.__numSegIndices=t.length,this.__numVertices=e.numVertices,this.__buffersNeedUpload=!1,t instanceof Uint8Array&&(this.__indexDataType=this.__gl.UNSIGNED_BYTE),t instanceof Uint16Array&&(this.__indexDataType=this.__gl.UNSIGNED_SHORT),t instanceof Uint32Array&&(this.__indexDataType=this.__gl.UNSIGNED_INT)}bind(U){const F=this.__gl,e=U.unifs;if(e.LineThickness&&F.floatTexturesSupported){this.__fatBuffersNeedUpload&&this.genFatBuffers(U);const t=this.fatBuffers;let Q=this.__shaderBindings[U.shaderkey];return Q||(Q=Rt(this.__gl,U.attrs,t.glattrbuffers,F.__quadIndexBuffer),this.__shaderBindings[U.shaderkey]=Q),Q.bind(U),e.positionsTexture&&(t.positionsTexture.bindToUniform(U,e.positionsTexture),F.uniform1i(e.positionsTextureSize.location,t.positionsTexture.width)),!0}return super.bind(U)}drawPoints(){this.__gl.drawArrays(this.__gl.POINTS,0,this.__geom.numVertices())}draw(U){const F=this.__gl;U.unifs.LineThickness&&F.floatTexturesSupported?F.drawElementsInstanced(F.TRIANGLES,6,F.UNSIGNED_SHORT,0,this.fatBuffers.drawCount):F.drawElements(this.__gl.LINES,this.__numSegIndices,this.__indexDataType,0)}drawInstanced(U,F){const e=this.__gl,{occluded:t}=U.unifs;t&&e.uniform1i(t.location,0),e.drawElementsInstanced(this.__gl.LINES,this.__numSegIndices,this.__indexDataType,0,F),t&&(e.uniform1i(t.location,1),e.depthFunc(e.GREATER),e.drawElementsInstanced(this.__gl.LINES,this.__numSegIndices,this.__indexDataType,0,F),e.depthFunc(e.LEQUAL))}}class EQ extends N{constructor(U){super(),this.visible=U}}const pQ={GEOMITEM_FLAG_CUTAWAY:1,GEOMITEM_INVISIBLE_IN_GEOMDATA:2};class uQ extends k{constructor(U,F,e,t,Q,l=!1){if(super(),this.listenerIDs={},this.GLShaderGeomSets=null,this.cutDataChanged=!1,this.cutData=[],this.geomMatrixDirty=!1,this.gl=U,this.geomItem=F,this.drawItemId=e,this.geomId=t,this.materialId=Q,this.supportInstancing=l,this.geomVisible=this.geomItem.isVisible(),this.visible=this.geomVisible,this.culled=!1,this.listenerIDs.visibilityChanged=this.geomItem.on("visibilityChanged",(U=>{this.updateVisibility()})),!this.supportInstancing){this.cutDataChanged=!1,this.cutData=[0,0,0,0];const U=0;let e=0;this.geomItem.isCutawayEnabled()&&(e|=pQ.GEOMITEM_FLAG_CUTAWAY),0==F.isSelectable()&&(e|=pQ.GEOMITEM_INVISIBLE_IN_GEOMDATA),this.geomData=[e,U,0,0],this.geomMatrixDirty=!0,this.listenerIDs["GeomMat.valueChanged"]=this.geomItem.geomMatParam.on("valueChanged",(()=>{this.geomMatrixDirty=!0,this.emit("updated")})),this.listenerIDs.cutAwayChanged=this.geomItem.on("cutAwayChanged",(()=>{this.cutDataChanged=!0,this.emit("updated")}))}}getGeomItem(){return this.geomItem}isVisible(){return this.visible}getDrawItemId(){return this.drawItemId}updateVisibility(){this.geomVisible=this.geomItem.isVisible();const U=this.geomVisible&&!this.culled;if(this.visible!=U){this.visible=U;const F=new EQ(U);this.emit("visibilityChanged",F),this.emit("updated")}}setCulled(U){this.culled=U;const F=this.geomVisible&&!this.culled;if(this.visible!=F){this.visible=F;const U=new EQ(F);this.emit("visibilityChanged",U)}}bind(U){const F=this.gl,e=U.unifs;if(!this.supportInstancing){const U=e.modelMatrix;U&&(this.geomMatrixDirty&&(this.modelMatrixArray=this.geomItem.geomMatParam.value.asArray()),F.uniformMatrix4fv(U.location,!1,this.modelMatrixArray));const t=e.drawItemData;t&&F.uniform4fv(t.location,this.geomData);const Q=e.cutawayData;if(Q){if(this.cutDataChanged&&this.geomItem.isCutawayEnabled()){const U=this.geomItem.getCutVector(),F=this.geomItem.getCutDist();this.cutData=[U.x,U.y,U.z,F]}F.uniform4fv(Q.location,this.cutData)}}const t=e.drawItemId;return t&&F.uniform1i(t.location,this.drawItemId),!0}destroy(){this.geomItem.removeListenerById("visibilityChanged",this.listenerIDs.visibilityChanged),this.supportInstancing||(this.geomItem.geomMatParam.removeListenerById("valueChanged",this.listenerIDs["GeomMat.valueChanged"]),this.geomItem.removeListenerById("cutAwayChanged",this.listenerIDs.cutAwayChanged))}}class NQ extends N{constructor(U,F){super(),this.change=U,this.count=F}}class kQ extends k{constructor(U,F){super(),this.drawIdsArray=null,this.drawIdsBuffer=null,this.highlightedIdsArray=null,this.highlightedIdsBuffer=null,this.gl=U,this.glGeom=F,this.id=F?F.getGeom().getId():this.getId(),this.glGeomItems=[],this.glgeomItems_freeIndices=[],this.glgeomItemEventHandlers=[],this.drawIdsArray=null,this.drawIdsBuffer=null,this.drawIdsBufferDirty=!0,this.highlightedIdsArray=null,this.highlightedIdsBuffer=null,this.highlightedIdsBufferDirty=!0,this.visibleItems=[],this.highlightedItems=[]}getGLGeom(){return this.glGeom}getDrawCount(){return this.visibleItems.length}addGLGeomItem(U){let F;if(this.glgeomItems_freeIndices.length>0?F=this.glgeomItems_freeIndices.pop():(F=this.glGeomItems.length,this.glGeomItems.push(null)),U.geomItem.isVisible()){this.visibleItems.push(F);const U=new NQ(1,this.visibleItems.length);this.emit("drawCountChanged",U)}U.geomItem.isHighlighted()&&(this.highlightedItems.push(F),this.highlightedIdsBufferDirty=!0);const e={};e.highlightChanged=e=>{if(U.geomItem.isHighlighted()){if(this.highlightedItems.includes(F))return;this.highlightedItems.push(F);const U=new NQ(1,this.highlightedItems.length);this.emit("highlightedCountChanged",U)}else{this.highlightedItems.splice(this.highlightedItems.indexOf(F),1);const U=new NQ(-1,this.highlightedItems.length);this.emit("highlightedCountChanged",U)}this.highlightedIdsBufferDirty=!0},U.geomItem.on("highlightChanged",e.highlightChanged),e.visibilityChanged=U=>{if(U.visible){this.visibleItems.push(F);const U=new NQ(1,this.visibleItems.length);this.emit("drawCountChanged",U)}else{this.visibleItems.splice(this.visibleItems.indexOf(F),1);const U=new NQ(-1,this.visibleItems.length);this.emit("drawCountChanged",U)}this.drawIdsBufferDirty=!0},U.geomItem.on("visibilityChanged",e.visibilityChanged),this.glGeomItems[F]=U,this.glgeomItemEventHandlers[F]=e,this.drawIdsBufferDirty=!0,U.GLGeomItemSet=this}removeGLGeomItem(U){const F=this.glGeomItems.indexOf(U),e=this.glgeomItemEventHandlers[F];if(U.geomItem.off("highlightChanged",e.highlightChanged),U.geomItem.off("visibilityChanged",e.visibilityChanged),this.glGeomItems[F]=null,this.glgeomItemEventHandlers[F]=null,U.GLGeomItemSet=null,this.glgeomItems_freeIndices.push(F),U.geomItem.isVisible()){this.visibleItems.splice(this.visibleItems.indexOf(F),1);const U=new NQ(-1,this.visibleItems.length);this.emit("drawCountChanged",U)}if(U.geomItem.isHighlighted()){this.highlightedItems.splice(this.highlightedItems.indexOf(F),1);const U=new NQ(-1,this.highlightedItems.length);this.emit("highlightedCountChanged",U)}this.drawIdsBufferDirty=!0,this.glGeomItems.length==this.glgeomItems_freeIndices.length&&this.destroy()}updateDrawIDsBuffer(){const U=this.gl;U.floatTexturesSupported?(this.drawIdsBuffer&&this.glGeomItems.length!=this.drawIdsArray.length&&(this.gl.deleteBuffer(this.drawIdsBuffer),this.drawIdsBuffer=null),this.drawIdsBuffer||(this.drawIdsBuffer=U.createBuffer(),U.bindBuffer(U.ARRAY_BUFFER,this.drawIdsBuffer)),U.bindBuffer(U.ARRAY_BUFFER,this.drawIdsBuffer),U.bufferData(U.ARRAY_BUFFER,this.getDrawIdsArray(),U.STATIC_DRAW),this.drawIdsBufferDirty=!1):this.drawIdsBufferDirty=!1}getDrawIdsArray(){return this.drawIdsBufferDirty&&(this.drawIdsArray&&this.glGeomItems.length==this.drawIdsArray.length||(this.drawIdsArray=new Float32Array(this.glGeomItems.length)),this.visibleItems.forEach(((U,F)=>{this.drawIdsArray[F]=this.glGeomItems[U].getDrawItemId()})),this.drawIdsBufferDirty=!1),this.drawIdsArray}updateHighlightedIDsBuffer(){const U=this.gl;U.floatTexturesSupported?(this.highlightedIdsBuffer&&this.glGeomItems.length>this.highlightedIdsArray.length&&(this.gl.deleteBuffer(this.highlightedIdsBuffer),this.highlightedIdsBuffer=null),this.highlightedIdsBuffer||(this.highlightedIdsBuffer=U.createBuffer()),U.bindBuffer(U.ARRAY_BUFFER,this.highlightedIdsBuffer),U.bufferData(U.ARRAY_BUFFER,this.getHighlightedIdsArray(),U.STATIC_DRAW),this.highlightedIdsBufferDirty=!1):this.highlightedIdsBufferDirty=!1}getHighlightedIdsArray(){return this.highlightedIdsBufferDirty&&((!this.highlightedIdsArray||this.highlightedItems.length>this.highlightedIdsArray.length)&&(this.highlightedIdsArray=new Float32Array(this.glGeomItems.length)),this.highlightedItems.forEach(((U,F)=>{this.highlightedIdsArray[F]=this.glGeomItems[U].getDrawItemId()})),this.highlightedIdsBufferDirty=!1),this.highlightedIdsArray}draw(U){0!=this.visibleItems.length&&(this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(),this.__bindAndRender(U,this.visibleItems,this.drawIdsBuffer))}drawHighlighted(U){0!=this.highlightedItems.length&&(this.highlightedIdsBufferDirty&&this.updateHighlightedIDsBuffer(),this.__bindAndRender(U,this.highlightedItems,this.highlightedIdsBuffer))}__bindAndRender(U,F,e){const t=this.gl,Q=U.unifs;if(U.glGeom!=this.glGeom&&(this.glGeom.bind(U),U.glGeom=this.glGeom),t.floatTexturesSupported&&t.drawElementsInstanced&&U.supportsInstancing){U.unifs.instancedDraw&&t.uniform1i(U.unifs.instancedDraw.location,1);const l=U.attrs.instancedIds.location;t.enableVertexAttribArray(l),t.bindBuffer(t.ARRAY_BUFFER,e),t.vertexAttribPointer(l,1,t.FLOAT,!1,4,0),t.vertexAttribDivisor(l,1),U.bindViewports(Q,(()=>{this.glGeom.drawInstanced(U,F.length)}))}else U.unifs.instancedDraw&&t.uniform1i(U.unifs.instancedDraw.location,0),F.forEach((F=>{this.glGeomItems[F].bind(U),U.bindViewports(Q,(()=>{this.glGeom.draw(U)}))}))}destroy(){this.drawIdsBuffer&&(this.gl.deleteBuffer(this.drawIdsBuffer),this.drawIdsBuffer=null),this.highlightedIdsBuffer&&(this.gl.deleteBuffer(this.highlightedIdsBuffer),this.highlightedIdsBuffer=null),this.emit("destructing")}}class bQ extends k{constructor(U,F){super(),this.glGeomItemSets={},this.pass=U,this.__gl=U.renderer.gl,this.glMaterial=F,this.glGeomItemSets={},this.drawCount=0;const e=F.getMaterial(),t=U=>{e.off("transparencyChanged",t);for(const U in this.glGeomItemSets){const F=this.glGeomItemSets[U];for(const U of F.glGeomItems){const F=U.geomItem;this.pass.removeGeomItem(F),this.pass.renderer.assignTreeItemToGLPass(F)}}};e.on("transparencyChanged",t)}getGLMaterial(){return this.glMaterial}addGLGeomItem(U,F){const e=F.getGeom().getId();let t=this.glGeomItemSets[e];t||(t=new kQ(this.__gl,F),this.addGeomItemSet(t)),t.addGLGeomItem(U)}drawCountChanged(U){this.drawCount+=U.change,this.emit("updated")}__materialChanged(){const U=this.glMaterial.getMaterial();if(!this.pass.checkMaterial(U))for(const U in this.glGeomItemSets){const F=this.glGeomItemSets[U];for(const U of F.glGeomItems){const F=U.geomItem;this.pass.removeGeomItem(F),this.pass.renderer.assignTreeItemToGLPass(F)}}}addGeomItemSet(U){const F=U.getGLGeom().getGeom().getId();this.glGeomItemSets[F]=U;const e=U.on("drawCountChanged",(U=>{this.drawCountChanged(U)}));U.once("destructing",(()=>{U.removeListenerById("drawCountChanged",e),delete this.glGeomItemSets[F],0==Object.keys(this.glGeomItemSets).length&&this.emit("destructing")}))}draw(U){if(0==this.drawCount)return;this.glMaterial.bind(U,!0);for(const F in this.glGeomItemSets){this.glGeomItemSets[F].draw(U)}}drawHighlighted(U){this.glMaterial.bind(U,!1);for(const F in this.glGeomItemSets){this.glGeomItemSets[F].drawHighlighted(U)}}drawGeomData(U){this.glMaterial.bind(U,!1);for(const F in this.glGeomItemSets){this.glGeomItemSets[F].draw(U)}}}class CQ extends k{constructor(U,F,e){super(),this.gl=U,this.pass=F,this.glShader=e.glShader,this.glgeomdatashader=e.glgeomdatashader,this.glselectedshader=e.glselectedshader,this.glMaterialGeomItemSets=[]}findMaterialGeomItemSets(U){for(const F of this.glMaterialGeomItemSets)if(F.glMaterial==U)return F}addGLGeomItem(U,F,e){let t=this.findMaterialGeomItemSets(e);t||(t=new bQ(this.pass,e),this.addMaterialGeomItemSets(t)),t.addGLGeomItem(U,F)}addMaterialGeomItemSets(U){this.glMaterialGeomItemSets.push(U);const F=()=>{this.emit("updated")},e=()=>{U.off("updated",F),U.off("destructing",e);const t=this.glMaterialGeomItemSets.indexOf(U);this.glMaterialGeomItemSets.splice(t,1),0==this.glMaterialGeomItemSets.length&&this.emit("destructing")};U.on("updated",F),U.on("destructing",e)}removeMaterialGeomItemSets(U){const F=this.glMaterialGeomItemSets.indexOf(U);this.glMaterialGeomItemSets.splice(F,1)}getMaterialGeomItemSets(){return this.glMaterialGeomItemSets}draw(U){const F=this.glShader;if(this.glShader.bind(U)){this.pass.renderer.glGeomItemLibrary.bind(U);for(const F of this.glMaterialGeomItemSets)F.draw(U);F.unbind(U)}}drawHighlightedGeoms(U){if(this.glselectedshader&&this.glselectedshader.bind(U,"highlight")){this.pass.renderer.glGeomItemLibrary.bind(U);for(const F of this.glMaterialGeomItemSets)F.drawHighlighted(U)}}drawGeomData(U){if(!this.glgeomdatashader||!this.glgeomdatashader.bind(U,"geomData"))return;this.pass.renderer.glGeomItemLibrary.bind(U);const F=this.gl,{floatGeomBuffer:e,passId:t}=U.unifs;e&&F.uniform1i(e.location,U.floatGeomBuffer?1:0),t&&F.uniform1i(t.location,U.passIndex);for(const F of this.glMaterialGeomItemSets)F.drawGeomData(U)}}class TQ extends N{constructor(U){super(),this.index=U}}const GQ=(U,F)=>{const e=new Int32Array(F);return e.set(U),e};class XQ extends k{constructor(U){super(),this.indexBuffer=null,this.__destroyed=!1,this.renderer=U,this.__gl=U.gl,this.shaderAttrSpec={},this.freeGeomIndices=[],this.geoms=[],this.geomRefCounts=[],this.geomsDict={},this.glGeomsDict={},this.geomBuffersTmp=[],this.glattrbuffers={},this.shaderBindings={},this.bufferNeedsRealloc=!1,this.attributesAllocator=new G,this.dirtyGeomIndices=new Set,this.attributesAllocator.on("resized",(()=>{this.bufferNeedsRealloc=!0})),this.attributesAllocator.on("dataReallocated",(U=>{const F=U.id,e=U.allocation;this.dirtyGeomIndices.add(F),this.geomVertexOffsets[F]=e.start,this.geomVertexCounts[F]=e.size})),this.geomVertexCounts=new Int32Array(1),this.geomVertexOffsets=new Int32Array(1),this.indicesCounts=new Int32Array(1),this.indicesOffsets=new Int32Array(1),this.freeGeomIndices.push(0),this.numIndices=0,this.indicesAllocator=new G,this.indicesAllocator.on("resized",(()=>{this.bufferNeedsRealloc=!0})),this.indicesAllocator.on("dataReallocated",(U=>{const F=U.id;this.dirtyGeomIndices.add(F)}))}constructGLGeom(U){let F=this.glGeomsDict[U.getId()];if(null!=F)return F;const e=this.__gl;if(U instanceof iF||U instanceof VF)F=new $t(e,U);else if(U instanceof dF||U instanceof BF)F=new WQ(e,U);else{if(!(U instanceof aF||U instanceof RF))throw new Error("Unsupported geom type:"+U.constructor.name);F=new SQ(e,U)}return this.glGeomsDict[U.getId()]=F,F.on("updated",(()=>{this.renderer.requestRedraw()})),F.addRef(this),F}addGeom(U){let F=this.geomsDict[U.getId()];if(null!=F)return this.geomRefCounts[F]++,F;if(0==this.freeGeomIndices.length){const U=this.geomVertexCounts.length,F=2*U;this.geomVertexCounts=GQ(this.geomVertexCounts,F),this.geomVertexOffsets=GQ(this.geomVertexOffsets,F),this.indicesCounts=GQ(this.indicesCounts,F),this.indicesOffsets=GQ(this.indicesOffsets,F);for(let e=F-1;e>=U;e--)this.freeGeomIndices.push(e)}F=this.freeGeomIndices.pop(),this.geoms[F]=U,this.geomRefCounts[F]=1,this.geomsDict[U.getId()]=F,this.dirtyGeomIndices.add(F),this.geomVertexCounts[F]=0,this.geomVertexOffsets[F]=0,this.indicesCounts[F]=0,this.indicesOffsets[F]=0;return U.on("geomDataChanged",(()=>{this.dirtyGeomIndices.add(F),this.emit("updated")})),U.on("geomDataTopologyChanged",(()=>{this.dirtyGeomIndices.add(F),this.emit("updated")})),F}removeGeom(U){const F=this.geomsDict[U.getId()];this.geomRefCounts[F]--,this.geomRefCounts[F]>0||(this.attributesAllocator.getAllocation(F)&&this.attributesAllocator.deallocate(F),this.indicesAllocator.getAllocation(F)&&this.indicesAllocator.deallocate(F),this.dirtyGeomIndices.has(F)&&this.dirtyGeomIndices.delete(F),this.geomVertexCounts[F]=0,this.geomVertexOffsets[F]=0,this.geoms[F]=null,this.freeGeomIndices.push(F),delete this.geomsDict[U.getId()],delete this.geomBuffersTmp[F],this.indicesCounts[F]=0,this.indicesOffsets[F]=0)}getGeom(U){return this.geoms[U]}getGeomOffsetAndCount(U){return[this.indicesOffsets[U],this.indicesCounts[U]]}allocateBuffers(U){const F=this.geoms[U];if(!F)return;const e=F.genBuffers(),t=e.numRenderVerts?e.numRenderVerts:e.numVertices;if(this.geomVertexCounts[U]!=t)if(0==t)this.attributesAllocator.deallocate(U),this.geomVertexOffsets[U]=0,this.geomVertexCounts[U]=0;else{const F=this.attributesAllocator.allocate(U,t);this.geomVertexOffsets[U]=F.start,this.geomVertexCounts[U]=F.size}for(const U in e.attrBuffers)if(!this.shaderAttrSpec[U]){const F=e.attrBuffers[U],t=at(this.__gl,F.dataType);this.shaderAttrSpec[U]={dataType:F.dataType,normalized:F.normalized,dimension:t.dimension,elementSize:t.elementSize}}if(e.indices){const F=e.indices.length;if(this.indicesCounts[U]!=F)if(0==F)this.indicesAllocator.deallocate(U),this.indicesOffsets[U]=0,this.indicesCounts[U]=0;else{const e=this.indicesAllocator.allocate(U,F),t=4;this.indicesOffsets[U]=e.start*t,this.indicesCounts[U]=e.size}}else this.indicesOffsets[U]=this.geomVertexOffsets[U],this.indicesCounts[U]=this.geomVertexCounts[U];this.geomBuffersTmp[U]=e}genBuffers(){const U=this.attributesAllocator.reservedSpace,F=this.__gl;for(const e in this.shaderAttrSpec){const t=this.shaderAttrSpec[e],Q=U*t.dimension;t.numValues=Q,this.glattrbuffers[e]&&this.glattrbuffers[e].buffer&&F.deleteBuffer(this.glattrbuffers[e].buffer);const l=F.createBuffer();F.bindBuffer(F.ARRAY_BUFFER,l);const n=Q*t.elementSize;F.bufferData(F.ARRAY_BUFFER,n,F.STATIC_DRAW),this.glattrbuffers[e]={buffer:l,dataType:t.dataType,normalized:t.normalized,length:Q,dimension:t.dimension},"textureCoords"==e&&(this.glattrbuffers.texCoords=this.glattrbuffers.textureCoords)}const e=this.indicesAllocator.reservedSpace;if(this.numIndices!=e){const U=this.__gl;this.indexBuffer&&U.deleteBuffer(this.indexBuffer),this.indexBuffer=U.createBuffer(),U.bindBuffer(U.ELEMENT_ARRAY_BUFFER,this.indexBuffer);const F=this.indicesAllocator.reservedSpace,e=F*4;U.bufferData(U.ELEMENT_ARRAY_BUFFER,e,U.STATIC_DRAW),this.numIndices=F}}uploadBuffers(U){const F=this.__gl;let e=this.geomBuffersTmp[U];if(!e){const F=this.geoms[U];if(!F)return;e=F.genBuffers(),this.geomBuffersTmp[U]=e}const t=this.geomVertexCounts[U],Q=e.numRenderVerts?e.numRenderVerts:e.numVertices;if(t!=Q)throw new Error("Invalid allocation for this geom");if(0==Q){const F=new TQ(U);return void this.emit("geomDataChanged",F)}for(const t in e.attrBuffers){const Q=this.shaderAttrSpec[t],l=e.attrBuffers[t],n=this.glattrbuffers[t];if(!l||!n)continue;F.bindBuffer(F.ARRAY_BUFFER,n.buffer);const a=Q.elementSize,d=this.geomVertexOffsets[U]*a*Q.dimension;F.bufferSubData(F.ARRAY_BUFFER,d,l.values)}if(F.bindBuffer(F.ARRAY_BUFFER,null),e.indices&&e.indices.length>0){const F=e.indices,t=this.indicesAllocator.getAllocation(U);if(t.size!=F.length)throw new Error("Invalid allocation for this geom");const Q=this.attributesAllocator.getAllocation(U),l=new Uint32Array(t.size);for(let U=0;U<F.length;U++)l[U]=e.indices[U]+Q.start;const n=this.__gl;n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,this.indexBuffer);const a=4,d=t.start*a;n.bufferSubData(n.ELEMENT_ARRAY_BUFFER,d,l),n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,null)}let l=new TQ(U);this.emit("geomDataChanged",l)}cleanGeomBuffers(){if(new Set(this.dirtyGeomIndices).forEach((U=>{this.allocateBuffers(U)})),this.bufferNeedsRealloc){for(const U in this.shaderBindings){this.shaderBindings[U].destroy()}this.shaderBindings={};for(let U=0;U<this.geoms.length;U++)this.geoms[U]&&this.dirtyGeomIndices.add(U);this.genBuffers(),this.bufferNeedsRealloc=!1}this.dirtyGeomIndices.forEach((U=>{this.uploadBuffers(U)})),this.dirtyGeomIndices=new Set,this.geomBuffersTmp=[]}bind(U){this.dirtyGeomIndices.size>0&&this.cleanGeomBuffers();let F=this.shaderBindings[U.shaderkey];if(F)F.bind(U);else{F=Rt(this.__gl,U.attrs,this.glattrbuffers,this.indexBuffer),this.shaderBindings[U.shaderkey]=F}return!0}unbind(U){const F=this.shaderBindings[U.shaderkey];F&&F.unbind(U)}clearBuffers(){const U=this.__gl;for(const F in this.glattrbuffers){const e=this.glattrbuffers[F];e.shared||U.deleteBuffer(e.buffer)}this.glattrbuffers={},this.indexBuffer&&(U.deleteBuffer(this.indexBuffer),this.indexBuffer=null);for(const U in this.shaderBindings){this.shaderBindings[U].destroy()}this.shaderBindings={}}destroy(){this.clearBuffers(),this.__destroyed=!0,this.emit("destructing")}}var gQ=eU("Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwp2YXIgd29ya2VyX2NvZGU9ZnVuY3Rpb24oZSl7InVzZSBzdHJpY3QiO2NvbnN0IHQ9KGUsdCk9PltlWzBdLXRbMF0sZVsxXS10WzFdLGVbMl0tdFsyXV0scz0oZSx0KT0+W2VbMF0qdCxlWzFdKnRdLGk9ZT0+TWF0aC5zcXJ0KGVbMF0qZVswXStlWzFdKmVbMV0pLG49ZT0+Wy1lWzBdLC1lWzFdLC1lWzJdLGVbM11dLGE9KGUsdCk9Pntjb25zdCBzPWVbMF0saT1lWzFdLG49ZVsyXSxhPWVbM10sbz10WzBdLHI9dFsxXSxsPXRbMl0sZD10WzNdO3JldHVybltzKmQrYSpvK2kqbC1uKnIsaSpkK2EqcituKm8tcypsLG4qZCthKmwrcypyLWkqbyxhKmQtcypvLWkqci1uKmxdfSxvPShlLHQpPT57Y29uc3Qgcz1bdFswXSx0WzFdLHRbMl0sMF0saT1hKGEoZSxzKSxuKGUpKTtyZXR1cm5baVswXSxpWzFdLGlbMl1dfSxyPVtdLGw9W107bGV0IGQsdSxoPVtdLGY9W10sYz0hMSxNPTAsZz0wLG09MCxwPTAsYj0uMDA0LHY9e3NvbGlkQW5nbGU6MCxmcnVzdHVtOjAsdG9vQ2xvc2U6MCxiZWhpbmQ6MH07Y29uc3QgeT1lPT57bFtlXXx8KGxbZV09ITAsaC5wdXNoKGUpKX0sQz1lPT57bFtlXSYmKGxbZV09ITEsZi5wdXNoKGUpKX0sQT1lPT57aWYoIWV8fCFkKXJldHVybjtpZighZS52aXNpYmxlKXJldHVybjtpZighZS5jdWxsYWJsZSlyZXR1cm4gdm9pZCBDKGUuaWQpO2NvbnN0IG49ZS5ib3VuZGluZ1JhZGl1cztpZihjKXtjb25zdCBzPW4vTTtpZihiPjAmJnM8YilyZXR1cm4gdm9pZCB5KGUuaWQpO2NvbnN0IGk9dChlLnBvcyxkKSxhPW8odSxpKTtpZihNYXRoLmFicyhhWzBdKS1uPi41Kmd8fE1hdGguYWJzKGFbMV0pLW4+LjUqTSlyZXR1cm4gdm9pZCB5KGUuaWQpfWVsc2V7Y29uc3QgYT10KGUucG9zLGQpLHI9KGU9Pk1hdGguc3FydChlWzBdKmVbMF0rZVsxXSplWzFdK2VbMl0qZVsyXSkpKGEpO2lmKHI8bilyZXR1cm4gdi50b29DbG9zZSsrLHZvaWQgQyhlLmlkKTtjb25zdCBsPU1hdGguYXNpbihuL3IpO2lmKGI+MCYmbDxiKXJldHVybiB2LnNvbGlkQW5nbGUrKyx2b2lkIHkoZS5pZCk7Y29uc3QgaD1vKHUsYSksZj1baFswXSxoWzJdXSxjPVtoWzFdLGhbMl1dLE09aShmKSxnPWkoYyksQT1NYXRoLmFzaW4obi9NKSxJPU1hdGguYXNpbihuL2cpLHc9cyhmLDEvTSksRT1zKGMsMS9nKTtsZXQgUDtpZihoWzJdPjA/KHYuYmVoaW5kKyssUD1bTWF0aC5QSS1NYXRoLmFicyhNYXRoLmFzaW4od1swXSkpLUEsTWF0aC5QSS1NYXRoLmFicyhNYXRoLmFzaW4oRVswXSkpLUldKTpQPVtNYXRoLmFicyhNYXRoLmFzaW4od1swXSkpLUEsTWF0aC5hYnMoTWF0aC5hc2luKEVbMF0pKS1JXSxQWzBdPm18fFBbMV0+cClyZXR1cm4gdi5mcnVzdHVtKyssdm9pZCB5KGUuaWQpfUMoZS5pZCl9LEk9ZT0+e2gubGVuZ3RoPjB8fGYubGVuZ3RoPjA/KGUoe3R5cGU6IkN1bGxSZXN1bHRzIixuZXdseUN1bGxlZDpoLG5ld2x5VW5DdWxsZWQ6Zn0pLGg9W10sZj1bXSk6ZSh7dHlwZToiRG9uZSJ9KSx2PXtzb2xpZEFuZ2xlOjAsZnJ1c3R1bTowLHRvb0Nsb3NlOjAsYmVoaW5kOjB9fSx3PShlLHQpPT57IlZpZXdwb3J0Q2hhbmdlZCI9PWUudHlwZT8oKGUsdCk9PntlLmlzT3J0aG9ncmFwaGljPyhjPSEwLE09ZS5mcnVzdHVtSGVpZ2h0LGc9ZS5mcnVzdHVtV2lkdGgpOihjPSExLG09ZS5mcnVzdHVtSGFsZkFuZ2xlWCxwPWUuZnJ1c3R1bUhhbGZBbmdsZVkpLGI9ZS5zb2xpZEFuZ2xlTGltaXQsZCYmdSYmKHIuZm9yRWFjaChBKSxJKHQpKX0pKGUsdCk6IlZpZXdDaGFuZ2VkIj09ZS50eXBlPygoZSx0KT0+e2Q9ZS5jYW1lcmFQb3MsdT1uKGUuY2FtZXJhT3JpKSxiPWUuc29saWRBbmdsZUxpbWl0LHIuZm9yRWFjaChBKSxJKHQpfSkoZSx0KToiVXBkYXRlR2VvbUl0ZW1zIj09ZS50eXBlJiYoZS5yZW1vdmVkSXRlbUluZGljZXMuZm9yRWFjaCgoZT0+e3JbZV09bnVsbH0pKSxlLmdlb21JdGVtcy5mb3JFYWNoKChlPT57cltlLmlkXXx8KGxbZS5pZF09ITEpLHJbZS5pZF09ZSxBKHJbZS5pZF0pfSkpLEkodCkpfTtyZXR1cm4gc2VsZi5vbm1lc3NhZ2U9ZnVuY3Rpb24oZSl7dyhlLmRhdGEsc2VsZi5wb3N0TWVzc2FnZSl9LGUuaGFuZGxlTWVzc2FnZT13LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxlfSh7fSk7Cgo=",null,!1);class yQ extends k{constructor(U,F){super(),this.dirtyWorkerItemIndices=new Set,this.glGeomItemsTexture=null,this.renderer=U,this.glGeomItems=[],this.glGeomItemEventHandlers=[],this.glGeomItemsMap={},this.glGeomItemsIndexFreeList=[],this.dirtyItemIndices=[],this.dirtyWorkerItemIndices=new Set,this.removedItemIndices=[],this.enableFrustumCulling=F.enableFrustumCulling,this.enableFrustumCulling&&this.setupCullingWorker(U)}setupCullingWorker(U){this.worker=new gQ;let F=!0;this.worker.onmessage=U=>{"CullResults"==U.data.type?this.applyCullResults(U.data):"Done"==U.data.type&&this.renderer.emit("CullingUpdated"),F=!0};const e=()=>{const F=U.getViewport(),e=U.getViewport().getCamera(),t=F.getWidth()/F.getHeight();if(e.isOrthographic()){const F=e.getFrustumHeight(),Q=F*t;this.worker.postMessage({type:"ViewportChanged",frustumHeight:F,frustumWidth:Q,isOrthographic:!0,solidAngleLimit:U.solidAngleLimit})}else{const F=.5*e.getFov(),Q=Math.atan(Math.tan(F)*t);this.worker.postMessage({type:"ViewportChanged",frustumHalfAngleX:Q,frustumHalfAngleY:F,isOrthographic:!1,solidAngleLimit:U.solidAngleLimit})}};U.on("resized",e);const t=U.getViewport().getCamera();t.on("projectionParamChanged",(U=>{t.isOrthographic()&&e()})),e(),U.once("xrViewportSetup",(F=>{F.xrViewport.on("presentingChanged",(F=>{if(F.state){l=10;const F=Math.PI/180,e=62*F,t=50*F;this.worker.postMessage({type:"ViewportChanged",frustumHalfAngleX:t,frustumHalfAngleY:e,isOrthographic:!1,solidAngleLimit:2*U.solidAngleLimit})}else l=5,e()}))}));let Q=0,l=5;U.on("viewChanged",(e=>{if(F){if(Q%l==0){F=!1;const t=e.viewXfo.tr,Q=e.viewXfo.ori;this.worker.postMessage({type:"ViewChanged",cameraPos:t.asArray(),cameraOri:Q.asArray(),solidAngleLimit:U.solidAngleLimit})}Q++}}));const n=()=>{const F=U.getViewport().getCamera().globalXfoParam.value,e=F.tr,t=F.ori;this.worker.postMessage({type:"ViewChanged",cameraPos:e.asArray(),cameraOri:t.asArray(),solidAngleLimit:U.solidAngleLimit})};U.getViewport().getCamera().on("movementFinished",n),n()}addGeomItem(U){let F=this.glGeomItemsMap[U.getId()];if(null!=F)return this.glGeomItems[F];const e=U.materialParam;let t=e.value,Q=-1;Q=this.renderer.glMaterialLibrary.addMaterial(t);const l=()=>{this.renderer.glMaterialLibrary.removeMaterial(t),t=e.value,B.materialId=this.renderer.glMaterialLibrary.addMaterial(t),V()};e.on("valueChanged",l);const n=U.geomParam;let a=n.value;const d=this.renderer.glGeomLibrary.addGeom(a),i=U=>{this.renderer.glGeomLibrary.removeGeom(a),a=n.value,B.geomId=this.renderer.glGeomLibrary.addGeom(a),this.enableFrustumCulling&&this.dirtyWorkerItemIndices.add(F),V()};n.on("valueChanged",i),this.glGeomItemsIndexFreeList.length>0?F=this.glGeomItemsIndexFreeList.pop():(F=this.glGeomItems.length,this.glGeomItems.push(null)),this.removedItemIndices.includes(F)&&this.removedItemIndices.splice(this.removedItemIndices.indexOf(F),1),this.dirtyItemIndices.push(F);const s=this.renderer.gl,R=s.floatTexturesSupported,B=new uQ(s,U,F,d,Q,R),V=()=>{this.dirtyItemIndices.includes(F)||(this.dirtyItemIndices.push(F),this.renderer.drawItemChanged())};U.geomMatParam.on("valueChanged",V),U.on("cutAwayChanged",V),U.on("highlightChanged",V),U.on("selectabilityChanged",V);const r=()=>{this.enableFrustumCulling&&(this.dirtyWorkerItemIndices.has(F)||(this.dirtyWorkerItemIndices.add(F),this.renderer.drawItemChanged()))};return this.enableFrustumCulling&&this.dirtyWorkerItemIndices.add(F),U.on("visibilityChanged",r),U.geomMatParam.on("valueChanged",r),n.on("boundingBoxChanged",r),this.glGeomItems[F]=B,this.glGeomItemEventHandlers[F]={geomItemChanged:V,materialChanged:l,geomChanged:i,workerItemDataChanged:r},this.glGeomItemsMap[U.getId()]=F,this.renderer.requestRedraw(),B}applyCullResults(U){const{newlyCulled:F,newlyUnCulled:e}=U;0==F.length&&0==e.length||(F.forEach((U=>{this.glGeomItems[U]?this.glGeomItems[U].setCulled(!0):-1==this.removedItemIndices.indexOf(U)&&console.warn("Culling worker has items that are deleted.")})),e.forEach((U=>{this.glGeomItems[U]?this.glGeomItems[U].setCulled(!1):-1==this.removedItemIndices.indexOf(U)&&console.warn("Culling worker has items that are deleted.")})),this.renderer.requestRedraw(),this.renderer.emit("CullingUpdated"))}removeGeomItem(U){const F=this.glGeomItemsMap[U.getId()];if(null==F)return null;const e=this.glGeomItems[F],t=U.geomParam.value;this.renderer.glGeomLibrary.removeGeom(t);const Q=U.materialParam.value;this.renderer.glMaterialLibrary.removeMaterial(Q);const l=this.glGeomItemEventHandlers[F];U.materialParam.off("valueChanged",l.materialChanged),U.geomMatParam.off("valueChanged",l.geomItemChanged),U.off("cutAwayChanged",l.geomItemChanged),U.off("highlightChanged",l.geomItemChanged),U.off("visibilityChanged",l.workerItemDataChanged),U.geomMatParam.off("valueChanged",l.workerItemDataChanged);const n=U.geomParam;return n.off("valueChanged",l.geomChanged),n.off("boundingBoxChanged",l.workerItemDataChanged),this.glGeomItems[F]=null,this.glGeomItemEventHandlers[F]=null,this.glGeomItemsIndexFreeList.push(F),delete this.glGeomItemsMap[U.getId()],this.removedItemIndices.push(F),this.renderer.requestRedraw(),e}getGeomItem(U){var F;if(!(U>=this.glGeomItems.length))return null===(F=this.glGeomItems[U])||void 0===F?void 0:F.geomItem;console.warn("Invalid Draw Item id:"+U+" NumItems:"+(this.glGeomItems.length-1))}getGLGeomItem(U){const F=this.glGeomItemsMap[U.getId()];return null!=F?this.glGeomItems[F]:null}populateDrawItemDataArray(U,F,e){const t=this.glGeomItems[U];if(!t)return;const{geomItem:Q,geomId:l}=t,n=24*F;let a=0;Q.isCutawayEnabled()&&(a|=pQ.GEOMITEM_FLAG_CUTAWAY),0==Q.isSelectable()&&(a|=pQ.GEOMITEM_INVISIBLE_IN_GEOMDATA);const d=new s(new Float32Array(e.buffer,4*(n+0),4));d.set(a,0,0,0);const i=Q.materialParam.value,R=this.renderer.glMaterialLibrary.getMaterialAllocation(i);R&&(d.z=R.start),d.w=l;const B=Q.geomMatParam.value,V=new s(new Float32Array(e.buffer,4*(n+4),4)),r=new s(new Float32Array(e.buffer,4*(n+8),4)),h=new s(new Float32Array(e.buffer,4*(n+12),4));V.set(B.xAxis.x,B.yAxis.x,B.zAxis.x,B.translation.x),r.set(B.xAxis.y,B.yAxis.y,B.zAxis.y,B.translation.y),h.set(B.xAxis.z,B.yAxis.z,B.zAxis.z,B.translation.z);const o=new s(new Float32Array(e.buffer,4*(n+16),4));if(Q.isHighlighted()){const U=Q.getHighlight();o.set(U.r,U.g,U.b,U.a)}const J=new s(new Float32Array(e.buffer,4*(n+20),4));if(Q.isCutawayEnabled()){const U=Q.getCutVector(),F=Q.getCutDist();J.set(U.x,U.y,U.z,F)}}getCullingWorkerData(U,F,e){const t=U.boundingBoxParam.value,Q=.5*t.size(),l=t.center();let n=0!=U.cullable;const a=F.getParameter("MaintainScreenSize");return a&&a.value&&(n=!1),F.getShaderName().startsWith("ScreenSpace")&&(n=!1),F.hasParameter("PointSize")&&(n=!1),{id:e,boundingRadius:Q,pos:l.asArray(),cullable:n,visible:U.isVisible()}}uploadGeomItemsToWorker(){if(this.enableFrustumCulling){const U=[];this.dirtyWorkerItemIndices.forEach((F=>{const e=this.glGeomItems[F];if(!e)return;const{geomItem:t}=e,Q=t.materialParam.value;U.push(this.getCullingWorkerData(t,Q,F))})),this.worker.postMessage({type:"UpdateGeomItems",geomItems:U,removedItemIndices:this.removedItemIndices}),this.dirtyWorkerItemIndices.clear(),this.removedItemIndices=[]}}uploadGeomItems(U){const F=this.renderer.gl;if(!F.floatTexturesSupported)return;let e=Math.round(Math.sqrt(6*this.glGeomItems.length)+.5);e=J.nextPow2(e),e%6!=0&&(e+=6-e%6),this.glGeomItemsTexture?this.glGeomItemsTexture.width!=e&&(this.glGeomItemsTexture.resize(e,e),this.dirtyItemIndices=Array(e*e/6).fill(0).map(((U,F)=>F))):(this.glGeomItemsTexture=new Ae(F,{format:"RGBA",type:"FLOAT",width:e,height:e,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.glGeomItemsTexture.clear()),F.bindTexture(F.TEXTURE_2D,this.glGeomItemsTexture.glTex);const t=this.glGeomItemsTexture.getType();for(let U=0;U<this.dirtyItemIndices.length;U++){const Q=this.dirtyItemIndices[U],l=Math.floor(6*Q/e);let n=Q+1;for(let F=U+1;F<this.dirtyItemIndices.length;F++){const U=this.dirtyItemIndices[F];if(Math.floor(6*U/e)!=l)break;if(U!=n)break;n++}const a=n-Q,d=6*Q%e,i=6*a,s=1,R=new Float32Array(24*a);for(let U=Q;U<n;U++)this.populateDrawItemDataArray(U,U-Q,R);if(t==F.FLOAT)this.glGeomItemsTexture.populate(R,i,s,d,l,!1);else{const U=J.convertFloat32ArrayToUInt16Array(R);this.glGeomItemsTexture.populate(U,i,s,d,l,!1)}U+=a-1}this.removedItemIndices=[],this.dirtyItemIndices=[]}bind(U){(this.dirtyWorkerItemIndices.size>0||this.removedItemIndices.length>0)&&this.uploadGeomItemsToWorker(),this.dirtyItemIndices.length>0&&this.uploadGeomItems(U);const F=this.renderer.gl,{instancesTexture:e,instancesTextureSize:t}=U.unifs;e&&(this.glGeomItemsTexture.bindToUniform(U,e),F.uniform1i(t.location,this.glGeomItemsTexture.width))}destroy(){}}class IQ extends N{constructor(U){super(),this.scene=U}}class xQ extends N{constructor(U){super(),this.xrViewport=U}}class fQ extends N{constructor(U){super(),this.propagating=!0,this.sourceEvent=U,this.altKey=U.altKey,this.code=U.code,this.ctrlKey=U.ctrlKey,this.isComposing=U.isComposing,this.key=U.key,this.location=U.location,this.metaKey=U.metaKey,this.repeat=U.repeat,this.shiftKey=U.shiftKey,this.which=U.which}stopPropagation(){this.propagating=!1,this.sourceEvent&&this.sourceEvent.stopPropagation()}preventDefault(){this.sourceEvent&&this.sourceEvent.preventDefault()}}let MQ,vQ=!1,DQ=!1;const LQ={};class YQ extends K{constructor(U,F={}){if(super(),this.listenerIDs={},this.directives=[],this.solidAngleLimit=.004,this.__glcanvas=null,this.__scene=null,this.__shaderDirectives={},this.__renderGeomDataFbosRequested=!1,this.__shaders={},this.__passes={},this.__passesRegistrationOrder=[],this.__passCallbacks=[],this.__viewports=[],this.__activeViewport=void 0,this.__continuousDrawing=!1,this.__redrawRequested=!1,this.__isMobile=!1,this.__drawSuspensionLevel=0,this.__xrViewportPresenting=!1,this.floatGeomBuffer=!0,this.__supportXR=!1,this.__xrViewport=void 0,this.screenQuad=null,!e.gpuDesc)throw new Error("Unable to create renderer. WebGL not Supported");this.__isMobile=e.isMobileDevice,this.requestRedraw=this.requestRedraw.bind(this),this.__gl=this.setupWebGL(U,F),this.screenQuad=new At(this.__gl,{directives:this.directives}),this.bindEventHandlers(),this.addViewport("main"),this.glMaterialLibrary=new mQ(this),this.glMaterialLibrary.on("updated",(()=>{this.requestRedraw()})),this.glGeomLibrary=new XQ(this),this.glGeomLibrary.on("updated",(()=>{this.requestRedraw()})),this.glGeomItemLibrary=new yQ(this,F),this.glGeomItemLibrary.on("updated",(()=>{this.requestRedraw()}));for(const U in LQ)for(const F of LQ[U])this.addPass(new F,parseInt(U),!1);this.__supportXR=void 0===F.supportXR||F.supportXR,this.__xrViewportPromise=new Promise(((U,F)=>{var e,t;if(this.__supportXR&&(null===(e=navigator)||void 0===e?void 0:e.xr)){const F=()=>{this.__gl.makeXRCompatible().then((()=>{this.__xrViewport=this.__setupXRViewport();let F=new xQ(this.__xrViewport);this.emit("xrViewportSetup",F),U(this.__xrViewport)}))};null===(t=navigator)||void 0===t||t.xr.isSessionSupported("immersive-vr").then((U=>{U&&F()})).catch((U=>{console.warn("Unable to setup XR:"+U)}))}}))}addShaderPreprocessorDirective(U,F){this.__shaderDirectives[U]=F?"#define "+U+" = "+F:"#define "+U;const e=[];for(const U in this.__shaderDirectives)e.push(this.__shaderDirectives[U]);this.directives=e}getWidth(){return this.__glcanvas.width}getHeight(){return this.__glcanvas.height}addViewport(U){const F=new QQ(this,U,this.getWidth(),this.getHeight());return F.on("updated",(()=>{this.requestRedraw()})),F.on("viewChanged",(U=>{this.__xrViewportPresenting||this.emit("viewChanged",U)})),this.__viewports.push(F),this.__activeViewport=F,F}getViewport(U=0){return this.__viewports[U]}getViewportAtPos(U,F){for(const e of this.__viewports){const t=e.getPosX(),Q=e.getPosY(),l=e.getWidth(),n=e.getHeight();if(U>=t&&F>=Q&&U<=l+t&&F<=n+Q)return e}}activateViewport(U){this.__activeViewport!=U&&(this.__activeViewport=U)}activateViewportAtPos(U,F){if(this.__xrViewportPresenting)return;const e=this.getViewportAtPos(U,F);e&&e!=this.__activeViewport&&this.activateViewport(e)}getActiveViewport(){return this.__activeViewport}suspendDrawing(){this.__drawSuspensionLevel++}resumeDrawing(){this.__drawSuspensionLevel--,0==this.__drawSuspensionLevel&&(this.renderGeomDataFbos(),this.requestRedraw())}renderGeomDataFbos(){if(1==this.__renderGeomDataFbosRequested)return;this.__renderGeomDataFbosRequested=!0;window.requestAnimationFrame((()=>{for(const U of this.__viewports)U.renderGeomDataFbo();this.__renderGeomDataFbosRequested=!1}))}getScene(){return this.__scene}setScene(U){this.__scene=U,this.addTreeItem(this.__scene.getRoot());let F=new IQ(this.__scene);this.emit("sceneSet",F)}addTreeItem(U){if(!(U instanceof DU))return;const F=U.getId(),e={};if(this.listenerIDs[F]=e,U instanceof he){const F=U.geomParam;if(null==F.value){const t=()=>{delete e["Geometry.valueChanged"],this.assignTreeItemToGLPass(U)};e["Geometry.valueChanged"]=F.once("valueChanged",t)}else this.assignTreeItemToGLPass(U)}else this.assignTreeItemToGLPass(U);for(const F of U.getChildren())F&&this.addTreeItem(F);e.childAdded=U.on("childAdded",(U=>{this.addTreeItem(U.childItem)})),e.childRemoved=U.on("childRemoved",(U=>{this.removeTreeItem(U.childItem)})),this.renderGeomDataFbos()}assignTreeItemToGLPass(U){if(U instanceof he){const F=U;this.glGeomItemLibrary.addGeomItem(F)}let F=!1;for(let e=this.__passesRegistrationOrder.length-1;e>=0;e--){const t={continueInSubTree:!0};if(F=this.__passesRegistrationOrder[e].itemAddedToScene(U,t),F){if(!t.continueInSubTree)return;break}}if(!F)for(const F of this.__passCallbacks){const e={continueInSubTree:!0};if(F.itemAddedFn(U,e)){if(!e.continueInSubTree)return;break}}}removeTreeItem(U){if(!(U instanceof DU))return;const F=U.getId(),e=this.listenerIDs[F];delete this.listenerIDs[F],U.removeListenerById("childAdded",e.childAdded),U.removeListenerById("childRemoved",e.childRemoved);for(let F=this.__passesRegistrationOrder.length-1;F>=0;F--){const e={continueInSubTree:!0};if(this.__passesRegistrationOrder[F].itemRemovedFromScene(U,e)){if(!e.continueInSubTree)return;break}}for(const F of this.__passCallbacks){if(!F.itemRemovedFn)continue;const e={continueInSubTree:!0};if(F.itemRemovedFn(U,e)){if(!e.continueInSubTree)return;break}}for(const F of U.getChildren())F&&this.removeTreeItem(F);if(U instanceof he){const F=U;if(e["Geometry.valueChanged"]){U.geomParam.removeListenerById("valueChanged",e["Geometry.valueChanged"])}this.glGeomItemLibrary.removeGeomItem(F)}this.renderGeomDataFbos()}get gl(){return this.__gl}getGL(){return this.__gl}handleResize(U,F){if(this.__xrViewportPresenting)return;const e=Math.max(4,U),t=Math.max(4,F);this.__glcanvas.width=e,this.__glcanvas.height=t,this.__viewports.forEach((U=>{U.resize(e,t)}));const Q=new b(e,t);this.emit("resized",Q),this.requestRedraw()}getDiv(){return this.__glcanvas.parentElement}setupWebGL(U,F){const{tagName:t}=U;if(!["DIV","CANVAS"].includes(t))throw new Error("Only CANVAS and DIV are valid root elements.");const Q="DIV"===t;this.__glcanvas=U,Q?(console.warn("@GLBaseRenderer#setupWebGL.","Using a DIV as root element is deprecated.","Use a CANVAS instead.","See: https://docs.zea.live/zea-engine/#/getting-started/get-started-with-engine?id=basic-setup"),this.__glcanvas=document.createElement("canvas"),U.appendChild(this.__glcanvas)):this.__glcanvas=U,this.__glcanvas.style["touch-action"]="none",this.__glcanvas.parentElement.style.position="relative",this.__glcanvas.style.position="absolute";const l=Ot((U=>{for(const F of U){if(!Array.isArray(U)||!U.length||!F.contentRect)return;const e=Math.round(F.contentRect.width),t=Math.round(F.contentRect.height);this.handleResize(e,t)}}),500),n=new ResizeObserver(l);this.handleResize(this.__glcanvas.parentElement.clientWidth,this.__glcanvas.parentElement.clientHeight);try{n.observe(this.__glcanvas.parentNode,{box:"device-pixel-content-box"})}catch(U){n.observe(this.__glcanvas.parentNode,{box:"content-box"})}F.preserveDrawingBuffer=!0,F.antialias=null==F.antialias||F.antialias,F.depth=!0,F.stencil=!1,F.alpha=!!F.alpha&&F.alpha,F.xrCompatible=!1,F.powerPreference=F.powerPreference||"high-performance";const a=Oe(this.__glcanvas,F);a||alert("Unable to create WebGL context. WebGL not supported."),"webgl2"==a.name&&this.addShaderPreprocessorDirective("ENABLE_ES3"),a.floatTexturesSupported&&this.addShaderPreprocessorDirective("ENABLE_FLOAT_TEXTURES");{const U="webgl2"==a.name?a.getExtension("WEBGL_multi_draw"):null;U&&!F.disableMultiDraw?(a.multiDrawArrays=U.multiDrawArraysWEBGL.bind(U),a.multiDrawElements=U.multiDrawElementsWEBGL.bind(U),a.multiDrawElementsInstanced=U.multiDrawElementsInstancedWEBGL.bind(U),a.multiDrawArraysInstanced=U.multiDrawArraysInstancedWEBGL.bind(U)):this.addShaderPreprocessorDirective("EMULATE_MULTI_DRAW")}return"Safari"==e.browserName&&"webgl"==a.name?this.floatGeomBuffer=!1:this.floatGeomBuffer=null!=F.floatGeomBuffer?F.floatGeomBuffer:a.floatTexturesSupported,a.floatGeomBuffer=this.floatGeomBuffer,a}bindEventHandlers(){const U=()=>this.getWidth()>0&&this.getHeight(),F=U=>!(!e.isMobileDevice||"Safari"!=e.browserName)&&(console.warn("Mobile Safari is triggering mouse event:",U.type),!0);this.__glcanvas.addEventListener("mousedown",(U=>{if(F(U))return;const e=new x(U,this.__glcanvas.getBoundingClientRect());vQ=!0,MQ=this,this.activateViewportAtPos(e.rendererX,e.rendererY);const t=this.getActiveViewport();t&&t.onPointerDown(e),DQ=!1})),document.addEventListener("mouseup",(e=>{if(F(e))return;if(MQ!=this||!U())return;const t=new x(e,this.__glcanvas.getBoundingClientRect());vQ=!1;const Q=this.getActiveViewport();Q&&Q.onPointerUp(t),DQ&&(Q&&Q.onPointerLeave(t),MQ=void 0)})),document.addEventListener("mousemove",(e=>{if(F(e))return;if(MQ!=this||!U())return;const t=new x(e,this.__glcanvas.getBoundingClientRect());vQ||this.activateViewportAtPos(t.rendererX,t.rendererY);const Q=this.getActiveViewport();Q&&Q.onPointerMove(t)})),this.__glcanvas.addEventListener("mouseenter",(U=>{if(!F(U)&&!vQ){MQ=this;const F=new x(U,this.__glcanvas.getBoundingClientRect());if(this.activateViewportAtPos(F.rendererX,F.rendererY),!vQ){const U=this.getActiveViewport();U&&U.onPointerEnter(F)}DQ=!1}})),this.__glcanvas.addEventListener("mouseleave",(e=>{if(F(e))return;if(MQ!=this||!U())return;const t=new x(e,this.__glcanvas.getBoundingClientRect());if(vQ)DQ=!0;else{const U=this.getActiveViewport();U&&U.onPointerLeave(t),MQ=void 0}})),this.__glcanvas.addEventListener("touchstart",(U=>{MQ=this;const F=this.getActiveViewport(),e=new M(U,this.__glcanvas.getBoundingClientRect());F.onPointerDown(e)}),{passive:!0}),this.__glcanvas.addEventListener("touchend",(U=>{const F=this.getActiveViewport(),e=new M(U,this.__glcanvas.getBoundingClientRect());F.onPointerUp(e)}),{passive:!0}),this.__glcanvas.addEventListener("touchmove",(U=>{const F=this.getActiveViewport(),e=new M(U,this.__glcanvas.getBoundingClientRect());F.onPointerMove(e)}),{passive:!0}),this.__glcanvas.addEventListener("touchcancel",(U=>{const F=this.getActiveViewport(),e=new M(U,this.__glcanvas.getBoundingClientRect());F.onTouchCancel(e)}),{passive:!0});window.addEventListener("wheel",(F=>{if(MQ==this&&U()&&MQ){const U=new v(F,this.__glcanvas.getBoundingClientRect()),e=MQ.getActiveViewport();e&&e.onWheel(U)}}),{passive:!1}),window.oncontextmenu=function(){return!1},document.addEventListener("keydown",(F=>{if(MQ!=this||!U())return;const e=new fQ(F),t=MQ.getActiveViewport();t&&t.onKeyDown(e)})),document.addEventListener("keyup",(F=>{if(MQ!=this||!U())return;const e=new fQ(F),t=MQ.getActiveViewport();t&&t.onKeyUp(e)}))}getGLCanvas(){return this.__glcanvas}frameAll(U=0){this.__viewports[U].frameView([this.__scene.getRoot()])}getOrCreateShader(U){let F=this.__shaders[U];return F||(F=n.constructClass(U),F||console.error("@GLBaseRenderer#getOrCreateShader - Shader not registered with the Registry:",U),F.setGLContext(this.__gl),this.__shaders[U]=F),F}addPass(U,F=-1,e=!0){-1==F&&(F=U.getPassType()),this.__passes[F]||(this.__passes[F]=[]);let t=0;for(const U in this.__passes){if(U==F.toString())break;t+=this.__passes[U].length}if(t+=this.__passes[F].length,U.on("updated",(U=>{this.requestRedraw(),this.renderGeomDataFbos()})),U.init(this,t),this.__passes[F].push(U),e){let U=0;for(const F in this.__passes){const e=this.__passes[F];e.forEach(((F,e)=>{F.setPassIndex(U+e)})),U+=e.length}}return this.__passesRegistrationOrder.push(U),this.requestRedraw(),t}getPass(U){let F=0;for(const e in this.__passes){const t=this.__passes[e];if(U-F<t.length)return t[U-F];F+=t.length}}supportsVR(){var U;return console.warn("@GLBaseRenderer#supportVR - Deprecated Method. Please instead connect to the vrViewportSetup signal."),this.__supportXR&&null!=(null===(U=navigator)||void 0===U?void 0:U.xr)}__setupXRViewport(){const U=new RQ(this),F=U=>{this.emit("viewChanged",U)};return U.on("presentingChanged",(e=>{const t=e.state;if(this.__xrViewportPresenting=t,t){for(const U in this.__passes){const F=this.__passes[U];for(const U of F)U.startPresenting()}U.on("viewChanged",F)}else{U.off("viewChanged",F),this.emit("updated");for(const U in this.__passes){const F=this.__passes[U];for(const U of F)U.stopPresenting()}const e=this.getViewport().getCamera().globalXfoParam.value,t=new eQ("CameraAndPointer",e);this.emit("viewChanged",t),this.requestRedraw()}})),U}getVRViewport(){return this.__xrViewport}getXRViewport(){return this.__xrViewportPromise}isXRViewportPresenting(){return this.__xrViewportPresenting}isContinuouslyDrawing(){return this.__continuousDrawing}startContinuousDrawing(){if(this.isContinuouslyDrawing()||this.__xrViewportPresenting)return;const U=()=>{this.__continuousDrawing&&!this.__xrViewportPresenting&&window.requestAnimationFrame(U);for(const U of this.__viewports)U.draw()};this.__continuousDrawing=!0,window.requestAnimationFrame(U)}stopContinuousDrawing(){this.__continuousDrawing=!1}toggleContinuousDrawing(){this.__continuousDrawing?this.stopContinuousDrawing():this.startContinuousDrawing()}drawItemChanged(){for(const U of this.__viewports)U.invalidateGeomDataBuffer();this.requestRedraw()}requestRedraw(){if(this.__redrawRequested||this.__continuousDrawing||this.__xrViewportPresenting||this.__drawSuspensionLevel>0)return!1;return window.requestAnimationFrame((()=>{this.__redrawRequested=!1;for(const U of this.__viewports)U.draw()})),this.__redrawRequested=!0,!0}forceRender(){if(this.__redrawRequested){this.__redrawRequested=!1;for(const U of this.__viewports)U.draw()}else console.warn("@GlBaseRenderer#forceRender - Scene is not dirty")}bindGLBaseRenderer(U){U.gl=this.__gl,U.shaderopts={directives:this.directives};const F=this.__gl;U.viewports&&1!=U.viewports.length?(U.bindRendererUnifs=e=>{const{cameraMatrix:t}=e;t&&F.uniformMatrix4fv(t.location,!1,U.cameraMatrix.asArray())},U.bindViewports=(e,t)=>{U.viewports.forEach(((U,Q)=>{let l=U.region;F.viewport(l[0],l[1],l[2],l[3]);const{viewMatrix:n,projectionMatrix:a,eye:d,isOrthographic:i}=e;n&&F.uniformMatrix4fv(n.location,!1,U.viewMatrix.asArray()),a&&F.uniformMatrix4fv(a.location,!1,U.projectionMatrix.asArray()),d&&F.uniform1i(d.location,Q),i&&F.uniform1i(i.location,U.isOrthographic),t()}))}):(U.bindRendererUnifs=e=>{const{cameraMatrix:t,viewMatrix:Q,projectionMatrix:l,eye:n,isOrthographic:a}=e;t&&F.uniformMatrix4fv(t.location,!1,U.cameraMatrix.asArray());const d=U.viewports[0];Q&&F.uniformMatrix4fv(Q.location,!1,d.viewMatrix.asArray()),l&&F.uniformMatrix4fv(l.location,!1,d.projectionMatrix.asArray()),n&&F.uniform1i(n.location,0),a&&F.uniform1i(a.location,d.isOrthographic)},U.bindViewports=(U,F)=>F())}drawScene(U){U.directives=[...this.directives,"#define DRAW_COLOR"],U.shaderopts.directives=U.directives;for(const F in this.__passes){const e=this.__passes[F];for(const F of e)F.enabled&&F.draw(U)}}drawHighlightedGeoms(U){this.bindGLBaseRenderer(U),U.directives=[...this.directives,"#define DRAW_HIGHLIGHT"],U.shaderopts.directives=U.directives;for(const F in this.__passes){const e=this.__passes[F];for(const F of e)F.enabled&&F.drawHighlightedGeoms(U)}}drawSceneGeomData(U,F=255){this.bindGLBaseRenderer(U),U.directives=[...this.directives,"#define DRAW_GEOMDATA"],U.shaderopts.directives=U.directives,U.floatGeomBuffer=this.floatGeomBuffer;for(const e in this.__passes){if(0==(Number.parseInt(e)&F))continue;const t=this.__passes[e];for(const F of t)F.enabled&&F.drawGeomData(U)}}static registerPass(U,F){LQ[F]||(LQ[F]=[]),LQ[F].push(U)}destroy(){this.resizeObserver.disconnect()}}class _Q extends tt{constructor(U){super(U,"HighlightsShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;    //(location = 0)\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  v_texCoord = positions.xy+0.5;\n  gl_Position = vec4(positions.xy*2.0, 0.0, 1.0);\n}\n\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform float outlineThickness;\nuniform sampler2D highlightDataTexture;\nuniform vec2 highlightDataTextureSize;\n\nvarying vec2 v_texCoord;\n\nvec3 SobelFactor(vec3 ldc, vec3 ldl, vec3 ldr, vec3 ldu, vec3 ldd)\n{\n  return abs(ldl - ldc) +\n      abs(ldr - ldc) +\n      abs(ldu - ldc) +\n      abs(ldd - ldc);\n}\n\n// https://github.com/ssell/UnitySobelOutline/blob/2e1f4a5b4e703ae2c96aaf08d5518ce58abbaab9/Assets/Resources/Shaders/SobelOutlineHLSL.shader#L18\nvec4 SobelSample(vec2 uv)\n{\n  vec3 offset = vec3((1.0 / highlightDataTextureSize.x), (1.0 / highlightDataTextureSize.y), 0.0) * outlineThickness;\n\n  vec4 pixelCenter = texture2D(highlightDataTexture, uv);\n  vec3 pixelLeft   = texture2D(highlightDataTexture, uv - offset.xz).rgb;\n  vec3 pixelRight  = texture2D(highlightDataTexture, uv + offset.xz).rgb;\n  vec3 pixelUp     = texture2D(highlightDataTexture, uv + offset.zy).rgb;\n  vec3 pixelDown   = texture2D(highlightDataTexture, uv - offset.zy).rgb;\n\n  vec3 sobelNormalVec = SobelFactor(pixelCenter.rgb, pixelLeft, pixelRight, pixelUp, pixelDown);\n  \n  float sobelNormal = sobelNormalVec.x + sobelNormalVec.y + sobelNormalVec.z;\n  \n  float outlineDepthMultiplier = 10.0;\n  float outlineDepthBias = 2.5;\n  sobelNormal = pow(sobelNormal * outlineDepthMultiplier, outlineDepthBias);\n\n  sobelNormal = clamp(sobelNormal, 0.0, 1.0);\n\n  \n  float pixelCenterWeight = length(pixelCenter.rgb) > 0.0 ? 1.0 : 0.0;\n  float pixelLeftWeight   = length(pixelLeft) > 0.0 ? 1.0 : 0.0;\n  float pixelRightWeight  = length(pixelRight) > 0.0 ? 1.0 : 0.0;\n  float pixelUpWeight     = length(pixelUp) > 0.0 ? 1.0 : 0.0;\n  float pixelDownWeight   = length(pixelDown) > 0.0 ? 1.0 : 0.0;\n  \n  // Weight each neighbors contribution to the current pixel color.\n  pixelCenter.rgb = pixelCenter.rgb * pixelCenterWeight;\n  pixelLeft   *= pixelLeftWeight;\n  pixelRight  *= pixelRightWeight;\n  pixelUp     *= pixelUpWeight;\n  pixelDown   *= pixelDownWeight;\n\n  // Add all the weighted contributions, and then normalize.\n  vec3 outlineColor = pixelCenter.rgb + pixelLeft + pixelRight +  pixelUp + pixelDown;\n  outlineColor /= pixelCenterWeight + pixelLeftWeight + pixelRightWeight + pixelUpWeight + pixelDownWeight;\n\n  return mix(vec4(outlineColor, sobelNormal), pixelCenter, pixelCenter.a);\n}\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\nvoid main(void) {\n    \n  vec4 outlineColor = SobelSample(v_texCoord);\n  \n  if (outlineColor.a > 0.0001) {\n#ifndef ENABLE_ES3\n    gl_FragColor = outlineColor;\n#else\n    fragColor = outlineColor;\n#endif\n  }\n  else {\n      discard;\n  }\n}\n\n")}}class wQ extends tt{constructor(U){super(U,"SilhouetteShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\nattribute vec3 positions;    //(location = 0)\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  v_texCoord = positions.xy+0.5;\n  gl_Position = vec4(positions.xy*2.0, 0.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\n#ifndef ENABLE_ES3\n#extension GL_EXT_frag_depth: enable\n#endif\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D colorTexture;\nuniform sampler2D depthTexture;\nuniform vec2 screenSize;\nuniform vec2 depthRange;\n\nuniform float outlineThickness;\nuniform color outlineColor;\nuniform float outlineSensitivity;\nuniform float outlineDepthBias;\n\nvarying vec2 v_texCoord;\n\n// http://web.archive.org/web/20130416194336/http://olivers.posterous.com/linear-depth-in-glsl-for-real\nfloat LinearEyeDepth(float z_b) {\n  float z_n = 2.0 * z_b - 1.0;\n  float z_e = 2.0 * depthRange.x * depthRange.y / (depthRange.y + depthRange.x - z_n * (depthRange.y - depthRange.x));\n  return z_e;\n}\n\nfloat LogEyeDepth(float z_b) {\n  return depthRange.x + ((depthRange.y - depthRange.x) * z_b);\n}\n\n// https://www.vertexfragment.com/ramblings/unity-postprocessing-sobel-outline/#depth-based-outline\n// https://github.com/ssell/UnitySobelOutline/blob/2e1f4a5b4e703ae2c96aaf08d5518ce58abbaab9/Assets/Resources/Shaders/SobelOutlineHLSL.shader\n\nfloat SobelDepth(float ldc, float ldl, float ldr, float ldu, float ldd)\n{\n  return abs(ldl - ldc) +\n      abs(ldr - ldc) +\n      abs(ldu - ldc) +\n      abs(ldd - ldc);\n}\n\nfloat SobelSampleDepth(vec2 uv, vec3 offset)\n{\n  float pixelCenter = LinearEyeDepth(texture2D(depthTexture, uv).r);\n  float pixelLeft   = LinearEyeDepth(texture2D(depthTexture, uv - offset.xz).r);\n  float pixelRight  = LinearEyeDepth(texture2D(depthTexture, uv + offset.xz).r);\n  float pixelUp     = LinearEyeDepth(texture2D(depthTexture, uv + offset.zy).r);\n  float pixelDown   = LinearEyeDepth(texture2D(depthTexture, uv - offset.zy).r);\n\n  float  outlineDepthMultiplier = (1.0 / pixelCenter) * outlineSensitivity;\n\n  return SobelDepth(pixelCenter, pixelLeft, pixelRight, pixelUp, pixelDown) * outlineDepthMultiplier;\n}\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec3 offset = vec3((1.0 / screenSize.x), (1.0 / screenSize.y), 0.0) * outlineThickness;\n  float sobelDepth = SobelSampleDepth(v_texCoord, offset);\n  float sobelValue = pow(sobelDepth, outlineDepthBias);\n\n  float minEdgeValue = 0.25;\n  float maxEdgeValue = 0.55;\n  sobelDepth = smoothstep(minEdgeValue, maxEdgeValue, sobelValue);\n\n#ifdef ENABLE_ES3\n  fragColor = vec4(outlineColor.rgb, sobelDepth);\n#else\n  fragColor = vec4(mix(texture2D(colorTexture, v_texCoord).rgb, outlineColor.rgb, sobelDepth), 1.0);\n#ifdef  GL_EXT_frag_depth\n  gl_FragDepthEXT = texture2D(depthTexture, v_texCoord).r;\n#endif\n#endif\n\n  // float z = texture2D(depthTexture, v_texCoord).r;\n  // float near = depthRange.x * 2.0;    // the near plane\n  // float far = depthRange.y / 2.0;     // the far plane\n  // float c = (2.0 * near) / (far + near - z * (far - near));  // convert to linear values \n  // fragColor = vec4(vec3(c), 1.0);\n\n  \n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}class zQ extends N{constructor(U){super(),this.envMap=U}}const KQ=ze.OPAQUE|ze.TRANSPARENT|ze.OVERLAY;class HQ extends YQ{constructor(U,F={}){super(U,F),this.__glEnvMap=null,this.__rayCastRenderTarget=null,this.__backgroundMapShader=null,this.__backgroundMapShaderBinding=null,this.__rayCastRenderTargetProjMatrix=new h,this.__exposure=1,this.__tonemap=!0,this.__gamma=2.2,this.__displayEnvironment=!0,this.__debugMode=0,this._planeDist=0,this.__cutPlaneNormal=new i(1,0,0),this.rayCastDist=0,this.rayCastArea=0;const e=this.__gl;this.highlightsShader=new _Q(e),this.silhouetteShader=new wQ(e),this.highlightOutlineThickness=1.5,this.outlineThickness=0,this.outlineColor=new B(.15,.15,.15,1),this.outlineSensitivity=2,this.outlineDepthBias=.7,this.__debugTextures=[void 0],this.addShaderPreprocessorDirective("ENABLE_INLINE_GAMMACORRECTION"),F.disableTextures||this.addShaderPreprocessorDirective("ENABLE_TEXTURES"),F.debugGeomIds&&this.addShaderPreprocessorDirective("DEBUG_GEOM_ID")}__bindEnvMap(U){const F=this.__gl;if(!(U instanceof qF)){const e=U;if(this.__glBackgroundMap=e.getMetadata("gltexture"),this.__glBackgroundMap||("FLOAT"===e.type?this.__glBackgroundMap=new Bt(this.__gl,e):this.__glBackgroundMap=new Ae(this.__gl,e)),this.__glBackgroundMap.on("loaded",(()=>{this.requestRedraw()})),this.__glBackgroundMap.on("updated",(()=>{this.requestRedraw()})),!this.__backgroundMapShader){F.__quadVertexIdsBuffer||F.setupInstancedQuad(),this.__backgroundMapShader=new Jt(this.__gl);const U=this.__backgroundMapShader.compileForTarget();this.__backgroundMapShaderBinding=Rt(this.__gl,U.attrs,F.__quadattrbuffers,F.__quadIndexBuffer)}return}if("webgl2"!==F.name)return;this.__glEnvMap=U.getMetadata("gltexture"),this.__glEnvMap||"FLOAT"===U.type&&(this.addShaderPreprocessorDirective("ENABLE_PBR"),this.__glEnvMap=new Zt(this,U)),this.__glEnvMap.on("loaded",(U=>{this.requestRedraw()})),this.__glEnvMap.on("updated",(U=>{this.requestRedraw()}));const e=new zQ(this.__glEnvMap);this.emit("envMapAssigned",e)}setScene(U){const F=U.envMapParam;null!=F.value&&this.__bindEnvMap(F.value),F.on("valueChanged",(()=>{this.__bindEnvMap(F.value)}));const e=U.displayEnvMapParam;this.__displayEnvironment=e.value,e.on("valueChanged",(()=>{this.__displayEnvironment=e.value,this.requestRedraw()})),super.setScene(U)}addViewport(U){return super.addViewport(U)}get exposure(){return this.__exposure}set exposure(U){this.__exposure=U,this.requestRedraw()}get gamma(){return this.__gamma}set gamma(U){this.__gamma=U,this.requestRedraw()}get displayEnvironment(){return this.__displayEnvironment}set displayEnvironment(U){this.__displayEnvironment=U,this.requestRedraw()}raycastWithRay(U,F,e=.01,t=KQ){const Q=new c;return Q.setLookAt(U.start,U.start.add(U.dir),new i(0,0,1)),this.raycast(Q,U,F,e,t)}raycastWithXfo(U,F,e=.01,t=KQ){const Q=new Z(U.tr,U.ori.getZaxis().negate());return this.raycast(U,Q,F,e,t)}raycast(U,F,e,t=.01,Q=KQ){var l;const n=this.__gl;this.__rayCastRenderTarget||(this.__rayCastRenderTarget=new lt(n,{type:"FLOAT",format:"RGBA",filter:"NEAREST",width:3,height:3,numColorChannels:1})),this.rayCastDist==e&&this.rayCastArea==t||(this.__rayCastRenderTargetProjMatrix.setOrthographicMatrix(-.5*t,.5*t,-.5*t,.5*t,0,e),this.rayCastDist=e,this.rayCastArea=t);const a={cameraMatrix:U.toMat4(),viewports:[{region:[0,0,3,3],viewMatrix:U.inverse().toMat4(),projectionMatrix:this.__rayCastRenderTargetProjMatrix,isOrthographic:!0}]};this.__rayCastRenderTarget.bindForWriting(a,!0),n.enable(n.CULL_FACE),n.enable(n.DEPTH_TEST),n.depthFunc(n.LEQUAL),n.depthMask(!0),this.drawSceneGeomData(a,Q),n.finish(),this.__rayCastRenderTarget.unbindForWriting(),this.__rayCastRenderTarget.bindForReading();const d=new Float32Array(36);n.readPixels(0,0,3,3,n.RGBA,n.FLOAT,d),this.__rayCastRenderTarget.unbindForReading();const i=[4,3,5,1,7];let s;for(const U of i)if(0!=d[4*U+3]){s=d.subarray(4*U,4*U+4);break}if(!s)return null;const R=63&Math.round(s[0]),B=null===(l=this.getPass(R))||void 0===l?void 0:l.getGeomItemAndDist(s);if(B){const U=F.start.add(F.dir.scale(B.dist));return{pointerRay:F,intersectionPos:U,geomItem:B.geomItem,dist:B.dist,geomData:s}}return null}raycastCluster(U,F,e,t=.01,Q=KQ){const l=this.__gl;this.__rayCastRenderTarget||(this.__rayCastRenderTarget=new lt(l,{type:"FLOAT",format:"RGBA",filter:"NEAREST",width:3,height:3,numColorChannels:1}),this.__rayCastRenderTargetProjMatrix=new h),this.rayCastDist==e&&this.rayCastArea==t||(this.__rayCastRenderTargetProjMatrix.setOrthographicMatrix(-.5*t,.5*t,-.5*t,.5*t,0,e),this.rayCastDist=e,this.rayCastArea=t);const n={};n.viewports.push({region:[0,0,3,3],viewMatrix:U.inverse().toMat4(),projectionMatrix:this.__rayCastRenderTargetProjMatrix,isOrthographic:!0}),n.cameraMatrix=U.toMat4(),this.__rayCastRenderTarget.bindForWriting(n,!0),l.enable(l.CULL_FACE),l.enable(l.DEPTH_TEST),l.depthFunc(l.LEQUAL),l.depthMask(!0),this.drawSceneGeomData(n,Q),l.finish(),this.__rayCastRenderTarget.unbindForWriting(),this.__rayCastRenderTarget.bindForReading();const a=new Float32Array(36);l.readPixels(0,0,3,3,l.RGBA,l.FLOAT,a),this.__rayCastRenderTarget.unbindForReading();const d=[];for(let U=0;U<9;U++)if(0!=a[4*U+3]){const e=a.subarray(4*U,4*U+4),t=63&Math.round(e[0]),Q=this.getPass(t);if(Q){const U=Q.getGeomItemAndDist(e);if(U){const t=F.start.add(F.dir.scale(U.dist));d.push({ray:F,intersectionPos:t,geomItem:U.geomItem,dist:U.dist,geomData:e})}}}return d}drawBackground(U){if(this.__glBackgroundMap&&this.__backgroundMapShader&&this.__backgroundMapShaderBinding){if(!this.__glBackgroundMap.isLoaded())return;const F=this.__gl;F.depthMask(!1),this.__backgroundMapShader.bind(U);const e=U.unifs;this.__glBackgroundMap.bindToUniform(U,e.backgroundImage),this.__backgroundMapShaderBinding.bind(U),F.drawQuad()}else this.__glEnvMap&&this.__glEnvMap.draw&&this.__glEnvMap.draw(U)}bindGLRenderer(U){super.bindGLBaseRenderer(U),U.envMap=this.__glEnvMap,U.exposure=this.__exposure,U.gamma=this.__gamma}drawScene(U){this.bindGLRenderer(U),this.__displayEnvironment&&this.drawBackground(U),super.drawScene(U),this.emit("redrawOccurred")}}class PQ extends tt{constructor(U){super(U,"BillboardShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 cameraMatrix;\n\nimport 'GLSLUtils.glsl'\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\n// A sorted attribute of instance Ids so we draw from back to front.\ninstancedattribute float instanceIds;\n\nimport 'transpose.glsl'\nimport 'imageAtlas.glsl'\n\nuniform sampler2D atlasBillboards_layout;\nuniform vec4 atlasBillboards_desc;\n\nuniform sampler2D instancesTexture;\nuniform int instancesTextureSize;\nuniform int passId;\n\nconst int cols_per_instance = 7;\n\nmat4 getMatrix(sampler2D texture, int textureSize, int index) {\n  // Unpack 3 x 4 matix columns into a 4 x 4 matrix.\n  vec4 col0 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 0);\n  vec4 col1 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 1);\n  vec4 col2 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 2);\n  mat4 result = mat4(col0, col1, col2, vec4(0.0, 0.0, 0.0, 1.0));\n  return transpose(result);\n  // return mat4(1.0);\n}\n\nmat4 getModelMatrix(int id) {\n  return getMatrix(instancesTexture, instancesTextureSize, id);\n}\nvec4 getInstanceData(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 3);\n}\nvec4 getPivot(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 4);\n}\nvec4 getTintColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 5);\n}\n\n#else\n\nuniform vec4 atlasBillboards_desc;\n\nuniform mat4 modelMatrix;\nuniform vec2 pivot;\nuniform vec4 billboardData;\nuniform vec4 tintColor;\nuniform vec4 layoutData;\n\n#endif\n\nuniform int inVR;\n\nmat4 calcLookAtMatrix(vec3 origin, vec3 target, float roll) {\n  // vec3 rr = vec3(sin(roll), 0.0, cos(roll));\n  vec3 rr = vec3(0.0, 0.0, 1.0);\n  vec3 ww = normalize(target - origin);\n  vec3 uu = normalize(cross(rr, ww));\n  vec3 vv = normalize(cross(ww, uu));\n\n  return mat4(vec4(uu, 0.0), vec4(vv, 0.0), vec4(ww, 0.0), vec4(origin, 1.0));\n}\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\n/* VS Outputs */\nvarying float v_instanceID;\nvarying vec2 v_texCoord;\nvarying float v_alpha;\nvarying vec4 v_tint;\nvarying vec3 v_viewPos;\n\nvoid main(void) {\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\n  int instanceID = int(instanceIds);\n  v_instanceID = float(instanceID) + 0.25;\n\n  mat4 modelMatrix = getModelMatrix(instanceID);\n  vec2 pivot = getPivot(instanceID).xy;\n  vec4 billboardData = getInstanceData(instanceID);\n  vec4 layoutData = fetchTexel(atlasBillboards_layout, int(atlasBillboards_desc.z), int(billboardData.z));\n  v_tint = getTintColor(instanceID);\n\n#else\n\n  v_tint = tintColor;\n\n#endif\n\n  vec2 quadVertex = getQuadVertexPositionFromID();\n  \n  vec2 pos = quadVertex + vec2(0.5, 0.0) - pivot;\n  v_texCoord = vec2(quadVertex.x, -quadVertex.y) + 0.5;\n  v_alpha = billboardData.w;\n  v_texCoord *= layoutData.zw;\n  v_texCoord += layoutData.xy;\n\n  float scl = billboardData.x;\n  float width = layoutData.z * atlasBillboards_desc.x * scl;\n  float height = layoutData.w * atlasBillboards_desc.y * scl;\n  int flags = int(billboardData.y);\n\n  // Use cross platform bit flags methods\n  bool alignedToCamera = testFlag(flags, 4); // flag = 1<<2\n  bool drawOnTop = testFlag(flags, 8); // flag = 1 << 3\n  bool fixedSizeOnscreen = testFlag(flags, 16); // flag = 1 << 4\n\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n\n  // Note: items in front of the camera will have a negative value here.\n  float sc = 1.0;\n  if (fixedSizeOnscreen) {\n    sc = -modelViewMatrix[3][2];;\n  }\n  \n  mat4 modelViewProjectionMatrix;\n  if (alignedToCamera) {\n    if (inVR == 0) {\n      gl_Position = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n      gl_Position += vec4(pos.x * width * sc, (pos.y + 0.5) * height * sc, 0.0, 0.0);\n      v_viewPos = gl_Position.xyz;\n      gl_Position = projectionMatrix * gl_Position;\n    } else {\n      vec3 cameraPos = vec3(cameraMatrix[3][0], cameraMatrix[3][1], cameraMatrix[3][2]);\n      vec3 billboardPos = vec3(modelMatrix[3][0], modelMatrix[3][1], modelMatrix[3][2]);\n      mat4 lookAt = calcLookAtMatrix(billboardPos, cameraPos, 0.0);\n      mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * lookAt;\n      gl_Position = modelViewProjectionMatrix * vec4(pos.x * width * sc, (pos.y + 0.5) * height * sc, 0.0, 1.0);\n      v_viewPos = (modelViewMatrix * vec4(pos.x * width * sc, (pos.y + 0.5) * height * sc, 0.0, 1.0)).xyz;\n    }\n  }\n  else {\n    modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;\n    gl_Position = modelViewProjectionMatrix * vec4(pos.x * width, (pos.y + 0.5) * height, 0.0, 1.0);\n    v_viewPos = (modelViewMatrix * vec4(pos.x * width, (pos.y + 0.5) * height, 0.0, 1.0)).xyz;\n  }\n\n  // Use cross platform bit flags methods\n  if (drawOnTop) {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.w, 0.5);\n  }\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nimport 'imageAtlas.glsl'\n\nuniform sampler2D atlasBillboards;\n\n/* VS Outputs */\nvarying float v_instanceID;\nvarying vec2 v_texCoord;\nvarying float v_alpha;\nvarying vec4 v_tint;\nvarying vec3 v_viewPos;\n\nuniform sampler2D instancesTexture;\nuniform int instancesTextureSize;\n\n#if defined(DRAW_GEOMDATA)\n  uniform int isOrthographic;\n  import 'surfaceGeomData.glsl'\n#endif // DRAW_GEOMDATA\n\nconst int cols_per_instance = 7;\n\nvec4 getHilightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 6);\n}\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  int instanceID = int(v_instanceID);\n  vec4 imageColor = texture2D(atlasBillboards, v_texCoord) * v_tint;\n  imageColor.a *= v_alpha;\n  if(imageColor.a < 0.1)\n    discard;\n\n#if defined(DRAW_COLOR)\n  fragColor = imageColor;\n  // fragColor.r = 1.0;\n  // fragColor.a = 1.0;\n#elif defined(DRAW_GEOMDATA)\n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_instanceID, isOrthographic);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = getHilightColor(instanceID);\n  // Skip unhilighting labels.\n  if(fragColor.r < 0.001 && fragColor.g < 0.001 && fragColor.b < 0.001)\n    discard;\n#endif // DRAW_HIGHLIGHT\n  \n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}class OQ extends tt{constructor(U){super(U,"EnvProjectionShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;    //(location = 0)\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform vec3 projectionCenter;\n\nimport 'inverse.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\n \nvoid main()\n{\n  int drawItemId = getDrawItemId();\n  vec4 pos = vec4(positions, 1.);\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;\n\n  gl_Position = modelViewProjectionMatrix * pos;\n\n  vec4 worldPos = modelMatrix * pos;\n  v_worldDir = worldPos.xyz - projectionCenter;\n}\n\n")}}new qU("EnvProjectionShader_template").addParameter(new cU("projectionCenter",new i(0,0,1.7)));class jQ extends tt{constructor(U){super(U,"FatLinesShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\ninstancedattribute vec2 segmentIndices;\nattribute float vertexIDs;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\nuniform int drawItemId;\nint getDrawItemId() {\n  return drawItemId;\n}\n\nuniform sampler2D positionsTexture;\nuniform int positionsTextureSize;\n\nuniform float LineThickness;\nuniform float Overlay;\n\nimport 'calcFatLinesViewPos.glsl'\n\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\nvarying vec2 v_texCoord;\n\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying float v_drawItemID;\nvarying vec3 v_worldPos;\n\nvoid main(void) {\n\n  int drawItemId = getDrawItemId();\n  v_drawItemId = float(drawItemId);\n  v_geomItemData = getInstanceData(drawItemId);\n\n  int vertexID = int(vertexIDs);\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  vec3 pos;\n\n  #if defined(DRAW_COLOR)\n    v_viewPos       = calcFatLinesViewPos(vertexID, modelViewMatrix, v_viewNormal, v_texCoord, pos);\n  #elif defined(DRAW_GEOMDATA)\n    vec3  viewNormal;\n    vec2  texCoord;\n    v_viewPos       = calcFatLinesViewPos(vertexID, modelViewMatrix, viewNormal, texCoord, pos);\n    v_drawItemID = float(getDrawItemId());\n    v_worldPos      = (modelMatrix * vec4(pos, 1.0)).xyz;\n  #endif\n\n  gl_Position     = projectionMatrix * vec4(v_viewPos, 1.0);\n  if (Overlay > 0.0) {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.w, Overlay);\n  }\n\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform color BaseColor;\nuniform mat4 cameraMatrix;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\n/* VS Outputs */\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\nvarying vec2 v_texCoord;\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying float v_drawItemID;\nvarying vec3 v_worldPos;\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'GLSLBits.glsl'\n\nuniform int floatGeomBuffer;\nuniform int passId;\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getCutaway(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);\n}\n#else\n\nuniform vec4 cutawayData;\n\nvec4 getCutaway(int id) {\n  return cutawayData;\n}\n\n#endif\n\n#if defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n#if defined(DRAW_COLOR)\n  int debugLevel = 0;\n  if (debugLevel == 0) {\n\n    vec3 viewVector = mat3(cameraMatrix) * normalize(-v_viewPos);\n    vec3 normal = mat3(cameraMatrix) * v_viewNormal;\n    float NdotV = dot(normalize(normal), normalize(viewVector));\n\n    // Modulate the lighting using the texture coord so the line looks round.\n    NdotV *= cos((v_texCoord.x - 0.5) * 2.0);\n\n    vec4 color = BaseColor * NdotV;\n    fragColor = vec4(color.rgb, BaseColor.a);\n  }\n  else {\n    fragColor = vec4(v_texCoord.x, 0.0, 0.0, 1.0);\n  }\n#elif defined(DRAW_GEOMDATA)\n  int drawItemId = int(v_drawItemId + 0.5);\n  int flags = int(v_geomItemData.r + 0.5);\n // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {\n    vec4 cutAwayData  = getCutaway(drawItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (cutaway(v_worldPos, planeNormal, planeDist)) {\n      discard;\n      return;\n    }\n  }\n  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n    discard;\n    return;\n  }\n\n  float dist = length(v_viewPos);\n\n  if (floatGeomBuffer != 0) {\n    fragColor.r = float(passId); \n    fragColor.g = float(v_drawItemID);\n    fragColor.b = 0.0;// TODO: store poly-id or something.\n    fragColor.a = dist;\n  }\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_drawItemId);\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}bind(U,F){return!!super.bind(U,F)&&(U.supportsInstancing=!1,!0)}static supportsInstancing(){return!1}static getMaterialTemplate(){return AQ}}const AQ=new te("FatLinesShader_template");n.register("FatLinesShader",jQ);class qQ extends tt{constructor(U){super(U,"FlatSurfaceShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\nimport 'GLSLUtils.glsl'\n\nimport 'drawItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  v_drawItemId = float(drawItemId);\n  v_geomItemData  = getInstanceData(drawItemId);\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n\n  vec4 pos = vec4(positions, 1.);\n  vec4 viewPos = (modelViewMatrix * pos);\n  gl_Position = projectionMatrix * viewPos;\n\n  v_viewPos = viewPos.xyz;\n#ifdef ENABLE_TEXTURES\n  v_textureCoord = texCoords;\n  v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y\n#endif\n\n  v_worldPos      = (modelMatrix * pos).xyz;\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\n\n#ifndef ENABLE_MULTI_DRAW\n\nuniform color BaseColor;\n\n#ifdef ENABLE_TEXTURES\nuniform sampler2D BaseColorTex;\nuniform int BaseColorTexType;\n#endif\n\n#endif // ENABLE_MULTI_DRAW\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n\nuniform color cutColor;\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getCutaway(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);\n}\n\n#else\n\nuniform vec4 cutawayData;\n\nvec4 getCutaway(int id) {\n  return cutawayData;\n}\n\n#endif\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\n#if defined(DRAW_GEOMDATA)\n  uniform int isOrthographic;\n  import 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  int drawItemId = int(v_drawItemId + 0.5);\n  int flags = int(v_geomItemData.r + 0.5);\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) \n  {\n    vec4 cutAwayData   = getCutaway(drawItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (cutaway(v_worldPos, planeNormal, planeDist)) {\n      discard;\n      return;\n    }\n  }\n\n  //////////////////////////////////////////////\n  // Material\n#ifdef ENABLE_MULTI_DRAW\n\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 baseColor = toLinear(getMaterialValue(materialCoords, 0));\n\n#else // ENABLE_MULTI_DRAW\n\n#ifndef ENABLE_TEXTURES\n  vec4 baseColor = toLinear(BaseColor);\n#else\n  vec4 baseColor = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);\n#endif // ENABLE_TEXTURES\n\n#endif // ENABLE_MULTI_DRAW\n\n  if (baseColor.a < 0.001) discard;\n\n#if defined(DRAW_COLOR)\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {\n    if (!gl_FrontFacing) {\n#ifdef ENABLE_ES3\n      fragColor = cutColor;\n#else\n      gl_FragColor = cutColor;\n#endif\n      return;\n    }\n  }\n\n  //////////////////////////////////////////////\n  fragColor = baseColor;\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb);\n#endif\n\n#elif defined(DRAW_GEOMDATA)\n\n  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n    discard;\n    return;\n  }\n\n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId,v_drawItemId, isOrthographic);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_drawItemId);\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}bind(U,F){super.bind(U,F);const e=this.__gl;return e.disable(e.CULL_FACE),!0}unbind(U){super.unbind(U);const F=this.__gl;return F.enable(F.CULL_FACE),!0}static getPackedMaterialData(U){const F=new Float32Array(4),e=U.getParameter("BaseColor").value;return F[0]=e.r,F[1]=e.g,F[2]=e.b,F[3]=e.a,F}static getMaterialTemplate(){return $Q}}const $Q=new le("FlatSurfaceShader_template");n.register("FlatSurfaceShader",qQ);class Ul extends tt{constructor(U){super(U,"LinesShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\nattribute vec3 positionsNext;\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\n#ifdef ENABLE_MULTI_DRAW\nimport 'materialparams.glsl'\n#else\nuniform float Overlay;\n#endif\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_worldPos;\nvarying vec3 v_nextVertexDist;\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  v_drawItemId = float(drawItemId);\n  v_geomItemData  = getInstanceData(drawItemId);\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  vec4 viewPos = modelViewMatrix * vec4(positions, 1.0);\n  vec4 viewPosNext = modelViewMatrix * vec4(positionsNext, 1.0);\n\n#ifdef ENABLE_ES3\n  float nextVertexDist = length(viewPosNext.xyz - viewPos.xyz);\n  if (imod(gl_VertexID, 2) == 0) {\n    v_nextVertexDist.x = nextVertexDist;\n    v_nextVertexDist.y = 0.0;\n  } else {\n    v_nextVertexDist.x = 0.0;\n    v_nextVertexDist.y = nextVertexDist;\n  }\n  v_nextVertexDist.z = float(gl_VertexID);\n#endif\n\n  v_viewPos = viewPos.xyz;\n  gl_Position = projectionMatrix * viewPos;\n    \n\n  //////////////////////////////////////////////\n  // Overlay\n\n#ifdef ENABLE_MULTI_DRAW\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 materialValue1 = getMaterialValue(materialCoords, 1);\n  int maintainScreenSize = int(materialValue1.x + 0.5);\n  float overlay = materialValue1.y;\n#else\n  float overlay = Overlay;\n#endif\n\n#if defined(DRAW_GEOMDATA)\n  gl_Position.z = mix(gl_Position.z, -gl_Position.w, mix(overlay, 1.0, 0.0001));\n#else\n  gl_Position.z = mix(gl_Position.z, -gl_Position.w, overlay);\n#endif\n\n  //////////////////////////////////////////////\n  \n  \n  vec4 pos = vec4(positions, 1.);\n  v_worldPos      = (modelMatrix * pos).xyz;\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'materialparams.glsl'\n\nuniform int occluded;\n\n#ifndef ENABLE_MULTI_DRAW\n\nuniform color BaseColor;\nuniform float Opacity;\n\nuniform float StippleScale;\nuniform float StippleValue;\nuniform float OccludedStippleValue;\n\n#endif // ENABLE_MULTI_DRAW\n\n#if defined(DRAW_GEOMDATA)\n\nuniform int floatGeomBuffer;\nuniform int passId;\n\nimport 'GLSLBits.glsl'\n\n#elif defined(DRAW_HIGHLIGHT)\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getHighlightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);\n}\n#else // ENABLE_FLOAT_TEXTURES\n\nuniform vec4 highlightColor;\n\nvec4 getHighlightColor() {\n  return highlightColor;\n}\n\n#endif // ENABLE_FLOAT_TEXTURES\n\n#endif // DRAW_HIGHLIGHT\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getCutaway(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);\n}\n\n#else\n\nuniform vec4 cutawayData;\n\nvec4 getCutaway(int id) {\n  return cutawayData;\n}\n\n#endif\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_worldPos;\nvarying vec3 v_nextVertexDist;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  int drawItemId = int(v_drawItemId + 0.5);\n  int flags = int(v_geomItemData.r + 0.5);\n\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) \n  {\n    vec4 cutAwayData   = getCutaway(drawItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (cutaway(v_worldPos, planeNormal, planeDist)) {\n      discard;\n      return;\n    }\n  }\n\n  //////////////////////////////////////////////\n  // Material\n\n#ifdef ENABLE_MULTI_DRAW\n\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 BaseColor = getMaterialValue(materialCoords, 0);\n  vec4 matValue1 = getMaterialValue(materialCoords, 1);\n  vec4 matValue2 = getMaterialValue(materialCoords, 2);\n  float Opacity  = matValue1.r;\n\n  float StippleScale = matValue1.b;\n  float StippleValue = matValue1.a;\n  float OccludedStippleValue = matValue2.r;\n#endif // ENABLE_MULTI_DRAW\n\n  ///////////////////\n  // Stippling\n  float stippleValue = occluded == 0 ? StippleValue : OccludedStippleValue;\n#ifdef ENABLE_ES3 // No stippling < es3 \n  if (stippleValue > 0.0) {\n    // Note: a value of 0.0, means no stippling (solid). A value of 1.0 means invisible\n    float dist = -v_viewPos.z * StippleScale;\n    float nextVertexDist = imod(int(floor(v_nextVertexDist.z)), 2) == 0 ? v_nextVertexDist.x : v_nextVertexDist.y;\n    if (mod(nextVertexDist / dist, 1.0) < stippleValue) {\n      discard;\n      return;\n    }\n  }\n#endif\n\n  //////////////////////////////////////////////\n  // Color\n#if defined(DRAW_COLOR)\n\n  fragColor = BaseColor;\n  fragColor.a *= Opacity;\n\n  \n#ifndef ENABLE_ES3\n  if (occluded == 1) fragColor.a *= 1.0 - stippleValue;\n#endif\n\n  //////////////////////////////////////////////\n  // GeomData\n#elif defined(DRAW_GEOMDATA)\n\n  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n    discard;\n    return;\n  }\n  \n  float viewDist = length(v_viewPos);\n\n  if (floatGeomBuffer != 0) {\n    fragColor.r = float(passId); \n    fragColor.g = float(v_drawItemId);\n    // Note: to make lines visually stand out from triangles\n    // this value is 0.0 in the surface shaders.\n    fragColor.b = 1.0;// TODO: store segment-id or something.\n    fragColor.a = viewDist;\n  } else {\n    ///////////////////////////////////\n    // UInt8 buffer\n    fragColor.r = mod(v_drawItemId, 256.) / 256.;\n    fragColor.g = (floor(v_drawItemId / 256.) + (float(passId) * 64.)) / 256.;\n\n    // encode the dist as a 16 bit float\n    vec2 float16bits = encode16BitFloatInto2xUInt8(viewDist);\n    fragColor.b = float16bits.x;\n    fragColor.a = float16bits.y;\n  }\n\n  //////////////////////////////////////////////\n  // Highlight\n#elif defined(DRAW_HIGHLIGHT)\n  \n  fragColor = getHighlightColor(drawItemId);\n\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}static getPackedMaterialData(U){const F=new Float32Array(12),e=U.getParameter("BaseColor").value;return F[0]=e.r,F[1]=e.g,F[2]=e.b,F[3]=e.a,F[4]=U.getParameter("Opacity").value,F[5]=U.getParameter("Overlay").value,F[6]=U.getParameter("StippleScale").value,F[7]=U.getParameter("StippleValue").value,F[8]=U.getParameter("OccludedStippleValue").value,F}static getMaterialTemplate(){return Fl}}const Fl=new ne("LinesShader_template");n.register("LinesShader",Ul);class el extends tt{constructor(U){super(U,"PointsShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\n#ifdef ENABLE_MULTI_DRAW\nimport 'materialparams.glsl'\n#else\nuniform float PointSize;\nuniform float Overlay;\n#endif\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  v_drawItemId = float(drawItemId);\n  v_geomItemData  = getInstanceData(drawItemId);\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  \n  vec4 viewPos = modelViewMatrix * vec4(positions, 1.);\n  gl_Position = projectionMatrix * viewPos;\n  \n\n  //////////////////////////////////////////////\n  // Material\n#ifdef ENABLE_MULTI_DRAW\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 materialValue1 = getMaterialValue(materialCoords, 1);\n  int maintainScreenSize = int(materialValue1.x + 0.5);\n  float pointSize = materialValue1.x;\n  float overlay = materialValue1.y;\n#else\n  float pointSize = PointSize;\n  float overlay = Overlay;\n#endif\n  //////////////////////////////////////////////\n\n  // Note: as of 22/01/2021 gl_PointSize has stopped working again...\n  gl_PointSize = pointSize;\n\n#if defined(DRAW_GEOMDATA)\n  // Make the geom data point size at least 8 pixels across, else its impossible to hit.\n  gl_PointSize = max(8.0, pointSize);\n#endif\n  gl_Position.z = mix(gl_Position.z, -gl_Position.w, overlay);\n\n  \n  v_viewPos = -viewPos.xyz;\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\n#ifndef ENABLE_MULTI_DRAW\n\nuniform color BaseColor;\n\n#endif\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'materialparams.glsl'\n\n#if defined(DRAW_GEOMDATA)\n\nuniform int floatGeomBuffer;\nuniform int passId;\n\nimport 'GLSLBits.glsl'\n\n#elif defined(DRAW_HIGHLIGHT)\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getHighlightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);\n}\n#else // ENABLE_FLOAT_TEXTURES\n\nuniform vec4 highlightColor;\n\nvec4 getHighlightColor() {\n  return highlightColor;\n}\n\n#endif // ENABLE_FLOAT_TEXTURES\n\n#endif // DRAW_HIGHLIGHT\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\n/* VS Outputs */\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  //////////////////////////////////////////////\n  // Color\n#if defined(DRAW_COLOR)\n\n#ifdef ENABLE_MULTI_DRAW\n\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 baseColor = getMaterialValue(materialCoords, 0);\n  vec4 matValue1 = getMaterialValue(materialCoords, 1);\n  float pointSize       = baseColor.a * matValue1.r;\n  float overlay      = matValue1.g;\n\n#else // ENABLE_MULTI_DRAW\n\n  vec4 baseColor = BaseColor;\n\n#endif // ENABLE_MULTI_DRAW\n\n  fragColor = baseColor;\n\n  //////////////////////////////////////////////\n  // GeomData\n#elif defined(DRAW_GEOMDATA)\n\n  float viewDist = length(v_viewPos);\n\n  if (floatGeomBuffer != 0) {\n    fragColor.r = float(passId); \n    fragColor.g = float(v_drawItemId);\n    fragColor.b = 0.0;// TODO: store poly-id or something.\n    fragColor.a = viewDist;\n  }\n  else {\n    ///////////////////////////////////\n    // UInt8 buffer\n    fragColor.r = mod(v_drawItemId, 256.) / 256.;\n    fragColor.g = (floor(v_drawItemId / 256.) + (float(passId) * 64.)) / 256.;\n\n    // encode the dist as a 16 bit float\n    vec2 float16bits = encode16BitFloatInto2xUInt8(viewDist);\n    fragColor.b = float16bits.x;\n    fragColor.a = float16bits.y;\n  }\n\n  //////////////////////////////////////////////\n  // Highlight\n#elif defined(DRAW_HIGHLIGHT)\n  \n  int drawItemId = int(v_drawItemId + 0.5);\n  fragColor = getHighlightColor(drawItemId);\n\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}static getPackedMaterialData(U){const F=new Float32Array(12),e=U.getParameter("BaseColor").value;return F[0]=e.r,F[1]=e.g,F[2]=e.b,F[3]=e.a,F[4]=U.getParameter("PointSize").value,F[5]=U.getParameter("Overlay").value,F}static getMaterialTemplate(){return tl}}const tl=new ae("PointsShader_template");n.register("PointsShader",el);class Ql extends tt{constructor(U){super(U,"FatPointsShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\ninstancedattribute vec3 positions;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\nimport 'GLSLUtils.glsl' \nimport 'inverse.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\nimport 'quadVertexFromID.glsl'\n\nuniform int drawItemId;\nint getDrawItemId() {\n  return drawItemId;\n}\n\nuniform float PointSize;\nuniform float Overlay;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\nvarying vec3 v_viewPos;\nvarying float v_drawItemId;\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  vec2 quadPointPos = getQuadVertexPositionFromID();\n  v_texCoord = quadPointPos + 0.5;\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  \n  vec4 viewPos = modelViewMatrix * vec4(positions, 1.);\n\n  // During XR sessions, there is a scaling applied to the view matrix\n  // which causes a distortion to the line width. We extract that scale here\n  // and use to correct the distortion.\n  // See also: FatLinesShader\n  vec3 viewZ = modelViewMatrix[2].xyz;\n  float viewScale = length(viewZ);\n  viewPos += vec4(vec3(quadPointPos, 0.0) * PointSize * viewScale, 0.);\n\n  // Generate a quad which is 0.5 * PointSize closer towards\n  // us. This allows points to be visualized even if snug on \n  // a surface. (else they get fully clipped)\n  viewPos.z += 0.5 * PointSize;\n\n  v_drawItemId = float(getDrawItemId());\n  v_viewPos = -viewPos.xyz;\n  \n  gl_Position = projectionMatrix * viewPos;\n  if (Overlay > 0.0) {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.w, Overlay);\n  }\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'constants.glsl'\n\nuniform color BaseColor;\nuniform float Rounded;\nuniform float BorderWidth;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\nvarying vec3 v_viewPos;\nvarying float v_drawItemId;\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\n#if defined(DRAW_GEOMDATA)\n  uniform int isOrthographic;\n  import 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\nfloat dist = length(v_texCoord - 0.5);\nif (dist > 0.5)\n  discard;\n\n#if defined(DRAW_COLOR)\n\n  if (dist > 0.5 - (BorderWidth * 0.5))\n    fragColor = vec4(0.,0.,0.,1.);\n  else {\n    // Modulate the lighting using the texture coord so the point looks round.\n    float NdotV = cos(dist * PI);\n\n    fragColor = BaseColor * mix(1.0, NdotV, Rounded);\n  }\n\n#elif defined(DRAW_GEOMDATA)\n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId,v_drawItemId, isOrthographic);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_drawItemId);\n#endif // DRAW_HIGHLIGHT\n\n  \n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}bind(U,F){return!!super.bind(U,F)&&(U.supportsInstancing=!1,!0)}static supportsInstancing(){return!1}static getMaterialTemplate(){return ll}}const ll=new Qe("FatPointsShader_template");n.register("FatPointsShader",Ql);class nl extends tt{constructor(U){super(U,"SimpleSurfaceShader"),this.setShaderStage("VERTEX_SHADER","precision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\nattribute vec3 normals;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\nimport 'GLSLUtils.glsl'\nimport 'transpose.glsl'\nimport 'inverse.glsl'\nimport 'drawItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  v_drawItemId = float(drawItemId);\n  v_geomItemData  = getInstanceData(drawItemId);\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n\n  vec4 pos = vec4(positions, 1.);\n  vec4 viewPos    = modelViewMatrix * pos;\n  gl_Position     = projectionMatrix * viewPos;\n\n  mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));\n  v_viewPos       = -viewPos.xyz;\n  v_viewNormal    = normalMatrix * normals;\n\n#ifdef ENABLE_TEXTURES\n  v_textureCoord  = texCoords;\n  // v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y\n#endif\n\n  v_worldPos      = (modelMatrix * pos).xyz;\n}\n"),this.setShaderStage("FRAGMENT_SHADER","precision highp float;\n#define GLSLIFY 1\n#ifdef ENABLE_MULTI_DRAW\n// #define DEBUG_GEOM_ID\n#endif\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\n\n#ifdef DEBUG_GEOM_ID\nimport 'debugColors.glsl'\n#endif\n\nuniform color cutColor;\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getCutaway(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);\n}\n\n#else\n\nuniform vec4 cutawayData;\n\nvec4 getCutaway(int id) {\n  return cutawayData;\n}\n\n#endif\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n/* VS Outputs */\n\nuniform mat4 cameraMatrix;\nuniform int isOrthographic;\n\n#ifndef ENABLE_MULTI_DRAW\n\nuniform color BaseColor;\nuniform float Opacity;\nuniform float EmissiveStrength;\n\n#ifdef ENABLE_TEXTURES\nuniform sampler2D BaseColorTex;\nuniform int BaseColorTexType;\nuniform sampler2D OpacityTex;\nuniform int OpacityTexType;\nuniform sampler2D EmissiveStrengthTex;\nuniform int EmissiveStrengthTexType;\n#endif // ENABLE_TEXTURES\n\n#endif // ENABLE_MULTI_DRAW\n\nimport 'computeViewNormal.glsl'\n  \n\n#ifdef ENABLE_ES3\n    out vec4 fragColor;\n#endif\n\n#if defined(DRAW_GEOMDATA)\n  import 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  int drawItemId = int(v_drawItemId + 0.5);\n  int flags = int(v_geomItemData.r + 0.5);\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) \n  {\n    vec4 cutAwayData   = getCutaway(drawItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (cutaway(v_worldPos, planeNormal, planeDist)) {\n      discard;\n      return;\n    }\n  }\n\n#if defined(DRAW_COLOR)\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) \n  {\n    if (!gl_FrontFacing) {\n#ifdef ENABLE_ES3\n  fragColor = cutColor;\n#else\n  gl_FragColor = cutColor;\n#endif\n      return;\n    }\n  }\n\n  //////////////////////////////////////////////\n  // Normals\n  \n  vec3 viewNormal;\n  if (length(v_viewNormal) < 0.1) {\n    viewNormal = computeViewNormal(v_viewPos);\n  } else {\n    viewNormal = normalize(v_viewNormal);\n  }\n  vec3 normal = normalize(mat3(cameraMatrix) * viewNormal);\n  \n  vec3 viewVector;\n  if (isOrthographic == 0)\n    viewVector = normalize(mat3(cameraMatrix) * normalize(v_viewPos));\n  else \n    viewVector = vec3(-cameraMatrix[2][0], -cameraMatrix[2][1], -cameraMatrix[2][2]);\n  \n  //////////////////////////////////////////////\n  // Material\n\n#ifdef ENABLE_MULTI_DRAW\n\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 baseColor = toLinear(getMaterialValue(materialCoords, 0));\n  vec4 matValue1 = getMaterialValue(materialCoords, 1);\n  float opacity       = baseColor.a * matValue1.r;\n  float emission      = matValue1.g;\n\n#else // ENABLE_MULTI_DRAW\n\n#ifndef ENABLE_TEXTURES\n  vec4 baseColor      = toLinear(BaseColor);\n  float emission      = EmissiveStrength;\n  float opacity       = baseColor.a * Opacity;\n#else\n  vec4 baseColor      = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);\n  float opacity       = baseColor.a * getLuminanceParamValue(Opacity, OpacityTex, OpacityTexType, v_textureCoord);\n  float emission      = getLuminanceParamValue(EmissiveStrength, EmissiveStrengthTex, EmissiveStrengthTexType, v_textureCoord);\n#endif\n\n#endif // ENABLE_MULTI_DRAW\n\n  // Hacky simple irradiance. \n  float ndotv = dot(normal, viewVector);\n  if (ndotv < 0.0) {\n    normal = -normal;\n    ndotv = dot(normal, viewVector);\n\n    // Note: these 2 lines can be used to debug inverted meshes.\n    //baseColor = vec4(1.0, 0.0, 0.0, 1.0);\n    //ndotv = 1.0;\n  }\n\n  fragColor = vec4((ndotv * baseColor.rgb) + (emission * baseColor.rgb), opacity);\n\n#ifdef DEBUG_GEOM_ID\n  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n    discard;\n    return;\n  }\n\n  // ///////////////////////\n  // Debug Draw ID (this correlates to GeomID within a GLGeomSet)\n  float geomId = v_geomItemData.w;\n  fragColor.rgb = getDebugColor(geomId);\n  // ///////////////////////\n#endif\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb);\n#endif\n\n#elif defined(DRAW_GEOMDATA)\n\n  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n    discard;\n    return;\n  }\n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId,v_drawItemId, isOrthographic);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_drawItemId);\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}")}static getPackedMaterialData(U){const F=new Float32Array(8),e=U.getParameter("BaseColor").value;return F[0]=e.r,F[1]=e.g,F[2]=e.b,F[3]=e.a,F[4]=U.getParameter("Opacity").value,F[5]=U.getParameter("EmissiveStrength").value,F}static getMaterialTemplate(){return al}}const al=new ie("SimpleSurfaceShader_template");n.register("SimpleSurfaceShader",nl);class dl extends tt{constructor(U){super(U,"StandardSuraceShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\nattribute vec3 normals;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\n// should be imported by bottom 3\nimport 'GLSLUtils.glsl'\nimport 'transpose.glsl'\nimport 'inverse.glsl'\n\nimport 'drawItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n/* VS Outputs */\n\n#if defined(DRAW_COLOR)\n#elif defined(DRAW_GEOMDATA)\n#elif defined(DRAW_HIGHLIGHT)\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n\n  int drawItemId = getDrawItemId();\n  v_drawItemId = float(drawItemId);\n  v_geomItemData = getInstanceData(drawItemId);\n  vec4 pos = vec4(positions, 1.);\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  vec4 viewPos    = modelViewMatrix * pos;\n  gl_Position     = projectionMatrix * viewPos;\n  v_viewPos = -viewPos.xyz;\n  v_worldPos      = (modelMatrix * pos).xyz;\n\n  mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));\n  v_viewPos       = -viewPos.xyz;\n  v_viewNormal    = normalMatrix * normals;\n\n#ifdef ENABLE_TEXTURES\n  v_textureCoord  = texCoords;\n#endif\n\n}\n"),this.setShaderStage("FRAGMENT_SHADER","  precision highp float;\n#define GLSLIFY 1\n\n  import 'GLSLUtils.glsl'\n  import 'drawItemTexture.glsl' \n  import 'cutaways.glsl'\n  import 'gamma.glsl'\n  import 'materialparams.glsl'\n  import 'GLSLBits.glsl'\n\n  #ifdef ENABLE_FLOAT_TEXTURES\n    vec4 getCutaway(int id) {\n      return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);\n    }\n\n  #else\n\n    uniform vec4 cutawayData;\n\n    vec4 getCutaway(int id) {\n      return cutawayData;\n    }\n\n  #endif\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n/* VS Outputs */\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\n#if defined(DRAW_COLOR)\n\n#ifdef ENABLE_MULTI_DRAW\n// #define DEBUG_GEOM_ID\n#endif\n#ifdef DEBUG_GEOM_ID\nimport 'debugColors.glsl'\n#endif\n\nuniform color cutColor;\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\nuniform float exposure;\n#endif\n\nuniform mat4 cameraMatrix;\nuniform int isOrthographic;\n\n#ifndef ENABLE_MULTI_DRAW\n\nuniform color BaseColor;\nuniform float AmbientOcclusion;\nuniform float Roughness;\nuniform float Metallic;\nuniform float Reflectance;\nuniform float EmissiveStrength;\nuniform float Opacity;\n\n#ifdef ENABLE_TEXTURES\nuniform sampler2D BaseColorTex;\nuniform int BaseColorTexType;\n\nuniform sampler2D AmbientOcclusionTex;\nuniform int AmbientOcclusionTexType;\n\n#ifdef ENABLE_PBR\nuniform sampler2D RoughnessTex;\nuniform int RoughnessTexType;\n\nuniform sampler2D MetallicTex;\nuniform int MetallicTexType;\n\nuniform sampler2D ReflectanceTex;\nuniform int ReflectanceTexType;\n\nuniform sampler2D NormalTex;\nuniform int NormalTexType;\n#endif // ENABLE_PBR\n\nuniform sampler2D EmissiveStrengthTex;\nuniform int EmissiveStrengthTexType;\n\n#endif // ENABLE_TEXTURES\n#endif // ENABLE_MULTI_DRAW\n\nimport 'PBRSurfaceRadiance.glsl'\n\n#ifdef ENABLE_PBR\nmat3 cotangentFrame( in vec3 normal, in vec3 pos, in vec2 texCoord ) {\n  // https://stackoverflow.com/questions/5255806/how-to-calculate-tangent-and-binormal\n  vec3 n = normal;\n  // derivations of the fragment position\n  vec3 pos_dx = dFdx( pos );\n  vec3 pos_dy = dFdy( pos );\n  // derivations of the texture coordinate\n  vec2 texC_dx = dFdx( texCoord );\n  vec2 texC_dy = dFdy( texCoord );\n  // tangent vector and binormal vector\n  vec3 t = -(texC_dy.y * pos_dx - texC_dx.y * pos_dy);\n  vec3 b = -(texC_dx.x * pos_dy - texC_dy.x * pos_dx);\n\n  t = t - n * dot( t, n ); // orthonormalization ot the tangent vectors\n  b = b - n * dot( b, n ); // orthonormalization of the binormal vectors to the normal vector\n  b = b - t * dot( b, t ); // orthonormalization of the binormal vectors to the tangent vector\n  mat3 tbn = mat3( normalize(t), normalize(b), n );\n\n  return tbn;\n}\n#endif\n\nimport 'computeViewNormal.glsl'\n\n#elif defined(DRAW_GEOMDATA)\nuniform int isOrthographic;\nimport 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\nimport 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n  #ifndef ENABLE_ES3\n    vec4 fragColor;\n  #endif\n\n  int drawItemId = int(v_drawItemId + 0.5);\n  int flags = int(v_geomItemData.r + 0.5);\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {\n    vec4 cutAwayData   = getCutaway(drawItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (cutaway(v_worldPos, planeNormal, planeDist)) {\n        discard;\n        return;\n    }\n  }\n  \n#if defined(DRAW_COLOR)\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {\n    if (!gl_FrontFacing) {\n#ifdef ENABLE_ES3\n      fragColor = cutColor;\n#else\n      gl_FragColor = cutColor;\n#endif\n      return;\n    }\n  }\n\n  //////////////////////////////////////////////\n  // Normals\n  vec3 viewNormal;\n  if (length(v_viewNormal) < 0.1) {\n    viewNormal = computeViewNormal(v_viewPos);\n  } else {\n    viewNormal = normalize(v_viewNormal);\n  }\n  vec3 normal = normalize(mat3(cameraMatrix) * viewNormal);\n  \n  vec3 viewVector;\n  if (isOrthographic == 0)\n    viewVector = normalize(mat3(cameraMatrix) * normalize(v_viewPos));\n  else \n    viewVector = vec3(-cameraMatrix[2][0], -cameraMatrix[2][1], -cameraMatrix[2][2]);\n    \n  if (dot(normal, viewVector) < 0.0) {\n      normal = -normal;\n      // Note: this line can be used to debug inverted meshes.\n      //material.baseColor = vec3(1.0, 0.0, 0.0);\n  }\n\n  //////////////////////////////////////////////\n  // Material\n\n  MaterialParams material;\n\n#ifdef ENABLE_MULTI_DRAW\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 matValue0      = getMaterialValue(materialCoords, 0);\n  vec4 matValue1      = getMaterialValue(materialCoords, 1);\n  vec4 matValue2      = getMaterialValue(materialCoords, 2);\n\n  material.baseColor     = toLinear(matValue0.rgb);\n  material.ambientOcclusion      = matValue1.r;\n  material.metallic      = matValue1.g;\n  material.roughness     = matValue1.b;\n  material.reflectance   = matValue1.a;\n\n  material.emission         = matValue2.r;\n  material.opacity          = matValue2.g * matValue0.a;\n\n#else // ENABLE_MULTI_DRAW\n\n#ifndef ENABLE_TEXTURES\n  material.baseColor     = toLinear(BaseColor.rgb);\n  material.emission      = EmissiveStrength;\n\n#ifdef ENABLE_PBR\n  material.roughness     = Roughness;\n  material.metallic      = Metallic;\n  material.reflectance   = Reflectance;\n#endif\n\n#else\n  // Planar YZ projection for texturing, repeating every meter.\n  // vec2 texCoord       = v_worldPos.xz * 0.2;\n  vec2 texCoord          = v_textureCoord;\n\n  vec4 baseColor         = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, texCoord);\n  material.ambientOcclusion = getLuminanceParamValue(AmbientOcclusion, AmbientOcclusionTex, AmbientOcclusionTexType, texCoord);\n  material.baseColor     = baseColor.rgb;\n  \n#ifdef ENABLE_PBR\n\n  material.metallic      = getLuminanceParamValue(Metallic, MetallicTex, MetallicTexType, texCoord);\n  material.roughness     = getLuminanceParamValue(Roughness, RoughnessTex, RoughnessTexType, texCoord);\n\n  // TODO: Communicate that this tex contains the roughness as well.\n  if (MetallicTexType != 0) {\n    vec4 metallicRoughness = vec4(Metallic, Roughness, 0.0, 1.0);\n    metallicRoughness     = texture2D(MetallicTex, texCoord);\n    material.roughness     = metallicRoughness.g;\n    material.metallic     = metallicRoughness.b;\n  }\n\n  material.reflectance   = getLuminanceParamValue(Reflectance, ReflectanceTex, ReflectanceTexType, texCoord);\n#endif // ENABLE_PBR\n  material.emission         = getLuminanceParamValue(EmissiveStrength, EmissiveStrengthTex, EmissiveStrengthTexType, texCoord);\n#endif // ENABLE_TEXTURES\n  material.opacity       = Opacity * baseColor.a;\n\n#ifdef ENABLE_TEXTURES\n#ifdef ENABLE_PBR\n  if (NormalTexType != 0) {\n      mat3 tbn = cotangentFrame(normal, viewVector, texCoord);\n      normal = normalize(tbn * (texture2D(NormalTex, texCoord).rgb * 2.0 - 1.0));\n  }\n#endif // ENABLE_PBR\n#endif // ENABLE_TEXTURES\n#endif // ENABLE_MULTI_DRAW\n\n  fragColor = pbrSurfaceRadiance(material, normal, viewVector);\n  // fragColor = vec4(texture2D(NormalTex, texCoord).rgb, 1.0);\n  // fragColor = metallicRoughness;\n  // fragColor = vec4(material.baseColor, 1.0);;\n  // fragColor = vec4(vec3(material.metallic), 1.0);;\n  // fragColor = vec4(vec3(material.roughness), 1.0);;\n  // fragColor = vec4(vec3(material.ambientOcclusion), 1.0);\n  \n#ifdef DEBUG_GEOM_ID\n  // ///////////////////////\n  // Debug Draw ID (this correlates to GeomID within a GLGeomSet)\n  float geomId = v_geomItemData.w;\n  fragColor.rgb = getDebugColor(geomId);\n  // ///////////////////////\n#endif\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb * exposure);\n#endif\n\n#elif defined(DRAW_GEOMDATA)\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n    discard;\n    return;\n  }\n  \n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId,v_drawItemId, isOrthographic);\n   \n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = getHighlightColor(drawItemId);\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n\n}")}bind(U,F){const e=U;super.bind(U,F);const t=this.__gl;e.envMap&&e.envMap.bind(e);const{exposure:Q}=e.unifs;return Q&&t.uniform1f(Q.location,e.exposure),!0}static getPackedMaterialData(U){const F=new Float32Array(12),e=U.getParameter("BaseColor").value;return F[0]=e.r,F[1]=e.g,F[2]=e.b,F[3]=e.a,F[4]=U.getParameter("AmbientOcclusion").value,F[5]=U.getParameter("Metallic").value,F[6]=U.getParameter("Roughness").value,F[7]=U.getParameter("Reflectance").value,F[8]=U.getParameter("EmissiveStrength").value,F[9]=U.getParameter("Opacity").value,F}static getMaterialTemplate(){return il}}const il=new se("StandardSurfaceShader_template");n.register("StandardSurfaceShader",dl),n.register("TransparentSurfaceShader",dl);class sl extends tt{constructor(U){super(U,"ScreenSpaceShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  v_drawItemId = float(drawItemId);\n  v_geomItemData  = getInstanceData(drawItemId);\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n\n  gl_Position = (modelMatrix * vec4(positions, 1.0));\n\n  v_textureCoord = texCoords;\n  v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\n#ifdef ENABLE_MULTI_DRAW\nimport 'drawItemTexture.glsl'\n#endif // ENABLE_MULTI_DRAW\n\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\n\n#if defined(DRAW_COLOR)\n\n  #ifndef ENABLE_MULTI_DRAW\n\n    uniform color BaseColor;\n\n    #ifdef ENABLE_TEXTURES\n      uniform sampler2D BaseColorTex;\n      uniform int BaseColorTexType;\n    #endif\n\n  #endif // ENABLE_MULTI_DRAW\n#endif // DRAW_COLOR\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\n\n#if defined(DRAW_GEOMDATA)\n  uniform int isOrthographic;\n  import 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n  \n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  //////////////////////////////////////////////\n  // Color\n#if defined(DRAW_COLOR)\n\n  #ifdef ENABLE_MULTI_DRAW\n\n    vec2 materialCoords = v_geomItemData.zw;\n    vec4 baseColor = getMaterialValue(materialCoords, 0);\n\n  #else // ENABLE_MULTI_DRAW\n\n  #ifndef ENABLE_TEXTURES\n    vec4 baseColor = BaseColor;\n  #else\n    vec4 baseColor      = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);\n  #endif\n\n  #endif // ENABLE_MULTI_DRAW\n\n    fragColor = baseColor;\n\n  #ifdef ENABLE_INLINE_GAMMACORRECTION\n    fragColor.rgb = toGamma(fragColor.rgb);\n  #endif\n\n  //////////////////////////////////////////////\n  // GeomData\n#elif defined(DRAW_GEOMDATA)\n  fragColor = setFragColor_geomData(vec3(0,0,0), floatGeomBuffer, passId,v_drawItemId, isOrthographic);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_drawItemId);\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}static isOverlay(){return!0}static getPackedMaterialData(U){const F=new Float32Array(8),e=U.getParameter("BaseColor").value;return F[0]=e.r,F[1]=e.g,F[2]=e.b,F[3]=e.a,F}static getMaterialTemplate(){return Rl}}const Rl=new de("ScreenSpaceShader_template");n.register("ScreenSpaceShader",sl);class Bl extends Ke{constructor(){super()}init(U,F){super.init(U,F)}itemAddedToScene(U,F){if(U instanceof he){const F=U;return!!this.filterGeomItem(F)&&(this.addGeomItem(F),F.setMetadata("glpass",this),!0)}return!1}itemRemovedFromScene(U,F){return U instanceof he&&U.getMetadata("glpass")==this&&this.removeGeomItem(U)}filterGeomItem(U){return!0}addGeomItem(U){}removeGeomItem(U){return!1}constructShaders(U){let F,e;const t=this.__renderer.getOrCreateShader(U);return F=t.getGeomDataShaderName()?this.__renderer.getOrCreateShader(t.getGeomDataShaderName()):t,e=t.getSelectedShaderName()?this.__renderer.getOrCreateShader(t.getSelectedShaderName()):t,{glShader:t,glgeomdatashader:F,glselectedshader:e}}getGeomItemAndDist(U){let F,e;U instanceof Float32Array?(F=Math.round(U[1]),e=U[3]):(F=U[0]+((63&U[1])<<8),e=J.decode16BitFloatFrom2xUInt8(U.slice(2,3)));const t=this.renderer.glGeomItemLibrary.getGeomItem(F);if(t)return{geomItem:t,dist:e}}}class Vl extends k{constructor(U){super(),this.drawIdsTexture=null,this.highlightedIdsTexture=null,this.renderer=U,this.gl=U.gl,this.glGeomItems=[],this.glGeomIdsMapping={},this.glgeomItemEventHandlers=[],this.freeIndices=[],this.drawElementCounts=new Int32Array(0),this.drawElementOffsets=new Int32Array(0),this.highlightElementCounts=new Int32Array(0),this.highlightElementOffsets=new Int32Array(0),this.reserved=0,this.visibleItems=[],this.drawIdsArray=new Float32Array(0),this.drawIdsBufferDirty=!0,this.drawIdsTexture=null,this.highlightedItems=[],this.highlightedIdsArray=null,this.highlightedIdsTexture=null,this.highlightedIdsBufferDirty=!0,this.renderer.glGeomLibrary.on("geomDataChanged",(U=>{const F=this.glGeomIdsMapping[U.index];null!=F&&F.forEach((U=>{const F=this.glGeomItems[U];if(F.isVisible()){const U=this.visibleItems.indexOf(F),e=this.renderer.glGeomLibrary.getGeomOffsetAndCount(F.geomId);this.drawElementOffsets[U]=e[0],this.drawElementCounts[U]=e[1];const t=this.highlightedItems.indexOf(F);-1!=t&&(this.highlightElementOffsets[t]=e[0],this.highlightElementCounts[t]=e[1])}}))}))}addGLGeomItem(U){const F=this.freeIndices.length>0?this.freeIndices.pop():this.glGeomItems.length;this.glGeomIdsMapping[U.geomId]?this.glGeomIdsMapping[U.geomId].push(F):this.glGeomIdsMapping[U.geomId]=[F];const e={};U.visible&&this.visibleItems.push(U),e.visibilityChanged=F=>{F.visible?this.visibleItems.push(U):this.visibleItems.splice(this.visibleItems.indexOf(U),1),this.drawIdsBufferDirty||(this.drawIdsBufferDirty=!0,this.emit("updated"))},U.on("visibilityChanged",e.visibilityChanged),U.geomItem.isHighlighted()&&(this.highlightedItems.push(U),this.highlightedIdsBufferDirty=!0),e.highlightChanged=F=>{if(F&&F.name){if(this.highlightedItems.includes(U))return;this.highlightedItems.push(U)}else this.highlightedItems.splice(this.highlightedItems.indexOf(U),1);this.highlightedIdsBufferDirty=!0,this.emit("updated")},U.geomItem.on("highlightChanged",e.highlightChanged),this.glGeomItems[F]=U,this.glgeomItemEventHandlers[F]=e,this.drawIdsBufferDirty=!0,this.emit("updated")}removeGLGeomItem(U){const F=this.glGeomItems.indexOf(U),e=this.glGeomIdsMapping[U.geomId];e.splice(e.indexOf(F),1),0==e.length&&delete this.glGeomIdsMapping[U.geomId];const t=this.glgeomItemEventHandlers[F];if(U.geomItem.off("highlightChanged",t.highlightChanged),U.off("visibilityChanged",t.visibilityChanged),this.glGeomItems[F]=null,this.glgeomItemEventHandlers[F]=null,this.drawIdsArray[F]=0,this.drawElementOffsets[F]=0,this.drawElementCounts[F]=0,this.freeIndices.push(F),U.isVisible()){const F=this.visibleItems.indexOf(U);this.visibleItems.splice(F,1),this.drawIdsBufferDirty=!0}if(U.geomItem.isHighlighted()){const F=this.highlightedItems.indexOf(U);this.highlightedItems.splice(F,1),this.highlightedIdsBufferDirty=!0}this.emit("updated")}updateDrawIDsBuffer(U){(!this.drawIdsArray||this.visibleItems.length>this.drawIdsArray.length)&&(this.drawIdsArray=new Float32Array(this.visibleItems.length),this.drawElementOffsets=new Int32Array(this.visibleItems.length),this.drawElementCounts=new Int32Array(this.visibleItems.length)),this.visibleItems.forEach(((U,F)=>{const e=this.renderer.glGeomLibrary.getGeomOffsetAndCount(U.geomId);this.drawElementOffsets[F]=e[0],this.drawElementCounts[F]=e[1],this.drawIdsArray[F]=U.drawItemId}));const F=this.renderer.gl;if(!F.multiDrawElements)return;const e=U.boundTextures++;F.activeTexture(F.TEXTURE0+e);const t=2*J.nextPow2(Math.ceil(Math.sqrt(this.visibleItems.length)));this.drawIdsTexture?(this.drawIdsTexture.width<t||this.drawIdsTexture.height<t)&&this.drawIdsTexture.resize(t,t):this.drawIdsTexture=new Ae(this.gl,{format:"webgl2"==F.name?"RED":"ALPHA",type:"FLOAT",width:t,height:t,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1});{const U=this.drawIdsTexture,e=this.drawIdsTexture.width;F.bindTexture(F.TEXTURE_2D,U.glTex);const t=0,Q=0,l=1,n=U.getFormat(),a=U.getType(),d=Math.ceil((Q+this.visibleItems.length)/e);let i=0,s=this.visibleItems.length,R=Q;for(let U=0;U<d;U++){let U;R+s>e?(U=e-R,R=0):U=s;const Q=i%e,d=Math.floor(i/e),B=this.drawIdsArray.subarray(i,i+U);F.texSubImage2D(F.TEXTURE_2D,t,Q,d,U,l,n,a,B),i+=U,s-=U}}F.bindTexture(F.TEXTURE_2D,null),U.boundTextures--,this.drawIdsBufferDirty=!1}updateHighlightedIDsBuffer(U){if(this.highlightedIdsBufferDirty){(!this.highlightedIdsArray||this.highlightedItems.length>this.highlightedIdsArray.length)&&(this.highlightedIdsArray=new Float32Array(this.highlightedItems.length),this.highlightElementOffsets=new Int32Array(this.highlightedItems.length),this.highlightElementCounts=new Int32Array(this.highlightedItems.length)),this.highlightedItems.forEach(((U,F)=>{this.highlightedIdsArray[F]=U.drawItemId;const e=this.renderer.glGeomLibrary.getGeomOffsetAndCount(U.geomId);this.highlightElementOffsets[F]=e[0],this.highlightElementCounts[F]=e[1]}));for(let U=this.highlightedItems.length;U<this.highlightElementCounts.length;U++)this.highlightElementOffsets[U]=0,this.highlightElementCounts[U]=0;this.highlightedIdsBufferDirty=!1}const F=this.renderer.gl;if(!F.multiDrawElements)return;const e=U.boundTextures++;F.activeTexture(F.TEXTURE0+e);const t=J.nextPow2(Math.ceil(Math.sqrt(this.highlightedItems.length)));this.highlightedIdsTexture?(this.highlightedIdsTexture.width<t||this.highlightedIdsTexture.height<t)&&this.highlightedIdsTexture.resize(t,t):this.highlightedIdsTexture=new Ae(this.gl,{format:"webgl2"==F.name?"RED":"ALPHA",type:"FLOAT",width:t,height:t,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1});{const U=this.highlightedIdsTexture,e=this.highlightedIdsTexture.width;F.bindTexture(F.TEXTURE_2D,U.glTex);const t=0,Q=0,l=1,n=U.getFormat(),a=U.getType(),d=Math.ceil((Q+this.highlightedIdsArray.length)/e);let i=0,s=this.highlightedIdsArray.length,R=Q;for(let U=0;U<d;U++){let U;R+s>e?(U=e-R,R=0):U=s;const Q=i%e,d=Math.floor(i/e),B=this.highlightedIdsArray.subarray(i,i+U);F.texSubImage2D(F.TEXTURE_2D,t,Q,d,U,l,n,a,B),i+=U,s-=U}}F.bindTexture(F.TEXTURE_2D,null),U.boundTextures--}draw(U){if(this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(U),0!=this.visibleItems.length){if(this.drawIdsTexture){const{drawIdsTexture:F}=U.unifs;this.drawIdsTexture.bindToUniform(U,F)}this.bindAndRender(U,this.drawIdsArray,this.drawElementCounts,this.drawElementOffsets,this.visibleItems.length)}}drawHighlighted(U){if(0!=this.highlightedItems.length){if(this.highlightedIdsBufferDirty&&this.updateHighlightedIDsBuffer(U),this.highlightedIdsTexture){const{drawIdsTexture:F}=U.unifs;this.highlightedIdsTexture.bindToUniform(U,F)}this.bindAndRender(U,this.highlightedIdsArray,this.highlightElementCounts,this.highlightElementOffsets,this.highlightedItems.length)}}bindAndRender(U,F,e,t,Q){const l=this.gl,n=U.unifs;n.instancedDraw&&l.uniform1i(U.unifs.instancedDraw.location,1),U.bindViewports(n,(()=>{this.multiDraw(U,F,e,t,Q)}))}sortItems(U){const F=[],e=[];this.visibleItems.forEach(((t,Q)=>{if(t){const l=t.geomItem.geomMatParam.value.translation.distanceTo(U);F.push(l),e.push(Q)}})),e.sort(((U,e)=>F[e]-F[U]));const t=[],Q=new Int32Array(this.drawElementCounts.length),l=new Int32Array(this.drawElementOffsets.length);e.forEach(((U,F)=>{t[F]=this.visibleItems[U],Q[F]=this.drawElementCounts[U],l[F]=this.drawElementOffsets[U],this.drawIdsArray[F]=this.visibleItems[U].drawItemId})),this.visibleItems=t,this.drawElementCounts=Q,this.drawElementOffsets=l,this.drawIdsBufferDirty=!0}destroy(){this.drawIdsTexture&&this.drawIdsTexture.destroy(),this.highlightedIdsTexture&&this.highlightedIdsTexture.destroy(),this.emit("destructing")}}class rl extends Vl{multiDraw(U,F,e,t,Q){const l=this.gl;if(l.multiDrawArrays){const{occluded:F}=U.unifs;F&&l.uniform1i(F.location,0),l.multiDrawElements(l.LINES,e,0,l.UNSIGNED_INT,t,0,Q),F&&(l.uniform1i(F.location,1),l.depthFunc(l.GREATER),l.multiDrawElements(l.LINES,e,0,l.UNSIGNED_INT,t,0,Q),l.depthFunc(l.LEQUAL))}else{const{drawId:n,occluded:a}=U.unifs;a&&l.uniform1i(a.location,0);for(let U=0;U<Q;U++)l.uniform1i(n.location,F[U]),l.drawElements(l.LINES,e[U],l.UNSIGNED_INT,t[U]);if(a){l.uniform1i(a.location,1),l.depthFunc(l.GREATER);for(let U=0;U<Q;U++)l.uniform1i(n.location,F[U]),l.drawElements(l.LINES,e[U],l.UNSIGNED_INT,t[U]);l.depthFunc(l.LEQUAL)}}}}class hl extends Vl{multiDraw(U,F,e,t,Q){const l=this.gl;if(l.multiDrawArrays)l.multiDrawArrays(l.POINTS,t,0,e,0,Q);else{const{drawId:n}=U.unifs;for(let U=0;U<Q;U++)l.uniform1i(n.location,F[U]),l.drawArrays(l.TRIANGLES,t[U],e[U])}}}class ol extends Vl{multiDraw(U,F,e,t,Q){const l=this.gl;if(l.multiDrawElements)l.multiDrawElements(l.TRIANGLES,e,0,l.UNSIGNED_INT,t,0,Q);else{const{drawId:n}=U.unifs;for(let U=0;U<Q;U++)l.uniform1i(n.location,F[U]),l.drawElements(l.TRIANGLES,e[U],l.UNSIGNED_INT,t[U])}}}class Jl extends k{constructor(U,F,e){super(),this.glGeomDataShaderKey="",this.glHighlightShaderKey="",this.pass=U,this.gl=F,this.glShader=e.glShader,this.glGeomDataShader=e.glgeomdatashader?e.glgeomdatashader:e.glShader,this.glHighlightShader=e.glselectedshader?e.glselectedshader:e.glShader,this.glGeomItemSets={},this.glShaderKey=e.glShader.getId()+"multidraw-draw",this.glGeomDataShader&&(this.glGeomDataShaderKey=this.glGeomDataShader.getId()+"multidraw-geomdata"),this.glHighlightShader&&(this.glHighlightShaderKey=this.glHighlightShader.getId()+"multidraw-highlight")}getOrCreateGLGeomItemSet(U){let F;if(U instanceof iF||U instanceof VF){if(this.glGeomItemSets.GLMesh)return this.glGeomItemSets.GLMesh;F=new ol(this.pass.renderer),this.glGeomItemSets.GLMesh=F}else if(U instanceof dF||U instanceof BF){if(this.glGeomItemSets.GLLines)return this.glGeomItemSets.GLLines;F=new rl(this.pass.renderer),this.glGeomItemSets.GLLines=F}else{if(!(U instanceof aF||U instanceof RF))throw new Error("Unsupported geom type:"+U.constructor.name);if(this.glGeomItemSets.GLPoints)return this.glGeomItemSets.GLPoints;F=new hl(this.pass.renderer),this.glGeomItemSets.GLPoints=F}return F.on("updated",(()=>{this.emit("updated")})),F}addGLGeomItem(U){const F=U.geomItem,e=F.geomParam.value,t=U.geomItem.materialParam.value,Q=()=>{this.pass.removeGeomItem(F),this.pass.renderer.assignTreeItemToGLPass(F)};t.on("transparencyChanged",Q),F.materialParam.on("valueChanged",Q),F.geomParam.on("valueChanged",Q);const l=this.getOrCreateGLGeomItemSet(e);U.material=t,U.GLGeomItemSet=l,U.geomItemParamChanged=Q,l.addGLGeomItem(U)}removeGLGeomItem(U){const F=U.geomItem,e=U.material,t=U.geomItemParamChanged;e.off("transparencyChanged",t),F.materialParam.off("valueChanged",t),F.geomParam.off("valueChanged",t),U.material=null,U.geomItemParamChanged=null;U.GLGeomItemSet.removeGLGeomItem(U),U.GLGeomItemSet=null}bindShader(U,F,e){const t=this.gl;if(U.isCompiledForTarget(e)||(t.multiDrawElements?F.shaderopts.directives.push("#define ENABLE_MULTI_DRAW\n#extension GL_ANGLE_multi_draw : enable"):F.shaderopts.directives.push("#define ENABLE_MULTI_DRAW"),U.compileForTarget(e,F.shaderopts),F.shaderopts.directives.pop()),!U.bind(F,e))throw new Error("Unable to bind shader:"+U);this.pass.renderer.glGeomItemLibrary.bind(F),this.pass.renderer.glGeomLibrary.bind(F),this.pass.renderer.glMaterialLibrary.bind(F)}draw(U){this.bindShader(this.glShader,U,this.glShaderKey);for(const F in this.glGeomItemSets)this.glGeomItemSets[F].draw(U);this.glShader.unbind(U)}drawHighlightedGeoms(U){if(this.glHighlightShader){this.bindShader(this.glHighlightShader,U,this.glHighlightShaderKey);for(const F in this.glGeomItemSets)this.glGeomItemSets[F].drawHighlighted(U);this.glHighlightShader.unbind(U)}}drawGeomData(U){this.bindShader(this.glGeomDataShader,U,this.glGeomDataShaderKey);const F=U.gl,{floatGeomBuffer:e,passId:t}=U.unifs;e&&F.uniform1i(e.location,U.floatGeomBuffer?1:0),t&&F.uniform1i(t.location,U.passIndex);for(const F in this.glGeomItemSets)this.glGeomItemSets[F].draw(U);this.glGeomDataShader.unbind(U)}sortItems(U){for(const F in this.glGeomItemSets)this.glGeomItemSets[F].sortItems(U)}}class Zl extends Bl{constructor(){super(),this.__glshadermaterials={},this.__glShaderGeomSets={}}init(U,F){super.init(U,F)}getPassType(){return ze.OPAQUE}filterGeomItem(U){const F=U.materialParam.value;return this.checkMaterial(F)}checkMaterial(U){return!U.isTransparent()}removeAndReAddGeomItem(U){this.removeGeomItem(U),this.__renderer.assignTreeItemToGLPass(U)}addGeomItem(U){const F=U.materialParam,e=F.value,t=this.renderer.glGeomLibrary,Q=this.renderer.glGeomItemLibrary;if(!e.isTextured()&&e.getShaderClass().supportsInstancing()){const F=e.getShaderName();let t=this.__glShaderGeomSets[F];if(!t){const U=this.constructShaders(F);t=new Jl(this,this.__gl,U),t.on("updated",(()=>{this.__renderer.requestRedraw()})),this.__glShaderGeomSets[F]=t}const Q=this.renderer.glGeomItemLibrary.getGLGeomItem(U);return t.addGLGeomItem(Q),Q.GLShaderGeomSets=t,this.emit("updated"),!0}const l=t.constructGLGeom(U.geomParam.value),n=Q.getGLGeomItem(U),a=()=>{this.removeGeomItem(U),this.__renderer.assignTreeItemToGLPass(U)};F.on("valueChanged",a),n.materialChanged=a;const d=e.getShaderName(),i=this.renderer.glMaterialLibrary.getGLMaterial(e);let s=this.__glshadermaterials[d];if(!s){const U=this.constructShaders(d);s=new CQ(this.__gl,this,U),this.__glshadermaterials[d]=s,s.on("updated",(()=>{this.__renderer.requestRedraw()}))}return s.addGLGeomItem(n,l,i),!0}removeGeomItem(U){const F=this.renderer.glGeomItemLibrary.getGLGeomItem(U);if(F.GLShaderGeomSets){return F.GLShaderGeomSets.removeGLGeomItem(F),F.GLShaderGeomSets=null,!0}const e=U.materialParam,t=F.materialChanged;if(e&&t&&(e.off("valueChanged",t),F.materialChanged=null),F.GLGeomItemSet){return F.GLGeomItemSet.removeGLGeomItem(F),F.GLGeomItemSet=null,!0}return!0}removeMaterial(U){const F=U.getShaderName(),e=this.__glshadermaterials[F];if(!e||e!=U.getMetadata("glshaderMaterials"))return void console.warn("Material not found in pass");const t=U.getMetadata("glMaterialGeomItemSets");e.removeMaterialGeomItemSets(t)}__traverseTreeAndDraw(U){for(const F in this.__glShaderGeomSets)this.__glShaderGeomSets[F].draw(U);for(const F in this.__glshadermaterials)this.__glshadermaterials[F].draw(U);U.glGeom&&U.glGeom.unbind(U)}draw(U){const F=this.__gl;F.disable(F.BLEND),F.disable(F.CULL_FACE),F.enable(F.DEPTH_TEST),F.depthFunc(F.LEQUAL),F.depthMask(!0),this.__traverseTreeAndDraw(U),U.viewport.drawSilhouettes(U)}drawHighlightedGeoms(U){const F=this.__gl;F.disable(F.CULL_FACE);for(const F in this.__glShaderGeomSets)this.__glShaderGeomSets[F].drawHighlightedGeoms(U);for(const F in this.__glshadermaterials){this.__glshadermaterials[F].drawHighlightedGeoms(U)}U.glGeom&&U.glGeom.unbind(U)}drawGeomData(U){U.passIndex=this.passIndex;const F=this.__gl;F.disable(F.BLEND),F.disable(F.CULL_FACE),F.enable(F.DEPTH_TEST),F.depthFunc(F.LEQUAL),F.depthMask(!0);for(const F in this.__glShaderGeomSets)this.__glShaderGeomSets[F].drawGeomData(U);for(const F in this.__glshadermaterials){this.__glshadermaterials[F].drawGeomData(U)}U.glGeom&&U.glGeom.unbind(U)}}HQ.registerPass(Zl,ze.OPAQUE);class cl extends tt{constructor(U){super(U,"FattenLinesShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\nattribute vec3 positions;  //(location = 0)\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  v_texCoord = positions.xy+0.5;\n  gl_Position = vec4(positions.xy*2.0, -1.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D colorTexture;\nuniform sampler2D depthTexture;\nuniform vec2 screenSize;\n\nuniform float growth;\n\nvarying vec2 v_texCoord;\n\nbool sampleNeiPixel(vec2 fragCoord, inout vec4 res) {\n  res = texture2D(colorTexture, fragCoord/screenSize);\n  if (res.a > 0.0) {\n    return true;\n  }\n  return false;\n}\n\nvec4 samplePixels(vec2 fragCoord) {\n  vec4 res = vec4(0.0);\n  \n  if (sampleNeiPixel(fragCoord, res)) return res; // M\n  \n  // Search surrounding pixels for geoms\n  if (sampleNeiPixel(fragCoord+vec2( 1, 0), res)) return res; // E\n  if (sampleNeiPixel(fragCoord+vec2(-1, 0), res)) return res; // W\n  if (sampleNeiPixel(fragCoord+vec2( 0, 1), res)) return res; // N\n  if (sampleNeiPixel(fragCoord+vec2( 0,-1), res)) return res; // S\n  if (sampleNeiPixel(fragCoord+vec2( 1, 1), res)) return res; // NW\n  if (sampleNeiPixel(fragCoord+vec2(-1, 1), res)) return res; // NE\n  if (sampleNeiPixel(fragCoord+vec2( 1,-1), res)) return res; // SW\n  if (sampleNeiPixel(fragCoord+vec2(-1,-1), res)) return res; // SE\n  \n  return res;\n}\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  fragColor = samplePixels(gl_FragCoord.xy);\n  if (fragColor.a < 0.0001) {\n    discard; \n  }\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}class ml extends Zl{constructor(){super(),this.linesGeomDataBuffer=null,this.fattenLinesShader=null,this.quad=null,this.fbo=null}init(U,F){super.init(U,F)}filterGeomItem(U){const F=U.geomParam.value;return F instanceof dF||F instanceof BF||F instanceof aF||F instanceof RF}__checkFramebuffer(U,F){const e=this.__gl;let t;if(t="webgl2"==e.name?e.checkFramebufferStatus(e.DRAW_FRAMEBUFFER):e.checkFramebufferStatus(e.FRAMEBUFFER),t!==e.FRAMEBUFFER_COMPLETE)switch(e.bindTexture(e.TEXTURE_2D,null),"webgl2"==e.name?e.bindFramebuffer(e.DRAW_FRAMEBUFFER,null):e.bindFramebuffer(e.FRAMEBUFFER,null),console.warn("Error creating Fbo width:",U,", height:",F),t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}}draw(U){const F=this.__gl;F.enable(F.BLEND),F.blendFunc(F.SRC_ALPHA,F.ONE_MINUS_SRC_ALPHA),F.enable(F.DEPTH_TEST),F.depthFunc(F.LEQUAL),F.depthMask(!0),this.__traverseTreeAndDraw(U),F.disable(F.BLEND)}drawGeomData(U){const F=this.__gl;if(U.geomDataFbo){this.linesGeomDataBuffer||(this.linesGeomDataBuffer=new Ae(F,{type:this.__renderer.floatGeomBuffer?"FLOAT":"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:1,height:2}),this.fattenLinesShader=new cl(F),this.quad=new $t(F,new kF(1,1)));const e=U.geomDataFbo,t=e.width,Q=e.height;if(this.linesGeomDataBuffer.width!=t||this.linesGeomDataBuffer.height!=Q){this.fbo&&(F.deleteFramebuffer(this.fbo),this.fbo=null),this.linesGeomDataBuffer.resize(t,Q),this.fbo=F.createFramebuffer();const U=this.linesGeomDataBuffer.glTex,l=e.__depthTexture;"webgl2"==F.name?(F.bindFramebuffer(F.DRAW_FRAMEBUFFER,this.fbo),F.framebufferTexture2D(F.DRAW_FRAMEBUFFER,F.COLOR_ATTACHMENT0,F.TEXTURE_2D,U,0),F.framebufferTexture2D(F.DRAW_FRAMEBUFFER,F.DEPTH_ATTACHMENT,F.TEXTURE_2D,l,0)):(F.bindFramebuffer(F.FRAMEBUFFER,this.fbo),F.framebufferTexture2D(F.FRAMEBUFFER,F.COLOR_ATTACHMENT0,F.TEXTURE_2D,U,0),F.framebufferTexture2D(F.FRAMEBUFFER,F.DEPTH_ATTACHMENT,F.TEXTURE_2D,l,0)),this.__checkFramebuffer(t,Q)}else"webgl2"==F.name?F.bindFramebuffer(F.DRAW_FRAMEBUFFER,this.fbo):F.bindFramebuffer(F.FRAMEBUFFER,this.fbo);F.colorMask(!0,!0,!0,!0),F.clearColor(0,0,0,0),F.clear(F.COLOR_BUFFER_BIT)}if(super.drawGeomData(U),U.geomDataFbo){U.geomDataFbo.bindForWriting(U),this.fattenLinesShader.bind(U);const{colorTexture:e,screenSize:t}=U.unifs;this.linesGeomDataBuffer.bindToUniform(U,e);const Q=U.geomDataFbo;F.uniform2f(t.location,Q.width,Q.height),this.quad.bindAndDraw(U)}}}HQ.registerPass(ml,ze.OPAQUE);class Sl extends Bl{constructor(){super(),this.listenerIDs={},this.itemCount=0,this.__glShaderGeomSets={},this.transparentItems=[],this.transparentItemIndices={},this.freeList=[],this.visibleItems=[],this.prevSortCameraPos=new i,this.sortCameraMovementDistance=0,this.reSort=!1}init(U,F){super.init(U,F),this.itemCount=0,this.__glShaderGeomSets={},this.transparentItems=[],this.transparentItemIndices={},this.freeList=[],this.visibleItems=[],this.prevSortCameraPos=new i(999,999,999),this.sortCameraMovementDistance=.25,this.reSort=!1}getPassType(){return ze.TRANSPARENT}filterGeomItem(U){const F=U.geomParam.value;if(F instanceof dF||F instanceof aF||F instanceof RF||F instanceof BF)return!1;return U.materialParam.value.isTransparent()}resortNeeded(){this.reSort=!0}addGeomItem(U){this.itemCount++;const F={};this.listenerIDs[U.getId()]=F;const e=U.materialParam,t=e.value,Q=t.getShaderName(),l=this.constructShaders(Q);if(!t.isTextured()&&t.getShaderClass().supportsInstancing()){let e=this.__glShaderGeomSets[Q];e||(e=new Jl(this,this.__gl,l),e.on("updated",(()=>{this.renderer.requestRedraw()})),this.__glShaderGeomSets[Q]=e);const t=this.renderer.glGeomItemLibrary.getGLGeomItem(U);return e.addGLGeomItem(t),F["glGeomItem.visibilityChanged"]=t.on("visibilityChanged",(()=>{this.resortNeeded()})),this.emit("updated"),t.GLShaderGeomSets=e,void(this.reSort=!0)}const n=this.renderer.glGeomLibrary.constructGLGeom(U.geomParam.value),a=this.renderer.glGeomItemLibrary.getGLGeomItem(U);if(!a)throw new Error("glGeomItem not found for geomItem:"+U.getName());const d=this.renderer.glMaterialLibrary.getGLMaterial(t),i=()=>{t.removeListenerById("valueChanged",F["material.valueChanged"]),t.removeListenerById("transparencyChanged",F["material.transparencyChanged"]),e.removeListenerById("valueChanged",F["materialParam.valueChanged"]),this.removeGeomItem(U),this.renderer.assignTreeItemToGLPass(U)};F["material.valueChanged"]=t.on("valueChanged",i),F["material.transparencyChanged"]=t.on("transparencyChanged",i),F["materialParam.valueChanged"]=e.on("valueChanged",i);F["glGeomItem.visibilityChanged"]=a.on("visibilityChanged",(U=>{if(U.visible)this.visibleItems.push(s);else{const U=this.visibleItems.indexOf(s);this.visibleItems.splice(U,1)}this.reSort=!0})),F["GeomMat.valueChanged"]=U.geomMatParam.on("valueChanged",(()=>{this.reSort=!0}));const s={geomItem:U,shaders:l,glGeom:n,glMaterial:d,glGeomItem:a,material:t};let R;R=this.freeList.length>0?this.freeList.pop():this.transparentItems.length,this.transparentItems[R]=s,this.transparentItemIndices[U.getId()]=R,U.isVisible()&&this.visibleItems.push(s),this.reSort=!0}removeGeomItem(U){this.itemCount--;const F=this.renderer.glGeomItemLibrary.getGLGeomItem(U);if(!F)throw new Error("glGeomItem not found for geomItem:"+U.getName());const e=this.listenerIDs[U.getId()];delete this.listenerIDs[U.getId()];const t=U.getParameter("Material"),Q=t.value;if(F.removeListenerById("visibilityChanged",e["glGeomItem.visibilityChanged"]),F.GLShaderGeomSets){return F.GLShaderGeomSets.removeGLGeomItem(F),F.GLShaderGeomSets=null,!0}{const F=this.transparentItemIndices[U.getId()],l=this.transparentItems[F];delete this.transparentItemIndices[U.getId()],Q.removeListenerById("valueChanged",e["material.valueChanged"]),Q.removeListenerById("transparencyChanged",e["material.transparencyChanged"]),t.removeListenerById("valueChanged",e["materialParam.valueChanged"]),U.getParameter("GeomMat").removeListenerById("valueChanged",e["GeomMat.valueChanged"]),this.transparentItems[F]=null,this.freeList.push(F);const n=this.visibleItems.indexOf(l);-1!=n&&this.visibleItems.splice(n,1)}return this.emit("updated"),!0}sortItems(U){for(const F in this.__glShaderGeomSets)this.__glShaderGeomSets[F].sortItems(U);for(const F of this.visibleItems){const e=F.glGeomItem.geomItem.geomMatParam.value;F.dist=e.translation.distanceTo(U)}this.visibleItems.sort(((U,F)=>U.dist>F.dist?-1:U.dist<F.dist?1:0)),this.reSort=!1}_drawItem(U,F,e){if(e.currentGLMaterial!=F.glMaterial&&(e.currentGLMaterial=F.glMaterial,!e.currentGLMaterial.bind(U)))return;if(e.currentGLGeom!=F.glGeom&&(e.currentGLGeom=F.glGeom,!e.currentGLGeom.bind(U)))return;F.glGeomItem.bind(U)&&U.bindViewports(U.unifs,(()=>{e.currentGLGeom.draw(U)}))}_drawItems(U){for(const F in this.__glShaderGeomSets)this.__glShaderGeomSets[F].draw(U);const F={currentglShader:null,currentGLMaterial:null,currentGLGeom:null};for(const e of this.visibleItems){const t=e.shaders.glShader;if(F.currentglShader!=t){if(!t.bind(U,"color"))continue;const e=this.__gl,Q=U.unifs;Q.instancedDraw&&e.uniform1i(Q.instancedDraw.location,0),this.renderer.glGeomItemLibrary.bind(U),F.currentglShader=t}this._drawItem(U,e,F)}}draw(U){if(0==this.itemCount)return;const F=this.__gl,e=U.viewXfo.tr;if(this.reSort||e.distanceTo(this.prevSortCameraPos)>this.sortCameraMovementDistance)if(this.sortItems(e),this.prevSortCameraPos=e,U.vrviewport)this.sortCameraMovementDistance=.2*U.viewScale;else if(U.viewport){const F=U.viewport.getCamera();this.sortCameraMovementDistance=.3*F.getFocalDistance()}F.enable(F.DEPTH_TEST),F.depthFunc(F.LESS),F.enable(F.BLEND),F.blendEquation(F.FUNC_ADD),U.pass="ADD",F.blendFunc(F.SRC_ALPHA,F.ONE_MINUS_SRC_ALPHA),F.enable(F.CULL_FACE),F.cullFace(F.BACK),this._drawItems(U),F.disable(F.BLEND),F.depthMask(!0)}drawHighlightedGeoms(U){const F=this.__gl;F.disable(F.CULL_FACE);for(const F in this.__glShaderGeomSets)this.__glShaderGeomSets[F].drawHighlightedGeoms(U);const e={currentglShader:null,currentGLMaterial:null,currentGLGeom:null};for(const t of this.visibleItems){if(!t.geomItem.isHighlighted())continue;if(!t.shaders.glselectedshader)continue;const Q=t.shaders;if(e.currentglShader!=Q.glselectedshader){if(!Q.glselectedshader.bind(U,"highlight"))continue;e.currentglShader=Q.glselectedshader}const{floatGeomBuffer:l,passId:n,instancedDraw:a}=U.unifs;l&&F.uniform1i(l.location,F.floatGeomBuffer?1:0),n&&F.uniform1i(n.location,this.passIndex),a&&F.uniform1i(a.location,0),this.renderer.glGeomItemLibrary.bind(U),this._drawItem(U,t,e)}e.currentGLGeom&&e.currentGLGeom.unbind(U)}drawGeomData(U){const F=this.__gl;F.disable(F.BLEND),F.disable(F.CULL_FACE),F.enable(F.DEPTH_TEST),F.depthFunc(F.LESS),F.depthMask(!0);for(const F in this.__glShaderGeomSets)this.__glShaderGeomSets[F].drawGeomData(U);const e={currentglShader:null,currentGLMaterial:null,currentGLGeom:null};for(const t of this.visibleItems){if(!t.glGeomItem.geomItem.isSelectable())continue;const Q=t.shaders;if(!Q.glgeomdatashader)continue;if(e.currentglShader!=Q.glgeomdatashader){if(!Q.glgeomdatashader.bind(U,"geomdata"))continue;e.currentglShader=Q.glgeomdatashader}const{floatGeomBuffer:l,passId:n,instancedDraw:a}=U.unifs;l&&F.uniform1i(l.location,F.floatGeomBuffer?1:0),n&&F.uniform1i(n.location,this.passIndex),a&&F.uniform1i(a.location,0),this.renderer.glGeomItemLibrary.bind(U),this._drawItem(U,t,e)}e.currentGLGeom&&e.currentGLGeom.unbind(U)}}HQ.registerPass(Sl,ze.TRANSPARENT);class Wl extends tt{constructor(U){super(U,"AtlasLayoutShader"),this.setShaderStage("VERTEX_SHADER","\n\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\nuniform vec2 pos;\nuniform vec2 size;\nuniform vec2 srctextureDim;\nconst int border = 2;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(vec2(-1.0, -1.0) + (pos * 2.0) + (v_texCoord * size * 2.0), 0.0, 1.0);\n\n  vec2 borderVec2 = vec2(float(border), float(border));\n  v_texCoord *= (srctextureDim + (borderVec2 * 2.0)) / srctextureDim;\n  v_texCoord -= borderVec2 / srctextureDim;\n}\n\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D srctexture;\nuniform vec2 srctextureDim;\nuniform bool alphaFromLuminance;\nuniform bool invert;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n\nfloat luminanceFromRGB(vec3 rgb) {\n  return 0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b;\n}\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n  vec2 pixelCoord = v_texCoord*srctextureDim;\n  vec2 uv = v_texCoord;\n\n  // Wrap X coords\n  if (pixelCoord.x < 0.0) {\n    uv.x += 1.0/srctextureDim.x;\n    uv.y = 1.0 - uv.y;\n  }\n  else if (pixelCoord.x > srctextureDim.x) {\n    uv.x -= 1.0/srctextureDim.x;\n    uv.y = 1.0 - uv.y;\n  }\n\n  // Wrap Y coords\n  if (pixelCoord.y < 0.0) {\n    uv.y += 1.0/srctextureDim.y;\n    uv.x = 1.0 - uv.x;\n  }\n  else if (pixelCoord.y > srctextureDim.y) {\n    uv.y -= 1.0/srctextureDim.y;\n    uv.x = 1.0 - uv.x;\n  }\n\n  vec4 texel = texture2D(srctexture, uv);\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  // TODO: check why we pre-multiply alphas here.\n  // fragColor = vec4(texel.rgb/texel.a, texel.a);\n\n  if (alphaFromLuminance) {\n    fragColor = vec4(texel.rgb, luminanceFromRGB(texel.rgb));\n  }\n  else {\n    fragColor = texel;\n  }\n  \n  if (invert) {\n    fragColor = vec4(1.0) - fragColor;\n  }\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n\n")}}class El extends lt{constructor(U,F,e="RGBA",t="FLOAT"){super(U),this.__asyncCount=0,this.loaded=!1,this.ready=!1,this.__layout=[],this.__layoutVec4s=[],this.__atlasLayoutShaderBinding=null,this.__atlasLayoutShader=null,this.__name=F,this.__formatParam=e,this.__typeParam=t,this.clearColor=new B(0,0,0,0),this.__subImages=[],this.__layoutNeedsRegeneration=!1,this.__asyncCount=0,this.loaded=!1}incAsyncCount(U=1){this.__asyncCount+=U,this.ready=!1}decAsyncCount(){this.__asyncCount>0&&(this.__asyncCount--,0==this.__asyncCount&&(this.loaded=!0,this.emit("loaded")))}isLoaded(){return 0==this.__asyncCount}getMainImage(){return this.frameBuffer}addSubImage(U){if(U instanceof KU){const F=new Ae(this.__gl,U);U.isLoaded()||(this.incAsyncCount(),U.on("loaded",(()=>{this.decAsyncCount()}))),U.setMetadata("ImageAtlas_gltex",F),F.addRef(this);const e=()=>{this.__layoutNeedsRegeneration=!0,this.renderAtlas()};U.on("updated",e),this.__subImages.push(F)}else{const F=U;F.addRef(this),this.__subImages.push(F)}return this.__layoutNeedsRegeneration=!0,this.__subImages.length-1}removeSubImage(U){let F;if(U instanceof KU){const e=U.getMetadata("ImageAtlas_gltex");F=this.__subImages.indexOf(e),U.deleteMetadata("ImageAtlas_gltex")}else F=this.__subImages.indexOf(U);this.__subImages[F].removeRef(this),this.__subImages.splice(F,1),this.__layoutNeedsRegeneration=!0}getSubImage(U){return this.__subImages[U]}numSubImages(){return this.__layout?this.__layout.length:this.__subImages.length}generateAtlasLayout(U){if(0==this.__subImages.length)return void(this.__layoutNeedsRegeneration=!1);const F=[];this.__subImages.forEach(((U,e)=>{F.push({w:U.width+4,h:U.height+4,area:U.width*U.height,index:e})})),F.sort(((U,F)=>U.area>F.area?-1:U.area<F.area?1:0));const e=new C;e.fit(F),this.__layout=[],F.forEach(((U,F)=>{U.fit?this.__layout[U.index]={pos:new d(U.fit.x+2,U.fit.y+2),size:new d(U.w,U.h)}:console.warn("Unable to fit image")}));const t=e.root.w,Q=e.root.h;this.configure({width:t,height:Q,format:"FLOAT"==this.__typeParam&&"RGB"==this.__formatParam?"RGBA":this.__formatParam,type:this.__typeParam,filter:"LINEAR"});const l=this.__gl;if(l.__quadVertexIdsBuffer||l.setupInstancedQuad(),!this.__atlasLayoutShader){this.__atlasLayoutShader=new Wl(this.__gl);const U=[];"webgl2"==l.name&&U.push("#define ENABLE_ES3");const F=this.__atlasLayoutShader.compileForTarget("GLImageAtlas",{directives:U});this.__atlasLayoutShaderBinding=Rt(this.__gl,F.attrs,l.__quadattrbuffers,l.__quadIndexBuffer)}let n=Math.round(Math.sqrt(1*this.__layout.length)+.5);if(n=J.nextPow2(n),n%1!=0&&(n+=1-n%1),l.floatTexturesSupported){const U=new Float32Array(n*n*4);for(let F=0;F<this.__layout.length;F++){const e=this.__layout[F];new s(new Float32Array(U.buffer,4*F*4,4)).set(e.pos.x/t,e.pos.y/Q,e.size.x/t,e.size.y/Q)}this.__atlasLayoutTexture&&this.__atlasLayoutTexture.width==n&&this.__atlasLayoutTexture.height==n?this.__atlasLayoutTexture.bufferData(U,n,n):(this.__atlasLayoutTexture&&this.__atlasLayoutTexture.destroy(),this.__atlasLayoutTexture=new Ae(l,{format:"RGBA",type:"FLOAT",filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1,width:n,height:n,data:U}))}else this.__layoutVec4s=[],this.__layout.forEach(((U,F)=>{this.__layoutVec4s[F]=[U.pos.x/t,U.pos.y/Q,U.size.x/t,U.size.y/Q]}));this.textureDesc[0]=this.width,this.textureDesc[1]=this.height,this.textureDesc[2]=this.__atlasLayoutTexture.width,this.__layoutNeedsRegeneration=!1}getLayoutData(U){return this.__layoutVec4s[U]}renderAtlas(U=!1,F=0){if(0==this.__subImages.length)return;this.__layoutNeedsRegeneration&&this.generateAtlasLayout();const e=this.__gl,t={};this.bindForWriting(t,!0),this.__atlasLayoutShader.bind(t,"GLImageAtlas"),this.__atlasLayoutShaderBinding.bind(t);const Q=new d(1/this.width,1/this.height),l=t.unifs;for(let U=F;U<this.__subImages.length;U++){const F=this.__subImages[U],n=this.__layout[U];F.bindToUniform(t,l.srctexture)&&(e.uniform2fv(l.pos.location,n.pos.multiply(Q).asArray()),e.uniform2fv(l.size.location,n.size.multiply(Q).asArray()),e.uniform2f(l.srctextureDim.location,F.width,F.height),e.uniform1i(l.alphaFromLuminance.location,F.alphaFromLuminance?1:0),e.uniform1i(l.invert.location,F.invert?1:0),e.drawQuad(),t.boundTextures--)}U&&this.cleanup(),this.unbind(t),this.emit("updated")}isReady(){return null!=this.__atlasLayoutTexture}bindToUniform(U,F){super.bindToUniform(U,F);const e=U.unifs;if(this.__atlasLayoutTexture){const t=e[F.name+"_layout"];t&&this.__atlasLayoutTexture.bindToUniform(U,t);const Q=e[F.name+"_desc"];Q&&this.__gl.uniform4fv(Q.location,this.textureDesc)}else{const U=e[F.name+"_desc"];U&&this.__gl.uniform4f(U.location,this.width,this.height,0,0)}return!0}cleanup(){for(const U of this.__subImages)U.removeRef(this);this.__subImages=[],this.destroy()}destroy(){this.cleanup(),super.destroy()}}class pl extends Ke{constructor(){super(),this.atlas=null,this.indexArrayUpdateNeeded=!1,this.instanceIdsBuffer=null,this.indexArray=new Float32Array(0),this.glshader=null,this.shaderComp={},this.shaderBinding=null,this.modelMatrixArray=[],this.billboardDataArray=[],this.tintColorArray=[],this.width=0,this.drawItemsTexture=null,this.billboards=[],this.dirtyBillboards=new Set,this.freeIndices=[],this.drawCount=0,this.threshold=0,this.updateRequested=!1,this.prevSortCameraPos=new i}init(U,F){super.init(U,F),this.atlas=new El(this.renderer.gl,"Billboards","RGBA","UNSIGNED_BYTE"),this.atlas.clearColor=new B(1,1,1,0);const e=U=>this.emit("updated",U);this.atlas.on("loaded",e),this.atlas.on("updated",e)}getPassType(){return ze.TRANSPARENT}itemAddedToScene(U,F){return U instanceof Ge&&(this.addBillboard(U),!0)}itemRemovedFromScene(U,F){return U instanceof Ge&&(this.removeBillboard(U),!0)}filterRenderTree(){}addBillboard(U){const F=U.imageParam,e=F.value;if(!e)return void F.on("valueChanged",(()=>this.addBillboard(U)));let t;t=this.freeIndices.length>0?this.freeIndices.pop():this.billboards.length;const Q=this.atlas.addSubImage(e);U.setMetadata("GLBillboardsPass_Index",t);const l=()=>{U.isVisible()?(this.drawCount++,this.dirtyBillboards.add(t)):this.drawCount--,this.reqUpdateIndexArray()};U.on("visibilityChanged",l);const n=()=>{U.isVisible()&&(this.dirtyBillboards.add(t),this.emit("updated"))};U.globalXfoParam.on("valueChanged",n),U.alphaParam.on("valueChanged",n),U.on("highlightChanged",n),U.isVisible()&&this.drawCount++,this.billboards[t]={billboard:U,imageIndex:Q,visibilityChanged:l,updateBillboard:n},this.indexArrayUpdateNeeded=!0,this.requestUpdate()}removeBillboard(U){const F=U.getMetadata("GLBillboardsPass_Index");if(-1==F)return void console.warn("Billboard already removed.");const e=this.billboards[F],t=e.billboard.imageParam.value;this.atlas.removeSubImage(t),U.off("visibilityChanged",e.visibilityChanged),U.off("highlightChanged",e.updateBillboard),U.globalXfoParam.off("valueChanged",e.updateBillboard),U.alphaParam.off("valueChanged",e.updateBillboard),this.billboards[F]=null,this.freeIndices.push(F),U.isVisible()&&this.drawCount--,this.indexArrayUpdateNeeded=!0,this.requestUpdate()}populateBillboardDataArray(U,F,e){const t=U.billboard,Q=t.globalXfoParam.value.toMat4(),l=t.pixelsPerMeterParam.value,n=t.pivotParam.value,a=1/l;let d=0;t.alignedToCameraParam.value&&(d|=4),t.drawOnTopParam.value&&(d|=8),t.fixedSizeOnscreenParam.value&&(d|=16);const i=t.alphaParam.value,R=t.colorParam.value,B=7*F*4,V=new s(new Float32Array(e.buffer,4*B,4)),r=new s(new Float32Array(e.buffer,4*(B+4),4)),h=new s(new Float32Array(e.buffer,4*(B+8),4)),o=new s(new Float32Array(e.buffer,4*(B+12),4));V.set(Q.xAxis.x,Q.yAxis.x,Q.zAxis.x,Q.translation.x),r.set(Q.xAxis.y,Q.yAxis.y,Q.zAxis.y,Q.translation.y),h.set(Q.xAxis.z,Q.yAxis.z,Q.zAxis.z,Q.translation.z),o.set(a,d,U.imageIndex,i);new s(new Float32Array(e.buffer,4*(B+16),4)).set(n.x,n.y,0,0);if(new s(new Float32Array(e.buffer,4*(B+20),4)).set(R.r,R.g,R.b,R.a),t.isHighlighted()){const U=t.getHighlight();new s(new Float32Array(e.buffer,4*(B+24),4)).set(U.r,U.g,U.b,U.a)}}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.emit("updated"))}reqUpdateIndexArray(){this.indexArrayUpdateNeeded||(this.indexArrayUpdateNeeded=!0,this.emit("updated"))}updateIndexArray(){const U=this.__gl;this.indexArray&&this.indexArray.length!=this.drawCount&&(U.deleteBuffer(this.instanceIdsBuffer),this.instanceIdsBuffer=null),this.indexArray=new Float32Array(this.drawCount);let F=0;for(let U=0;U<this.billboards.length;U++)this.billboards[U]&&this.billboards[U].billboard.isVisible()&&(this.indexArray[F]=U,F++);this.instanceIdsBuffer||(this.instanceIdsBuffer=U.createBuffer()),U.bindBuffer(U.ARRAY_BUFFER,this.instanceIdsBuffer),U.bufferData(U.ARRAY_BUFFER,this.indexArray,U.STATIC_DRAW),this.indexArrayUpdateNeeded=!1}updateBillboards(U){const F=()=>{this.indexArrayUpdateNeeded&&this.updateIndexArray();const F=this.__gl;if(!this.glshader){F.__quadVertexIdsBuffer||F.setupInstancedQuad(),this.glshader=new PQ(F);const e=this.glshader.compileForTarget("GLBillboardsPass",U.shaderopts);this.shaderBinding=Rt(F,e.attrs,F.__quadattrbuffers,F.__quadIndexBuffer)}if(this.atlas.renderAtlas(),!F.floatTexturesSupported||!F.drawElementsInstanced)return this.modelMatrixArray=[],this.billboardDataArray=[],this.tintColorArray=[],this.indexArray.forEach((U=>{const F=this.billboards[U],e=F.billboard,t=e.globalXfoParam.value.toMat4(),Q=1/e.pixelsPerMeterParam.value;let l=0;e.alignedToCameraParam.value&&(l|=4),e.drawOnTopParam.value&&(l|=8),e.fixedSizeOnscreenParam.value&&(l|=16);const n=e.alphaParam.value,a=e.colorParam.value;this.modelMatrixArray[U]=t.asArray(),this.billboardDataArray[U]=[Q,l,F.imageIndex,n],this.tintColorArray[U]=[a.r,a.g,a.b,a.a]})),void(this.updateRequested=!1);let e=Math.round(Math.sqrt(7*(this.billboards.length-this.freeIndices.length))+.5);if(e%7!=0&&(e+=7-e%7),this.width=e,this.drawItemsTexture)this.drawItemsTexture.resize(e,e);else{const U={format:"RGBA",type:"FLOAT",width:e,height:e,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1};this.drawItemsTexture=new Ae(F,U),this.drawItemsTexture.clear()}this.indexArray.forEach((U=>{-1!=U&&this.updateBillboard(U)})),this.updateRequested=!1};this.atlas.isLoaded()?F():this.atlas.on("loaded",F)}updateBillboard(U){if(0==this.drawCount||!this.drawItemsTexture)return;const F=this.billboards[U];if(!F.billboard.isVisible())return;const e=this.__gl,t=new Float32Array(28);this.populateBillboardDataArray(F,0,t),e.bindTexture(e.TEXTURE_2D,this.drawItemsTexture.glTex);const Q=7*U%this.width,l=Math.floor(7*U/this.width),n=this.drawItemsTexture.getType(),a=this.drawItemsTexture.getFormat();if(n==e.FLOAT)e.texSubImage2D(e.TEXTURE_2D,0,Q,l,7,1,a,n,t);else{const U=J.convertFloat32ArrayToUInt16Array(t);e.texSubImage2D(e.TEXTURE_2D,0,Q,l,7,1,a,n,U)}}sort(U){for(const F of this.billboards){const{billboard:e}=F;if(e&&e.isVisible()){const t=e.globalXfoParam.value;F.dist=t.tr.distanceTo(U)}}this.indexArray.sort(((U,F)=>-1==U?1:-1==F||this.billboards[U].dist>this.billboards[F].dist?-1:this.billboards[U].dist<this.billboards[F].dist?1:0));const F=this.__gl;F.floatTexturesSupported&&this.instanceIdsBuffer&&(F.bindBuffer(F.ARRAY_BUFFER,this.instanceIdsBuffer),F.bufferData(F.ARRAY_BUFFER,this.indexArray,F.STATIC_DRAW))}__draw(U,F){const e=this.__gl;if(!this.glshader)return;this.glshader.bind(U,F),this.shaderBinding.bind(U);const t=U.unifs,{atlasBillboards:Q,passId:l,floatGeomBuffer:n,inVR:a}=U.unifs;if(Q&&this.atlas.bindToUniform(U,t.atlasBillboards),n&&e.uniform1i(n.location,U.floatGeomBuffer?1:0),l&&e.uniform1i(l.location,this.passIndex),a&&e.uniform1i(a.location,U.vrPresenting?1:0),e.floatTexturesSupported&&e.drawElementsInstanced){const{instancesTexture:F,instancesTextureSize:Q}=U.unifs;this.drawItemsTexture.bindToUniform(U,F),e.uniform1i(Q.location,this.width);{const F=U.attrs.instanceIds.location;e.enableVertexAttribArray(F),e.bindBuffer(e.ARRAY_BUFFER,this.instanceIdsBuffer),e.vertexAttribPointer(F,1,e.FLOAT,!1,4,0),e.vertexAttribDivisor(F,1)}U.bindViewports(t,(()=>{e.drawElementsInstanced(e.TRIANGLES,6,e.UNSIGNED_SHORT,0,this.drawCount)}))}else{const{modelMatrix:F,billboardData:Q,tintColor:l,layoutData:n}=U.unifs,a=this.indexArray.length;for(let d=0;d<a;d++)e.uniformMatrix4fv(F.location,!1,this.modelMatrixArray[d]),e.uniform4fv(Q.location,this.billboardDataArray[d]),e.uniform4fv(l.location,this.tintColorArray[d]),e.uniform4fv(n.location,this.atlas.getLayoutData(this.billboards[d].imageIndex)),U.bindViewports(t,(()=>{e.drawQuad()}))}}draw(U){if(0==this.drawCount)return;if(this.updateRequested&&this.updateBillboards(U),this.dirtyBillboards.size>0&&(this.dirtyBillboards.forEach((U=>{this.updateBillboard(U)})),this.dirtyBillboards.clear()),this.indexArrayUpdateNeeded&&this.updateIndexArray(),!this.glshader)return;const F=U.viewXfo.tr;if(F.distanceTo(this.prevSortCameraPos)>this.threshold)if(this.sort(F),this.prevSortCameraPos=F.clone(),this.drawCount>1){const U=this.indexArray[this.indexArray.length-1],F=this.indexArray[this.indexArray.length-2],e=this.billboards[U].billboard,t=this.billboards[F].billboard,Q=e.globalXfoParam.value.tr,l=t.globalXfoParam.value.tr;this.threshold=Q.distanceTo(l)}else this.threshold=9999;const e=this.__gl;e.depthMask(!1),e.disable(e.CULL_FACE),e.enable(e.BLEND),e.blendEquation(e.FUNC_ADD),e.blendFunc(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA),this.__draw(U,"DRAW_COLOR"),e.disable(e.BLEND),e.depthMask(!0)}drawHighlightedGeoms(U){0!=this.drawCount&&this.__draw(U,"DRAW_HIGHLIGHT")}drawGeomData(U){0!=this.drawCount&&this.__draw(U,"DRAW_GEOMDATA")}getGeomItemAndDist(U){let F,e;if(U instanceof Float32Array?(F=Math.round(U[1]),e=U[3]):(F=U[0]+((63&U[1])<<8),e=J.decode16BitFloatFrom2xUInt8(U.slice(2,3))),!(F>=this.billboards.length))return{geomItem:this.billboards[F].billboard,dist:e};console.warn("Invalid Draw Item id:"+F+" NumBillboards:"+(this.billboards.length-1))}}HQ.registerPass(pl,ze.TRANSPARENT);class ul extends Zl{constructor(){super()}getPassType(){return ze.OVERLAY}filterGeomItem(U){if(U.isOverlay())return!0;const F=U.materialParam.value.getShaderClass();return!(!F||!F.isOverlay())}draw(U){const F=this.__gl;F.clear(F.DEPTH_BUFFER_BIT),F.enable(F.CULL_FACE),F.cullFace(F.BACK),F.enable(F.BLEND),F.blendEquation(F.FUNC_ADD),U.pass="ADD",F.blendFunc(F.SRC_ALPHA,F.ONE_MINUS_SRC_ALPHA),this.__traverseTreeAndDraw(U),F.disable(F.BLEND)}drawGeomData(U){const F=this.__gl;F.clear(F.DEPTH_BUFFER_BIT),F.enable(F.CULL_FACE),F.cullFace(F.BACK),F.enable(F.BLEND),F.blendEquation(F.FUNC_ADD),U.pass="ADD",F.blendFunc(F.SRC_ALPHA,F.ONE_MINUS_SRC_ALPHA),super.drawGeomData(U),F.disable(F.BLEND),F.enable(F.DEPTH_TEST)}}HQ.registerPass(ul,ze.OVERLAY);class Nl extends tt{constructor(U){super(U,"BoundingBoxShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec4 positions;\ninstancedattribute float instanceIds;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 cameraMatrix;\n\nimport 'GLSLUtils.glsl'\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\nimport 'transpose.glsl'\n\nuniform sampler2D instancesTexture;\nuniform int instancesTextureSize;\n\nconst int cols_per_instance = 6;\n\nmat4 getMatrix(sampler2D texture, int textureSize, int index) {\n  // Unpack 3 x 4 matix columns into a 4 x 4 matrix.\n  vec4 col0 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 0);\n  vec4 col1 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 1);\n  vec4 col2 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 2);\n  mat4 result = mat4(col0, col1, col2, vec4(0.0, 0.0, 0.0, 1.0));\n  return transpose(result);\n  // return mat4(1.0);\n}\n\nmat4 getModelMatrix(int id) {\n  return getMatrix(instancesTexture, instancesTextureSize, id);\n}\nvec4 getInstanceData(int id, int row) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + row);\n}\n\n#else\n\nuniform mat4 modelMatrix;\nuniform vec4 row3;\nuniform vec4 row4;\nuniform vec4 row5;\n\n#endif\n\n/* VS Outputs */\nvarying vec4 v_color;\n\nvoid main(void) {\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\n  int instanceID = int(instanceIds);\n\n  mat4 modelMatrix = getModelMatrix(instanceID);\n  vec4 row3 = getInstanceData(instanceID, 3);\n  vec4 row4 = getInstanceData(instanceID, 4);\n  vec4 row5 = getInstanceData(instanceID, 5);\n\n#else\n\n#endif\n\n  v_color = row5;\n\n  vec4 pos = positions;\n  if (pos.x < 0.0) pos.x = row3.x;\n  else if (pos.x > 0.0) pos.x = row4.x;\n  if (pos.y < 0.0) pos.y = row3.y;\n  else if (pos.y > 0.0) pos.y = row4.y;\n  if (pos.z < 0.0) pos.z = row3.z;\n  else if (pos.z > 0.0) pos.z = row4.z;\n\n  // Use cross platform bit flags methods\n  bool drawOnTop = false;//testFlag(flags, 8); // flag = 1 << 3\n\n  mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix;// * modelMatrix;\n  gl_Position = modelViewProjectionMatrix * pos;\n\n  // Use cross platform bit flags methods\n  if (drawOnTop) {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.w, 0.5);\n  }\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\n/* VS Outputs */\nvarying vec4 v_color;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  fragColor = v_color;\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}const kl=new class{constructor(U){this.version=U,this.registry={}}registerLib(U){const F=U.name,e=U.version;this.registry[F]&&console.warn("Library already registered:"+F),this.registry[F]=e,console.log(`Registered lib '${F}' v${e}`)}listLibs(){return this.registry}}(F.version);console.log(`Zea Engine v${F.version}`),U.Allocation1D=T,U.Allocator1D=G,U.AssetItem=Ce,U.AssetLoadContext=Te,U.Attribute=FF,U.BaseGeom=QF,U.BaseGeomItem=Be,U.BaseGroup=oe,U.BaseImage=KU,U.BaseItem=A,U.BaseProxy=sF,U.BaseTool=we,U.BillboardItem=Ge,U.BillboardShader=PQ,U.BinReader=BU,U.BinWriter=class{constructor(U=0){this.__data=new ArrayBuffer(U),this.__byteOffset=0,this.__reserved=U,this.__dataView=new DataView(this.__data)}pos(){return this.__byteOffset}seek(U){this.__byteOffset=U}seekEnd(){this.__byteOffset=this.__reserved}getBuffer(){if(this.__data.byteLength==this.__byteOffset)return this.__data;return new Uint8Array(this.__data).slice(0,this.__byteOffset).buffer}__grow(){const U=2*(this.__reserved>0?this.__reserved:1),F=new ArrayBuffer(U),e=new Uint8Array(F),t=new Uint8Array(this.__data);e.set(t),this.__data=F,this.__dataView=new DataView(this.__data),this.__reserved=U}__reserve(U){this.__byteOffset+U>this.__reserved&&this.__grow()}__offset(U){this.__byteOffset+=U,this.__byteOffset>this.__reserved&&this.__grow()}writeUInt8(U){this.__reserve(1),this.__dataView.setUint8(this.__byteOffset,U),this.__offset(1)}writeUInt16(U){this.__reserve(2),this.__dataView.setUint16(this.__byteOffset,U,!0),this.__offset(2)}writeUInt32(U){this.__reserve(4),this.__dataView.setUint32(this.__byteOffset,U,!0),this.__offset(4)}writeSInt32(U){this.__reserve(4),this.__dataView.setInt32(this.__byteOffset,U,!0),this.__offset(4)}writeFloat16(U){const F=J.encode16BitFloat(U);this.writeUInt16(F)}writeFloat32(U){this.__reserve(4),this.__dataView.setFloat32(this.__byteOffset,U,!0),this.__offset(4)}writeUInt8Array(U,F=!0){const e=(U.length,U.length);this.__reserve(e+(F?4:0)),F&&this.writeUInt32(e);for(let F=0;F<e;F++)this.writeUInt8(U[F])}writeUInt16Array(U,F=!0){const e=(U.length,U.length);this.__reserve(2*e+(F?4:0)),F&&this.writeUInt32(e);for(let F=0;F<e;F++)this.writeUInt16(U[F])}writeUInt32Array(U,F=!0){const e=(U.length,U.length);this.__reserve(4*e+(F?4:0)),F&&this.writeUInt32(e);for(let F=0;F<e;F++)this.writeUInt32(U[F])}writeFloat32Array(U,F=!0){const e=(U.length,U.length);this.__reserve(4*e+(F?4:0)),F&&this.writeUInt32(e);for(let F=0;F<e;F++)this.writeFloat32(U[F])}writeStr(U,F=!0){const e=U.length;this.__reserve(4*e+(F?4:0)),F&&this.writeUInt32(e);for(let F=0;F<e;F++)this.writeFloat32(U.charCodeAt(F))}writeSInt32Vec2(U){this.writeSInt32(U.x),this.writeSInt32(U.y)}writeUInt32Vec2(U){this.writeUInt32(U.x),this.writeUInt32(U.y)}writeFloat16Vec2(U){this.writeFloat16(U.x),this.writeFloat16(U.y)}writeFloat32Vec2(U){this.writeFloat32(U.x),this.writeFloat32(U.y)}writeFloat16Vec3(U){this.writeFloat16(U.x),this.writeFloat16(U.y),this.writeFloat16(U.z)}writeFloat32Vec3(U){this.writeFloat32(U.x),this.writeFloat32(U.y),this.writeFloat32(U.z)}writeFloat16Quat(U){this.writeFloat16(U.x),this.writeFloat16(U.y),this.writeFloat16(U.z),this.writeFloat16(U.w)}writeFloat32Quat(U){this.writeFloat32(U.x),this.writeFloat32(U.y),this.writeFloat32(U.z),this.writeFloat32(U.w)}writeRGBFloat32Color(U){this.writeFloat32(U.r),this.writeFloat32(U.g),this.writeFloat32(U.b)}writeRGBAFloat32Color(U){this.writeFloat32(U.r),this.writeFloat32(U.g),this.writeFloat32(U.b),this.writeFloat32(U.a)}writeRGBUInt8Color(U){this.writeUInt8(U.r),this.writeUInt8(U.g),this.writeUInt8(U.b)}writeRGBAUInt8Color(U){this.writeUInt8(U.r),this.writeUInt8(U.g),this.writeUInt8(U.b),this.writeUInt8(U.a)}writeBox2(U){this.writeFloat32Vec2(U.p0),this.writeFloat32Vec2(U.p1)}writeBox3(U){this.writeFloat32Vec3(U.p0),this.writeFloat32Vec3(U.p1)}writePadd(U){const F=U-this.__byteOffset;this.__reserve(F),this.__offset(F)}writeAlignment(U){const F=this.__byteOffset%U;0!=F&&(this.__reserve(U-F),this.__offset(U-F))}},U.BooleanOperatorInput=class extends xU{},U.BooleanOperatorOutput=class extends GU{},U.BooleanParameter=JU,U.Box2=m,U.Box3=W,U.Camera=Xe,U.CameraManipulator=Pe,U.Circle=cF,U.Color=B,U.ColorAttribute=nF,U.ColorOperatorInput=class extends xU{},U.ColorOperatorOutput=class extends GU{},U.ColorParameter=SU,U.Cone=EF,U.Cross=mF,U.Cuboid=pF,U.CuttingPlane=ve,U.Cylinder=uF,U.DataImage=TF,U.Disc=NF,U.EnvMap=qF,U.EnvMapShader=Jt,U.EnvProjectionShader=OQ,U.EulerAngles=V,U.EventEmitter=k,U.FRAMEBUFFER=UQ,U.FatLinesMaterial=te,U.FatLinesShader=jQ,U.FatPointsMaterial=Qe,U.FatPointsShader=Ql,U.FileImage=XF,U.FileImage2D=class extends XF{constructor(U,F={}){console.warn("FileImage2D is becoming deprecated in favor of simple FileImage"),super(U,F)}},U.FilePathParameter=zU,U.FlatSurfaceMaterial=le,U.FlatSurfaceShader=qQ,U.Float32=6,U.Frustum=class{constructor(U,F,e,t,Q,l){this.planes=[U||new E,F||new E,e||new E,t||new E,Q||new E,l||new E]}setFromMatrix(U){const F=U,e=this.planes;e[0].set(F.m03-F.m00,F.m13-F.m10,F.m23-F.m20,F.m33-F.m30),e[1].set(F.m03+F.m00,F.m13+F.m10,F.m23+F.m20,F.m33+F.m30),e[2].set(F.m03+F.m01,F.m13+F.m11,F.m23+F.m21,F.m33+F.m31),e[3].set(F.m03-F.m01,F.m13-F.m11,F.m23-F.m21,F.m33-F.m31),e[4].set(F.m03-F.m02,F.m13-F.m12,F.m23-F.m22,F.m33-F.m32),e[5].set(F.m03+F.m02,F.m13+F.m12,F.m23+F.m22,F.m33+F.m32),e.forEach((U=>U.normalizeInPlace()))}intersectsBox(U){const F=new i,e=this.planes,{min:t,max:Q}=U;for(let U=0;U<6;U++){const l=e[U];if(F.x=l.normal.x>0?Q.x:t.x,F.y=l.normal.y>0?Q.y:t.y,F.z=l.normal.z>0?Q.z:t.z,l.distanceToPoint(F)<0)return!1}return!0}toJSON(){return{p0:this.planes[0].toJSON(),p1:this.planes[1].toJSON(),p2:this.planes[2].toJSON(),p3:this.planes[3].toJSON(),p4:this.planes[4].toJSON(),p5:this.planes[5].toJSON()}}fromJSON(U){this.planes[0].fromJSON(U.p0),this.planes[1].fromJSON(U.p1),this.planes[2].fromJSON(U.p2),this.planes[3].fromJSON(U.p3),this.planes[4].fromJSON(U.p4),this.planes[5].fromJSON(U.p5)}toString(){return a.stringifyJSONWithFixedPrecision(this.toJSON())}},U.GIFImage=AF,U.GLBaseViewport=FQ,U.GLBillboardsPass=pl,U.GLBoundingBoxPass=class extends Ke{constructor(){super(),this.boxes=[],this.dirtyBoxes=new Set,this.freeIndices=[],this.idToIndex=[],this.drawCount=0,this.indexArrayUpdateNeeded=!1,this.__updateRequested=!1,this.__modelMatrixArray=[],this.__treeitemDataArray=[],this.__tintColorArray=[],this.__indexArray=new Float32Array(0),this.__width=0}getPassType(){return ze.OPAQUE}init(U,F){super.init(U,F);const e=this.__renderer.gl;this.glgeom=new WQ(e,new SF(1,1,1)),this.glshader=new Nl(e)}itemAddedToScene(U,F){return!1}itemRemovedFromScene(U,F){return!1}addTreeItem(U,F=!0){if(U instanceof DU&&(this.bindTreeItem(U),F)){for(const F of U.getChildren())F&&this.addTreeItem(F);U.on("childAdded",(U=>{this.addTreeItem(U.childItem)})),U.on("childRemoved",(U=>{this.unbindTreeItem(U.childItem)}))}}bindTreeItem(U){let F,e=this.freeIndices.pop();F=e||this.boxes.length,this.idToIndex[U.getId()]=F;const t=()=>{U.isVisible()?(this.drawCount++,this.dirtyBoxes.add(F)):this.drawCount--,this.indexArrayUpdateNeeded=!0};U.on("visibilityChanged",t);const Q=()=>{U.isVisible()&&(this.dirtyBoxes.add(F),this.emit("updated"))};U.globalXfoParam.on("valueChanged",Q),U.boundingBoxParam.on("valueChanged",Q),U.isVisible()&&this.drawCount++,this.boxes[F]={treeitem:U,visibilityChanged:t,xfoChanged:Q},this.indexArrayUpdateNeeded=!0,this.__updateRequested=!0,this.emit("updated")}unbindTreeItem(U){if(!(U.getId()in this.idToIndex))return void console.warn("Billboard already removed.");const F=this.idToIndex[U.getId()],e=this.boxes[F];U.off("visibilityChanged",e.visibilityChanged),U.globalXfoParam.off("valueChanged",e.xfoChanged),U.boundingBoxParam.off("valueChanged",e.xfoChanged),this.boxes[F]=null,this.freeIndices.push(F),U.isVisible()&&this.drawCount--,this.indexArrayUpdateNeeded=!0,this.__updateRequested=!0,this.__updateBoxes(),this.emit("updated")}__populateBoxesDataArray(U,F,e){const t=U.treeitem,Q=t.globalXfoParam,l=t.geomMatParam,n=l?new B(1,0,0,1):new B(0,0,1,1),a=l?l.value:Q.value.toMat4(),d=t.boundingBoxParam.value,i=6*F*4,R=new s(new Float32Array(e.buffer,4*i,4)),V=new s(new Float32Array(e.buffer,4*(i+4),4)),r=new s(new Float32Array(e.buffer,4*(i+8),4)),h=new s(new Float32Array(e.buffer,4*(i+12),4)),o=new s(new Float32Array(e.buffer,4*(i+16),4)),J=new s(new Float32Array(e.buffer,4*(i+20),4));R.set(a.xAxis.x,a.yAxis.x,a.zAxis.x,a.translation.x),V.set(a.xAxis.y,a.yAxis.y,a.zAxis.y,a.translation.y),r.set(a.xAxis.z,a.yAxis.z,a.zAxis.z,a.translation.z),h.set(d.p0.x,d.p0.y,d.p0.z,0),o.set(d.p1.x,d.p1.y,d.p1.z,0),J.set(n.r,n.g,n.b,n.a)}__updateIndexArray(){const U=this.__gl;this.__indexArray&&this.__indexArray.length!=this.drawCount&&(U.deleteBuffer(this.__instanceIdsBuffer),this.__instanceIdsBuffer=void 0),this.__indexArray=new Float32Array(this.drawCount);let F=0;for(let U=0;U<this.boxes.length;U++)this.boxes[U]&&this.boxes[U].treeitem.isVisible()&&(this.__indexArray[F]=U,F++);this.__instanceIdsBuffer||(this.__instanceIdsBuffer=U.createBuffer()),U.bindBuffer(U.ARRAY_BUFFER,this.__instanceIdsBuffer),U.bufferData(U.ARRAY_BUFFER,this.__indexArray,U.STATIC_DRAW),this.indexArrayUpdateNeeded=!1}__updateBoxes(){this.indexArrayUpdateNeeded&&this.__updateIndexArray();const U=this.__renderer.gl;let F=Math.round(Math.sqrt(6*(this.boxes.length-this.freeIndices.length))+.5);F%6!=0&&(F+=6-F%6),this.__width=F,this.__drawItemsTexture?this.__drawItemsTexture.resize(F,F):(this.__drawItemsTexture=new Ae(U,{format:"RGBA",type:"FLOAT",width:F,height:F,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.__drawItemsTexture.clear()),this.__indexArray.forEach((U=>{-1!=U&&this.__updateBox(U)})),this.__updateRequested=!1}__updateBox(U){if(0==this.drawCount||!this.__drawItemsTexture)return;const F=this.boxes[U];if(!F.treeitem.isVisible())return;const e=this.__gl,t=new Float32Array(24);this.__populateBoxesDataArray(F,0,t),e.bindTexture(e.TEXTURE_2D,this.__drawItemsTexture.glTex);const Q=6*U%this.__width,l=Math.floor(6*U/this.__width),n=this.__drawItemsTexture.getType(),a=this.__drawItemsTexture.getFormat();if(n==e.FLOAT)e.texSubImage2D(e.TEXTURE_2D,0,Q,l,6,1,a,n,t);else{const U=J.convertFloat32ArrayToUInt16Array(t);e.texSubImage2D(e.TEXTURE_2D,0,Q,l,6,1,a,n,U)}}draw(U){if(0==this.drawCount)return;this.__updateRequested&&this.__updateBoxes(),this.dirtyBoxes.size>0&&(this.dirtyBoxes.forEach((U=>{this.__updateBox(U)})),this.dirtyBoxes.clear()),this.indexArrayUpdateNeeded&&this.__updateIndexArray();const F=this.__gl;this.glshader.bind(U),this.glgeom.bind(U);const e=U.unifs;if(F.floatTexturesSupported&&F.drawElementsInstanced){this.__drawItemsTexture.bindToUniform(U,e.instancesTexture),F.uniform1i(e.instancesTextureSize.location,this.__width);{const e=U.attrs.instanceIds.location;F.enableVertexAttribArray(e),F.bindBuffer(F.ARRAY_BUFFER,this.__instanceIdsBuffer),F.vertexAttribPointer(e,1,F.FLOAT,!1,4,0),F.vertexAttribDivisor(e,1)}U.bindViewports(e,(()=>{this.glgeom.drawInstanced(U,this.drawCount)}))}else{const t=this.__indexArray.length;for(let Q=0;Q<t;Q++)U.bindViewports(e,(()=>{F.drawQuad()}))}}},U.GLFbo=Qt,U.GLGeom=qt,U.GLGeomItem=uQ,U.GLGeomItemChangeType={GEOMITEM_CHANGED:0,GEOM_CHANGED:1,VISIBILITY_CHANGED:2,HIGHLIGHT_CHANGED:3},U.GLGeomItemFlags=pQ,U.GLGeomItemSet=kQ,U.GLLines=WQ,U.GLLinesPass=ml,U.GLMaterial=cQ,U.GLMaterialGeomItemSets=bQ,U.GLMesh=$t,U.GLOpaqueGeomsPass=Zl,U.GLOverlayPass=ul,U.GLPass=Ke,U.GLPoints=SQ,U.GLRenderTarget=lt,U.GLRenderer=HQ,U.GLShader=tt,U.GLShaderMaterials=CQ,U.GLStandardGeomsPass=Bl,U.GLTexture2D=Ae,U.GLTransparentGeomsPass=Sl,U.GLViewport=QQ,U.GeomItem=he,U.GeomLibrary=Ne,U.GeometryParameter=wU,U.Grid=WF,U.GridTreeItem=De,U.GrowingPacker=C,U.IGeomShaderBinding=dt,U.ImageParameter=NU,U.InstanceItem=Re,U.ItemEvent=YU,U.ItemSetParameter=_U,U.KinematicGroup=xe,U.LDRImage=gF,U.LDRVideo=IF,U.Label=Fe,U.LabelManager=$F,U.LatLongEnvProjectionShader=class extends OQ{constructor(U){super(U),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'envmap-equirect.glsl'\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\n\nuniform color envMap;\nuniform sampler2D envMapTex;\nuniform int envMapTexType;\n\nuniform float exposure;\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec2 texCoord = latLongUVsFromDir(normalize(v_worldDir));\n  vec4 env = getColorParamValue(envMap, envMapTex, envMapTexType, texCoord);\n  fragColor = vec4(env.rgb/env.a, 1.0);\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb * exposure);\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}},U.Lines=dF,U.LinesCuboid=SF,U.LinesMaterial=ne,U.LinesProxy=BF,U.LinesShader=Ul,U.ListParameter=CU,U.Mat3=r,U.Mat3OperatorInput=class extends xU{},U.Mat3OperatorOutput=class extends GU{},U.Mat3Parameter=EU,U.Mat4=h,U.Mat4OperatorInput=class extends xU{},U.Mat4OperatorOutput=yU,U.Mat4Parameter=pU,U.Material=qU,U.MaterialColorParam=PU,U.MaterialFloatParam=HU,U.MaterialGroup=fe,U.MaterialLibrary=ke,U.MaterialParameter=$U,U.MathFunctions=J,U.Mesh=iF,U.MeshProxy=VF,U.MultiChoiceParameter=oU,U.NormalsShader=class extends tt{constructor(U){super(U,"NormalsShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\ninstancedattribute vec3 positions;\ninstancedattribute vec3 normals;\nattribute vec2 vertexIDs;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\nuniform float normalLength;\n\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying float v_weight;\n\nvoid main(void) {\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;\n  if (vertexIDs.x == 0.0) {\n    gl_Position = modelViewProjectionMatrix * vec4(positions, 1.0);\n    v_weight = 1.0;\n  }\n  else {\n    gl_Position = modelViewProjectionMatrix * vec4(positions+(normals*normalLength), 1.0);\n    v_weight = 0.0;\n  }\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform color normalColor;\n\n/* VS Outputs */\nvarying float v_weight;\n\nvoid main(void) {\n  gl_FragColor = normalColor;\n  gl_FragColor.a = v_weight;\n}\n")}},U.NumberOperatorInput=class extends xU{},U.NumberOperatorOutput=class extends GU{},U.NumberParameter=hU,U.ObjAsset=class extends Ce{constructor(U){super(U),this.splitObjects=new JU("splitObjects",!1),this.splitGroupsIntoObjects=new JU("splitGroupsIntoObjects",!1),this.loadMtlFile=new JU("loadMtlFile",!0),this.unitsConversion=new hU("unitsConversion",1),this.defaultShader=new kU("defaultShader",""),this.splitObjectsParam=new JU("splitObjects",!1),this.splitGroupsIntoObjectsParam=new JU("splitGroupsIntoObjects",!1),this.loadMtlFileParam=new JU("loadMtlFile",!0),this.unitsConversionParam=new hU("unitsConversion",1),this.defaultShaderParam=new kU("defaultShader",""),this.addParameter(this.splitObjectsParam),this.addParameter(this.splitGroupsIntoObjectsParam),this.addParameter(this.loadMtlFileParam),this.addParameter(this.unitsConversionParam),this.addParameter(this.defaultShaderParam)}load(U){return this.loaded=!1,new Promise(((F,e)=>{const t=U.substring(0,U.lastIndexOf("/"))+"/",Q=U=>new Promise((F=>{$(U,(U=>{nU.incrementWorkDone(1),(U=>{const F=U.split("\n"),e=/\s+/;for(let U=0;U<F.length;U++){let t=F[U].trim();if(t.startsWith("#"))continue;t.includes("#")&&(t=t.substring(0,t.indexOf("#")).trim());const Q=t.split(e);throw Q.shift(),Q.join(" "),Error("no material defined.")}})(U),nU.incrementWorkDone(1),F()}))})),l=[],n=[],a=[],s={},R=U=>_e(this,void 0,void 0,(function*(){const F=U.split("\n"),e=/\s+/;let d,i,R=0;const B=U=>{if(U in s){let F=1;for(;U+String(F)in s;)F++;U+=String(F)}d={verticesRemapping:{},texCoordsRemapping:{},normalsRemapping:{},vertexIndices:[],texCoordIndices:[],normalIndices:[],numVertices:0,numTexCoords:0,numNormals:0,faceCounts:[],material:i},s[U]=d,R++};B("geom");const V=this.splitGroupsIntoObjectsParam.value;for(let U=0;U<F.length;U++){let r=F[U].trim();if(r.startsWith("#"))continue;r.includes("#")&&(r=r.substring(0,r.indexOf("#")).trim());const h=r.split(e),o=h.shift(),J=h.join(" ");switch(o){case"":case"s":continue;case"mtllib":if(!this.loadMtlFileParam.value)continue;nU.incrementWorkload(2);const U=t+J;U&&(yield Q(U));break;case"o":B(J);break;case"usemtl":i=J,B(J+Object.keys(s).length);break;case"g":V&&B(J?h.join("_"):"Group"+R);break;case"v":l.push(h.map((U=>parseFloat(U))));break;case"vt":a.push(h.map((U=>parseFloat(U))));break;case"vn":n.push(h.map((U=>parseFloat(U))));break;case"f":{const U=[],F=[],e=[];for(let t=0,Q=h.length;t<Q;t++){const Q=h[t].split("/").map((U=>parseInt(U)-1)),l=Q[0];let n=d.verticesRemapping[l];if(null==n&&(n=d.numVertices,d.verticesRemapping[l]=n,d.numVertices++),U.push(n),Q.length>1&&!isNaN(Q[1])){const U=Q[1];F.push(U)}if(Q.length>2&&!isNaN(Q[2])){const U=Q[2];e.push(U)}}d.vertexIndices.push(U),e.length>0&&d.normalIndices.push(e),F.length>0&&d.texCoordIndices.push(F),null==d.faceCounts[U.length-3]&&(d.faceCounts[U.length-3]=[]),d.faceCounts[U.length-3]++;break}default:console.warn("Unhandled line:"+r)}}})),B=()=>{for(const U in s)0!=s[U].numVertices&&V(U,s[U]);this.emit("loaded"),this.getGeometryLibrary().emit("loaded"),this.emit("geomsLoaded"),F()},V=(U,F)=>{for(let U=0;U<F.faceCounts.length;U++)null==F.faceCounts[U]&&(F.faceCounts[U]=0);const e=F.numVertices,t=new iF;t.setDebugName(U),t.setFaceCounts(F.faceCounts),t.setNumVertices(e);const Q=t.getVertexAttribute("positions"),s=this.unitsConversionParam.value;for(const U in F.verticesRemapping){const e=Number.parseInt(U),t=F.verticesRemapping[e];Q.getValueRef(t).set(l[e][0]*s,l[e][1]*s,l[e][2]*s)}let R,B;F.normalIndices.length>0&&(R=new eF,t.addVertexAttribute("normals",R)),F.texCoordIndices.length>0&&(B=new tF,t.addVertexAttribute("texCoords",B));const V=Array(F.faceCounts.length).fill(0);for(let U=0;U<F.vertexIndices.length;U++){const e=F.vertexIndices[U];let Q=0;for(let U=0;U<e.length-3;++U)F.faceCounts[U]&&(Q+=F.faceCounts[U]);if(Q+=V[e.length-3],V[e.length-3]++,t.setFaceVertexIndices(Q,e),R){const e=F.normalIndices[U];for(let U=0;U<e.length;U++){const F=new i(n[e[U]][0],n[e[U]][1],n[e[U]][2]);R.setFaceVertexValue(Q,U,F)}}if(B&&F.texCoordIndices.length==F.vertexIndices.length){const e=F.texCoordIndices[U];for(let U=0;U<e.length;U++){const F=new d(a[e[U]][0],a[e[U]][1]);B.setFaceVertexValue(Q,U,F)}}}const r=new he(U,t),h=t.getBoundingBox().center();{const U=h.negate(),F=t.getVertexAttribute("positions");for(let e=0;e<F.getCount();e++)F.getValueRef(e).addInPlace(U);t.setBoundingBoxDirty()}if(r.localXfoParam.value=new c(h),null!=F.material&&this.materialLibrary.hasMaterial(F.material))r.materialParam.value=this.materialLibrary.getMaterial(F.material);else{const F=this.defaultShaderParam.value,e=new qU(U+" mat");e.setShaderName(""!=F?F:"StandardSurfaceShader"),this.materialLibrary.addMaterial(e),r.materialParam.value=e}this.addChild(r,!1)};(()=>{nU.incrementWorkload(2),$(U,(U=>{nU.incrementWorkDone(1),R(U).then((()=>{B(),nU.incrementWorkDone(1)}))}),(U=>{this.emit("error",U),e(U)}))})()}))}},U.OctahedralEnvProjectionShader=class extends OQ{constructor(U){super(U),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'envmap-octahedral.glsl'\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\n\nuniform color envMap;\nuniform sampler2D envMapTex;\nuniform int envMapTexType;\n\nuniform float exposure;\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec2 texCoord = dirToSphOctUv(normalize(v_worldDir));\n  vec4 env = getColorParamValue(envMap, envMapTex, envMapTexType, texCoord);\n\n  fragColor = vec4(env.rgb/env.a, 1.0);\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb * exposure);\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}},U.Operator=IU,U.OperatorInput=xU,U.OperatorOutput=GU,U.POINTER_TYPES=X,U.Parameter=rU,U.ParameterOwner=K,U.PassType=ze,U.Plane=kF,U.PlaneType=E,U.PointGrid=JF,U.Points=aF,U.PointsMaterial=ae,U.PointsProxy=RF,U.PointsShader=el,U.ProceduralLines=hF,U.ProceduralMesh=oF,U.ProceduralPoints=rF,U.Quat=o,U.QuatOperatorInput=class extends xU{},U.QuatOperatorOutput=class extends GU{},U.QuatParameter=WU,U.RGBA=R,U.Ray=Z,U.Rect=ZF,U.RefCounted=_,U.Registry=n,U.ResourceLoader=lU,U.SInt16=3,U.SInt32=5,U.SInt8=1,U.Scene=class{constructor(){this.envMapParam=new NU("EnvMap"),this.displayEnvMapParam=new JU("Display EnvMap",!1),this.envMapLODParam=new hU("EnvMapLOD",0),this.root=new DU("root")}getRoot(){return this.root}getResourceLoader(){return nU}setEnvMap(U){this.envMapParam.value=U}setupGrid(U=5,F=50,e=Le){const t=new De(U,F,e);return this.root.addChild(t,!1),t}},U.ScreenQuadShader=jt,U.ScreenSpaceMaterial=de,U.ScreenSpaceShader=sl,U.SelectionSet=Je,U.ShaderLibrary=Ut,U.SimpleSurfaceMaterial=ie,U.SimpleSurfaceShader=nl,U.Sphere=bF,U.SphereType=S,U.StandardSurfaceMaterial=se,U.StandardSurfaceShader=dl,U.StringFunctions=a,U.StringListParameter=bU,U.StringParameter=kU,U.StructParameter=TU,U.SystemDesc=e,U.Torus=CF,U.Touch=f,U.TreeItem=DU,U.TreeItemParameter=LU,U.UInt16=2,U.UInt32=4,U.UInt8=0,U.UnpackHDRShader=nt,U.VLAAsset=Ye,U.VLHImage=yF,U.VRViewport=RQ,U.Vec2=d,U.Vec2Attribute=tF,U.Vec2OperatorInput=class extends xU{},U.Vec2OperatorOutput=class extends GU{},U.Vec2Parameter=ZU,U.Vec3=i,U.Vec3Attribute=eF,U.Vec3OperatorInput=class extends xU{},U.Vec3OperatorOutput=class extends GU{},U.Vec3Parameter=cU,U.Vec4=s,U.Vec4Attribute=lF,U.Vec4OperatorInput=class extends xU{},U.Vec4OperatorOutput=XU,U.Vec4Parameter=mU,U.Version=RU,U.VideoStreamImage2D=ee,U.XRControllerEvent=D,U.XRPoseEvent=L,U.Xfo=c,U.XfoOperatorInput=fU,U.XfoOperatorOutput=gU,U.XfoParameter=uU,U.ZeaMouseEvent=x,U.ZeaPointerEvent=y,U.ZeaTouchEvent=M,U.ZeaUIEvent=I,U.ZeaWheelEvent=v,U.create3DContext=Oe,U.genDataTypeDesc=at,U.generateShaderGeomBinding=Rt,U.getFileFolder=function(U){return U.substring(0,U.lastIndexOf("/"))+"/"},U.labelManager=Ue,U.libsRegistry=kl,U.loadBinfile=UU,U.loadJSONfile=function(U,F,e,t){q(U,"json",(U=>{F(U.response,U)}),(F=>{if(null==e)throw new Error("Unable to XHR File:"+U);e(F)}),t)},U.loadTextfile=$,U.loadXMLfile=function(U,F,e,t){q(U,"document",(U=>{F(U.responseXML)}),(F=>{if(null==e)throw new Error("Unable to XHR File:"+U);e(F)}),t)},U.packageJson=F,U.resourceLoader=nU,U.shaderLibrary=Ft,Object.defineProperty(U,"__esModule",{value:!0})}));
//# sourceMappingURL=index.umd.js.map
