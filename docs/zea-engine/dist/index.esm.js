function onResize(element, callback) {
  if (!onResize.watchedElementData) {
    // First time we are called, create a list of watched elements
    // and hook up the event listeners.
    onResize.watchedElementData = [];

    const checkForChanges = function() {
      onResize.watchedElementData.forEach(function(data) {
        if (data.element.offsetWidth !== data.offsetWidth ||
            data.element.offsetHeight !== data.offsetHeight) {
          data.offsetWidth = data.element.offsetWidth;
          data.offsetHeight = data.element.offsetHeight;
          data.callback();
        }
      });
    };

    // Listen to the window's size changes
    window.addEventListener('resize', checkForChanges);

    // Listen to changes on the elements in the page that affect layout 
    const observer = new MutationObserver(checkForChanges);
    observer.observe(document.body, { 
      attributes: true,
      childList: true,
      characterData: true,
      subtree: true 
    });
  }

  // Save the element we are watching
  onResize.watchedElementData.push({
    element: element,
    offsetWidth: element.offsetWidth,
    offsetHeight: element.offsetHeight,
    callback: callback
  });
}

function isIOSDevice() {
  return (
    (navigator.userAgent.match(/iPhone/i) ||
      navigator.userAgent.match(/iPad/i) ||
      navigator.userAgent.match(/iPod/i)) != null
  )
}

function isMobileDevice() {
  return (
    (navigator.userAgent.match(/Android/i) ||
      navigator.userAgent.match(/webOS/i) ||
      navigator.userAgent.match(/iPhone/i) ||
      navigator.userAgent.match(/iPad/i) ||
      navigator.userAgent.match(/iPod/i) ||
      navigator.userAgent.match(/BlackBerry/i) ||
      navigator.userAgent.match(/Pixel/i) ||
      navigator.userAgent.match(/Windows Phone/i)) != null
  )
}

function getBrowserDesc() {
  const nAgt = navigator.userAgent;
  let browserName = navigator.appName;
  let fullVersion = '' + parseFloat(navigator.appVersion);
  let majorVersion = parseInt(navigator.appVersion, 10);
  let nameOffset;
  let verOffset;
  let ix;

  // In Opera, the true version is after "Opera" or after "Version"
  if ((verOffset = nAgt.indexOf('Opera')) != -1) {
    browserName = 'Opera';
    fullVersion = nAgt.substring(verOffset + 6);
    if ((verOffset = nAgt.indexOf('Version')) != -1)
      fullVersion = nAgt.substring(verOffset + 8);
  }
  // In MSIE, the true version is after "MSIE" in userAgent
  else if ((verOffset = nAgt.indexOf('MSIE')) != -1) {
    browserName = 'Microsoft Internet Explorer';
    fullVersion = nAgt.substring(verOffset + 5);
  } else if ((verOffset = nAgt.indexOf('Edge')) != -1) {
    browserName = 'Edge';
    fullVersion = nAgt.substring(verOffset + 4);
  }
  // In Chrome, the true version is after "Chrome"
  else if ((verOffset = nAgt.indexOf('Chrome')) != -1) {
    browserName = 'Chrome';
    fullVersion = nAgt.substring(verOffset + 7);
  }

  // TOOD: Parse Samsung userAgent
  // https://developer.samsung.com/technical-doc/view.do?v=T000000203

  // In Safari, the true version is after "Safari" or after "Version"
  else if ((verOffset = nAgt.indexOf('Safari')) != -1) {
    browserName = 'Safari';
    fullVersion = nAgt.substring(verOffset + 7);
    if ((verOffset = nAgt.indexOf('Version')) != -1)
      fullVersion = nAgt.substring(verOffset + 8);
  }
  // In Firefox, the true version is after "Firefox"
  else if ((verOffset = nAgt.indexOf('Firefox')) != -1) {
    browserName = 'Firefox';
    fullVersion = nAgt.substring(verOffset + 8);
  }
  // In most other browsers, "name/version" is at the end of userAgent
  else if (
    (nameOffset = nAgt.lastIndexOf(' ') + 1) <
    (verOffset = nAgt.lastIndexOf('/'))
  ) {
    browserName = nAgt.substring(nameOffset, verOffset);
    fullVersion = nAgt.substring(verOffset + 1);
    if (browserName.toLowerCase() == browserName.toUpperCase()) {
      browserName = navigator.appName;
    }
  }
  // trim the fullVersion string at semicolon/space if present
  if ((ix = fullVersion.indexOf(';')) != -1)
    fullVersion = fullVersion.substring(0, ix);
  if ((ix = fullVersion.indexOf(' ')) != -1)
    fullVersion = fullVersion.substring(0, ix);

  majorVersion = parseInt('' + fullVersion, 10);
  if (isNaN(majorVersion)) {
    fullVersion = '' + parseFloat(navigator.appVersion);
    majorVersion = parseInt(navigator.appVersion, 10);
  }

  return {
    browserName,
    fullVersion,
    majorVersion,
    appName: navigator.appName,
    userAgent: navigator.userAgent,
  }
}

function getGPUDesc() {
  let webgl;
  try {
    webgl = document.createElement('canvas').getContext('webgl');
  } catch (e) {}
  if (!webgl) return
  let webgl2;
  try {
    webgl2 = document.createElement('canvas').getContext('webgl2');
  } catch (e) {}

  const debugInfo = webgl.getExtension('WEBGL_debug_renderer_info');
  if (!debugInfo) {
    console.warn('Unable to determine GPU Info:');
    return {
      vendor: "Unknown",
      renderer: "Unknown",
      gpuVendor: "Unknown",
      maxTextureSize: "Unknown",
      supportsWebGL2: webgl2 != undefined,
    }
  }

  const vendor = webgl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL);
  const renderer = webgl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);
  const maxTextureSize = webgl.getParameter(webgl.MAX_TEXTURE_SIZE);
  let gpuVendor;
  if (renderer.match(/NVIDIA/i)) {
    gpuVendor = 'NVidia';
  } else if (renderer.match(/AMD/i) || renderer.match(/Radeon/i)) {
    gpuVendor = 'AMD';
  } else if (renderer.match(/Intel/i)) {
    gpuVendor = 'Intel';
  } else if (renderer.match(/Mali/i)) {
    gpuVendor = 'ARM';
  } else if (renderer.match(/Adreno/i)) {
    gpuVendor = 'Adreno';
  } else {
    console.warn('Unable to determine GPU vendor:', renderer);
  }

  return {
    vendor,
    renderer,
    gpuVendor,
    maxTextureSize,
    supportsWebGL2: webgl2 != undefined,
  }
}

function getSystemDesc() {
  const isMobile = isMobileDevice();
  const browserDesc = getBrowserDesc();
  const gpuDesc = getGPUDesc();

  let deviceCategory = 'Low';
  if (gpuDesc) {
    // We divide devices into 3 categories.
    // 0: low end, we dial everything down as much as possible
    // 1: mid-range, Enb maps and Textures go to mid-lods.
    //    Typically these devices are laptops, so the textures can't be too blurry
    // 2: High-end: turn up as much as needed.
    if (!isMobile) {
      // Remove braces and split into parts
      const parts = gpuDesc.renderer.replace(/[()]/g, '').split(' ');
      if (gpuDesc.gpuVendor == 'NVidia') {
        const gtxIdx = parts.indexOf('GTX');
        if (gtxIdx != -1) {
          const model = parts[gtxIdx + 1];
          if (model.endsWith('M')) {
            // laptop GPU.
            const modelNumber = parseInt(model.substring(0, model.length - 2));
            if (modelNumber >= 900) {
              deviceCategory = 'Medium';
            } else {
              deviceCategory = 'Low';
            }
          } else {
            const modelNumber = parseInt(model);
            if (modelNumber >= 1030) {
              deviceCategory = 'High';
            } else {
              deviceCategory = 'Medium';
            }
          }
        } else {
          if (parts.indexOf('TITAN') != -1 || parts.indexOf('Quadro') != -1) {
            deviceCategory = 'High';
          } else {
            deviceCategory = 'Low';
          }
        }
      } else if (gpuDesc.gpuVendor == 'AMD') {
        const radeonIdx = parts.indexOf('Radeon');
        if (radeonIdx != -1) {
          const rxIdx = parts.indexOf('RX');
          if (rxIdx != -1) {
            if (parts[rxIdx + 1] == 'Vega') {
              deviceCategory = 'High';
            } else {
              const model = parts[rxIdx + 1];
              let modelNumber;
              if (model.endsWith('X')) {
                modelNumber = parseInt(model.substring(0, model.length - 2));
                deviceCategory = 'High';
              } else {
                modelNumber = parseInt(model);
              }

              if (modelNumber >= 480) {
                deviceCategory = 'High';
              } else {
                deviceCategory = 'Medium';
              }
            }
          } else if (parts[radeonIdx + 1] == 'Pro') {
            const modelNumber = parseInt(parts[rxIdx + 1]);
            if (modelNumber >= 450) {
              deviceCategory = 'Medium';
            } else {
              deviceCategory = 'Low';
            }
          } else if (parts[radeonIdx + 1] == 'Sky') {
            const modelNumber = parseInt(parts[rxIdx + 1]);
            if (modelNumber >= 700) {
              deviceCategory = 'Medium';
            } else {
              deviceCategory = 'Low';
            }
          } else {
            deviceCategory = 'Low';
          }
        } else {
          if (parts.indexOf('FirePro') != -1 || parts.indexOf('Quadro') != -1) {
            deviceCategory = 'High';
          } else {
            deviceCategory = 'Low';
          }
        }
      } else if (gpuDesc.gpuVendor == 'Adreno') {
        deviceCategory = 'Low';
      } else if (gpuDesc.gpuVendor == 'Intel') {
        deviceCategory = 'Low';
      }
    } else {
      deviceCategory = 'Low';
    }
  }

  return {
    isMobileDevice: isMobile,
    isIOSDevice: isIOSDevice(),
    browserName: browserDesc.browserName,
    fullVersion: browserDesc.fullVersion,
    majorVersion: browserDesc.majorVersion,
    appName: browserDesc.appName,
    userAgent: browserDesc.userAgent,
    webGLSupported: gpuDesc != undefined,
    gpuDesc,
    deviceCategory,
  }
}

const SystemDesc = getSystemDesc();

var BrowserDetection = /*#__PURE__*/Object.freeze({
  __proto__: null,
  SystemDesc: SystemDesc
});

const DEGTORAD = Math.PI / 180;
Math.HALF_PI = Math.PI * 0.5;
Math.TWO_PI = Math.PI * 2.0;
// Defines used to explicity specify types for WebGL.
const UInt8 = 0;
const SInt8 = 1;
const UInt16 = 2;
const SInt16 = 3;
const UInt32 = 4;
const SInt32 = 5;
const Float32 = 6;

Math.radToDeg = function(rad) {
  return rad / DEGTORAD
};
Math.degToRad = function(deg) {
  return deg * DEGTORAD
};

Number.isNumeric = n => {
  return !isNaN(parseFloat(n)) && isFinite(n)
};

String.prototype.replaceAll = function(search, replacement) {
  const target = this;
  return target.replace(new RegExp(search, 'g'), replacement)
};

const hashStr = function(str) {
  let hash = 0;
  let i;
  let chr;
  let len;
  if (str.length === 0) return hash
  for (i = 0, len = str.length; i < len; i++) {
    chr = str.charCodeAt(i);
    hash = (hash << 5) - hash + chr;
    hash |= 0; // Convert to 32bit integer
  }
  return Math.abs(hash)
};

String.prototype.hash = function() {
  return hashStr(this)
};

// trimming space from both side of the string
String.prototype.trim = function() {
  return this.replace(/^\s+|\s+$/g, '')
};

// trimming space from left side of the string
String.prototype.ltrim = function() {
  return this.replace(/^\s+/, '')
};

// trimming space from right side of the string
String.prototype.rtrim = function() {
  return this.replace(/\s+$/, '')
};

// pads left
String.prototype.lpad = function(padString, length) {
  let str = this;
  while (str.length < length) str = padString + str;
  return str
};

// pads right
String.prototype.rpad = function(padString, length) {
  let str = this;
  while (str.length < length) str = str + padString;
  return str
};

function JSON_stringify_fixedPrecision(val, space = 0, precision = 5) {
  return JSON.stringify(
    val,
    function(key, val) {
      return val ? (val.toFixed ? Number(val.toFixed(precision)) : val) : val
    },
    space
  )
}

Math.randomInt = function(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min)) + min
};

Math.lerp = (a, b, t) => {
  return a + t * (b - a)
};

Math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max)
};

Math.nearestPow2 = function(value) {
  return Math.pow(2, Math.round(Math.log(value) / Math.log(2)))
};

Math.nearestPow10 = function(value) {
  return Math.pow(10, Math.round(Math.log10(value) / Math.log10(10)))
};

Math.nextPow2 = function(value) {
  let exp = 0;
  while (value > 0) {
    exp++;
    value = value >> 1;
  }
  return 1 << exp
};
Math.fract = function(value) {
  if (value == 0) return 0
  if (value < 0) {
    if (value > -1.0) return -value
    return -value % Math.floor(-value)
  }
  if (value < 1.0) return value
  return value % Math.floor(value)
};

Math.remap = function(value, start1, end1, start2, end2) {
  return start2 + (end2 - start2) * ((value - start1) / (end1 - start1))
};

// https://stackoverflow.com/questions/32633585/how-do-you-convert-to-half-floats-in-javascript
/* This method is faster than the OpenEXR implementation (very often
 * used, eg. in Ogre), with the additional benefit of rounding, inspired
 * by James Tursa?s half-precision code. */
Math.convertFloat32ArrayToUInt16Array = function(float32Array) {
  const unit16s = new Uint16Array(float32Array.length);
  const int32View = new Int32Array(float32Array.buffer);
  const toUInt16 = x => {
    let bits = (x >> 16) & 0x8000; /* Get the sign */
    let m = (x >> 12) & 0x07ff; /* Keep one extra bit for rounding */
    const e = (x >> 23) & 0xff; /* Using int is faster here */

    /* If zero, or denormal, or exponent underflows too much for a denormal
     * half, return signed zero. */
    if (e < 103) {
      return bits
    }

    /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */
    if (e > 142) {
      bits |= 0x7c00;
      /* If exponent was 0xff and one mantissa bit was set, it means NaN,
       * not Inf, so make sure we set one mantissa bit too. */
      bits |= (e == 255 ? 0 : 1) && x & 0x007fffff;
      return bits
    }

    /* If exponent underflows but not too much, return a denormal */
    if (e < 113) {
      m |= 0x0800;
      /* Extra rounding may overflow and set mantissa to 0 and exponent
       * to 1, which is OK. */
      bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);
      return bits
    }

    bits |= ((e - 112) << 10) | (m >> 1);
    /* Extra rounding. An overflow will set mantissa to 0 and increment
     * the exponent, which is OK. */
    bits += m & 1;

    return bits
  };
  for (let i = 0; i < float32Array.length; i++) {
    unit16s[i] = toUInt16(int32View[i]);
  }
  return unit16s
};

// ///////////////////////////////////////////////
// https://gist.github.com/Flexi23/1713774
// Note: assuemd inputs are a pair of bytes, likely generated in GLSL.
// Code converted to using bit masks in JavaScript.
Math.decode16BitFloatFrom2xUInt8 = c => {
  const ix = c[0]; // 1st byte: 1 bit signum, 4 bits exponent, 3 bits mantissa (MSB)
  const iy = c[1]; // 2nd byte: 8 bit mantissa (LSB)

  const s = ix & 0x80 ? 1 : -1; // get bit 8
  const iexp = (ix & 0x78) >> 3; // mask bits 7-4
  const msb = ix & 0x7; // mask bits 3-1

  let norm = iexp == 0 ? 0 : 2048; // distinguish between normalized and subnormalized numbers
  const mantissa = norm + (msb << 8) + iy; // implicite preceding 1 or 0 added here
  norm = iexp == 0 ? 1 : 0; // normalization toggle
  const exponent = Math.pow(2, iexp + norm - 16); // -5 for the the exponent bias from 2^-5 to 2^10 plus another -11 for the normalized 12 bit mantissa
  const v = s * mantissa * exponent;

  return v
};

Math.encode16BitFloatInto2xUInt8 = v => {
  if (!c) c = new Uint8Array(2);
  // const c = [0, 0];
  const signum = v >= 0 ? 128 : 0;
  v = Math.abs(v);
  let exponent = 15;
  let limit = 1024; // considering the bias from 2^-5 to 2^10 (==1024)
  for (let exp = 15; exp > 0; exp--) {
    if (v < limit) {
      limit /= 2;
      exponent--;
    }
  }

  let rest;
  if (exponent == 0) {
    rest = v / limit / 2; // "subnormalize" implicite preceding 0.
  } else {
    rest = (v - limit) / limit; // normalize accordingly to implicite preceding 1.
  }

  const mantissa = Math.round(rest * 2048); // 2048 = 2^11 for the (split) 11 bit mantissa
  const msb = mantissa / 256; // the most significant 3 bits go into the lower part of the first byte
  const lsb = mantissa - msb * 256; // there go the other 8 bit of the lower significance

  c[0] = signum + exponent * 8 + msb; // color normalization for texture2D
  c[1] = lsb;

  if (v >= 2048) {
    c[0] = 255;
  }

  return c
};

Math.encode16BitFloat = v => {
  const float32Array = new Float32Array(1);
  float32Array[0] = v;
  const int32View = new Int32Array(float32Array.buffer);

  const toUInt16 = x => {
    let bits = (x >> 16) & 0x8000; /* Get the sign */
    let m = (x >> 12) & 0x07ff; /* Keep one extra bit for rounding */
    const e = (x >> 23) & 0xff; /* Using int is faster here */

    /* If zero, or denormal, or exponent underflows too much for a denormal
     * half, return signed zero. */
    if (e < 103) {
      return bits
    }

    /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */
    if (e > 142) {
      bits |= 0x7c00;
      /* If exponent was 0xff and one mantissa bit was set, it means NaN,
       * not Inf, so make sure we set one mantissa bit too. */
      bits |= (e == 255 ? 0 : 1) && x & 0x007fffff;
      return bits
    }

    /* If exponent underflows but not too much, return a denormal */
    if (e < 113) {
      m |= 0x0800;
      /* Extra rounding may overflow and set mantissa to 0 and exponent
       * to 1, which is OK. */
      bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);
      return bits
    }

    bits |= ((e - 112) << 10) | (m >> 1);
    /* Extra rounding. An overflow will set mantissa to 0 and increment
     * the exponent, which is OK. */
    bits += m & 1;

    return bits
  };

  return toUInt16(int32View[0])
};

// https://stackoverflow.com/questions/5678432/decompressing-half-precision-floats-in-javascript
// Note: faster version available, but might not matter.
Math.decode16BitFloat = h => {
  const s = (h & 0x8000) >> 15;
  const e = (h & 0x7c00) >> 10;
  const f = h & 0x03ff;

  if (e == 0) {
    return (s ? -1 : 1) * Math.pow(2, -14) * (f / Math.pow(2, 10))
  } else if (e == 0x1f) {
    return f ? NaN : (s ? -1 : 1) * Infinity
  }

  return (s ? -1 : 1) * Math.pow(2, e - 15) * (1 + f / Math.pow(2, 10))
};

Math.smoothStep = (edge0, edge1, x) => {
  const t = Math.clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);
  return t * t * (3.0 - 2.0 * t)
};

Math.linStep = (edge0, edge1, x) => {
  return Math.clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0)
};

/**
 * A base class for values that can be stored in vertex attributes.
 * Note: these values use Float32Array values to store their data,
 * and we can create references to values in attributes using
 */
class AttrValue {
  /**
   * The isValid method.
   * @return {boolean} - Returns the result as a boolean.
   */
  isValid() {
    for (const v of this.__data) {
      if (v == Infinity || isNaN(v)) return false
    }
    return true
  }

  /**
   * Creates a new value to wrap memory in an existing buffer.
   * @param {ArrayBuffer} buffer - the buffer value.
   * @param {number} offset - the offset value.
   */
  static createFromFloat32Buffer(buffer, offset) {
    throw new Error(
      'Not yet implemented for this type:' + this.constructor.name
    )
  }

  /**
   * Returns the number of Float32 elements used by this type. Used to calculate storage requirements for large arrays of this type.
   */
  static numElements() {
    throw new Error(
      'Not yet implemented for this type:' + this.constructor.name
    )
  }

  /**
   * Returns the type as an array. Often used to pass types to the GPU.
   * @return {array} - Returns the result as an array.
   */
  asArray() {
    return this.__data
  }

  /**
   * The toString method.
   * @return {any} - The return value.
   */
  toString() {
    return JSON_stringify_fixedPrecision(this.toJSON())
  }
}

/** Class representing a type registry. 
 * @private
*/
class TypeRegistry {
  /**
   * Create a a type registry.
   */
  constructor() {
    this.__types = {};
    this.__names = {};

    // Types required for WebGL.
    this.registerType('SInt32', SInt32);
    this.registerType('UInt32', UInt32);
    this.registerType('Float32', Float32);
  }

  /**
   * The registerType method.
   * @param {any} key - The key value.
   * @param {any} type - The type value.
   */
  registerType(key, type) {
    this.__types[key] = type;
    if (type.name) this.__names[type.name] = key;
    else this.__names[type] = key;
  }

  /**
   * The getType method.
   * @param {any} key - The key value.
   * @return {any} - The return value.
   */
  getType(key) {
    return this.__types[key]
  }

  /**
   * The getTypeName method.
   * @param {any} type - The type value.
   * @return {any} - The return value.
   */
  getTypeName(type) {
    if (this.__names[type]) return this.__names[type]
    if (this.__names[type.name]) return this.__names[type.name]
    throw (type)
  }
}

const typeRegistry = new TypeRegistry();

/** Class representing a Vec2. A Vec2 represents a two-dimensional coordinate.
 * Vector classes in zea-engine internally store values in Float32Arrays and
 * expose getters and setters for the component values.
 * @extends AttrValue
 */
class Vec2 extends AttrValue {
  /**
   * Create a Vec2.
   * @param {number} x - The x value. Default is 0.
   * @param {number} y - The y value. Default is 0.
   */
  constructor(x = 0, y = 0) {
    super();

    if (
      x instanceof Float32Array ||
      x instanceof Uint32Array ||
      x instanceof Int32Array
    ) {
      this.__data = x;
    } else if (x instanceof ArrayBuffer) {
      const buffer = x;
      const byteOffset = y;
      this.__data = new Float32Array(buffer, byteOffset, 2);
    } else if (x != null && typeof x == 'object') {
      this.__data = new Float32Array(2);
      this.fromJSON(x);
    } else {
      this.__data = new Float32Array(2);
      this.__data[0] = x;
      this.__data[1] = y;
    }
  }

  /**
   * Getter for x value.
   * @return {number} - Returns the x value.
   */
  get x() {
    return this.__data[0]
  }

  /**
   * Setter for x value.
   * @param {number} val - The val param.
   */
  set x(val) {
    this.__data[0] = val;
  }

  /**
   * Getter for y value.
   * @return {number} - Returns the y value.
   */
  get y() {
    return this.__data[1]
  }

  /**
   * Setter for y value.
   * @param {number} val - The val param.
   */
  set y(val) {
    this.__data[1] = val;
  }

  /**
   * Setter from scalar components.
   * @param {number} x - The x value.
   * @param {number} y  - The y value.
   */
  set(x, y) {
    this.__data[0] = x;
    this.__data[1] = y;
  }

  /**
   * Setter from another Vec2.
   * @param {Vec2} other - The other Vec2 to set from.
   */
  setFromOther(other) {
    this.x = other.x;
    this.y = other.y;
  }

  /**
   * Returns true if this Vec2 is exactly the same as other.
   * @param {Vec2} other - The other Vec2 to compare with.
   * @return {boolean} - Returns true or false.
   */
  equal(other) {
    return this.x == other.x && this.y == other.y
  }

  /**
   * Returns true if this vector is NOT exactly the same as other.
   * @param {Vec2} other - The other Vec2 to compare with.
   * @return {boolean} - Returns true or false.
   */
  notEquals(other) {
    return this.x != other.x && this.y != other.y
  }

  /**
   * Returns true if this Vec2 is approximately the same as other.
   * @param {Vec2} other - The other Vec2 to compare with.
   * @param {number} precision - The precision to which the values must match.
   * @return {boolean} - Returns true or false.
   */
  approxEqual(other, precision = Number.EPSILON) {
    return (
      Math.abs(this.x - other.x) < precision &&
      Math.abs(this.y - other.y) < precision
    )
  }

  /**
   * Adds other to this Vec2 and returns the result as a new Vec2.
   * @param {Vec2} other - The other Vec2 to add.
   * @return {Vec2} - Returns a new Vec2.
   */
  add(other) {
    return new Vec2(this.x + other.x, this.y + other.y)
  }

  /**
   * Adds other to this Vec2.
   * @param {Vec2} other - The other Vec2 to add.
   */
  addInPlace(other) {
    this.x += other.x;
    this.y += other.y;
  }

  /**
   * Subtracts other from this Vec2 and returns the result as a new Vec2.
   * @param {Vec2} other - The other Vec2 to subtract.
   * @return {Vec2} - Returns a new Vec2.
   */
  subtract(other) {
    return new Vec2(this.x - other.x, this.y - other.y)
  }

  /**
   * Subtracts other from this Vec2.
   * @param {Vec2} other - The other Vec2 to subtract.
   * @return {Vec2} - Returns a new Vec2.
   */
  subtractInPlace(other) {
    this.x -= other.x;
    this.y -= other.y;
    return this
  }

  /**
   * Scales this Vec2 by scalar and returns the result as a new Vec2.
   * @param {number} scalar - The scalar value.
   * @return {Vec2} - Returns a new Vec2.
   */
  scale(scalar) {
    return new Vec2(this.x * scalar, this.y * scalar)
  }

  /**
   * Scales this Vec2 by scalar.
   * @param {number} scalar - The scalar value.
   */
  scaleInPlace(scalar) {
    this.x *= scalar;
    this.y *= scalar;
  }

  /**
   * Inverts this Vec2 and returns the result as a new Vec2.
   * @return {Vec2} - Returns a new Vec2.
   */
  invert() {
    return new Vec2(1.0 / this.x, 1.0 / this.y)
  }

  /**
   * Inverts this Vec2.
   * @return {Vec2} - The return value.
   */
  invertInPlace() {
    this.x = 1.0 / this.x;
    this.y = 1.0 / this.y;
    return this
  }

  /**
   * Multiplies two Vec2s and returns the result as a new Vec2.
   * @param {Vec2} other - The other Vec2 to multiply with.
   * @return {Vec2} - Returns a new Vec2.
   */
  multiply(other) {
    return new Vec2(this.x * other.x, this.y * other.y)
  }

  /**
   * Multiplies two Vec2s.
   * @param {Vec2} other - The other Vec2 to multiply with.
   */
  multiplyInPlace(other) {
    this.x *= other.x;
    this.y *= other.y;
  }

  /**
   * Calculates the squared length of this Vec2.
   * @return {number} - Returns the length squared.
   */
  lengthSquared() {
    const x = this.__data[0];
    const y = this.__data[1];
    return x * x + y * y
  }

  /**
   * Calculates the length of this Vec2.
   * @return {number} - Returns the length.
   */
  length() {
    return Math.sqrt(this.lengthSquared())
  }

  /**
   * Calculates the distance to another vector.
   * @param {Vec2} other - The other value.
   * @return {number} - Returns the distance between vectors.
   */
  distanceTo(other) {
    const x = this.__data[0] - other.x;
    const y = this.__data[1] - other.y;
    return Math.sqrt(x * x + y * y)
  }

  /**
   * Normalizes the Vec2 and returns it as a new Vec2.
   * @return {Vec2} - Returns the Vec2 normalized.
   */
  normalize() {
    const x = this.__data[0];
    const y = this.__data[1];
    let len = x * x + y * y;
    if (len < Number.EPSILON) {
      return new Vec2()
    }

    // TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
    return new Vec2(x * len, y * len)
  }

  /**
   * Normalizes the Vec2.
   */
  normalizeInPlace() {
    const x = this.__data[0];
    const y = this.__data[1];
    let len = x * x + y * y;
    if (len < Number.EPSILON) {
      return
    }
    len = 1 / Math.sqrt(len);
    this.set(x * len, y * len);
  }

  /**
   * Calculates the dot product of this Vec2 against another Vec2.
   * @param {Vec2} other - The other Vec2 to compare with.
   * @return {number} - Returns the dot product.
   */
  dot(other) {
    return this.x * other.x + this.y * other.y
  }

  /**
   * Calculates the cross product of this Vec2 against another Vec2.
   * @param {Vec2} other - The other Vec2 to compare with.
   * @return {number} - Returns the cross product.
   */
  cross(other) {
    // just calculate the z-component
    return this.x * other.y - this.y * other.x;
  }

  /**
   * Gets the angle between this Vec2 and other assuming both are normalized vectors.
   * @param {Vec2} other - The other Vec2 to compare with.
   * @return {number} - Returns the angle in radians.
   */
  angleTo(other) {
    const cosine = this.normalize().dot(other.normalize());
    if (cosine > 1.0) return 0.0
    else if (cosine < -1.0) return Math.PI
    else return Math.acos(cosine)
  }

  /**
   * Gets the angle between this Vec2 and other.
   * @param {Vec2} other - The other Vec2 to compare with.
   * @return {number} - Returns the angle in radians.
   */
  signedAngleTo(other) {
    const angle = this.angleTo(other);
    if (this.cross(other) < 0.0) return -angle
    else return angle
  }

  /**
   * Rotates a Vec2 in a clockwise direction and returns a new rotated Vec2.
   * @param {number} angle - The angle of rotation.
   * @return {Vec2} - Returns the rotated vect  or.
   */
  rotate(angle) {
    const cosa = Math.cos(angle);
    const sina = Math.sin(angle);
    return new Vec2(
      this.x * cosa - this.y * sina,
      this.x * sina + this.y * cosa
    )
  }

  /**
   * Performs a linear interpolation between this Vec2 and other.
   * @param {Vec2} other - The other Vec2 to interpolate between.
   * @param {number} t - Interpolation amount between the two inputs.
   * @return {Vec2} - Returns a new Vec2.
   */
  lerp(other, t) {
    const ax = this.x;
    const ay = this.y;
    return new Vec2(ax + t * (other.x - ax), ay + t * (other.y - ay))
  }

  /**
   * Generates a random vector with the given scale.
   * @param {number} scale - Length of the resulting vector. If ommitted, a unit vector will be returned.
   * @return {Vec2} - The return value.
   */
  setRandomDir(scale = 1.0) {
    const r = Math.random() * 2.0 * Math.PI;
    this.__data[0] = Math.cos(r) * zScale;
    this.__data[1] = Math.sin(r) * zScale;
    return this
  }

  /**
   * The setRandom method.
   * @param {number} scale - The scale value.
   * @return {any} - The return value.
   */
  setRandom(scale = 1.0) {
    this.__data[0] = Math.random() * scale;
    this.__data[1] = Math.random() * scale;
    return this
  }

  /**
   * Clones this Vec2 and returns a new Vec2.
   * @return {Vec2} - Returns a new Vec2.
   */
  clone() {
    return new Vec2(this.__data[0], this.__data[1])
  }

  /**
   * Returns the tpye as an array. Often used to pass types to the GPU.
   * @return {array} - Returns as an array.
   */
  asArray() {
    return this.__data
  }

  // ////////////////////////////////////////
  // Static Methods

  /**
   * Creates a new Vec2.
   * @param {...object} ...args - The ...args param.
   * @return {Vec2} - Returns a new Vec2.
   * @private
   */
  static create(...args) {
    return new Vec2(...args)
  }

  /**
   * Creates a new Vec2 to wrap existing memory in a buffer.
   * @param {ArrayBuffer} buffer - The buffer value.
   * @param {number} offset - The offset value.
   * @return {Vec2} - Returns a new Vec2.
   * @private
   */
  static createFromFloat32Buffer(buffer, offset = 0) {
    return new Vec2(buffer, offset * 4) // 4 bytes per 32bit float
  }

  /**
   * The createFromFloat32Array method.
   * @param {Float32Array} array - The array value.
   * @return {Vec2} - Returns a new Vec2.
   * @private
   */
  static createFromFloat32Array(array) {
    return new Vec2(array)
  }

  /**
   * Returns the number of Float32 elements used by this type. Used to calculate storage requi
   * ents for large arrays of this type.
   * @return {number} - The return value.
   * @private
   */
  static numElements() {
    return 2
  }

  // ///////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistence.
   * @return {object} - The json object.
   */
  toJSON() {
    return {
      x: this.x,
      y: this.y,
    }
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object.
   */
  fromJSON(j) {
    this.x = j.x;
    this.y = j.y;
  }
}

typeRegistry.registerType('Vec2', Vec2);

/** Class representing a Vec3. A Vec3 represents a three-dimensional coordinate.
 * Vector classes in zea-engine internally store values in Float32Arrays and
 * expose getters and setters for the component values.
 * @extends AttrValue
 */
class Vec3$1 extends AttrValue {
  /**
   * Create a Vec3.
   * @param {number} x - The x value. Default is 0.
   * @param {number} y - The y value. Default is 0.
   * @param {number} z - The z value. Default is 0.
   */
  constructor(x = 0, y = 0, z = 0) {
    super();
    if (x instanceof Float32Array || x instanceof Uint32Array) {
      this.__data = x;
    } else if (x instanceof ArrayBuffer) {
      const buffer = x;
      const byteOffset = y;
      this.__data = new Float32Array(buffer, byteOffset, 3);
    } else if (x != null && typeof x == 'object') {
      this.__data = new Float32Array(3);
      this.fromJSON(x);
    } else {
      this.__data = new Float32Array(3);
      this.__data[0] = x;
      this.__data[1] = y;
      this.__data[2] = z;
    }
  }

  /**
   * Getter for x value.
   * @return {number} - Returns the x value.
   */
  get x() {
    return this.__data[0]
  }

  /**
   * Setter for x value.
   * @param {number} val - The val param.
   */
  set x(val) {
    this.__data[0] = val;
  }

  /**
   * Getter for y value.
   * @return {number} - Returns the y value.
   */
  get y() {
    return this.__data[1]
  }

  /**
   * Setter for y value.
   * @param {number} val - The val param.
   */
  set y(val) {
    this.__data[1] = val;
  }

  /**
   * Getter for z value.
   * @return {number} - Returns the z value.
   */
  get z() {
    return this.__data[2]
  }

  /**
   * Setter for z value.
   * @param {number} val - The val param.
   */
  set z(val) {
    this.__data[2] = val;
  }
  
  /**
   * Getter for xy swizzel.
   * @return {number} - Returns the z value.
   */
  get xy() {
    return new Vec2(this.__data[0], this.__data[1]);
  }

  /**
   * Getter for yz swizzel.
   * @return {number} - Returns the z value.
   */
  get yz() {
    return new Vec2(this.__data[1], this.__data[2]);
  }

  /**
   * Setter from scalar components.
   * @param {number} x - The x value.
   * @param {number} y - The y value.
   * @param {number} z - The y value.
   */
  set(x, y, z) {
    this.x = x;
    this.y = y !== undefined ? y : x;
    this.z = z !== undefined ? z : x;
  }

  /**
   * The setDataArray method.
   * @param {any} float32Array - The float32Array value.
   */
  setDataArray(float32Array) {
    this.__data = float32Array;
  }

  /**
   * Setter from another Vec3.
   * @param {Vec3} other - The other Vec3 to set from.
   */
  setFromOther(other) {
    this.x = other.x;
    this.y = other.y;
    this.z = other.z;
  }

  /**
   * Returns true if the Vec3 contains 0 0 0.
   * @return {boolean} - Returns true or false.
   */
  isNull() {
    return (
      Math.abs(this.x) < Number.EPSILON &&
      Math.abs(this.y) < Number.EPSILON &&
      Math.abs(this.z) < Number.EPSILON
    )
  }

  /**
   * The is111 method returns true if the Vec3 contains 1 1 1.
   * @return {boolean} - The return value.
   */
  is111() {
    return (
      Math.abs(1.0 - this.x) < Number.EPSILON &&
      Math.abs(1.0 - this.y) < Number.EPSILON &&
      Math.abs(1.0 - this.z) < Number.EPSILON
    )
  }

  /**
   * Returns true if this Vec3 is exactly the same as other.
   * @param {Vec3} other - The other Vec3 to compare with.
   * @return {boolean} - Returns true or false.
   */
  equal(other) {
    return this.x == other.x && this.y == other.y && this.z == other.z
  }

  /**
   * Returns true if this vector is NOT exactly the same other.
   * @param {Vec3} other - The other Vec3 to compare with.
   * @return {boolean} - Returns true or false.
   */
  notEquals(other) {
    return this.x != other.x && this.y != other.y && this.z != other.z
  }

  /**
   * Returns true if this Vec3 is approximately the same as other.
   * @param {Vec3} other - The other Vec3 to compare with.
   * @param {number} precision - The precision to which the values must match.
   * @return {boolean} - Returns true or false.
   */
  approxEqual(other, precision = Number.EPSILON) {
    return (
      Math.abs(this.x - other.x) < precision &&
      Math.abs(this.y - other.y) < precision &&
      Math.abs(this.z - other.z) < precision
    )
  }

  /**
   * Adds other to this Vec3 and return the result as a new Vec3.
   * @param {Vec3} other - The other Vec3 to add.
   * @return {Vec3} - Returns a new Vec3.
   */
  add(other) {
    return new Vec3$1(this.x + other.x, this.y + other.y, this.z + other.z)
  }

  /**
   * Adds other to this Vec3.
   * @param {Vec3} other - The other Vec3 to add.
   */
  addInPlace(other) {
    this.x += other.x;
    this.y += other.y;
    this.z += other.z;
  }

  /**
   * Subtracts other from this Vec3 and returns the result as a new Vec3.
   * @param {Vec3} other - The other Vec3 to subtract.
   * @return {Vec3} - Returns a new Vec3.
   */
  subtract(other) {
    return new Vec3$1(this.x - other.x, this.y - other.y, this.z - other.z)
  }

  /**
   * Subtracts other from this Vec3.
   * @param {Vec3} other - The other Vec3 to subtract.
   */
  subtractInPlace(other) {
    this.x -= other.x;
    this.y -= other.y;
    this.z -= other.z;
  }

  /**
   * Multiplies two Vec3s and returns the result as a new Vec3.
   * @param {Vec3} other - The other Vec3 to multiply with.
   * @return {Vec3} - Returns a new Vec3.
   */
  multiply(other) {
    return new Vec3$1(this.x * other.x, this.y * other.y, this.z * other.z)
  }

  /**
   * Multiplies two Vec3s.
   * @param {Vec3} other - The other Vec3 to multiply with.
   */
  multiplyInPlace(other) {
    this.x *= other.x;
    this.y *= other.y;
    this.z *= other.z;
  }

  /**
   * Divides two Vec3s and returns the result as a new Vec3.
   * @param {Vec3} vec3 - The other Vec3 to divide by.
   * @return {Vec3} - Returns a new Vec3.
   */
  divide(vec3) {
    return new Vec3$1(this.x / vec3.x, this.y / vec3.y, this.z / vec3.z)
  }

  /**
   * Divides two Vec3s.
   * @param {Vec3} vec3 - The other Vec3 to divide by.
   */
  divideInPlace(vec3) {
    this.x /= vec3.x;
    this.y /= vec3.y;
    this.z /= vec3.z;
  }

  /**
   * Scales this Vec3 by scalar and returns the result as a new Vec3.
   * @param {number} scalar - The scalar value.
   * @return {Vec3} - Returns a new Vec3.
   */
  scale(scalar) {
    return new Vec3$1(this.x * scalar, this.y * scalar, this.z * scalar)
  }

  /**
   * Scales this Vec3 by scalar.
   * @param {number} scalar - The scalar value.
   */
  scaleInPlace(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
  }

  /**
   * Negates this Vec3 (x = -x, y = -y and z = -z)
   * and returns the result as a new Vec3.
   * @return {Vec3} - Returns a new Vec3.
   */
  negate() {
    return new Vec3$1(-this.x, -this.y, -this.z)
  }

  /**
   * The inverse method.
   * @return {Vec3} - Returns a new Vec3.
   */
  inverse() {
    return new Vec3$1(1.0 / this.x, 1.0 / this.y, 1.0 / this.z)
  }

  /**
   * Calculates the squared length of this Vec3.
   * @return {number} - Returns the length.
   */
  lengthSquared() {
    const x = this.__data[0];
    const y = this.__data[1];
    const z = this.__data[2];
    return x * x + y * y + z * z
  }

  /**
   * Calculates the length of this Vec3.
   * @return {number} - Returns the length.
   */
  length() {
    return Math.sqrt(this.lengthSquared())
  }

  /**
   * Calculates the distance to another Vec3.
   * @param {Vec3} other - The other Vec3 to calculate the distance to.
   * @return {number} - Returns the distance between vectors.
   */
  distanceTo(other) {
    const x = this.__data[0] - other.x;
    const y = this.__data[1] - other.y;
    const z = this.__data[2] - other.z;
    return Math.sqrt(x * x + y * y + z * z)
  }

  /**
   * Normalizes the Vec3 and returns it as a new Vec3.
   * @return {Vec3} - Returns the Vec3 normalized.
   */
  normalize() {
    let len =
      this.__data[0] * this.__data[0] +
      this.__data[1] * this.__data[1] +
      this.__data[2] * this.__data[2];
    if (len < Number.EPSILON) {
      return new Vec3$1()
    }

    // TODO: evaluate use of glm_invsqrt here?
    len = 1.0 / Math.sqrt(len);
    return new Vec3$1(
      this.__data[0] * len,
      this.__data[1] * len,
      this.__data[2] * len
    )
  }

  /**
   * Normalizes the vector, modifying it and returning its original length.
   * @return {any} - The return value.
   */
  normalizeInPlace() {
    let len =
      this.__data[0] * this.__data[0] +
      this.__data[1] * this.__data[1] +
      this.__data[2] * this.__data[2];
    if (len < Number.EPSILON) {
      return
    }
    len = Math.sqrt(len);
    const tmp = 1.0 / len;
    this.__data[0] *= tmp;
    this.__data[1] *= tmp;
    this.__data[2] *= tmp;
    return len
  }

  /**
   * The resize method returns a new Vec3 with the given length.
   * @param {number} length - The length value.
   * @return {Vec3} - The return value.
   */
  resize(length) {
    const currlen =
      this.__data[0] * this.__data[0] +
      this.__data[1] * this.__data[1] +
      this.__data[2] * this.__data[2];
    if (currlen < Number.EPSILON) {
      return
    }
    const scl = length / Math.sqrt(currlen);
    return new Vec3$1(
      this.__data[0] * scl,
      this.__data[1] * scl,
      this.__data[2] * scl
    )
  }

  /**
   * The resizeInPlace method.
   * @param {number} length - The length value.
   */
  resizeInPlace(length) {
    const currlen =
      this.__data[0] * this.__data[0] +
      this.__data[1] * this.__data[1] +
      this.__data[2] * this.__data[2];
    if (currlen < Number.EPSILON) {
      return
    }
    const scl = length / Math.sqrt(currlen);
    this.__data[0] *= scl;
    this.__data[1] *= scl;
    this.__data[2] *= scl;
  }

  /**
   * Calculates the dot product of this Vec3 against another Vec3.
   * @param {Vec3} other - The other Vec3 to compare with.
   * @return {number} - Returns the dot product.
   */
  dot(other) {
    return this.x * other.x + this.y * other.y + this.z * other.z
  }

  /**
   * Calculates the cross product of two Vec3s and returns the result as a new Vec3.
   * @param {Vec3} other - The other Vec3 to calculate with.
   * @return {Vec3} - Returns the cross product as a new Vec3.
   */
  cross(other) {
    const ax = this.x;
    const ay = this.y;
    const az = this.z;
    const bx = other.x;
    const by = other.y;
    const bz = other.z;

    return new Vec3$1(ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx)
  }

  /**
   * Gets the angle between this Vec3 and b.
   * @param {Vec3} other - The other Vec3 to compare with.
   * @return {number} - Returns the angle in radians.
   */
  angleTo(other) {
    const cosine = this.dot(other);
    if (cosine > 1.0) {
      return 0
    } else {
      return Math.acos(cosine)
    }
  }

  /**
   * Performs a linear interpolation between this Vec3 and other.
   * @param {Vec3} other - The other Vec3 to interpolate between.
   * @param {number} t - Interpolation amount between the two inputs.
   * @return {Vec3} - Returns a new Vec3.
   */
  lerp(other, t) {
    const ax = this.x;
    const ay = this.y;
    const az = this.z;
    return new Vec3$1(
      ax + t * (other.x - ax),
      ay + t * (other.y - ay),
      az + t * (other.z - az)
    )
  }

  /**
   * Returns a new Vec3 whose component values are the abs of this Vec3s component values.
   * @return {Vec3} - Returns a new Vec3.
   */
  abs() {
    return new Vec3$1(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z))
  }

  /**
   * Sets the vector a random vector on the surface of a sphere with the radius of the givenn scale value.
   * @param {number} scale - The radius of the surface sphere.
   * @return {Vec3} - The random Vec3.
   */
  setRandomDir(scale = 1.0) {
    const r = Math.random() * 2.0 * Math.PI;
    const z = Math.random() * 2.0 - 1.0;
    const zScale = Math.sqrt(1.0 - z * z) * scale;

    this.__data[0] = Math.cos(r) * zScale;
    this.__data[1] = Math.sin(r) * zScale;
    this.__data[2] = z * scale;
    return this
  }

  /**
   * Generates a randome vector anywhere in the sphere defined by the provided scale value.
   * @param {number} scale - The radius of the bounding sphere.
   * @return {Vec3} - The random Vec3.
   */
  setRandom(scale = 1.0) {
    this.__data[0] = (Math.random() - 0.5) * scale;
    this.__data[1] = (Math.random() - 0.5) * scale;
    this.__data[2] = (Math.random() - 0.5) * scale;
    return this
  }

  /**
   * Clones this Vec3 and returns a new Vec3.
   * @return {Vec3} - Returns a new Vec3.
   */
  clone() {
    return new Vec3$1(this.__data[0], this.__data[1], this.__data[2])
  }

  /**
   * Returns the type as an array. Often used to pass types to the GPU.
   * @return {array} - Returns as an array.
   */
  asArray() {
    return this.__data
  }

  // ////////////////////////////////////////
  // Static Methods

  /**
   * Creates a new Vec3.
   * @param {...object} ...args - The ...args param.
   * @return {Vec3} - Returns a new Vec3.
   * @private
   */
  static create(...args) {
    return new Vec3$1(...args)
  }

  /**
   * The createFromJSON method.
   * @param {object} json - The json param.
   * @return {Vec3} - The return value.
   * @private
   */
  static createFromJSON(json) {
    const result = new Vec3$1();
    result.fromJSON(json);
    return result
  }

  /**
   * The createFromFloat32Buffer method.
   * @param {ArrayBuffer} buffer - The buffer value.
   * @param {number} offset - The offset value.
   * @return {Vec3} - Returns a new Vec3.
   * @private
   */
  static createFromFloat32Buffer(buffer, offset = 0) {
    return new Vec3$1(buffer, offset * 4) // 4 bytes per 32bit float
  }

  /**
   * The createFromFloat32Array method.
   * @param {Float32Array} array - A Float32Array value
   * @return {Vec3} - Returns a new Vec3.
   * @private
   */
  static createFromFloat32Array(array) {
    return new Vec3$1(array)
  }

  /**
   * Returns the number of Float32 elements used by this type. Used to calculate storage requirements for large arrays of this type.
   * @return {number} - The return value.
   * @private
   */
  static numElements() {
    return 3
  }

  // ///////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - The json object.
   */
  toJSON() {
    return {
      x: this.x,
      y: this.y,
      z: this.z,
    }
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object.
   */
  fromJSON(j) {
    this.x = j.x;
    this.y = j.y;
    this.z = j.z;
  }
}

typeRegistry.registerType('Vec3', Vec3$1);

/** Class representing a Vec4. A Vec4 represents a four-dimensional coordinate.
 * Vector classes in zea-engine internally store values in Float32Arrays and
 * expose getters and setters for the component values.
 * @extends AttrValue
 */
class Vec4$1 extends AttrValue {
  /**
   * Create a Vec4.
   * @param {number} x - The x value. Default is 0.
   * @param {number} y - The y value. Default is 0.
   * @param {number} z - The y value. Default is 0.
   * @param {number} t - The t value. Default is 0.
   */
  constructor(x = 0, y = 0, z = 0, t = 0) {
    super();

    if (x instanceof ArrayBuffer) {
      const buffer = x;
      const byteOffset = y;
      this.__data = new Float32Array(buffer, byteOffset, 4);
    } else if (x != null && typeof x == 'object') {
      this.__data = new Float32Array(4);
      this.fromJSON(x);
    } else {
      this.__data = new Float32Array(4);
      this.__data[0] = x;
      this.__data[1] = y;
      this.__data[2] = z;
      this.__data[3] = t;
    }
  }

  /**
   * Getter for x value.
   * @return {number} - Returns the x value.
   */
  get x() {
    return this.__data[0]
  }

  /**
   * Setter for x value.
   * @param {number} val - The val param.
   */
  set x(val) {
    this.__data[0] = val;
  }

  /**
   * Getter for y value.
   * @return {number} - Returns the y value.
   */
  get y() {
    return this.__data[1]
  }

  /**
   * Setter for y value.
   * @param {number} val - The val param.
   */
  set y(val) {
    this.__data[1] = val;
  }

  /**
   * Getter for z value.
   * @param {number} val - The val param.
   */
  get z() {
    return this.__data[2]
  }

  /**
   * Setter for z value.
   * @param {number} val - The val param.
   */
  set z(val) {
    this.__data[2] = val;
  }

  /**
   * Getter for t value.
   * @param {number} val - The val param.
   */
  get t() {
    return this.__data[3]
  }

  /**
   * Setter for t value.
   * @param {number} val - The val param.
   */
  set t(val) {
    this.__data[3] = val;
  }

  
  /**
   * Getter for xy swizzel.
   * @return {number} - Returns the z value.
   */
  get xyz() {
    return new Vec3$1(this.__data[0], this.__data[1], this.__data[2]);
  }

  /**
   * Setter from scalar components.
   * @param {number} x - The x value.
   * @param {number} y  - The y value.
   * @param {number} z  - The y value.
   * @param {number} t  - The t value.
   */
  set(x, y, z, t) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.t = t;
  }

  /**
   * Setter from another Vec4.
   * @param {Vec4} other - The other Vec4 to set from.
   */
  setFromOther(other) {
    this.x = other.x;
    this.y = other.y;
    this.z = other.z;
    this.t = other.t;
  }

  /**
   * Returns true if this Vec4 is exactly the same as other.
   * @param {Vec4} other - The other Vec4 to compare with.
   * @return {boolean} - Returns true or false.
   */
  equal(other) {
    return (
      this.x == other.x &&
      this.y == other.y &&
      this.z == other.z &&
      this.t == other.t
    )
  }

  /**
   * Returns true if this Vec4 is NOT exactly the same as other.
   * @param {Vec4} other - The other Vec4 to compare with.
   * @return {boolean} - Returns true or false.
   */
  notEquals(other) {
    return (
      this.x != other.x &&
      this.y != other.y &&
      this.z != other.z &&
      this.t != other.t
    )
  }

  /**
   * Returns true if this Vec4 is approximately the same as other.
   * @param {Vec4} other - The other Vec4 to compare with.
   * @param {number} precision - The precision to which the values must match.
   * @return {boolean} - The return value.
   */
  approxEqual(other, precision = Number.EPSILON) {
    return (
      Math.abs(this.x - other.x) < precision &&
      Math.abs(this.y - other.y) < precision &&
      Math.abs(this.z - other.z) < precision &&
      Math.abs(this.t - other.t) < precision
    )
  }

  /**
   * Adds other to this Vec4 and returns the result as a new Vec4.
   * @param {Vec4} other - The other Vec4 to add.
   * @return {Vec4} - Returns a new Vec4.
   */
  add(other) {
    return new Vec4$1(
      this.x + other.x,
      this.y + other.y,
      this.z + other.z,
      this.t + other.t
    )
  }

  /**
   * Adds other to this Vec4.
   * @param {Vec4} other - The other Vec4 to add.
   */
  addInPlace(other) {
    this.x += other.x;
    this.y += other.y;
    this.z += other.z;
    this.t += other.t;
  }

  /**
   * Subtracts other from this Vec4 and returns then result as a new Vec4.
   * @param {Vec4} other - The other Vec4 to subtract.
   * @return {Vec4} - Returns a new Vec4.
   */
  subtract(other) {
    return new Vec4$1(
      this.x - other.x,
      this.y - other.y,
      this.z - other.z,
      this.t - other.t
    )
  }

  /**
   * Subtracts other from this Vec4.
   * @param {Vec4} other - The other Vec4 to subtract.
   */
  subtractInPlace(other) {
    this.x -= other.x;
    this.y -= other.y;
    this.z -= other.z;
    this.t -= other.t;
  }

  /**
   * Multiplies two Vec4s and returns the result as a new Vec4.
   * @param {Vec4} other - The other Vec4 to multiply with.
   * @return {Vec4} - Returns a new Vec4.
   */
  multiply(other) {
    return new Vec4$1(
      this.x * other.x,
      this.y * other.y,
      this.z * other.z,
      this.t * other.t
    )
  }

  /**
   * Multiplies two Vec4s.
   * @param {Vec4} other - The other Vec4 to multiply with.
   */
  multiplyInPlace(other) {
    this.x *= other.x;
    this.y *= other.y;
    this.z *= other.z;
    this.t *= other.t;
  }

  /**
   * Divides two Vec4s and returns the result as a new Vec4.
   * @param {Vec4} other - The other Vec4 to divide by.
   * @return {Vec4} - Returns a new Vec4.
   */
  divide(other) {
    return new Vec4$1(
      this.x / other.x,
      this.y / other.y,
      this.z / other.z,
      this.t / other.t
    )
  }

  /**
   * Divides two Vec4s.
   * @param {Vec4} other - The other Vec4 to divide by.
   */
  divideInPlace(other) {
    this.x /= other.x;
    this.y /= other.y;
    this.z /= other.z;
    this.t /= other.t;
  }

  /**
   * Scales this Vec4 by scalar and returns the result as a new Vec4.
   * @param {number} scalar - The scalar value.
   * @return {Vec4} - The return value.
   */
  scale(scalar) {
    return new Vec4$1(
      this.x * scalar,
      this.y * scalar,
      this.z * scalar,
      this.t * scalar
    )
  }

  /**
   * Scales this Vec4 by scalar.
   * @param {number} scalar - The scalar value.
   */
  scaleInPlace(scalar) {
    this.set(this.x * scalar, this.y * scalar, this.z * scalar, this.t * scalar);
  }

  /**
   * Calculates the length of this Vec4.
   * @return {number} - Returns the length.
   */
  length() {
    const x = this.__data[0];
    const y = this.__data[1];
    const z = this.__data[2];
    const t = this.__data[2];
    return Math.sqrt(x * x + y * y + z * z + t * t)
  }

  /**
   * Calculates the squared length of this Vec4.
   * @return {number} - Returns the length.
   */
  lengthSquared() {
    const x = this.__data[0];
    const y = this.__data[1];
    const z = this.__data[2];
    const t = this.__data[3];
    return x * x + y * y + z * z + t * t
  }

  /**
   * Normalizes the Vec4 and returns it as a new Vec4.
   * @return {Vec4} - Returns the Vec4 normalized.
   */
  normalize() {
    const x = this.__data[0];
    const y = this.__data[1];
    const z = this.__data[2];
    const t = this.__data[3];
    let len = x * x + y * y + z * z + t * t;
    if (len < Number.EPSILON) {
      return new Vec4$1()
    }

    // TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
    return new Vec4$1(x * len, y * len, z * len)
  }

  /**
   * Normalizes the Vec4.
   */
  normalizeInPlace() {
    const x = this.__data[0];
    const y = this.__data[1];
    const z = this.__data[2];
    const t = this.__data[3];
    let len = x * x + y * y + z * z + t * t;
    if (len < Number.EPSILON) {
      return
    }
    len = 1 / Math.sqrt(len);
    this.set(x * len, y * len, z * len, t * len);
  }

  /**
   * Calculates the dot product of this Vec4 against another Vec4.
   * @param {Vec4} other - The other Vec4 to compare with.
   * @return {number} - Returns the dot product.
   */
  dot(other) {
    return this.x * other.x + this.y * other.y + this.z * other.z + this.t * b.t
  }

  /**
   * Calculates the cross product of two Vec4s and returns the result as a new Vec4.
   * @param {Vec4} other - The other Vec4 to calculate with.
   * @return {Vec4} - Returns the cross product as a new Vec4.
   */
  cross(other) {
    const ax = this.x;
    const ay = this.y;
    const az = this.z;
    const at = this.t;
    const bx = other.x;
    const by = other.y;
    const bz = other.z;
    const bt = other.t;

    return new Vec4$1(
      ay * bz - az * by,
      az * bt - at * bz,
      at * bx - ax * bt,
      ax * by - ay * bx
    )
  }

  /**
   * Gets the angle between this Vec4 and b.
   * @param {Vec4} other - The other Vec4 to compare with.
   * @return {number} - Returns the angle in radians.
   */
  angleTo(other) {
    const tempA = this.normalize();
    const tempB = other.normalize();
    const cosine = tempA.dot(tempB);

    if (cosine > 1.0) {
      return 0
    } else {
      return Math.acos(cosine)
    }
  }

  /**
   * Performs a linear interpolation between this Vec4 and other.
   * @param {Vec4} other - The other Vec4 to interpolate between.
   * @param {number} t - Interpolation amount between the two inputs.
   * @return {Vec4} - Returns a new Vec4.
   */
  lerp(other, t) {
    const ax = this.x;
    const ay = this.y;
    const az = this.z;
    at = this.t;
    return new Vec4$1(
      ax + t * (other.x - ax),
      ay + t * (other.y - ay),
      az + t * (other.z - az),
      at + t * (other.t - at)
    )
  }

  /**
   * Generates a random vector with the given scale.
   * @param {number} scale - Length of the resulting vector. If ommitted, a unit vector will be returned.
   * @return {Vec4} - The return value.
   */
  random(scale = 1.0) {
    const r = glMatrix.RANDOM() * 2.0 * Math.PI;
    const z = glMatrix.RANDOM() * 2.0 - 1.0;
    const zScale = Math.sqrt(1.0 - z * z) * scale;

    out[0] = Math.cos(r) * zScale;
    out[1] = Math.sin(r) * zScale;
    out[2] = z * scale;
    return out
  }

  /**
   * Clones this Vec4 and returns a new Vec4.
   * @return {Vec4} - Returns a new Vec4.
   */
  clone() {
    return new Vec4$1(
      this.__data[0],
      this.__data[1],
      this.__data[2],
      this.__data[3]
    )
  }

  /**
   * Converts this Vec4 into a Vec3.
   * @return {Vec3} - Returns the value as a new Vec3.
   */
  toVec3() {
    return new Vec3$1(this.__data[0], this.__data[1], this.__data[2])
  }

  /**
   * Returns the type as an array. Often used to pass types to the GPU.
   * @return {any} - Returns as an array.
   */
  asArray() {
    return this.__data
  }

  // ////////////////////////////////////////
  // Static Methods

  /**
   * Creates a new Vec3.
   * @param {...object} ...args - The ...args param.
   * @return {Vec3} - Returns a new Vec3.
   * @private
   */
  static create(...args) {
    return new Vec3$1(...args)
  }

  /**
   * Creates a new Vec4 to wrap existing memory in a buffer.
   * @param {ArrayBuffer} buffer - The buffer value.
   * @param {number} offset - The offset value.
   * @return {Vec4} - Returns a new Vec3.
   * @private
   */
  static createFromFloat32Buffer(buffer, offset = 0) {
    return new Vec4$1(buffer, offset * 4) // 4 bytes per 32bit float
  }

  /**
   * Returns the number of Float32 elements used by this type. Used to calculate storage requirements for large arrays of this type.
   * @return {number} - The return value.
   * @private
   */
  static numElements() {
    return 4
  }

  // ///////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - The json object.
   */
  toJSON() {
    return {
      x: this.x,
      y: this.y,
      z: this.z,
      t: this.t,
    }
  }
}

typeRegistry.registerType('Vec4', Vec4$1);

/** Class representing the red, green, blue and alpha channel of a color.
 * @extends AttrValue
 */
class RGBA extends AttrValue {
  /**
   * Create a RGBA.
   * @param {number} r - The red channel of a color.
   * @param {number} g - The green channel of a color.
   * @param {number} b - The blue channel of a color.
   * @param {number} a - The alpha (transparency) channel of a color.
   */
  constructor(r = 0, g = 0, b = 0, a = 255) {
    super();

    if (r instanceof Uint8Array) {
      this.__data = r;
    } else if (r instanceof ArrayBuffer) {
      const buffer = r;
      const byteOffset = g;
      this.__data = new Uint8Array(buffer, byteOffset, 4);
    } else {
      this.__data = new Uint8Array(4);
      if (typeof r == 'string') {
        if (r.startsWith('#')) {
          this.setFromHex(r);
        } else {
          this.setFromCSSColorName(r);
        }
      } else {
        this.__data[0] = r;
        this.__data[1] = g;
        this.__data[2] = b;
        this.__data[3] = a;
      }
    }
  }

  /**
   * Getter for red channel.
   * @return {RGBA} - Returns the red channel.
   */
  get r() {
    return this.__data[0]
  }

  /**
   * Setter for red channel.
   * @param {number} val - The val param.
   */
  set r(val) {
    this.__data[0] = val;
  }

  /**
   * Getter for green channel.
   * @return {RGBA} - Returns the green channel.
   */
  get g() {
    return this.__data[1]
  }

  /**
   * Setter for green channel.
   * @param {number} val - The val param.
   */
  set g(val) {
    this.__data[1] = val;
  }

  /**
   * Getter for blue channel.
   * @return {RGBA} - Returns the blue channel.
   */
  get b() {
    return this.__data[2]
  }

  /**
   * Setter for blue channel.
   * @param {number} val - The val param.
   */
  set b(val) {
    this.__data[2] = val;
  }

  /**
   * Getter for alpha channel.
   * @return {RGBA} - Returns the alpha channel.
   */
  get a() {
    return this.__data[3]
  }
  /**
   * Setter for alpha value.
   * @param {number} val - The val param.
   */
  set a(val) {
    this.__data[3] = val;
  }

  /**
   * Setter from scalar components.
   * @param {number} r - The red channel.
   * @param {number} g  - The green channel.
   * @param {number} b  - The blue channel.
   * @param {number} a  - The alpha channel.
   */
  set(r, g, b, a = 255) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a;
  }

  /**
   * Setter from another RGBA color.
   * @param {RGBA} other - The other RGBA to set from.
   */
  setFromOther(other) {
    this.r = other.r;
    this.g = other.g;
    this.b = other.b;
    this.a = other.a;
  }

  /**
   * Setter from a scalar array.
   * @param {any} vals - The vals param.
   */
  setFromArray(vals) {
    this.r = vals[0];
    this.g = vals[1];
    this.b = vals[2];
    this.a = vals.length == 4 ? vals[3] : 1.0;
  }

  /**
   * Setter from a hexadecimal value.
   * E.g. #ff0000
   * @param {number} hex - The hex value.
   */
  setFromHex(hex) {
    function hexToRgb(hex) {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result
        ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16),
          }
        : null
    }
    const rgb = hexToRgb(hex);
    if (!rgb) {
      console.warn('Invalid hex code:' + hex);
      return
    }
    this.set(rgb.r, rgb.g, rgb.b);
  }

  /**
   * Setter from a CSS color name.
   * E.g. "red"
   * @param {string} name - The CSS color name.
   */
  setFromCSSColorName(name) {
    const colourNameToHex = colour => {
      const colors = {
        aliceblue: '#f0f8ff',
        antiquewhite: '#faebd7',
        aqua: '#00ffff',
        aquamarine: '#7fffd4',
        azure: '#f0ffff',
        beige: '#f5f5dc',
        bisque: '#ffe4c4',
        black: '#000000',
        blanchedalmond: '#ffebcd',
        blue: '#0000ff',
        blueviolet: '#8a2be2',
        brown: '#a52a2a',
        burlywood: '#deb887',
        cadetblue: '#5f9ea0',
        chartreuse: '#7fff00',
        chocolate: '#d2691e',
        coral: '#ff7f50',
        cornflowerblue: '#6495ed',
        cornsilk: '#fff8dc',
        crimson: '#dc143c',
        cyan: '#00ffff',
        darkblue: '#00008b',
        darkcyan: '#008b8b',
        darkgoldenrod: '#b8860b',
        darkgray: '#a9a9a9',
        darkgreen: '#006400',
        darkkhaki: '#bdb76b',
        darkmagenta: '#8b008b',
        darkolivegreen: '#556b2f',
        darkorange: '#ff8c00',
        darkorchid: '#9932cc',
        darkred: '#8b0000',
        darksalmon: '#e9967a',
        darkseagreen: '#8fbc8f',
        darkslateblue: '#483d8b',
        darkslategray: '#2f4f4f',
        darkturquoise: '#00ced1',
        darkviolet: '#9400d3',
        deeppink: '#ff1493',
        deepskyblue: '#00bfff',
        dimgray: '#696969',
        dodgerblue: '#1e90ff',
        firebrick: '#b22222',
        floralwhite: '#fffaf0',
        forestgreen: '#228b22',
        fuchsia: '#ff00ff',
        gainsboro: '#dcdcdc',
        ghostwhite: '#f8f8ff',
        gold: '#ffd700',
        goldenrod: '#daa520',
        gray: '#808080',
        green: '#008000',
        greenyellow: '#adff2f',
        honeydew: '#f0fff0',
        hotpink: '#ff69b4',
        'indianred ': '#cd5c5c',
        indigo: '#4b0082',
        ivory: '#fffff0',
        khaki: '#f0e68c',
        lavender: '#e6e6fa',
        lavenderblush: '#fff0f5',
        lawngreen: '#7cfc00',
        lemonchiffon: '#fffacd',
        lightblue: '#add8e6',
        lightcoral: '#f08080',
        lightcyan: '#e0ffff',
        lightgoldenrodyellow: '#fafad2',
        lightgrey: '#d3d3d3',
        lightgreen: '#90ee90',
        lightpink: '#ffb6c1',
        lightsalmon: '#ffa07a',
        lightseagreen: '#20b2aa',
        lightskyblue: '#87cefa',
        lightslategray: '#778899',
        lightsteelblue: '#b0c4de',
        lightyellow: '#ffffe0',
        lime: '#00ff00',
        limegreen: '#32cd32',
        linen: '#faf0e6',
        magenta: '#ff00ff',
        maroon: '#800000',
        mediumaquamarine: '#66cdaa',
        mediumblue: '#0000cd',
        mediumorchid: '#ba55d3',
        mediumpurple: '#9370d8',
        mediumseagreen: '#3cb371',
        mediumslateblue: '#7b68ee',
        mediumspringgreen: '#00fa9a',
        mediumturquoise: '#48d1cc',
        mediumvioletred: '#c71585',
        midnightblue: '#191970',
        mintcream: '#f5fffa',
        mistyrose: '#ffe4e1',
        moccasin: '#ffe4b5',
        navajowhite: '#ffdead',
        navy: '#000080',
        oldlace: '#fdf5e6',
        olive: '#808000',
        olivedrab: '#6b8e23',
        orange: '#ffa500',
        orangered: '#ff4500',
        orchid: '#da70d6',
        palegoldenrod: '#eee8aa',
        palegreen: '#98fb98',
        paleturquoise: '#afeeee',
        palevioletred: '#d87093',
        papayawhip: '#ffefd5',
        peachpuff: '#ffdab9',
        peru: '#cd853f',
        pink: '#ffc0cb',
        plum: '#dda0dd',
        powderblue: '#b0e0e6',
        purple: '#800080',
        rebeccapurple: '#663399',
        red: '#ff0000',
        rosybrown: '#bc8f8f',
        royalblue: '#4169e1',
        saddlebrown: '#8b4513',
        salmon: '#fa8072',
        sandybrown: '#f4a460',
        seagreen: '#2e8b57',
        seashell: '#fff5ee',
        sienna: '#a0522d',
        silver: '#c0c0c0',
        skyblue: '#87ceeb',
        slateblue: '#6a5acd',
        slategray: '#708090',
        snow: '#fffafa',
        springgreen: '#00ff7f',
        steelblue: '#4682b4',
        tan: '#d2b48c',
        teal: '#008080',
        thistle: '#d8bfd8',
        tomato: '#ff6347',
        turquoise: '#40e0d0',
        violet: '#ee82ee',
        wheat: '#f5deb3',
        white: '#ffffff',
        whitesmoke: '#f5f5f5',
        yellow: '#ffff00',
        yellowgreen: '#9acd32',
      };

      if (typeof colors[colour.toLowerCase()] != 'undefined')
        return colors[colour.toLowerCase()]

      return false
    };
    if (name.startsWith('#')) {
      this.setFromHex(name);
    } else {
      this.setFromHex(colourNameToHex(name));
    }
  }

  /**
   * Returns the hexadecimal value of this RGBA color.
   * @return {number} - Returns the hex value.
   */
  toHex() {
    function componentToHex(int) {
      const hex = int.toString(16);
      return hex.length == 1 ? '0' + hex : hex
    }
    return (
      '#' +
      componentToHex(this.r) +
      componentToHex(this.g) +
      componentToHex(this.b)
    )
  }

  /**
   * Returns true if this RGBA color is exactly the same as other.
   * @param {RGBA} other - The other RGBA to compare with.
   * @return {boolean} - Returns true or false.
   */
  equal(other) {
    return (
      this.r == other.r &&
      this.g == other.g &&
      this.b == other.b &&
      this.a == other.a
    )
  }

  /**
   * Returns true if this RGBA color is NOT exactly the same as other.
   * @param {RGBA} other -  The other RGBA to compare with.
   * @return {boolean} - Returns true or false.
   */
  notequals(other) {
    return (
      this.r != other.r &&
      this.g != other.g &&
      this.b != other.b &&
      this.a != other.a
    )
  }

  /**
   * Returns true if this RGBA color is approximately the same as other.
   * @param {RGBA} other - The other RGBA to compare with.
   * @param {number} precision - The precision to which the values must match.
   * @return {boolean} - Returns true or false.
   */
  approxEqual(other, precision = Number.EPSILON) {
    return (
      Math.abs(this.r - other.r) < precision &&
      Math.abs(this.g - other.g) < precision &&
      Math.abs(this.b - other.b) < precision &&
      Math.abs(this.a - other.a) < precision
    )
  }

  /**
   * Returns a new RGBA color which is this RGBA color added to other.
   * @param {RGBA} other - The other RGBA to add.
   * @return {RGBA} - Returns a new RGBA.
   */
  add(other) {
    return new RGBA(
      this.r + other.r,
      this.g + other.g,
      this.b + other.b,
      this.a + other.a
    )
  }

  /**
   * Returns a new RGBA color which is this RGBA color subtracted from other.
   * @param {RGBA} other - The other RGBA to subtract.
   * @return {RGBA} - Returns a new RGBA.
   */
  subtract(other) {
    return new RGBA(
      this.r - other.r,
      this.g - other.g,
      this.b - other.b,
      this.a - other.a
    )
  }

  /**
   * Returns a new RGBA color which is this vector scaled by scalar.
   * @param {number} scalar - The scalar value.
   * @return {RGBA} - Returns a new RGBA.
   */
  scale(scalar) {
    return new RGBA(
      this.r * scalar,
      this.g * scalar,
      this.b * scalar,
      this.a * scalar
    )
  }

  /**
   * Scales this RGBA color by scalar.
   * @param {number} scalar - The scalar value.
   */
  scaleInPlace(scalar) {
    this.r *= scalar;
    this.g *= scalar;
    this.b *= scalar;
    this.a *= scalar;
  }

  /**
   * Apply gamma correction to this RGBA color.
   * @param {number} gamma - The gamma value.
   */
  applyGamma(gamma) {
    this.set(
      Math.pow(this.r, gamma),
      Math.pow(this.g, gamma),
      Math.pow(this.b, gamma),
      this.a
    );
  }

  /**
   * Converts to linear color space and returns a new color.
   * @param {number} gamma - The gamma value.
   * @return {Color} - Returns a new RGBA.
   */
  toLinear(gamma = 2.2) {
    return new RGBA(
      Math.pow(this.r, gamma),
      Math.pow(this.g, gamma),
      Math.pow(this.b, gamma),
      this.a
    )
  }

  /**
   * Converts to gamma color space and returns a new RGBA color.
   * @param {number} gamma - The gamma value.
   * @return {RGBA} - Returns a new RGBA.
   */
  toGamma(gamma = 2.2) {
    return new RGBA(
      Math.pow(this.r, 1.0 / gamma),
      Math.pow(this.g, 1.0 / gamma),
      Math.pow(this.b, 1.0 / gamma),
      this.a
    )
  }

  /**
   * The luminance method.
   * @return {number} - The return value.
   */
  luminance() {
    return 0.2126 * this.r + 0.7152 * this.g + 0.0722 * this.b
  }

  /**
   * Performs a linear interpolation between this RGBA color and other.
   * @param {RGBA} other - The other RGBA to interpolate between.
   * @param {number} t - Interpolation amount between the two inputs.
   * @return {RGBA} - Returns a new RGBA.
   */
  lerp(other, t) {
    const ar = this.r;
    const ag = this.g;
    const ab = this.b;
    const aa = this.a;
    return new RGBA(
      ar + t * (other.r - ar),
      ag + t * (other.g - ag),
      ab + t * (other.b - ab),
      aa + t * (other.a - aa)
    )
  }

  /**
   * Creates a random RGBA.
   * @param {number} gammaOffset - The gamma offset.
   * @param {boolean} randomAlpha - Determines whether the alpha channel is random.
   * @return {RGBA} - Returns a new random RGBA.
   */
  static random(gammaOffset = 0.0, randomAlpha = false) {
    if (gammaOffset > 0.0) {
      return new RGBA(
        gammaOffset + Math.random() * (1.0 - gammaOffset),
        gammaOffset + Math.random() * (1.0 - gammaOffset),
        gammaOffset + Math.random() * (1.0 - gammaOffset),
        randomAlpha ? gammaOffset + Math.random() * (1.0 - gammaOffset) : 1.0
      )
    } else if (gammaOffset < 0.0) {
      return new RGBA(
        Math.random() * (1.0 + gammaOffset),
        Math.random() * (1.0 + gammaOffset),
        Math.random() * (1.0 + gammaOffset),
        randomAlpha ? Math.random() * (1.0 + gammaOffset) : 1.0
      )
    } else {
      return new RGBA(
        Math.random(),
        Math.random(),
        Math.random(),
        randomAlpha ? Math.random() : 1.0
      )
    }
  }

  /**
   * Clones this RGBA color and returns a new RGBA color.
   * @return {RGBA} - Returns a new RGBA.
   */
  clone() {
    return new RGBA(
      this.__data[0],
      this.__data[1],
      this.__data[2],
      this.__data[3]
    )
  }

  /**
   * Returns the type as an array. Often used to pass types to the GPU.
   * @return {array} - Returns as an array.
   */
  asArray() {
    return this.__data
  }

  /**
   * Returns the type as a 3 component array. Often used to pass types to the GPU.
   * @return {array} - Returns as a 3 component array.
   */
  as3ComponentArray() {
    return [this.__data[0], this.__data[1], this.__data[2]]
  }

  // ////////////////////////////////////////
  // Static Methods

  /**
   * Creates a new RGBA color.
   * @param {...object} ...args - The ...args param.
   * @return {RGBA} - Returns a new RGBA.
   * @private
   */
  static create(...args) {
    return new RGBA(...args)
  }

  /**
   * The createFromFloat32Buffer method.
   * @param {ArrayBuffer} buffer - The buffer value.
   * @param {number} offset - The offset value.
   * @return {RGBA} - Returns a new color.
   * @private
   */
  static createFromFloat32Buffer(buffer, offset = 0) {
    return new RGBA(buffer, offset * 4) // 4 bytes per 32bit float
  }

  /**
   * Returns the number of Float32 elements used by this type. Used to calculate storage requirements for large arrays of this type.
   * @return {number} - The return value.
   * @private
   */
  static numElements() {
    return 4
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - The json object.
   */
  toJSON() {
    return {
      r: this.r,
      g: this.g,
      b: this.b,
      a: this.a,
    }
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object.
   */
  fromJSON(j) {
    this.r = j.r;
    this.g = j.g;
    this.b = j.b;
    this.a = j.a;
  }

  /**
   * The toCSSString method.
   * @return {any} - The return value.
   */
  toCSSString() {
    return (
      'rgba(' +
      Math.round(this.r * 255) +
      ', ' +
      Math.round(this.g * 255) +
      ', ' +
      Math.round(this.b * 255) +
      ', ' +
      this.a +
      ')'
    )
  }
}

typeRegistry.registerType('RGBA', RGBA);

/** Class representing a color.
 * @extends AttrValue
 */
class Color extends AttrValue {
  /**
   * Create a color.
   * @param {number} r - The red channel of a color.
   * @param {number} g - The green channel of a color.
   * @param {number} b - The blue channel of a color.
   * @param {number} a - The alpha (transparency) channel of a color.
   */
  constructor(r = 0, g = 0, b = 0, a = 1.0) {
    super();

    if (r instanceof Float32Array) {
      this.__data = r;
    } else if (r instanceof ArrayBuffer) {
      const buffer = r;
      const byteOffset = g;
      this.__data = new Float32Array(buffer, byteOffset, 4);
    } else {
      this.__data = new Float32Array(4);
      if (typeof r == 'string') {
        if (r.startsWith('#')) {
          this.setFromHex(r);
        } else {
          this.setFromCSSColorName(r);
        }
      } else {
        this.__data[0] = r;
        this.__data[1] = g;
        this.__data[2] = b;
        this.__data[3] = a;
      }
    }
  }

  /**
   * Getter for red channel.
   * @return {Color} - Returns the red channel.
   */
  get r() {
    return this.__data[0]
  }

  /**
   * Setter for red channel.
   * @param {number} val - The val param.
   */
  set r(val) {
    this.__data[0] = val;
  }

  /**
   * Getter for green channel.
   * @return {Color} - Returns the green channel.
   */
  get g() {
    return this.__data[1]
  }

  /**
   * Setter for green channel.
   * @param {number} val - The val param.
   */
  set g(val) {
    this.__data[1] = val;
  }

  /**
   * Getter for blue channel.
   * @return {Color} - Returns the blue channel.
   */
  get b() {
    return this.__data[2]
  }

  /**
   * Setter for blue channel.
   * @param {number} val - The val param.
   */
  set b(val) {
    this.__data[2] = val;
  }

  /**
   * Getter for alpha channel.
   * @return {Color} - Returns the alpha channel.
   */
  get a() {
    return this.__data[3]
  }
  /**
   * Setter for alpha value.
   * @param {number} val - The val param.
   */
  set a(val) {
    this.__data[3] = val;
  }

  /**
   * Setter from scalar components.
   * @param {number} r - The red channel.
   * @param {number} g  - The green channel.
   * @param {number} b  - The blue channel.
   * @param {number} a  - The alpha channel.
   */
  set(r, g, b, a = 1.0) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a;
  }

  /**
   * Setter from another color.
   * @param {Color} other - The other color to set from.
   */
  setFromOther(other) {
    this.r = other.r;
    this.g = other.g;
    this.b = other.b;
    this.a = other.a;
  }

  /**
   * Setter from a scalar array.
   * @param {any} vals - The vals param.
   */
  setFromScalarArray(vals) {
    this.r = vals[0];
    this.g = vals[1];
    this.b = vals[2];
    this.a = vals.length == 4 ? vals[3] : 1.0;
  }

  /**
   * Getter from an RGB array.
   * @return {Color} - The return value.
   */
  getAsRGBArray() {
    return [this.r * 255, this.g * 255, this.b * 255]
  }

  /**
   * Getter from an RGB dict.
   * @return {Color} - The return value.
   */
  getAsRGBDict() {
    return {
      r: this.r * 255,
      g: this.g * 255,
      b: this.b * 255,
    }
  }

  /**
   * Setter from a RGB value.
   * @param {number} r - The red channel.
   * @param {number} g  - The green channel.
   * @param {number} b  - The blue channel.
   * @param {number} a  - The alpha channel.
   */
  setFromRGB(r, g, b, a) {
    this.r = r / 255;
    this.g = g / 255;
    this.b = b / 255;
    this.a = a ? a / 255 : 1.0;
  }

  /**
   * Setter from an RGB array.
   * @param {any} vals - The vals param.
   */
  setFromRGBArray(vals) {
    this.r = vals[0] / 255;
    this.g = vals[1] / 255;
    this.b = vals[2] / 255;
    this.a = vals.length == 4 ? vals[3] / 255 : 1.0;
  }

  /**
   * Setter from an RGB dict.
   * @param {any} vals - The vals param.
   */
  setFromRGBDict(vals) {
    this.r = vals.r / 255;
    this.g = vals.g / 255;
    this.b = vals.b / 255;
    this.a = vals.a == 4 ? vals.a / 255 : 1.0;
  }

  /**
   * Setter from a hexadecimal value.
   * E.g. #ff0000
   * @param {number} hex - The hex value.
   */
  setFromHex(hex) {
    function hexToRgb(hex) {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result
        ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16),
          }
        : null
    }
    const rgb = hexToRgb(hex);
    if (!rgb) {
      console.warn('Invalid hex code:' + hex);
      return
    }
    this.setFromRGB(rgb.r, rgb.g, rgb.b);
  }

  /**
   * Setter from a CSS color name.
   * E.g. "red"
   * @param {string} name - The CSS color name.
   */
  setFromCSSColorName(name) {
    const colourNameToHex = colour => {
      const colors = {
        aliceblue: '#f0f8ff',
        antiquewhite: '#faebd7',
        aqua: '#00ffff',
        aquamarine: '#7fffd4',
        azure: '#f0ffff',
        beige: '#f5f5dc',
        bisque: '#ffe4c4',
        black: '#000000',
        blanchedalmond: '#ffebcd',
        blue: '#0000ff',
        blueviolet: '#8a2be2',
        brown: '#a52a2a',
        burlywood: '#deb887',
        cadetblue: '#5f9ea0',
        chartreuse: '#7fff00',
        chocolate: '#d2691e',
        coral: '#ff7f50',
        cornflowerblue: '#6495ed',
        cornsilk: '#fff8dc',
        crimson: '#dc143c',
        cyan: '#00ffff',
        darkblue: '#00008b',
        darkcyan: '#008b8b',
        darkgoldenrod: '#b8860b',
        darkgray: '#a9a9a9',
        darkgreen: '#006400',
        darkkhaki: '#bdb76b',
        darkmagenta: '#8b008b',
        darkolivegreen: '#556b2f',
        darkorange: '#ff8c00',
        darkorchid: '#9932cc',
        darkred: '#8b0000',
        darksalmon: '#e9967a',
        darkseagreen: '#8fbc8f',
        darkslateblue: '#483d8b',
        darkslategray: '#2f4f4f',
        darkturquoise: '#00ced1',
        darkviolet: '#9400d3',
        deeppink: '#ff1493',
        deepskyblue: '#00bfff',
        dimgray: '#696969',
        dodgerblue: '#1e90ff',
        firebrick: '#b22222',
        floralwhite: '#fffaf0',
        forestgreen: '#228b22',
        fuchsia: '#ff00ff',
        gainsboro: '#dcdcdc',
        ghostwhite: '#f8f8ff',
        gold: '#ffd700',
        goldenrod: '#daa520',
        gray: '#808080',
        green: '#008000',
        greenyellow: '#adff2f',
        honeydew: '#f0fff0',
        hotpink: '#ff69b4',
        'indianred ': '#cd5c5c',
        indigo: '#4b0082',
        ivory: '#fffff0',
        khaki: '#f0e68c',
        lavender: '#e6e6fa',
        lavenderblush: '#fff0f5',
        lawngreen: '#7cfc00',
        lemonchiffon: '#fffacd',
        lightblue: '#add8e6',
        lightcoral: '#f08080',
        lightcyan: '#e0ffff',
        lightgoldenrodyellow: '#fafad2',
        lightgrey: '#d3d3d3',
        lightgreen: '#90ee90',
        lightpink: '#ffb6c1',
        lightsalmon: '#ffa07a',
        lightseagreen: '#20b2aa',
        lightskyblue: '#87cefa',
        lightslategray: '#778899',
        lightsteelblue: '#b0c4de',
        lightyellow: '#ffffe0',
        lime: '#00ff00',
        limegreen: '#32cd32',
        linen: '#faf0e6',
        magenta: '#ff00ff',
        maroon: '#800000',
        mediumaquamarine: '#66cdaa',
        mediumblue: '#0000cd',
        mediumorchid: '#ba55d3',
        mediumpurple: '#9370d8',
        mediumseagreen: '#3cb371',
        mediumslateblue: '#7b68ee',
        mediumspringgreen: '#00fa9a',
        mediumturquoise: '#48d1cc',
        mediumvioletred: '#c71585',
        midnightblue: '#191970',
        mintcream: '#f5fffa',
        mistyrose: '#ffe4e1',
        moccasin: '#ffe4b5',
        navajowhite: '#ffdead',
        navy: '#000080',
        oldlace: '#fdf5e6',
        olive: '#808000',
        olivedrab: '#6b8e23',
        orange: '#ffa500',
        orangered: '#ff4500',
        orchid: '#da70d6',
        palegoldenrod: '#eee8aa',
        palegreen: '#98fb98',
        paleturquoise: '#afeeee',
        palevioletred: '#d87093',
        papayawhip: '#ffefd5',
        peachpuff: '#ffdab9',
        peru: '#cd853f',
        pink: '#ffc0cb',
        plum: '#dda0dd',
        powderblue: '#b0e0e6',
        purple: '#800080',
        rebeccapurple: '#663399',
        red: '#ff0000',
        rosybrown: '#bc8f8f',
        royalblue: '#4169e1',
        saddlebrown: '#8b4513',
        salmon: '#fa8072',
        sandybrown: '#f4a460',
        seagreen: '#2e8b57',
        seashell: '#fff5ee',
        sienna: '#a0522d',
        silver: '#c0c0c0',
        skyblue: '#87ceeb',
        slateblue: '#6a5acd',
        slategray: '#708090',
        snow: '#fffafa',
        springgreen: '#00ff7f',
        steelblue: '#4682b4',
        tan: '#d2b48c',
        teal: '#008080',
        thistle: '#d8bfd8',
        tomato: '#ff6347',
        turquoise: '#40e0d0',
        violet: '#ee82ee',
        wheat: '#f5deb3',
        white: '#ffffff',
        whitesmoke: '#f5f5f5',
        yellow: '#ffff00',
        yellowgreen: '#9acd32',
      };

      if (typeof colors[colour.toLowerCase()] != 'undefined')
        return colors[colour.toLowerCase()]

      return false
    };
    if (name.startsWith('#')) {
      this.setFromHex(name);
    } else {
      this.setFromHex(colourNameToHex(name));
    }
  }

  /**
   * Returns the hexadecimal value of this color.
   * @return {number} - Returns the hex value.
   */
  toHex() {
    function componentToHex(c) {
      const int = Math.round(c * 255);
      const hex = int.toString(16);
      return hex.length == 1 ? '0' + hex : hex
    }
    return (
      '#' +
      componentToHex(this.r) +
      componentToHex(this.g) +
      componentToHex(this.b)
    )
  }

  /**
   * Returns true if this color is exactly the same as other.
   * @param {Color} other - The other color to compare with.
   * @return {boolean} - Returns true or false.
   */
  equal(other) {
    return (
      this.r == other.r &&
      this.g == other.g &&
      this.b == other.b &&
      this.a == other.a
    )
  }

  /**
   * Returns true if this color is NOT exactly the same as other.
   * @param {Color} other - The other color to compare with.
   * @return {boolean} - Returns true or false.
   */
  notequals(other) {
    return (
      this.r != other.r &&
      this.g != other.g &&
      this.b != other.b &&
      this.a != other.a
    )
  }

  /**
   * Returns true if this color is approximately the same as other.
   * @param {Color} other - The other color to compare with.
   * @param {number} precision - The precision to which the values must match.
   * @return {boolean} - Returns true or false.
   */
  approxEqual(other, precision = Number.EPSILON) {
    return (
      Math.abs(this.r - other.r) < precision &&
      Math.abs(this.g - other.g) < precision &&
      Math.abs(this.b - other.b) < precision &&
      Math.abs(this.a - other.a) < precision
    )
  }

  /**
   * Returns a new color which is this color added to other.
   * @param {Color} other - The other color to add.
   * @return {Color} - Returns a new color.
   */
  add(other) {
    return new Color(
      this.r + other.r,
      this.g + other.g,
      this.b + other.b,
      this.a + other.a
    )
  }

  /**
   * Returns a new color which is this color subtracted from other.
   * @param {Color} other - The other color to subtract.
   * @return {Color} - Returns a new color.
   */
  subtract(other) {
    return new Color(
      this.r - other.r,
      this.g - other.g,
      this.b - other.b,
      this.a - other.a
    )
  }

  /**
   * Scales this color by scalar and return the result as a new Vec4.
   * @param {number} scalar - The scalar value.
   * @return {Color} - Returns a new color.
   */
  scale(scalar) {
    return new Color(
      this.r * scalar,
      this.g * scalar,
      this.b * scalar,
      this.a * scalar
    )
  }

  /**
   * Scales this color by scalar.
   * @param {number} scalar - The scalar value.
   */
  scaleInPlace(scalar) {
    this.r *= scalar;
    this.g *= scalar;
    this.b *= scalar;
    this.a *= scalar;
  }

  /**
   * Apply gamma correction to this color.
   * @param {number} gamma - The gamma value.
   */
  applyGamma(gamma) {
    this.set(
      Math.pow(this.r, gamma),
      Math.pow(this.g, gamma),
      Math.pow(this.b, gamma),
      this.a
    );
  }

  /**
   * Converts to linear color space and returns a new color.
   * @param {number} gamma - The gamma value.
   * @return {Color} - Returns a new color.
   */
  toLinear(gamma = 2.2) {
    return new Color(
      Math.pow(this.r, gamma),
      Math.pow(this.g, gamma),
      Math.pow(this.b, gamma),
      this.a
    )
  }

  /**
   * Converts to gamma color space and returns a new color.
   * @param {number} gamma - The gamma value.
   * @return {Color} - Returns a new color.
   */
  toGamma(gamma = 2.2) {
    return new Color(
      Math.pow(this.r, 1.0 / gamma),
      Math.pow(this.g, 1.0 / gamma),
      Math.pow(this.b, 1.0 / gamma),
      this.a
    )
  }

  /**
   * The luminance method.
   * @return {number} - The return value.
   */
  luminance() {
    return 0.2126 * this.r + 0.7152 * this.g + 0.0722 * this.b
  }

  /**
   * Performs a linear interpolation between this color and other.
   * @param {Color} other - The other color to interpolate between.
   * @param {number} t - Interpolation amount between the two inputs.
   * @return {Color} - Returns a new color.
   */
  lerp(other, t) {
    const ar = this.r;
    const ag = this.g;
    const ab = this.b;
    const aa = this.a;
    return new Color(
      ar + t * (other.r - ar),
      ag + t * (other.g - ag),
      ab + t * (other.b - ab),
      aa + t * (other.a - aa)
    )
  }

  /**
   * Creates a random color.
   * @param {number} gammaOffset - The gamma offset.
   * @param {boolean} randomAlpha - Determines whether the alpha channel is random.
   * @return {Color} - Returns a new random color.
   */
  static random(gammaOffset = 0.0, randomAlpha = false) {
    if (gammaOffset > 0.0) {
      return new Color(
        gammaOffset + Math.random() * (1.0 - gammaOffset),
        gammaOffset + Math.random() * (1.0 - gammaOffset),
        gammaOffset + Math.random() * (1.0 - gammaOffset),
        randomAlpha ? gammaOffset + Math.random() * (1.0 - gammaOffset) : 1.0
      )
    } else if (gammaOffset < 0.0) {
      return new Color(
        Math.random() * (1.0 + gammaOffset),
        Math.random() * (1.0 + gammaOffset),
        Math.random() * (1.0 + gammaOffset),
        randomAlpha ? Math.random() * (1.0 + gammaOffset) : 1.0
      )
    } else {
      return new Color(
        Math.random(),
        Math.random(),
        Math.random(),
        randomAlpha ? Math.random() : 1.0
      )
    }
  }

  /**
   * Clones this color and returns a new color.
   * @return {Color} - Returns a new color.
   */
  clone() {
    return new Color(
      this.__data[0],
      this.__data[1],
      this.__data[2],
      this.__data[3]
    )
  }

  /**
   * Returns the type as an array. Often used to pass types to the GPU.
   * @return {array} - Returns as an array.
   */
  asArray() {
    return this.__data
  }

  /**
   * Returns the type as a 3 component array. Often used to pass types to the GPU.
   * @return {array} - Returns as a 3 component array.
   * @private
   */
  as3ComponentArray() {
    return [this.__data[0], this.__data[1], this.__data[2]]
  }

  // ////////////////////////////////////////
  // Static Methods

  /**
   * Creates a new color.
   * @param {...object} ...args - The ...args param.
   * @return {Color} - Returns a new color.
   * @private
   */
  static create(...args) {
    return new Color(...args)
  }

  /**
   * The createFromFloat32Buffer method.
   * @param {ArrayBuffer} buffer - The buffer value.
   * @param {number} offset - The offset value.
   * @return {Color} - Returns a new color.
   * @private
   */
  static createFromFloat32Buffer(buffer, offset = 0) {
    return new Color(buffer, offset * 4) // 4 bytes per 32bit float
  }

  /**
   * Returns the number of Float32 elements used by this type. Used to calculate storage requirements for large arrays of this type.
   * @return {number} - The return value.
   * @private
   */
  static numElements() {
    return 4
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - The json object.
   */
  toJSON() {
    return {
      r: this.r,
      g: this.g,
      b: this.b,
      a: this.a,
    }
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object.
   */
  fromJSON(j) {
    this.r = j.r;
    this.g = j.g;
    this.b = j.b;
    this.a = j.a;
  }

  /**
   * The toCSSString method.
   * @return {any} - The return value.
   */
  toCSSString() {
    return (
      'rgba(' +
      Math.round(this.r * 255) +
      ', ' +
      Math.round(this.g * 255) +
      ', ' +
      Math.round(this.b * 255) +
      ', ' +
      this.a +
      ')'
    )
  }
}

typeRegistry.registerType('Color', Color);

/** Class representing euler angles. Euler angles decribe rotating an object
 *  around its various axis in a specified axis order.
 * @extends AttrValue
 */
class EulerAngles extends AttrValue {
  /**
   * Create a euler angle.
   * @param {number} x - The angle of the x axis in degrees. Default is 0.
   * @param {number} y - The angle of the y axis in degrees. Default is 0.
   * @param {number} z - The angle of the z axis in degrees. Default is 0.
   * @param {number} order - The order in which the rotations are applied.
   */
  constructor(x = 0, y = 0, z = 0, order = 0) {
    super();

    if (!isNaN(order)) this.order = order;
    else {
      switch (order) {
        case 'XYZ':
          this.order = 0;
          break
        case 'YZX':
          this.order = 1;
          break
        case 'ZXY':
          this.order = 2;
          break
        case 'XZY':
          this.order = 3;
          break
        case 'ZYX':
          this.order = 4;
          break
        case 'YXZ':
          this.order = 5;
          break
        default:
          throw new Error('Invalid Euler Angles Order:' + order)
      }
    }
    if (x instanceof ArrayBuffer) {
      const buffer = x;
      const byteOffset = y;
      this.__data = new Float32Array(buffer, byteOffset, 4);
    } else {
      this.__data = new Float32Array(3);
      this.__data[0] = x;
      this.__data[1] = y;
      this.__data[2] = z;
    }
  }

  /**
   * Getter for x axis rotation.
   * @return {number} - Returns the x axis rotation.
   */
  get x() {
    return this.__data[0]
  }

  /**
   * Setter for x axis rotation.
   * @param {number} val - The val param.
   */
  set x(val) {
    this.__data[0] = val;
  }

  /**
   * Getter for y axis rotation.
   * @return {number} - Returns the y axis rotation.
   */
  get y() {
    return this.__data[1]
  }

  /**
   * Setter for y axis rotation.
   * @param {number} val - The val param.
   */
  set y(val) {
    this.__data[1] = val;
  }

  /**
   * Getter for z axis rotation.
   * @return {number} - Returns the z axis rotation.
   */
  get z() {
    return this.__data[2]
  }

  /**
   * Setter for z axis rotation.
   * @param {number} val - The val param.
   */
  set z(val) {
    this.__data[2] = val;
  }

  /**
   * The set method
   * @param {number} x - The x axis rotation.
   * @param {number} y  - The y axis rotation.
   * @param {number} z  - The z axis rotation.
   */
  set(x, y, z) {
    this.__data[0] = x;
    this.__data[1] = y;
    this.__data[2] = z;
  }
}

typeRegistry.registerType('EulerAngles', EulerAngles);

/** A class representing a 3x3 matrix.
 * This matrix class is based on GLM, and is column major.
 * @extends AttrValue
 */
class Mat3$1 extends AttrValue {
  /**
   * Create a Mat3.
   * @param {number} m00 - Row 0, column 0.
   * @param {number} m01 - Row 0, column 1.
   * @param {number} m02 - Row 0, column 2.
   * @param {number} m10 - Row 1, column 0.
   * @param {number} m11 - Row 1, column 1.
   * @param {number} m12 - Row 1, column 2.
   * @param {number} m20 - Row 2, column 0.
   * @param {number} m21 - Row 2, column 1.
   * @param {number} m22 - Row 2, column 2.
   */
  constructor(
    m00 = 1,
    m01 = 0,
    m02 = 0,
    m10 = 0,
    m11 = 1,
    m12 = 0,
    m20 = 0,
    m21 = 0,
    m22 = 1
  ) {
    super();

    if (m00 instanceof ArrayBuffer) {
      const buffer = m00;
      const byteOffset = m01;
      this.__data = new Float32Array(buffer, byteOffset, 9);
    } else {
      this.__data = new Float32Array(9);
      this.set(m00, m01, m02, m10, m11, m12, m20, m21, m22);
    }
  }

  // /////////////////////////////////////////
  // properties

  /**
   * Getter for row 0, column 0.
   * @return {number} - Returns the m00 value.
   */
  get m00() {
    return this.__data[0]
  }

  /**
   * Setter for row 0, column 0.
   * @param {number} val - The val param.
   */
  set m00(val) {
    this.__data[0] = val;
  }

  /**
   * Getter for row 0, column 1.
   * @return {number} - Returns the m01 value.
   */
  get m01() {
    return this.__data[1]
  }

  /**
   * Setter for row 0, column 1.
   * @param {number} val - The val param.
   */
  set m01(val) {
    this.__data[1] = val;
  }

  /**
   * Getter for row 0, column 2.
   * @return {number} - Returns the m02 value.
   */
  get m02() {
    return this.__data[2]
  }

  /**
   * Setter for row 0, column 2.
   * @param {number} val - The val param.
   */
  set m02(val) {
    this.__data[2] = val;
  }

  /**
   * Getter for row 1, column 0.
   * @return {number} - Returns the m10 value.
   */
  get m10() {
    return this.__data[3]
  }

  /**
   * Setter for row 1, column 0.
   * @param {number} val - The val param.
   */
  set m10(val) {
    this.__data[3] = val;
  }

  /**
   * Getter for row 1, column 1.
   * @return {number} - Returns the m11 value.
   */
  get m11() {
    return this.__data[4]
  }

  /**
   * Setter for row 1, column 1.
   * @param {number} val - The val param.
   */
  set m11(val) {
    this.__data[4] = val;
  }

  /**
   * Getter for row 1, column 2.
   * @return {number} - Returns the m12 value.
   */
  get m12() {
    return this.__data[5]
  }

  /**
   * Setter for row 1, column 2.
   * @param {number} val - The val param.
   */
  set m12(val) {
    this.__data[5] = val;
  }

  /**
   * Getter for row 2, column 0.
   * @return {number} - Returns the m20 value.
   */
  get m20() {
    return this.__data[6]
  }

  /**
   * Setter for row 2, column 0.
   * @param {number} val - The val param.
   */
  set m20(val) {
    this.__data[6] = val;
  }

  /**
   * Getter for row 2, column 1.
   * @return {number} - Returns the m21 value.
   */
  get m21() {
    return this.__data[7]
  }

  /**
   * Setter for row 2, column 1.
   * @param {number} val - The val param.
   */
  set m21(val) {
    this.__data[7] = val;
  }

  /**
   * Getter for row 2, column 2.
   * @return {number} - Returns the m22 value.
   */
  get m22() {
    return this.__data[8]
  }

  /**
   * Setter for row 2, column 2.
   * @param {number} val - The val param.
   */
  set m22(val) {
    this.__data[8] = val;
  }

  /**
   * Getter for the x axis.
   * @return {Vec3} - Returns the x axis as a Vec3.
   */
  get xAxis() {
    return Vec3$1.createFromFloat32Buffer(this.__data.buffer, 0)
  }

  /**
   * Setter for the x axis.
   * @param {Vec3} vec3 - The vec3 value.
   */
  set xAxis(vec3) {
    this.xAxis.set(vec3.x, vec3.y, vec3.z);
  }

  /**
   * Getter for the y axis.
   * * @return {Vec3} - Returns the y axis as a Vec3.
   */
  get yAxis() {
    return Vec3$1.createFromFloat32Buffer(this.__data.buffer, 3)
  }

  /**
   * Setter for the y axis.
   * @param {Vec3} vec3 - The vec3 value.
   */
  set yAxis(vec3) {
    this.yAxis.set(vec3.x, vec3.y, vec3.z);
  }

  /**
   * Getter for the z axis.
   * * @return {Vec3} - Returns the z axis as a Vec3.
   */
  get zAxis() {
    return Vec3$1.createFromFloat32Buffer(this.__data.buffer, 6)
  }

  /**
   * Setter for the z axis.
   * @param {Vec3} vec3 - The vec3 value.
   */
  set zAxis(vec3) {
    this.zAxis.set(vec3.x, vec3.y, vec3.z);
  }

  // /////////////////////////////////////////
  // Setters

  /**
   * The set method.
   * @param {number} m00 - Row 0, column 0.
   * @param {number} m01 - Row 0, column 1.
   * @param {number} m02 - Row 0, column 2.
   * @param {number} m10 - Row 1, column 0.
   * @param {number} m11 - Row 1, column 1.
   * @param {number} m12 - Row 1, column 2.
   * @param {number} m20 - Row 2, column 0.
   * @param {number} m21 - Row 2, column 1.
   * @param {number} m22 - Row 2, column 2.
   */
  set(
    m00 = 1,
    m01 = 0,
    m02 = 0,
    m10 = 0,
    m11 = 1,
    m12 = 0,
    m20 = 0,
    m21 = 0,
    m22 = 1
  ) {
    this.__data[0] = m00;
    this.__data[1] = m01;
    this.__data[2] = m02;
    this.__data[3] = m10;
    this.__data[4] = m11;
    this.__data[5] = m12;
    this.__data[6] = m20;
    this.__data[7] = m21;
    this.__data[8] = m22;
  }

  /**
   * The setIdentity method.
   */
  setIdentity() {
    this.set();
  }

  /**
   * The setFromMat method.
   * Note: works with either Mat3 or Mat4.
   * @param {any} mat - The mat value.
   */
  setFromMat(mat) {
    this.__data[0] = mat.m00;
    this.__data[1] = mat.m01;
    this.__data[2] = mat.m02;
    this.__data[3] = mat.m10;
    this.__data[4] = mat.m11;
    this.__data[5] = mat.m12;
    this.__data[6] = mat.m20;
    this.__data[7] = mat.m21;
    this.__data[8] = mat.m22;
  }

  /**
   * The setFromDirectionAndUpvector method.
   * @param {any} dir - The dir value.
   * @param {any} up - The up value.
   */
  setFromDirectionAndUpvector(dir, up) {
    const zAxis = dir;
    const zLen = zAxis.length();
    if (zLen < Number.EPSILON) {
      this.setIdentity();
      return
    }
    zAxis.scaleInPlace(1 / zLen);

    const xAxis = up.cross(zAxis);
    const xLen = xAxis.length();
    if (xLen > Number.EPSILON) xAxis.scaleInPlace(1 / xLen);

    const yAxis = zAxis.cross(xAxis);
    const yLen = yAxis.length();
    if (yLen > Number.EPSILON) yAxis.scaleInPlace(1 / yLen);

    this.set(
      xAxis.x,
      xAxis.y,
      xAxis.z,
      yAxis.x,
      yAxis.y,
      yAxis.z,
      zAxis.x,
      zAxis.y,
      zAxis.z
    );
  }

  /**
   * Inverts a Mat3 and returns the result as a new instance.
   * @return {Mat3} - Returns a new Mat3.
   */
  inverse() {
    const a00 = this.__data[0];
    const a01 = this.__data[1];
    const a02 = this.__data[2];
    const a10 = this.__data[3];
    const a11 = this.__data[4];
    const a12 = this.__data[5];
    const a20 = this.__data[6];
    const a21 = this.__data[7];
    const a22 = this.__data[8];
    const b01 = a22 * a11 - a12 * a21;
    const b11 = -a22 * a10 + a12 * a20;
    const b21 = a21 * a10 - a11 * a20;
    // Calculate the determinant
    const det = a00 * b01 + a01 * b11 + a02 * b21;

    if (!det) {
      console.warn('Unable to invert Mat3');
      return null
    }
    det = 1.0 / det;

    return new Mat3$1(
      b01 * det,
      (-a22 * a01 + a02 * a21) * det,
      (a12 * a01 - a02 * a11) * det,
      b11 * det,
      (a22 * a00 - a02 * a20) * det,
      (-a12 * a00 + a02 * a10) * det,
      b21 * det,
      (-a21 * a00 + a01 * a20) * det,
      (a11 * a00 - a01 * a10) * det
    )
  }

  /**
   * Inverts a Mat3.
   * @return {boolean} - The return value.
   */
  invertInPlace() {
    const a00 = this.__data[0];
    const a01 = this.__data[1];
    const a02 = this.__data[2];
    const a10 = this.__data[3];
    const a11 = this.__data[4];
    const a12 = this.__data[5];
    const a20 = this.__data[6];
    const a21 = this.__data[7];
    const a22 = this.__data[8];
    const b01 = a22 * a11 - a12 * a21;
    const b11 = -a22 * a10 + a12 * a20;
    const b21 = a21 * a10 - a11 * a20;
    // Calculate the determinant
    const det = a00 * b01 + a01 * b11 + a02 * b21;

    if (!det) {
      console.warn('Unable to invert Mat3');
      return false
    }
    det = 1.0 / det;

    this.set(
      b01 * det,
      (-a22 * a01 + a02 * a21) * det,
      (a12 * a01 - a02 * a11) * det,
      b11 * det,
      (a22 * a00 - a02 * a20) * det,
      (-a12 * a00 + a02 * a10) * det,
      b21 * det,
      (-a21 * a00 + a01 * a20) * det,
      (a11 * a00 - a01 * a10) * det
    );
    return true
  }

  /**
   * Transposes (exchanges columns with rows) this matrix
   * and returns the result as a new instance.
   * @return {Mat3} - Return a new transposed Mat3.
   */
  transpose() {
    return Mat3$1(
      this.__data[0],
      this.__data[3],
      this.__data[6],
      this.__data[1],
      this.__data[4],
      this.__data[7],
      this.__data[2],
      this.__data[5],
      this.__data[8]
    )
  }

  /**
   * Transposes (exchanges columns with rows) this matrix.
   */
  transposeInPlace() {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    const a01 = this.__data[1];
    const a02 = this.__data[2];
    const a12 = this.__data[5];

    this.__data[1] = this.__data[3];
    this.__data[2] = this.__data[6];
    this.__data[3] = a01;
    this.__data[5] = this.__data[7];
    this.__data[6] = a02;
    this.__data[7] = a12;
  }

  /**
   * Transforms the Vec3 with a Mat3.
   * @param {Vec3} vec3 - The vec3 value.
   * @return {Vec3} - Return the result as a new Vec3.
   */
  transformVec3(vec3) {
    return new Vec3$1(
      this.__data[0] * vec3.x +
        this.__data[1] * vec3.y +
        this.__data[2] * vec3.z,
      this.__data[3] * vec3.x +
        this.__data[4] * vec3.y +
        this.__data[5] * vec3.z,
      this.__data[6] * vec3.x +
        this.__data[7] * vec3.y +
        this.__data[8] * vec3.z
    )
  }

  /**
   * Clones this Mat3 returning a new instance.
   * @return {Mat3} - Returns a new Mat3.
   */
  clone() {
    return new Mat3$1(
      this.__data[0],
      this.__data[1],
      this.__data[2],
      this.__data[3],
      this.__data[4],
      this.__data[5],
      this.__data[6],
      this.__data[7],
      this.__data[8],
      this.__data[9]
    )
  }

  // ////////////////////////////////////////
  // Static Methods

  /**
   * Create a new Mat3.
   * @param {...object} ...args - The ...args param.
   * @return {Mat3} - Returns a new Mat3.
   * @private
   */
  static create(...args) {
    return new Mat3$1(...args)
  }

  /**
   * Creates a new Mat3 to wrap existing memory in a buffer.
   * @param {ArrayBuffer} buffer - The buffer value.
   * @param {number} offset - The offset value.
   * @return {Mat3} - Returns a new Mat3.
   * @private
   */
  static createFromFloat32Buffer(buffer, offset = 0) {
    return new Mat3$1(buffer, offset * 4) // 4 bytes per 32bit float
  }

  // ///////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - The json object.
   */
  toJSON() {
    return this.__data
  }

  /**
   * The fromJSON method.
   * @param {object} json - The json param.
   */
  fromJSON(json) {
    this.__data = new Float32Array(json);
  }

  // ///////////////////////////
  // Debugging

  /**
   * The toString method.
   * @return {any} - The return value.
   */
  toString() {
    return this.toJSON().toString()
  }
}

typeRegistry.registerType('Mat3', Mat3$1);

/** A class representing a 4x4 matrix.
 * This matrix class is based on GLM, and is column major.
 * @extends AttrValue
 */
class Mat4 extends AttrValue {
  /**
   * Create a Mat4.
   * @param {number} m00 - Row 0, column 0.
   * @param {number} m01 - Row 0, column 1.
   * @param {number} m02 - Row 0, column 2.
   * @param {number} m03 - Row 0, column 3.
   * @param {number} m10 - Row 1, column 0.
   * @param {number} m11 - Row 1, column 1.
   * @param {number} m12 - Row 1, column 2.
   * @param {number} m13 - Row 1, column 3.
   * @param {number} m20 - Row 2, column 0.
   * @param {number} m21 - Row 2, column 1.
   * @param {number} m22 - Row 2, column 2.
   * @param {number} m23 - Row 2, column 3.
   * @param {number} m30 - Row 3, column 0.
   * @param {number} m31 - Row 3, column 1.
   * @param {number} m32 - Row 3, column 2.
   * @param {number} m33 - Row 3, column 3.
   */
  constructor(
    m00 = 1,
    m01 = 0,
    m02 = 0,
    m03 = 0,
    m10 = 0,
    m11 = 1,
    m12 = 0,
    m13 = 0,
    m20 = 0,
    m21 = 0,
    m22 = 1,
    m23 = 0,
    m30 = 0,
    m31 = 0,
    m32 = 0,
    m33 = 1
  ) {
    super();

    if (m00 instanceof Float32Array) {
      this.__data = m00;
    } else if (m00 instanceof ArrayBuffer) {
      const buffer = m00;
      const byteOffset = m01;
      this.__data = new Float32Array(buffer, byteOffset, 16);
    } else {
      this.__data = new Float32Array(16);
      this.set(
        m00,
        m01,
        m02,
        m03,
        m10,
        m11,
        m12,
        m13,
        m20,
        m21,
        m22,
        m23,
        m30,
        m31,
        m32,
        m33
      );
    }
  }

  // /////////////////////////////////////////
  // properties

  /**
   * Getter for row 0, column 0.
   * @return {number} - Returns the m00 value.
   */
  get m00() {
    return this.__data[0]
  }

  /**
   * Setter for row 0, column 0.
   * @param {number} val - The val param.
   */
  set m00(val) {
    this.__data[0] = val;
  }

  /**
   * Getter for row 0, column 1.
   * @return {number} - Returns the m01 value.
   */
  get m01() {
    return this.__data[1]
  }

  /**
   * Setter for row 0, column 1.
   * @param {number} val - The val param.
   */
  set m01(val) {
    this.__data[1] = val;
  }

  /**
   * Getter for row 0, column 2.
   * @return {number} - Returns the m02 value.
   */
  get m02() {
    return this.__data[2]
  }

  /**
   * Setter for row 0, column 2.
   * @param {number} val - The val param.
   */
  set m02(val) {
    this.__data[2] = val;
  }

  /**
   * Getter for row 0, column 3.
   * @return {number} - Returns the m03 value.
   */
  get m03() {
    return this.__data[3]
  }

  /**
   * Setter for row 0, column 3.
   * @param {number} val - The val param.
   */
  set m03(val) {
    this.__data[3] = val;
  }

  /**
   * Getter for row 1, column 0.
   * @return {number} - Returns the m10 value.
   */
  get m10() {
    return this.__data[4]
  }

  /**
   * Setter for row 1, column 0.
   * @param {number} val - The val param.
   */
  set m10(val) {
    this.__data[4] = val;
  }

  /**
   * Getter for row 1, column 1.
   * @return {number} - Returns the m11 value.
   */
  get m11() {
    return this.__data[5]
  }

  /**
   * Setter for row 1, column 1.
   * @param {number} val - The val param.
   */
  set m11(val) {
    this.__data[5] = val;
  }

  /**
   * Getter for row 1, column 2.
   * @return {number} - Returns the m12 value.
   */
  get m12() {
    return this.__data[6]
  }

  /**
   * Setter for row 1, column 2.
   * @param {number} val - The val param.
   */
  set m12(val) {
    this.__data[6] = val;
  }

  /**
   * Getter for row 1, column 3.
   * @return {number} - Returns the m13 value.
   */
  get m13() {
    return this.__data[7]
  }

  /**
   * Setter for row 1, column 3.
   * @param {number} val - The val param.
   */
  set m13(val) {
    this.__data[7] = val;
  }

  /**
   * Getter for row 2, column 0.
   * @return {number} - Returns the m20 value.
   */
  get m20() {
    return this.__data[8]
  }

  /**
   * Setter for row 2, column 0.
   * @param {number} val - The val param.
   */
  set m20(val) {
    this.__data[8] = val;
  }

  /**
   * Getter for row 2, column 1.
   * @return {number} - Returns the m21 value.
   */
  get m21() {
    return this.__data[9]
  }

  /**
   * Setter for row 2, column 1.
   * @param {number} val - The val param.
   */
  set m21(val) {
    this.__data[9] = val;
  }

  /**
   * Getter for row 2, column 2.
   * @return {number} - Returns the m22 value.
   */
  get m22() {
    return this.__data[10]
  }

  /**
   * Setter for row 2, column 2.
   * @param {number} val - The val param.
   */
  set m22(val) {
    this.__data[10] = val;
  }

  /**
   * Getter for row 2, column 3.
   * @return {number} - Returns the m23 value.
   */
  get m23() {
    return this.__data[11]
  }

  /**
   * Setter for row 2, column 3.
   * @param {number} val - The val param.
   */
  set m23(val) {
    this.__data[11] = val;
  }

  /**
   * Getter for row 3, column 0.
   * @return {number} - Returns the m30 value.
   */
  get m30() {
    return this.__data[12]
  }

  /**
   * Setter for row 3, column 0.
   * @param {number} val - The val param.
   */
  set m30(val) {
    this.__data[12] = val;
  }

  /**
   * Getter for row 3, column 1.
   * @return {number} - Returns the m31 value.
   */
  get m31() {
    return this.__data[13]
  }

  /**
   * Setter for row 3, column 1.
   * @param {number} val - The val param.
   */
  set m31(val) {
    this.__data[13] = val;
  }

  /**
   * Getter for row 3, column 2.
   * @return {number} - Returns the m32 value.
   */
  get m32() {
    return this.__data[14]
  }

  /**
   * Setter for row 3, column 2.
   * @param {number} val - The val param.
   */
  set m32(val) {
    this.__data[14] = val;
  }

  /**
   * Getter for row 3, column 3.
   * @return {number} - Returns the m33 value.
   */
  get m33() {
    return this.__data[15]
  }

  /**
   * Setter for row 3, column 3.
   * @param {number} val - The val param.
   */
  set m33(val) {
    this.__data[15] = val;
  }

  /**
   * Getter for the x axis.
   * @return {Vec3} - Returns the x axis as a Vec3.
   */
  get xAxis() {
    return Vec3$1.createFromFloat32Buffer(this.__data.buffer, 0)
  }

  /**
   * Setter for the x axis.
   * @param {Vec3} vec3 - The vec3 value.
   */
  set xAxis(vec3) {
    this.xAxis.set(vec3.x, vec3.y, vec3.z);
  }

  /**
   * Getter for the y axis.
   * @return {Vec3} - Returns the y axis as a Vec3.
   */
  get yAxis() {
    return Vec3$1.createFromFloat32Buffer(this.__data.buffer, 4)
  }

  /**
   * Setter for the y axis.
   * @param {Vec3} vec3 - The vec3 value.
   */
  set yAxis(vec3) {
    this.yAxis.set(vec3.x, vec3.y, vec3.z);
  }

  /**
   * Getter for the z axis.
   * @return {Vec3} - Returns the z axis as a Vec3.
   */
  get zAxis() {
    return Vec3$1.createFromFloat32Buffer(this.__data.buffer, 8)
  }

  /**
   * Setter for the z axis.
   * @param {Vec3} vec3 - The vec3 value.
   */
  set zAxis(vec3) {
    this.zAxis.set(vec3.x, vec3.y, vec3.z);
  }

  /**
   * Getter for the translation of the matrix.
   * @return {Vec3} - Returns the translation.
   */
  get translation() {
    return Vec3$1.createFromFloat32Buffer(this.__data.buffer, 12)
  }

  /**
   * Setter for the translation of the matrix.
   * @param {Vec3} vec3 - The translation.
   */
  set translation(vec3) {
    this.translation.set(vec3.x, vec3.y, vec3.z);
  }

  // /////////////////////////////////////////
  // Setters

  /**
   * The set method.
   * @param {number} m00 - Row 0, column 0.
   * @param {number} m01 - Row 0, column 1.
   * @param {number} m02 - Row 0, column 2.
   * @param {number} m03 - Row 0, column 3.
   * @param {number} m10 - Row 1, column 0.
   * @param {number} m11 - Row 1, column 1.
   * @param {number} m12 - Row 1, column 2.
   * @param {number} m13 - Row 1, column 3.
   * @param {number} m20 - Row 2, column 0.
   * @param {number} m21 - Row 2, column 1.
   * @param {number} m22 - Row 2, column 2.
   * @param {number} m23 - Row 2, column 3.
   * @param {number} m30 - Row 3, column 0.
   * @param {number} m31 - Row 3, column 1.
   * @param {number} m32 - Row 3, column 2.
   * @param {number} m33 - Row 3, column 3.
   */
  set(
    m00 = 1,
    m01 = 0,
    m02 = 0,
    m03 = 0,
    m10 = 0,
    m11 = 1,
    m12 = 0,
    m13 = 0,
    m20 = 0,
    m21 = 0,
    m22 = 1,
    m23 = 0,
    m30 = 0,
    m31 = 0,
    m32 = 0,
    m33 = 1
  ) {
    this.__data[0] = m00;
    this.__data[1] = m01;
    this.__data[2] = m02;
    this.__data[3] = m03;
    this.__data[4] = m10;
    this.__data[5] = m11;
    this.__data[6] = m12;
    this.__data[7] = m13;
    this.__data[8] = m20;
    this.__data[9] = m21;
    this.__data[10] = m22;
    this.__data[11] = m23;
    this.__data[12] = m30;
    this.__data[13] = m31;
    this.__data[14] = m32;
    this.__data[15] = m33;
  }

  /**
   * The setIdentity method.
   */
  setIdentity() {
    this.set();
  }

  /**
   * The setDataArray method.
   * @param {any} float32Array - The float32Array value.
   */
  setDataArray(float32Array) {
    this.__data = float32Array;
  }

  /**
   * The setFromMat method.
   * @param {Mat4} mat4 - The mat4 value.
   */
  setFromMat4(mat4) {
    this.__data[0] = mat4.m00;
    this.__data[1] = mat4.m01;
    this.__data[2] = mat4.m02;
    this.__data[3] = mat4.m03;
    this.__data[4] = mat4.m10;
    this.__data[5] = mat4.m11;
    this.__data[6] = mat4.m12;
    this.__data[7] = mat4.m13;
    this.__data[8] = mat4.m20;
    this.__data[9] = mat4.m21;
    this.__data[10] = mat4.m22;
    this.__data[11] = mat4.m23;
    this.__data[12] = mat4.m30;
    this.__data[13] = mat4.m31;
    this.__data[14] = mat4.m32;
    this.__data[15] = mat4.m33;
  }

  /**
   * Converts a Mat4 to a Mat3.
   * @param {Mat4} mat4 - The Mat4 value to convert.
   * @return {Mat3} - Returns a new Mat3.
   */
  toMat3(mat4) {
    return new Mat3$1(
      this.__data[0],
      this.__data[1],
      this.__data[2],
      this.__data[4],
      this.__data[5],
      this.__data[6],
      this.__data[8],
      this.__data[9],
      this.__data[10]
    )
  }

  /**
   * Transposes (exchanges columns with rows) this matrix.
   */
  transposeInPlace() {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    const a01 = this.__data[1];
    const a02 = this.__data[2];
    const a03 = this.__data[3];
    const a12 = this.__data[6];
    const a13 = this.__data[7];
    const a23 = this.__data[11];

    this.__data[1] = this.__data[4];
    this.__data[2] = this.__data[8];
    this.__data[3] = this.__data[12];
    this.__data[4] = a01;
    this.__data[6] = this.__data[9];
    this.__data[7] = this.__data[13];
    this.__data[8] = a02;
    this.__data[9] = a12;
    this.__data[11] = this.__data[14];
    this.__data[12] = a03;
    this.__data[13] = a13;
    this.__data[14] = a23;
  }

  /**
   * Transposes (exchanges columns with rows) this matrix
   * and returns the result as a new instance.
   * @return {Mat4} - Return a new transposed Mat4.
   */
  transpose() {
    return new Mat4(
      this.__data[0],
      this.__data[4],
      this.__data[8],
      this.__data[12],
      this.__data[1],
      this.__data[5],
      this.__data[9],
      this.__data[13],
      this.__data[2],
      this.__data[6],
      this.__data[10],
      this.__data[14],
      this.__data[3],
      this.__data[7],
      this.__data[11],
      this.__data[15]
    )
  }

  /**
   * Inverts a Mat4 not using SIMD and returns the result as a new instance.
   * @return {any} - Returns a new Mat4.
   */
  inverse() {
    const a00 = this.__data[0];
    const a01 = this.__data[1];
    const a02 = this.__data[2];
    const a03 = this.__data[3];
    const a10 = this.__data[4];
    const a11 = this.__data[5];
    const a12 = this.__data[6];
    const a13 = this.__data[7];
    const a20 = this.__data[8];
    const a21 = this.__data[9];
    const a22 = this.__data[10];
    const a23 = this.__data[11];
    const a30 = this.__data[12];
    const a31 = this.__data[13];
    const a32 = this.__data[14];
    const a33 = this.__data[15];

    const b00 = a00 * a11 - a01 * a10;
    const b01 = a00 * a12 - a02 * a10;
    const b02 = a00 * a13 - a03 * a10;
    const b03 = a01 * a12 - a02 * a11;
    const b04 = a01 * a13 - a03 * a11;
    const b05 = a02 * a13 - a03 * a12;
    const b06 = a20 * a31 - a21 * a30;
    const b07 = a20 * a32 - a22 * a30;
    const b08 = a20 * a33 - a23 * a30;
    const b09 = a21 * a32 - a22 * a31;
    const b10 = a21 * a33 - a23 * a31;
    const b11 = a22 * a33 - a23 * a32;

    // Calculate the determinant
    let det =
      b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) {
      console.warn('Unable to invert Mat4');
      return null
    }
    det = 1.0 / det;

    return new Mat4(
      (a11 * b11 - a12 * b10 + a13 * b09) * det,
      (a02 * b10 - a01 * b11 - a03 * b09) * det,
      (a31 * b05 - a32 * b04 + a33 * b03) * det,
      (a22 * b04 - a21 * b05 - a23 * b03) * det,
      (a12 * b08 - a10 * b11 - a13 * b07) * det,
      (a00 * b11 - a02 * b08 + a03 * b07) * det,
      (a32 * b02 - a30 * b05 - a33 * b01) * det,
      (a20 * b05 - a22 * b02 + a23 * b01) * det,
      (a10 * b10 - a11 * b08 + a13 * b06) * det,
      (a01 * b08 - a00 * b10 - a03 * b06) * det,
      (a30 * b04 - a31 * b02 + a33 * b00) * det,
      (a21 * b02 - a20 * b04 - a23 * b00) * det,
      (a11 * b07 - a10 * b09 - a12 * b06) * det,
      (a00 * b09 - a01 * b07 + a02 * b06) * det,
      (a31 * b01 - a30 * b03 - a32 * b00) * det,
      (a20 * b03 - a21 * b01 + a22 * b00) * det
    )
  }

  /**
   * Inverts a Mat4.
   * @return {boolean} - The return value.
   */
  invertInPlace() {
    const a00 = this.__data[0];
    const a01 = this.__data[1];
    const a02 = this.__data[2];
    const a03 = this.__data[3];
    const a10 = this.__data[4];
    const a11 = this.__data[5];
    const a12 = this.__data[6];
    const a13 = this.__data[7];
    const a20 = this.__data[8];
    const a21 = this.__data[9];
    const a22 = this.__data[10];
    const a23 = this.__data[11];
    const a30 = this.__data[12];
    const a31 = this.__data[13];
    const a32 = this.__data[14];
    const a33 = this.__data[15];

    const b00 = a00 * a11 - a01 * a10;
    const b01 = a00 * a12 - a02 * a10;
    const b02 = a00 * a13 - a03 * a10;
    const b03 = a01 * a12 - a02 * a11;
    const b04 = a01 * a13 - a03 * a11;
    const b05 = a02 * a13 - a03 * a12;
    const b06 = a20 * a31 - a21 * a30;
    const b07 = a20 * a32 - a22 * a30;
    const b08 = a20 * a33 - a23 * a30;
    const b09 = a21 * a32 - a22 * a31;
    const b10 = a21 * a33 - a23 * a31;
    const b11 = a22 * a33 - a23 * a32;

    // Calculate the determinant
    let det =
      b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) {
      console.warn('Unable to invert Mat4');
      return false
    }
    det = 1.0 / det;

    this.set(
      (a11 * b11 - a12 * b10 + a13 * b09) * det,
      (a02 * b10 - a01 * b11 - a03 * b09) * det,
      (a31 * b05 - a32 * b04 + a33 * b03) * det,
      (a22 * b04 - a21 * b05 - a23 * b03) * det,
      (a12 * b08 - a10 * b11 - a13 * b07) * det,
      (a00 * b11 - a02 * b08 + a03 * b07) * det,
      (a32 * b02 - a30 * b05 - a33 * b01) * det,
      (a20 * b05 - a22 * b02 + a23 * b01) * det,
      (a10 * b10 - a11 * b08 + a13 * b06) * det,
      (a01 * b08 - a00 * b10 - a03 * b06) * det,
      (a30 * b04 - a31 * b02 + a33 * b00) * det,
      (a21 * b02 - a20 * b04 - a23 * b00) * det,
      (a11 * b07 - a10 * b09 - a12 * b06) * det,
      (a00 * b09 - a01 * b07 + a02 * b06) * det,
      (a31 * b01 - a30 * b03 - a32 * b00) * det,
      (a20 * b03 - a21 * b01 + a22 * b00) * det
    );
    return true
  }

  /**
   * Sets this matrix as the inverse of the given Mat4.
   * @param {Mat4} mat4 - The mat4 value.
   * @return {any} - The return value.
   */
  setInverse(mat4) {
    const a00 = mat4.__data[0];
    const a01 = mat4.__data[1];
    const a02 = mat4.__data[2];
    const a03 = mat4.__data[3];
    const a10 = mat4.__data[4];
    const a11 = mat4.__data[5];
    const a12 = mat4.__data[6];
    const a13 = mat4.__data[7];
    const a20 = mat4.__data[8];
    const a21 = mat4.__data[9];
    const a22 = mat4.__data[10];
    const a23 = mat4.__data[11];
    const a30 = mat4.__data[12];
    const a31 = mat4.__data[13];
    const a32 = mat4.__data[14];
    const a33 = mat4.__data[15];

    const b00 = a00 * a11 - a01 * a10;
    const b01 = a00 * a12 - a02 * a10;
    const b02 = a00 * a13 - a03 * a10;
    const b03 = a01 * a12 - a02 * a11;
    const b04 = a01 * a13 - a03 * a11;
    const b05 = a02 * a13 - a03 * a12;
    const b06 = a20 * a31 - a21 * a30;
    const b07 = a20 * a32 - a22 * a30;
    const b08 = a20 * a33 - a23 * a30;
    const b09 = a21 * a32 - a22 * a31;
    const b10 = a21 * a33 - a23 * a31;
    const b11 = a22 * a33 - a23 * a32;

    // Calculate the determinant
    let det =
      b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) {
      throw new Error('Unable to invert Mat4')
    }
    det = 1.0 / det;

    this.set(
      (a11 * b11 - a12 * b10 + a13 * b09) * det,
      (a02 * b10 - a01 * b11 - a03 * b09) * det,
      (a31 * b05 - a32 * b04 + a33 * b03) * det,
      (a22 * b04 - a21 * b05 - a23 * b03) * det,
      (a12 * b08 - a10 * b11 - a13 * b07) * det,
      (a00 * b11 - a02 * b08 + a03 * b07) * det,
      (a32 * b02 - a30 * b05 - a33 * b01) * det,
      (a20 * b05 - a22 * b02 + a23 * b01) * det,
      (a10 * b10 - a11 * b08 + a13 * b06) * det,
      (a01 * b08 - a00 * b10 - a03 * b06) * det,
      (a30 * b04 - a31 * b02 + a33 * b00) * det,
      (a21 * b02 - a20 * b04 - a23 * b00) * det,
      (a11 * b07 - a10 * b09 - a12 * b06) * det,
      (a00 * b09 - a01 * b07 + a02 * b06) * det,
      (a31 * b01 - a30 * b03 - a32 * b00) * det,
      (a20 * b03 - a21 * b01 + a22 * b00) * det
    );
  }

  /**
   * Multiplies two Mat4s not using SIMD and returns the result as a new instance.
   * @param {Mat4} other - The other Mat4 to multiply with.
   * @return {Mat4} - Returns a new Mat4.
   */
  multiply(other) {
    const a00 = this.__data[0];
    const a01 = this.__data[1];
    const a02 = this.__data[2];
    const a03 = this.__data[3];
    const a10 = this.__data[4];
    const a11 = this.__data[5];
    const a12 = this.__data[6];
    const a13 = this.__data[7];
    const a20 = this.__data[8];
    const a21 = this.__data[9];
    const a22 = this.__data[10];
    const a23 = this.__data[11];
    const a30 = this.__data[12];
    const a31 = this.__data[13];
    const a32 = this.__data[14];
    const a33 = this.__data[15];

    // Cache only the current line of the second matrix
    const b = other.asArray();
    let b0 = b[0];
    let b1 = b[1];
    let b2 = b[2];
    let b3 = b[3];
    const result = new Mat4();
    result.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    result.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    result.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    result.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    b3 = b[7];
    result.m10 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    result.m11 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    result.m12 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    result.m13 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    b3 = b[11];
    result.m20 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    result.m21 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    result.m22 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    result.m23 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    b3 = b[15];
    result.m30 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    result.m31 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    result.m32 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    result.m33 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    return result
  }

  /**
   * Multiplies two Mat4s in place explicitly not using SIMD.
   * @param {Mat4} other - The other Mat4 to multiply with.
   * @return {Mat4} - Returns a new Mat4.
   */
  multiplyInPlace(other) {
    const a = this.asArray();
    const a00 = a[0];
    const a01 = a[1];
    const a02 = a[2];
    const a03 = a[3];
    const a10 = a[4];
    const a11 = a[5];
    const a12 = a[6];
    const a13 = a[7];
    const a20 = a[8];
    const a21 = a[9];
    const a22 = a[10];
    const a23 = a[11];
    const a30 = a[12];
    const a31 = a[13];
    const a32 = a[14];
    const a33 = a[15];

    // Cache only the current line of the second matrix
    const b = other.asArray();
    let b0 = b[0];
    let b1 = b[1];
    let b2 = b[2];
    let b3 = b[3];
    this.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    this.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    this.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    this.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    b3 = b[7];
    this.m10 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    this.m11 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    this.m12 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    this.m13 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    b3 = b[11];
    this.m20 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    this.m21 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    this.m22 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    this.m23 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    b3 = b[15];
    this.m30 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    this.m31 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    this.m32 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    this.m33 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    return this
  }

  /**
   * Post multiplies two Mat4s in place explicitly not using SIMD.
   * @param {Mat4} other - The other Mat4 to multiply with.
   * @return {Mat3} - Returns the result as a new Mat4.
   */
  postmultiplyInPlace(other) {
    const a = other.asArray();
    const a00 = a[0];
    const a01 = a[1];
    const a02 = a[2];
    const a03 = a[3];
    const a10 = a[4];
    const a11 = a[5];
    const a12 = a[6];
    const a13 = a[7];
    const a20 = a[8];
    const a21 = a[9];
    const a22 = a[10];
    const a23 = a[11];
    const a30 = a[12];
    const a31 = a[13];
    const a32 = a[14];
    const a33 = a[15];

    // Cache only the current line of the second matrix
    const b = this.asArray();
    let b0 = b[0];
    let b1 = b[1];
    let b2 = b[2];
    let b3 = b[3];
    this.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    this.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    this.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    this.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    b3 = b[7];
    this.m10 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    this.m11 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    this.m12 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    this.m13 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    b3 = b[11];
    this.m20 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    this.m21 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    this.m22 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    this.m23 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    b3 = b[15];
    this.m30 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    this.m31 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    this.m32 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    this.m33 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    return this
  }

  /**
   * Translate a Mat4 by the given vector not using SIMD.
   * @param {Vec3} v3 - The given vector to translate along.
   * @return {Mat4} - The return value.
   */
  translateInPlace(v3) {
    const a = this.__data;
    const x = v3.x;
    const y = v3.y;
    const z = v3.z;
    a[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    a[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    a[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    a[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    return this
  }

  /**
   * Generates a look-at matrix with the given position, focal point, and up axis.
   * @param {Vec3} pos - Position of the viewer.
   * @param {Vec3} target - Point the viewer is looking at.
   * @param {Vec3} up - Vec3 pointing up.
   */
  setLookAt(pos, target, up) {
    const zAxis = pos.subtract(target);
    const zLen = zAxis.length();
    if (zLen < Number.EPSILON) {
      this.setIdentity();
      return
    }
    zAxis.scaleInPlace(1.0 / zLen);

    const xAxis = up.cross(zAxis);
    const xLen = xAxis.length();
    if (xLen > Number.EPSILON) xAxis.scaleInPlace(1.0 / xLen);

    const yAxis = zAxis.cross(xAxis);
    const yLen = yAxis.length();
    if (yLen > Number.EPSILON) yAxis.scaleInPlace(1.0 / yLen);

    /* eslint-disable prettier/prettier*/
    this.set(
      xAxis.x,
      xAxis.y,
      xAxis.z,
      0,
      yAxis.x,
      yAxis.y,
      yAxis.z,
      0,
      zAxis.x,
      zAxis.y,
      zAxis.z,
      0,
      pos.x,
      pos.y,
      pos.z,
      1
    );
    /* eslint-enable prettier/prettier*/
  }

  /**
   * Creates a matrix from a given angle around a given axis.
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.rotate(dest, dest, rad, axis);
   *
   * @param {Vec3} axis - The axis to rotate around.
   * @param {number} rad - The angle to rotate the matrix by.
   * @return {Mat4} - The return value.
   */
  setRotation(axis, rad) {
    const len = axis.length();

    if (Math.abs(len) < Number.EPSILON) {
      return null
    }

    const x = axis.x / len;
    const y = axis.y / len;
    const z = axis.z / len;

    const s = Math.sin(rad);
    const c = Math.cos(rad);
    const t = 1 - c;

    // Perform rotation-specific matrix multiplication
    const a = this.__data;
    a[0] = x * x * t + c;
    a[1] = y * x * t + z * s;
    a[2] = z * x * t - y * s;
    a[3] = 0;
    a[4] = x * y * t - z * s;
    a[5] = y * y * t + c;
    a[6] = z * y * t + x * s;
    a[7] = 0;
    a[8] = x * z * t + y * s;
    a[9] = y * z * t - x * s;
    a[10] = z * z * t + c;
    a[11] = 0;
    a[12] = 0;
    a[13] = 0;
    a[14] = 0;
    a[15] = 1;
    return this
  }

  /**
   * Creates a matrix from the given angle around the X axis.
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.rotateX(dest, dest, rad);
   *
   * @param {number} rad - The angle to rotate the matrix by.
   * @return {Mat4} - The return value.
   */
  setXRotation(rad) {
    const s = Math.sin(rad);
    const c = Math.cos(rad);

    // Perform axis-specific matrix multiplication
    const a = this.__data;
    /* eslint-disable prettier/prettier*/
    a[0] = 1;
    a[1] = 0;
    a[2] = 0;
    a[3] = 0;
    a[4] = 0;
    a[5] = c;
    a[6] = s;
    a[7] = 0;
    a[8] = 0;
    a[9] = -s;
    a[10] = c;
    a[11] = 0;
    a[12] = 0;
    a[13] = 0;
    a[14] = 0;
    a[15] = 1;
    /* eslint-enable prettier/prettier*/
    return this
  }

  /**
   * Creates a matrix from the given angle around the Y axis.
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.rotateY(dest, dest, rad);
   *
   * @param {number} rad - The angle to rotate the matrix by.
   * @return {Mat4} - The return value.
   */
  setYRotation(rad) {
    const s = Math.sin(rad);
    const c = Math.cos(rad);

    // Perform axis-specific matrix multiplication
    const a = this.__data;
    /* eslint-disable prettier/prettier*/
    a[0] = c;
    a[1] = 0;
    a[2] = -s;
    a[3] = 0;
    a[4] = 0;
    a[5] = 1;
    a[6] = 0;
    a[7] = 0;
    a[8] = s;
    a[9] = 0;
    a[10] = c;
    a[11] = 0;
    a[12] = 0;
    a[13] = 0;
    a[14] = 0;
    a[15] = 1;
    /* eslint-enable prettier/prettier*/
    return this
  }

  /**
   * Creates a matrix from the given angle around the Z axis.
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.rotateZ(dest, dest, rad);
   *
   * @param {number} rad - The angle to rotate the matrix by.
   * @return {Mat4} - The return value.
   */
  setZRotation(rad) {
    const s = Math.sin(rad);
    const c = Math.cos(rad);

    // Perform axis-specific matrix multiplication
    const a = this.__data;
    /* eslint-disable prettier/prettier*/
    a[0] = c;
    a[1] = s;
    a[2] = 0;
    a[3] = 0;
    a[4] = -s;
    a[5] = c;
    a[6] = 0;
    a[7] = 0;
    a[8] = 0;
    a[9] = 0;
    a[10] = 1;
    a[11] = 0;
    a[12] = 0;
    a[13] = 0;
    a[14] = 0;
    a[15] = 1;
    /* eslint-enable prettier/prettier*/
    return this
  }

  /**
   * Transforms the Vec4 with a Mat4.
   * @param {any} vec - The vec value.
   * @return {Vec4} - Return the result as a new Vec4.
   */
  transformVec4(vec) {
    const a = this.__data;
    const x = vec.x;
    const y = vec.y;
    const z = vec.z;
    const w = vec.t;
    return new Vec4(
      a[0] * x + a[4] * y + a[8] * z + a[12] * w,
      a[1] * x + a[5] * y + a[9] * z + a[13] * w,
      a[2] * x + a[6] * y + a[10] * z + a[14] * w,
      a[3] * x + a[7] * y + a[11] * z + a[15] * w
    )
  }

  /**
   * The transformVec3 method.
   * @param {any} vec - The vec value.
   * @return {Vec3} - Return the result as a new Vec3.
   */
  transformVec3(vec) {
    const a = this.__data;
    const x = vec.x;
    const y = vec.y;
    const z = vec.z;
    return new Vec3$1(
      a[0] * x + a[4] * y + a[8] * z + a[12],
      a[1] * x + a[5] * y + a[9] * z + a[13],
      a[2] * x + a[6] * y + a[10] * z + a[14]
    )
  }

  /**
   * The rotateVec3 method.
   * @param {any} vec - The vec value.
   * @return {Vec3} - Return the result as a new Vec3.
   */
  rotateVec3(vec) {
    const a = this.__data;
    const x = vec.x;
    const y = vec.y;
    const z = vec.z;
    return new Vec3$1(
      a[0] * x + a[4] * y + a[8] * z,
      a[1] * x + a[5] * y + a[9] * z,
      a[2] * x + a[6] * y + a[10] * z
    )
  }

  /**
   * Set the perspective from a Mat4.
   * @param {any} fovy - The fovy value.
   * @param {any} aspect - The aspect value.
   * @param {any} near - The near value.
   * @param {any} far - The far value.
   */
  setPerspectiveMatrix(fovy, aspect, near, far) {
    const f = Math.tan(Math.PI * 0.5 - 0.5 * fovy);
    const rangeInv = 1.0 / (near - far);
    /* eslint-disable prettier/prettier*/
    this.set(
      f / aspect,
      0,
      0,
      0,
      0,
      f,
      0,
      0,
      0,
      0,
      (near + far) * rangeInv,
      -1,
      0,
      0,
      near * far * rangeInv * 2,
      0
    );
    /* eslint-enable prettier/prettier*/
  }

  /**
   * The setOrthographicMatrix method.
   * @param {any} left - The left value.
   * @param {any} right - The right value.
   * @param {any} bottom - The bottom value.
   * @param {any} top - The top value.
   * @param {any} near - The near value.
   * @param {any} far - The far value.
   */
  setOrthographicMatrix(left, right, bottom, top, near, far) {
    const lr = 1 / (left - right);
    const bt = 1 / (bottom - top);
    const nf = 1 / (near - far);
    /* eslint-disable prettier/prettier*/
    this.set(
      -2 * lr,
      0,
      0,
      0,
      0,
      -2 * bt,
      0,
      0,
      0,
      0,
      2 * nf,
      0,
      (left + right) * lr,
      (top + bottom) * bt,
      (far + near) * nf,
      1
    );
    /* eslint-enable prettier/prettier*/
  }

  /**
   * The setScale method.
   * @param {number} x - The x value.
   * @param {number} y - The y value.
   * @param {number} z - The z value.
   */
  setScale(x, y, z) {
    /* eslint-disable prettier/prettier*/
    if (x instanceof Vec3$1) {
      this.set(x.x, 0, 0, 0, 0, x.y, 0, 0, 0, 0, x.z, 0, 0, 0, 0, 1);
    } else {
      this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
    }
    /* eslint-enable prettier/prettier*/
  }

  /**
   * The setFromMat3x4Array method.
   * @param {any} m3x4 - The m3x4 value.
   */
  setFromMat3x4Array(m3x4) {
    /* eslint-disable prettier/prettier*/
    this.set(
      m3x4[0],
      m3x4[1],
      m3x4[2],
      0,
      m3x4[3],
      m3x4[4],
      m3x4[5],
      0,
      m3x4[6],
      m3x4[7],
      m3x4[8],
      0,
      m3x4[9],
      m3x4[10],
      m3x4[11],
      1
    );
    /* eslint-enable prettier/prettier*/
  }

  /**
   * Creates a new Mat4 to wrap existing memory in a buffer.
   * @param {ArrayBuffer} buffer - The buffer value.
   * @param {number} offset - The offset value.
   * @return {Mat4} - Returns a new Mat4.
   * @private
   */
  static createFromFloat32Buffer(buffer, offset = 0) {
    return new Mat4(buffer, offset * 4) // 4 bytes per 32bit float
  }

  /**
   * Clones this Mat4 returning a new instance.
   * @return {Mat4} - Returns a new Mat4.
   */
  clone() {
    return new Mat4(
      this.__data[0],
      this.__data[1],
      this.__data[2],
      this.__data[3],
      this.__data[4],
      this.__data[5],
      this.__data[6],
      this.__data[7],
      this.__data[8],
      this.__data[9],
      this.__data[10],
      this.__data[11],
      this.__data[12],
      this.__data[13],
      this.__data[14],
      this.__data[15]
    )
  }

  // ////////////////////////////////////////
  // Static Methods

  /**
   * Creates a new Mat4.
   * @param {...object} ...args - The ...args param.
   * @return {Mat4} - Returns a new Mat4.
   * @private
   */
  static create(...args) {
    return new Mat4(...args)
  }

  // ///////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - The json object.
   */
  toJSON() {
    return this.__data
  }

  /**
   * The fromJSON method.
   * @param {object} json - The json param.
   */
  fromJSON(json) {
    this.__data = new Float32Array(json);
  }
}

typeRegistry.registerType('Mat4', Mat4);

/** Class representing a quaternion. Quaternions are used to represent rotations
 * without encountering gimble lock. Based on complex numbers that are not easy
 * to understand intuitively.
 * @extends AttrValue
 */
class Quat extends AttrValue {
  /**
   * Create a quaternion.
   * @param {number} x - The angle of the x axis. Default is 0.
   * @param {number} y - The angle of the y axis. Default is 0.
   * @param {number} z - The angle of the z axis. Default is 0.
   * @param {number} w - The w value. Default is 1.
   */
  constructor(x = 0, y = 0, z = 0, w = 1) {
    super();

    if (x instanceof ArrayBuffer) {
      const buffer = x;
      const byteOffset = y;
      this.__data = new Float32Array(buffer, byteOffset, 4);
    } else {
      this.__data = new Float32Array(4);
      if (typeof x === 'object') {
        this.__data[0] = 0;
        this.__data[1] = 0;
        this.__data[2] = 0;
        this.__data[3] = 1;
        for (const key in x) {
          if (Array.isArray(x[key])) this[key].call(this, ...x[key]);
          else this[key].call(this, x[key]);
        }
      } else {
        this.__data[0] = x;
        this.__data[1] = y;
        this.__data[2] = z;
        this.__data[3] = w;
      }
    }
  }

  /**
   * Getter for x axis rotation.
   * @return {number} - Returns the x axis rotation.
   */
  get x() {
    return this.__data[0]
  }

  /**
   * Setter for x axis rotation.
   * @param {number} val - The val param.
   */
  set x(val) {
    this.__data[0] = val;
  }

  /**
   * Getter for y axis rotation.
   * @return {number} - Returns the y axis rotation.
   */
  get y() {
    return this.__data[1]
  }

  /**
   * Setter for y axis rotation.
   * @param {number} val - The val param.
   */
  set y(val) {
    this.__data[1] = val;
  }

  /**
   * Getter for z axis rotation.
   * @return {number} - Returns the z axis rotation.
   */
  get z() {
    return this.__data[2]
  }

  /**
   * Setter for z axis rotation.
   * @param {number} val - The val param.
   */
  set z(val) {
    this.__data[2] = val;
  }

  /**
   * Getter for w value.
   * @return {number} - Returns the w value.
   */
  get w() {
    return this.__data[3]
  }

  /**
   * Setter for w.
   * @param {number} val - The val param.
   */
  set w(val) {
    this.__data[3] = val;
  }

  /**
   * Setter from scalar components.
   * @param {number} x - The x axis rotation.
   * @param {number} y  - The y axis rotation.
   * @param {number} z  - The z axis rotation.
   * @param {number} w  - The w value.
   */
  set(x, y, z, w) {
    this.__data[0] = x;
    this.__data[1] = y;
    this.__data[2] = z;
    this.__data[3] = w;
  }

  /**
   * The setDataArray method.
   * @param {any} float32Array - The float32Array value.
   */
  setDataArray(float32Array) {
    this.__data = float32Array;
  }

  /**
   * Setter from another vector.
   * @param {any} other - The other vector to set from.
   */
  setFromOther(other) {
    this.__data[0] = other.x;
    this.__data[1] = other.y;
    this.__data[2] = other.z;
    this.__data[3] = other.w;
  }

  /**
   * Set this quat from a euler rotation.
   * @param {any} eulerAngles - The euler angles rotation.
   */
  setFromEulerAngles(eulerAngles) {
    const ordered = new Vec3$1();

    switch (eulerAngles.order) {
      case 0:
        /* 'XYZ' */
        ordered.set(eulerAngles.x, -eulerAngles.y, eulerAngles.z);
        break
      case 1:
        /* 'YZX' */
        ordered.set(eulerAngles.y, -eulerAngles.z, eulerAngles.x);
        break
      case 2:
        /* 'ZXY' */
        ordered.set(eulerAngles.z, -eulerAngles.x, eulerAngles.y);
        break
      case 3:
        /* 'XZY' */
        ordered.set(eulerAngles.x, eulerAngles.z, eulerAngles.y);
        break
      case 4:
        /* 'ZYX' */
        ordered.set(eulerAngles.z, eulerAngles.y, eulerAngles.x);
        break
      case 5:
        /* 'YXZ' */
        ordered.set(eulerAngles.y, eulerAngles.x, eulerAngles.z);
        break
      default:
        throw new Error('sdrty')
    }

    const ti = ordered.x * 0.5;
    const tj = ordered.y * 0.5;
    const tk = ordered.z * 0.5;
    const ci = Math.cos(ti);
    const cj = Math.cos(tj);
    const ck = Math.cos(tk);
    const si = Math.sin(ti);
    const sj = Math.sin(tj);
    const sk = Math.sin(tk);
    const cc = ci * ck;
    const cs = ci * sk;
    const sc = si * ck;
    const ss = si * sk;
    const ai = cj * sc - sj * cs;
    const aj = cj * ss + sj * cc;
    const ak = cj * cs - sj * sc;

    this.w = cj * cc + sj * ss;

    switch (eulerAngles.order) {
      case 0:
        /* ' XYZ' */
        this.x = ai;
        this.y = -aj;
        this.z = ak;
        break
      case 1:
        /* 'YZX' */
        this.x = ak;
        this.y = ai;
        this.z = -aj;
        break
      case 2:
        /* 'ZXY' */
        this.x = -aj;
        this.y = ak;
        this.z = ai;
        break
      case 3:
        /* 'XZY' */
        this.x = ai;
        this.y = ak;
        this.z = aj;
        break
      case 4:
        /* 'ZYX' */
        this.x = ak;
        this.y = aj;
        this.z = ai;
        break
      case 5:
        /* 'YXZ' */
        this.x = aj;
        this.y = ai;
        this.z = ak;
        break
      default:
        throw new Error('sdrty')
    }
  }

  /**
   * The toEulerAngles method.
   * @param {number} rotationOrder - The order in which the rotations are applied.
   * @return {any} - The return value.
   */
  toEulerAngles(rotationOrder) {
    const ordered = new Vec3$1();
    switch (rotationOrder) {
      case 0:
        /* ' XYZ' */
        ordered.set(this.z, this.x, this.y);
        break
      case 1:
        /* 'YZX' */
        ordered.set(this.x, this.y, this.z);
        break
      case 2:
        /* 'ZXY' */
        ordered.set(this.y, this.z, this.x);
        break
      case 3:
        /* 'XZY' */
        ordered.set(this.y, -this.x, this.z);
        break
      case 4:
        /* 'ZYX' */
        ordered.set(this.x, -this.z, this.y);
        break
      case 5:
        /* 'YXZ' */
        ordered.set(this.z, -this.y, this.x);
        break
      default:
        throw new Error('Invalid rotation order:' + rotationOrder)
    }

    const euler = new Vec3$1();
    const test = ordered.x * ordered.y + ordered.z * this.w;
    if (test > 0.49999) {
      // singularity at north pole
      euler.y = 2.0 * Math.atan2(ordered.x, this.w);
      euler.z = Math.PI * 0.5;
      euler.x = 0.0;
    } else if (test < -0.49999) {
      // singularity at south pole
      euler.y = -2.0 * Math.atan2(ordered.x, this.w);
      euler.z = Math.PI * -0.5;
      euler.x = 0.0;
    } else {
      const sqx = ordered.x * ordered.x;
      const sqy = ordered.y * ordered.y;
      const sqz = ordered.z * ordered.z;
      euler.y = Math.atan2(
        2.0 * ordered.y * this.w - 2.0 * ordered.x * ordered.z,
        1.0 - 2.0 * sqy - 2.0 * sqz
      );
      euler.z = Math.asin(2.0 * test);
      euler.x = Math.atan2(
        2.0 * ordered.x * this.w - 2.0 * ordered.y * ordered.z,
        1.0 - 2.0 * sqx - 2.0 * sqz
      );
    }

    switch (rotationOrder) {
      case 0:
        /* ' XYZ' */
        return new EulerAngles(euler.y, euler.z, euler.x, rotationOrder)
      case 1:
        /* 'YZX' */
        return new EulerAngles(euler.x, euler.y, euler.z, rotationOrder)
      case 2:
        /* 'ZXY' */
        return new EulerAngles(euler.z, euler.x, euler.y, rotationOrder)
      case 3:
        /* 'XZY' */
        return new EulerAngles(-euler.y, euler.x, euler.z, rotationOrder)
      case 4:
        /* 'ZYX' */
        return new EulerAngles(euler.x, euler.z, -euler.y, rotationOrder)
      case 5:
        /* 'YXZ' */
        return new EulerAngles(euler.z, -euler.y, euler.x, rotationOrder)
    }
  }

  /**
   * Set this quat to a rotation defined by an axis and an angle (in radians).
   * @param {any} axis - The axis value.
   * @param {number} angle - The axis angle.
   */
  setFromAxisAndAngle(axis, angle) {
    const halfAngle = angle / 2.0;
    const vec = axis.normalize().scale(Math.sin(halfAngle));
    this.set(vec.x, vec.y, vec.z, Math.cos(halfAngle));
  }

  /**
   * The setFromDirectionAndUpvector method.
   * @param {any} dir - The direction value.
   * @param {any} up - The up angle.
   */
  setFromDirectionAndUpvector(dir, up) {
    const mat3 = new Mat3$1();
    mat3.setFromDirectionAndUpvector(dir, up);
    this.setFromMat3(mat3);
  }

  /**
   * The setFrom2Vectors method.
   * @param {any} v0 - The v0 vector.
   * @param {any} v1 - The v1 vector.
   */
  setFrom2Vectors(v0, v1) {
    v0.normalize();
    v1.normalize();
    const c = v0.cross(v1);
    const d = v0.dot(v1);
    const s = Math.sqrt((1 + d) * 2);
    // this.set( s/2, c.x / s, c.y / s, c.z / s );
    this.set(c.x / s, c.y / s, c.z / s, s / 2);
    this.normalizeInPlace();
  }

  /**
   * Set the quat from a Mat3.
   * @param {Mat3} mat3 - The mat3 value.
   */
  setFromMat3(mat3) {
    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
    // article "Quaternion Calculus and Fast Animation".
    const fTrace = mat3.__data[0] + mat3.__data[4] + mat3.__data[8];
    let fRoot;

    if (fTrace > 0.0) {
      // |w| > 1/2, may as well choose w > 1/2
      fRoot = Math.sqrt(fTrace + 1); // 2w
      this.__data[3] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot; // 1/(4w)
      this.__data[0] = (mat3.__data[5] - mat3.__data[7]) * fRoot;
      this.__data[1] = (mat3.__data[6] - mat3.__data[2]) * fRoot;
      this.__data[2] = (mat3.__data[1] - mat3.__data[3]) * fRoot;
    } else {
      // |w| <= 1/2
      let i = 0;
      if (mat3.__data[4] > mat3.__data[0]) i = 1;
      if (mat3.__data[8] > mat3.__data[i * 3 + i]) i = 2;
      const j = (i + 1) % 3;
      const k = (i + 2) % 3;

      fRoot = Math.sqrt(
        mat3.__data[i * 3 + i] -
          mat3.__data[j * 3 + j] -
          mat3.__data[k * 3 + k] +
          1.0
      );
      this.__data[i] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      this.__data[3] = (mat3.__data[j * 3 + k] - mat3.__data[k * 3 + j]) * fRoot;
      this.__data[j] = (mat3.__data[j * 3 + i] + mat3.__data[i * 3 + j]) * fRoot;
      this.__data[k] = (mat3.__data[k * 3 + i] + mat3.__data[i * 3 + k]) * fRoot;
    }
    this.normalizeInPlace();
  }

  /**
   * Set the quat from a Mat4.
   * @param {Mat4} mat4 - The mat4 value.
   */
  setFromMat4(mat4) {
    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
    // article "Quaternion Calculus and Fast Animation".
    const fTrace = mat4.__data[0] + mat4.__data[5] + mat4.__data[10];
    let fRoot;

    if (fTrace > 0.0) {
      // |w| > 1/2, may as well choose w > 1/2
      fRoot = Math.sqrt(fTrace + 1); // 2w
      this.__data[3] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot; // 1/(4w)
      this.__data[0] = (mat4.__data[6] - mat4.__data[9]) * fRoot;
      this.__data[1] = (mat4.__data[8] - mat4.__data[2]) * fRoot;
      this.__data[2] = (mat4.__data[1] - mat4.__data[4]) * fRoot;
    } else {
      // |w| <= 1/2
      let i = 0;
      if (mat4.__data[5] > mat4.__data[0]) i = 1;
      if (mat4.__data[10] > mat4.__data[i * 4 + i]) i = 2;
      const j = (i + 1) % 3;
      const k = (i + 2) % 3;

      fRoot = Math.sqrt(
        mat4.__data[i * 4 + i] -
          mat4.__data[j * 4 + j] -
          mat4.__data[k * 4 + k] +
          1.0
      );
      this.__data[i] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      this.__data[3] = (mat4.__data[j * 4 + k] - mat4.__data[k * 4 + j]) * fRoot;
      this.__data[j] = (mat4.__data[j * 4 + i] + mat4.__data[i * 4 + j]) * fRoot;
      this.__data[k] = (mat4.__data[k * 4 + i] + mat4.__data[i * 4 + k]) * fRoot;
    }
    this.normalizeInPlace();
  }

  /**
   * The isIdentity method.
   * @return {boolean} - Returns true or false.
   */
  isIdentity() {
    return this.getAngle() < Number.EPSILON
  }

  /**
   * The getAngle method.
   * @return {any} - The return value.
   */
  getAngle() {
    return Math.acos(this.w) * 2.0
  }

  /**
   * Returns true if this Quat is exactly the same as other.
   * @param {Quat} other - The other Quat to compare with.
   * @return {boolean} - Returns true or false.
   */
  equal(other) {
    return (
      this.x == other.x &&
      this.y == other.y &&
      this.z == other.z &&
      this.w == other.w
    )
  }

  /**
   * Returns true if this Quat is NOT exactly the same other.
   * @param {Quat} other - The other Quat to compare with.
   * @return {boolean} - Returns true or false.
   */
  notequals(other) {
    return (
      this.x != other.x &&
      this.y != other.y &&
      this.z != other.z &&
      this.w != other.w
    )
  }

  /**
   * Returns true if this Quat is approximately the same as other.
   * @param {Quat} other - The other Quat to compare with.
   * @param {number} precision - The precision to which the values must match.
   * @return {boolean} - Returns true or false.
   */
  approxEqual(other, precision = Number.EPSILON) {
    return (
      Math.abs(this.x - other.x) < precision &&
      Math.abs(this.y - other.y) < precision &&
      Math.abs(this.z - other.z) < precision &&
      Math.abs(this.w - other.w) < precision
    )
  }

  /**
   * Adds other to this Quat and return the result as a new Quat.
   * @param {Quat} other - The other Quat to add.
   * @return {Quat} - Returns a new Quat.
   */
  add(other) {
    return new Quat(
      this.x + other.x,
      this.y + other.y,
      this.z + other.z,
      this.w + other.w
    )
  }

  /**
   * Adds other to this Quat.
   * @param {Quat} other - The other Quat to add.
   */
  addInPlace(other) {
    this.x += other.x;
    this.y += other.y;
    this.z += other.z;
    this.w += other.w;
  }

  /**
   * Subtracts other from this Quat and returns the result as a new Quat.
   * @param {Quat} other - The other Quat to subtract.
   * @return {Quat} - Returns a new Quat.
   */
  subtract(other) {
    return new Quat(
      this.x - other.x,
      this.y - other.y,
      this.z - other.z,
      this.w - other.w
    )
  }

  /**
   * Scales this Quat by scalar and returns the result as a new Quat.
   * @param {number} scalar - The scalar value.
   * @return {Quat} - Returns a new Vec3.
   */
  scale(scalar) {
    return new Quat(
      this.x * scalar,
      this.y * scalar,
      this.z * scalar,
      this.w * scalar
    )
  }

  /**
   * Scales this Quat by scalar.
   * @param {number} scalar - The scalar value.
   */
  scaleInPlace(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    this.w *= scalar;
  }

  /**
   * Calculates the length of this Quat.
   * @return {number} - Returns the length.
   */
  length() {
    const x = this.__data[0];
    const y = this.__data[1];
    const z = this.__data[2];
    const w = this.__data[3];
    return Math.sqrt(x * x + y * y + z * z + w * w)
  }

  /**
   * Calculates the squared length of this Quat.
   * @return {number} - Returns the length.
   */
  lengthSquared() {
    const x = this.__data[0];
    const y = this.__data[1];
    const z = this.__data[2];
    const w = this.__data[3];
    return x * x + y * y + z * z + w * w
  }

  /**
   * Normalizes the Quat and returns it as a new Quat.
   * @return {Quat} - Returns the Quat normalized.
   */
  normalize() {
    const x = this.__data[0];
    const y = this.__data[1];
    const z = this.__data[2];
    const w = this.__data[3];
    let len = x * x + y * y + z * z + w * w;
    if (len < Number.EPSILON) {
      return new Quat()
    }

    // TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
    return new Quat(x * len, y * len, z * len)
  }

  /**
   * Normalizes the Quat, modifying it and returning it normalized.
   */
  normalizeInPlace() {
    const x = this.__data[0];
    const y = this.__data[1];
    const z = this.__data[2];
    const w = this.__data[3];
    let len = x * x + y * y + z * z + w * w;
    if (len < Number.EPSILON) {
      return
    }
    len = 1 / Math.sqrt(len);
    this.set(x * len, y * len, z * len, w * len);
  }

  /**
   * Calculates the dot product of two Quats.
   * @param {Quat} other - The other Quat to compare with.
   * @return {number} - Returns the dot product.
   */
  dot(other) {
    return (
      this.x * other.x + this.y * other.y + this.z * other.z + this.w * other.w
    )
  }

  /**
   * Calculates the cross product of two Quats and returns the result as a new Quat.
   * @param {Quat} other - The other Quat to calculate with.
   * @return {Quat} - Returns the cross product as a new Quat.
   */
  cross(other) {
    const ax = this.x;
    const ay = this.y;
    const az = this.z;
    const at = this.w;
    const bx = other.x;
    const by = other.y;
    const bz = other.z;
    const bt = other.w;

    return new Quat(
      ay * bz - az * by,
      az * bt - at * bz,
      at * bx - ax * bt,
      ax * by - ay * bx
    )
  }

  /**
   * Returns the rotational conjugate of this Quat.
   * Conjugation represents the same rotation of the Quat but
   * in the opposite direction around the rotational axis.
   * @return {any} - the return value.
   */
  conjugate() {
    return new Quat(-this.x, -this.y, -this.z, this.w)
  }

  /**
   * The inverse method.
   * @return {Quat} - Returns a new Quat.
   */
  inverse() {
    return this.conjugate()
  }

  /**
   * Aligns this quaternion with another one ensuring that the delta between
   * the Quat values is the shortest path over the hypersphere.
   *  @param {Quat} other - The other Quat to divide by.
   */
  alignWith(other) {
    if (this.dot(other) < 0.0) {
      this.set(-this.x, -this.y, -this.z, -this.w);
    }
  }

  // multiply(quat) {
  //     return new Quat(
  //         this.x * quat.w + this.w * quat.x + this.y * quat.z - this.z * quat.y,
  //         this.y * quat.w + this.w * quat.y + this.z * quat.x - this.x * quat.z,
  //         this.z * quat.w + this.w * quat.z + this.x * quat.y - this.y * quat.x,
  //         this.w * quat.w - this.x * quat.x - this.y * quat.y - this.z * quat.z
  //     );
  // }

  /**
   * Multiplies two Quats and returns the result as a new Quat.
   * @param {Quat} other - The other Quat to multiply.
   * @return {Quat} - Returns a new Quat.
   */
  multiply(other) {
    const ax = this.__data[0];
    const ay = this.__data[1];
    const az = this.__data[2];
    const aw = this.__data[3];
    const bx = other.__data[0];
    const by = other.__data[1];
    const bz = other.__data[2];
    const bw = other.__data[3];

    return new Quat(
      ax * bw + aw * bx + ay * bz - az * by,
      ay * bw + aw * by + az * bx - ax * bz,
      az * bw + aw * bz + ax * by - ay * bx,
      aw * bw - ax * bx - ay * by - az * bz
    )
  }

  /**
   * Multiplies two Quats.
   * @param {Quat} other - The other Quat to multiply.
   */
  multiplyInPlace(other) {
    const ax = this.__data[0];
    const ay = this.__data[1];
    const az = this.__data[2];
    const aw = this.__data[3];
    const bx = other.__data[0];
    const by = other.__data[1];
    const bz = other.__data[2];
    const bw = other.__data[3];

    this.set(
      ax * bw + aw * bx + ay * bz - az * by,
      ay * bw + aw * by + az * bx - ax * bz,
      az * bw + aw * bz + ax * by - ay * bx,
      aw * bw - ax * bx - ay * by - az * bz
    );
  }

  /**
   * Rotates a vector by this quaterion.
   * Don't forget to normalize the quaternion unless
   * you want axial translation as well as rotation.
   * @param {Vec3} vec3 - The vec3 value.
   * @return {Vec3} - Returns a new Vec3.
   */
  rotateVec3(vec3) {
    const vq = new Quat(vec3.x, vec3.y, vec3.z, 0.0);
    const pq = this.multiply(vq).multiply(this.conjugate());
    return new Vec3$1(pq.x, pq.y, pq.z)
  }

  /**
   * Rotates a quaternion by the given angle about the X axis.
   * @param {number} rad - Angle (in radians) to rotate.
   */
  rotateX(rad) {
    rad *= 0.5;

    const ax = this.x;
    const ay = this.y;
    const az = this.z;
    const aw = this.w;
    const bx = Math.sin(rad);
    const bw = Math.cos(rad);

    this.x = ax * bw + aw * bx;
    this.y = ay * bw + az * bx;
    this.z = az * bw - ay * bx;
    this.w = aw * bw - ax * bx;
  }

  /**
   * Rotates a quaternion by the given angle about the Y axis.
   * @param {number} rad - Angle (in radians) to rotate.
   */
  rotateY(rad) {
    rad *= 0.5;

    const ax = this.x;
    const ay = this.y;
    const az = this.z;
    const aw = this.w;
    const by = Math.sin(rad);
    const bw = Math.cos(rad);

    this.x = ax * bw - az * by;
    this.y = ay * bw + aw * by;
    this.z = az * bw + ax * by;
    this.w = aw * bw - ay * by;
  }

  /**
   * Rotates a quaternion by the given angle about the Z axis.
   * @param {number} rad - Angle (in radians) to rotate.
   */
  rotateZ(rad) {
    rad *= 0.5;

    const ax = this.x;
    const ay = this.y;
    const az = this.z;
    const aw = this.w;
    const bz = Math.sin(rad);
    const bw = Math.cos(rad);

    this.x = ax * bw + ay * bz;
    this.y = ay * bw - ax * bz;
    this.z = az * bw + aw * bz;
    this.w = aw * bw - az * bz;
  }

  /**
   * Converts this Quat to a Mat3 (a 3x3 matrix).
   * @return {Mat3} - TReturns a new Mat3.
   */
  toMat3() {
    const x = this.x;
    const y = this.y;
    const z = this.z;
    const w = this.w;
    const x2 = x + x;
    const y2 = y + y;
    const z2 = z + z;
    const xx = x * x2;
    const yx = y * x2;
    const yy = y * y2;
    const zx = z * x2;
    const zy = z * y2;
    const zz = z * z2;
    const wx = w * x2;
    const wy = w * y2;
    const wz = w * z2;

    const mat3 = new Mat3$1();
    mat3.__data[0] = 1 - yy - zz;
    mat3.__data[3] = yx - wz;
    mat3.__data[6] = zx + wy;

    mat3.__data[1] = yx + wz;
    mat3.__data[4] = 1 - xx - zz;
    mat3.__data[7] = zy - wx;

    mat3.__data[2] = zx - wy;
    mat3.__data[5] = zy + wx;
    mat3.__data[8] = 1 - xx - yy;

    return mat3
  }

  /**
   * Returns the X axis of this quaternion.
   * @return {Vec3} - Returns the X axis as a Vec3.
   */
  getXaxis() {
    const xy = this.x * this.y;
    const xz = this.x * this.z;
    const yy = this.y * this.y;
    const yw = this.y * this.w;
    const zz = this.z * this.z;
    const zw = this.z * this.w;

    return new Vec3$1(1.0 - 2.0 * (zz + yy), 2.0 * (xy + zw), 2.0 * (xz - yw))
  }

  /**
   * Returns the Y axis of this quaternion.
   * @return {Vec3} - Returns the Y axis as a Vec3.
   */
  getYaxis() {
    const xx = this.x * this.x;
    const xy = this.x * this.y;
    const xw = this.x * this.w;
    const yz = this.y * this.z;
    const zz = this.z * this.z;
    const zw = this.z * this.w;

    return new Vec3$1(2.0 * (xy - zw), 1.0 - 2.0 * (zz + xx), 2.0 * (yz + xw))
  }

  /**
   * Returns the Z axis of this quaternion.
   * @return {Vec3} - Returns the Z axis as a Vec3.
   */
  getZaxis() {
    const xx = this.x * this.x;
    const xz = this.x * this.z;
    const xw = this.x * this.w;

    const yy = this.y * this.y;
    const yz = this.y * this.z;
    const yw = this.y * this.w;
    const temp = new Vec3$1();

    return new Vec3$1(2.0 * (yw + xz), 2.0 * (yz - xw), 1.0 - 2.0 * (yy + xx))
  }

  /**
   * Reflects this quaternion according to the axis provided.
   * @param {number} axisIndex - An integer with value of 0 for the X axis, 1 for the Y axis, and 2 for the Z axis.
   * @return {Quat} - Returns a new Quat.
   */
  mirror(axisIndex) {
    switch (axisIndex) {
      case 0:
        return new Quat(this.z, this.w, this.x, this.y)
      case 1:
        return new Quat(-this.w, this.z, this.y, -this.x)
      case 2:
        return new Quat(this.x, this.y, this.z, -this.w)
    }
  }

  /**
   * Converts this Quat to a Mat4 (a 4x4 matrix).
   * @return {Mat4} - Returns a new Mat4.
   */
  toMat4() {
    const x = this.x;
    const y = this.y;
    const z = this.z;
    const w = this.w;
    const x2 = x + x;
    const y2 = y + y;
    const z2 = z + z;
    const xx = x * x2;
    const yx = y * x2;
    const yy = y * y2;
    const zx = z * x2;
    const zy = z * y2;
    const zz = z * z2;
    const wx = w * x2;
    const wy = w * y2;
    const wz = w * z2;

    // Set the columns
    const mat4 = new Mat4();
    mat4.__data[0] = 1 - yy - zz;
    mat4.__data[4] = yx - wz;
    mat4.__data[8] = zx + wy;

    mat4.__data[1] = yx + wz;
    mat4.__data[5] = 1 - xx - zz;
    mat4.__data[9] = zy - wx;

    mat4.__data[2] = zx - wy;
    mat4.__data[6] = zy + wx;
    mat4.__data[10] = 1 - xx - yy;

    return mat4
  }

  /**
   * Performs a linear interpolation between two Quats.
   * @param {Quat} other  - The other Quat to interpolate between.
   * @param {number} t - Interpolation amount between the two inputs.
   * @return {Quat} - Returns a new Quat.
   */
  lerp(other, t) {
    const result = new Quat(
      this.x + t * (other.x - this.x),
      this.y + t * (other.y - this.y),
      this.z + t * (other.z - this.z),
      this.w + t * (other.w - this.w)
    );
    result.normalizeInPlace();
    return result
  }

  // /**
  //  * Generates a random vector with the given scale.
  //  * @param {number} scale -  Length of the resulting vector. If ommitted, a unit vector will be returned.
  //  * @returns {vec4} - The return value.
  //  */
  // random(scale = 1.0) {
  //     const r = glMatrix.RANDOM() * 2.0 * Math.PI;
  //     const z = (glMatrix.RANDOM() * 2.0) - 1.0;
  //     const zScale = Math.sqrt(1.0 - z * z) * scale;

  //     out[0] = Math.cos(r) * zScale;
  //     out[1] = Math.sin(r) * zScale;
  //     out[2] = z * scale;
  //     return out;
  // }

  // ////////////////////////////////////////
  // Static Methods

  /**
   * Creates a new Quat.
   * @param {...object} ...args - The ...args param.
   * @return {Quat} - Returns a new Quat.
   * @private
   */
  static create(...args) {
    return new Quat(...args)
  }

  /**
   * Creates a new Quat to wrap existing memory in a buffer.
   * @param {ArrayBuffer} buffer - The buffer value.
   * @param {number} offset - The offset value.
   * @return {Quat} - Returns a new Quat.
   * @private
   */
  static createFromFloat32Buffer(buffer, offset = 0) {
    return new Quat(buffer, offset * 4) // 4 bytes per 32bit float
  }

  /**
   * Returns the number of Float32 elements used by this type. Used to calculate storage requirements for large arrays of this type.
   * @return {number} - The return value.
   * @private
   */
  static numElements() {
    return 4
  }

  /**
   * Clones this Quat and returns a new Quat.
   * @return {Quat} - Returns a new Quat.
   */
  clone() {
    return new Quat(
      this.__data[0],
      this.__data[1],
      this.__data[2],
      this.__data[3]
    )
  }

  // ///////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - The json object.
   */
  toJSON() {
    return {
      x: this.x,
      y: this.y,
      z: this.z,
      w: this.w,
    }
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object.
   */
  fromJSON(j) {
    this.__data[0] = j.x;
    this.__data[1] = j.y;
    this.__data[2] = j.z;
    this.__data[3] = j.w;
    this.normalizeInPlace();
  }
}

typeRegistry.registerType('Quat', Quat);

/** Class representing a ray that emits from an origin in a specified direction. */
class Ray {
  /**
   * Create a ray.
   * @param {Vec3} start - The origin of the ray.
   * @param {Vec3} dir - The direction of the ray.
   */
  constructor(start = undefined, dir = undefined) {
    if (start instanceof Vec3$1) {
      this.start = start;
    } else {
      this.start = new Vec3$1();
    }
    if (dir instanceof Vec3$1) {
      this.dir = dir;
    } else {
      this.dir = new Vec3$1();
    }
  }

  /**
   * Get the closest point.
   * @param {Vec3} point - The point in 3D space.
   * @return {Ray} - Returns a Ray.
   */
  closestPoint(point) {
    const w = point.subtract(this.start);
    const c1 = w.dot(this.dir);
    if (c1 < Number.EPSILON) return this.start
    const c2 = this.dir.dot(this.dir);
    // if (c2 < Number.EPSILON) return this.start
    const fract = c1 / c2;
    return this.start.add(this.dir.scale(fract))
  }

  /**
   * Get the closest point at a distance.
   * @param {Vec3} dist - The distance value.
   * @return {Ray} - Returns a Ray.
   */
  pointAtDist(dist) {
    return this.start.add(this.dir.scale(dist))
  }

  /**
   * Returns the two ray params that represent the closest point between the two rays.
   * @param {Ray} ray - The ray value.
   * @return {Ray} - Returns a Ray.
   */
  intersectRayVector(ray) {
    const u = this.dir;
    const v = ray.dir;
    const w = this.start.subtract(ray.start);
    const a = u.dot(u); // always >= 0
    const b = u.dot(v);
    const c = v.dot(v); // always >= 0
    const d = u.dot(w);
    const e = v.dot(w);
    if (a == 0.0 && c == 0.0) {
      return this.start.distanceTo(ray.start)
    }
    if (a == 0.0) {
      return ray.closestPoint(this.start)
    }
    if (c == 0.0) {
      return this.closestPoint(ray.start)
    }
    const D = a * c - b * b; // always >= 0

    // compute the ray parameters of the two closest points
    let this_t;
    let ray_t;
    if (D < 0.001) {
      // the lines are almost parallel
      this_t = 0.0;
      if (b > c) {
        // use the largest denominator
        ray_t = d / b;
      } else {
        ray_t = e / c;
      }
    } else {
      this_t = (b * e - c * d) / D;
      ray_t = (a * e - b * d) / D;
    }
    return [this_t, ray_t]
  }

  /**
   * Returns one ray param representing the intersection
   * of this ray against the plane defined by the given ray.
   * @param {any} plane - The plane to intersect with.
   * @return {any} - The return value.
   */
  intersectRayPlane(plane) {
    const w = this.start.subtract(plane.start);
    const D = plane.dir.dot(this.dir);
    const N = -plane.dir.dot(w);

    if (Math.abs(D) < Number.PRECISION) {
      // segment is parallel to plane
      if (N == 0.0) return -1.0
      // segment lies in plane
      else return -1.0 // no intersection
    }
    // they are not parallel
    // compute intersect param
    const sI = N / D;
    if (sI < -Number.PRECISION) {
      return -1 // no intersection
    }
    return sI
  }

  /**
   * Clones this Ray and returns a new Ray.
   * @return {Ray} - Returns a new Ray.
   */
  clone() {
    return new Ray(this.start.clone(), this.dir.clone())
  }

  // ////////////////////////////////////////
  // Static Methods

  /**
   * Creates a new Ray.
   * @param {...object} ...args - The ...args param.
   * @return {Ray} - Returns a new Ray.
   * @private
   */
  static create(...args) {
    return new Ray(...args)
  }

  // ///////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - The json object.
   */
  toJSON() {
    return {
      start: this.start,
      dir: this.dir,
    }
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object.
   */
  fromJSON(j) {
    this.start.fromJSON(j.start);
    this.dir.fromJSON(j.dir);
  }

  /**
   * The toString method.
   * @return {any} - The return value.
   */
  toString() {
    return JSON_stringify_fixedPrecision(this.toJSON())
  }
}

typeRegistry.registerType('Ray', Ray);

const sc_helper = new Vec3$1(1, 1, 1);

/** Class representing an Xfo transform. */
class Xfo {
  /**
   * Create a Xfo.
   * @param {any} tr - The translation value.
   * @param {any} ori - The orientation value.
   * @param {any} sc - The scaling value.
   */
  constructor(tr = undefined, ori = undefined, sc = undefined) {
    if (tr instanceof Float32Array) {
      this.setFromFloat32Array(tr);
      return
    }
    if (tr instanceof Vec3$1) {
      this.tr = tr;
    } else if (tr instanceof Quat && ori == undefined && sc == undefined) {
      this.tr = new Vec3$1();
      this.ori = tr; // Xfo constructor with just a Quat.
      this.sc = new Vec3$1(1, 1, 1);
      return
    } else {
      this.tr = new Vec3$1();
    }
    if (ori instanceof Quat) {
      this.ori = ori;
    } else {
      this.ori = new Quat();
    }
    if (sc instanceof Vec3$1) {
      this.sc = sc;
    } else {
      this.sc = new Vec3$1(1, 1, 1);
    }
  }

  /**
   * The set method.
   * @param {any} tr - The translation value.
   * @param {any} ori - The orientation value.
   * @param {any} sc - The scaling value.
   */
  set(tr, ori, sc = undefined) {
    this.tr = tr;
    this.ori = ori;
    if (sc instanceof Vec3$1) this.sc = sc;
  }

  /**
   * Setter from another Xfo.
   * @param {Xfo} other - The other Xfo to set from.
   */
  setFromOther(other) {
    this.tr = other.tr;
    this.ori = other.ori;
    this.sc = other.sc;
  }

  /**
   * The isIdentity method.
   * @return {any} - The return value.
   */
  isIdentity() {
    return this.tr.isNull() && this.ori.isIdentity() && this.sc.is111()
  }

  /**
   * The setLookAt method.
   * @param {any} pos - The position value.
   * @param {any} target - The target value.
   * @param {any} up - The up value.
   */
  setLookAt(pos, target, up) {
    // Note: We look along the -z axis. Negate the direction.
    const dir = pos.subtract(target);
    const dirLen = dir.length();
    if (dirLen < Number.EPSILON) {
      throw new Error('Invalid dir')
    }
    this.ori.setFromDirectionAndUpvector(dir, up);
    this.tr = pos;
  }

  /**
   * Multiplies two Xfo transforms.
   * @param {Xfo} xfo - The xfo to multiply with.
   * @return {Xfo} - Returns an Xfo.
   */
  multiply(xfo) {
    let this_sc = this.sc;
    if (this.sc.x != this.sc.y || this.sc.x != this.sc.z) {
      this_sc = xfo.ori.rotateVec3(this.sc);
      if (Math.sign(this_sc.x) != Math.sign(this.sc.x)) this_sc.x = -this_sc.x;
      if (Math.sign(this_sc.y) != Math.sign(this.sc.y)) this_sc.y = -this_sc.y;
      if (Math.sign(this_sc.z) != Math.sign(this.sc.z)) this_sc.z = -this_sc.z;
    }
    const result = new Xfo(
      this.tr.add(this.ori.rotateVec3(this_sc.multiply(xfo.tr))),
      this.ori.multiply(xfo.ori),
      this_sc.multiply(xfo.sc)
    );
    return result
  }

  /**
   * The inverse method.
   * @return {Xfo} - Returns a new Xfo.
   */
  inverse() {
    const result = new Xfo();
    result.ori = this.ori.inverse();

    if (this.sc.x != this.sc.y || this.sc.x != this.sc.z) {
      // Note: the following code has not been tested and
      // may not be quite correct. We need to setup
      // unit tests for this kind of sample.
      // An example would be to lay out some boxes on different rotations
      // and with non-uniform scale. Then parent them together. If they
      // remain stationary, after parenting, then this math is correct.
      result.sc = result.ori.rotateVec3(this.sc);
      if (Math.sign(result.sc.x) != Math.sign(this.sc.x)) result.sc.x = -result.sc.x;
      if (Math.sign(result.sc.y) != Math.sign(this.sc.y)) result.sc.y = -result.sc.y;
      if (Math.sign(result.sc.z) != Math.sign(this.sc.z)) result.sc.z = -result.sc.z;
    } else {
      result.sc = this.sc.inverse();
    }
    result.tr = result.ori.rotateVec3(this.tr.negate().multiply(result.sc));
    return result
  }

  /**
   * The transformVec3 method.
   * @param {Vec3} vec3 - The vec3 value.
   * @return {any} - The return value.
   */
  transformVec3(vec3) {
    return this.tr.add(this.ori.rotateVec3(this.sc.multiply(vec3)))
  }

  /**
   * Converts this Xfo to a Mat4 (a 4x4 matrix).
   * @return {Mat4} - Returns a new Mat4.
   */
  toMat4() {
    const scl = new Mat4(
      this.sc.x,
      0,
      0,
      0,
      0,
      this.sc.y,
      0,
      0,
      0,
      0,
      this.sc.z,
      0,
      0,
      0,
      0,
      1.0
    );

    const rot = this.ori.toMat4();

    const trn = new Mat4();
    trn.translation = this.tr;

    return trn.multiply(rot).multiply(scl)
  }

  /**
   * The fromMat4 method.
   * @param {Mat4} mat4 - The mat4 value.
   */
  fromMat4(mat4) {
    this.tr = mat4.translation;
    this.ori.setFromMat4(mat4);
  }

  /**
   * The setFromFloat32Array method.
   * @param {array} float32array - The float32array value.
   */
  setFromFloat32Array(float32array) {
    if (float32array.length == 7) {
      this.tr = new Vec3$1(float32array.buffer, float32array.byteOffset);
      this.ori = new Quat(float32array.buffer, float32array.byteOffset + 12);
      this.sc = new Vec3$1(1, 1, 1);
      return
    }
    if (float32array.length == 8) {
      this.tr = new Vec3$1(float32array.buffer, float32array.byteOffset);
      this.ori = new Quat(float32array.buffer, float32array.byteOffset + 12);
      const scl = float32array[7];
      this.sc = new Vec3$1(scl, scl, scl);
      return
    }
    if (float32array.length == 10) {
      this.tr = new Vec3$1(float32array.buffer, float32array.byteOffset);
      this.ori = new Quat(float32array.buffer, float32array.byteOffset + 12);
      this.sc = new Vec3$1(float32array.buffer, float32array.byteOffset + 21);
      return
    }
  }

  /**
   * Clones this Xfo and returns a new Xfo.
   * @return {Xfo} - Returns a new Xfo.
   */
  clone() {
    return new Xfo(this.tr.clone(), this.ori.clone(), this.sc.clone())
  }

  // ////////////////////////////////////////
  // Static Methods

  /**
   * Creates a new Xfo.
   * @param {...object} ...args - The ...args param.
   * @return {Xfo} - eturns a new Xfo.
   * @private
   */
  static create(...args) {
    return new Xfo(...args)
  }

  // ///////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - The json object.
   */
  toJSON() {
    const j = {
      tr: this.tr.toJSON(),
      ori: this.ori.toJSON(),
    };
    if (!this.sc.is111()) j.sc = this.sc.toJSON();
    return j
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object.
   */
  fromJSON(j) {
    this.tr.fromJSON(j.tr);
    this.ori.fromJSON(j.ori);
    if (j.sc) {
      this.sc.fromJSON(j.sc);
    }
  }

  /**
   * The toString method.
   * @return {any} - The return value.
   */
  toString() {
    return JSON_stringify_fixedPrecision(this.toJSON())
  }
}

typeRegistry.registerType('Xfo', Xfo);

/** Class representing a box in 2D space. */
class Box2 {
  /**
   * Create a Box2
   * @param {Vec2} p0 - A point representing the corners of a 2D box.
   * @param {Vec2} p1 - A point representing the corners of a 2D box.
   */
  constructor(p0 = undefined, p1 = undefined) {
    if (p0 instanceof Vec2) {
      this.p0 = p0;
    } else {
      this.p0 = new Vec2(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
    }
    if (p1 instanceof Vec2) {
      this.p1 = p1;
    } else {
      this.p1 = new Vec2(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);
    }
  }

  /**
   * The set method.
   * @param {Vec2} p0 - A point representing the corners of a 2D box.
   * @param {Vec2} p1 - A point representing the corners of a 2D box.
   */
  set(p0, p1) {
    this.p0 = p0;
    this.p1 = p1;
  }

  /**
   * Resets the box2 back to an uninitialized state.
   */
  reset() {
    this.p0.x = Number.POSITIVE_INFINITY;
    this.p1.x = Number.NEGATIVE_INFINITY;
    this.p0.y = Number.POSITIVE_INFINITY;
    this.p1.y = Number.NEGATIVE_INFINITY;
  }

  /**
   * Returns true if the box has been expanded to contain a point.
   * @return {any} - The return value.
   */
  isValid() {
    return (
      this.p0.x != Number.POSITIVE_INFINITY &&
      this.p1.x != Number.NEGATIVE_INFINITY &&
      this.p0.y != Number.POSITIVE_INFINITY &&
      this.p1.y != Number.NEGATIVE_INFINITY
    )
  }

  /**
   * Expands the Box2 to contain the new point.
   * @param {Vec2} point - A point represents the corners of a 2D box.
   */
  addPoint(point) {
    if (this.p0.x == Number.POSITIVE_INFINITY || point.x < this.p0.x)
      this.p0.x = point.x;
    if (this.p0.y == Number.POSITIVE_INFINITY || point.y < this.p0.y)
      this.p0.y = point.y;

    if (this.p1.y == Number.NEGATIVE_INFINITY || point.x > this.p1.x)
      this.p1.x = point.x;
    if (this.p1.y == Number.NEGATIVE_INFINITY || point.y > this.p1.y)
      this.p1.y = point.y;
  }

  /**
   * Returns the size of a Box2.
   * @return {Box2} - Returns a Box2.
   */
  size() {
    return this.p1.subtract(this.p0)
  }

  /**
   * Returns the size of a Box2 - the same as size().
   * @return {Box2} - Returns a Box2.
   */
  diagonal() {
    return this.p1.subtract(this.p0)
  }

  /**
   * Returns the center point of a Box2.
   * @return {Vec2} - Returns a Vec2.
   */
  center() {
    const result = this.p1.subtract(this.p0);
    result.scaleInPlace(0.5);
    result.addInPlace(this.p0);
    return result
  }

  // ////////////////////////////////////////
  // Static Methods

  /**
   * Creates a new Box2.
   * @param {...object} ...args - The ...args param.
   * @return {Box2} - Returns a new Box2.
   * @private
   */
  static create(...args) {
    return new Box2(...args)
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - The json object.
   */
  toJSON() {
    return {
      p0: this.p0.toJSON(),
      p1: this.p1.toJSON(),
    }
  }

  /**
   * The toString method.
   * @return {any} - The return value.
   */
  toString() {
    return JSON_stringify_fixedPrecision(this.toJSON())
  }
}

typeRegistry.registerType('Box2', Box2);

/** Class representing a sphere.
 * @extends AttrValue
 */
class SphereType extends AttrValue {
  /**
   * Create a sphere.
   * @param {Vec3} pos - The position of the sphere.
   * @param {number} radius - The radius of the sphere.
   */
  constructor(pos, radius = 0) {
    super();
    if (pos instanceof Vec3$1) {
      this.pos = pos;
    } else {
      this.pos = new Vec3$1();
    }
    this.radius = radius;
  }

  /**
   * Clones this sphere and returns a new sphere.
   * @return {Sphere} - Returns a new sphere.
   */
  clone() {
    return new Sphere(this.pos.clone(), this.radius)
  }

  /**
   * Checks if this spehere intersects a box.
   * @param {any} box - The box value.
   * @return {any} - The return value.
   */
  intersectsBox(box) {
    return box.intersectsSphere(this)
  }

  // ////////////////////////////////////////
  // Static Methods

  /**
   * Creates a new sphere.
   * @param {...object} ...args - The ...args param.
   * @return {Sphere} - Returns a new sphere.
   * @private
   */
  static create(...args) {
    return new Sphere(...args)
  }

  // ///////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - The json object.
   */
  toJSON() {
    return {
      pos: this.pos.toJSON(),
      radius: this.radius,
    }
  }

  /**
   * The toString method.
   * @return {any} - The return value.
   */
  toString() {
    return JSON_stringify_fixedPrecision(this.toJSON())
  }
}

typeRegistry.registerType('SphereType', SphereType);

/** Class representing a box in 3D space. */
class Box3$1 {
  /**
   * Create a Box3
   * @param {Vec3} p0 - A point representing the corners of a 3D box.
   * @param {Vec3} p1 - A point representing the corners of a 3D box.
   */
  constructor(p0 = undefined, p1 = undefined) {
    if (p0 instanceof Float32Array) {
      this.setFromFloat32Array(p0);
      return
    }
    if (p0 instanceof Vec3$1) {
      this.p0 = p0;
    } else {
      this.p0 = new Vec3$1(
        Number.POSITIVE_INFINITY,
        Number.POSITIVE_INFINITY,
        Number.POSITIVE_INFINITY
      );
    }
    if (p1 instanceof Vec3$1) {
      this.p1 = p1;
    } else {
      this.p1 = new Vec3$1(
        Number.NEGATIVE_INFINITY,
        Number.NEGATIVE_INFINITY,
        Number.NEGATIVE_INFINITY
      );
    }
  }

  /**
   * Getter for the lower (x, y, z) boundary of the box.
   * @return {Vec3} - Returns the minumum Vec3.
   */
  get min() {
    return this.p0
  }

  /**
   * Getter for the upper (x, y, z) boundary of the box.
   * @return {Vec3} - Returns the minumum Vec3.
   */
  get max() {
    return this.p1
  }

  /**
   * The set method.
   * @param {Vec3} p0 - A point representing the corners of a 3D box.
   * @param {Vec3} p1 - A point representing the corners of a 3D box.
   */
  set(p0, p1) {
    this.p0 = p0;
    this.p1 = p1;
  }

  /**
   * The reset method.
   */
  reset() {
    this.p0.x = Number.POSITIVE_INFINITY;
    this.p1.x = Number.NEGATIVE_INFINITY;
    this.p0.y = Number.POSITIVE_INFINITY;
    this.p1.y = Number.NEGATIVE_INFINITY;
    this.p0.z = Number.POSITIVE_INFINITY;
    this.p1.z = Number.NEGATIVE_INFINITY;
  }

  /**
   * The isValid method.
   * @return {any} - The return value.
   */
  isValid() {
    return (
      this.p0.x != Number.POSITIVE_INFINITY &&
      this.p1.x != Number.NEGATIVE_INFINITY &&
      this.p0.y != Number.POSITIVE_INFINITY &&
      this.p1.y != Number.NEGATIVE_INFINITY &&
      this.p0.z != Number.POSITIVE_INFINITY &&
      this.p1.z != Number.NEGATIVE_INFINITY
    )
  }

  /**
   * Expands the Box3 to contain the new point.
   * @param {Vec3} point - A point represents the corners of a 3D box.
   */
  addPoint(point) {
    if (
      point.x != Number.POSITIVE_INFINITY &&
      point.x != Number.NEGATIVE_INFINITY
    ) {
      if (point.x < this.p0.x) this.p0.x = point.x;
      if (point.x > this.p1.x) this.p1.x = point.x;
    }
    if (
      point.y != Number.POSITIVE_INFINITY &&
      point.y != Number.NEGATIVE_INFINITY
    ) {
      if (point.y < this.p0.y) this.p0.y = point.y;
      if (point.y > this.p1.y) this.p1.y = point.y;
    }
    if (
      point.z != Number.POSITIVE_INFINITY &&
      point.z != Number.NEGATIVE_INFINITY
    ) {
      if (point.z < this.p0.z) this.p0.z = point.z;
      if (point.z > this.p1.z) this.p1.z = point.z;
    }
  }

  /**
   * The addBox3 method.
   * @param {Box3} box3 - A 3D box.
   * @param {Vec3} xfo - A 3D transform.
   */
  addBox3(box3, xfo = undefined) {
    if (xfo) {
      // Transform each corner of the Box3 into the new coordinate system.
      this.addPoint(xfo.transformVec3(box3.p0));
      this.addPoint(
        xfo.transformVec3(new Vec3$1(box3.p0.x, box3.p0.y, box3.p1.z))
      );
      this.addPoint(
        xfo.transformVec3(new Vec3$1(box3.p0.x, box3.p1.y, box3.p0.z))
      );
      this.addPoint(
        xfo.transformVec3(new Vec3$1(box3.p1.x, box3.p0.y, box3.p0.z))
      );
      this.addPoint(
        xfo.transformVec3(new Vec3$1(box3.p0.x, box3.p1.y, box3.p1.z))
      );
      this.addPoint(
        xfo.transformVec3(new Vec3$1(box3.p1.x, box3.p0.y, box3.p1.z))
      );
      this.addPoint(
        xfo.transformVec3(new Vec3$1(box3.p1.x, box3.p1.y, box3.p0.z))
      );
      this.addPoint(xfo.transformVec3(box3.p1));
    } else {
      this.addPoint(box3.p0);
      this.addPoint(box3.p1);
    }
  }

  /**
   * Returns the size of a Box3.
   * @return {Box3} - Returns a Box3.
   */
  size() {
    return this.p1.subtract(this.p0)
  }

  /**
   * Returns the size of a Box3 - the same as size().
   * @return {Box3} - Returns a Box3.
   */
  diagonal() {
    return this.p1.subtract(this.p0)
  }

  /**
   * Returns the center point of a Box3.
   * @return {Vec3} - Returns a Vec3.
   */
  center() {
    const result = this.p1.subtract(this.p0);
    result.scaleInPlace(0.5);
    result.addInPlace(this.p0);
    return result
  }

  /**
   * Converts this Box3 to a Mat4 (a 4x4 matrix).
   * @return {Mat4} - Returns a new Mat4.
   */
  toMat4() {
    const scx = this.p1.x - this.p0.x;
    const scy = this.p1.y - this.p0.y;
    const scz = this.p1.z - this.p0.z;
    return new Mat4(
      scx, 0, 0, 0,
      0, scy, 0, 0,
      0, 0, scz, 0,
      this.p0.x, this.p0.y, this.p0.z, 1.0
    )
  }

  /**
   * The getBoundingSphere method.
   * @return {any} - The return value.
   */
  getBoundingSphere() {
    return new SphereType(this.center(), this.diagonal().length() * 0.5)
  }

  /**
   * Determines if this Box3 intersects a plane.
   * @param {any} box - The box to check for intersection against.
   * @return {boolean} - The return value.
   */
  intersectsBox(box) {
    // Using 6 splitting planes to rule out intersections.
    return box.max.x < this.min.x ||
      box.min.x > this.max.x ||
      box.max.y < this.min.y ||
      box.min.y > this.max.y ||
      box.max.z < this.min.z ||
      box.min.z > this.max.z
      ? false
      : true
  }

  /**
   * Determines if this Box3 intersects a sphere.
   * @param {Sphere} sphere - The sphere to check for intersection against.
   * @return {any} - The return value.
   */
  intersectsSphere(sphere) {
    // var closestPoint = new Vector3();

    // Find the point on the AABB closest to the sphere center.
    // this.clampPoint( sphere.center, closestPoint );

    // If that point is inside the sphere, the AABB and sphere intersect.
    return (
      closestPoint.distanceToSquared(sphere.center) <=
      sphere.radius * sphere.radius
    )
  }

  /**
   * Determines if this Box3 intersects a plane.
   * @param {Plane} plane - The plane to check for intersection against.
   * @return {any} - The return value.
   */
  intersectsPlane(plane) {
    // We compute the minimum and maximum dot product values. If those values
    // are on the same side (back or front) of the plane, then there is no intersection.

    let min;
    let max;

    if (plane.normal.x > 0) {
      min = plane.normal.x * this.min.x;
      max = plane.normal.x * this.max.x;
    } else {
      min = plane.normal.x * this.max.x;
      max = plane.normal.x * this.min.x;
    }

    if (plane.normal.y > 0) {
      min += plane.normal.y * this.min.y;
      max += plane.normal.y * this.max.y;
    } else {
      min += plane.normal.y * this.max.y;
      max += plane.normal.y * this.min.y;
    }

    if (plane.normal.z > 0) {
      min += plane.normal.z * this.min.z;
      max += plane.normal.z * this.max.z;
    } else {
      min += plane.normal.z * this.max.z;
      max += plane.normal.z * this.min.z;
    }

    return min <= -plane.constant && max >= -plane.constant
  }

  /**
   * Clones this Box3 and returns a new Box3.
   * @return {Box3} - Returns a new Box3.
   */
  clone() {
    return new Box3$1(this.p0.clone(), this.p1.clone())
  }

  // ////////////////////////////////////////
  // Static Methods

  /**
   * Creates a new Box3.
   * @param {...object} ...args - The ...args param.
   * @return {Box3} - Returns a new Box3.
   * @private
   */
  static create(...args) {
    return new Box3$1(...args)
  }

  /**
   * The sizeInBytes method.
   * @return {any} - The return value.
   * @private
   */
  static sizeInBytes() {
    return 24
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - The json object.
   */
  toJSON() {
    return {
      p0: this.p0.toJSON(),
      p1: this.p1.toJSON(),
    }
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object.
   */
  fromJSON(j) {
    this.p0.fromJSON(j.p0);
    this.p1.fromJSON(j.p1);
  }

  /**
   * The loadBin method.
   * @param {any} data - The data value.
   * @param {any} byteOffset - The byteOffset value.
   * @private
   */
  loadBin(data, byteOffset) {
    this.p0.loadBin(data, byteOffset);
    this.p0.loadBin(data, byteOffset + 12);
  }

  /**
   * The setFromFloat32Array method.
   * @param {Float32Array} float32array - The float32array value.
   * @private
   */
  setFromFloat32Array(float32array) {
    this.p0 = new Vec3$1(float32array.buffer, float32array.byteOffset);
    this.p1 = new Vec3$1(float32array.buffer, float32array.byteOffset + 12);
  }

  /**
   * The toString method.
   * @return {any} - The return value.
   */
  toString() {
    return JSON_stringify_fixedPrecision(this.toJSON())
  }
}

typeRegistry.registerType('Box3', Box3$1);

/** Class representing a plane.
 * @extends AttrValue
 */
class PlaneType extends AttrValue {
  /**
   * Create a plane.
   * @param {Vec3} normal - The normal of the plane.
   * @param {number} w - The w value.
   */
  constructor(normal, w = 0) {
    super();
    if (normal instanceof Vec3$1) {
      this.normal = normal;
    } else {
      this.normal = new Vec3$1();
    }
    this.w = w;
  }

  /**
   * Thet set method
   * @param {number} x - The x value.
   * @param {number} y - The y value.
   * @param {number} z - The z value.
   * @param {number} w - The w value.
   */
  set(x, y, z, w) {
    this.normal.set(x, y, z);
    this.w = w;
  }

  /**
   * Thet divideScalar method
   * @param {number} value - The value value.
   */
  divideScalar(value) {
    this.normal.scaleInPlace(1 / value);
    this.w /= value;
  }

  /**
   * Thet distanceToPoint method
   * @param {any} point - The point value.
   * @return {any} - The rreturn value.
   */
  distanceToPoint(point) {
    return point.dot(this.normal) + this.w
  }

  /**
   * Normalize this plane in place modifying its values.
   */
  normalizeInPlace() {
    const inverseNormalLength = 1.0 / this.normal.length();
    this.normal.scaleInPlace(inverseNormalLength);
    this.w *= inverseNormalLength;
  }

  /**
   * Clones this plane and returns a new plane.
   * @return {Plane} - Returns a new plane.
   */
  clone() {
    return new Plane(this.normal.clone(), this.w)
  }

  // ////////////////////////////////////////
  // Static Methods

  /**
   * Creates a new plane.
   * @param {...object} ...args - The ...args param.
   * @return {Plane} - Returns a new plane.
   * @private
   */
  static create(...args) {
    return new Plane(...args)
  }

  // ///////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - The json object.
   */
  toJSON() {
    return {
      normal: this.normal.toJSON(),
      w: this.w,
    }
  }

  /**
   * The toString method.
   * @return {any} - The return value.
   */
  toString() {
    return JSON_stringify_fixedPrecision(this.toJSON())
  }
}

typeRegistry.registerType('PlaneType', PlaneType);

/** Class representing a Frustum. Frustums are used to determine what
 * is inside the camera's field of view.
 * @private
 * */
class Frustum {
  /**
   * Create a Frustum
   * @param {any} p0 - the p0 value.
   * @param {any} p1 - the p1 value.
   * @param {any} p2 - the p2 value.
   * @param {any} p3 - the p3 value.
   * @param {any} p4 - the p4 value.
   * @param {any} p5 - the p5 value.
   */
  constructor(p0, p1, p2, p3, p4, p5) {
    this.planes = [
      p0 || new PlaneType(),
      p1 || new PlaneType(),
      p2 || new PlaneType(),
      p3 || new PlaneType(),
      p4 || new PlaneType(),
      p5 || new PlaneType(),
    ];
  }

  /**
   * The setFromMatrix configures a Frustum object using a matrix.
   * Typically the matrix is a model view projection matrix.
   * @param {Mat4} mat4 - The matrix to use.
   */
  setFromMatrix(mat4) {
    const m = mat4;
    const planes = this.planes;
    planes[0].set(m.m03 - m.m00, m.m13 - m.m10, m.m23 - m.m20, m.m33 - m.m30);
    planes[1].set(m.m03 + m.m00, m.m13 + m.m10, m.m23 + m.m20, m.m33 + m.m30);
    planes[2].set(m.m03 + m.m01, m.m13 + m.m11, m.m23 + m.m21, m.m33 + m.m31);
    planes[3].set(m.m03 - m.m01, m.m13 - m.m11, m.m23 - m.m21, m.m33 - m.m31);
    planes[4].set(m.m03 - m.m02, m.m13 - m.m12, m.m23 - m.m22, m.m33 - m.m32);
    planes[5].set(m.m03 + m.m02, m.m13 + m.m12, m.m23 + m.m22, m.m33 + m.m32);

    planes.forEach(plane => plane.normalizeInPlace());
  }

  /**
   * Tests a box to see if it is entirely within the frustum.
   * @param {Box3} box3 - The box to test.
   * @return {boolean} - True if the frustum intersects the box.
   */
  intersectsBox(box3) {
    const p = new Vec3$1();
    const planes = this.planes;
    const { min, max } = box3;

    for (let i = 0; i < 6; i++) {
      const plane = planes[i];

      // corner at max distance
      p.x = plane.normal.x > 0 ? max.x : min.x;
      p.y = plane.normal.y > 0 ? max.y : min.y;
      p.z = plane.normal.z > 0 ? max.z : min.z;

      if (plane.distanceToPoint(p) < 0) return false
    }
    return true
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - The json object.
   */
  toJSON() {
    return {
      p0: this.p0.toJSON(),
      p1: this.p1.toJSON(),
      p2: this.p2.toJSON(),
      p3: this.p3.toJSON(),
      p4: this.p4.toJSON(),
      p5: this.p5.toJSON(),
    }
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object.
   */
  fromJSON(j) {
    this.p0.fromJSON(j.p0);
    this.p1.fromJSON(j.p1);
    this.p2.fromJSON(j.p2);
    this.p3.fromJSON(j.p3);
    this.p4.fromJSON(j.p4);
    this.p5.fromJSON(j.p5);
  }

  /**
   * The toString method.
   * @return {any} - The return value.
   */
  toString() {
    return JSON_stringify_fixedPrecision(this.toJSON())
  }
}

typeRegistry.registerType('Frustum', Frustum);

var Math$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  UInt8: UInt8,
  SInt8: SInt8,
  SInt16: SInt16,
  UInt16: UInt16,
  SInt32: SInt32,
  UInt32: UInt32,
  Float32: Float32,
  hashStr: hashStr,
  JSON_stringify_fixedPrecision: JSON_stringify_fixedPrecision,
  AttrValue: AttrValue,
  Vec2: Vec2,
  Vec3: Vec3$1,
  Vec4: Vec4$1,
  RGBA: RGBA,
  Color: Color,
  EulerAngles: EulerAngles,
  Quat: Quat,
  Ray: Ray,
  Mat3: Mat3$1,
  Mat4: Mat4,
  Xfo: Xfo,
  Box2: Box2,
  Box3: Box3$1,
  Frustum: Frustum,
  PlaneType: PlaneType,
  SphereType: SphereType,
  typeRegistry: typeRegistry
});

/** Class representing a signal. */
class Signal {
  /**
   * Create a signal.
   * @param {boolean} toggledSignal - The toggledSignal value.
   */
  constructor(toggledSignal = false) {
    this.__slots = [];
    // A toggled signal means that once it is fired, it is toggled to true
    // and never fired again. Any connections are immedietly emitted.
    // Note: this is emulating the 'promise' system, and I really should
    // investigate using promisses.
    this.__toggledSignal = toggledSignal;
    this.__toggled = false;
    this.__data = null;

    this.connect = this.connect.bind(this);
    this.disconnect = this.disconnect.bind(this);
    this.emit = this.emit.bind(this);
  }

  /**
   * The connect method.
   * @param {any} fn - The fn param.
   * @return {any} - The return value.
   */
  connect(fn) {
    if (fn == undefined)
      throw new Error('a function callback must be passed to Signal.connect')
    if (this.__slots.indexOf(fn) != -1) {
      console.warn("fn '" + fn.name + "' already connected to Signal.");
      return
    }
    const id = this.__slots.length;
    this.__slots[id] = fn;

    if (this.__toggledSignal && this.__toggled) {
      // Note: we are moving away from using 'toggled' Signals
      // in favor of promises. We will start generating errors
      // when connecting to Toggled signals soon

      // This signal has already been toggled, so we should emit immedietly.
      if (this.__data) fn(...this.__data);
      else fn();
    }
    return id
  }

  /**
   * The disconnect method.
   * @param {any} fn - The fn param.
   */
  disconnect(fn) {
    if (fn == undefined)
      throw new Error('a function callback must be passed to Signal.disconnect')
    const ids = [];
    this.__slots.forEach(function(item, index) {
      if (item === fn) {
        ids.push(index);
      }
    });
    if (ids.length == 0) {
      console.warn(
        'callback :' +
          fn.name +
          ' was not connected to this signal:' +
          this.__name
      );
      return
    }
    for (const id of ids) {
      this.__slots[id] = undefined;
    }
  }

  /**
   * The disconnectId method.
   * @param {any} id - The id param.
   */
  disconnectId(id) {
    if (!this.__slots[id]) throw new Error('Invalid ID')
    this.__slots[id] = undefined;
  }

  /**
   * Emit the signal to all slots(observers)
   * @param {...object} ...data - The ...data param.
   */
  emit(...data) {
    if (this.__toggledSignal) {
      if (!this.__toggled) {
        this.__toggled = true;
        this.__data = data;
      } else {
        console.warn(
          'Toggled signals should only be fired once, or untoggled before re-firing..'
        );
      }
    }
    const len = this.__slots.length;
    for (let i = 0; i < len; i++) {
      const fn = this.__slots[i];
      // Skip disconnected slots.
      if (fn) {
        fn(...data);
      }
    }
  }

  /**
   * The isToggled method.
   * @return {boolean} - The return value.
   */
  isToggled() {
    return this.__toggled
  }

  /**
   * The setToggled method.
   * @param {any} state - The state param.
   */
  setToggled(state) {
    this.__toggled = state;
    this.__data = undefined;
  }

  /**
   * The getNumConnections method.
   * @return {number} - The number of connections to this signal.
   */
  getNumConnections() {
    return this.__slots.length
  }

  /**
   * The untoggle method.
   */
  untoggle() {
    // When a toggled action needs to be re-applied, we should untoggle first.
    this.__toggled = false;
    this.__data = undefined;
  }
}

// Taken from here: https://github.com/jakesgordon/bin-packing/blob/master/js/packer.growing.js


/******************************************************************************

This is a binary tree based bin packing algorithm that is more complex than
the simple Packer (packer.js). Instead of starting off with a fixed width and
height, it starts with the width and height of the first block passed and then
grows as necessary to accomodate each subsequent block. As it grows it attempts
to maintain a roughly square ratio by making 'smart' choices about whether to
grow right or down.

When growing, the algorithm can only grow to the right OR down. Therefore, if
the new block is BOTH wider and taller than the current target then it will be
rejected. This makes it very important to initialize with a sensible starting
width and height. If you are providing sorted input (largest first) then this
will not be an issue.

A potential way to solve this limitation would be to allow growth in BOTH
directions at once, but this requires maintaining a more complex tree
with 3 children (down, right and center) and that complexity can be avoided
by simply chosing a sensible starting block.

Best results occur when the input blocks are sorted by height, or even better
when sorted by max(width,height).

Inputs:
------

  blocks: array of any objects that have .w and .h attributes

Outputs:
-------

  marks each block that fits with a .fit attribute pointing to a
  node with .x and .y coordinates

Example:
-------

  var blocks = [
    { w: 100, h: 100 },
    { w: 100, h: 100 },
    { w:  80, h:  80 },
    { w:  80, h:  80 },
    etc
    etc
  ];

  var packer = new GrowingPacker();
  packer.fit(blocks);

  for(var n = 0 ; n < blocks.length ; n++) {
    var block = blocks[n];
    if (block.fit) {
      Draw(block.fit.x, block.fit.y, block.w, block.h);
    }
  }


******************************************************************************/

class GrowingPacker {
  constructor(w = 0, h = 0) {
    this.root = {
      x: 0,
      y: 0,
      w: w,
      h: h
    };

    this.resized = new Signal();
  }

  fit(blocks) {
    const len = blocks.length;
    if (len == 0)
      return;
    let resized = false;
    if (this.root.w < blocks[0].w){
      this.root.w = blocks[0].w;
      resized = true;
    }
    if (this.root.h < blocks[0].h){
      this.root.h = blocks[0].h;
      resized = true;
    }
    if(resized){
      this.resized.emit(this.root.w, this.root.h);
    }
    const eachBlock = (block) => {
      block.fit = this.__addBlock(block);
    };
    blocks.forEach(eachBlock);
  }

  __addBlock(block) {
    const node = this.findNode(this.root, block.w, block.h);
    if (node)
      return this.splitNode(node, block.w, block.h);
    else
      return this.growNode(block.w, block.h);
  }

  addBlock(block) {
    let resized = false;
    if (this.root.w < block.w){
      this.root.w = block.w;
      resized = true;
    }
    if (this.root.h < block.h){
      this.root.h = block.h;
      resized = true;
    }
    if(resized){
      this.resized.emit(this.root.w, this.root.h);
    }
    const node = this.findNode(this.root, block.w, block.h);
    if (node)
      return this.splitNode(node, block.w, block.h);
    else
      return this.growNode(block.w, block.h);
  }

  findNode(root, w, h) {
    if (root.used)
      return this.findNode(root.right, w, h) || this.findNode(root.down, w, h);
    else if ((w <= root.w) && (h <= root.h))
      return root;
    else
      return null;
  }

  splitNode(node, w, h) {
    node.used = true;
    node.down = {
      x: node.x,
      y: node.y + h,
      w: node.w,
      h: node.h - h
    };
    node.right = {
      x: node.x + w,
      y: node.y,
      w: node.w - w,
      h: h
    };
    return node;
  }

  growNode(w, h) {
    const canGrowDown = (w <= this.root.w);
    const canGrowRight = (h <= this.root.h);

    const shouldGrowRight = canGrowRight && (this.root.h >= (this.root.w + w)); // attempt to keep square-ish by growing right when height is much greater than width
    const shouldGrowDown = canGrowDown && (this.root.w >= (this.root.h + h)); // attempt to keep square-ish by growing down  when width  is much greater than height

    if (shouldGrowRight)
      return this.growRight(w, h);
    else if (shouldGrowDown)
      return this.growDown(w, h);
    else if (canGrowRight)
      return this.growRight(w, h);
    else if (canGrowDown)
      return this.growDown(w, h);
    else
      return null; // need to ensure sensible root starting size to avoid this happening
  }

  growRight(w, h) {
    this.root = {
      used: true,
      x: 0,
      y: 0,
      w: this.root.w + w,
      h: this.root.h,
      down: this.root,
      right: {
        x: this.root.w,
        y: 0,
        w: w,
        h: this.root.h
      }
    };
    const node = this.findNode(this.root, w, h);
    let res;
    if (node)
      res = this.splitNode(node, w, h);
    this.resized.emit(this.root.w, this.root.h);
    return res;
  }

  growDown(w, h) {
    this.root = {
      used: true,
      x: 0,
      y: 0,
      w: this.root.w,
      h: this.root.h + h,
      down: {
        x: 0,
        y: this.root.h,
        w: this.root.w,
        h: h
      },
      right: this.root
    };
    const node = this.findNode(this.root, w, h);
    let res;
    if (node)
      res = this.splitNode(node, w, h);
    this.resized.emit(this.root.w, this.root.h);
    return res;
  }

}

/* eslint-disable require-jsdoc */


// Note: this class will be deprecated soon. 
// Please avoid using it in your code.
class Async {
  constructor(asyncCount = 0) {
    this.__asyncCount = asyncCount;
    this.ready = new Signal(true);

    this.incAsyncCount = function(count = 1) {
      this.__asyncCount += count;
      this.ready.setToggled(false);
    }.bind(this);

    this.decAsyncCount = function() {
      if (this.__asyncCount > 0) {
        this.__asyncCount--;
        if (this.__asyncCount == 0) {
          this.__asyncsCompleted();
        }
      }
    }.bind(this);

    this.__asyncsCompleted = function() {
      this.ready.emit();
    }.bind(this);
  }

  get count() {
    return this.__asyncCount
  }
}

const decodeText = chars => {
  if (window.TextDecoder) return new TextDecoder('utf-8').decode(chars)
  else {
    let result = '';
    for (let i = 0; i < chars.length; i++)
      result += String.fromCharCode(chars[i]);
    return result
  }
};

var Utilities = /*#__PURE__*/Object.freeze({
  __proto__: null,
  GrowingPacker: GrowingPacker,
  Async: Async,
  Signal: Signal,
  decodeText: decodeText
});

let counter = 0;

/** Class representing a ref counted object. RefCounted
 *  objects track ownership and allow explicit cleanup
 *  of resources. This is necessary when JavaScript
 *  objects own references to GPU resources that need to
 *  be cleaned up when the JavaScript object is destroyed.
 * @private
 */
class RefCounted {
  /**
   * Create a ref counted object.
   */
  constructor() {
    if (this.constructor.name == 'RefCounted') {
      throw new Error('RefCounted should not be instantiated directly.')
    }
    this.__id = ++counter;
    this.__refs = [];
    this.destructing = new Signal();
    this.__destroyed = false;
  }

  /**
   * Returns the unique id of the object. Every Object has a unique
   * identifier which is based on a counter that is incremented.
   * @return {any} - The return value.
   */
  getId() {
    return this.__id
  }

  /**
   * The numRefs method.
   * @return {number} - The return value.
   */
  numRefs() {
    return this.__refs.length
  }

  /**
   * The addRef method.
   * @param {any} referer - The referer value.
   * @return {boolean} - The return value.
   */
  addRef(referer) {
    if (!referer)
      throw new Error('Error in RefCounted.addRef: Must provide a referer')

    // Note: an object can be reffeed multiple times.
    // e.g. we can create a temporary ref while we re-attach a tree item to a new parent.
    this.__refs.push(referer);
    return true
  }

  /**
   * The removeRef method.
   * @param {any} referer - The referer value.
   */
  removeRef(referer) {
    if (!referer)
      throw new Error('Error in RefCounted.removeRef: Must provide a referer')
    const index = this.__refs.indexOf(referer);
    if (index == -1)
      throw new Error(
        'Error in RefCounted.removeRef: referer not found in refs list.'
      )

    this.__refs.splice(index, 1);
    if (this.__refs.length == 0) {
      this.destroy();
    }
  }

  /**
   * The getRefer method.
   * @param {number} index - The index value.
   * @return {any} - The return value.
   */
  getRefer(index) {
    return this.__refs[index]
  }

  /**
   * The getRefIndex method.
   * @param {any} referer - The referer value.
   * @return {any} - The return value.
   */
  getRefIndex(referer) {
    return this.__refs.indexOf(referer)
  }

  /**
   * Returns true if this object has already been destroyed.
   * @return {boolean} - Returns true or false.
   */
  isDestroyed() {
    return this.__destroyed
  }

  /**
   * The destroy method is invoked when the last owner
   * is removed from a RefCounted object. Derived objects can
   * override this method to perform explicit cleanup.
   * The destructing signal is triggered so observers can
   * respond to this objects destruction.
   */
  destroy() {
    this.__destroyed = true;
    // console.log(this.constructor.name + " destructing");
    this.destructing.emit(this);
  }
}

/** Class representing a SG factory. */
class SGFactory {
  /**
   * Create a SG factory.
   */
  constructor() {
    this.__registeredClasses = {};
    this.__classNames = {};
    this.__classList = [];
  }

  /**
   * The registerClass method.
   * @param {any} classname - The classname value.
   * @param {any} cls - The cls value.
   */
  registerClass(classname, cls) {
    this.__registeredClasses[classname] = {
      cls,
      callbacks: [],
    };

    // Note: we often register classes under multiple names to provide backwards compatiblity.
    // e.g.
    // sgFactory.registerClass('NumberParameter', NumberParameter)
    // sgFactory.registerClass('Property_SInt32', NumberParameter)
    // if (this.__classList.indexOf(cls) != -1)
    //   console.warn("Class already registered:", classname, " as:",  this.__classNames[this.__classList.indexOf(cls)])

    const id = this.__classList.length;
    this.__classList.push(cls);

    this.__classNames[id] = classname;
  }

  /**
   * The getClass method.
   * @param {any} classname - The classname value.
   * @return {any} - The return value.
   */
  getClass(classname) {
    if (this.__registeredClasses[classname])
      return this.__registeredClasses[classname].cls
  }

  /**
   * The getClassName method.
   * @param {any} inst - The inst value.
   * @return {any} - The return value.
   */
  getClassName(inst) {
    const id = this.__classList.indexOf(inst.constructor);
    if (this.__classNames[id]) return this.__classNames[id]
    console.warn('Class not registered:', inst.constructor.name);
    return inst.constructor.name

    // if (this.__classNames[inst.constructor.name])
    //   return this.__classNames[inst.constructor.name]
    // return inst.constructor.name
  }

  /**
   * The constructClass method.
   * @param {any} classname - The classname value.
   * @return {any} - The return value.
   */
  constructClass(classname /* , ...args */) {
    const classData = this.__registeredClasses[classname];
    if (!classData) {
      console.warn('Factory not registered:' + classname);
      return null
    }
    this.__constructing = true;
    const args = Array.prototype.slice.call(arguments, 1);
    const inst = new classData.cls(...args);
    this.__constructing = false;
    // this.invokeCallbacks(inst)
    return inst
  }

  /*
  
  /**
   * The isConstructing method.
   * @return {any} - The return value.
  isConstructing() {
    return this.__constructing
  }
  /**
   * The registerCallback method.
   * @param {any} classname - The classname value.
   * @param {any} callback - The callback value.
  registerCallback(classname, callback) {
    const classData = this.__registeredClasses[classname]
    if (!classData) {
      console.warn('Factory not registered:' + classname)
      return
    }
    classData.callbacks.push(callback)
  }

   * The invokeCallbacks method.
   * @param {any} inst - The inst value.
   
  invokeCallbacks(inst) {
    if (this.__classNames[inst.constructor.name]) {
      const classData = this.__registeredClasses[
        this.__classNames[inst.constructor.name]
      ]
      for (const callback of classData.callbacks) callback(inst)
    }
  }*/
}

const sgFactory = new SGFactory();

const ValueGetMode = {
  NORMAL: 0,
  OPERATOR_GETVALUE: 1,
};

// Note: In some cases we want the parameter to emit a notification
// and cause the update of the scene during evaluation (like statemachine updates).
// But we also don't want the parameter value to then
// be considered modified so it is saved to the JSON file. I'm not sure how to address this.
// We need to check what happens if a parameter emits a 'valueChanged' during cleaning (maybe it gets ignored).
const ValueSetMode = {
  USER_SETVALUE: 0 /* A value has being modified by a local user. emit events and set user edited flag */,
  REMOTEUSER_SETVALUE: 1 /* A value has being modified by a remote user. emit events and set user edited flag. may not trigger file save. */,
  USER_SETVALUE_DONE: 2 /* A value has finished being interactivly set */,
  OPERATOR_SETVALUE: 3 /* No events*/,
  OPERATOR_DIRTIED: 4 /* Emitted when the param is dirtied. Generate events, but don't flag the parameter as user edited*/,
  COMPUTED_VALUE: 4 /* Generate events, but don't flag the parameter as user edited*/,
  GENERATED_VALUE: 4 /* Generate events, but don't flag the parameter as user edited*/,
  DATA_LOAD: 4 /* Generate events, but don't flag the parameter as user edited*/,
};
const ParamFlags = {
  USER_EDITED: 1 << 1,
  DISABLED: 1 << 2,
};

const ParamState = {
  CLEAN: 0,
  DIRTY: 1,
  CLEANING: 2,
};

/** Class representing a base parameter.
 */
class BaseParameter {
  /**
   * Create a base parameter.
   * @param {string} name - The name of the base parameter.
   */
  constructor(name) {
    this.__name = name;
    this.__cleanerFns = [];
    this.__boundOps = [];
    this.__state = ParamState.CLEAN;
    this.__flags = 0;

    this.valueChanged = new Signal();
    this.nameChanged = new Signal();

    this.getName = this.getName.bind(this);
    this.setName = this.setName.bind(this);
    this.getValue = this.getValue.bind(this);
    this.setValue = this.setValue.bind(this);
  }

  /**
   * Getter for the base parameter name.
   * @return {string} - Returns the name.
   */
  getName() {
    return this.__name
  }

  /**
   * Setter for the base parameter name.
   * @param {string} name - The base parameter name.
   */
  setName(name) {
    if (name != this.__name) {
      const prevName = this.__name;
      this.__name = name;
      this.nameChanged.emit(this.__name, prevName);
    }
  }

  /**
   * Getter for the owner of the parameter.
   * @return {any} - The return value.
   */
  getOwner() {
    return this.ownerItem
  }

  /**
   * Adds the owner of the parameter.
   * @param {any} ownerItem - The ownerItem value.
   */
  addOwner(ownerItem) {
    this.ownerItem = ownerItem;
  }

  /**
   * Getter for the parameter path.
   * @return {any} - The return value.
   */
  getPath() {
    const owner = this.getOwner();
    if (owner && owner.getName) {
      if (owner.getPath) {
        const path = owner.getPath().slice();
        path.push(this.__name);
        return path
      } else {
        return [owner.getName(), this.__name]
      }
    }
    return [this.__name]
  }

  /**
   * The setFlag method.
   * @param {number} flag - The flag value.
   */
  setFlag(flag) {
    this.__flags |= flag;
  }

  /**
   * The clearFlag method.
   * @param {number} flag - The flag value.
   */
  clearFlag(flag) {
    this.__flags &= ~flag;
  }

  /**
   * Returns true if the flag if set, otherwise returns false.
   * @param {number} flag - The flag to test.
   * @return {boolean} - Returns a boolean indicating if the flag is set.
   */
  testFlag(flag) {
    return (this.__flags & flag) != 0
  }

  /**
   * The getValue method (TODO).
   */
  getValue() {
    // TODO
  }

  /**
   * The getValue method (TODO).
   * @param {any} value - The value param.
   */
  setValue(value) {
    // TODO
  }

  /**
   * The setEnabled method.
   * @param {any} state - The state value.
   */
  setEnabled(state) {
    console.warn('Deprecated Method: This method will be removed soon.');
    if (state) this.setFlag(ParamFlags.DISABLED);
    else this.clearFlag(ParamFlags.DISABLED);
  }

  /**
   * The isEnabled method.
   */
  isEnabled() {
    console.warn('Deprecated Method: This method will be removed soon.');
    this.testFlag(ParamFlags.DISABLED);
  }

  /**
   * The bindOperator method.
   * @param {Operator} op - The cleanerFn value.
   */
  bindOperator(op) {
    this.__boundOps.push(op);
    this.__state = ParamState.DIRTY;
    this.valueChanged.emit(ValueSetMode.OPERATOR_DIRTIED); // changed via cleaner fn
  }

  /**
   * The unbindOperator method.
   * @param {Operator} op - The cleanerFn value.
   * @return {boolean} - The return value.
   */
  unbindOperator(op) {
    // If already dirty, simply return.
    const index = this.__boundOps.indexOf(op);
    if (index == -1) {
      return false
    }
    this.__boundOps.splice(index, 1);
    this.__state = ParamState.DIRTY;
    this.valueChanged.emit(ValueSetMode.OPERATOR_DIRTIED); // changed via cleaner fn
  }

  /**
   * The setDirty method.
   * @param {any} cleanerFn - The cleanerFn value.
   * @return {boolean} - The return value.
   */
  setDirty(cleanerFn) {
    // If already dirty, simply return.
    if (this.__cleanerFns.indexOf(cleanerFn) != -1) {
      return false
    }
    this.__cleanerFns.push(cleanerFn);
    this.__state = ParamState.DIRTY;

    this.valueChanged.emit(ValueSetMode.OPERATOR_DIRTIED); // changed via cleaner fn
    return true
  }

  /**
   * The setDirtyFromOp method.
   */
  setDirtyFromOp() {
    // As we migrate to bound ops, we will no longer call store
    // cleaner fns and intead simply propagate.
    if (this.__state == ParamState.CLEAN) {
      this.__state = ParamState.DIRTY;
      this.valueChanged.emit(ValueSetMode.OPERATOR_DIRTIED); // changed via cleaner fn
    }
    return true
  }

  /**
   * The isDirty method.
   * @return {boolean} - Returns a boolean.
   */
  isDirty() {
    return this.__state == ParamState.DIRTY
    // return this.__cleanerFns.length > 0
  }

  /**
   * The _clean method.
   * @private
   */
  _clean() {
    this.__state = ParamState.CLEANING;
    // Clean the param before we start evaluating the connected op.
    // This is so that operators can read from the current value
    // to compute the next.
    const fns = this.__cleanerFns;
    this.__cleanerFns = [];
    for (const fn of fns) {
      const res = fn(this.__value);
      if (res != undefined) this.__value = res;
    }

    // Note: we always evaluate all the ops in the stack, not just the dirty ones.
    // A bas op might comptue global Xfo, and a subsequen modifies it.
    for (const op of this.__boundOps) {
      // The op can get the current value and modify it in place
      // and set the output to clean.
      op.evaluate();
    }
    this.__state = ParamState.CLEAN;
  }

  /**
   * The removeCleanerFn method.
   * @param {any} cleanerFn - The cleanerFn value.
   * @return {number} - The return value.
   */
  removeCleanerFn(cleanerFn) {
    // Once operators store a dirty flag, then the op sets its
    // self to clean before outputting.
    const index = this.__cleanerFns.indexOf(cleanerFn);
    if (index == -1) {
      // Note: when a getValue is called, first the cleaners array is reset
      // and then the cleaners are called (see above)
      // When an operator is applied to multiple outputs, then one of the outputs
      // already has its cleaners array reset.
      // Due to the asynchronous nature of evaluate, multiple cleanings might occur
      // throw ("Error. Cleaner Fn not applied to this parameter:" + cleanerFn.name);

      return 0
    }
    this.__cleanerFns.splice(index, 1);
  }

  /**
   * The clone method.
   * @param {number} flags - The flags value.
   */
  clone(flags) {
    console.error('TOOD: implment me');
  }

  /**
   * The destroy method.
   */
  destroy() {
    // Note: Some parameters hold refs to geoms/materials,
    // which need to be explicitly cleaned up.
    // E.g. freeing GPU Memory.
  }
}

/** Class representing a parameter.
 * @extends BaseParameter
 */
class Parameter extends BaseParameter {
  /**
   * Create a parameter.
   * @param {string} name - The name of the parameter.
   * @param {any} value - The value of the parameter.
   * @param {any} dataType - The data type of the parameter.
   */
  constructor(name, value, dataType) {
    super(name);
    this.__value = value;
    this.__dataType = dataType ? dataType : value.constructor.name;
  }

  /**
   * The getDataType method.
   * @return {any} - The return value.
   */
  getDataType() {
    return this.__dataType
  }

  /**
   * The getValue method.
   * @param {number} mode - The mode value.
   * @return {any} - The return value.
   */
  getValue(mode = ValueGetMode.NORMAL) {
    if (/*mode == ValueGetMode.NORMAL && */ this.__state == ParamState.DIRTY)
      this._clean();
    return this.__value
  }

  /**
   * The setClean method.
   * @param {any} value - The value param.
   */
  setClean(value) {
    this.__value = value;
  }

  /**
   * The getValue method.
   * @param {any} value - The value param.
   * @param {number} mode - The mode param.
   */
  setValue(value, mode = ValueSetMode.USER_SETVALUE) {
    // 0 == normal set. 1 = changed via cleaner fn, 2=change by loading/cloning code.
    if (this.__cleanerFns.length > 0) {
      // Note: This message has not highlighted any real issues, and has become verbose.
      // Enable if suspicious of operators being trampled by setValues.
      // if(mode==0){
      //     let cleanerNames = [];
      //     for(let fn of this.__cleanerFns) {
      //         cleanerNames.push(fn.name);
      //     }
      //     console.warn("Error setting "+this.__name + " value when cleaner is assigned:"+ cleanerNames);
      // }
      this.__cleanerFns = [];
    }

    if (value == undefined) {
      // eslint-disable-next-line no-throw-literal
      throw ("undefined was passed into the setvalue for param:" + this.getName())
    }

    if (!value.fromJSON) {
      // Note: equality tests on anything but simple values is going to be super expenseive.
      if (this.__value == value) return
    }
    this.__value = value;
    if (
      mode == ValueSetMode.USER_SETVALUE ||
      mode == ValueSetMode.REMOTEUSER_SETVALUE
    ) {
      this.setFlag(ParamFlags.USER_EDITED);
    }

    // During the cleaning process, we don't want notifications.
    if (mode != ValueSetMode.OPERATOR_SETVALUE) this.valueChanged.emit(mode);
  }

  /**
   * At the end of an interaction session of setting a value.
   * E.g. moving a slider handle, or typing in some values
   * this method should be called to notify that that interaction is complete
   * Code can listed to this event to trigger longer running actions like
   * saving a file or heavy computation.
   * @param {any} value - The value param.
   * @param {any} mode - The mode param.
   */
  setValueDone() {
    this.valueChanged.emit(ValueSetMode.USER_SETVALUE_DONE);
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    if (this.__value.toJSON)
      return { value: this.__value.toJSON(context, flags) }
    else return { value: this.__value }
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    if (j.value == undefined) {
      console.warn('Invalid Parameter JSON');
      return
    }
    // Note: JSON data is only used to store user edits, so
    // parameters loaed from JSON are considered user edited.
    this.setFlag(ParamFlags.USER_EDITED);

    if (j.value.type && this.__value == undefined) {
      this.__value = sgFactory.constructClass(j.value.type);
    }
    if (this.__value == undefined || !this.__value.fromJSON)
      this.setValue(j.value, ValueSetMode.DATA_LOAD);
    else {
      this.__value.fromJSON(j.value, context);
      this.valueChanged.emit(ValueSetMode.DATA_LOAD);
    }
  }

  /**
   * The readBinary method.
   * @param {object} reader - The reader value.
   * @param {object} context - The context value.
   */
  readBinary(reader, context) {
    console.error('TODO');
  }

  // ////////////////////////////////////////
  // Clone

  /**
   * The clone method constructs a new parameter, copies its values
   * from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {Parameter} - Returns a new cloned parameter.
   */
  clone(flags) {
    const clonedValue = this.__value;
    if (clonedValue.clone) clonedValue = clonedValue.clone();
    const clonedParam = new Parameter(this.__name, clonedValue, this.__dataType);
    return clonedParam
  }
}

let counter$1 = 0;

/** Class representing a parameter owner in the scene tree.
 */
class ParameterOwner {
  /**
   * Create a parameter owner.
   */
  constructor() {
    this.__id = ++counter$1;

    this.__params = [];
    this.__paramMapping = {};
    this.__paramSignalIds = {};

    // Paramters are not intended to be dynamic.
    // Instead they are part of the mixin architecture.
    // Note: Materials add/remove paramters when the
    // shader name is changed.
    this.parameterAdded = new Signal();
    this.parameterRemoved = new Signal();
    this.parameterValueChanged = new Signal();
  }
  
  /**
   * Returns the unique id of the object. Every Object has a unique
   * identifier which is based on a counter that is incremented.
   * @return {any} - The return value.
   */
  getId() {
    return this.__id
  }

  // ////////////////////////////////////////
  // Params

  /**
   * The numParameters method.
   * @return {number} - The return value.
   */
  numParameters() {
    return this.__params.length
  }

  /**
   * The getParameters method.
   * @return {any} - The return value.
   */
  getParameters() {
    return this.__params
  }

  /**
   * The getParameterIndex method.
   * @param {string} paramName - The parameter name.
   * @return {any} - The return value.
   */
  getParameterIndex(paramName) {
    return this.__paramMapping[paramName]
  }

  /**
   * The getParameterByIndex method.
   * @param {number} index - The index value.
   * @return {any} - The return value.
   */
  getParameterByIndex(index) {
    return this.__params[index]
  }

  /**
   * The hasParameter method.
   * @param {string} paramName - The parameter name.
   * @return {any} - The return value.
   */
  hasParameter(paramName) {
    return paramName in this.__paramMapping
  }

  /**
   * The getParameter method.
   * @param {string} paramName - The parameter name.
   * @return {any} - The return value.
   */
  getParameter(paramName) {
    const index = this.__paramMapping[paramName];
    if (index == -1) return null
    return this.__params[index]
  }

  /**
   * This method can be overrridden in derived classes
   * to perform general updates (see GLPass or BaseItem).
   * @param {any} param - The param param.
   * @param {any} mode - The mode param.
   * @private
   */
  __parameterValueChanged(param, mode) {
    this.parameterValueChanged.emit(param, mode);
  }

  /**
   * Add a parameter.
   * @param {any} param - The paramater to add.
   * @return {any} - The return value.
   */
  addParameter(param) {
    const name = param.getName();
    if (this.__paramMapping[name] != undefined) {
      console.warn('Replacing Parameter:' + name);
      this.removeParameter(name);
    }
    this.__paramSignalIds[name] = param.valueChanged.connect(mode =>
      this.__parameterValueChanged(param, mode)
    );
    this.__params.push(param);
    this.__paramMapping[name] = this.__params.length - 1;
    this.parameterAdded.emit(name);
    return param
  }

  /**
   * Insert a parameter.
   * @param {any} param - The parameter to insert.
   * @param {number} index - The index value.
   * @return {any} - The return value.
   */
  insertParameter(param, index) {
    const name = param.getName();
    if (this.__paramMapping[name] != undefined) {
      console.warn('Replacing Parameter:' + name);
      this.removeParameter(name);
    }
    this.__paramSignalIds[name] = param.valueChanged.connect(mode =>
      this.__parameterValueChanged(param, mode)
    );
    this.__params.splice(index, 0, param);

    const paramMapping = {};
    for (let i = 0; i < this.__params.length; i++) {
      paramMapping[this.__params[i].getName()] = i;
    }
    this.__paramMapping = paramMapping;
    this.parameterAdded.emit(name);
    return param
  }

  /**
   * Remove a parameter.
   * @param {string} paramName - The parameter name.
   */
  removeParameter(paramName) {
    if (this.__paramMapping[paramName] == undefined) {
      console.throw('Unable to Remove Parameter:' + paramName);
    }
    const index = this.__paramMapping[paramName];
    const param = this.__params[this.__paramMapping[paramName]];
    param.valueChanged.disconnectId(this.__paramSignalIds[paramName]);
    this.__params.splice(index, 1);
    const paramMapping = {};
    for (let i = 0; i < this.__params.length; i++) {
      paramMapping[this.__params[i].getName()] = i;
    }
    this.__paramMapping = paramMapping;
    this.parameterRemoved.emit(paramName);
  }

  /**
   * Replace a parameter.
   * @param {any} param - The parameter to replace.
   * @return {any} - The return value.
   */
  replaceParameter(param) {
    const name = param.getName();
    const index = this.__paramMapping[name];
    const prevparam = this.__params[this.__paramMapping[name]];
    prevparam.valueChanged.disconnectId(this.__paramSignalIds[name]);

    this.__paramSignalIds[name] = param.valueChanged.connect(mode =>
      this.__parameterValueChanged(param, mode)
    );
    this.__params[index] = param;
    return param
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    const paramsJSON = {};
    let savedParams = 0;
    for (const param of this.__params) {
      if (!param.testFlag(ParamFlags.USER_EDITED)) continue
      if (param.numRefs() > 1 && param.getRefIndex(this) != 0) {
        paramsJSON[param.getName()] = {
          paramPath: context.makeRelative(param.getPath()),
        };
        savedParams++;
      } else {
        const paramJSON = param.toJSON(context, flags);
        if (paramJSON) {
          paramsJSON[param.getName()] = paramJSON;
          savedParams++;
        }
      }
    }
    if (savedParams > 0) return { params: paramsJSON }
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    if (j.params) {
      for (const key in j.params) {
        const pj = j.params[key];
        const param = this.getParameter(key);
        if (!param) console.warn('Param not found:' + key);
        else {
          if (pj.paramPath) {
            context.resolvePath(
              pj.paramPath,
              param => {
                this.replaceParameter(param);
              },
              reason => {
                console.warn(
                  'Unable to resolve shared parameter:' + pj.paramPath
                );
              }
            );
          } else {
            param.fromJSON(pj, context);
          }
        }
      }
    }
  }

  /**
   * The readBinary method.
   * @param {object} reader - The reader value.
   * @param {object} context - The context value.
   */
  readBinary(reader, context) {
    // TODO: make this work

    // if (context.version >= 3) {
    if (context.versions['zea-engine'].greaterOrEqualThan([0, 0, 3])) {
      const numProps = reader.loadUInt32();
      for (let i = 0; i < numProps; i++) {
        const propType = reader.loadStr();
        const propName = reader.loadStr();
        let param = this.getParameter(propName);
        if (!param) {
          param = sgFactory.constructClass(propType, propName);
          if (!param) {
            console.error(
              'Unable to construct prop:' + propName + ' of type:' + propType
            );
            continue
          }
          this.addParameter(param);
        }
        param.readBinary(reader, context);
      }
    }
  }

  /**
   * The toString method.
   * @return {any} - The return value.
   */
  toString() {
    return JSON.stringify(this.toJSON(), null, 2)
  }

  // ////////////////////////////////////////
  // Clone and Destroy

  /**
   * The copyFrom method.
   * @param {ParameterOwner} src - The ParameterOwner copy from.
   * @param {number} flags - The flags value.
   */
  copyFrom(src, flags) {
    // Note: Loop over the parameters in reverse order,
    // this is because often, parameter depdenencies
    // are bottom to top (bottom params dependent on higher params).
    // This means that as a parameter is set with a new value
    // it will dirty the params below it.
    let i = src.numParameters();
    while (i--) {
      const srcParam = src.getParameterByIndex(i);
      const param = this.getParameter(srcParam.getName());
      if (param) {
        // Note: we are not cloning the values.
        param.setValue(srcParam.getValue(), ValueSetMode.OPERATOR_SETVALUE);
      } else {
        this.addParameter(srcParam.clone());
      }
    }
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    for (const param of this.__params) {
      param.destroy();
    }
    super.destroy();
  }
}

/* eslint-disable prettier/prettier */

const ItemFlags = {
  USER_EDITED: 1 << 1,
  IGNORE_BBOX: 1 << 2,
  BIN_NODE: 1 << 3, // This node was generated when loading a binary file.
  INVISIBLE: 1 << 4, // This node was generated when loading a binary file.
};
let numBaseItems = 0;

/** The base class for the scene tree. A base item has a name and parameters.
 * @extends ParameterOwner
 */
class BaseItem extends ParameterOwner {
  /**
   * Create a base item.
   * @param {string} name - The name of the base item.
   */
  constructor(name) {
    super();
    this.__name = name ? name : "";
    this.__path = [this.__name];
    this.__ownerItem = undefined; // TODO: will create a circular ref. Figure out and use weak refs
    this.__flags = 0;

    // Note: one day we will remove the concept of 'selection' from the engine
    // and keep it only in UX. to Select an item, we will add it to the selectino
    // in the selection manager. Then the selection group will apply a highlight.
    this.__selectable = true;
    this.__selected = false;
    this.selectedChanged = new Signal();

    this.__metaData = {};

    this.nameChanged = new Signal();

    numBaseItems++;
  }

  // ////////////////////////////////////////
  // Static Methods

  /**
   * The getNumBaseItems method returns the total number of base items created.
   * This method is used in debugging memory consumption.
   * @return {number} - Returns the total number of base items created.
   */
  static getNumBaseItems() {
    return numBaseItems
  }

  /**
   * The __parameterValueChanged method.
   * @param {any} param - The param value.
   * @param {number} mode - The mode value.
   * @private
   */
  __parameterValueChanged(param, mode) {
    super.__parameterValueChanged(param, mode);
    if (
      mode == ValueSetMode.USER_SETVALUE ||
      mode == ValueSetMode.REMOTEUSER_SETVALUE
    ) {
      this.setFlag(ItemFlags.USER_EDITED);
    }
  }

  // ////////////////////////////////////////
  // Name and Path

  /**
   * Returns the name of the base item.
   * @return {string} - Returns the base item name.
   */
  getName() {
    return this.__name
  }

  /**
   * Sets the name of the base item.
   * @param {string} name - The base item name.
   * @param {number} mode - The mode value
   */
  setName(name, mode = ValueSetMode.USER_SETVALUE) {
    if (this.__name != name) {
      const oldName = this.__name;
      this.__name = name;
      this.__updatePath();
      this.nameChanged.emit(name, oldName, mode);
    }
  }

  /**
   * When the name or the hierarchy changes, this method
   * recomputes and caches the path of this item.
   * @private
   */
  __updatePath() {
    if (this.__ownerItem == undefined) this.__path = [this.__name];
    else {
      this.__path = this.__ownerItem.getPath().slice();
      this.__path.push(this.__name);
    }
  }

  /**
   * Returns the current path of the item in the tree as an array of names.
   * @return {array} - Returns an array.
   */
  getPath() {
    return this.__path
  }

  // ////////////////////////////////////////
  // Flags

  /**
   * The setFlag method.
   * @param {number} flag - the flag value.
   */
  setFlag(flag) {
    this.__flags |= flag;
  }

  /**
   * The clearFlag method.
   * @param {number} flag - the flag value.
   */
  clearFlag(flag) {
    this.__flags &= ~flag;
  }

  /**
   * Returns true if the flag if set, otherwise returns false.
   * @param {number} flag - The flag to test.
   * @return {boolean} - Returns a boolean indicating if the flag is set.
   */
  testFlag(flag) {
    return (this.__flags & flag) != 0
  }

  // ////////////////////////////////////////
  // Path Traversial

  /**
   * The resolvePath method traverses the subtree from this item down
   * matching each name in the path with a child until it reaches the
   * end of the path.
   * @param {any} path - The path value.
   * @param {number} index - The index value.
   * @return {any} - The return value.
   */
  resolvePath(path, index) {
    if (index == path.length) {
      return this
    }
    if (path[index] == '>' && index == path.length - 1) {
      return this.getParameter(path[index + 1])
    }

    // Maybe the name is a parameter name.
    const param = this.getParameter(path[index]);
    if (param) {
      return param
    }
    throw new Error('Invalid path:' + path + ' member not found')
  }

  // ////////////////////////////////////////
  // Owner Item

  /**
   * The getOwner method returns the current owner of the item.
   * The item is a child of the current owner.
   * @return {object} - Returns the current owner.
   */
  getOwner() {
    // return this.__private.get('ownerItem');
    return this.__ownerItem
  }

  /**
   * The setOwner method assigns a new owner to the item.
   * @param {object} ownerItem - The new owner item.
   */
  setOwner(ownerItem) {
    // this.__private.set(ownerItem, ownerItem);
    if (this.__ownerItem !== ownerItem) {
      this.__ownerItem = ownerItem;
      this.__updatePath();
    }
  }

  // ////////////////////////////////////////
  // Selectability and Selection

  /**
   * The getSelectable method returns a boolean indicating if this item is selectable.
   * @return {boolean} - Returns a boolean indicating if the item is selectable.
   */
  getSelectable() {
    return this.__selectable
  }

  /**
   * The setSelectable method modifies the selectability of this item.
   * @param {boolean} val - A boolean indicating the selectability of the item.
   * @return {boolean} - Returns a boolean.
   */
  setSelectable(val) {
    if (this.__selectable != val) {
      this.__selectable = val;
      return true
    }
    return false
  }

  /**
   * The isSelected method.
   * @deprecated
   * @return {boolean} - The return value.
   */
  isSelected() {
    return this.__selected
  }

  /**
   * The getSelected method returns true if this item has been selected.
   * @return {boolean} - The current selection state.
   */
  getSelected() {
    return this.__selected
  }

  /**
   * The getSelected method changes the current state of the selection of this item.
   * @param {boolean} sel - Boolean indicating the new selection state.
   */
  setSelected(sel) {
    this.__selected = sel;
    this.selectedChanged.emit(this.__selected);
  }

  // ////////////////////////////////////////
  // Metadata

  /**
   * The getMetadata method.
   * @param {any} key - The key value under which to check for metadata.
   * @return {object} - Returns the metadata associated with the given key.
   */
  getMetadata(key) {
    return this.__metaData[key]
  }

  /**
   * The hasMetadata method checks to see if there is metadata for a given key.
   * @param {any} key - The key value.
   * @return {boolean} - Returns true if metadata exists under the given key, otherwise returns false.
   */
  hasMetadata(key) {
    return key in this.__metaData
  }

  /**
   * The setMetadata method assigns metadata to a given key.
   * @param {any} key - The key value.
   * @param {object} metaData - The metaData value.
   */
  setMetadata(key, metaData) {
    this.__metaData[key] = metaData;
  }

  /**
   * The deleteMetadata method removes metadata for a given key.
   * @param {any} key - The key value.
   */
  deleteMetadata(key) {
    delete this.__metaData[key];
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes the current object as a json object.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    let j = super.toJSON(context, flags);
    if (!j && this.testFlag(ItemFlags.USER_EDITED)) j = {};
    if (j) {
      j.name = this.__name;

      // Binary Tree nodes should only be re-created
      // by loading binary data. The JSON tree just stores
      // modifications to those items, and if, when loading
      // the node no longer exists, then the json loader
      // simply keeps going. (no errors).
      if (!this.testFlag(ItemFlags.BIN_NODE))
        j.type = sgFactory.getClassName(this);
    }
    return j
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    if (j.name) this.__name = j.name;
    super.fromJSON(j, context, flags);
    // Note: JSON data is only used to store user edits, so
    // parameters loaded from JSON are considered user edited.
    this.__flags |= ItemFlags.USER_EDITED;
  }

  /**
   * The readBinary method.
   * @param {object} reader - The reader value.
   * @param {object} context - The context value.
   */
  readBinary(reader, context) {
    const type = reader.loadStr();
    this.setName(reader.loadStr());

    // Note: parameters follow name...
    super.readBinary(reader, context);
  }

  // ////////////////////////////////////////
  // Clone and Destroy

  /**
   * Clones this bse item and returns a new base item.
   * Note: Each class should implement clone to be clonable.
   * @param {number} flags - The flags value.
   */
  clone(flags) {
    throw new Error(
      this.constructor.name + ' does not implment its clone method'
    )
  }

  /**
   * When a BaseItem is cloned, initially the constructor is
   * called to generate a new instance. This instance then copies
   * its values from the source using this method.
   * This method copies any relevant data from the source object to
   * ensure that it represents a valid clone.
   * Derived classes override this method to copy any relevant
   * data from the source object.
   * @param {BaseItem} src - The BaseItem to copy from.
   * @param {number} flags - The flags value.
   */
  copyFrom(src, flags) {
    super.copyFrom(src, flags);
    this.setName(src.getName());
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    super.destroy();
  }
}

const getFileFolder = function(filePath) {
  return filePath.substring(0, filePath.lastIndexOf('/')) + '/'
};

const loadfile = function(url, responseType, onSucceed, onFail, onProgress) {
  const xhr = new XMLHttpRequest();
  xhr.responseType = responseType;
  try {
    xhr.addEventListener('timeout', function(event) {
      throw new Error('The request for ' + url + ' timed out.')
    });
    xhr.addEventListener('error', function(event) {
      throw new Error(
        'The request for ' + url + ': xhr.readyState:' + xhr.readyState
      )
      onFail(xhr.statusText);
    });
    xhr.addEventListener('abort', function(event) {
      throw new Error(
        'The request for ' + url + ': xhr.readyState:' + xhr.readyState
      )
      onFail(xhr.statusText);
    });
    xhr.addEventListener('loadend', function(event) {
      if (xhr.status == 200) onSucceed(xhr);
      else onFail(xhr.statusText);
    });
    xhr.open('GET', url, true);
    xhr.send();
    // xhr.open();
  } catch (err) {
    onFail(err);
  }
};

const loadTextfile = function(
  url,
  onSucceed,
  onFail = undefined,
  onProgress = undefined
) {
  loadfile(
    url,
    'text',
    xhr => {
      onSucceed(xhr.responseText);
    },
    statusText => {
      if (onFail != undefined) onFail(statusText);
      else {
        throw new Error('Unable to XHR File:' + url)
      }
    });
};

const loadJSONfile = function(
  url,
  onSucceed,
  onFail = undefined,
  onProgress = undefined
) {
  loadfile(
    url,
    'json',
    xhr => {
      onSucceed(xhr.response, xhr);
    },
    statusText => {
      if (onFail != undefined) onFail(statusText);
      else {
        throw new Error('Unable to XHR File:' + url)
      }
    });
};

const loadXMLfile = function(
  url,
  onSucceed,
  onFail = undefined,
  onProgress = undefined
) {
  loadfile(
    url,
    'document',
    xhr => {
      onSucceed(xhr.responseXML);
    },
    statusText => {
      if (onFail != undefined) onFail(statusText);
      else {
        throw new Error('Unable to XHR File:' + url)
      }
    });
};

const loadBinfile = function (
  url,
  onSucceed,
  onFail = undefined,
  onProgress = undefined
) {
  loadfile(
    url,
    'arraybuffer',
    xhr => {
      onSucceed(xhr.response);
    },
    statusText => {
      if (onFail != undefined) onFail(statusText);
      else {
        throw new Error('Unable to XHR File:' + url)
      }
    });
};

const kIsNodeJS = Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';
const kRequire = kIsNodeJS && typeof module.require === 'function' ? module.require : null; // eslint-disable-line

function browserDecodeBase64(base64, enableUnicode) {
    const binaryString = atob(base64);
    if (enableUnicode) {
        const binaryView = new Uint8Array(binaryString.length);
        Array.prototype.forEach.call(binaryView, (el, idx, arr) => {
            arr[idx] = binaryString.charCodeAt(idx);
        });
        return String.fromCharCode.apply(null, new Uint16Array(binaryView.buffer));
    }
    return binaryString;
}

function nodeDecodeBase64(base64, enableUnicode) {
    return Buffer.from(base64, 'base64').toString(enableUnicode ? 'utf16' : 'utf8');
}

function createBase64WorkerFactory(base64, sourcemap = null, enableUnicode = false) {
    const source = kIsNodeJS ? nodeDecodeBase64(base64, enableUnicode) : browserDecodeBase64(base64, enableUnicode);
    const start = source.indexOf('\n', 10) + 1;
    const body = source.substring(start) + (sourcemap ? `\/\/# sourceMappingURL=${sourcemap}` : '');

    if (kRequire) {
        /* node.js */
        const Worker = kRequire('worker_threads').Worker; // eslint-disable-line
        return function WorkerFactory(options) {
            return new Worker(body, Object.assign({}, options, { eval: true }));
        };
    }

    /* browser */
    const blob = new Blob([body], { type: 'application/javascript' });
    const url = URL.createObjectURL(blob);
    return function WorkerFactory(options) {
        return new Worker(url, options);
    };
}

/* eslint-disable */
var WorkerFactory = createBase64WorkerFactory('', null, false);
/* eslint-enable */

// For synchronous loading, uncomment these lines.
// import {
//     ResourceLoaderWorker_onmessage
// } from './ResourceLoaderWorker.js';

/**
 * Simple object check.
 * @param {any} item - The item value.
 * @return {boolean} - The return value.
 * @private
 */
function isObject(item) {
  return item && typeof item === 'object' && !Array.isArray(item)
}

/**
 * Deep merge two objects.
 * @param {any} target - The target value.
 * @param {...object} ...sources - The ...sources value.
 * @return {any} - The return value.
 * @private
 */
function mergeDeep(target, ...sources) {
  if (!sources.length) return target
  const source = sources.shift();

  if (isObject(target) && isObject(source)) {
    for (const key in source) {
      if (isObject(source[key])) {
        if (!target[key])
          Object.assign(target, {
            [key]: {},
          });
        mergeDeep(target[key], source[key]);
      } else {
        Object.assign(target, {
          [key]: source[key],
        });
      }
    }
  }

  return mergeDeep(target, ...sources)
}

/** Class representing a resource loader. */
class ResourceLoader {
  /**
   * Create a resource loader.
   */
  constructor() {
    this.loaded = new Signal();
    this.progressIncremented = new Signal();
    this.allResourcesLoaded = new Signal();
    this.fileUpdated = new Signal();

    this.__totalWork = 0;
    this.__totalWorkByCategory = {};
    this.__doneWork = 0;
    this.__doneWorkByCategory = {};
    this.__resourceRegisterCallbacks = {};
    this.__callbacks = {};
    this.__resources = {};
    this.__resourcesTreeEntities = {};
    this.__resourcesTree = {
      children: {},
    };

    this.__workers = [];
    this.__nextWorker = 0;

    let baseUrl;
    const scripts = document.getElementsByTagName('script');
    for (let i = 0; i < scripts.length; i++) {
      const script = scripts[i];
      if (script.src.includes('zea-engine')) {
        const parts = script.src.split('/');
        parts.pop();
        parts.pop();
        baseUrl = parts.join('/');
        break
      }
    }
    if (!baseUrl) {
      baseUrl = 'https://unpkg.com/@zeainc/zea-engine@0.1.3';
    }
    this.wasmUrl = baseUrl + '/public-resources/unpack.wasm';
    this.addResourceURL(
      'ZeaEngine/Vive.vla',
      baseUrl + '/public-resources/Vive.vla'
    );
    this.addResourceURL(
      'ZeaEngine/Oculus.vla',
      baseUrl + '/public-resources/Oculus.vla'
    );
  }

  /**
   * The getRootFolder method.
   * @return {any} - The return value.
   */
  getRootFolder() {
    return this.__resourcesTree
  }

  /**
   * The registerResourceCallback method.
   * @param {any} filter - The filter value.
   * @param {any} fn - The fn value.
   */
  registerResourceCallback(filter, fn) {
    this.__resourceRegisterCallbacks[filter] = fn;

    for (const key in this.__resources) {
      const file = this.__resources[key];
      if (file.name.includes(filter)) fn(file);
    }
  }

  /**
   * The __applyCallbacks method.
   * @param {any} resourcesDict - The resourcesDict value.
   * @private
   */
  __applyCallbacks(resourcesDict) {
    const applyCallbacks = (resource) => {
      for (const filter in this.__resourceRegisterCallbacks) {
        if (resource.name.includes(filter))
          this.__resourceRegisterCallbacks[filter](resource);
      }
    };
    for (const key in resourcesDict) {
      const resource = resourcesDict[key];
      if (resource.url) applyCallbacks(resource);
    }
  }

  /**
   * The __buildTree method.
   * @param {any} resources - The resources param.
   * @private
   */
  __buildTree(resources) {
    const buildEntity = (resourceId) => {
      if (this.__resourcesTreeEntities[resourceId]) return

      const resource = resources[resourceId];
      resource.id = resourceId;
      if (resource.type === 'folder' || resource.type === 'dependency') {
        resource.children = {};
      }
      if (resource.parent) {
        if (!this.__resourcesTreeEntities[resource.parent]) {
          buildEntity(resource.parent);
        }
      }
      const parent = resource.parent
        ? this.__resourcesTreeEntities[resource.parent]
        : this.__resourcesTree;
      // console.log((parent.name ? parent.name + '/' : '') + resource.name)
      parent.children[resource.name] = resource;
      this.__resourcesTreeEntities[resourceId] = resource;
    };

    for (const key in resources) {
      buildEntity(key);
    }
  }

  /**
   * The setResources method.
   * @param {any} resources - The resources value.
   */
  setResources(resources) {
    this.__resources = Object.assign(this.__resources, resources);
    this.__buildTree(resources);
    this.__applyCallbacks(resources);
  }

  /**
   * The addResourceURL method.
   * @param {any} resourcePath - The resourcePath value.
   * @param {any} url - The url value.
   */
  addResourceURL(resourcePath, url) {
    const parts = resourcePath.split('/');
    const filename = parts.pop();
    if (!url) {
      let rootURL = window.location.href.split('#')[0];
      rootURL = rootURL.split('?')[0];
      if (rootURL.endsWith('.html') || rootURL.endsWith('.html')) {
        rootURL = rootURL.substring(0, rootURL.lastIndexOf('/')) + '/';
      }
      const base = rootURL;
      if (parts[0] == '.') parts.shift();
      else if (parts[0] == '..') {
        item = item.substring(3);
        const baseparts = base.split('/');
        baseparts.pop();
        baseparts.pop();
        base = baseparts.join('/') + '/';
      }
      url = base + resourcePath;
    }
    let parentId;
    const tmp = {};
    for (const part of parts) {
      const key = hashStr(part);
      if (!(key in this.__resources)) {
        this.__resources[key] = {
          name: part,
          type: 'folder',
          parent: parentId,
        };
        tmp[key] = this.__resources[key];
      }
      parentId = key;
    }

    const key = hashStr(filename);
    const resource = {
      name: filename,
      url,
      parent: parentId,
      id: key,
    };
    this.__resources[key] = resource;

    tmp[key] = resource;

    this.__buildTree(tmp);
    this.__applyCallbacks(tmp);
  }

  /**
   * The updateFile method.
   * @param {any} file - The file value.
   */
  updateFile(file) {
    const newFile = !(file.id in this.__resources);
    this.__resources[file.id] = file;
    if (newFile) {
      console.log('New file added');
      const resources = {};
      resources[file.id] = file;
      this.__buildTree(resources);
    }
    this.fileUpdated.emit(file.id);
  }

  /**
   * The freeData method.
   * @param {ArrayBuffer} buffer - The buffer value.
   */
  freeData(buffer) {
    // Note: Explicitly transfer data to a web worker and then
    // terminate the worker. (hacky way to free TypedArray memory explicitly)
    // let worker = new FreeMemWorker();
    // worker.postMessage(buffer, [buffer]);
    // worker.terminate();
  }

  /**
   * The __getWorker method.
   * @return {any} - The return value.
   * @private
   */
  __getWorker() {
    const __constructWorker = () => {
      return new Promise((resolve) => {
        const worker = new WorkerFactory();
        // const worker = new Worker(this.__resourceLoaderFile.url);

        worker.postMessage({
          type: 'init',
          wasmUrl: this.wasmUrl,
        });
        worker.onmessage = (event) => {
          if (event.data.type === 'WASM_LOADED') {
            resolve(worker);
          } else if (event.data.type === 'FINISHED') {
            const data = event.data;

            // const file = this.__resources[event.data.resourceId]
            // const text = [
            //   '==================== unrarWebworker.js ====================',
            //   `Filename: ${file.name}`,
            //   '------------------------------------------------------',
            // ];
            // for(const file in data.entries) {
            //   text.push(`${file}:${data.entries[file].byteLength}`);
            // }
            // console.log(text.join('\n'))

            this.addWorkDone(event.data.resourceId, 1); // loading done...
            this.__onFinishedReceiveFileData(event.data);
          } else if (event.data.type === 'ERROR') {
            const data = event.data;
            const file = this.__resources[data.resourceId];
            console.error(
              'Unable to load Resource:',
              file ? file.name : data.resourceId,
              ' With url:',
              data.url
            );
          }
        };
      })
    };

    this.__nextWorker = (this.__nextWorker + 1) % 3;
    if (this.__workers[this.__nextWorker] == undefined)
      this.__workers[this.__nextWorker] = __constructWorker();
    return this.__workers[this.__nextWorker]
  }

  /**
   * The __terminateWorkers value.
   * @private
   */
  __terminateWorkers() {
    for (const worker of this.__workers) worker.terminate();
    this.__workers = [];
  }

  /**
   * The getFilepath method.
   * @param {any} resourceId - The resourceId value.
   * @return {any} - The return value.
   */
  getFilepath(resourceId) {
    let curr = this.__resources[resourceId];
    const path = [curr.name];
    while (curr.parent) {
      curr = this.__resources[curr.parent];
      path.splice(0, 0, curr.name);
    }
    return path.join('/')
  }

  /**
   * The resourceAvailable method.
   * @param {any} resourceId - The resourceId value.
   * @return {any} - The return value.
   */
  resourceAvailable(resourceId) {
    if (resourceId.indexOf('.') > 0) {
      console.warn(
        'Deprecation warning for resourceAvailable. Value should be a file id, not a path.'
      );
      return this.resolveFilepath(resourceId) != undefined
    }
    return resourceId in this.__resources
  }

  /**
   * The getFile method.
   * @param {any} resourceId - The resourceId value.
   * @return {any} - The return value.
   */
  getFile(resourceId) {
    return this.__resources[resourceId]
  }

  /**
   * The resolveFilePathToId method.
   * @param {any} filePath - The filePath value.
   * @return {any} - The return value.
   */
  resolveFilePathToId(filePath) {
    if (!filePath) {
      console.warn('Invalid file path:', filePath);
      return
    }
    const file = this.resolveFilepath(filePath);
    if (file) return file.id
  }

  /**
   * The resolveFilepath method.
   * @param {any} filePath - The filePath value.
   * @return {any} - The return value.
   */
  resolveFilepath(filePath) {
    const parts = filePath.split('/');
    if (parts[0] == '.' || parts[0] == '') parts.shift();
    let curr = this.__resourcesTree;
    for (const part of parts) {
      if (part in curr.children) curr = curr.children[part];
      else {
        console.warn('Unable to resolve key:' + part + ' of path:' + filePath);
        return null
      }
    }
    return curr
  }

  /**
   * The resolveFile method.
   * @param {any} filePath - The filePath value.
   * @return {any} - The return value.
   */
  resolveFile(filePath) {
    console.warn('Deprecation warning for resolveFile. Use resolveFilepath.');
    return this.resolveFilepath(filePath)
  }

  /**
   * The resolveURL method.
   * @param {any} filePath - The filePath value.
   * @return {any} - The return value.
   */
  resolveURL(filePath) {
    console.warn('Deprecation warning for resolveURL. Use resolveFilepath.');
    const file = this.resolveFilepath(filePath);
    if (file) return file.url
  }

  /**
   * Add work to the total work pile.. We never know how big the pile will get.
   * @param {any} resourceId - The resourceId value.
   * @param {any} amount - The amount value.
   */
  addWork(resourceId, amount) {
    this.__totalWork += amount;
    this.progressIncremented.emit((this.__doneWork / this.__totalWork) * 100);
  }

  /**
   * Add work to the 'done' pile. The done pile should eventually match the total pile.
   * @param {any} resourceId - The resourceId value.
   * @param {any} amount - The amount value.
   */
  addWorkDone(resourceId, amount) {
    this.__doneWork += amount;
    this.progressIncremented.emit((this.__doneWork / this.__totalWork) * 100);
    if (this.__doneWork > this.__totalWork) {
      throw new Error('Mismatch between work loaded and work done.')
    }
    if (this.__doneWork == this.__totalWork) {
      this.allResourcesLoaded.emit();
    }
  }

  /**
   * The loadResource method.
   * @param {any} resourceId - The resourceId value.
   * @param {any} callback - The callback value.
   * @param {boolean} addLoadWork - The addLoadWork value.
   */
  loadResource(resourceId, callback, addLoadWork = true) {
    const file = this.getFile(resourceId);
    if (!file) {
      throw new Error(
        "Invalid resource Id:'" +
          resourceId +
          "' not found in Resources:" +
          JSON.stringify(this.__resources, null, 2)
      )
    }

    this.loadUrl(resourceId, file.url, callback, addLoadWork);
  }

  /**
   * The loadURL method.
   * @param {any} resourceId - The resourceId value.
   * @param {any} url - The url value.
   * @param {any} callback - The callback value.
   * @param {boolean} addLoadWork - The addLoadWork value.
   * @return {any} - The return value.
   */
  loadURL(resourceId, url, callback, addLoadWork = true) {
    console.warn('Please call loadUrl instead,');
    return this.loadUrl(resourceId, url, callback, addLoadWork)
  }

  /**
   * The loadUrl method.
   * @param {any} resourceId - The resourceId value.
   * @param {any} url - The url value.
   * @param {any} callback - The callback value.
   * @param {boolean} addLoadWork - The addLoadWork value.
   */
  loadUrl(resourceId, url, callback, addLoadWork = true) {
    if (addLoadWork) {
      this.addWork(resourceId, 3); // Add work in 2 chunks. Loading, unpacking, parsing.
    }

    if (!(resourceId in this.__callbacks)) this.__callbacks[resourceId] = [];
    this.__callbacks[resourceId].push(callback);

    function checkStatus(response) {
      if (!response.ok) {
        throw new Error(`HTTP ${response.status} - ${response.statusText}`)
      }
      return response
    }
    fetch(url)
      .then((response) => checkStatus(response) && response.arrayBuffer())
      .then((buffer) => {
        this.__getWorker().then((worker) => {
          worker.postMessage({
            type: 'unpack',
            resourceId,
            buffer,
          });
        });
      });
  }

  /**
   * The unpackBuffer method.
   * @param {any} resourceId - The resourceId value.
   * @param {Buffer} buffer - The binary buffer to unpack.
   * @param {any} callback - The callback value.
   * @param {boolean} addLoadWork - The addLoadWork value.
   */
  unpackBuffer(resourceId, buffer, callback, addLoadWork = true) {
    return new Promise((resolve, reject) => {
      if (addLoadWork) {
        this.addWork(resourceId, 3); // Add work in 2 chunks. Loading, unpacking, parsing.
      }

      if (!(resourceId in this.__callbacks)) this.__callbacks[resourceId] = [];
      if (callback) this.__callbacks[resourceId].push(callback);
      this.__callbacks[resourceId].push((entries) => {
        resolve(entries);
      });

      this.__getWorker().then((worker) => {
        worker.postMessage(
          {
            type: 'unpack',
            resourceId,
            buffer,
          },
          [buffer]
        );
      });
    })
  }

  /**
   * The __onFinishedReceiveFileData method.
   * @param {any} fileData - The fileData value.
   * @private
   */
  __onFinishedReceiveFileData(fileData) {
    const resourceId = fileData.resourceId;
    this.addWorkDone(resourceId, 1); // unpacking done...
    const callbacks = this.__callbacks[resourceId];
    if (callbacks) {
      for (const callback of callbacks) {
        callback(fileData.entries);
      }
      delete this.__callbacks[resourceId];
    }
    this.loaded.emit(resourceId);
    this.addWorkDone(resourceId, 1); // parsing done...
  }

  /**
   * The suspend method.
   */
  suspend() {
    this.__terminateWorkers();
  }

  /**
   * The traverse method.
   * @param {any} callback - The callback value.
   */
  traverse(callback) {
    const __c = (fsItem) => {
      for (const childItemName in fsItem.children) {
        __t(fsItem.children[childItemName]);
      }
    };
    const __t = (fsItem) => {
      if (callback(fsItem) == false) return false
      if (fsItem.children) __c(fsItem);
    };
    __c(this.__resourcesTree);
  }
}

const resourceLoader = new ResourceLoader();

/** Class representing a version */
class Version {
  /**
   * Create a bin reader.
   * @param {str} versionStr - The version string value.
   */
  constructor(versionStr) {
    if (versionStr) {
      const parts = versionStr.split('-');
      const numbers = parts[0].split('.');
      this.major = parseInt(numbers[0]);
      this.minor = parseInt(numbers[1]);
      this.patch = parseInt(numbers[2]);
      if (parts.length == 2) this.branch = parts[1];
    } else {
      this.major = 0;
      this.minor = 0;
      this.patch = 0;
    }
  }

  /**
   * Compare a version object against a version numbers array.
   * @param {array} numbers - The numbers value.
   * @return {boolean} - The return value.
   */
  equals(numbers) {
    return !(
      this.patch == numbers[2] &&
      this.minor == numbers[1] &&
      this.major == numbers[0]
    )
  }

  /**
   * Compare a version object against a version numbers array.
   * @param {array} numbers - The numbers value.
   * @return {boolean} - The return value.
   */
  lessThan(numbers) {
    return !(
      this.major >= numbers[0] ||
      this.minor >= numbers[1] ||
      this.patch >= numbers[2]
    )
    // if (this.major >= numbers[0]) return false
    // if (this.minor >= numbers[1]) return false
    // if (this.patch >= numbers[2]) return false
    // return true
    // return (
    //   this.major < numbers[0] ||
    //   this.minor < numbers[1] ||
    //   this.patch < numbers[2]
    // )
  }

  /**
   * Compare a version object against a version numbers array.
   * @param {array} numbers - The numbers value.
   * @return {boolean} - The return value.
   */
  greaterThan(numbers) {
    return (
      this.major > numbers[0] ||
      this.minor > numbers[1] ||
      this.patch > numbers[2]
    )
  }

  /**
   * Compare a version object against a version numbers array.
   * @param {array} numbers - The numbers value.
   * @return {boolean} - The return value.
   */
  greaterOrEqualThan(numbers) {
    if (this.major < numbers[0]) return false
    if (this.major > numbers[0]) return true

    if (this.minor < numbers[1]) return false
    if (this.minor > numbers[1]) return true

    if (this.patch < numbers[2]) return false
    return true
    // return (
    //   this.major >= numbers[0] &&
    //   this.minor >= numbers[1] &&
    //   this.patch >= numbers[2]
    // )
  }
}

/** Class representing a bin reader. */
class BinReader {
  /**
   * Create a bin reader.
   * @param {Buffer} data - The data buffer.
   * @param {number} byteOffset - The byte offset value to start reading the buffer.
   * @param {boolean} isMobileDevice - The isMobileDevice value.
   */
  constructor(data, byteOffset = 0, isMobileDevice = true) {
    this.__data = data;
    this.__byteOffset = byteOffset;
    this.__dataView = new DataView(this.__data);
    this.__isMobileDevice = isMobileDevice;
    this.utf8decoder = new TextDecoder();
  }

  /**
   * Getter for isMobileDevice.
   * @return {Boolean} - Returns true is a mobile device is detected.
   */
  get isMobileDevice() {
    return this.__isMobileDevice
  }

  /**
   * Getter for data.
   * @return {Buffer} - The data buffer we are reading from,
   */
  get data() {
    return this.__data
  }

  /**
   * Getter for byteLength.
   * @return {number} - The total length of the buffer
   */
  get byteLength() {
    return this.__dataView.byteLength
  }

  /**
   * Getter for remainingByteLength.
   * @return {number} - The reemaining length of the buffer to read.
   */
  get remainingByteLength() {
    return this.__dataView.byteLength - this.__byteOffset
  }

  /**
   * The pos method.
   * @return {number} - The current offset in the binary buffer
   */
  pos() {
    return this.__byteOffset
  }

  /**
   * The seek method.
   * @param {number} byteOffset - The byteOffset param.
   */
  seek(byteOffset) {
    this.__byteOffset = byteOffset;
  }

  /**
   * The advance method.
   * @param {number} byteOffset - The byte Offset amount.
   */
  advance(byteOffset) {
    this.__byteOffset += byteOffset;
  }

  /**
   * The loadUInt8 method.
   * @return {number} - The return value.
   */
  loadUInt8() {
    const result = this.__dataView.getUint8(this.__byteOffset);
    this.__byteOffset += 1;
    return result
  }

  /**
   * The loadUInt16 method.
   * @return {number} - The return value.
   */
  loadUInt16() {
    const result = this.__dataView.getUint16(this.__byteOffset, true);
    this.__byteOffset += 2;
    return result
  }


  /**
   * The loadUInt32 method.
   * @return {number} - The return value.
   */
  loadUInt32() {
    const result = this.__dataView.getUint32(this.__byteOffset, true);
    this.__byteOffset += 4;
    return result
  }

  /**
   * The loadSInt32 method.
   * @return {number} - The return value.
   */
  loadSInt32() {
    const result = this.__dataView.getInt32(this.__byteOffset, true);
    this.__byteOffset += 4;
    return result
  }

  /**
   * The loadFloat16 method.
   * @return {number} - The return value.
   */
  loadFloat16() {
    const uint16 = this.loadUInt16();
    return Math.decode16BitFloat(uint16)
  }

  /**
   * The loadUFloat16 returns a float where the sign big indicates it is > 201.
   * @return {number} - The return value.
   */
  loadUFloat16() {
    const result = this.loadFloat16();
    if (result < 0.0) {
      return 2048.0 - result // Note: subtract a negative number to add it.
    } else {
      return result
    }
  }

  /**
   * The loadFloat16From2xUInt8 method.
   * @return {number} - The return value.
   */
  loadFloat16From2xUInt8() {
    const result = this.__dataView.getFloat16(this.__byteOffset, true);
    // const uint8s = this.loadUInt8Array(2);
    // return Math.decode16BitFloat(uint8s);
    this.__byteOffset += 2;
    return result
  }

  /**
   * The loadUInt32From2xUFloat16 loads a single Signed integer value from 2 Unsigned Float16 values.
   * @return {number} - The return value.
   */
  loadUInt32From2xUFloat16() {
    const partA = this.loadUFloat16();
    const partB = this.loadUFloat16();
    return partA + partB * 4096
  }

  /**
   * The loadSInt32From2xFloat16 loads a single Signed integer value from 2 signed Float16 values.
   * @return {number} - The return value.
   */
  loadSInt32From2xFloat16() {
    const partA = this.loadFloat16();
    const partB = this.loadFloat16();
    return partA + partB * 2048
  }

  /**
   * The loadFloat32 method.
   * @return {any} - The return value.
   */
  loadFloat32() {
    const result = this.__dataView.getFloat32(this.__byteOffset, true);
    this.__byteOffset += 4;
    return result
  }

  /**
   * The loadUInt8Array method.
   * @param {number} size - The size param.
   * @param {boolean} clone - The clone param.
   * @return {any} - The return value.
   */
  loadUInt8Array(size = undefined, clone = false) {
    if (size == undefined) size = this.loadUInt32();
    const result = new Uint8Array(this.__data, this.__byteOffset, size);
    this.__byteOffset += size;
    const padd = this.__byteOffset % 4;
    // this.readPadd();
    return result
  }

  /**
   * The loadUInt16Array method.
   * @param {number} size - The size param.
   * @param {boolean} clone - The clone param.
   * @return {any} - The return value.
   */
  loadUInt16Array(size = undefined, clone = false) {
    if (size == undefined) size = this.loadUInt32();
    if (size == 0) return new Uint16Array()
    this.readPadd(2);
    let result;
    if (this.__isMobileDevice) {
      result = new Uint16Array(size);
      for (let i = 0; i < size; i++) {
        result[i] = this.__dataView.getUint16(this.__byteOffset, true);
        this.__byteOffset += 2;
      }
    } else {
      result = new Uint16Array(this.__data, this.__byteOffset, size);
      this.__byteOffset += size * 2;
    }
    // this.readPadd();
    return result
  }

  /**
   * The loadUInt32Array method.
   * @param {number} size - The size param.
   * @param {boolean} clone - The clone param.
   * @return {any} - The return value.
   */
  loadUInt32Array(size = undefined, clone = false) {
    if (size == undefined) size = this.loadUInt32();
    if (size == 0) return new Uint32Array()
    this.readPadd(4);
    let result;
    if (this.__isMobileDevice) {
      result = new Uint32Array(size);
      for (let i = 0; i < size; i++) {
        result[i] = this.__dataView.getUint32(this.__byteOffset, true);
        this.__byteOffset += 4;
      }
    } else {
      result = new Uint32Array(this.__data, this.__byteOffset, size);
      this.__byteOffset += size * 4;
    }
    return result
  }

  /**
   * The loadFloat32Array method.
   * @param {number} size - The size param.
   * @param {boolean} clone - The clone param.
   * @return {any} - The return value.
   */
  loadFloat32Array(size = undefined, clone = false) {
    if (size == undefined) size = this.loadUInt32();
    if (size == 0) return new Float32Array()
    this.readPadd(4);
    let result;
    if (this.__isMobileDevice) {
      result = new Float32Array(size);
      for (let i = 0; i < size; i++) {
        result[i] = this.__dataView.getFloat32(this.__byteOffset, true);
        this.__byteOffset += 4;
      }
    } else {
      result = new Float32Array(this.__data, this.__byteOffset, size);
      this.__byteOffset += size * 4;
    }
    return result
  }

  /**
   * The loadStr method.
   * @return {string} - The return value.
   */
  loadStr() {
    const numChars = this.loadUInt32();
    const chars = new Uint8Array(this.__data, this.__byteOffset, numChars);
    this.__byteOffset += numChars;
    return this.utf8decoder.decode(chars)
  }

  /**
   * The loadStrArray method.
   * @return {Array} - The return value.
   */
  loadStrArray() {
    const size = this.loadUInt32();
    const result = [];
    for (let i = 0; i < size; i++) {
      result[i] = this.loadStr();
    }
    return result
  }

  /**
   * The loadSInt32Vec2 method.
   * @return {Vec2} - Returns a Vec2.
   */
  loadSInt32Vec2() {
    const x = this.loadSInt32();
    const y = this.loadSInt32();
    return new Vec2(x, y)
  }

  /**
   * The loadUInt32Vec2 method.
   * @return {Vec2} - Returns a Vec2.
   */
  loadUInt32Vec2() {
    const x = this.loadUInt32();
    const y = this.loadUInt32();
    return new Vec2(x, y)
  }

  /**
   * The loadFloat16Vec2 method.
   * @return {Vec2} - Returns a Vec2.
   */
  loadFloat16Vec2() {
    const x = this.loadFloat16();
    const y = this.loadFloat16();
    return new Vec2(x, y)
  }

  /**
   * The loadFloat32Vec2 method.
   * @return {Vec2} - Returns a Vec2.
   */
  loadFloat32Vec2() {
    const x = this.loadFloat32();
    const y = this.loadFloat32();
    return new Vec2(x, y)
  }
  
  /**
   * The loadFloat16Vec3 method.
   * @return {Vec3} - Returns a Vec3.
   */
  loadFloat16Vec3() {
    const x = this.loadFloat16();
    const y = this.loadFloat16();
    const z = this.loadFloat16();
    return new Vec3$1(x, y, z)
  }

  /**
   * The loadFloat32Vec3 method.
   * @return {Vec3} - Returns a Vec3.
   */
  loadFloat32Vec3() {
    const x = this.loadFloat32();
    const y = this.loadFloat32();
    const z = this.loadFloat32();
    return new Vec3$1(x, y, z)
  }

  /**
   * The loadFloat16Quat method.
   * @return {Quat} - Returns a Quat.
   */
  loadFloat16Quat() {
    const x = this.loadFloat16();
    const y = this.loadFloat16();
    const z = this.loadFloat16();
    const w = this.loadFloat16();
    return new Quat(x, y, z, w)
  }

  /**
   * The loadFloat32Quat method.
   * @return {Quat} - Returns a Quat.
   */
  loadFloat32Quat() {
    const x = this.loadFloat32();
    const y = this.loadFloat32();
    const z = this.loadFloat32();
    const w = this.loadFloat32();
    return new Quat(x, y, z, w)
  }

  /**
   * The loadRGBFloat32Color method.
   * @return {Color} - Returns a Color.
   */
  loadRGBFloat32Color() {
    const r = this.loadFloat32();
    const g = this.loadFloat32();
    const b = this.loadFloat32();
    return new Color(r, g, b)
  }

  /**
   * The loadRGBAFloat32Color method.
   * @return {Color} - Returns a Color.
   */
  loadRGBAFloat32Color() {
    const r = this.loadFloat32();
    const g = this.loadFloat32();
    const b = this.loadFloat32();
    const a = this.loadFloat32();
    return new Color(r, g, b, a)
  }

  /**
   * The loadRGBUInt8Color method.
   * @return {Color} - Returns a Color.
   */
  loadRGBUInt8Color() {
    const r = this.loadUInt8();
    const g = this.loadUInt8();
    const b = this.loadUInt8();
    return new Color(r / 255, g / 255, b / 255)
  }

  /**
   * The loadRGBAUInt8Color method.
   * @return {Color} - Returns a Color.
   */
  loadRGBAUInt8Color() {
    const r = this.loadUInt8();
    const g = this.loadUInt8();
    const b = this.loadUInt8();
    const a = this.loadUInt8();
    return new Color(r / 255, g / 255, b / 255, a / 255)
  }

  /**
   * The loadBox2 method.
   * @return {Box2} - Returns a Box2.
   */
  loadBox2() {
    return new Box2(this.loadFloat32Vec2(), this.loadFloat32Vec2())
  }

  /**
   * The loadBox3 method.
   * @return {Box3} - Returns a Box3.
   */
  loadBox3() {
    return new Box3$1(this.loadFloat32Vec3(), this.loadFloat32Vec3())
  }

  /**
   * The readPadd method.
   * @param {any} stride - The stride param.
   */
  readPadd(stride) {
    const padd = this.__byteOffset % stride;
    if (padd != 0) this.__byteOffset += stride - padd;
  }
}

/** Class representing a bin writer. */
class BinWriter {
  /**
   * Create a bin writer.
   * @param {number} dataSize - The dataSize value.
   */
  constructor(dataSize = 0) {
    this.__data = new ArrayBuffer(dataSize);
    this.__byteOffset = 0;
    this.__reserved = dataSize;
    this.__dataView = new DataView(this.__data);
  }

  /**
   * The pos method.
   * @return {any} - The return value.
   */
  pos() {
    return this.__byteOffset
  }

  /**
   * The seek method.
   * @param {number} byteOffset - The byteOffset value.
   */
  seek(byteOffset) {
    this.__byteOffset = byteOffset;
  }

  /**
   * The seekEnd method.
   */
  seekEnd() {
    this.__byteOffset = this.__reserved;
  }

  /**
   * The getBuffer method.
   * @return {ArrayBuffer} - Returns an array buffer.
   */
  getBuffer() {
    if (this.__data.byteLength == this.__byteOffset) {
      return this.__data
    } else {
      const unit8Array = new Uint8Array(this.__data);
      return unit8Array.slice(0, this.__byteOffset).buffer
    }
  }

  /**
   * The __grow method.
   * @private
   */
  __grow() {
    const newSize = (this.__reserved > 0 ? this.__reserved : 1) * 2;
    const data = new ArrayBuffer(newSize);
    const unit8Array = new Uint8Array(data);
    const old_unit8Array = new Uint8Array(this.__data);
    unit8Array.set(old_unit8Array);
    this.__data = data;
    this.__dataView = new DataView(this.__data);
    this.__reserved = newSize;
  }

  /**
   * The __reserve method.
   * @param {any} offset - The offset value.
   * @private
   */
  __reserve(offset) {
    if (this.__byteOffset + offset > this.__reserved) {
      this.__grow();
    }
  }

  /**
   * The __offset method.
   * @param {any} byteCount - The byteCount value.
   * @private
   */
  __offset(byteCount) {
    this.__byteOffset += byteCount;
    if (this.__byteOffset > this.__reserved) {
      this.__grow();
    }
  }

  /**
   * The writeUInt8 method.
   * @param {any} value - The value param.
   */
  writeUInt8(value) {
    this.__reserve(1);
    this.__dataView.setUint8(this.__byteOffset, value);
    this.__offset(1);
  }

  /**
   * The writeUInt16 method.
   * @param {any} value - The value param.
   */
  writeUInt16(value) {
    this.__reserve(2);
    this.__dataView.setUint16(this.__byteOffset, value, true);
    this.__offset(2);
  }

  /**
   * The writeUInt32 method.
   * @param {any} value - The value param.
   */
  writeUInt32(value) {
    this.__reserve(4);
    this.__dataView.setUint32(this.__byteOffset, value, true);
    this.__offset(4);
  }

  /**
   * The writeSInt32 method.
   * @param {any} value - The value param.
   */
  writeSInt32(value) {
    this.__reserve(4);
    this.__dataView.setInt32(this.__byteOffset, value, true);
    this.__offset(4);
  }

  /**
   * The writeFloat16 method.
   * @param {any} value - The value param.
   */
  writeFloat16(value) {
    const uint16 = Math.encode16BitFloat(value);
    this.writeUInt16(uint16);
  }

  /**
   * The writeFloat32 method.
   * @param {any} value - The value param.
   */
  writeFloat32(value) {
    this.__reserve(4);
    this.__dataView.setFloat32(this.__byteOffset, value, true);
    this.__offset(4);
  }

  /**
   * The writeUInt8Array method.
   * @param {any} value - The value param.
   * @param {boolean} writeSize - The writeSize value.
   */
  writeUInt8Array(value, writeSize = true) {
    const count = value.size ? value.size : value.length;
    this.__reserve(count + (writeSize ? 4 : 0));
    if (writeSize) this.writeUInt32(count);
    for (let i = 0; i < count; i++) {
      this.writeUInt8(value[i]);
    }
  }

  /**
   * The writeUInt16Array method.
   * @param {any} value - The value param.
   * @param {boolean} writeSize - The writeSize value.
   */
  writeUInt16Array(value, writeSize = true) {
    const count = value.size ? value.size : value.length;
    this.__reserve(count * 2 + (writeSize ? 4 : 0));
    if (writeSize) this.writeUInt32(count);
    for (let i = 0; i < count; i++) {
      this.writeUInt16(value[i]);
    }
  }

  /**
   * The writeUInt32Array method.
   * @param {any} value - The value param.
   * @param {boolean} writeSize - The writeSize value.
   */
  writeUInt32Array(value, writeSize = true) {
    const count = value.size ? value.size : value.length;
    this.__reserve(count * 4 + (writeSize ? 4 : 0));
    if (writeSize) this.writeUInt32(count);
    for (let i = 0; i < count; i++) {
      this.writeUInt32(value[i]);
    }
  }

  /**
   * The writeFloat32Array method.
   * @param {any} value - The value param.
   * @param {boolean} writeSize - The writeSize value.
   */
  writeFloat32Array(value, writeSize = true) {
    const count = value.size ? value.size : value.length;
    this.__reserve(count * 4 + (writeSize ? 4 : 0));
    if (writeSize) this.writeUInt32(count);
    for (let i = 0; i < count; i++) {
      this.writeFloat32(value[i]);
    }
  }

  /**
   * The writeStr method.
   * @param {any} str - The str value.
   * @param {boolean} writeSize - The writeSize value.
   */
  writeStr(str, writeSize = true) {
    const count = value.length;
    this.__reserve(count * 4 + (writeSize ? 4 : 0));
    if (writeSize) this.writeUInt32(count);
    for (let i = 0; i < count; i++) {
      this.writeFloat32(value.charCodeAt(i));
    }
  }

  /**
   * The writeSInt32Vec2 method.
   * @param {Vec2} value - The Vec2 to write.
   */
  writeSInt32Vec2(value) {
    this.writeSInt32(value.x);
    this.writeSInt32(value.y);
  }

  /**
   * The writeUInt32Vec2 method.
   * @param {Vec2} value - The Vec2 to write.
   */
  writeUInt32Vec2(value) {
    this.writeUInt32(value.x);
    this.writeUInt32(value.y);
  }

  /**
   * The writeFloat16Vec2 method.
   * @param {Vec2} value - The Vec2 to write.
   */
  writeFloat16Vec2(value) {
    this.writeFloat16(value.x);
    this.writeFloat16(value.y);
  }

  /**
   * The writeFloat32Vec2 method.
   * @param {Vec2} value - The Vec2 to write.
   */
  writeFloat32Vec2(value) {
    this.writeFloat32(value.x);
    this.writeFloat32(value.y);
  }

  /**
   * The writeFloat16Vec3 method.
   * @param {Vec3} value - The Vec3 to write.
   */
  writeFloat16Vec3(value) {
    this.writeFloat16(value.x);
    this.writeFloat16(value.y);
    this.writeFloat16(value.z);
  }

  /**
   * The writeFloat32Vec3 method.
   * @param {Vec3} value - The Vec3 to write.
   */
  writeFloat32Vec3(value) {
    this.writeFloat32(value.x);
    this.writeFloat32(value.y);
    this.writeFloat32(value.z);
  }

  /**
   * The writeFloat16Quat method.
   * @param {Quat} value - The Quat to write.
   */
  writeFloat16Quat(value) {
    this.writeFloat16(value.x);
    this.writeFloat16(value.y);
    this.writeFloat16(value.z);
    this.writeFloat16(value.w);
  }

  /**
   * The writeFloat32Quat method.
   * @param {Quat} value - The Quat to write.
   */
  writeFloat32Quat(value) {
    this.writeFloat32(value.x);
    this.writeFloat32(value.y);
    this.writeFloat32(value.z);
    this.writeFloat32(value.w);
  }

  /**
   * The writeRGBFloat32Color method.
   * @param {Color} value - The Color to write.
   */
  writeRGBFloat32Color(value) {
    this.writeFloat32(value.r);
    this.writeFloat32(value.g);
    this.writeFloat32(value.b);
  }

  /**
   * The writeRGBAFloat32Color method.
   * @param {Color} value - The Color to write.
   */
  writeRGBAFloat32Color(value) {
    this.writeFloat32(value.r);
    this.writeFloat32(value.g);
    this.writeFloat32(value.b);
    this.writeFloat32(value.a);
  }

  /**
   * The writeRGBUInt8Color method.
   * @param {Color} value - The Color to write.
   */
  writeRGBUInt8Color(value) {
    this.writeUInt8(value.r);
    this.writeUInt8(value.g);
    this.writeUInt8(value.b);
  }

  /**
   * The writeRGBAUInt8Color method.
   * @param {Color} value - The Color to write.
   */
  writeRGBAUInt8Color(value) {
    this.writeUInt8(value.r);
    this.writeUInt8(value.g);
    this.writeUInt8(value.b);
    this.writeUInt8(value.a);
  }

  /**
   * The writeBox2 method.
   * @param {Box2} value - The Box2 to write.
   */
  writeBox2(value) {
    this.writeFloat32Vec2(value.p0);
    this.writeFloat32Vec2(value.p1);
  }

  /**
   * The writeBox3 method.
   * @param {Box3} value - The Box3 to write.
   */
  writeBox3(value) {
    this.writeFloat32Vec3(value.p0);
    this.writeFloat32Vec3(value.p1);
  }

  /**
   * The writePadd method.
   * @param {any} size - The size value.
   */
  writePadd(size) {
    const bytes = size - this.__byteOffset;
    this.__reserve(bytes);
    this.__offset(bytes);
  }

  /**
   * The writeAlignment method.
   * @param {any} numBytes - The numBytes value.
   */
  writeAlignment(numBytes) {
    const bytes = this.__byteOffset % numBytes;
    if (bytes != 0) {
      this.__reserve(numBytes - bytes);
      this.__offset(numBytes - bytes);
    }
  }
}

/** Class representing a number parameter.
 * @extends Parameter
 */
class NumberParameter extends Parameter {
  /**
   * Create a number parameter.
   * @param {string} name - The name of the number parameter.
   * @param {number} value - The value of the parameter.
   * @param {any} range - The range value.
   * @param {any} step - The step value.
   */
  constructor(name, value = 0, range = undefined, step = undefined) {
    super(name, value, 'Number');
    // The value might not have a range.
    if (range && !Array.isArray(range))
      console.error('Range value must be an array of 2 numbers.');
    this.__range = range;
    this.__step = step;
  }

  /**
   * The setValue method.
   * @param {any} value - The value param.
   * @param {number} mode - The mode value.
   */
  setValue(value, mode) {
    if (mode == ValueSetMode.USER_SETVALUE) {
      if (this.__range) {
        value = Math.clamp(value, this.__range[0], this.__range[1]);
      }
      if (this.__step) {
        value = Math.round(value / this.__step) * this.__step;
      }
    }
    super.setValue(value, mode);
  }

  /**
   * The getValue method.
   * @param {number} mode - The mode value.
   * @return {any} - The return value.
   */
  getValue(mode) {
    // Still not sure if we should clamp the output.
    // if(this.__range) {
    //     return Math.clamp(super.getValue(), this.__range[0], this.__range[1]);
    // }
    return super.getValue(mode)
  }

  /**
   * The getRange method.
   * @return {any} - The return value.
   */
  getRange() {
    return this.__range
  }

  /**
   * The setRange method.
   * @param {any} range - The range value.
   * @return {any} - The return value.
   */
  setRange(range) {
    // Should be an array [0, 20]
    this.__range = range;
    return this
  }

  /**
   * The getStep method.
   * @return {any} - The return value.
   */
  getStep() {
    return this.__step
  }

  /**
   * The setStep method.
   * @param {any} step - The step value.
   * @return {any} - The return value.
   */
  setStep(step) {
    this.__step = step;
    return this
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    const j = super.toJSON(context, flags);
    if (this.__range) j.range = this.__range;
    if (this.__step) j.step = this.__step;
    return j
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    super.fromJSON(j, context, flags);
    if (j.range) this.__range = j.range;
    if (j.step) this.__step = j.step;
  }

  /**
   * The readBinary method.
   * @param {object} reader - The reader value.
   * @param {object} context - The context value.
   */
  readBinary(reader, context) {
    const value = reader.loadFloat32();
    this.setValue(value, ValueSetMode.DATA_LOAD);
  }

  // ////////////////////////////////////////
  // Clone

  /**
   * The clone method constructs a new number parameter, copies its values
   * from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {NumberParameter} - Returns a new number parameter.
   */
  clone(flags) {
    const clonedParam = new NumberParameter(this.__name, this.__value);
    clonedParam.__range = this.__range;
    clonedParam.__step = this.__step;
    return clonedParam
  }
}

sgFactory.registerClass('NumberParameter', NumberParameter);
sgFactory.registerClass('Property_SInt32', NumberParameter);
sgFactory.registerClass('Property_UInt32', NumberParameter);
sgFactory.registerClass('Property_Float32', NumberParameter);

/** Class representing a multi choice parameter.
 * @extends NumberParameter
 */
class MultiChoiceParameter extends NumberParameter {
  /**
   * Create a multi choice parameter.
   * @param {string} name - The name of the multi choice parameter.
   * @param {number} index - The index value.
   * @param {any} choices - The choices value.
   */
  constructor(name, index, choices) {
    super(name, index, [0, choices.length], 1);
    this.choices = choices;
  }

  /**
   * The getChoices method.
   * @return {any} - The return value.
   */
  getChoices() {
    return this.choices
  }

  /**
   * The setValue method.
   * @param {any} value - The value param.
   * @param {number} mode - The mode value.
   */
  setValue(value, mode) {
    if (typeof value === 'string') {
      super.setValue(this.choices.indexOf(value), mode);
    } else {
      super.setValue(value, mode);
    }
  }
}

/** Class representing a boolean parameter.
 * @extends Parameter
 */
class BooleanParameter extends Parameter {
  /**
   * Create a boolean parameter.
   * @param {string} name - The name of the boolean parameter.
   * @param {any} value - The value of the parameter.
   */
  constructor(name, value) {
    super(name, value, 'Boolean');
  }

  /**
   * The clone method constructs a new boolean parameter,
   * copies its values from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {BooleanParameter} - Returns a new cloned boolean parameter.
   */
  clone(flags) {
    const clonedParam = new BooleanParameter(this.__name, this.__value);
    return clonedParam
  }
}

sgFactory.registerClass('BooleanParameter', BooleanParameter);

/** Class representing a Vec2 parameter.
 * A Vec2 represents a two-dimensional coordinate.
 * @extends Parameter
 */
class Vec2Parameter extends Parameter {
  /**
   * Create a Vec2 parameter.
   * @param {string} name - The name of the Vec2 parameter.
   * @param {any} value - The value of the parameter.
   * @param {any} range - The range value.
   */
  constructor(name, value, range = undefined) {
    super(name, value ? value : new Vec2(), 'Vec2');
    this.__range = range;
  }

  /**
   * The getRange method.
   * @return {any} - The return value.
   */
  getRange() {
    // Range should be an array of 2 vec2s. [min(x,y), max(x,y)]
    return this.__range
  }

  /**
   * The __setRange method.
   * @param {any} range - The range value.
   * @private
   */
  __setRange(range) {
    // Should be an array [0, 20]
    this.__range = range;
    this.rangeChanged.emit();
  }

  /**
   * The clone method constructs a new Vec2 parameter, copies its values
   * from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {Vec2Parameter} - Returns a new Vec2 parameter.
   */
  clone(flags) {
    const clonedParam = new Vec2Parameter(this.__name, this.__value.clone());
    return clonedParam
  }
}

/** Class representing a Vec3 parameter.
 * A Vec3 represents a three-dimensional coordinate.
 * @extends Parameter
 */
class Vec3Parameter extends Parameter {
  /**
   * Create a Vec3 parameter.
   * @param {string} name - The name of the Vec3 parameter.
   * @param {any} value - The value of the parameter.
   * @param {any} range - The range value.
   */
  constructor(name, value, range = undefined) {
    super(name, value ? value : new Vec3$1(), 'Vec3');
  }

  /**
   * The clone method constructs a new Vec3 parameter, copies its values
   * from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {Vec3Parameter} - Returns a new Vec3 parameter.
   */
  clone(flags) {
    const clonedParam = new Vec3Parameter(this.__name, this.__value.clone());
    return clonedParam
  }
}

/** Class representing a Vec4 parameter.
 * A Vec4 represents a four-dimensional coordinate.
 * @extends Parameter
 */
class Vec4Parameter extends Parameter {
  /**
   * Create a Vec4 parameter.
   * @param {string} name - The name of the Vec4 parameter.
   * @param {any} value - The value of the parameter.
   */
  constructor(name, value) {
    super(name, value ? value : new Vec4$1(), 'Vec4');
  }

  /**
   * The clone method constructs a new Vec4 parameter, copies its values
   * from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {Vec4Parameter} - Returns a new Vec4 parameter.
   */
  clone(flags) {
    const clonedParam = new Vec4Parameter(this.__name, this.__value.clone());
    return clonedParam
  }
}

/** Class representing a color parameter.
 * @extends Parameter
 */
class ColorParameter extends Parameter {
  /**
   * Create a color parameter.
   * @param {string} name - The name of the color parameter.
   * @param {any} value - The value of the parameter.
   */
  constructor(name, value) {
    super(name, value ? value : new Color(), 'Color');
  }

  /**
   * The readBinary method.
   * @param {object} reader - The reader value.
   * @param {object} context - The context value.
   */
  readBinary(reader, context) {
    const value = reader.loadRGBAFloat32Color();
    // If the value is in linear space, then we should convert it to gamma space.
    // Note: !! this should always be done in preprocessing...
    value.applyGamma(2.2);

    this.setValue(value, ValueSetMode.DATA_LOAD);
  }

  /**
   * The clone method constructs a new color parameter,
   * copies its values from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {ColorParameter} - Returns a new cloned color parameter.
   */
  clone(flags) {
    const clonedParam = new ColorParameter(this.__name, this.__value.clone());
    return clonedParam
  }
}

sgFactory.registerClass('ColorParameter', ColorParameter);

/** Class representing a Mat3 (3x3 matrix) parameter.
 * @extends Parameter
 */
class Mat3Parameter extends Parameter {
  /**
   * Create a Mat3 parameter.
   * @param {string} name - The name of the Mat3 parameter.
   * @param {any} value - The value of the parameter.
   */
  constructor(name, value) {
    super(name, value ? value : new Mat3$1(), 'Mat3');
  }

  /**
   * The clone method constructs a new Mat3 parameter,
   * copies its values from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {Mat3Parameter} - Returns a new cloned Mat3 parameter.
   */
  clone(flags) {
    const clonedParam = new Mat3Parameter(this.__name, this.__value.clone());
    return clonedParam
  }
}

/** Class representing a Mat4 (4x4 matrix) parameter.
 * @extends Parameter
 */
class Mat4Parameter extends Parameter {
  /**
   * Create a Mat4 parameter.
   * @param {string} name - The name of the Mat4 parameter.
   * @param {any} value - The value of the parameter.
   */
  constructor(name, value) {
    super(name, value ? value : new Mat4(), 'Mat4');
  }

  /**
   * The clone method constructs a new Mat4 parameter,
   * copies its values from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {Mat4Parameter} - Returns a new cloned Mat4 parameter.
   */
  clone(flags) {
    const clonedParam = new Mat4Parameter(this.__name, this.__value.clone());
    return clonedParam
  }
}

/** Class representing a Xfo transform parameter.
 * @extends Parameter
 */
class XfoParameter extends Parameter {
  /**
   * Create a Xfo parameter.
   * @param {string} name - The name of the Xfo parameter.
   * @param {any} value - The value of the parameter.
   */
  constructor(name, value) {
    super(name, value ? value : new Xfo(), 'Xfo');
  }

  /**
   * The clone method constructs a new Xfo parameter, copies its values
   * from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {XfoParameter} - Returns a new Xfo parameter.
   */
  clone(flags) {
    const clonedParam = new XfoParameter(this.__name, this.__value.clone());
    return clonedParam
  }
}

/** Class representing an image parameter.
 * @extends Parameter
 */
class ImageParameter extends Parameter {
  /**
   * Create an image parameter.
   * @param {string} name - The name of the image parameter.
   * @param {any} value - The value of the parameter.
   */
  constructor(name, value) {
    super(name, value, 'BaseImage');
    this.valueParameterValueChanged = new Signal();
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    const j = super.toJSON(context, flags);
    if (this.__value) {
      j.imageType = sgFactory.getClassName(this.__value);
    }
    return j
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  fromJSON(j, context, flags) {
    if (j.imageType) {
      this.__value = sgFactory.constructClass(j.imageType);
    }
    return super.fromJSON(j, context, flags)
  }

  // ////////////////////////////////////////
  // Clone

  /**
   * The clone method constructs a new image parameter,
   * copies its values from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {ImageParameter} - Returns a new cloned image parameter.
   */
  clone(flags) {
    const clonedParam = new ImageParameter(this.__name, this.__value);
    return clonedParam
  }
}

/** Class representing a string parameter.
 * @extends Parameter
 */
class StringParameter extends Parameter {
  /**
   * Create a string parameter.
   * @param {string} name - The name of the material color parameter.
   * @param {any} value - The value of the parameter.
   */
  constructor(name, value = '') {
    super(name, value, 'String');
    this.multiLine = false;
  }

  /**
   * The setMultiLine method.
   * @param {any} multiLine - The multiLine value.
   */
  setMultiLine(multiLine) {
    this.multiLine = multiLine;
  }

  /**
   * The getMultiLine method.
   * @return {any} - The return value.
   */
  getMultiLine() {
    return this.multiLine
  }

  /**
   * The readBinary method.
   * @param {object} reader - The reader value.
   * @param {object} context - The context value.
   */
  readBinary(reader, context) {
    const value = reader.loadStr();
    this.setValue(value, ValueSetMode.DATA_LOAD);
  }

  /**
   * The clone method constructs a new string parameter, copies its values
   * from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {StringParameter} - Returns a new string parameter.
   */
  clone(flags) {
    const clonedParam = new StringParameter(this.__name, this.__value);
    return clonedParam
  }
}

sgFactory.registerClass('StringParameter', StringParameter);
sgFactory.registerClass('Property_String', StringParameter);

/** Class representing a code parameter.
 * @extends StringParameter
 */
class CodeParameter extends StringParameter {
  /**
   * Create a code parameter.
   * @param {string} name - The name of the code parameter.
   * @param {any} value - The value of the parameter.
   */
  constructor(name, value = '') {
    super(name, value, 'String');
    this.lang = 'js';
  }

  /**
   * The setLanguage method.
   * @param {any} lang - The language value.
   */
  setLanguage(lang) {
    this.lang = lang;
  }

  /**
   * The getLanguage method.
   * @return {any} - Returns the language.
   */
  getLanguage() {
    return this.lang
  }

  /**
   * The clone method constructs a new code parameter,
   * copies its values from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {CodeParameter} - Returns a new cloned code parameter.
   */
  clone(flags) {
    const clonedParam = new CodeParameter(this.__name, this.__value);
    return clonedParam
  }
}

sgFactory.registerClass('CodeParameter', CodeParameter);

/** Class representing a file path parameter.
 * @extends Parameter
 */
class FilePathParameter extends Parameter {
  /**
   * Create a file path parameter.
   * @param {string} name - The name of the file path parameter.
   * @param {any} exts - The exts value.
   */
  constructor(name, exts) {
    super(name, '', 'FilePath');

    this.fileUpdated = new Signal();
    if (exts) this.setSupportedExts(exts);
  }

  /**
   * The setSupportedExts method.
   * @param {any} exts - The exts value.
   */
  setSupportedExts(exts) {
    // Note: supported Extensions should be in the format ext1|exts2|ext3
    this.__reextensions = new RegExp('\\.(' + exts + ')$', 'i');
  }

  /**
   * The getFilepath method.
   * @return {any} - The return value.
   */
  getFilepath() {
    if (this.__file) {
      return resourceLoader.getFilepath(this.__file.id)
    }
    return ''
  }

  /**
   * The setFilepath method.
   * @param {any} filePath - The filePath value.
   * @param {number} mode - The mode value.
   */
  setFilepath(filePath, mode) {
    const resourceId = resourceLoader.resolveFilePathToId(filePath);
    if (!resourceId) {
      console.warn('Resource unavailable:' + filePath);
      return
    }
    this.setValue(resourceId, mode);
  }

  /**
   * The getFilename method.
   * @return {any} - The return value.
   */
  getFilename() {
    if (this.__file) {
      return this.__file.name
    }
  }

  /**
   * The getExt method.
   * @return {any} - The return value.
   */
  getExt() {
    const filename = this.getFilename();
    const suffixSt = filename.lastIndexOf('.');
    if (suffixSt != -1) return filename.substring(suffixSt).toLowerCase()
  }

  /**
   * The getStem method.
   * @return {any} - The return value.
   */
  getStem() {
    const filename = this.getFilename();
    if (filename) {
      const parts = filename.split('.');
      if (parts.length == 2) return parts[0]
      else return filename
    }
  }

  /**
   * The getFileFolder method.
   * @return {any} - The return value.
   */
  getFileFolder() {
    if (this.__file) {
      if (this.__file.parent) return resourceLoader.getFile(this.__file.parent)
      return resourceLoader.getRootFolder()
    }
  }

  /**
   * The getFileFolderPath method.
   * @return {any} - The return value.
   */
  getFileFolderPath() {
    const filePath = this.getFilepath();
    if (filePath) {
      return filePath.substring(0, filePath.lastIndexOf('/')) + '/'
    }
  }

  /**
   * The getFile method.
   * @return {any} - The return value.
   */
  getFile() {
    return this.__file
  }

  /**
   * The getFileDesc method.
   * @return {any} - The return value.
   */
  getFileDesc() {
    // Can we settle on a convention?
    // console.warn("Deprecated method: 'getFileDesc'. Please use 'getFile'")
    return this.__file
  }

  /**
   * The setUrl method.
   * @param {any} url - The url value.
   * @param {number} mode - The mode value.
   */
  setUrl(url, name, mode = ValueSetMode.USER_SETVALUE) {
    const parts = url.split('/');
    if (!name)
      name = parts[parts.length - 1];

    this.__value = name;
    this.__file = {
      id: url,
      name,
      url,
    };

    if (
      mode == ValueSetMode.USER_SETVALUE ||
      mode == ValueSetMode.REMOTEUSER_SETVALUE
    ) {
      this.__flags |= ParamFlags.USER_EDITED;
    }
    this.valueChanged.emit(mode);
  }

  /**
   * The getUrl method.
   * @return {any} - The return value.
   */
  getUrl() {
    return this.__file ? this.__file.url : undefined
  }

  /**
   * The setDirty method.
   * @param {any} cleanerFn - The cleanerFn value.
   */
  setDirty(cleanerFn) {
    throw new Error('Cannot drive a filepath param from an oporator')
  }

  /**
   * The setValue method.
   * @param {any} value - The value param.
   * @param {number} mode - The mode value.
   * @return {boolean} - The return value.
   */
  setValue(value, mode = ValueSetMode.USER_SETVALUE) {
    // 0 == normal set. 1 = changed via cleaner fn, 2 = change by loading/cloning code.
    if (value == undefined) {
      throw new Error('Invalid value for setValue.')
    }
    if (value.indexOf('.') > 0) {
      console.warn(
        'Deprecation warning for setValue. setValue should now only take a file id, not a path.'
      );
      return this.setFilepath(value, mode)
    }
    // Note: equality tests only work on simple types.
    // Important here because file changes cause reloads..
    if (value == this.__value) {
      return
    }

    // Note: the file path is selected by using the file browser
    // For now it can return an aboslute path(within the project)
    // and we convert to relative when we save.
    const resourceId = value;
    if (!resourceLoader.resourceAvailable(resourceId)) {
      console.warn('Resource unavailable:' + resourceId);
      return
    }

    const file = resourceLoader.getFile(resourceId);
    if (this.__reextensions && !this.__reextensions.test(file.name)) {
      console.warn('Unsupported file type:' + file.name);
      return false
    }

    this.__value = value;
    this.__file = file;

    resourceLoader.fileUpdated.connect(id => {
      if (id == this.__value) {
        this.__file = resourceLoader.getFile(this.__value);
        this.fileUpdated.emit();
      }
    });

    if (mode == ValueSetMode.USER_SETVALUE)
      this.__flags |= ParamFlags.USER_EDITED;
    this.valueChanged.emit(mode);
  }
  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    if ((this.__flags & ParamFlags.USER_EDITED) == 0) return
    const j = {};
    if (this.__file) {
      j.value = this.__file.id;
      // For cases where the file ID changed.
      // e.g. if a file was deleted from the system, and
      // then re-added
      j.filepath = resourceLoader.getFilepath(this.__file.id);
    }
    return j
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    if (j.value) {
      if (j.value.indexOf('.') > 0) {
        this.setFilepath(j.value, ValueSetMode.DATA_LOAD);
        return
      } else {
        if (resourceLoader.resourceAvailable(j.value)) {
          this.setValue(j.value, ValueSetMode.DATA_LOAD);
          this.__flags |= ParamFlags.USER_EDITED;
          return
        }
      }
    }
    if (j.filepath) {
      const resourceId = resourceLoader.resolveFilePathToId(j.filepath);
      if (!resourceId) {
        console.warn('Resource unavailable:' + j.filepath);
      } else {
        this.setValue(resourceId, ValueSetMode.DATA_LOAD);
        return
      }
    }
  }

  // ////////////////////////////////////////
  // Clone and Destroy

  /**
   * The clone method constructs a new file path parameter,
   * copies its values from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {FilePathParameter} - Returns a new cloned file path parameter.
   */
  clone(flags) {
    const clonedParam = new FilePathParameter(this.__name);
    clonedParam.__file = this.__file;
    return clonedParam
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    super.destroy();
  }
}

/** Class representing a list parameter.
 * @extends Parameter
 */
class ListParameter extends Parameter {
  /**
   * Create a list parameter.
   * @param {string} name - The name of the list parameter.
   * @param {any} dataType - The dataType value.
   */
  constructor(name, dataType) {
    super(name, []);
    this.__dataType = dataType;
    this.elementAdded = new Signal();
    this.elementRemoved = new Signal();
  }

  /**
   * The __filter method.
   * @param {any} item - The item value.
   * @return {boolean} - The return value.
   * @private
   */
  __filter(item) {
    return true
  }

  /**
   * The getCount method.
   * @return {any} - The return value.
   */
  getCount() {
    return this.__value.length
  }

  /**
   * The getElement method.
   * @param {number} index - The index value.
   * @return {any} - The return value.
   */
  getElement(index) {
    return this.__value[index]
  }

  /**
   * The setElement method.
   * @param {number} index - The index value.
   * @param {any} value - The value value.
   */
  setElement(index, value) {
    this.__value[index] = value;
    this.valueChanged.emit(ValueSetMode.USER_SETVALUE);
  }

  /**
   * The addElement method.
   * @param {any} elem - The elem value.
   * @return {any} - The return value.
   */
  addElement(elem) {
    if (elem == undefined) elem = new this.__dataType();
    else {
      if (!this.__filter(elem)) return
    }

    this.__value.push(elem);
    this.__flags |= ParamFlags.USER_EDITED;
    this.elementAdded.emit(elem, this.__value.length - 1);
    this.valueChanged.emit(ValueSetMode.USER_SETVALUE);
    return elem
  }

  /**
   * The removeElement method.
   * @param {number} index - The index value.
   */
  removeElement(index) {
    const elem = this.__value[index];
    this.__value.splice(index, 1);
    this.__flags |= ParamFlags.USER_EDITED;
    this.elementRemoved.emit(elem, index);
    this.valueChanged.emit(ValueSetMode.USER_SETVALUE);
  }

  /**
   * The insertElement method.
   * @param {any} index - The index value.
   * @param {any} elem - The elem value.
   */
  insertElement(index, elem) {
    if (!this.__filter(elem)) return
    this.__value.splice(index, 0, elem);
    // this.setValue(this.__value);
    this.__flags |= ParamFlags.USER_EDITED;
    this.elementAdded.emit(elem, index);
    this.valueChanged.emit(ValueSetMode.USER_SETVALUE);
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    if ((this.__flags & ParamFlags.USER_EDITED) == 0) return
    const items = [];
    for (const p of this.__value) {
      if (typeof this.__dataType === 'string') items.push(p);
      else items.push(p.toJSON(context, flags));
    }
    return {
      items,
    }
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    if (j.items == undefined) {
      console.warn('Invalid Parameter JSON');
      return
    }
    // Note: JSON data is only used to store user edits, so
    // parameters loaed from JSON are considered user edited.
    this.__flags |= ParamFlags.USER_EDITED;

    this.__value = [];
    for (let i = 0; i < j.items.length; i++) {
      let elem;
      if (typeof this.__dataType === 'string') {
        elem = j.items[i];
      } else {
        elem = new this.__dataType();
        elem.fromJSON(j.items[i], context);
      }
      this.__value.push(elem);
      this.elementAdded.emit(elem, this.__value.length - 1);
    }
    this.valueChanged.emit(ValueSetMode.DATA_LOAD);
  }

  // ////////////////////////////////////////
  // Clone and Destroy

  /**
   * The clone method constructs a new list parameter, copies its values
   * from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {ListParameter} - Returns a new list parameter.
   */
  clone(flags) {
    const clonedValue = this.__value.slice(0);
    const clonedParam = new ListParameter(this.__name, this.__dataType);
    clonedParam.setValue(clonedValue);
    return clonedParam
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    for (let i = 0; i < this.__value.length; i++) {
      if (this.__value[i] instanceof Parameter) this.__value[i].destroy();
      this.removeElement(i);
    }
  }
}

/** Class representing a struct parameter.
 * @extends Parameter
 */
class StructParameter extends Parameter {
  /**
   * Create a struct parameter.
   * @param {string} name - The name of the struct parameter.
   */
  constructor(name) {
    super(name, {}, 'Struct');
    this.__members = [];
  }

  /**
   * The _addMember method.
   * @param {any} parameter - The parameter value.
   * @return {any} - The return value.
   * @private
   */
  _addMember(parameter) {
    this.__value[parameter.getName()] = parameter.getValue();
    parameter.valueChanged.connect(() => {
      this.__value[parameter.getName()] = parameter.getValue();
    });
    this.__members.push(parameter);
    this.__flags |= ParamFlags.USER_EDITED;
    this.valueChanged.emit();
    return parameter
  }

  /**
   * The getParameter method.
   * @param {string} name - The parameter name.
   * @return {any} - The return value.
   */
  getParameter(name) {
    for (const p of this.__members) {
      if (p.getName() == name) return p
    }
  }

  /**
   * The getMember method.
   * @param {string} name - The parameter name.
   * @return {any} - The return value.
   */
  getMember(name) {
    return this.getParameter(name)
  }

  /**
   * The getMemberNames method.
   * @return {any} - The return value.
   */
  getMemberNames() {
    const names = [];
    for (let i = 0; i < this.__members.length; i++) {
      const member = this.__members[i];
      if (member != null) names[i] = member.getName();
    }
    return names
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    if ((this.__flags & ParamFlags.USER_EDITED) == 0) return
    const members = [];
    for (const p of this.__members) members.push(p.toJSON(context, flags));
    return {
      members,
    }
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    if (j.members == undefined) {
      console.warn('Invalid Parameter JSON');
      return
    }
    // Note: JSON data is only used to store user edits, so
    // parameters loaed from JSON are considered user edited.
    this.__flags |= ParamFlags.USER_EDITED;

    for (let i = 0; i < j.members.length; i++) {
      if (j.members[i]) {
        this.__members[i].fromJSON(j.members[i], context);
      }
    }
  }

  // ////////////////////////////////////////
  // Destroy

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    super.destroy();
    for (const p of this.__members) p.destroy();
  }
}

/** Class representing a tree item parameter.
 * @extends Parameter
 */
class TreeItemParameter extends Parameter {
  /**
   * Create a tree item parameter.
   * @param {string} name - The name of the tree item parameter.
   * @param {any} filterFn - The filterFn value.
   */
  constructor(name, filterFn = undefined) {
    super(name, undefined, 'TreeItem');
    this.__filterFn = filterFn;
    this.treeItemGlobalXfoChanged = new Signal();
  }

  /**
   * The setOwner method.
   * @param {any} owner - The owner value.
   */
  setOwner(owner) {
    this.__owner = owner;
  }

  /**
   * The getOwner method.
   * @return {any} - The return value.
   */
  getOwner() {
    return this.__owner
  }

  /**
   * The setFilterFn method.
   * @param {any} flterFn - The flterFn value.
   */
  setFilterFn() {
    this.__filterFn = filterFn;
  }

  /**
   * The getFilterFn method.
   * @return {any} - The return value.
   */
  getFilterFn() {
    return this.__filterFn
  }

  /**
   * The setValue method.
   * @param {any} treeItem - The treeItem value.
   * @param {number} mode - The mode value.
   * @return {boolean} - The return value.
   */
  setValue(treeItem, mode = ValueSetMode.USER_SETVALUE) {
    // 0 == normal set. 1 = changed via cleaner fn, 2=change by loading/cloning code.
    if (this.__filterFn && !this.__filterFn(treeItem)) return false
    if (this.__value !== treeItem) {
      if (this.__value) {
        this.__value.globalXfoChanged.disconnect(
          this.treeItemGlobalXfoChanged.emit
        );
      }
      this.__value = treeItem;
      if (this.__value) {
        this.__value.globalXfoChanged.connect(
          this.treeItemGlobalXfoChanged.emit
        );
      }
      if (
        mode == ValueSetMode.USER_SETVALUE ||
        mode == ValueSetMode.REMOTEUSER_SETVALUE
      ) {
        this.__flags |= ParamFlags.USER_EDITED;
      }
      this.valueChanged.emit(mode);
    }
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    if ((this.__flags & ParamFlags.USER_EDITED) == 0) return
    return {
      value: context.makeRelative(this.__value.getPath()),
    }
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    if (j.value == undefined) {
      console.warn('Invalid Parameter JSON');
      return
    }
    context.resolvePath(
      j.value,
      treeItem => {
        this.setValue(treeItem);
      },
      () => {
        console.warn(
          'Unable to resolve tree item parameter value:' + pj.paramPath
        );
      }
    );
    this.__flags |= ParamFlags.USER_EDITED;
  }

  // ////////////////////////////////////////
  // Clone and Destroy

  /**
   * The clone method constructs a new tree item parameter, copies its values
   * from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {TreeItemParameter} - Returns a new tree item parameter.
   */
  clone(flags) {
    const clonedParam = new TreeItemParameter(this.__name, this.__filterFn);
    return clonedParam
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    if (this.__value) {
      this.__value.parameterValueChanged.disconnect(
        this.valueParameterValueChanged.emit
      );
    }
  }
}

/** Class representing an item set parameter.
 * @extends Parameter
 * @private
 */
class ItemSetParameter extends Parameter {
  /**
   * Create an item set parameter.
   * @param {string} name - The name of the item set parameter.
   * @param {any} filterFn - The filterFn value.
   */
  constructor(name, filterFn) {
    super(name, undefined, 'BaseItem');
    this.__items = new Set();
    this.__filterFn = filterFn; // Note: the filter Fn indicates that users will edit the set.
    this.itemAdded = new Signal();
    this.itemRemoved = new Signal();
  }

  /**
   * The setFilterFn method.
   * @param {any} filterFn - The filterFn value.
   */
  setFilterFn(filterFn) {
    this.__filterFn = filterFn;
  }

  /**
   * The getFilterFn method.
   * @return {any} - The return value.
   */
  getFilterFn() {
    return this.__filterFn
  }

  /**
   * The getItem method.
   * @param {number} index - The index param.
   * @return {any} - The return value.
   */
  getItem(index) {
    return Array.from(this.__items)[index]
  }

  /**
   * The addItem method.
   * @param {any} item - The item value.
   * @param {boolean} emit - The emit value.
   * @return {boolean} - The return value.
   */
  addItem(item, emit = true) {
    if (this.__filterFn && !this.__filterFn(item)) {
      console.warn('ItemSet __filterFn rejecting item:', item.getPath());
      return false
    }
    this.__items.add(item);
    const index = Array.from(this.__items).indexOf(item);
    this.itemAdded.emit(item, index);
    if (emit) this.valueChanged.emit();
    return index
  }

  /**
   * The addItems method.
   * @param {any} items - The index value.
   * @param {boolean} emit - The emit value.
   */
  addItems(items, emit = true) {
    items.forEach(item => this.addItem(item, false));
    if (emit) this.valueChanged.emit();
  }

  /**
   * The removeItem method.
   * @param {any} index - The index value.
   * @param {boolean} emit - The emit param.
   * @return {any} - The return value.
   */
  removeItem(index, emit = true) {
    const item = Array.from(this.__items)[index];
    this.__items.delete(item);
    this.itemRemoved.emit(item, index);
    if (emit) this.valueChanged.emit();
    return item
  }

  /**
   * The setItems method.
   * @param {any} items - The item param.
   * @param {boolean} emit - The emit param.
   */
  setItems(items, emit = true) {
    for (let i = this.__items.length - 1; i >= 0; i--) {
      const item = this.__items[i];
      if (!items.has(item)) {
        this.removeItem(item, false);
      }
    }
    for (const item of items) {
      if (!this.__items.has(item)) {
        this.addItem(item, false);
      }
    }
    if (emit) this.valueChanged.emit();
  }

  /**
   * The clearItems method.
   * @param {boolean} emit - The emit value.
   */
  clearItems(emit = true) {
    this.__items.clear();
    if (emit) this.valueChanged.emit();
  }

  /**
   * The getNumItems method.
   * @return {any} - The return value.
   */
  getNumItems() {
    return Array.from(this.__items).length
  }

  /**
   * The getValue method.
   * @return {any} - The return value.
   */
  getValue() {
    return this.__items
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {any} - The return value.
   */
  toJSON(context, flags) {
    return {}
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {}

  // ////////////////////////////////////////
  // Clone

  /**
   * The clone method constructs a item set new parameter, copies its values
   * from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {ItemSetParameter} - Returns a new item set parameter.
   */
  clone(flags) {
    const clonedParam = new ItemSetParameter(this.__name, this.__filterFn);
    return clonedParam
  }
}

/** Class representing a proxy parameter. Proxies are used to connect 
 * a parameter on one object with another. An existing parameter is
 * replaced with a proxy that binds to a parameter on another object.
 * @extends Parameter
 * @private
 */
class ProxyParameter extends Parameter {
  /**
   * Create a proxy parameter.
   * @param {string} name - The name of the proxy parameter.
   * @param {Parameter} sourceParameter - The source parameter to proxy.
   */
  constructor(name, sourceParameter) {
    super(name, undefined, sourceParameter.getDataType());
    this.setSourceParameter(sourceParameter);
  }

  /**
   * The setValue method.
   * @param {any} value - The value param.
   * @param {number} mode - The mode value.
   */
  setSourceParameter(sourceParameter) {
    this.sourceParameter = sourceParameter;
    this.sourceParameter.valueChanged.connect(this.__proxyValueChanged.bind(this));
  }

  __proxyValueChanged(mode) {
    this.valueChanged.emit(mode);
  }


  /**
   * The getDataType method.
   * @return {any} - The return value.
   */
  getDataType() {
    return this.sourceParameter.getDataType()
  }


  /**
   * The setValue method.
   * @param {any} value - The value param.
   * @param {number} mode - The mode value.
   */
  setValue(value, mode) {
    // this.sourceParameter.setValue(value, mode)
  }

  /**
   * The getValue method.
   * @param {number} mode - The mode value.
   * @return {any} - The return value.
   */
  getValue(mode) {
    return this.sourceParameter.getValue(mode)
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    const j = super.toJSON(context, flags);
    if (this.sourceParameter) j.sourceParameter = this.sourceParameter.getPath();
    return j
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    super.fromJSON(j, context, flags);
    if (j.sourceParameter) {
      // Note: the tree should have fully loaded by the time we are loading operators
      // even new items and groups should have been created. Operators and state machines
      // are loaded last.
      context.resolvePath(
        j.sourceParameter,
        param => {
          this.setSourceParameter(param);
        },
        reason => {
          console.warn(
            "Error loading Proxy Param: '" +
              this.getName() +
              "'. Unable to connect to:" +
              j.sourceParameter
          );
        }
      );
    }
    if (j.range) this.sourceParameter = j.range;
    if (j.step) this.__step = j.step;
  }

  // ////////////////////////////////////////
  // Clone

  /**
   * The clone method constructs a new number parameter, copies its values
   * from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {ProxyParameter} - Returns a new number parameter.
   */
  clone(flags, context) {
    const clonedParam = new ProxyParameter(this.__name, this.__value);
    if (this.sourceParameter) {
      this.connectToClonedSourceParam(context);
    }
    return clonedParam
  }

  /**
   * During cloning, we need to reconnect references to other items in the tree
   * These other items may/may not be being cloned also, and so we need to request
   * the context that it resolve the item.
   * @param {CloneContext} context - The context object htat can resolve references.
   */
  connectToClonedSourceParam(context) {
    context.resolveClonedItem(
      this.sourceParameter,
      param => {
        clonedParam.setSourceParameter(param);
      },
      reason => {
        console.warn(
          "Error cloning Proxy Param: '" +
            this.getName() +
            "'. Unable to connect to:" +
            j.sourceParameter
        );
      }
    );
  }
}

sgFactory.registerClass('ProxyParameter', ProxyParameter);

/** Class representing a geometry parameter.
 * @extends Parameter
 * @private
 */
class GeometryParameter extends Parameter {
  /**
   * Create a geometry parameter.
   * @param {string} name - The name of the color parameter.
   * @param {any} value - The value of the parameter.
   */
  constructor(name, value) {
    super(name, undefined, 'Geometry');
    this.boundingBoxDirtied = new Signal();
    this.setValue(value);
  }

  /**
   * The setValue method.
   * @param {any} geom - The geom value.
   * @param {any} mode - The mode value.
   */
  setValue(geom, mode = ValueSetMode.USER_SETVALUE) {
    // 0 == normal set. 1 = changed via cleaner fn, 2 = change by loading/cloning code.
    if (this.__value !== geom) {
      if (this.__value) {
        this.__value.boundingBoxDirtied.disconnect(this.boundingBoxDirtied.emit);
      }
      this.__value = geom;
      if (this.__value) {
        this.__value.boundingBoxDirtied.connect(this.boundingBoxDirtied.emit);
      }

      if (
        mode == ValueSetMode.USER_SETVALUE ||
        mode == ValueSetMode.REMOTEUSER_SETVALUE
      ) {
        this.__flags |= ParamFlags.USER_EDITED;
      }

      // During the cleaning process, we don't want notifications.
      if (mode != ValueSetMode.OPERATOR_SETVALUE) this.valueChanged.emit(mode);
    }
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    return super.toJSON(context, flags)
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  fromJSON(j, context, flags) {
    return super.fromJSON(j, context, flags)
  }

  // ////////////////////////////////////////
  // Clone and Destroy

  /**
   * The clone method constructs a new geometry parameter, copies its values
   * from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {GeometryParameter} - Returns a new geometry parameter.
   */
  clone(flags) {
    const clonedParam = new GeometryParameter(this.__name, this.__value);
    return clonedParam
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    // Note: some parameters hold refs to geoms/materials,
    // which need to be explicitly cleaned up.
    // e.g. freeing GPU Memory.

    if (this.__value) {
      this.__value.boundingBoxDirtied.disconnect(this.boundingBoxDirtied.emit);
    }
  }
}

/** Class representing a base image in the scene tree.
 * @extends BaseItem
 */
class BaseImage extends BaseItem {
  /**
   * Create a base image.
   * @param {string} name - The name of the base image.
   * @param {any} params - The parameters of the base image.
   */
  constructor(name) {
    super(name);
    this.width = 0;
    this.height = 0;
    this.format = 'RGB';
    this.type = 'UNSIGNED_BYTE';

    this.addParameter(new BooleanParameter('AlphaFromLuminance', false));
    this.addParameter(new BooleanParameter('Invert', false));
    this.addParameter(new BooleanParameter('FlipY', false));

    this.updated = this.parameterValueChanged;

    // Note: Many parts of the code assume a 'loaded' signal.
    // We should probably deprecate and use only 'updated'.
    // Instead we should start using a loaded Promise.
    this.loaded = new Signal(true);
  }

  /**
   * Returns true if loaded.
   * @return {boolean} - Returns a boolean.
   */
  isLoaded() {
    return true
  }

  /**
   * The getMapping method.
   * @return {any} - The return value.
   */
  getMapping() {
    return this.__mapping
  }

  /**
   * The setMapping method
   * @param {any} mapping - The mapping value.
   */
  setMapping(mapping) {
    this.__mapping = mapping;
  }

  /**
   * The isStream method.
   * @return {boolean} - Returns a boolean.
   */
  isStream() {
    return false
  }

  /**
   * The isStreamAtlas method.
   * @return {boolean} - Returns a boolean.
   */
  isStreamAtlas() {
    return this.__streamAtlas
  }

  /**
   * The getParams method.
   * @return {any} - The return value.
   */
  getParams() {
    return {
      type: this.type,
      format: this.format,
      width: this.width,
      height: this.height,
      flipY: this.getParameter('FlipY').getValue(),
      invert: this.getParameter('Invert').getValue(),
      alphaFromLuminance: this.getParameter('AlphaFromLuminance').getValue(),
    }
  }
}

/** Class representing a material float parameter.
 * @extends NumberParameter
 */
class MaterialFloatParam extends NumberParameter {
  /**
   * Create a material float parameter.
   * @param {string} name - The name of the material color parameter.
   * @param {any} value - The value of the parameter.
   * @param {any} range - The range value.
   */
  constructor(name, value, range) {
    super(name, value, range);
    this.textureConnected = new Signal();
    this.textureDisconnected = new Signal();
  }

  /**
   * The getImage method.
   * @return {any} - The return value.
   */
  getImage() {
    return this.__image
  }

  // let imageUpdated = () => {
  //     valueChanged.emit();
  // }

  /**
   * The setImage method.
   * @param {any} value - The value value.
   * @param {number} mode - The mode value.
   */
  setImage(value, mode = 0) {
    const disconnectImage = () => {
      // image.loaded.disconnect(imageUpdated);
      // image.updated.disconnect(imageUpdated);
      this.textureDisconnected.emit();
    };
    if (value) {
      if (this.__image != undefined && this.__image !== value) {
        disconnectImage();
      }
      this.__image = value;
      // image.loaded.connect(imageUpdated);
      // image.updated.connect(imageUpdated);
      this.textureConnected.emit();
      this.valueChanged.emit(mode);
    } else {
      if (this.__image != undefined) {
        disconnectImage();
        this.__image = undefined;
        this.textureDisconnected.emit();
      }
    }
  }

  /**
   * The setValue method.
   * @param {any} value - The value param.
   */
  setValue(value) {
    if (value instanceof BaseImage) {
      this.setImage(value);
    } else {
      if (this.__image != undefined) {
        this.setImage(undefined);
      }
      super.setValue(value);
    }
  }

  /**
   * The readBinary method.
   * @param {object} reader - The reader value.
   * @param {object} context - The context value.
   */
  readBinary(reader, context) {
    super.readBinary(reader, context);

    const textureName = reader.loadStr();
    if (textureName != '') {
      console.log('Load Texture');
      this.setImage(context.materialLibrary.getImage(textureName));
    }
  }

  /**
   * The clone method constructs a new material float parameter,
   * copies its values from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {MaterialFloatParam} - Returns a new cloned material float parameter.
   */
  clone(flags) {
    const clonedParam = new MaterialFloatParam(
      this.__name,
      this.__value.clone()
    );
    return clonedParam
  }
}

sgFactory.registerClass('MaterialFloatParam', MaterialFloatParam);

/** Class representing a material color parameter.
 * @extends ColorParameter
 */
class MaterialColorParam extends ColorParameter {
  /**
   * Create a material color parameter.
   * @param {string} name - The name of the material color parameter.
   * @param {any} value - The value of the parameter.
   */
  constructor(name, value) {
    super(name, value);
    this.textureConnected = new Signal();
    this.textureDisconnected = new Signal();
    this.__imageUpdated = this.__imageUpdated.bind(this);
  }

  /**
   * The getImage method.
   * @return {any} - The return value.
   */
  getImage() {
    return this.__image
  }

  /**
   * The __imageUpdated method.
   * @private
   */
  __imageUpdated() {
    this.valueChanged.emit();
  }

  /**
   * The setImage method.
   * @param {any} value - The value param.
   * @param {number} mode - The mode param.
   */
  setImage(value, mode = 0) {
    const disconnectImage = () => {
      this.__image.loaded.disconnect(this.__imageUpdated);
      this.__image.updated.disconnect(this.__imageUpdated);
      this.__image = null;
      this.textureDisconnected.emit();
    };
    if (value) {
      if (this.__image != undefined && this.__image !== value) {
        disconnectImage();
      }
      this.__image = value;
      this.__image.updated.connect(this.__imageUpdated);
      this.textureConnected.emit();
      this.valueChanged.emit(mode);
    } else {
      if (this.__image != undefined) {
        disconnectImage();
        this.__image = undefined;
        this.textureDisconnected.emit();
      }
    }
  }

  /**
   * The setValue method.
   * @param {any} value - The value param.
   */
  setValue(value) {
    if (value instanceof BaseImage) {
      this.setImage(value);
    } else {
      if (this.__image != undefined) {
        this.setImage(undefined);
      }
      super.setValue(value);
    }
  }
  /**
   * The readBinary method.
   * @param {object} reader - The reader value.
   * @param {object} context - The context value.
   */
  readBinary(reader, context) {
    super.readBinary(reader, context);

    const textureName = reader.loadStr();
    if (textureName != '') {
      this.setImage(context.materialLibrary.getImage(textureName));
    }
  }

  /**
   * The clone method constructs a new material color parameter,
   * copies its values from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {MaterialColorParam} - Returns a new cloned material color parameter.
   */
  clone(flags) {
    const clonedParam = new MaterialColorParam(
      this.__name,
      this.__value.clone()
    );
    return clonedParam
  }
}

sgFactory.registerClass('MaterialColorParam', MaterialColorParam);

const generateParameterInstance = (
  paramName,
  defaultValue,
  range,
  texturable
) => {
  if (
    typeof defaultValue == 'boolean' ||
    defaultValue === false ||
    defaultValue === true
  ) {
    return new Parameter(paramName, defaultValue, 'Boolean')
  } else if (typeof defaultValue == 'string') {
    return new Parameter(paramName, defaultValue, 'String')
  } else if (Number.isNumeric(defaultValue)) {
    if (texturable)
      return new MaterialFloatParam(paramName, defaultValue, range)
    else return new NumberParameter(paramName, defaultValue, range)
  } else if (defaultValue instanceof Vec2) {
    return new Vec2Parameter(paramName, defaultValue)
  } else if (defaultValue instanceof Vec3$1) {
    return new Vec3Parameter(paramName, defaultValue)
  } else if (defaultValue instanceof Color) {
    if (texturable) return new MaterialColorParam(paramName, defaultValue)
    else return new ColorParameter(paramName, defaultValue)
  } else {
    return new Parameter(paramName, defaultValue)
  }
};

/** Class representing a material in a scene tree.
 * @extends BaseItem
 */
class Material extends BaseItem {
  /**
   * Create a material
   * @param {string} name - The name of the material.
   * @param {string} shaderName - The name of the shader.
   */
  constructor(name, shaderName) {
    super(name);

    this.shaderNameChanged = new Signal();
    this.visibleInGeomDataBuffer = true;

    if (shaderName) this.setShaderName(shaderName);
  }

  /**
   * Getter for the shader name.
   * @return {string} - Returns the shader name.
   */
  getShaderName() {
    return this.__shaderName
  }

  /**
   * Setter for the shader name.
   * @param {string} shaderName - The shader name.
   */
  setShaderName(shaderName) {
    if (this.__shaderName == shaderName) return

    const shaderClass = sgFactory.getClass(shaderName);
    if (!shaderClass)
      throw new Error('Error setting Shader. Shader not found:' + shaderName)

    const paramDescs = shaderClass.getParamDeclarations();
    const paramMap = {};
    for (const desc of paramDescs) {
      // Note: some shaders specify default images. Like the speckle texture
      // on the car paint shader.
      // let image;
      // let defaultValue = desc.defaultValue;
      // if (desc.defaultValue instanceof BaseImage) {
      //     image = desc.defaultValue;
      //     defaultValue = new Color();
      // }
      let param = this.getParameter(desc.name);
      // if(param && param.getType() != desc.defaultValue)
      // removeParameter
      if (!param)
        param = this.addParameter(
          generateParameterInstance(
            desc.name,
            desc.defaultValue,
            desc.range,
            desc.texturable != false
          )
        );
      // if(desc.texturable != false) {// By default, parameters are texturable. texturable must be set to false to disable texturing.
      //     if(!param.getImage)
      //         this.__makeParameterTexturable(param);
      //     // if(image)
      //     //     param.setImage(image)
      // }

      paramMap[desc.name] = true;
    }

    // Remove redundant Params.
    for (const param of this.__params) {
      if (!paramMap[param.getName()]) {
        this.removeParameter(param.getName());
      }
    }

    this.__shaderName = shaderName;
    this.shaderNameChanged.emit(this.__shaderName);
  }

  /**
   * Remove all textures.
   */
  removeAllTextures() {
    for (const param of this.__params) {
      if (param.getImage && param.getImage()) {
        // emit a notification so the GLMaterial knows to 
        // Remove refs to GLTexture objects.
        param.setImage(undefined);
      }
    }
  }

  // /////////////////////////////
  // Parameters

  /**
   * The getParamTextures method.
   * @return {object} - The return value.
   */
  getParamTextures() {
    const textures = {};
    for (const param of this.__params) {
      if (param.getImage && param.getImage())
        textures[param.getName()] = param.getImage();
    }
    return textures
  }

  /**
   * The __makeParameterTexturable method.
   * @param {any} param - The param value.
   * @private
   */
  __makeParameterTexturable(param) {
    makeParameterTexturable(param);
    // param.textureConnected.connect(this.textureConnected.emit);
    // param.textureDisconnected.connect(this.textureDisconnected.emit);
  }

  /**
   * Checks if the material is transparent.
   * @return {boolean} - Returns true if the material is transparent.
   */
  isTransparent() {
    const opacity = this.getParameter('Opacity');
    if (opacity && (opacity.getValue() < 0.99 || opacity.getImage()))
      return true
    const baseColor = this.getParameter('BaseColor');
    if (
      baseColor &&
      baseColor.getImage() &&
      baseColor.getImage().format == 'RGBA'
    )
      return true
    return false
  }

  /**
   * The getShaderClass method.
   * @return {any} - The return value.
   */
  getShaderClass() {
    return sgFactory.getClass(this.getShaderName())
  }

  /**
   * The modifyParams method.
   * @param {any} paramValues - The paramValues.
   * @param {string} shaderName - The shader name.
   */
  modifyParams(paramValues, shaderName) {
    if (shaderName) this.setShaderName(shaderName);
    for (const paramName in paramValues) {
      const param = this.getParameter(paramName);
      if (param) {
        if (paramValues[paramName] instanceof Parameter) {
          this.replaceParameter(paramValues[paramName]);
        } else {
          param.setValue(paramValues[paramName]);
        }
      }
    }
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes the current object as a json object.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags = 0) {
    return super.toJSON(context, flags)
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context = {}, flags = 0) {
    if (!j.shader) {
      console.warn('Invalid Material JSON');
      return
    }
    this.setShaderName(j.shader);
    super.fromJSON(j, context, flags);
    // let props = this.__params;
    // for (let key in j) {
    //     let value;
    //     if (j[key] instanceof Object) {
    //         value = new Color();
    //         value.fromJSON(j[key]);
    //     } else {
    //         value = j[key];
    //     }
    //     this.addParameter(paramName, value);
    // }
  }

  /**
   * The readBinary method.
   * @param {object} reader - The reader value.
   * @param {object} context - The context value.
   */
  readBinary(reader, context) {
    let shaderName = reader.loadStr();

    if (shaderName == 'StandardMaterial') {
      shaderName = 'StandardSurfaceShader';
    }
    if (shaderName == 'TransparentMaterial') {
      shaderName = 'TransparentSurfaceShader';
    }
    this.setShaderName(shaderName);

    // if (context.version < 3) {
    if (context.versions['zea-engine'].lessThan([0, 0, 3])) {
      this.setName(reader.loadStr());

      function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1)
      }

      const numParams = reader.loadUInt32();
      for (let i = 0; i < numParams; i++) {
        const paramName = capitalizeFirstLetter(reader.loadStr());
        const paramType = reader.loadStr();
        let value;
        if (paramType == 'MaterialColorParam') {
          value = reader.loadRGBAFloat32Color();
          // If the value is in linear space, then we should convert it to gamma space.
          // Note: !! this should always be done in preprocessing...
          value.applyGamma(2.2);
        } else {
          value = reader.loadFloat32();
        }
        const textureName = reader.loadStr();

        // console.log(paramName +":" + value);
        let param = this.getParameter(paramName);
        if (param) param.setValue(value);
        else
          param = this.addParameter(generateParameterInstance(paramName, value));
        if (textureName != '' && param.setImage) {
          // if(!param.setImage)
          //     this.__makeParameterTexturable(param);

          if (context.materialLibrary.hasImage(textureName)) {
            // console.log(paramName +":" + textureName + ":" + context.materialLibrary[textureName].resourcePath);
            param.setImage(context.materialLibrary.getImage(textureName));
          } else {
            console.warn('Missing Texture:' + textureName);
          }
        }
      }
    } else {
      super.readBinary(reader, context);
    }
  }

  // ////////////////////////////////////////
  // Clone and Destroy

  /**
   * The clone method constructs a new material, copies its values
   * from this material and returns it.
   * @param {number} flags - The flags value.
   * @return {Material} - Returns a new cloned material.
   */
  clone(flags) {
    const cloned = new Material();
    cloned.copyFrom(this, flags);
    return cloned
  }

  /**
   * The copyFrom method.
   * @param {Material} src - The material to copy from.
   * @param {number} flags - The flags value.
   */
  copyFrom(src, flags) {
    super.copyFrom(src, flags);
    this.setShaderName(src.getShaderName());
    for (const srcParam of src.getParameters()) {
      const param = src.getParameter(srcParam.getName());
      if (!srcParam.getImage) this.__makeParameterTexturable(param);
    }
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    this.removeAllTextures();
    super.destroy();
  }
}

// let ResourceLoaderWorker = require("worker-loader?inline!./ResourceLoaderWorker.js");

/** Class representing a data image.
 * @extends BaseImage
 */
class DataImage extends BaseImage {
  /**
   * Create a data image.
   * @param {string} name - The name value.
   */
  constructor(name) {
    super();

    if (name == undefined) name = this.constructor.name;
    this.__name = name;
    this.format = 'RGBA';
    this.type = 'UNSIGNED_BYTE';
    this.__loaded = false;

    // this.__data = new Uint8Array(4);
    this.width = 1;
    this.height = 1;
  }

  /**
   * The isLoaded method.
   * @return {any} - The return value.
   */
  isLoaded() {
    return this.__loaded
  }

  /**
   * The getName method.
   * @return {any} - The return value.
   */
  getName() {
    return this.__name
  }

  /**
   * The isStream method.
   * @return {boolean} - The return value.
   */
  isStream() {
    return false
  }

  /**
   * The setData method.
   * @param {any} width - The width value.
   * @param {any} height - The height value.
   * @param {any} data - The data value.
   */
  setData(width, height, data) {
    this.width = width;
    this.height = height;
    this.__data = data;
    if (!this.__loaded) {
      this.__loaded = true;
      this.loaded.emit();
    } else this.updated.emit();
  }

  /**
   * The getParams method.
   * @return {any} - The return value.
   */
  getParams() {
    const params = super.getParams();
    params['data'] = this.__data;
    return params
  }
}

sgFactory.registerClass('DataImage2D', DataImage);
sgFactory.registerClass('DataImage', DataImage);

var count;
// Stream object for reading off bytes from a byte array

function ByteStream(data){
	this.data = data;
	this.pos = 0;
}

// read the next byte off the stream
ByteStream.prototype.readByte = function(){
	return this.data[this.pos++];
};

// look at the next byte in the stream without updating the stream position
ByteStream.prototype.peekByte = function(){
	return this.data[this.pos];
};

// read an array of bytes
ByteStream.prototype.readBytes = function(n){
	var bytes = new Array(n);
	for(var i=0; i<n; i++){
		bytes[i] = this.readByte();
	}
	return bytes;
};

// peek at an array of bytes without updating the stream position
ByteStream.prototype.peekBytes = function(n){
	var bytes = new Array(n);
	for(var i=0; i<n; i++){
		bytes[i] = this.data[this.pos + i];
	}
	return bytes;
};

// read a string from a byte set
ByteStream.prototype.readString = function(len){
	var str = '';
	for(var i=0; i<len; i++){
		str += String.fromCharCode(this.readByte());
	}
	return str;
};

// read a single byte and return an array of bit booleans
ByteStream.prototype.readBitArray = function(){
	var arr = [];
	var bite = this.readByte();
	for (var i = 7; i >= 0; i--) {
		arr.push(!!(bite & (1 << i)));
	}
	return arr;
};

// read an unsigned int with endian option
ByteStream.prototype.readUnsigned = function(littleEndian){
	var a = this.readBytes(2);
	if(littleEndian){
		return (a[1] << 8) + a[0];	
	}else {
		return (a[0] << 8) + a[1];
	}	
};


function DataParser(data){
	this.stream = new ByteStream(data);
	// the final parsed object from the data
	this.output = {};
}

DataParser.prototype.parse = function(schema){
	// the top level schema is just the top level parts array
	this.parseParts(this.output, schema);	
	return this.output;
};

// parse a set of hierarchy parts providing the parent object, and the subschema
DataParser.prototype.parseParts = function(obj, schema){
	for(var i=0; i<schema.length; i++){
		var part = schema[i];
		this.parsePart(obj, part); 
	}
};

DataParser.prototype.parsePart = function(obj, part){
	var name = part.label;
	var value;

	// make sure the part meets any parse requirements
	if(part.requires && ! part.requires(this.stream, this.output, obj)){
		return;
	}
	
	if(part.loop){
		// create a parse loop over the parts
		var items = [];
		while(part.loop(this.stream)){
			var item = {};
			this.parseParts(item, part.parts);
			items.push(item);
		}
		obj[name] = items;
	}else if(part.parts){
		// process any child parts
		value = {};
		this.parseParts(value, part.parts);
		obj[name] = value;
	}else if(part.parser){
		// parse the value using a parser
		value = part.parser(this.stream, this.output, obj);
		if(!part.skip){
			obj[name] = value;
		}
	}else if(part.bits){
		// convert the next byte to a set of bit fields
		obj[name] = this.parseBits(part.bits);
	}
};

// combine bits to calculate value
function bitsToNum(bitArray){
	return bitArray.reduce(function(s, n) { return s * 2 + n; }, 0);
}

// parse a byte as a bit set (flags and values)
DataParser.prototype.parseBits = function(details){
	var out = {};
	var bits = this.stream.readBitArray();
	for(var key in details){
		var item = details[key];
		if(item.length){
			// convert the bit set to value
			out[key] = bitsToNum(bits.slice(item.index, item.index + item.length));
		}else {
			out[key] = bits[item.index];
		}
	}
	return out;
};


// a set of common parsers used with DataParser

var Parsers = {
	// read a byte
	readByte: function(){
		return function(stream){
			return stream.readByte();
		};
	},
	// read an array of bytes
	readBytes: function(length){
		return function(stream){
			return stream.readBytes(length);
		};
	},
	// read a string from bytes
	readString: function(length){
		return function(stream){
			return stream.readString(length);
		};
	},
	// read an unsigned int (with endian)
	readUnsigned: function(littleEndian){
		return function(stream){
			return stream.readUnsigned(littleEndian);
		};
	},
	// read an array of byte sets
	readArray: function(size, countFunc){
		return function(stream, obj, parent){
			var count = countFunc(stream, obj, parent);
			var arr = new Array(count);
			for(var i=0; i<count; i++){
				arr[i] = stream.readBytes(size);
			}
			return arr;
		};
	}
};


// object used to represent array buffer data for a gif file



// a set of 0x00 terminated subblocks
var subBlocks = {
	label: 'blocks',
	parser: function(stream){
		var out = [];
		var terminator = 0x00;		
		for(var size=stream.readByte(); size!==terminator; size=stream.readByte()){
			out = out.concat(stream.readBytes(size));
		}
		return out;
	}
};

// global control extension
var gce = {
	label: 'gce',
	requires: function(stream){
		// just peek at the top two bytes, and if true do this
		var codes = stream.peekBytes(2);
		return codes[0] === 0x21 && codes[1] === 0xF9;
	},
	parts: [
		{ label: 'codes', parser: Parsers.readBytes(2), skip: true },
		{ label: 'byteSize', parser: Parsers.readByte() },
		{ label: 'extras', bits: {
			future: { index: 0, length: 3 },
			disposal: { index: 3, length: 3 },
			userInput: { index: 6 },
			transparentColorGiven: { index: 7 }
		}},
		{ label: 'delay', parser: Parsers.readUnsigned(true) },
		{ label: 'transparentColorIndex', parser: Parsers.readByte() },
		{ label: 'terminator', parser: Parsers.readByte(), skip: true }
	]
};

// image pipeline block
var image = {
	label: 'image',
	requires: function(stream){
		// peek at the next byte
		var code = stream.peekByte();
		return code === 0x2C;
	},
	parts: [
		{ label: 'code', parser: Parsers.readByte(), skip: true },
		{
			label: 'descriptor', // image descriptor
			parts: [
				{ label: 'left', parser: Parsers.readUnsigned(true) },
				{ label: 'top', parser: Parsers.readUnsigned(true) },
				{ label: 'width', parser: Parsers.readUnsigned(true) },
				{ label: 'height', parser: Parsers.readUnsigned(true) },
				{ label: 'lct', bits: {
					exists: { index: 0 },
					interlaced: { index: 1 },
					sort: { index: 2 },
					future: { index: 3, length: 2 },
					size: { index: 5, length: 3 }
				}}
			]
		},{
			label: 'lct', // optional local color table
			requires: function(stream, obj, parent){
				return parent.descriptor.lct.exists;
			},
			parser: Parsers.readArray(3, function(stream, obj, parent){
				return Math.pow(2, parent.descriptor.lct.size + 1);
			})
		},{
			label: 'data', // the image data blocks
			parts: [
				{ label: 'minCodeSize', parser: Parsers.readByte() },
				subBlocks
			]
		}
	]
};

// plain text block
var text = {
	label: 'text',
	requires: function(stream){
		// just peek at the top two bytes, and if true do this
		var codes = stream.peekBytes(2);
		return codes[0] === 0x21 && codes[1] === 0x01;
	},
	parts: [
		{ label: 'codes', parser: Parsers.readBytes(2), skip: true },
		{ label: 'blockSize', parser: Parsers.readByte() },
		{ 
			label: 'preData', 
			parser: function(stream, obj, parent){
				return stream.readBytes(parent.text.blockSize);
			}
		},
		subBlocks
	]
};

// application block
var application = {
	label: 'application',
	requires: function(stream, obj, parent){
		// make sure this frame doesn't already have a gce, text, comment, or image
		// as that means this block should be attached to the next frame
		//if(parent.gce || parent.text || parent.image || parent.comment){ return false; }

		// peek at the top two bytes
		var codes = stream.peekBytes(2);
		return codes[0] === 0x21 && codes[1] === 0xFF;
	},
	parts: [
		{ label: 'codes', parser: Parsers.readBytes(2), skip: true },
		{ label: 'blockSize', parser: Parsers.readByte() },
		{ 
			label: 'id', 
			parser: function(stream, obj, parent){
				return stream.readString(parent.blockSize);
			}
		},
		subBlocks
	]
};

// comment block
var comment = {
	label: 'comment',
	requires: function(stream, obj, parent){
		// make sure this frame doesn't already have a gce, text, comment, or image
		// as that means this block should be attached to the next frame
		//if(parent.gce || parent.text || parent.image || parent.comment){ return false; }

		// peek at the top two bytes
		var codes = stream.peekBytes(2);
		return codes[0] === 0x21 && codes[1] === 0xFE;
	},
	parts: [
		{ label: 'codes', parser: Parsers.readBytes(2), skip: true },
		subBlocks
	]
};

// frames of ext and image data
var frames = {
	label: 'frames',
	parts: [
		gce,
		application,
		comment,
		image,
		text
	],
	loop: function(stream){
		var nextCode = stream.peekByte();
		// rather than check for a terminator, we should check for the existence
		// of an ext or image block to avoid infinite loops
		//var terminator = 0x3B;
		//return nextCode !== terminator;
		return nextCode === 0x21 || nextCode === 0x2C;
	}
};

// main GIF schema
var schemaGIF = [
	{
		label: 'header', // gif header
		parts: [
			{ label: 'signature', parser: Parsers.readString(3) },
			{ label: 'version', parser: Parsers.readString(3) }
		]
	},{
		label: 'lsd', // local screen descriptor
		parts: [
			{ label: 'width', parser: Parsers.readUnsigned(true) },
			{ label: 'height', parser: Parsers.readUnsigned(true) },
			{ label: 'gct', bits: {
				exists: { index: 0 },
				resolution: { index: 1, length: 3 },
				sort: { index: 4 },
				size: { index: 5, length: 3 }
			}},
			{ label: 'backgroundColorIndex', parser: Parsers.readByte() },
			{ label: 'pixelAspectRatio', parser: Parsers.readByte() }
		]
	},{
		label: 'gct', // global color table
		requires: function(stream, obj){
			return obj.lsd.gct.exists;
		},
		parser: Parsers.readArray(3, function(stream, obj){
			return Math.pow(2, obj.lsd.gct.size + 1);
		})
	},
	frames // content frames
];


var gifSchema = schemaGIF;

function GIF(arrayBuffer){
	// convert to byte array
	var byteData = new Uint8Array(arrayBuffer);
	var parser = new DataParser(byteData);
	// parse the data
	this.raw = parser.parse(gifSchema);

	// set a flag to make sure the gif contains at least one image
	this.raw.hasImages = false;
	for(var f=0; f<this.raw.frames.length; f++){
		if(this.raw.frames[f].image){
			this.raw.hasImages = true;
			break;
		}
	}
}

// process a single gif image frames data, decompressing it using LZW 
// if buildPatch is true, the returned image will be a clamped 8 bit image patch
// for use directly with a canvas.
GIF.prototype.decompressFrame = function(index, buildPatch){

	// make sure a valid frame is requested
	if(index >= this.raw.frames.length){ return null; }

	var frame = this.raw.frames[index];
	if(frame.image){
		// get the number of pixels
		var totalPixels = frame.image.descriptor.width * frame.image.descriptor.height;

		// do lzw decompression
		var pixels = lzw(frame.image.data.minCodeSize, frame.image.data.blocks, totalPixels);

		// deal with interlacing if necessary
		if(frame.image.descriptor.lct.interlaced){
			pixels = deinterlace(pixels, frame.image.descriptor.width);
		}

		// setup usable image object
		var image = {
			pixels: pixels,
			dims: {
				top: frame.image.descriptor.top,
				left: frame.image.descriptor.left,
				width: frame.image.descriptor.width,
				height: frame.image.descriptor.height
			}
		};

		// color table
		if(frame.image.descriptor.lct && frame.image.descriptor.lct.exists){
			image.colorTable = frame.image.lct;
		}else {
			image.colorTable = this.raw.gct;
		}

		// add per frame relevant gce information
		if(frame.gce){
			image.delay = (frame.gce.delay || 10) * 10; // convert to ms
			image.disposalType = frame.gce.extras.disposal;
			// transparency
			if(frame.gce.extras.transparentColorGiven){
				image.transparentIndex = frame.gce.transparentColorIndex;
			}
		}

		// create canvas usable imagedata if desired
		if(buildPatch){
			image.patch = generatePatch(image);
		}

		return image;		
	}

	// frame does not contains image
	return null;


	/**
	 * javascript port of java LZW decompression
	 * Original java author url: https://gist.github.com/devunwired/4479231
	 */	
	function lzw(minCodeSize, data, pixelCount) {
 		
 		var MAX_STACK_SIZE = 4096;
		var nullCode = -1;

		var npix = pixelCount;
		var available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, i, datum, data_size, first, top, bi, pi;
 
 		var dstPixels = new Array(pixelCount);
		var prefix = new Array(MAX_STACK_SIZE);
		var suffix = new Array(MAX_STACK_SIZE);
		var pixelStack = new Array(MAX_STACK_SIZE + 1);
 
		// Initialize GIF data stream decoder.
		data_size = minCodeSize;
		clear = 1 << data_size;
		end_of_information = clear + 1;
		available = clear + 2;
		old_code = nullCode;
		code_size = data_size + 1;
		code_mask = (1 << code_size) - 1;
		for (code = 0; code < clear; code++) {
			prefix[code] = 0;
			suffix[code] = code;
		}
 
		// Decode GIF pixel stream.
		datum = bits = count = first = top = pi = bi = 0;
		for (i = 0; i < npix; ) {
			if (top === 0) {
				if (bits < code_size) {
					
					// get the next byte			
					datum += data[bi] << bits;

					bits += 8;
					bi++;
					continue;
				}
				// Get the next code.
				code = datum & code_mask;
				datum >>= code_size;
				bits -= code_size;
				// Interpret the code
				if ((code > available) || (code == end_of_information)) {
					break;
				}
				if (code == clear) {
					// Reset decoder.
					code_size = data_size + 1;
					code_mask = (1 << code_size) - 1;
					available = clear + 2;
					old_code = nullCode;
					continue;
				}
				if (old_code == nullCode) {
					pixelStack[top++] = suffix[code];
					old_code = code;
					first = code;
					continue;
				}
				in_code = code;
				if (code == available) {
					pixelStack[top++] = first;
					code = old_code;
				}
				while (code > clear) {
					pixelStack[top++] = suffix[code];
					code = prefix[code];
				}
				
				first = suffix[code] & 0xff;
				pixelStack[top++] = first;

				// add a new string to the table, but only if space is available
				// if not, just continue with current table until a clear code is found
				// (deferred clear code implementation as per GIF spec)
				if(available < MAX_STACK_SIZE){
					prefix[available] = old_code;
					suffix[available] = first;
					available++;
					if (((available & code_mask) === 0) && (available < MAX_STACK_SIZE)) {
						code_size++;
						code_mask += available;
					}
				}
				old_code = in_code;
			}
			// Pop a pixel off the pixel stack.
			top--;
			dstPixels[pi++] = pixelStack[top];
			i++;
		}

		for (i = pi; i < npix; i++) {
			dstPixels[i] = 0; // clear missing pixels
		}

		return dstPixels;
	}

	// deinterlace function from https://github.com/shachaf/jsgif
	function deinterlace(pixels, width) {
		
		var newPixels = new Array(pixels.length);
		var rows = pixels.length / width;
		var cpRow = function(toRow, fromRow) {
			var fromPixels = pixels.slice(fromRow * width, (fromRow + 1) * width);
			newPixels.splice.apply(newPixels, [toRow * width, width].concat(fromPixels));
		};

		// See appendix E.
		var offsets = [0,4,2,1];
		var steps   = [8,8,4,2];

		var fromRow = 0;
		for (var pass = 0; pass < 4; pass++) {
			for (var toRow = offsets[pass]; toRow < rows; toRow += steps[pass]) {
				cpRow(toRow, fromRow);
				fromRow++;
			}
		}

		return newPixels;
	}

	// create a clamped byte array patch for the frame image to be used directly with a canvas
	// TODO: could potentially squeeze some performance by doing a direct 32bit write per iteration
	function generatePatch(image){

		var totalPixels = image.pixels.length;
		var patchData = new Uint8ClampedArray(totalPixels * 4);
		for(var i=0; i<totalPixels; i++){
			var pos = i * 4;
			var colorIndex = image.pixels[i];
			var color = image.colorTable[colorIndex];
			patchData[pos] = color[0];
			patchData[pos + 1] = color[1];
			patchData[pos + 2] = color[2];
			patchData[pos + 3] = colorIndex !== image.transparentIndex ? 255 : 0;
		}

		return patchData;
	}
};

// returns all frames decompressed
GIF.prototype.decompressFrames = function(buildPatch){
	var frames = [];
	for(var i=0; i<this.raw.frames.length; i++){
		var frame = this.raw.frames[i];
		if(frame.image){
			frames.push(this.decompressFrame(i, buildPatch));
		}
	}
	return frames;
};

const imageDataLibrary = {};

const imageLoaders = {};

const supportWebp = navigator.userAgent.indexOf('Chrome') !== -1; // || navigator.userAgent.indexOf("Samsung");

/** Class representing a file image.
 * @extends BaseImage
 */
class FileImage$1 extends BaseImage {
  /**
   * Create a file image.
   * @param {string} name - The name value.
   * @param {any} filePath - The filePath value.
   * @param {any} params - The params value.
   */
  constructor(name, filePath = '', params = {}) {
    if (filePath.constructor == Object) {
      params = filePath;
    }
    if (name != undefined && name.lastIndexOf('.') != -1) {
      console.warn(
        'Deprecated signature. Please provide a name and filepath to the image constructor'
      );
      name = name.substring(name.lastIndexOf('/') + 1, name.lastIndexOf('.'));
    }

    super(name, params);

    this.__loaded = false;

    const fileParam = this.addParameter(new FilePathParameter('FilePath'));
    fileParam.valueChanged.connect(() => {
      this.loaded.untoggle();
      if (this.getName() == "") {
        // Generate a name from the file path.
        const stem = fileParam.getStem();
        const decorator = stem.substring(stem.length - 1);
        if (!isNaN(decorator)) {
          // Note: ALL image names have an LOD specifier at the end.
          // remove that off when retrieving the name.
          this.setName(stem.substring(0, stem.length - 1));
        } else {
          this.setName(stem);
        }
      }

      const fileDesc = fileParam.getFileDesc();
      if (fileDesc) {
        this.__loadData(fileDesc);
      }
    });

    if (filePath && filePath != '') fileParam.setFilepath(filePath);
  }

  /**
   * The __imageDataLibrary method.
   * @return {any} - The return value.
   * @private
   */
  static __imageDataLibrary() {
    return imageDataLibrary
  }

  /**
   * The registerLoader method.
   * @param {any} exts - The exts param.
   * @param {any} loaderClass - The loaderClass param.
   */
  static registerLoader(exts, loaderClass) {
    imageLoaders[exts] = loaderClass;
  }

  /**
   * The constructLoader method.
   * @param {any} file - The file value.
   * @param {any} loaderName - The loaderName value.
   * @return {any} - The return value.
   */
  static constructLoader(file, loaderName) {
    for (const exts of imageLoaders) {
      if (new RegExp('\\.(' + exts + ')$', 'i').test(file.name)) {
        const loader = new imageLoaders[exts](loaderName);
        if (loader) {
          loader.getParameter('FilePath').setValue(file.id);
          return loader
        }
      }
    }
  }

  /**
   * The __loadData method.
   * @param {any} fileDesc - The fileDesc value.
   * @private
   */
  __loadData(fileDesc) {
    const ext = this.getParameter('FilePath').getExt();
    if (ext == '.jpg' || ext == '.png' || ext == '.webp') {
      this.__loadLDRImage(fileDesc, ext);
    } else if (ext == '.mp4' || ext == '.ogg') {
      this.__loadLDRVideo(fileDesc);
      // } else if (ext == '.ldralpha') {
      //     this.__loadLDRAlpha(fileDesc, ext);
    } else if (ext == '.vlh') {
      this.__loadVLH(fileDesc);
    } else if (ext == '.gif') {
      this.__loadGIF(fileDesc);
    } else if (ext == '.svg') {
      console.warn('SVG Image not yet supported');
    } else {
      throw new Error('Unsupported file type. Check the ext:' + fileDesc)
    }
  }

  /**
   * The __loadLDRImage method.
   * @param {any} fileDesc - The fileDesc value.
   * @param {any} ext - The ext value.
   * @private
   */
  __loadLDRImage(fileDesc, ext) {
    if (ext == '.jpg') {
      this.format = 'RGB';
    } else if (ext == '.png') {
      this.format = 'RGBA';
    }
    this.type = 'UNSIGNED_BYTE';
    let imageElem;
    const loaded = () => {
      this.getDOMElement = () => {
        return imageElem
      };
      this.width = imageElem.width;
      this.height = imageElem.height;
      this.__data = imageElem;
      this.__loaded = true;
      this.loaded.emit();
    };
    if (fileDesc.id in imageDataLibrary) {
      imageElem = imageDataLibrary[fileDesc.id];
      if (imageElem.complete) {
        loaded();
      } else {
        imageElem.addEventListener('load', loaded);
      }
    } else {
      resourceLoader.addWork(fileDesc.id, 1);

      const prefSizeParam = this.addParameter(
        new NumberParameter('PreferredSize', -1)
      );

      let url = fileDesc.url;
      if (fileDesc.assets && Object.keys(fileDesc.assets).length > 0) {
        function chooseImage(params, filterAssets) {
          // Note: this is a filter to remove any corrupt data
          // generate by our broken server side processing system.
          filterAssets = filterAssets.filter(asset => asset !== null);

          if (supportWebp) {
            const resultFilter = filterAssets.filter(
              asset => asset.format === 'webp'
            );

            if (resultFilter.length > 1) {
              filterAssets = resultFilter;
            }
          } else {
            filterAssets = filterAssets.filter(asset => asset.format !== 'webp');
          }

          if (params.maxSize) {
            filterAssets = filterAssets.filter(
              asset => asset.w <= params.maxSize
            );
          }
          if (params.filter) {
            const resultFilter = filterAssets.filter(
              asset => asset.url.indexOf(params.filter) !== -1
            );
            if (resultFilter.length > 1) {
              filterAssets = resultFilter;
            }
          }
          if (params.prefSize) {
            filterAssets = filterAssets.map(asset =>
              Object.assign(
                {
                  score: Math.abs(params.prefSize - asset.w),
                },
                asset
              )
            );

            // return low score, close to desire
            // return _.sortBy(score, "score")[0].option.url;
            filterAssets.sort((a, b) =>
              a.score > b.score ? 1 : a.score < b.score ? -1 : 0
            );
          }
          if (filterAssets.length > 0) return filterAssets[0]
        }
        const params = {
          maxSize: SystemDesc.gpuDesc.maxTextureSize,
        };
        const prefSize = prefSizeParam.getValue();
        if (prefSize == -1) {
          if (fileDesc.assets.reduce) params.prefSize = fileDesc.assets.reduce.w;
        } else {
          params.prefSize = prefSize;
        }
        const asset = chooseImage(params, Object.values(fileDesc.assets));
        if (asset) {
          console.log(
            'Selected image:' +
              fileDesc.name +
              ' format:' +
              asset.format +
              ' :' +
              asset.w +
              'x' +
              asset.h +
              ' url:' +
              asset.url
          );
          url = asset.url;
        }
      } else {
        console.warn('Images not processed for this file:' + fileDesc.name);
      }

      imageElem = new Image();
      imageElem.crossOrigin = 'anonymous';
      imageElem.src = url;

      imageElem.addEventListener('load', loaded);
      imageElem.addEventListener('load', () => {
        resourceLoader.addWorkDone(fileDesc.id, 1);
      });
      imageDataLibrary[fileDesc.id] = imageElem;
    }
  }

  /**
   * The __removeVideoParams method.
   * @private
   */
  __removeVideoParams() {
    if (this.getParameterIndex('spatializeAudio')) {
      this.removeParameter(this.getParameterIndex('Loop'));
      this.removeParameter(this.getParameterIndex('spatializeAudio'));
      this.removeParameter(this.getParameterIndex('Gain'));
      this.removeParameter(this.getParameterIndex('refDistance'));
      this.removeParameter(this.getParameterIndex('maxDistance'));
      this.removeParameter(this.getParameterIndex('rolloffFactor'));
      this.removeParameter(this.getParameterIndex('coneInnerAngle'));
      this.removeParameter(this.getParameterIndex('coneOuterAngle'));
      this.removeParameter(this.getParameterIndex('coneOuterGain'));
    }
  }

  /**
   * The __loadLDRVideo method.
   * @param {any} fileDesc - The fileDesc value.
   * @param {any} ext - The ext value.
   * @private
   */
  __loadLDRVideo(fileDesc) {
    this.format = 'RGB';
    this.type = 'UNSIGNED_BYTE';
    resourceLoader.addWork(fileDesc.id, 1);

    // Note: mute needs to be turned off by an action from the user.
    // Audio is disabled by default now in chrome.
    const muteParam = this.addParameter(new BooleanParameter('Mute', true));
    const loopParam = this.addParameter(new BooleanParameter('Loop', true));

    const videoElem = document.createElement('video');
    // TODO - confirm its necessary to add to DOM
    videoElem.style.display = 'none';
    videoElem.preload = 'auto';
    videoElem.crossOrigin = 'anonymous';
    // videoElem.crossorigin = true;

    this.getAudioSource = () => {
      return videoElem
    };

    document.body.appendChild(videoElem);
    videoElem.addEventListener(
      'loadedmetadata',
      () => {
        // videoElem.play();

        videoElem.muted = muteParam.getValue();
        muteParam.valueChanged.connect(() => {
          videoElem.muted = muteParam.getValue();
        });
        videoElem.loop = loopParam.getValue();
        loopParam.valueChanged.connect(() => {
          videoElem.loop = loopParam.getValue();
        });

        this.width = videoElem.videoHeight;
        this.height = videoElem.videoWidth;
        this.__data = videoElem;
        this.__loaded = true;
        resourceLoader.addWorkDone(fileDesc.id, 1);
        this.loaded.emit(videoElem);

        videoElem.play().then(
          () => {
            let prevFrame = 0;
            const frameRate = 29.97;
            const timerCallback = () => {
              if (videoElem.paused || videoElem.ended) {
                return
              }
              // Check to see if the video has progressed to the next frame.
              // If so, then we emit and update, which will cause a redraw.
              const currentFrame = Math.floor(videoElem.currentTime * frameRate);
              if (prevFrame != currentFrame) {
                this.updated.emit();
                prevFrame = currentFrame;
              }
              setTimeout(timerCallback, 20); // Sample at 50fps.
            };
            timerCallback();
          },
          e => {
            console.log('Autoplay was prevented.', e, e.message);
          }
        );
        // const promise = videoElem.play();
        // if (promise !== undefined) {
        //     promise.then(_ => {
        //         console.log("Autoplay started!")
        //         // Autoplay started!
        //     }).catch(error => {
        //         console.log("Autoplay was prevented.")
        //         // Autoplay was prevented.
        //         // Show a "Play" button so that user can start playback.
        //     });
        // }
      },
      false
    );
    videoElem.src = fileDesc.url;
    // videoElem.load();
  }

  /**
   * The __loadVLH method.
   * @param {any} fileDesc - The fileDesc value.
   * @param {any} ext - The ext value.
   * @private
   */
  __loadVLH(fileDesc) {
    this.type = 'FLOAT';

    let hdrtint = new Color(1, 1, 1, 1);
    // let stream = 'stream' in params ? params['stream'] : false;

    this.setHDRTint = value => {
      hdrtint = value;
    };
    this.getHDRTint = () => {
      return hdrtint
    };

    resourceLoader.loadUrl(fileDesc.id, fileDesc.url, entries => {
      let ldr;
      let cdm;
      for (const name in entries) {
        if (name.endsWith('.jpg')) ldr = entries[name];
        else if (name.endsWith('.bin')) cdm = entries[name];
      }

      // ///////////////////////////////
      // Parse the data.
      const blob = new Blob([ldr.buffer]);
      const ldrPic = new Image();
      ldrPic.onload = () => {
        this.width = ldrPic.width;
        this.height = ldrPic.height;
        // console.log(fileDesc.name + ": [" + this.width + ", " + this.height + "]");
        this.__data = {
          ldr: ldrPic,
          cdm: cdm,
        };
        if (!this.__loaded) {
          this.__loaded = true;
          this.loaded.emit();
        } else {
          this.updated.emit();
        }
      };
      ldrPic.src = URL.createObjectURL(blob);
    });
  }

  /**
   * The __loadGIF method.
   * @param {any} fileDesc - The fileDesc value.
   * @param {any} ext - The ext value.
   * @private
   */
  __loadGIF(fileDesc) {
    this.format = 'RGBA';
    this.type = 'UNSIGNED_BYTE';
    this.__streamAtlas = true;

    // this.__streamAtlasDesc = new Vec4();
    this.addParameter(new Vec4Parameter('StreamAtlasDesc', new Vec4$1()));
    this.addParameter(new NumberParameter('StreamAtlasIndex', 0));
    this.getParameter('StreamAtlasIndex').setRange([0, 1]);

    this.getFrameDelay = () => {
      return 20
    };
    let playing;
    let incrementFrame;
    this.play = () => {
      resourcePromise.then(() => {
        playing = true;
        if (incrementFrame) incrementFrame();
      });
    };
    this.stop = () => {
      playing = false;
    };
    let resourcePromise;
    if (fileDesc.id in imageDataLibrary) {
      resourcePromise = imageDataLibrary[fileDesc.id];
    } else {
      resourcePromise = new Promise((resolve, reject) => {
        resourceLoader.addWork(fileDesc.id, 1);

        if (fileDesc.assets && fileDesc.assets.atlas) {
          const image = new Image();
          image.crossOrigin = 'anonymous';
          image.src = fileDesc.assets.atlas.url;
          image.addEventListener('load', () => {
            resolve({
              width: fileDesc.assets.atlas.width,
              height: fileDesc.assets.atlas.height,
              atlasSize: fileDesc.assets.atlas.atlasSize,
              frameDelays: fileDesc.assets.atlas.frameDelays,
              frameRange: [0, fileDesc.assets.atlas.frameDelays.length],
              imageData: image,
            });
            resourceLoader.addWorkDone(fileDesc.id, 1);
          });
          return
        }

        loadBinfile(
          fileDesc.url,
          data => {
            console.warn('Unpacking Gif client side:' + fileDesc.name);

            const start = performance.now();

            // Decompressing using: https://github.com/matt-way/gifuct-js
            const gif = new GIF(data);
            const frames = gif.decompressFrames(true);

            // do something with the frame data
            const sideLength = Math.sqrt(frames.length);
            const atlasSize = [sideLength, sideLength];
            if (Math.fract(sideLength) > 0.0) {
              atlasSize[0] = Math.floor(atlasSize[0] + 1);
              if (Math.fract(sideLength) > 0.5) {
                atlasSize[1] = Math.floor(atlasSize[1] + 1);
              } else {
                atlasSize[1] = Math.floor(atlasSize[1]);
              }
            }

            const width = frames[0].dims.width;
            const height = frames[0].dims.height;

            // gif patch canvas
            const tempCanvas = document.createElement('canvas');
            const tempCtx = tempCanvas.getContext('2d');
            // full gif canvas
            const gifCanvas = document.createElement('canvas');
            const gifCtx = gifCanvas.getContext('2d');

            gifCanvas.width = width;
            gifCanvas.height = height;

            // The atlas for all the frames.
            const atlasCanvas = document.createElement('canvas');
            const atlasCtx = atlasCanvas.getContext('2d');
            atlasCanvas.width = atlasSize[0] * width;
            atlasCanvas.height = atlasSize[1] * height;

            let frameImageData;
            const frameDelays = [];
            const renderFrame = (frame, index) => {
              const dims = frame.dims;

              // Note: the server side library returns centisecs for
              // frame delays, so normalize here so that client and servers
              // valueus are in the
              frameDelays.push(frame.delay / 10);

              if (
                !frameImageData ||
                dims.width != frameImageData.width ||
                dims.height != frameImageData.height
              ) {
                tempCanvas.width = dims.width;
                tempCanvas.height = dims.height;
                frameImageData = tempCtx.createImageData(
                  dims.width,
                  dims.height
                );
              }

              // set the patch data as an override
              frameImageData.data.set(frame.patch);
              tempCtx.putImageData(frameImageData, 0, 0);

              // Note: undocumented disposal method.
              // See Ids here: https://github.com/theturtle32/Flash-Animated-GIF-Library/blob/master/AS3GifPlayer/src/com/worlize/gif/constants/DisposalType.as
              // From what I can gather, 2 means we should clear the background first.
              // this seems towork with Gifs featuring moving transparency.
              // For fully opaque gifs, we should avoid this.
              if (frame.disposalType == 2)
                gifCtx.clearRect(0, 0, gifCanvas.width, gifCanvas.height);

              gifCtx.drawImage(tempCanvas, dims.left, dims.top);

              atlasCtx.drawImage(
                gifCanvas,
                (index % atlasSize[0]) * width,
                Math.floor(index / atlasSize[0]) * height
              );
            };

            for (let i = 0; i < frames.length; i++) {
              // console.log(frame);
              renderFrame(frames[i], i);
            }
            resourceLoader.addWorkDone(fileDesc.id, 1);

            const imageData = atlasCtx.getImageData(
              0,
              0,
              atlasCanvas.width,
              atlasCanvas.height
            );

            const ms = performance.now() - start;
            console.log(`Decode GIF '${fileDesc.name}' time:` + ms);

            resolve({
              width: atlasCanvas.width,
              height: atlasCanvas.height,
              atlasSize,
              frameRange: [0, frames.length],
              frameDelays,
              imageData,
            });
          },
          statusText => {
            console.warn(
              'Unable to Load URL:' + statusText + ':' + fileDesc.url
            );
            reject();
          }
        );
      });

      imageDataLibrary[fileDesc.id] = resourcePromise;
    }

    resourcePromise.then(unpackedData => {
      this.width = unpackedData.width;
      this.height = unpackedData.height;

      this.getParameter('StreamAtlasDesc').setValue(
        new Vec4$1(unpackedData.atlasSize[0], unpackedData.atlasSize[1], 0, 0)
      );
      this.getParameter('StreamAtlasIndex').setRange(unpackedData.frameRange);

      this.__data = unpackedData.imageData;

      this.getFrameDelay = index => {
        // Note: Frame delays are in centisecs (not millisecs which the timers will require.)
        return unpackedData.frameDelays[index] * 10
      };

      // ////////////////////////
      // Playback
      const frameParam = this.getParameter('StreamAtlasIndex');
      const numFrames = frameParam.getRange()[1];
      let frame = 0;
      incrementFrame = () => {
        frameParam.setValue(frame);
        if (playing) setTimeout(incrementFrame, this.getFrameDelay(frame));
        frame = (frame + 1) % numFrames;
      };
      if (playing) incrementFrame();
      this.__loaded = true;

      this.loaded.emit();
    });
  }

  /**
   * The getFilepath method.
   * @return {any} - The return value.
   */
  getFilepath() {
    return this.getParameter('FilePath').getValue()
  }

  /**
   * The isStream method.
   * @return {boolean} - The return value.
   */
  isStream() {
    return false
  }

  /**
   * The isLoaded method.
   * @return {any} - The return value.
   */
  isLoaded() {
    return this.__loaded
  }

  /**
   * The getParams method.
   * @return {any} - The return value.
   */
  getParams() {
    const params = super.getParams();
    if (this.__loaded) {
      params['data'] = this.__data;
    }
    return params
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  toJSON(context, flags) {}

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} json - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(json, context, flags) {}

  /**
   * The readBinary method.
   * @param {object} reader - The reader param.
   * @param {object} context - The context param.
   */
  readBinary(reader, context) {
    // super.readBinary(reader, context);
    this.setName(reader.loadStr());

    let filePath = reader.loadStr();
    if (typeof filePath === 'string' && filePath != '') {
      if (context.lod >= 0) {
        const suffixSt = filePath.lastIndexOf('.');
        if (suffixSt != -1) {
          const lodPath =
            filePath.substring(0, suffixSt) +
            context.lod +
            filePath.substring(suffixSt);
          if (resourceLoader.resolveFilepath(lodPath)) {
            filePath = lodPath;
          }
        }
      }
      this.getParameter('FilePath').setFilepath(filePath);
    }
  }
}

/** Class representing a 2D file image.
 * @extends FileImage
 */
class FileImage2D extends FileImage$1 {
  /**
   * Create a file image 2D.
   * @param {any} filePath - The filePath value.
   * @param {any} params - The params value.
   */
  constructor(filePath, params = {}) {
    console.warn(
      'FileImage2D is becoming deprecated in favor of simple FileImage'
    );
    super(filePath, params);
  }
}

sgFactory.registerClass('FileImage2D', FileImage$1);
sgFactory.registerClass('FileImage', FileImage$1);

const supportWebp$1 = navigator.userAgent.indexOf('Chrome') !== -1; // || navigator.userAgent.indexOf("Samsung");

/** Class representing a LDR (low dynamic range) image.
 * @extends FileImage
 */
class LDRImage extends FileImage$1 {
  /**
   * Create a LDR image.
   * @param {string} name - The name value.
   * @param {any} filePath - The filePath value.
   * @param {any} params - The params value.
   */
  constructor(name, filePath, params) {
    super(name, filePath, params);
    this.type = 'UNSIGNED_BYTE';
    this.addParameter(new NumberParameter('PreferredSize', -1));
    this.__crossOrigin = 'anonymous';
  }

  /**
   * The setCrossOrigin method.
   * @param {any} crossOrigin - The crossOrigin value.
   */
  setCrossOrigin(crossOrigin) {
    this.__crossOrigin = crossOrigin;
  }

  /**
   * The __loadData method.
   * @param {any} fileDesc - The fileDesc value.
   * @private
   */
  __loadData(fileDesc) {
    const ext = this.getParameter('FilePath').getExt();
    const format = 'RGB';
    if (ext == '.png') {
      this.format = 'RGBA';
    }

    let url = fileDesc.url;
    if (fileDesc.assets && Object.keys(fileDesc.assets).length > 0) {
      function chooseImage(params, filterAssets) {
        // Note: this is a filter to remove any corrupt data
        // generate by our broken server side processing system.
        filterAssets = filterAssets.filter(asset => asset !== null);

        if (supportWebp$1) {
          const resultFilter = filterAssets.filter(
            asset => asset.format === 'webp'
          );

          if (resultFilter.length > 1) {
            filterAssets = resultFilter;
          }
        } else {
          filterAssets = filterAssets.filter(asset => asset.format !== 'webp');
        }

        if (params.maxSize) {
          filterAssets = filterAssets.filter(asset => asset.w <= params.maxSize);
        }
        if (params.filter) {
          const resultFilter = filterAssets.filter(
            asset => asset.url.indexOf(params.filter) !== -1
          );
          if (resultFilter.length > 1) {
            filterAssets = resultFilter;
          }
        }
        if (params.prefSize) {
          filterAssets = filterAssets.map(asset =>
            Object.assign(
              {
                score: Math.abs(params.prefSize - asset.w),
              },
              asset
            )
          );

          // return low score, close to desire
          // return _.sortBy(score, "score")[0].option.url;
          filterAssets.sort((a, b) =>
            a.score > b.score ? 1 : a.score < b.score ? -1 : 0
          );
        }
        if (filterAssets.length > 0) return filterAssets[0]
      }
      const params = {
        maxSize: SystemDesc.gpuDesc.maxTextureSize,
      };
      const prefSize = this.getParameter('PreferredSize').getValue();
      if (prefSize == -1) {
        if (fileDesc.assets.reduce) params.prefSize = fileDesc.assets.reduce.w;
      } else {
        params.prefSize = prefSize;
      }
      const asset = chooseImage(params, Object.values(fileDesc.assets));
      if (asset) {
        console.log(
          'Selected image:' +
            fileDesc.name +
            ' format:' +
            asset.format +
            ' :' +
            asset.w +
            'x' +
            asset.h +
            ' url:' +
            asset.url
        );
        url = asset.url;
      }
    } else {
      console.warn('Images not processed for this file:' + fileDesc.name);
    }

    this.setImageURL(url, format);
  }

  /**
   * The setImageURL method.
   * @param {any} url - The url value.
   * @param {any} format - The format value.
   */
  setImageURL(url, format = 'RGB') {
    if (!format) {
      const suffixSt = url.lastIndexOf('.');
      if (suffixSt != -1) {
        const ext = url.substring(suffixSt).toLowerCase();
        if (ext == '.png') {
          format = 'RGBA';
        }
      }
    }
    this.format = format;
    this.__loaded = false;

    let imageElem;
    const loaded = () => {
      this.getDOMElement = () => {
        return imageElem
      };
      this.width = imageElem.width;
      this.height = imageElem.height;
      this.__data = imageElem;
      this.__loaded = true;
      this.loaded.emit();
    };
    const imageDataLibrary = FileImage$1.__imageDataLibrary();
    if (url in imageDataLibrary) {
      imageElem = imageDataLibrary[url];
      if (imageElem.complete) {
        loaded();
      } else {
        imageElem.addEventListener('load', loaded);
      }
    } else {
      imageElem = new Image();
      imageElem.crossOrigin = this.__crossOrigin;
      imageElem.src = url;

      imageElem.addEventListener('load', loaded);
      imageDataLibrary[url] = imageElem;
    }
  }
}

FileImage$1.registerLoader('jpg|jpeg|png', LDRImage);
sgFactory.registerClass('LDRImage', LDRImage);

/** Class representing a LDR (low dynamic range) video.
 * @extends FileImage
 */
class LDRVideo extends FileImage$1 {
  /**
   * Create a LDR video.
   * @param {string} name - The name value.
   * @param {any} filePath - The filePath value.
   * @param {any} params - The params value.
   */
  constructor(name, filePath, params) {
    super(name, filePath, params);
    this.format = 'RGB';
    this.type = 'UNSIGNED_BYTE';

    this.addParameter(new BooleanParameter('Mute', false));
    this.addParameter(new BooleanParameter('Loop', true));
    this.addParameter(new NumberParameter('Gain', 2.0)).setRange([0, 5]);
    this.addParameter(new BooleanParameter('SpatializeAudio', true));
    this.addParameter(new NumberParameter('refDistance', 2));
    this.addParameter(new NumberParameter('maxDistance', 10000));
    this.addParameter(new NumberParameter('rolloffFactor', 1));
    this.addParameter(new NumberParameter('coneInnerAngle', 360));
    this.addParameter(new NumberParameter('coneOuterAngle', 0));
    this.addParameter(new NumberParameter('coneOuterGain', 1));
  }

  /**
   * The __loadData method.
   * @param {any} fileDesc - The fileDesc value.
   * @private
   */
  __loadData(fileDesc) {
    resourceLoader.addWork(fileDesc.id, 1);

    const videoElem = document.createElement('video');
    // TODO - confirm its necessary to add to DOM
    videoElem.style.display = 'none';
    videoElem.preload = 'auto';
    videoElem.crossOrigin = 'anonymous';
    // videoElem.crossorigin = true;

    this.getAudioSource = () => {
      return videoElem
    };

    document.body.appendChild(videoElem);
    videoElem.addEventListener(
      'loadedmetadata',
      () => {
        // videoElem.play();

        const muteParam = this.getParameter('Mute');
        videoElem.muted = muteParam.getValue();
        muteParam.valueChanged.connect(() => {
          videoElem.muted = muteParam.getValue();
        });

        const loopParam = this.getParameter('Loop');
        videoElem.loop = loopParam.getValue();
        loopParam.valueChanged.connect(() => {
          videoElem.loop = loopParam.getValue();
        });

        this.width = videoElem.videoHeight;
        this.height = videoElem.videoWidth;
        this.__data = videoElem;
        this.__loaded = true;
        resourceLoader.addWorkDone(fileDesc.id, 1);
        this.loaded.emit(videoElem);

        let prevFrame = 0;
        const frameRate = 29.97;
        const timerCallback = () => {
          if (videoElem.paused || videoElem.ended) {
            return
          }
          // Check to see if the video has progressed to the next frame.
          // If so, then we emit and update, which will cause a redraw.
          const currentFrame = Math.floor(videoElem.currentTime * frameRate);
          if (prevFrame != currentFrame) {
            this.updated.emit();
            prevFrame = currentFrame;
          }
          setTimeout(timerCallback, 20); // Sample at 50fps.
        };
        timerCallback();
      },
      false
    );
    videoElem.src = fileDesc.url;
    // videoElem.load();
    const promise = videoElem.play();
    if (promise !== undefined) {
      promise
        .then(_ => {
          console.log('Autoplay started!');
          // Autoplay started!
        })
        .catch(() => {
          console.log('Autoplay was prevented.');
          // Autoplay was prevented.
          // Show a "Play" button so that user can start playback.
        });
    }
  }
}

FileImage$1.registerLoader('mp4|ogg', LDRVideo);
sgFactory.registerClass('LDRVideo', LDRVideo);

/** Class representing a GIF image.
 * @extends FileImage
 */
class GIFImage extends FileImage$1 {
  /**
   * Create a GIF image.
   * @param {string} name - The name value.
   * @param {any} filePath - The filePath value.
   * @param {any} params - The params value.
   */
  constructor(name, filePath = '', params = {}) {
    super(name, filePath, params);

    this.format = 'RGBA';
    this.type = 'UNSIGNED_BYTE';
    this.__streamAtlas = true;
    this.getParameter('FilePath').setSupportedExts('gif');

    this.addParameter(new Vec4Parameter('StreamAtlasDesc'));
    this.addParameter(new NumberParameter('StreamAtlasIndex', 0));

    const frameParam = this.getParameter('StreamAtlasIndex');
    frameParam.setRange([0, 1]);

    let playing;
    let frame = 0;
    const incrementFrame = numFrames => {
      frameParam.setValue(frame);
      if (playing)
        setTimeout(() => incrementFrame(numFrames), this.getFrameDelay(frame));
      frame = (frame + 1) % numFrames;
    };
    this.play = () => {
      this.__resourcePromise.then(() => {
        playing = true;
        const numFrames = frameParam.getRange()[1];
        incrementFrame(numFrames);
      });
    };
    this.stop = () => {
      playing = false;
    };
  }

  /**
   * The getFrameDelay method.
   * @param {number} index - The index value.
   * @return {any} - The return value.
   */
  getFrameDelay(index) {
    // Note: Frame delays are in centisecs (not millisecs which the timers will require.)
    return this.__unpackedData.frameDelays[index] * 10
  }

  /**
   * The __loadData method.
   * @param {any} fileDesc - The fileDesc value.
   * @private
   */
  __loadData(fileDesc) {
    // this.__streamAtlasDesc = new Vec4();

    const imageDataLibrary = FileImage$1.__imageDataLibrary();
    if (fileDesc.id in imageDataLibrary) {
      this.__resourcePromise = imageDataLibrary[fileDesc.id];
    } else {
      this.__resourcePromise = new Promise((resolve, reject) => {
        resourceLoader.addWork(fileDesc.id, 1);

        if (fileDesc.assets && fileDesc.assets.atlas) {
          const image = new Image();
          image.crossOrigin = 'anonymous';
          image.src = fileDesc.assets.atlas.url;
          image.addEventListener('load', () => {
            resolve({
              width: fileDesc.assets.atlas.width,
              height: fileDesc.assets.atlas.height,
              atlasSize: fileDesc.assets.atlas.atlasSize,
              frameDelays: fileDesc.assets.atlas.frameDelays,
              frameRange: [0, fileDesc.assets.atlas.frameDelays.length],
              imageData: image,
            });
            resourceLoader.addWorkDone(fileDesc.id, 1);
          });
          return
        }

        loadBinfile(
          fileDesc.url,
          data => {
            console.warn('Unpacking Gif client side:' + fileDesc.name);

            const start = performance.now();

            // Decompressing using: https://github.com/matt-way/gifuct-js
            const gif = new GIF(data);
            const frames = gif.decompressFrames(true);

            // do something with the frame data
            const sideLength = Math.sqrt(frames.length);
            const atlasSize = [sideLength, sideLength];
            if (Math.fract(sideLength) > 0.0) {
              atlasSize[0] = Math.floor(atlasSize[0] + 1);
              if (Math.fract(sideLength) > 0.5) {
                atlasSize[1] = Math.floor(atlasSize[1] + 1);
              } else {
                atlasSize[1] = Math.floor(atlasSize[1]);
              }
            }

            const width = frames[0].dims.width;
            const height = frames[0].dims.height;

            // gif patch canvas
            const tempCanvas = document.createElement('canvas');
            const tempCtx = tempCanvas.getContext('2d');
            // full gif canvas
            const gifCanvas = document.createElement('canvas');
            const gifCtx = gifCanvas.getContext('2d');

            gifCanvas.width = width;
            gifCanvas.height = height;

            // The atlas for all the frames.
            const atlasCanvas = document.createElement('canvas');
            const atlasCtx = atlasCanvas.getContext('2d');
            atlasCanvas.width = atlasSize[0] * width;
            atlasCanvas.height = atlasSize[1] * height;

            let frameImageData;
            const frameDelays = [];
            const renderFrame = (frame, index) => {
              const dims = frame.dims;

              // Note: the server side library returns centisecs for
              // frame delays, so normalize here so that client and servers
              // valueus are in the
              frameDelays.push(frame.delay / 10);

              if (
                !frameImageData ||
                dims.width != frameImageData.width ||
                dims.height != frameImageData.height
              ) {
                tempCanvas.width = dims.width;
                tempCanvas.height = dims.height;
                frameImageData = tempCtx.createImageData(
                  dims.width,
                  dims.height
                );
              }

              // set the patch data as an override
              frameImageData.data.set(frame.patch);
              tempCtx.putImageData(frameImageData, 0, 0);

              // Note: undocumented disposal method.
              // See Ids here: https://github.com/theturtle32/Flash-Animated-GIF-Library/blob/master/AS3GifPlayer/src/com/worlize/gif/constants/DisposalType.as
              // From what I can gather, 2 means we should clear the background first.
              // this seems towork with Gifs featuring moving transparency.
              // For fully opaque gifs, we should avoid this.
              if (frame.disposalType == 2)
                gifCtx.clearRect(0, 0, gifCanvas.width, gifCanvas.height);

              gifCtx.drawImage(tempCanvas, dims.left, dims.top);

              atlasCtx.drawImage(
                gifCanvas,
                (index % atlasSize[0]) * width,
                Math.floor(index / atlasSize[0]) * height
              );
            };

            for (let i = 0; i < frames.length; i++) {
              // console.log(frame);
              renderFrame(frames[i], i);
            }
            resourceLoader.addWorkDone(fileDesc.id, 1);

            const imageData = atlasCtx.getImageData(
              0,
              0,
              atlasCanvas.width,
              atlasCanvas.height
            );

            const ms = performance.now() - start;
            console.log(`Decode GIF '${fileDesc.name}' time:` + ms);

            resolve({
              width: atlasCanvas.width,
              height: atlasCanvas.height,
              atlasSize,
              frameRange: [0, frames.length],
              frameDelays,
              imageData,
            });
          },
          statusText => {
            console.warn(
              'Unable to Load URL:' + statusText + ':' + fileDesc.url
            );
            reject();
          }
        );
      });

      imageDataLibrary[fileDesc.id] = this.__resourcePromise;
    }

    this.__resourcePromise.then(unpackedData => {
      this.width = unpackedData.width;
      this.height = unpackedData.height;

      this.getParameter('StreamAtlasDesc').setValue(
        new Vec4$1(unpackedData.atlasSize[0], unpackedData.atlasSize[1], 0, 0)
      );
      this.getParameter('StreamAtlasIndex').setRange(unpackedData.frameRange);

      this.__unpackedData = unpackedData;
      this.__data = unpackedData.imageData;

      // ////////////////////////
      // Playback
      this.__loaded = true;

      this.loaded.emit();
    });
  }
}

FileImage$1.registerLoader('gif', GIFImage);
sgFactory.registerClass('GIFImage', GIFImage);

/** Class representing a VLH image.
 * @extends BaseImage
 */
class VLHImage extends BaseImage {
  /**
   * Create a VLH image.
   * @param {string} name - The name value.
   * @param {any} params - The params value.
   */
  constructor(name, params = {}) {
    let filepath;
    if (name != undefined && name.lastIndexOf('.') != -1) {
      filepath = name;
      name = name.substring(name.lastIndexOf('/') + 1, name.lastIndexOf('.'));
    }
    super(name, params);

    this.__loaded = false;
    this.__exposure = 1.0;
    this.__ambientLightFactor = 0.0;
    this.__hdrtint = new Color(1, 1, 1, 1);
    this.__stream = 'stream' in params ? params['stream'] : false;
    this.type = 'FLOAT';

    const fileParam = this.addParameter(new FilePathParameter('FilePath'));
    fileParam.valueChanged.connect(() => {
      this.loaded.untoggle();

      if (this.getName() == "") {
        // Generate a name from the file path.
        const stem = fileParam.getStem();
        const decorator = stem.substring(stem.length - 1);
        if (!isNaN(decorator)) {
          // Note: ALL image names have an LOD specifier at the end.
          // remove that off when retrieving the name.
          this.setName(stem.substring(0, stem.length - 1));
        } else {
          this.setName(stem);
        }
      }

      const fileId = fileParam.getValue();
      const file = fileParam.getFile();
      this.__loadVLH(fileId, file);
    });

    if (filepath) {
      this.getParameter('FilePath').setFilepath(filepath);
    }
  }

  /**
   * The getDOMElement method.
   * @return {any} - The return value.
   */
  getDOMElement() {
    return this.__domElement
  }

  /**
   * The getResourcePath method.
   * @return {any} - The return value.
   */
  getResourcePath() {
    return this.getParameter('FilePath').getValue()
  }

  /**
   * The __decodeData method.
   * @param {any} entries - The entries value.
   * @private
   */
  __decodeData(entries) {
    const ldr = entries.ldr;
    const cdm = entries.cdm;

    // ///////////////////////////////
    // Parse the data.
    const blob = new Blob([ldr.buffer]);
    const ldrPic = new Image();
    ldrPic.onload = () => {
      this.width = ldrPic.width;
      this.height = ldrPic.height;
      // console.log(resourcePath + ": [" + this.width + ", " + this.height + "]");
      this.__data = {
        ldr: ldrPic,
        cdm: cdm,
      };
      if (!this.__loaded) {
        this.__loaded = true;
        this.loaded.emit();
      } else {
        this.updated.emit();
      }
    };
    ldrPic.src = URL.createObjectURL(blob);
  }

  /**
   * The __loadVLH method.
   * @param {any} fileId - The fileId value.
   * @param {any} file - The file value.
   * @private
   */
  __loadVLH(fileId, file) {
    this.type = 'FLOAT';

    resourceLoader.loadUrl(fileId, file.url, entries => {
      if (!entries.ldr || !entries.cdm) {
        for (const name in entries) {
          if (name.endsWith('.jpg')) {
            entries.ldr = entries[name];
            delete entries[name];
          } else if (name.endsWith('.bin')) {
            entries.cdm = entries[name];
            delete entries[name];
          }
        }
      }
      this.__decodeData(entries);
    });
  }

  /**
   * The isStream method.
   * @return {boolean} - The return value.
   */
  isStream() {
    return false
  }

  /**
   * The isLoaded method.
   * @return {any} - The return value.
   */
  isLoaded() {
    return this.__loaded
  }

  /**
   * The getParams method.
   * @return {any} - The return value.
   */
  getParams() {
    const params = super.getParams();
    if (this.__loaded) {
      params['data'] = this.__data;
      params['exposure'] = this.__exposure;
    }
    return params
  }

  /**
   * The setHDRTint method.
   * @param {any} hdrtint - The hdrtint value.
   */
  setHDRTint(hdrtint) {
    this.__hdrtint = hdrtint;
  }

  /**
   * The getHDRTint method.
   * @return {any} - The return value.
   */
  getHDRTint() {
    return this.__hdrtint
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  toJSON(context, flags) {}

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} json - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(json, context, flags) {}

  /**
   * The readBinary method.
   * @param {object} reader - The reader value.
   * @param {object} context - The context value.
   */
  readBinary(reader, context) {
    // super.readBinary(reader, context);
    this.setName(reader.loadStr());
    const resourcePath = reader.loadStr();
    if (typeof resourcePath === 'string' && resourcePath != '') {
      if (context.lod >= 0) {
        const suffixSt = resourcePath.lastIndexOf('.');
        if (suffixSt != -1) {
          const lodPath =
            resourcePath.substring(0, suffixSt) +
            context.lod +
            resourcePath.substring(suffixSt);
          if (resourceLoader.resourceAvailable(lodPath)) {
            resourcePath = lodPath;
          }
        }
      }
      this.getParameter('FilePath').setValue(resourcePath);
    }
  }
}

sgFactory.registerClass('VLHImage', VLHImage);

const EnvMapMapping = {
  LATLONG: 1,
  OCTAHEDRAL: 2,
};

const step = (edge, x) => (x < edge ? 0.0 : 1.0);

function sum_vec2(value) {
  return value.dot(new Vec2(1.0, 1.0))
}
function abs_vec2(value) {
  return new Vec2(Math.abs(value.x), Math.abs(value.y))
}
function max_vec2(vec, value) {
  return new Vec2(Math.max(vec.x, value), Math.max(vec.y, value))
}
function abs_vec3(value) {
  return new Vec3$1(Math.abs(value.x), Math.abs(value.y), Math.abs(value.z))
}
function sectorize_vec2(value) {
  return new Vec2(
    step(0.0, value.x) * 2.0 - 1.0,
    step(0.0, value.y) * 2.0 - 1.0
  )
}
function sectorize_vec3(value) {
  return new Vec3$1(
    step(0.0, value.x) * 2.0 - 1.0,
    step(0.0, value.y) * 2.0 - 1.0,
    step(0.0, value.z) * 2.0 - 1.0
  )
}

function latLongUVsFromDir(dir) {
  // Math function taken from...
  // http://gl.ict.usc.edu/Data/HighResProbes/
  // Note: Scaling from u=[0,2], v=[0,1] to u=[0,1], v=[0,1]
  const phi = Math.acos(dir.z);
  const theta = Math.atan2(dir.x, -dir.y);
  return new Vec2((1 + theta / Math.PI) / 2, phi / Math.PI)
}

// Note: when u == 0.5 z = 1
function dirFromLatLongUVs(u, v) {
  // http://gl.ict.usc.edu/Data/HighResProbes/
  const theta = Math.PI * (u * 2 - 1);
  const phi = Math.PI * v;
  return new Vec3$1(sin(phi) * sin(theta), -sin(phi) * cos(theta), cos(phi))
}

function dirToSphOctUv(normal) {
  const aNorm = abs_vec3(normal);
  const sNorm = sectorize_vec3(normal);
  const aNorm_xy = new Vec2(aNorm.x, aNorm.y);

  let dir = max_vec2(aNorm_xy, 1e-20);
  const orient = Math.atan2(dir.x, dir.y) / Math.HALF_PI;

  dir = max_vec2(new Vec2(aNorm.z, aNorm_xy.length()), 1e-20);
  const pitch = Math.atan2(dir.y, dir.x) / Math.HALF_PI;

  let uv = new Vec2(sNorm.x * orient, sNorm.y * (1.0 - orient));
  uv.scaleInPlace(pitch);

  if (normal.z < 0.0) {
    const ts = new Vec2(uv.y, uv.x);
    const sNorm_xy = new Vec2(sNorm.x, sNorm.y);
    uv = sNorm_xy.subtract(abs_vec2(ts).multiply(sNorm_xy));
  }
  return uv.scale(0.5).add(new Vec2(0.5, 0.5))
}

function sphOctUvToDir(uv) {
  uv = uv.scale(2).subtract(new Vec2(1, 1));
  const suv = sectorize_vec2(uv);
  const sabsuv = sum_vec2(abs_vec2(uv));
  const pitch = sabsuv * Math.PI * 0.5;

  if (pitch <= 0.0) {
    return new Vec3$1(0.0, 0.0, 1.0)
  }
  if (Math.abs(pitch - Math.PI) < 0.000001) {
    return new Vec3$1(0.0, 0.0, -1.0)
  }
  if (sabsuv > 1.0) {
    const ts = Vec2(uv.y, uv.x);
    uv = abs_vec2(ts)
      .negate()
      .add(new Vec2(1, 1))
      .multiply(suv);

    sabsuv = sum_vec2(abs_vec2(uv));
  }

  const orient = (Math.abs(uv.x) / sabsuv) * Math.HALF_PI;
  const sOrient = Math.sin(orient);
  const cOrient = Math.cos(orient);
  const sPitch = Math.sin(pitch);
  const cPitch = Math.cos(pitch);

  return new Vec3$1(sOrient * suv.x * sPitch, cOrient * suv.y * sPitch, cPitch)
}

/** Class representing an environment map.
 * @extends VLHImage
 */
class EnvMap extends VLHImage {
  /**
   * Create an env map.
   * @param {string} name - The name value.
   * @param {any} params - The params value.
   */
  constructor(name, params = {}) {
    super(name, params);

    this.mapping = EnvMapMapping.OCTAHEDRAL;
  }

  /**
   * The __decodeData method.
   * @param {any} entries - The entries value.
   * @private
   */
  __decodeData(entries) {
    super.__decodeData(entries);

    const samples = entries.samples;

    if (samples) {
      if (window.TextDecoder)
        this.__sampleSets = JSON.parse(new TextDecoder('utf-8').decode(samples));
      else this.__sampleSets = JSON.parse(decodeText(samples));

      if (this.__sampleSets.luminanceThumbnail)
        this.__thumbSize = Math.sqrt(
          this.__sampleSets.luminanceThumbnail.length
        );
    }
  }

  /**
   * The getSampleSets method.
   * @return {any} - The return value.
   */
  getSampleSets() {
    return this.__sampleSets
  }

  /**
   * The uvToDir method.
   * @param {any} uv - The uv value.
   * @return {any} - The return value.
   */
  uvToDir(uv) {
    switch (this.mapping) {
      case EnvMapMapping.LATLONG:
        return dirFromLatLongUVs(uv)
      case EnvMapMapping.OCTAHEDRAL:
        return sphOctUvToDir(uv)
    }
  }

  /**
   * The dirToUv method.
   * @param {any} dir - The dir value.
   * @return {any} - The return value.
   */
  dirToUv(dir) {
    switch (this.mapping) {
      case EnvMapMapping.LATLONG:
        return latLongUVsFromDir(dir)
      case EnvMapMapping.OCTAHEDRAL:
        return dirToSphOctUv(dir)
    }
  }

  /**
   * The uvToLuminance method.
   * @param {any} uv - The uv value.
   * @return {any} - The return value.
   */
  uvToLuminance(uv) {
    const thmbPixel =
      Math.floor(uv.y * this.__thumbSize) * this.__thumbSize +
      Math.floor(uv.x * this.__thumbSize);
    return this.__sampleSets.luminanceThumbnail[thmbPixel]
  }

  /**
   * The dirToLuminance method.
   * @param {any} dir - The dir value.
   * @return {any} - The return value.
   */
  dirToLuminance(dir) {
    return this.uvToLuminance(this.dirToUv(dir))
  }
}

sgFactory.registerClass('EnvMap', EnvMap);

// eslint-disable-next-line require-jsdoc
function getFirstBrowserLanguage() {
  const nav = window.navigator;
  const browserLanguagePropertyKeys = [
    'language',
    'browserLanguage',
    'systemLanguage',
    'userLanguage',
  ];
  let i;
  let language;

  // support for HTML 5.1 "navigator.languages"
  if (Array.isArray(nav.languages)) {
    for (i = 0; i < nav.languages.length; i++) {
      language = nav.languages[i];
      if (language && language.length) {
        return language
      }
    }
  }

  // support for other well known properties in browsers
  for (i = 0; i < browserLanguagePropertyKeys.length; i++) {
    language = nav[browserLanguagePropertyKeys[i]];
    if (language && language.length) {
      return language
    }
  }

  return null
}

/** Class representing a label manager.
 * @private
 */
class LabelManager {
  /**
   * Create a label manager.
   */
  constructor() {
    this.__labelLibraries = {};
    this.labelLibraryLoaded = new Signal();

    const language = getFirstBrowserLanguage();
    if (language.startsWith('en')) this.__language = 'En';
    else if (language.startsWith('es')) this.__language = 'Es';
    else if (language.startsWith('fr')) this.__language = 'Fr';
    else if (language.startsWith('gb') || language.startsWith('de'))
      this.__language = 'Gb';

    this.__foundLabelLibraries = {};

    resourceLoader.registerResourceCallback('.labels', file => {
      const stem = file.name.split('.')[0]; // trim off the extension
      this.__foundLabelLibraries[stem] = file;
      loadTextfile(file.url, text => {
        this.__labelLibraries[stem] = JSON.parse(text);
        this.labelLibraryLoaded.emit(stem);
      });
    });

    if (window.XLSX) {
      // Note: example taken from here..
      // https://stackoverflow.com/questions/8238407/how-to-parse-excel-file-in-javascript-html5
      // and here:
      // https://github.com/SheetJS/js-xlsx/tree/master/demos/xhr
      resourceLoader.registerResourceCallback('.xlsx', file => {
        const stem = file.name.split('.')[0]; // trim off the extension
        this.__foundLabelLibraries[stem] = file;
        loadBinfile(file.url, data => {
          const unit8array = new Uint8Array(data);
          const workbook = XLSX.read(unit8array, {
            type: 'array',
          });

          const json = {};
          workbook.SheetNames.forEach(function(sheetName) {
            // Here is your object
            const rows = XLSX.utils.sheet_to_row_object_array(
              workbook.Sheets[sheetName]
            );
            rows.forEach(function(row) {
              const identifier = row.Identifier;
              delete row.Identifier;
              json[identifier] = row;
            });
          });

          this.__labelLibraries[stem] = json;
          this.labelLibraryLoaded.emit(stem);
        });
      });
    }
  }

  /**
   * Load a label library into the manager.
   * @param {string} name - The name of the library.
   * @param {json} json - The json data of of the library.
   */
  loadLibrary(name, json) {
    this.__foundLabelLibraries[name] = true;
    this.__labelLibraries[name] = json;
    this.labelLibraryLoaded.emit(name);
  }

  /**
   * Checks if the library is found.
   * @param {string} name - The name of the library.
   * @return {boolean} - Returns true if the library is found.
   */
  isLibraryFound(name) {
    return name in this.__foundLabelLibraries
  }

  /**
   * Checks if the library is loaded.
   * @param {string} name - The name of the library.
   * @return {boolean} - Returns true if the library is loaded.
   */
  isLibraryLoaded(name) {
    return name in this.__labelLibraries
  }

  /**
   * The getLabelText method.
   * @param {string} libraryName - The name of the library.
   * @param {string} labelName - The name of the label.
   * @return {string} - The return value.
   */
  getLabelText(libraryName, labelName) {
    const library = this.__labelLibraries[libraryName];
    if (!library) {
      throw new Error(
        "LabelLibrary: '" +
          libraryName +
          "' not found in LabelManager. Found: [" +
          Object.keys(this.__labelLibraries) +
          ']'
      )
    }
    const label = library[labelName];
    if (!label) {
      throw new Error(
        "Label: '" +
          labelName +
          "' not found in LabelLibrary: '" +
          libraryName +
          "'. Found: [" +
          Object.keys(library) +
          ']'
      )
    }
    const labelText = label[this.__language];
    if (!labelText) {
      if (label['En']) return label['En']
      throw new Error(
        "labelText: '" +
          language +
          "' not found in Label. Found: [" +
          Object.keys(label) +
          ']'
      )
    }
    return labelText
  }

  /**
   * The setLabelText method.
   * @param {string} libraryName - The name of the library.
   * @param {string} labelName - The name of the label.
   * @param {string} labelText - The text of the label.
   */
  setLabelText(libraryName, labelName, labelText) {
    let library = this.__labelLibraries[libraryName];
    if (!library) {
      library = {};
      this.__labelLibraries[libraryName] = library;
    }
    let label = library[labelName];
    if (!label) {
      label = {};
      library[labelName] = label;
    }
    label[this.__language] = labelText;
    // TODO: Push to server.
  }

  setLanguage(ln) {
    this.__language = ln;
  }
}

const labelManager = new LabelManager();

// http://stackoverflow.com/questions/1255512/how-to-draw-a-rounded-rectangle-on-html-canvas
/**
 * Draws a rounded rectangle using the current state of the canvas.
 * If you omit the last three params, it will draw a rectangle
 * outline with a 5 pixel border radius
 * @param {CanvasRenderingContext2D} ctx
 * @param {Number} x - The top left x coordinate
 * @param {Number} y - The top left y coordinate
 * @param {Number} width - The width of the rectangle
 * @param {Number} height - The height of the rectangle
 * @param {Number} [radius = 5] - The corner radius; It can also be an object
 *                 to specify different radii for corners
 * @param {Number} [radius.tl = 0] - Top left
 * @param {Number} [radius.tr = 0] - Top right
 * @param {Number} [radius.br = 0] - Bottom right
 * @param {Number} [radius.bl = 0] - Bottom left
 * @param {Boolean} [fill = false] - Whether to fill the rectangle.
 * @param {Boolean} [stroke = true] - Whether to stroke the rectangle.
 * @param {Number} [strokeWidth] - The strokeWidth param.
 * @private
 */
function roundRect(
  ctx,
  x,
  y,
  width,
  height,
  radius,
  fill,
  stroke,
  strokeWidth
) {
  if (typeof stroke == 'undefined') {
    stroke = true;
  }
  if (typeof radius === 'undefined') {
    radius = 5;
  }
  if (typeof radius === 'number') {
    radius = {
      tl: radius,
      tr: radius,
      br: radius,
      bl: radius,
    };
  } else {
    const defaultRadius = {
      tl: 0,
      tr: 0,
      br: 0,
      bl: 0,
    };
    for (const side in defaultRadius) {
      radius[side] = radius[side] || defaultRadius[side];
    }
  }
  ctx.beginPath();
  ctx.moveTo(x + radius.tl, y);
  ctx.lineTo(x + width - radius.tr, y);
  ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);
  ctx.lineTo(x + width, y + height - radius.br);
  ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);
  ctx.lineTo(x + radius.bl, y + height);
  ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);
  ctx.lineTo(x, y + radius.tl);
  ctx.quadraticCurveTo(x, y, x + radius.tl, y);
  ctx.closePath();
  if (fill) {
    ctx.fill();
  }
  if (stroke) {
    ctx.lineWidth = strokeWidth;
    ctx.stroke();
  }
}

/** Class representing a label.
 * @extends DataImage
 */
class Label extends DataImage {
  /**
   * Create a label.
   * @param {string} name - The name value.
   * @param {any} library - The library value.
   */
  constructor(name, library) {
    super(name);

    this.__canvasElem = document.createElement('canvas');
    const fontSize = 22;

    const libraryParam = this.addParameter(new StringParameter('library'));
    this.addParameter(new StringParameter('text', ''));
    // or load the label when it is loaded.

    // const setLabelTextToLibrary = ()=>{
    //     const library = libraryParam.getValue();
    //     const name = this.getName();
    //     const text = textParam.getValue();
    //     labelManager.setLabelTextToLibrary(library, name, text);
    // }
    // textParam.valueChanged.connect(setLabelText);

    this.addParameter(new ColorParameter('fontColor', new Color(0, 0, 0)));
    // this.addParameter(new StringParameter('textAlign', 'left'))
    // this.addParameter(MultiChoiceParameter('textAlign', 0, ['left', 'right']));
    // this.addParameter(new BooleanParameter('fillText', true))
    this.addParameter(new NumberParameter('margin', fontSize * 0.5));
    this.addParameter(new NumberParameter('borderWidth', 2));
    this.addParameter(new NumberParameter('borderRadius', fontSize * 0.5));
    this.addParameter(new BooleanParameter('outline', false));
    this.addParameter(new BooleanParameter('outlineColor', new Color(0, 0, 0)));
    this.addParameter(new BooleanParameter('background', true));
    this.addParameter(
      new ColorParameter('backgroundColor', new Color('#FBC02D'))
    );
    this.addParameter(new BooleanParameter('fillBackground', true));
    this.addParameter(new BooleanParameter('strokeBackgroundOutline', true));
    this.addParameter(new NumberParameter('fontSize', 22));
    this.addParameter(new StringParameter('font', 'Helvetica'));

    const reload = () => {
      this.loadLabelData();
    };
    this.nameChanged.connect(reload);

    if (library) libraryParam.setValue(library);

    this.__requestedRerender = false;
    this.__needsRender = false;
    this.labelRendered = new Signal();
    this.loadLabelData();
  }

  /**
   * This method can be overrridden in derived classes
   * to perform general updates (see GLPass or BaseItem).
   * @param {any} param - The param param.
   * @param {any} mode - The mode param.
   * @private
   */
  __parameterValueChanged(param, mode) {
    if (!this.__requestedRerender) {
      this.__requestedRerender = true;
      this.loadLabelData();
    }
  }

  /**
   * The loadLabelData method.
   */
  loadLabelData() {
    const onLoaded = () => {
      this.__requestedRerender = false;
      this.__needsRender = true;
      if (!this.__loaded) {
        this.__loaded = true;
        this.loaded.emit();
      } else {
        this.updated.emit();
      }
    };

    const loadText = () => {
      return new Promise(resolve => {
        const library = this.getParameter('library').getValue();
        if (library == '') {
          resolve();
          return
        }
        if (!labelManager.isLibraryFound(library)) {
          console.warn('Label Libary not found:', library);
          resolve();
          return
        }
        const getLibraryText = () => {
          try {
            const name = this.getName();
            // console.log("Text Loaded:" + name);
            const text = labelManager.getLabelText(library, name);
            this.getParameter('text').setValue(text);
          } catch (e) {
            // Note: if the text is not found in the labels pack
            // an exception is thrown, and we catch it here.
            console.warn(e);
          }
          resolve();
        };
        if (!labelManager.isLibraryLoaded(library)) {
          labelManager.labelLibraryLoaded.connect(loadedLibrary => {
            if (loadedLibrary == library) getLibraryText();
          });
        } else {
          getLibraryText();
        }
      })
    };
    const loadFont = () => {
      return new Promise(resolve => {
        if (document.fonts != undefined) {
          const font = this.getParameter('font').getValue();
          const fontSize = this.getParameter('fontSize').getValue();
          document.fonts.load(fontSize + 'px "' + font + '"').then(() => {
            // console.log("Font Loaded:" + font);
            resolve();
          });
        } else {
          resolve();
        }
      })
    };
    Promise.all([loadText(), loadFont()]).then(onLoaded);
  }

  /**
   * Renders the label text to a canvas element ready to display,
   */
  renderLabelToImage() {
    // console.log("renderLabelToImage")
    const ctx2d = this.__canvasElem.getContext('2d', {
      alpha: true,
    });

    let text = this.getParameter('text').getValue();
    if (text == '') text = this.getName();

    const font = this.getParameter('font').getValue();
    const fontColor = this.getParameter('fontColor').getValue();
    const textAlign = 'left';//this.getParameter('textAlign').getValue()
    const fontSize = this.getParameter('fontSize').getValue();
    const margin = this.getParameter('margin').getValue();
    const borderWidth = this.getParameter('borderWidth').getValue();
    const borderRadius = this.getParameter('borderRadius').getValue();
    const outline = this.getParameter('outline').getValue();
    const outlineColor = this.getParameter('outlineColor').getValue();
    const background = this.getParameter('background').getValue();
    const backgroundColor = this.getParameter('backgroundColor').getValue();
    const fillBackground = this.getParameter('fillBackground').getValue();
    const strokeBackgroundOutline = this.getParameter(
      'strokeBackgroundOutline'
    ).getValue();

    // let ratio = devicePixelRatio / backingStoreRatio;
    const marginAndBorder = margin + borderWidth;
    const lines = text.split('\n');

    ctx2d.font = fontSize + 'px "' + font + '"';
    // console.log("renderLabelToImage:" + ctx2d.font);
    let width = 0;
    lines.forEach(line => {
      width = Math.max(ctx2d.measureText(line).width, width);
    });
    const fontHeight = fontSize;//parseInt(fontSize)
    this.width = Math.ceil(width + marginAndBorder * 2);
    this.height = Math.ceil(fontHeight * lines.length + marginAndBorder * 2);
    ctx2d.canvas.width = this.width;
    ctx2d.canvas.height = this.height;
    this.__canvasElem.width = this.width;
    this.__canvasElem.height = this.height;

    // ctx2d.clearRect(0, 0, this.width, this.height);
    ctx2d.fillStyle = 'rgba(0, 0, 0, 0.0)';
    ctx2d.fillRect(0, 0, this.width, this.height);

    if (background) {
      ctx2d.fillStyle = backgroundColor.toHex();
      ctx2d.strokeStyle = outlineColor.toHex();
      roundRect(
        ctx2d,
        borderWidth,
        borderWidth,
        this.width - borderWidth * 2,
        this.height - borderWidth * 2,
        borderRadius,
        fillBackground,
        strokeBackgroundOutline,
        borderWidth
      );
    }

    ctx2d.font = fontSize + 'px "' + font + '"';
    ctx2d.textAlign = textAlign;
    ctx2d.fillStyle = fontColor.toHex();
    ctx2d.textBaseline = 'hanging';
    lines.forEach((line, index) => {
      ctx2d.fillText(
        line,
        marginAndBorder,
        marginAndBorder + index * fontHeight
      );
    });

    if (outline) {
      ctx2d.strokeStyle = outlineColor.toHex();
      ctx2d.lineWidth = 1.5;
      ctx2d.strokeText(text, marginAndBorder, marginAndBorder);
    }

    this.__data = ctx2d.getImageData(0, 0, this.width, this.height);
    this.__needsRender = false;
    this.labelRendered.emit({
      width: this.width,
      height: this.height,
      data: this.__data
    });
  }

  /**
   * The getParams method.
   * @return {any} - The return value.
   */
  getParams() {
    if (this.__needsRender) this.renderLabelToImage();
    return super.getParams()
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    const j = super.toJSON(context, flags);
    return j
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    super.fromJSON(j, context, flags);
    this.__getLabelText();
  }
}

sgFactory.registerClass('Label', Label);

/** Class representing a 2D video stream image.
 * @extends BaseImage
 */
class VideoStreamImage2D extends BaseImage {
  /**
   * Create a 2D video stream image.
   */
  constructor() {
    super();
    this.__loaded = false;
  }

  /**
   * The connectWebcam method.
   * @param {number} width - The width of the video.
   * @param {number} height - The height of the video.
   * @param {false} rearCamera - Boolean determining if it is a rear camera or not.
   */
  connectWebcam(width, height, rearCamera = false) {
    const video = {
      width,
      height,
      frameRate: {
        ideal: 60,
        max: 60,
      },
    };
    if (rearCamera) {
      video.facingMode = {
        exact: 'environment',
      };
    } else {
      video.facingMode = {
        facingMode: 'user',
      };
    }

    const domElement = document.createElement('video');
    // TODO - confirm its necessary to add to DOM
    domElement.style.display = 'none';
    domElement.preload = 'auto';
    domElement.crossOrigin = 'anonymous';
    // domElement.crossorigin = true;
    document.body.appendChild(domElement);

    // List cameras and microphones.
    // navigator.mediaDevices.enumerateDevices()
    //     .then((devices)=>{
    //         // devices.forEach((device)=>{
    //         //     if (device.kind == "videoinput") {
    //         //         console.log(device.kind + ": " + device.label + " id = " + device.deviceId);
    //         //         videoinputs.push(device);
    //         //     }
    //         // });

    //     })
    //     .catch(function(err) {
    //         console.log(err.name + ": " + err.message);
    //     });

    navigator.mediaDevices
      .getUserMedia({
        audio: false,
        video,
      })
      .then(mediaStream => {
        domElement.srcObject = mediaStream;
        domElement.onloadedmetadata = e => {
          domElement.play();

          this.width = domElement.videoWidth;
          this.height = domElement.videoHeight;
          console.log('Webcam:[' + this.width + ', ' + this.height + ']');
          this.__data = domElement;
          this.__loaded = true;
          this.loaded.emit(domElement);

          let prevFrame = 0;
          const frameRate = 60;
          const timerCallback = () => {
            if (domElement.paused || domElement.ended) {
              return
            }
            // Check to see if the video has progressed to the next frame.
            // If so, then we emit and update, which will cause a redraw.
            const currentFrame = Math.floor(domElement.currentTime * frameRate);
            if (prevFrame != currentFrame) {
              this.updated.emit();
              prevFrame = currentFrame;
            }
            setTimeout(timerCallback, 20); // Sample at 50fps.
          };
          timerCallback();
        };
      })
      .catch(function(err) {
        /* handle the error */
      });
  }

  /**
   * The setVideoStream method.
   * @param {any} video - The video value.
   */
  setVideoStream(video) {
    this.__loaded = false;
    this.width = video.videoWidth;
    this.height = video.videoHeight;
    this.start();
    this.__data = video;
    this.__loaded = true;
    this.loaded.emit(video);
  }

  // getAudioSource() {
  //     return this.__data;
  // }

  /**
   * The stop method.
   */
  stop() {
    clearInterval(this.__intervalId);
  }

  /**
   * The start method.
   */
  start() {
    this.__intervalId = setInterval(() => {
      this.updated.emit();
    }, 20); // Sample at 50fps.
  }

  /**
   * The isLoaded method.
   * @return {boolean} - The return value.
   */
  isLoaded() {
    return this.__loaded
  }

  /**
   * The getParams method.
   * @return {any} - The return value.
   */
  getParams() {
    return {
      type: this.type,
      format: this.format,
      width: this.width,
      height: this.height,
      data: this.__data,
      flipY: this.getParameter('FlipY').getValue(),
    }
  }
}

sgFactory.registerClass('VideoStreamImage2D', VideoStreamImage2D);

/** Class representing a material library in a scene tree. 
 * @private
*/
class MaterialLibrary {
  /**
   * Create a material library.
   * @param {string} name - The name of the material library.
   */
  constructor(name = 'MaterialLibrary') {
    this.__name = name;

    this.lod = 0;
    if (SystemDesc.isMobileDevice) this.lod = 1;
    this.loaded = new Signal();

    this.clear();
  }

  /**
   * The clear method.
   */
  clear() {
    this.__images = {};
    this.__materials = {
      Default: new Material('Default', 'SimpleSurfaceShader'),
    };
  }

  /**
   * The getPath method.
   * @return {any} - The return value.
   */
  getPath() {
    return [this.__name]
  }

  /**
   * The getNumMaterials method.
   * @return {any} - The return value.
   */
  getNumMaterials() {
    return Object.keys(this.__materials).length
  }

  /**
   * The getMaterials method.
   * @return {any} - The return value.
   */
  getMaterials() {
    return Object.values(this.__materials)
  }

  /**
   * The getMaterialNames method.
   * @return {any} - The return value.
   */
  getMaterialNames() {
    const names = [];
    for (const name in this.__materials) {
      names.push(name);
    }
    return names
  }

  /**
   * The hasMaterial method.
   * @param {string} name - The name value.
   * @return {any} - The return value.
   */
  hasMaterial(name) {
    return name in this.__materials
  }

  /**
   * Add a material.
   * @param {Material} material - The material value.
   */
  addMaterial(material) {
    material.setOwner(this);
    this.__materials[material.getName()] = material;
  }

  /**
   * The getMaterial method.
   * @param {string} name - The material name.
   * @param {Boolean} assert - The assert value.
   * @return {any} - The return value.
   */
  getMaterial(name, assert = true) {
    const res = this.__materials[name];
    if (!res && assert) {
      throw new Error(
        'Material:' + name + ' not found in library:' + this.getMaterialNames()
      )
    }
    return res
  }

  /**
   * The hasImage method.
   * @param {string} name - The material name.
   * @return {any} - The return value.
   */
  hasImage(name) {
    return name in this.__images
  }

  /**
   * The addImage method.
   * @param {any} image - The image value.
   */
  addImage(image) {
    image.setOwner(this);
    this.__images[image.getName()] = image;
  }

  /**
   * The getImage method.
   * @param {string} name - The material name.
   * @param {boolean} assert - The assert value.
   * @return {any} - The return value.
   */
  getImage(name, assert = true) {
    const res = this.__images[name];
    if (!res && assert) {
      throw new Error(
        'Image:' + name + ' not found in library:' + this.getImageNames()
      )
    }
    return res
  }

  /**
   * The getImageNames method.
   * @return {any} - The return value.
   */
  getImageNames() {
    const names = [];
    for (const name in this.__images) {
      names.push(name);
    }
    return names
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The load method.
   * @param {any} filePath - The file path.
   */
  load(filePath) {
    const xhr = new XMLHttpRequest();
    xhr.open('GET', filePath, true);
    xhr.ontimeout = () => {
      throw new Error('The request for ' + filePath + ' timed out.')
    };
    xhr.onload = () => {
      if (xhr.readyState === 4) {
        if (xhr.status === 200) {
          this.fromJSON(JSON.parse(xhr.responseText));
        } else {
          console.warn(xhr.statusText);
        }
      }
    };
    xhr.send(null);
  }

  /**
   * The toJSON method encodes the current object as a json object.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context = {}, flags = 0) {
    return {
      numMaterials: this.geoms.length(),
    }
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context = {}, flags = 0) {
    context.lod = this.lod;
    for (const name in j.textures) {
      const image = new FileImage$1(name);
      image.fromJSON(j.textures[name]);
      this.__images[name] = texture;
    }
    for (const name in j.materials) {
      const material = new Material(name);
      material.fromJSON(j.materials[name]);
      this.addMaterial(material);
    }
  }

  /**
   * The readBinary method.
   * @param {object} reader - The reader value.
   * @param {object} context - The context value.
   */
  readBinary(reader, context = {}) {
    // if (context.version == undefined) context.version = 0

    this.name = reader.loadStr();

    // Specify the Lod to load the images in this library.
    context.lod = this.lod;
    context.materialLibrary = this;

    const numTextures = reader.loadUInt32();
    for (let i = 0; i < numTextures; i++) {
      const type = reader.loadStr();
      const texture = sgFactory.constructClass(type, undefined);
      texture.readBinary(reader, context);
      this.__images[texture.getName()] = texture;
    }
    const numMaterials = reader.loadUInt32();
    if (numMaterials > 0) {
      const toc = reader.loadUInt32Array(numMaterials);
      for (let i = 0; i < numMaterials; i++) {
        const material = new Material('');
        reader.seek(toc[i]); // Reset the pointer to the start of the item data.
        material.readBinary(reader, context, this.__images);
        this.addMaterial(material);
      }
    }

    this.loaded.emit();
  }

  /**
   * The toString method.
   * @return {any} - The return value.
   */
  toString() {
    return JSON.stringify(this.toJSON(), null, 2)
  }
}

/** Class representing a material library manager. 
 * @private
*/
class MaterialLibraryManager {
  /**
   * Create a material library manager.
   */
  constructor() {
    this.__materialLibraries = {};
    this.materialLibraryLoaded = new Signal();

    resourceLoader.registerResourceCallback('.matlib', file => {
      loadTextfile(file.url, data => {
        const stem = file.name.split('.')[0]; // trim off the extension
        const j = JSON.parse(data);
        const matlib = new MaterialLibrary(stem);
        matlib.fromJSON(j);
        this.__materialLibraries[stem] = matlib;
        this.materialLibraryLoaded.emit(matlib);
      });
    });
  }

  /**
   * The getMaterialLibraryNames method.
   * @return {any} - The return value.
   */
  getMaterialLibraryNames() {
    const names = [];
    for (const name in this.__materialLibraries) {
      names.push(name);
    }
    return names
  }

  /**
   * The hasMaterialLibrary method.
   * @param {string} name - The name value.
   * @return {any} - The return value.
   */
  hasMaterialLibrary(name) {
    return name in this.__materialLibraries
  }

  /**
   * The getMaterialLibrary method.
   * @param {string} name - The name value.
   * @return {any} - The return value.
   */
  getMaterialLibrary(name) {
    const res = this.__materialLibraries[name];
    if (!res) {
      console.warn(
        'MaterialLibrary:' +
          name +
          ' not found in MaterialLibraryManager. Found: [' +
          this.getMaterialLibraryNames() +
          ']'
      );
    }
    return res
  }

  /**
   * The resolveMaterialFromPath method.
   * @param {any} path - The path value.
   * @return {any} - The return value.
   */
  resolveMaterialFromPath(path) {
    const materialLibrary = this.getMaterialLibrary(path[0]);
    if (materialLibrary) return materialLibrary.getMaterial(path[1])
  }
}

const materialLibraryManager = new MaterialLibraryManager();

/** Class representing a material parameter.
 * @extends Parameter
 */
class MaterialParameter extends Parameter {
  /**
   * Create a material parameter.
   * @param {string} name - The name of the material parameter.
   * @param {any} value - The value of the parameter.
   */
  constructor(name, value) {
    super(name, value, 'Material');
    this.valueParameterValueChanged = new Signal();
  }

  /**
   * The setValue method.
   * @param {any} material - The material param.
   * @param {number} mode - The mode param.
   */
  setValue(material, mode = ValueSetMode.USER_SETVALUE) {
    // 0 == normal set. 1 = changed via cleaner fn, 2 = change by loading/cloning code.
    if (this.__value !== material) {
      if (this.__value) {
        this.__value.parameterValueChanged.disconnect(
          this.valueParameterValueChanged.emit
        );
      }
      this.__value = material;
      if (this.__value) {
        this.__value.parameterValueChanged.connect(
          this.valueParameterValueChanged.emit
        );
      }
      if (
        mode == ValueSetMode.USER_SETVALUE ||
        mode == ValueSetMode.REMOTEUSER_SETVALUE
      ) {
        this.__flags |= ParamFlags.USER_EDITED;
      }

      // During the cleaning process, we don't want notifications.
      if (mode != ValueSetMode.OPERATOR_SETVALUE) this.valueChanged.emit(mode);
    }
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    if ((this.__flags & ParamFlags.USER_EDITED) == 0) return
    return {
      value: this.__value.getPath(),
    }
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    if (j.value == undefined) {
      console.warn('Invalid Parameter JSON');
      return
    }
    const materialPath = j.value;

    const material = materialLibraryManager.resolveMaterialFromPath(
      materialPath
    );
    if (material) this.setValue(material);
    this.__flags |= ParamFlags.USER_EDITED;
  }

  // ////////////////////////////////////////
  // Clone and Destroy

  /**
   * The clone method constructs a new material parameter, copies its values
   * from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {MaterialParameter} - Returns a new material parameter.
   */
  clone(flags) {
    const clonedParam = new MaterialParameter(this.__name, this.__value);
    return clonedParam
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    // Note: Some parameters hold refs to geoms/materials,
    // which need to be explicitly cleaned up.
    // E.g. freeing GPU Memory.

    if (this.__value) {
      this.__value.parameterValueChanged.disconnect(
        this.valueParameterValueChanged.emit
      );
    }
  }
}

function isTypedArray(obj) {
  return !!obj && obj.byteLength !== undefined
}

/** Class representing an attribute. */
class Attribute$1 {
  /**
   * Create an attribute.
   * @param {any} dataType - The dataType value.
   * @param {any} expectedSize - The expectedSize value.
   * @param {any} defaultValue - The defaultValue value.
   */
  constructor(dataType, expectedSize, defaultValue = undefined) {
    this.__dataType = dataType;
    this.normalized = false;
    if (dataType.numElements != undefined) {
      this.__dimension = this.__dataType.numElements();
    } else {
      switch (dataType) {
        case Float32:
        case UInt32:
        case SInt32:
          this.__dimension = 1;
          break
        default:
          throw new Error('Invalid data type for attribute:' + dataType)
      }
    }
    this.__defaultElementValue =
      defaultValue != undefined ? defaultValue : Number.MAX_VALUE;
    if (isTypedArray(expectedSize)) {
      this.__data = expectedSize;
    } else {
      this.__data = new Float32Array(expectedSize * this.__dimension);
      this.initRange(0);
    }
  }

  /**
   * The resize method.
   * @param {any} size - The size value.
   */
  resize(size) {
    const prevLength = this.__data.length;
    const newLength = size * this.__dimension;
    const data = new Float32Array(newLength);
    for (let i = 0; i < Math.min(this.__data.length, newLength); i++) {
      data[i] = this.__data[i];
    }
    if (this.__data.length < newLength) this.__data = data;
    this.initRange(prevLength);
  }

  /**
   * The initRange method.
   * @param {any} start - The start value.
   */
  initRange(start) {
    // Initialize the values to invalid values.
    for (let i = start; i < this.__data.length; i++) {
      this.__data[i] = this.__defaultElementValue;
    }
  }

  /**
   * The getCount method.
   * @return {any} - The return value.
   */
  getCount() {
    return this.__data.length / this.__dimension
  }

  /**
   * Getter for length.
   * @return {any} - The return value.
   */
  get length() {
    return this.__data.length / this.__dimension
  }

  /**
   * Getter for data.
   * @return {any} - The return value.
   */
  get dataType() {
    return this.__dataType
  }

  /**
   * Getter for data.
   * @return {any} - The return value.
   */
  get data() {
    return this.__data
  }

  /**
   * Setter for data.
   * @param {any} data - The data value.
   */
  set data(data) {
    this.__data = data;
  }

  /**
   * Getter for numElements.
   * @return {any} - The return value.
   */
  get numElements() {
    return this.__dimension
  }

  /**
   * The getFloat32Value method.
   * @param {number} index - The index value.
   * @return {any} - The return value.
   */
  getFloat32Value(index) {
    return this.__data[index]
  }

  /**
   * The setFloat32Value method.
   * @param {number} index - The index value.
   * @param {any} value - The value param.
   */
  setFloat32Value(index, value) {
    this.__data[index] = value;
  }

  /**
   * The getValueRef method.
   * @param {number} index - The index value.
   * @return {any} - The return value.
   */
  getValueRef(index) {
    const numElems = this.__dimension;
    if (index >= this.__data.length / numElems)
      throw new Error(
        'Invalid vertex index:' +
          index +
          '. Num Vertices:' +
          this.__data.length / 3
      )
    return this.__dataType.createFromFloat32Buffer(
      this.__data.buffer,
      index * numElems
    )
  }

  /**
   * The setValue method.
   * @param {number} index - The index value.
   * @param {any} value - The value param.
   */
  setValue(index, value) {
    const numElems = this.__dimension;
    if (index >= this.__data.length / numElems)
      throw new Error(
        'Invalid vertex index:' +
          index +
          '. Num Vertices:' +
          this.__data.length / 3
      )
    this.__dataType
      .createFromFloat32Buffer(this.__data.buffer, index * numElems)
      .setFromOther(value);
  }

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    return {
      data: Array.from(this.__data),
      dataType: typeRegistry.getTypeName(this.__dataType),
      defaultValue: this.__defaultElementValue,
      length: this.__data.length / this.__dimension,
    }
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   */
  fromJSON(j) {
    this.__data = Float32Array.from(j.data);
  }

  /**
   * The toString method.
   * @return {any} - The return value.
   */
  toString() {
    return JSON.stringify(this.toJSON(), null, 2)
  }
}

// Defines used to explicity specify types for WebGL.
const SAVE_FLAG_SKIP_GEOMDATA = 1 << 10;
function isTypedArray$1(obj) {
  return !!obj && obj.byteLength !== undefined
}

/** Class representing a base geometry.
 * @extends ParameterOwner
 */
class BaseGeom extends ParameterOwner {
  /**
   * Create a base geom.
   */
  constructor() {
    super();
    this.__boundingBox = new Box3$1();
    this.__boundingBoxDirty = true;
    this.__vertexAttributes = new Map();
    this.__metaData = new Map();
    this.addVertexAttribute('positions', Vec3$1, 0.0);

    this.boundingBoxDirtied = new Signal();
    this.geomDataChanged = new Signal();
    this.geomDataTopologyChanged = new Signal();
  }

  /**
   * The setDebugName method.
   * @param {string} name - The debug name value.
   */
  setDebugName(name) {
    this.__name = name;
  }

  /**
   * The addVertexAttribute method.
   * @param {string} name - The name of the vertex attribute.
   * @param {any} dataType - The dataType value.
   * @param {number} defaultScalarValue - Thedefault scalar value.
   * @return {Attribute} - Returns an attribute.
   */
  addVertexAttribute(name, dataType, defaultScalarValue = undefined) {
    let attr;
    if (isTypedArray$1(defaultScalarValue)) {
      attr = new Attribute$1(dataType, defaultScalarValue);
    } else {
      attr = new Attribute$1(
        dataType,
        this.vertices != undefined ? this.vertices.length : 0,
        defaultScalarValue
      );
    }
    this.__vertexAttributes.set(name, attr);
    return attr
  }

  /**
   * The hasVertexAttribute method.
   * @param {string} name - The name of the vertex attribute.
   * @return {any} - The return value.
   */
  hasVertexAttribute(name) {
    return this.__vertexAttributes.has(name)
  }

  /**
   * The getVertexAttribute method.
   * @param {string} name - The name of the vertex attribute.
   * @return {any} - The return value.
   */
  getVertexAttribute(name) {
    return this.__vertexAttributes.get(name)
  }

  /**
   * The getVertexAttributes method.
   * @param {string} name - The name of the vertex attribute.
   * @return {any} - The return value.
   */
  getVertexAttributes(name) {
    const vertexAttributes = {};
    for (const [key, attr] of this.__vertexAttributes.entries())
      vertexAttributes[key] = attr;
    return vertexAttributes
  }

  /**
   * Getter for vertices.
   */
  get vertices() {
    return this.__vertexAttributes.get('positions')
  }

  /**
   * The numVertices method.
   * @return {number} - The return value.
   */
  numVertices() {
    return this.vertices.length
  }

  /**
   * The getNumVertices method.
   * @return {number} - The return value.
   */
  getNumVertices() {
    return this.vertices.length
  }

  /**
   * The setNumVertices method.
   * @param {number} count - The count value.
   */
  setNumVertices(count) {
    // If this works, remove the old version.
    // for (let [key, attr] of this.__vertexAttributes.entries())
    //     attr.resize(count);
    this.__vertexAttributes.forEach(attr => attr.resize(count));
  }

  /**
   * The getVertex method.
   * @param {number} index - The index value.
   * @return {Vec3} - Returns a Vec3.
   */
  getVertex(index) {
    return Vec3$1.createFromFloat32Buffer(this.vertices.data.buffer, index * 3)
  }

  /**
   * The setVertex method.
   * @param {index} index - The index value.
   * @param {Vec3} vec3 - The vec3 value.
   * @return {Vec3} - Returns a Vec3.
   */
  setVertex(index, vec3) {
    return Vec3$1.createFromFloat32Buffer(
      this.vertices.data.buffer,
      index * 3
    ).setFromOther(vec3)
  }

  /**
   * The moveVertices method.
   * @param {any} delta - The delta value.
   */
  moveVertices(delta) {
    const vertices = this.vertices;
    for (let i = 0; i < vertices.length; i++)
      vertices.getValueRef(i).addInPlace(delta);
    this.setBoundingBoxDirty();
  }

  /**
   * The transformVertices method.
   * @param {Xfo} xfo - The xfo tranform.
   */
  transformVertices(xfo) {
    const vertices = this.vertices;
    for (let i = 0; i < vertices.length; i++) {
      const v = vertices.getValueRef(i);
      const v2 = xfo.transformVec3(v);
      v.set(v2.x, v2.y, v2.z);
    }
    this.setBoundingBoxDirty();
  }

  // ////////////////////////////////////////
  // BoundingBox

  /**
   * The boundingBox method.
   * @return {any} - The return value.
   */
  get boundingBox() {
    if (this.__boundingBoxDirty) this.updateBoundingBox();
    return this.__boundingBox
  }

  /**
   * The setBoundingBoxDirty method.
   */
  setBoundingBoxDirty() {
    this.__boundingBoxDirty = true;
    this.boundingBoxDirtied.emit();
  }

  /**
   * The updateBoundingBox method.
   */
  updateBoundingBox() {
    const vertices = this.vertices;
    const bbox = new Box3$1();
    const numVerts = vertices.length;
    for (let i = 0; i < numVerts; i++) bbox.addPoint(vertices.getValueRef(i));
    this.__boundingBox = bbox;
    this.__boundingBoxDirty = false;
  }

  // ////////////////////////////////////////
  // Metadata

  /**
   * The getMetadata method.
   * @param {any} key - The key value.
   * @return {any} - The return value.
   */
  getMetadata(key) {
    return this.__metaData.get(key)
  }

  /**
   * The hasMetadata method.
   * @param {any} key - The key value.
   * @return {any} - The return value.
   */
  hasMetadata(key) {
    return this.__metaData.has(key)
  }

  /**
   * The setMetadata method.
   * @param {any} key - The key value.
   * @param {object} metaData - The metaData value.
   */
  setMetadata(key, metaData) {
    this.__metaData.set(key, metaData);
  }

  /**
   * The deleteMetadata method.
   * @param {any} key - The key value.
   */
  deleteMetadata(key) {
    this.__metaData.delete(key);
  }

  // ////////////////////////////////////////
  // Memory

  /**
   * The genBuffers method.
   * @param {any} opts - The opts value.
   * @return {any} - The return value.
   */
  genBuffers(opts) {
    const attrBuffers = {};
    for (const [attrName, attr] of this.__vertexAttributes) {
      attrBuffers[attrName] = {
        values: attr.data,
        count: attr.size,
        dataType: attr.dataType,
        normalized: attr.normalized,
      };
    }
    return {
      numVertices: this.numVertices(),
      attrBuffers,
    }
  }

  /**
   * The freeBuffers method.
   */
  freeBuffers() {
    // Before destroying all our data,
    // make sure the bbox is up to date.
    // if (this.__boundingBoxDirty)
    //     this.updateBoundingBox();
    // // TODO: push the data to a worker thread and terminate like in MeshProxy.
    // this.__vertexAttributes = new Map();
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The loadBaseGeomBinary method.
   * @param {object} reader - The reader value.
   */
  loadBaseGeomBinary(reader) {
    this.name = reader.loadStr();
    const flags = reader.loadUInt8();
    this.debugColor = reader.loadRGBFloat32Color();
    const numVerts = reader.loadUInt32();
    this.__boundingBox.set(reader.loadFloat32Vec3(), reader.loadFloat32Vec3());

    this.setNumVertices(numVerts);
    const positionsAttr = this.vertices;
    let normalsAttr;
    let texCoordsAttr;
    if (flags & (1 << 1)) {
      normalsAttr = this.getVertexAttribute('normals');
      if (!normalsAttr)
        normalsAttr = this.addVertexAttribute('normals', Vec3$1, 0.0);
    }
    if (flags & (1 << 2)) {
      texCoordsAttr = this.getVertexAttribute('texCoords');
      if (!texCoordsAttr)
        texCoordsAttr = this.addVertexAttribute('texCoords', Vec2, 0.0);
    }

    const parse8BitPositionsArray = (range, offset, sclVec, positions_8bit) => {
      for (let i = range[0]; i < range[1]; i++) {
        const pos = new Vec3$1(
          positions_8bit[i * 3 + 0] / 255.0,
          positions_8bit[i * 3 + 1] / 255.0,
          positions_8bit[i * 3 + 2] / 255.0
        );
        pos.multiplyInPlace(sclVec);
        pos.addInPlace(offset);
        positionsAttr.setValue(i, pos);
      }
    };

    const parse8BitNormalsArray = (range, offset, sclVec, normals_8bit) => {
      if (sclVec.isNull()) sclVec.set(1, 1, 1);
      for (let i = range[0]; i < range[1]; i++) {
        const normal = new Vec3$1(
          normals_8bit[i * 3 + 0] / 255.0,
          normals_8bit[i * 3 + 1] / 255.0,
          normals_8bit[i * 3 + 2] / 255.0
        );
        normal.multiplyInPlace(sclVec);
        normal.addInPlace(offset);
        normal.normalizeInPlace();
        normalsAttr.setValue(i, normal);
      }
    };
    const parse8BitTextureCoordsArray = (
      range,
      offset,
      sclVec,
      texCoords_8bit
    ) => {
      // if (sclVec.isNull())
      //     sclVec.set(1, 1, 1);
      for (let i = range[0]; i < range[1]; i++) {
        const textureCoord = new Vec2(
          texCoords_8bit[i * 2 + 0] / 255.0,
          texCoords_8bit[i * 2 + 1] / 255.0
        );
        textureCoord.multiplyInPlace(sclVec);
        textureCoord.addInPlace(offset);
        texCoordsAttr.setValue(i, textureCoord);
      }
    };

    const numClusters = reader.loadUInt32();
    if (numClusters == 1) {
      {
        const box3 = this.__boundingBox;
        const positions_8bit = reader.loadUInt8Array(numVerts * 3);
        parse8BitPositionsArray(
          [0, numVerts],
          box3.p0,
          box3.diagonal(),
          positions_8bit
        );
      }

      if (normalsAttr) {
        const box3 = new Box3$1(
          reader.loadFloat32Vec3(),
          reader.loadFloat32Vec3()
        );
        const normals_8bit = reader.loadUInt8Array(numVerts * 3);
        parse8BitNormalsArray(
          [0, numVerts],
          box3.p0,
          box3.diagonal(),
          normals_8bit
        );

        normalsAttr.loadSplitValues(reader);
      }
      if (texCoordsAttr) {
        const box2 = new Box2(
          reader.loadFloat32Vec2(),
          reader.loadFloat32Vec2()
        );
        const texCoords_8bit = reader.loadUInt8Array(numVerts * 2);
        parse8BitTextureCoordsArray(
          [0, numVerts],
          box2.p0,
          box2.diagonal(),
          texCoords_8bit
        );

        texCoordsAttr.loadSplitValues(reader);
      }
    } else {
      const clusters = [];
      let offset = 0;
      for (let i = 0; i < numClusters; i++) {
        const count = reader.loadUInt32();
        const box3 = new Box3$1(
          reader.loadFloat32Vec3(),
          reader.loadFloat32Vec3()
        );
        const clusterData = {
          range: [offset, offset + count],
          bbox: box3,
        };
        if (normalsAttr) {
          clusterData.normalsRange = new Box3$1(
            reader.loadFloat32Vec3(),
            reader.loadFloat32Vec3()
          );
        }
        if (texCoordsAttr) {
          clusterData.texCoordsRange = new Box2(
            reader.loadFloat32Vec2(),
            reader.loadFloat32Vec2()
          );
        }

        clusters.push(clusterData);
        offset += count;
      }
      const positions_8bit = reader.loadUInt8Array(numVerts * 3);
      let normals_8bit;
      let texCoords_8bit;
      if (normalsAttr) {
        normals_8bit = reader.loadUInt8Array(numVerts * 3);
      }
      if (texCoordsAttr) {
        texCoords_8bit = reader.loadUInt8Array(numVerts * 2);
      }

      for (let i = 0; i < numClusters; i++) {
        {
          const box3 = clusters[i].bbox;
          parse8BitPositionsArray(
            clusters[i].range,
            box3.p0,
            box3.diagonal(),
            positions_8bit
          );
        }

        if (normalsAttr) {
          const box3 = clusters[i].normalsRange;
          parse8BitNormalsArray(
            clusters[i].range,
            box3.p0,
            box3.diagonal(),
            normals_8bit
          );
        }
        if (texCoordsAttr) {
          const box2 = clusters[i].texCoordsRange;
          parse8BitTextureCoordsArray(
            clusters[i].range,
            box2.p0,
            box2.diagonal(),
            texCoords_8bit
          );
        }
      }
      if (normalsAttr) {
        normalsAttr.loadSplitValues(reader);
      }
      if (texCoordsAttr) {
        texCoordsAttr.loadSplitValues(reader);
      }
    }
  }

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    let json = super.toJSON(context, flags);
    if (!json) json = {};
    json.type = sgFactory.getClassName(this);

    if (!(flags & SAVE_FLAG_SKIP_GEOMDATA)) {
      const vertexAttributes = {};
      for (const [key, attr] of this.__vertexAttributes.entries()) {
        // if (!opts || !('attrList' in opts) || opts.attrList.indexOf(key) != -1)
        vertexAttributes[key] = attr.toJSON(context, flags);
      }
      json.vertexAttributes = vertexAttributes;
    }
    return json
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} json - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(json, context, flags) {
    super.fromJSON(json, context, flags);
    for (const name in json.vertexAttributes) {
      let attr = this.__vertexAttributes.get(name);
      const attrJSON = json.vertexAttributes[name];
      if (!attr) {
        const dataType = typeRegistry.getType(attrJSON.dataType);
        attr = new VertexAttribute(
          this,
          dataType,
          0,
          attrJSON.defaultScalarValue
        );
        this.__vertexAttributes.set(name, attr);
      }
      attr.fromJSON(attrJSON);
    }
  }

  /**
   * The toString method.
   * @return {any} - The return value.
   */
  toString() {
    return JSON.stringify(this.toJSON(), null, 2)
  }
}

/** Class representing vertex attributes.
 * @extends Attribute
 */
class VertexAttribute$1 extends Attribute$1 {
  /**
   * Create vertex attributes
   * @param {any} geom - The geom value.
   * @param {any} dataType - The dataType value.
   * @param {any} expectedSize - The expectedSize value.
   * @param {number} defaultScalarValue - The default scalar value.
   */
  constructor(geom, dataType, expectedSize, defaultScalarValue) {
    super(dataType, expectedSize, defaultScalarValue);
    this.__geom = geom; // TODO: WeakRef??

    this.__splits = {};
    this.__splitValues = [];
  }

  /**
   * The getFaceVertexValueRef method.
   * @param {any} face - The face value.
   * @param {any} facevertex - The facevertex value.
   * @return {any} - The return value.
   */
  getFaceVertexValueRef(face, facevertex) {
    const vertex = this.__geom.getFaceVertexIndex(face, facevertex);
    if (vertex in this.__splits && face in this.__splits[vertex]) {
      return this.__splitValues[this.__splits[vertex][face]]
    }
    return this.getValueRef(vertex)
  }

  /**
   * The setFaceVertexValue method.
   * @param {any} face - The face value.
   * @param {any} facevertex - The facevertex value.
   * @param {any} value - The value value.
   */
  setFaceVertexValue(face, facevertex, value) {
    const vertex = this.__geom.getFaceVertexIndex(face, facevertex);
    this.setFaceVertexValue_ByVertexIndex(face, vertex, value);
  }

  /**
   * The setFaceVertexValue_ByVertexIndex method.
   * @param {any} face - The face value.
   * @param {any} vertex - The vertex value.
   * @param {any} value - The value value.
   */
  setFaceVertexValue_ByVertexIndex(face, vertex, value) {
    const valueRef = this.getValueRef(vertex);
    if (!valueRef.isValid()) {
      // the value is uninitialized. Initialize it.
      valueRef.setFromOther(value);
    } else if (valueRef.approxEqual(value)) ; else {
      // The new value is different from the existing value

      if (vertex in this.__splits) {
        // Now check if any existing splits for this vertex match the value being set.
        // i.e. for faces around a vertex, there will often be a seam along 2 edges
        // where the values differ. On each side of the seam, all faces can use the same
        // value. We should see then only one split value for the vertex.
        const vertexSplitIds = this.__splits[vertex];
        for (const fid in vertexSplitIds) {
          const splitId = vertexSplitIds[fid];
          if (this.__splitValues[splitId].approxEqual(value)) {
            // re-use this split value
            vertexSplitIds[face] = splitId;
            return
          }
        }

        // If a split already exists for this face, re-use it.
        if (face in this.__splits[vertex]) {
          const valueRef = this.__splitValues[this.__splits[vertex][face]];
          valueRef.setFromOther(value);
          return
        }
      } else {
        this.__splits[vertex] = {};
      }
      this.__splits[vertex][face] = this.__splitValues.length;
      this.__splitValues.push(value);
    }
  }

  /**
   * The setSplitVertexValue method.
   * @param {any} vertex - The vertex value.
   * @param {any} face - The face value.
   * @param {any} value - The value value.
   */
  setSplitVertexValue(vertex, face, value) {
    if (!(vertex in this.__splits)) this.__splits[vertex] = {};
    if (face in this.__splits[vertex]) {
      const currValue = this.__splitValues[this.__splits[vertex][face]];
      if (currValue.approxEqual(value)) return
      console.warn('Face Vertex Already Split with different value');
    }
    this.__splits[vertex][face] = this.__splitValues.length;
    this.__splitValues.push(value);
  }

  /**
   * The setSplitVertexValues method.
   * @param {any} vertex - The vertex value.
   * @param {any} faceGroup - The faceGroup value.
   * @param {any} value - The value value.
   */
  setSplitVertexValues(vertex, faceGroup, value) {
    if (!(vertex in this.__splits)) this.__splits[vertex] = {};
    const splitIndex = this.__splitValues.length;
    this.__splitValues.push(value);
    for (const face of faceGroup) {
      // if (face in this.__splits[vertex]) {
      //     let currValue = this.__splitValues[this.__splits[vertex][face]];
      //     if (currValue.approxEqual(value))
      //         return;
      //     console.warn("Face Vertex Already Split with different value");
      // }
      this.__splits[vertex][face] = splitIndex;
    }
  }

  /**
   * The getSplits method.
   * @return {any} - The return value.
   */
  getSplits() {
    return this.__splits
  }

  /**
   * The getSplitCount method.
   * @return {any} - The return value.
   */
  getSplitCount() {
    let splitCount = 0;
    for (const vertex in this.__splits)
      splitCount += Object.keys(this.__splits[vertex]).length;
    return splitCount
  }

  /**
   * The generateSplitValues method.
   * @param {any} splitIndices - The splitIndices value.
   * @param {number} splitCount - The splitCount value.
   * @return {any} - The return value.
   */
  generateSplitValues(splitIndices, splitCount) {
    if (splitCount == 0) return this.__data

    const numUnSplitValues = this.length;
    const count = this.length + splitCount;
    const numElems = this.__dataType.numElements
      ? this.__dataType.numElements()
      : 1;
    const data = new Float32Array(count * numElems);
    for (let i = 0; i < this.__data.length; i++) data[i] = this.__data[i];

    // Now duplicate the split values to generate an attributes array
    // usig the shared splits accross all attributes.
    // eslint-disable-next-line guard-for-in
    for (const vertex in splitIndices) {
      const faces = splitIndices[vertex];
      // eslint-disable-next-line guard-for-in
      for (const face in faces) {
        const tgt = numUnSplitValues + faces[face];
        if (vertex in this.__splits && face in this.__splits[vertex]) {
          // this attribue has a split value in its array.
          // we must use that value...
          const src = this.__splits[vertex][face];
          if (this.__dataType == Float32)
            data[tgt * numElems] = this.__splitValues[src];
          else
            this.__dataType
              .createFromFloat32Buffer(data.buffer, tgt * numElems)
              .setFromOther(this.__splitValues[src]);
        } else {
          // Copy each scalar value to the new place in the array.
          const src = parseInt(vertex);
          for (let e = 0; e < numElems; e++) {
            if (src * numElems + e > this.__data.length) {
              console.log('Error remapping src:' + src * numElems + e);
            }
            if (tgt * numElems + e > data.length) {
              console.log('Error remapping tgt:' + tgt * numElems + e);
            }
            data[tgt * numElems + e] = this.__data[src * numElems + e];
          }
        }
      }
    }
    return data
  }

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    const json = super.toJSON(context, flags);
    json.splits = this.__splits;
    json.splitValues = this.__splitValues;
    return json
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} json - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(json, context, flags) {
    super.fromJSON(json, context, flags);
    this.__splits = json.splits;
    this.__splitValues = [];
    for (const valjson of json.splitValues)
      this.__splitValues.push(this.__dataType.createFromJSON(valjson));
  }

  /**
   * The loadSplitValues method.
   * @param {object} reader - The reader value.
   */
  loadSplitValues(reader) {
    const splitIndices = reader.loadUInt32Array();
    if (splitIndices.length == 0) return
    let offset = 0;
    let numSplitValues = 0;
    while (true) {
      const vertexId = splitIndices[offset++];
      const numSplits = splitIndices[offset++];

      const splits = {};
      for (let i = 0; i < numSplits; i++) {
        const faceId = splitIndices[offset++];
        const splitId = splitIndices[offset++];
        splits[faceId] = splitId;
        if (splitId >= numSplitValues) numSplitValues = splitId + 1;
      }
      this.__splits[vertexId] = splits;
      if (offset >= splitIndices.length) break
    }
    const dim = this.__numFloat32Elements;
    const splitValues = reader.loadFloat32Array(numSplitValues * dim);
    this.__splitValues = [];
    for (let i = 0; i < numSplitValues; i++) {
      const val = this.__dataType.createFromFloat32Array(
        splitValues.slice(i * dim, i * dim + dim)
      );
      this.__splitValues.push(val);
    }
  }
}

/** Class representing points.
 * @extends BaseGeom
 */
class Points extends BaseGeom {
  /**
   * Create points.
   */
  constructor() {
    super();
  }

  /**
   * The loadBin method.
   * @param {object} reader - The reader value.
   */
  loadBin(reader) {
    this.name = reader.loadStr();
    const numVerts = reader.loadUInt32();
    this.__boundingBox.set(reader.loadFloat32Vec3(), reader.loadFloat32Vec3());
    this.setNumVertices(numVerts);
    const vertices = this.vertices;

    if (numVerts < 256) {
      const bboxMat = this.__boundingBox.toMat4();
      const posAttr_8bit = reader.loadUInt8Array(numVerts * 3);
      for (let i = 0; i < numVerts; i++) {
        const pos = new Vec3(
          posAttr_8bit[i * 3 + 0] / 255.0,
          posAttr_8bit[i * 3 + 1] / 255.0,
          posAttr_8bit[i * 3 + 2] / 255.0
        );
        vertices.setValue(i, bboxMat.transformVec3(pos));
      }
    } else {
      const numClusters = reader.loadUInt32();
      const clusters = [];
      for (let i = 0; i < numClusters; i++) {
        const range = reader.loadUInt32Vec2();
        const p0 = reader.loadFloat32Vec3();
        const p1 = reader.loadFloat32Vec3();
        clusters.push({
          range: range,
          bbox: new Box3(p0, p1),
        });
      }
      const posAttr_8bit = reader.loadUInt8Array(numVerts * 3);

      for (let i = 0; i < numClusters; i++) {
        const bboxMat = clusters[i]['bbox'].toMat4();
        for (let j = clusters[i]['range'].x; j < clusters[i]['range'].y; j++) {
          const pos = new Vec3(
            posAttr_8bit[j * 3 + 0] / 255.0,
            posAttr_8bit[j * 3 + 1] / 255.0,
            posAttr_8bit[j * 3 + 2] / 255.0
          );
          vertices.setValue(j, bboxMat.transformVec3(pos));
        }
      }
    }
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The readBinary method.
   * @param {object} reader - The reader value.
   * @param {object} context - The context value.
   */
  readBinary(reader, context) {
    super.loadBaseGeomBinary(reader);

    // this.computeVertexNormals();
    this.geomDataChanged.emit();
  }
}

/** Class representing lines.
 * @extends BaseGeom
 */
class Lines extends BaseGeom {
  /**
   * Create lines.
   */
  constructor() {
    super();
    this.__indices = new Uint32Array();
    this.__segmentAttributes = new Map();
    this.lineThickness = 0.0;
  }

  /**
   * The getIndices method.
   * @return {any} - The return value.
   */
  getIndices() {
    return this.__indices
  }

  /**
   * Getter for the number of segments.
   * @return {number} - Returns the number of segments.
   */
  getNumSegments() {
    return this.__indices.length / 2
  }

  /**
   * Getter for the number of segments.
   * @param {number} count - The count value.
   */
  setNumSegments(count) {
    const indices = new Uint32Array(count * 2);
    // indices.set(this.__indices)
    // for (let i=0;i<this.__indices.length; i++) {
    //     indices[i] = this.__indices[i];
    // }
    this.__indices = indices;
  }

  /**
   * The setSegment method.
   * @param {number} index - The index value.
   * @param {any} p0 - The p0 value.
   * @param {any} p1 - The p1 value.
   */
  setSegment(index, p0, p1) {
    if (index >= this.__indices.length / 2)
      throw new Error(
        'Invalid line index:' +
          index +
          '. Num Segments:' +
          this.__indices.length / 2
      )
    this.__indices[index * 2 + 0] = p0;
    this.__indices[index * 2 + 1] = p1;
  }

  /**
   * The getSegmentVertexIndex method.
   * @param {any} line - The line value.
   * @param {any} linevertex - The linevertex value.
   * @return {any} - The return value.
   */
  getSegmentVertexIndex(line, linevertex) {
    const numLines = this.numLines;
    if (line < numLines) return this.__indices[line * 2 + linevertex]
  }

  /**
   * The addSegmentAttribute method.
   * @param {string} name - The name value.
   * @param {any} dataType - The dataType value.
   * @param {number} count - The count value.
   * @return {any} - The return value.
   */
  addSegmentAttribute(name, dataType, count = undefined) {
    const attr = new Attribute(
      dataType,
      count != undefined ? count : this.polygonCount
    );
    this.__segmentAttributes.set(name, attr);
    return attr
  }

  /**
   * The hasSegmentAttribute method.
   * @param {string} name - The name value.
   * @return {any} - The return value.
   */
  hasSegmentAttribute(name) {
    return this.__segmentAttributes.has(name)
  }

  /**
   * The getSegmentAttribute method.
   * @param {string} name - The name value.
   * @return {any} - The return value.
   */
  getSegmentAttribute(name) {
    return this.__segmentAttributes.get(name)
  }

  // ////////////////////////////////////////
  // Memory

  /**
   * The genBuffers method.
   * @return {any} - The return value.
   */
  genBuffers() {
    const buffers = super.genBuffers();

    let indices;
    if (buffers.numVertices < Math.pow(2, 8)) {
      indices = new Uint8Array(this.__indices.length);
      this.__indices.forEach((value, index) => {
        indices[index] = value;
      });
    } else if (buffers.numVertices < Math.pow(2, 16)) {
      indices = new Uint16Array(this.__indices.length);
      this.__indices.forEach((value, index) => {
        indices[index] = value;
      });
    } else {
      indices = this.__indices;
    }
    buffers.indices = indices;
    return buffers
  }

  // ////////////////////////////////////////
  // Persistence

  // ////////////////////////////////////////
  // Persistence

  /**
   * The readBinary method.
   * @param {object} reader - The reader value.
   * @param {object} context - The context value.
   */
  readBinary(reader, context) {
    super.loadBaseGeomBinary(reader);

    this.setNumSegments(reader.loadUInt32());

    const bytes = reader.loadUInt8();
    if (bytes == 1) this.__indices = reader.loadUInt8Array();
    else if (bytes == 2) this.__indices = reader.loadUInt16Array();
    else if (bytes == 4) this.__indices = reader.loadUInt32Array();

    this.geomDataChanged.emit();
  }
  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    const j = super.toJSON(context, flags);
    if (!(flags & SAVE_FLAG_SKIP_GEOMDATA)) {
      j.indices = Array.from(this.__indices);
    }
    return j
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    super.fromJSON(j, context, flags);
    this.__indices = Uint32Array.from(j.indices);
  }
}

/** Class representing a mesh.
 * @extends BaseGeom
 */
class Mesh extends BaseGeom {
  /**
   * Create a mesh.
   */
  constructor() {
    super();
    this.init();
  }

  /**
   * The init method.
   */
  init() {
    this.__faceCounts = [];
    this.__faceVertexCounts = new Uint8Array();
    this.__faceOffsets = new Uint32Array();
    this.__faceVertexIndices = new Uint32Array();
    this.__numPopulatedFaceVertexIndices = 0;

    this.__faceAttributes = new Map();
    this.__edgeAttributes = new Map();

    this.__logTopologyWarnings = false;

    this.edgeVerts = undefined;
    this.vertexEdges = undefined;
    this.numEdges = 0;
    this.edgeFlags = new Uint32Array();
    this.edgeAngles = new Float32Array();
  }

  /**
   * The getFaceVertexIndices method.
   * @return {any} - The return value.
   */
  getFaceVertexIndices() {
    return this.__faceVertexIndices
  }

  /**
   * The getFaceCounts method.
   * @return {any} - The return value.
   */
  getFaceCounts() {
    return this.__faceCounts
  }

  /**
   * The clear method.
   */
  clear() {
    this.__faceVertexIndices = undefined;
    this.__faceCounts = [];
    this.__numPopulatedFaceVertexIndices = 0;
  }

  /**
   * The setFaceCounts method.
   * @param {any} faceCounts - The faceCounts value.
   */
  setFaceCounts(faceCounts) {
    if (this.__numPopulatedFaceVertexIndices) {
      throw new Error(
        "Cannot set face counts on a mesh that is already populated. Please call 'clear' before re-building the mesh."
      )
    }
    this.__faceCounts = faceCounts;

    let numFaces = 0;
    let numFacesVertices = 0;
    let numVertsPerFace = 3;
    for (const fc of this.__faceCounts) {
      numFaces += fc;
      numFacesVertices += fc * numVertsPerFace;
      numVertsPerFace++;
    }
    this.__faceVertexCounts = new Uint8Array(numFaces);
    this.__faceOffsets = new Uint32Array(numFaces);
    this.__faceVertexIndices = new Uint32Array(numFacesVertices);

    for (const attr of this.__faceAttributes) attr.resize(numFaces);
  }

  /**
   * The setFaceVertexIndices method.
   * @param {any} faceIndex - The faceIndex value.
   */
  setFaceVertexIndices(faceIndex) {
    const vertexIndices = Array.prototype.slice.call(arguments, 1);

    const start = this.__numPopulatedFaceVertexIndices;
    for (let i = 0; i < vertexIndices.length; i++) {
      this.__faceVertexIndices[start + i] = vertexIndices[i];
    }
    this.__faceVertexCounts[faceIndex] = vertexIndices.length - 3;
    this.__faceOffsets[faceIndex] = start;
    this.__numPopulatedFaceVertexIndices += vertexIndices.length;
  }

  /**
   * The getFaceVertexIndices method.
   * @param {any} faceIndex - The faceIndex value.
   * @return {any} - The return value.
   */
  getFaceVertexIndices(faceIndex) {
    const vertexIndices = [];
    const start = this.__faceOffsets[faceIndex];
    const count = this.__faceVertexCounts[faceIndex] + 3;
    for (let i = 0; i < count; i++) {
      vertexIndices.push(this.__faceVertexIndices[start + i]);
    }
    return vertexIndices
  }

  /**
   * The getFaceVertexIndex method.
   * @param {any} faceIndex - The faceIndex value.
   * @param {any} facevertex - The facevertex value.
   * @return {any} - The return value.
   */
  getFaceVertexIndex(faceIndex, facevertex) {
    const start = this.__faceOffsets[faceIndex];
    return this.__faceVertexIndices[start + facevertex]
  }

  /**
   * The getNumFaces method.
   * @return {number} - The return value.
   */
  getNumFaces() {
    return this.__faceVertexCounts.length
  }

  // ///////////////////////////
  // Vertex Attributes

  /**
   * The addVertexAttribute method.
   * @param {string} name - The name of the vertex attribute to add.
   * @param {any} dataType - The dataType value.
   * @param {number} defaultScalarValue - The default scalar value.
   * @return {VertexAttribute} - Returns a vertex attribute.
   */
  addVertexAttribute(name, dataType, defaultScalarValue = undefined) {
    const attr = new VertexAttribute$1(
      this,
      dataType,
      this.vertices != undefined ? this.vertices.length : 0,
      defaultScalarValue
    );
    this.__vertexAttributes.set(name, attr);
    return attr
  }

  // ///////////////////////////
  // Face Attributes

  /**
   * The addFaceAttribute method.
   * @param {string} name - The name of the face attribute to add.
   * @param {any} dataType - The data type.
   * @param {any} count - The count value.
   * @return {Attribute} - Returns a face attribute.
   */
  addFaceAttribute(name, dataType, count = undefined) {
    const attr = new Attribute$1(
      dataType,
      count != undefined ? count : this.getNumFaces()
    );
    this.__faceAttributes.set(name, attr);
    return attr
  }

  /**
   * The hasFaceAttribute method.
   * @param {string} name - The name of the face attribute.
   * @return {any} - The return value.
   */
  hasFaceAttribute(name) {
    return this.__faceAttributes.has(name)
  }

  /**
   * The getFaceAttribute method.
   * @param {string} name - The name of the face attribute.
   * @return {any} - The return value.
   */
  getFaceAttribute(name) {
    return this.__faceAttributes.get(name)
  }

  // /////////////////////////
  // Edge Attributes

  /**
   * The addEdgeAttribute method.
   * @param {string} name - The name of the edge attribute t oadd.
   * @param {any} dataType - The data type.
   * @param {number} count - The default scalar value.
   * @return {Attribute} - Returns an edge attribute.
   */
  addEdgeAttribute(name, dataType, count = undefined) {
    const attr = new Attribute$1(
      dataType,
      count != undefined ? count : this.getNumEdges()
    );
    this.__edgeAttributes.set(name, attr);
    return attr
  }

  /**
   * The hasEdgeAttribute method.
   * @param {string} name - The name of the edge attribute.
   * @return {any} - The return value.
   */
  hasEdgeAttribute(name) {
    return this.__edgeAttributes.has(name)
  }

  /**
   * The getEdgeAttribute method.
   * @param {string} name - The name of the edge attribute.
   * @return {any} - The return value.
   */
  getEdgeAttribute(name) {
    return this.__edgeAttributes.get(name)
  }

  // ///////////////////////////

  /**
   * The genTopologyInfo method.
   */
  genTopologyInfo() {
    const connectedVertices = {}; // acceleration structure.
    this.vertexEdges = []; // 2d array of vertex to edges.
    // this.vertexFaces = []; // 2d array of vertex to faces.
    this.edgeFaces = []; // flat array of 2 face indices per edge
    this.edgeVerts = []; // flat array of 2 vert indices per edge
    this.faceEdges = []; // the edges bordering each face.
    this.numEdges = 0;

    const getEdgeIndex = (v0, v1) => {
      let tmp0 = v0;
      let tmp1 = v1;
      if (tmp1 < tmp0) {
        const tmp = tmp0;
        tmp0 = tmp1;
        tmp1 = tmp;
      }
      const key = tmp0 + '>' + tmp1;
      if (key in connectedVertices) {
        // console.log(key + ':' + connectedVertices[key] + " face:" + ( v0 < v1 ? 0 : 1) );
        return connectedVertices[key]
      }

      const p0 = this.vertices.getValueRef(tmp0);
      const p1 = this.vertices.getValueRef(tmp1);
      const edgeVec = p1.subtract(p0);

      const edgeIndex = this.edgeFaces.length / 2;
      const edgeData = {
        edgeIndex: edgeIndex,
        edgeVec: edgeVec,
      };
      connectedVertices[key] = edgeData;

      this.edgeFaces.push(-1);
      this.edgeFaces.push(-1);
      this.edgeVerts.push(tmp0);
      this.edgeVerts.push(tmp1);
      // console.log(key + ':' + connectedVertices[key] + " face:" + ( v0 < v1 ? 0 : 1));

      this.numEdges++;
      return edgeData
    };

    const addEdge = (v0, v1, faceIndex) => {
      // console.log('addEdge:' + v0 + " :" + v1 + " faceIndex:" + faceIndex );
      const edgeData = getEdgeIndex(v0, v1);
      const edgeIndex = edgeData.edgeIndex;
      if (v1 < v0) {
        const edgeFaceIndex = edgeIndex * 2 + 0;
        if (this.__logTopologyWarnings && this.edgeFaces[edgeFaceIndex] != -1)
          console.warn('Edge poly 0 already set. Mesh is non-manifold.');
        this.edgeFaces[edgeFaceIndex] = faceIndex;
      } else {
        const edgeFaceIndex = edgeIndex * 2 + 1;
        if (this.__logTopologyWarnings && this.edgeFaces[edgeFaceIndex] != -1)
          console.warn('Edge poly 1 already set. Mesh is non-manifold.');
        this.edgeFaces[edgeFaceIndex] = faceIndex;
      }

      if (!(faceIndex in this.faceEdges)) this.faceEdges[faceIndex] = [];
      this.faceEdges[faceIndex].push(edgeIndex);

      // Push the edge index onto both vertex edge lists.
      // We use Sets to avoid adding the same edge 2x to the same vertex.
      if (this.vertexEdges[v0] == undefined) {
        this.vertexEdges[v0] = new Set();
      }
      if (this.vertexEdges[v1] == undefined) {
        this.vertexEdges[v1] = new Set();
      }
      this.vertexEdges[v0].add(edgeIndex);
      this.vertexEdges[v1].add(edgeIndex);

      // if (this.vertexFaces[v0] == undefined) {
      //     this.vertexFaces[v0] = [];
      // }
      // this.vertexFaces[v0].push(faceIndex);
    };

    const numFaces = this.getNumFaces();
    for (let faceIndex = 0; faceIndex < numFaces; faceIndex++) {
      const faceVerts = this.getFaceVertexIndices(faceIndex);
      for (let j = 0; j < faceVerts.length; j++) {
        const v0 = faceVerts[j];
        const v1 = faceVerts[(j + 1) % faceVerts.length];
        addEdge(v0, v1, faceIndex);
      }
    }
  }

  /**
   * The computeFaceNormals method.
   */
  computeFaceNormals() {
    const vertices = this.vertices;
    const faceNormals = this.addFaceAttribute('normals', Vec3$1);
    const numFaces = this.getNumFaces();
    for (let faceIndex = 0; faceIndex < numFaces; faceIndex++) {
      const faceVerts = this.getFaceVertexIndices(faceIndex);
      const p0 = vertices.getValueRef(faceVerts[0]);
      const p1 = vertices.getValueRef(faceVerts[1]);
      let prev = p1;
      const faceNormal = new Vec3$1();
      for (let j = 2; j < faceVerts.length; j++) {
        const pn = vertices.getValueRef(faceVerts[j]);
        const v0 = prev.subtract(p0);
        const v1 = pn.subtract(p0);
        faceNormal.addInPlace(v0.cross(v1).normalize());
        prev = pn;
      }
      if (faceNormal.lengthSquared() < Number.EPSILON) ;

      faceNormals.setValue(faceIndex, faceNormal.normalize());
    }
  }

  /**
   * The generateEdgeFlags method.
   */
  generateEdgeFlags() {
    if (this.vertexEdges == undefined) this.genTopologyInfo();

    if (!this.hasFaceAttribute('normals')) this.computeFaceNormals();

    const vertices = this.vertices;
    const faceNormals = this.getFaceAttribute('normals');
    this.edgeVecs = [];
    this.edgeAngles = new Float32Array(this.numEdges);
    for (let i = 0; i < this.edgeFaces.length; i += 2) {
      const v0 = this.edgeVerts[i];
      const v1 = this.edgeVerts[i + 1];
      const e_vec = vertices.getValueRef(v1).subtract(vertices.getValueRef(v0));
      e_vec.normalizeInPlace();
      this.edgeVecs.push(e_vec);

      const p0 = this.edgeFaces[i];
      const p1 = this.edgeFaces[i + 1];
      if (p0 == -1 || p1 == -1) {
        // Flag the edge as a border edge....
        this.edgeAngles[i / 2] = Math.PI * 2.0;
        continue
      }

      const n0 = faceNormals.getValueRef(p0);
      const n1 = faceNormals.getValueRef(p1);
      this.edgeAngles[i / 2] = n0.angleTo(n1);
    }
  }

  /**
   * Compute vertex normals.
   * @param {number} hardAngle - The hardAngle value in radians.
   * @return {any} - The return value.
   */
  computeVertexNormals(hardAngle = 1.0 /* radians */) {
    // console.log("computeVertexNormals");

    this.generateEdgeFlags();

    const vertices = this.vertices;
    const faceNormals = this.getFaceAttribute('normals');
    const normalsAttr = this.addVertexAttribute('normals', Vec3$1);

    // these methods are faster versions than using the methods
    // provided on the attributes. We cache values and use hard coded constants.
    const faceNormalsBuffer = faceNormals.data.buffer;
    const getFaceNormal = index => {
      return new Vec3$1(faceNormalsBuffer, index * 12) // 3 conmponents at 4 bytes each.
    };
    const vertexNormalsArray = normalsAttr.data;
    const setVertexNormal = (index, value) => {
      vertexNormalsArray[index * 3 + 0] = value.x;
      vertexNormalsArray[index * 3 + 1] = value.y;
      vertexNormalsArray[index * 3 + 2] = value.z;
    };
    const getConnectedEdgeVecs = (faceIndex, vertexIndex) => {
      let e0;
      let e1;
      const faceEdges = this.faceEdges[faceIndex];
      for (const e of faceEdges) {
        if (this.edgeVerts[e * 2] == vertexIndex) {
          if (!e0) e0 = this.edgeVecs[e];
          else e1 = this.edgeVecs[e];
        } else if (this.edgeVerts[e * 2 + 1] == vertexIndex) {
          if (!e0) e0 = this.edgeVecs[e];
          else e1 = this.edgeVecs[e];
        }
      }
      return [e0, e1]
    };

    for (let i = 0; i < this.vertexEdges.length; i++) {
      // If this face indexing doesn't start at 0, then the vertexEdges don't either.
      if (this.vertexEdges[i] == undefined) continue

      const edges = this.vertexEdges[i];

      // Groups of faces having a smooth normal at the current vertex.
      const faceGroups = [];
      const addFaceToGroup = face => {
        let inGroup = false;
        for (const faceGroup of faceGroups) {
          inGroup = faceGroup.indexOf(face) != -1;
          if (inGroup) break
        }
        if (!inGroup) faceGroups.push([face]);
      };
      for (const e of edges) {
        const f0 = this.edgeFaces[e * 2];
        const f1 = this.edgeFaces[e * 2 + 1];
        if (f0 != -1 && f1 == -1 && this.edgeAngles[e] < hardAngle) {
          let f0groupIndex = -1;
          let f1groupIndex = -1;
          for (
            let groupIndex = 0;
            groupIndex < faceGroups.length;
            groupIndex++
          ) {
            if (f0groupIndex == -1 && faceGroups[groupIndex].indexOf(f0) != -1)
              f0groupIndex = groupIndex;
            if (f1groupIndex == -1 && faceGroups[groupIndex].indexOf(f1) != -1)
              f1groupIndex = groupIndex;
          }
          if (f0groupIndex == -1 && f1groupIndex == -1) {
            faceGroups.push([f0, f1]);
          } else if (f0groupIndex != -1 && f1groupIndex != -1) {
            if (f0groupIndex != f1groupIndex) {
              // Merge the 2 groups that the smooth edge joins.
              faceGroups[f0groupIndex] = faceGroups[f0groupIndex].concat(
                faceGroups[f1groupIndex]
              );
              faceGroups.splice(f1groupIndex, 1);
            }
          } else {
            if (f0groupIndex == -1) {
              faceGroups[f1groupIndex].push(f0);
            }
            if (f1groupIndex == -1) {
              faceGroups[f0groupIndex].push(f1);
            }
          }
          continue
        }
        // This is a hard edge or a border edge... Add faces separately group.
        if (f0 != -1) addFaceToGroup(f0);
        if (f1 != -1) addFaceToGroup(f1);
      }

      // Sort the groups to have the biggest group first.
      faceGroups.sort((a, b) =>
        a.length < b.length ? 1 : a.length > b.length ? -1 : 0
      );

      let firstVirtex = true;
      for (const faceGroup of faceGroups) {
        const normal = new Vec3$1();
        for (const faceIndex of faceGroup) {
          const face_edges = getConnectedEdgeVecs(faceIndex, i);
          const weight = face_edges[0].angleTo(face_edges[1]);
          // if (i == 1)
          //     console.log("FaceNormal:" + faceIndex + ":" + getFaceNormal(faceIndex).toString());
          normal.addInPlace(getFaceNormal(faceIndex).scale(weight));
        }
        normal.normalizeInPlace();
        if (firstVirtex) {
          setVertexNormal(i, normal);
          firstVirtex = false;
        } else {
          normalsAttr.setSplitVertexValues(i, faceGroup, normal);
        }
      }
    }

    return normalsAttr
  }

  /**
   * Compute the number of triangles.
   * @return {number} - Returns the number of triangles.
   */
  computeNumTriangles() {
    let numVertsPerFace = 3;
    let trisCount = 0;
    for (const fc of this.__faceCounts) {
      trisCount += fc * (numVertsPerFace - 2);
      numVertsPerFace++;
    }
    return trisCount
  }

  /**
   * The generateTriangulatedIndices method.
   * @param {number} totalNumVertices - The total number of vertices.
   * @param {number} numUnSplitVertices - The total number of unsplit vertices.
   * @param {any} splitIndices - The splitIndices value.
   * @return {any} - The return value.
   */
  generateTriangulatedIndices(
    totalNumVertices,
    numUnSplitVertices,
    splitIndices
  ) {
    // let faceVertexIndices = this.getFaceVertexIndices();

    const trisCount = this.computeNumTriangles();

    let trianglulatedIndices;
    if (totalNumVertices < Math.pow(2, 8))
      trianglulatedIndices = new Uint8Array(trisCount * 3);
    else if (totalNumVertices < Math.pow(2, 16))
      trianglulatedIndices = new Uint16Array(trisCount * 3);
    else trianglulatedIndices = new Uint32Array(trisCount * 3);

    let triangleVertex = 0;
    const addTriangleVertexIndex = function(vertex, faceIndex) {
      if (vertex in splitIndices && faceIndex in splitIndices[vertex])
        vertex = numUnSplitVertices + splitIndices[vertex][faceIndex];
      trianglulatedIndices[triangleVertex] = vertex;
      triangleVertex++;
    };
    const numFaces = this.getNumFaces();
    for (let faceIndex = 0; faceIndex < numFaces; faceIndex++) {
      const faceVerts = this.getFaceVertexIndices(faceIndex);
      for (let j = 0; j < faceVerts.length; j++) {
        if (j >= 3) {
          // For each aditional triangle, we have to add 2 indices.
          addTriangleVertexIndex(faceVerts[0], faceIndex);
          addTriangleVertexIndex(faceVerts[j - 1], faceIndex);
        }
        addTriangleVertexIndex(faceVerts[j], faceIndex);
      }
    }
    return trianglulatedIndices
  }

  /**
   * The computeHardEdgesIndices method.
   * @param {number} hardAngle - The hardAngle value in radians.
   * @return {any} - The return value.
   */
  computeHardEdgesIndices(hardAngle = 1.0) {
    const hardEdges = [];
    const addEdge = index => {
      hardEdges.push(this.edgeVerts[index]);
      hardEdges.push(this.edgeVerts[index + 1]);
    };
    for (let i = 0; i < this.edgeFlags.length; i += 2) {
      if (this.edgeAngles[i / 2] > hardAngle) {
        addEdge(i);
      }
    }
    return hardEdges
  }

  /**
   * The getWireframeIndices method.
   * @return {any} - The return value.
   */
  getWireframeIndices() {
    return indices
  }

  // ////////////////////////////////////////
  // Memory

  /**
   * The genBuffers method.
   * @param {any} opts - The opts value.
   * @return {any} - The return value.
   */
  genBuffers(opts) {
    // Compute the normals on demand.
    // if (!('normals' in this.__vertexAttributes)) {
    //     // this.__geom.computeVertexNormals();
    //     this.addVertexAttribute("normals", Vec3, 0.0);
    // }

    const splitIndices = {};
    let splitCount = 0;
    for (const [, attr] of this.__vertexAttributes) {
      const attrSplits = attr.getSplits();
      for (const polygon in attrSplits) {
        if (!(polygon in splitIndices)) splitIndices[polygon] = {};
        const vertices = attrSplits[polygon];
        for (const v in vertices) {
          const vertex = parseInt(v);
          if (!(vertex in splitIndices[polygon])) {
            splitIndices[polygon][vertex] = splitCount;
            splitCount++;
          }
        }
      }
    }

    const numUnSplitVertices = this.vertices.length;
    const totalNumVertices = numUnSplitVertices + splitCount;

    let indices;
    if (!opts || opts.includeIndices != false) {
      indices = this.generateTriangulatedIndices(
        totalNumVertices,
        numUnSplitVertices,
        splitIndices
      );
    }

    // let maxIndex;
    // if (debugAttrValues)
    //     maxIndex = Math.max(...indices);
    const attrBuffers = {};
    for (const [attrName, attr] of this.__vertexAttributes) {
      let values;
      if (splitCount == 0) values = attr.data;
      else values = attr.generateSplitValues(splitIndices, splitCount);

      const dimension = attr.numElements;
      const count = values.length / dimension;

      // if (debugAttrValues) {
      //     if (count <= maxIndex)
      //         console.warn("Invalid indexing. Attr value is insufficient for indexing:" + attrName + ". Max Index:" + maxIndex + " Attr Size:" + count);
      // }

      attrBuffers[attrName] = {
        values: values,
        count: count,
        dimension: dimension,
        normalized: attrName == 'normals',
        dataType: attr.dataType,
      };
    }

    const result = {
      numVertices: this.numVertices(),
      numRenderVerts: totalNumVertices,
      indices,
      attrBuffers,
    };

    if (opts && opts.includeVertexNeighbors) {
      if (this.vertexEdges == undefined) this.genTopologyInfo();

      let count = 0;
      for (let i = 0; i < this.vertexEdges.length; i++) {
        // If this face indexing doesn't start at 0, then the vertexEdges don't either.
        if (this.vertexEdges[i]) count += this.vertexEdges[i].size;
      }
      // The array will be structured as a start+offset for each vertex, followed
      // by a 2d array of neighbor indices.
      const vertexNeighbors = new Uint32Array(
        this.vertexEdges.length * 2 + count
      );

      const sortFanEdges = fanEdges => {
        for (let i = 0; i < fanEdges.length; i++) {
          const feA = fanEdges[i];
          for (let j = 0; j < i; j++) {
            const feB = fanEdges[j];
            if (feA[0] != -1 && feA[0] == feB[1]) {
              //  move feA after feB;
              if (i != j + 1) {
                fanEdges.splice(i, 1);
                fanEdges.splice(j + 1, 0, feA);
              }
              break
            }
            if (feA[1] != -1 && feA[1] == feB[0]) {
              //  move feA before feB;
              fanEdges.splice(i, 1);
              fanEdges.splice(j, 0, feA);
              break
            }
          }
        }
      };

      const checkFanEdges = fanEdges => {
        // now check that the faces all build a fan. Maybe starting and ending with -1
        if (fanEdges[0][0] == -1 || fanEdges[fanEdges.length - 1][1] == -1) {
          if (fanEdges[0][0] != -1 || fanEdges[fanEdges.length - 1][1] != -1) {
            throw new Error('If fan starts with -1, it must also end with -1')
          }
        }
        for (let i = 0; i < fanEdges.length; i++) {
          const fe = fanEdges[i];
          if (fe[0] == -1 || fe[1] == -1) {
            if (i != 0 && i != fanEdges.length - 1) {
              throw new Error(
                '-1 only allowed at the beginning and end of a fan.'
              )
            }
          }
          if (fe[0] != -1) {
            let prev = i - 1;
            if (prev < 0) prev += fanEdges.length;
            if (fe[0] != fanEdges[prev][1]) {
              throw new Error('Faces are not sequential')
            }
          }
          if (fe[1] != -1) {
            const next = (i + 1) % fanEdges.length;
            if (fe[1] != fanEdges[next][0]) {
              throw new Error('Faces are not sequential')
            }
          }
        }
      };

      // Populate the start and offset values.
      let offset = this.vertexEdges.length * 2;
      for (let i = 0; i < this.vertexEdges.length; i++) {
        if (this.vertexEdges[i] == undefined) continue
        const edges = this.vertexEdges[i];

        // Build a sorted list of faces based on a fan around
        // the vertex.
        const fanEdges = [];
        for (const e of edges) {
          const v0 = this.edgeVerts[e * 2];
          const v1 = this.edgeVerts[e * 2 + 1];
          let f0 = this.edgeFaces[e * 2];
          let f1 = this.edgeFaces[e * 2 + 1];
          let neigVert;
          if (v0 == i) {
            neigVert = v1;
          } else if (v1 == i) {
            neigVert = v0;
            // swap the faces
            const tmp = f0;
            f0 = f1;
            f1 = tmp;
          } else {
            throw new Error('Invalid topology')
          }
          fanEdges.push([f0, f1, neigVert]);
        }
        sortFanEdges(fanEdges);
        checkFanEdges(fanEdges);
        const closed =
          fanEdges[0][0] != -1 || fanEdges[fanEdges.length - 1][1] != -1;
        let flags = 0;
        if (closed) flags += 1;
        vertexNeighbors[i * 2] = offset;
        vertexNeighbors[i * 2 + 1] = edges.size + (flags << 8);
        for (const fe of fanEdges) {
          vertexNeighbors[offset] = fe[2];
          offset++;
        }
      }

      result.vertexNeighbors = vertexNeighbors;
    }

    return result
  }

  /**
   * The freeBuffers method.
   */
  freeBuffers() {
    super.freeBuffers();
    this.init();
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The readBinary method.
   * @param {object} reader - The reader value.
   * @param {object} context - The context value.
   */
  readBinary(reader, context) {
    super.loadBaseGeomBinary(reader);
    this.setFaceCounts(reader.loadUInt32Array());
    this.__faceVertexCounts = reader.loadUInt8Array(
      this.__faceVertexCounts.length
    );
    const offsetRange = reader.loadSInt32Vec2();
    const bytes = reader.loadUInt8();
    let faceVertexIndexDeltas;
    if (bytes == 1) faceVertexIndexDeltas = reader.loadUInt8Array();
    else if (bytes == 2) faceVertexIndexDeltas = reader.loadUInt16Array();
    else if (bytes == 4) faceVertexIndexDeltas = reader.loadUInt32Array();

    const numFaces = this.getNumFaces();
    let offset = 0;
    let prevCount = 0;
    for (let faceIndex = 0; faceIndex < numFaces; faceIndex++) {
      const count = this.__faceVertexCounts[faceIndex] + 3;
      this.__faceOffsets[faceIndex] = offset;
      for (let j = 0; j < count; j++) {
        const faceVertex = offset + j;
        const delta = faceVertexIndexDeltas[faceVertex] + offsetRange.x;
        if (faceIndex == 0) this.__faceVertexIndices[faceVertex] = delta;
        else {
          let prevFaceVertex = this.__faceOffsets[faceIndex - 1];
          prevFaceVertex += j < prevCount ? j : prevCount - 1;
          this.__faceVertexIndices[faceVertex] =
            this.__faceVertexIndices[prevFaceVertex] + delta;
        }
      }
      offset += count;
      prevCount = count;
    }
    this.__numPopulatedFaceVertexIndices = offset;

    // ///////////////////////////////////
    // Clusters
    const numClusters = reader.loadUInt32();
    if (numClusters > 0) {
      const positionsAttr = this.vertices;
      const lightmapCoordsAttr = this.addVertexAttribute('lightmapCoords', Vec2);
      // let clusterIDsAttr = this.addVertexAttribute('clusterIDs', Float32);
      for (let i = 0; i < numClusters; i++) {
        const xfo = new Xfo(reader.loadFloat32Vec3(), reader.loadFloat32Quat());
        const coordsScale = reader.loadFloat32();
        const offset = reader.loadFloat32Vec2();
        const offsetRange = reader.loadSInt32Vec2();
        const bytes = reader.loadUInt8();
        let clusterFaceIndiceDeltas;
        if (bytes == 1) clusterFaceIndiceDeltas = reader.loadUInt8Array();
        else if (bytes == 2) clusterFaceIndiceDeltas = reader.loadUInt16Array();
        else clusterFaceIndiceDeltas = reader.loadUInt32Array();
        let prevFace = 0;
        for (const delta of clusterFaceIndiceDeltas) {
          let face = delta + offsetRange.x;
          face += prevFace;
          prevFace = face;
          const vertexIndices = this.getFaceVertexIndices(face);
          for (const vertexIndex of vertexIndices) {
            const pos = positionsAttr.getValueRef(vertexIndex);
            const tmp = xfo.transformVec3(pos);
            const lightmapCoord = new Vec2(tmp.x, tmp.z); // Discard y, use x,z
            lightmapCoord.scaleInPlace(coordsScale);
            lightmapCoord.addInPlace(offset);
            lightmapCoordsAttr.setFaceVertexValue_ByVertexIndex(
              face,
              vertexIndex,
              lightmapCoord
            );

            // for debugging.
            // clusterIDsAttr.setFaceVertexValue_ByVertexIndex(face, vertexIndex, i);
          }
        }

        // Now compute the Uvs for the vertices.
      }
    }

    if (!this.hasVertexAttribute('normals')) {
      this.computeVertexNormals();
    }

    // this.computeVertexNormals();
    this.geomDataChanged.emit();
  }

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    const j = super.toJSON(context, flags);
    if (!(flags & SAVE_FLAG_SKIP_GEOMDATA)) {
      j.faceCounts = Array.from(this.__faceCounts);
      j.faceVertexIndices = Array.from(this.__faceVertexIndices);
    }
    return j
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    super.fromJSON(j, context, flags);
    if (j.faceCounts) this.__faceCounts = Uint32Array.from(j.faceCounts);
    if (j.faceVertexIndices)
      this.__faceVertexIndices = Uint32Array.from(j.faceVertexIndices);
  }
}

/** Class representing a base geometry proxy.
 * @extends RefCounted
 * @private
 */
class BaseProxy extends RefCounted {
  /**
   * Create a base proxy.
   * @param {any} data - The data value.
   */
  constructor(data) {
    super();
    this.name = data.name;
    this.__buffers = data.geomBuffers;
    if (this.__buffers.attrBuffers) {
      // eslint-disable-next-line guard-for-in
      for (const attrName in this.__buffers.attrBuffers) {
        const attrData = this.__buffers.attrBuffers[attrName];
        const dataType = typeRegistry.getType(attrData.dataType);
        attrData.dataType = dataType;
      }
    }

    this.boundingBox = new Box3$1();
    this.boundingBox.p0.__data = data.bbox.p0.__data;
    this.boundingBox.p1.__data = data.bbox.p1.__data;

    this.__metaData = new Map();

    this.boundingBoxDirtied = new Signal();
    this.geomDataChanged = new Signal();
    this.geomDataTopologyChanged = new Signal();
  }

  /**
   * The genBuffers method.
   * @return {any} - The return value.
   */
  genBuffers() {
    return this.__buffers
  }

  /**
   * The freeBuffers method.
   */
  freeBuffers() {
    // Note: Explicitly transfer data to a web worker and then
    // terminate the worker. (hacky way to free TypedArray memory explicitly)
    const freeData = { attrBuffers: {} };
    const transferables = [];
    if (this.__buffers.indices) {
      transferables.push(this.__buffers.indices.buffer);
      freeData.indices = this.__buffers.indices;
      delete this.__buffers.indices;
    }
    if (this.__buffers.attrBuffers) {
      for (const attrName in this.__buffers.attrBuffers) {
        const attrData = this.__buffers.attrBuffers[attrName];
        freeData.attrBuffers[attrName] = this.__buffers.attrBuffers[attrName];
        transferables.push(attrData.values.buffer);
        delete this.__buffers.attrBuffers[attrName];
      }
      delete this.__buffers.attrBuffers;
    }
  }

  // ////////////////////////////////////////
  // Metadata

  /**
   * The getMetadata method.
   * @param {any} key - The key value.
   * @return {any} - The return value.
   */
  getMetadata(key) {
    return this.__metaData.get(key)
  }

  /**
   * The hasMetadata method.
   * @param {any} key - The key value.
   * @return {any} - The return value.
   */
  hasMetadata(key) {
    return this.__metaData.has(key)
  }

  /**
   * The setMetadata method.
   * @param {any} key - The key value.
   * @param {object} metaData - The metaData value.
   */
  setMetadata(key, metaData) {
    this.__metaData.set(key, metaData);
  }
}

/** Class representing a points proxy.
 * @extends BaseProxy
 * @private
 */
class PointsProxy extends BaseProxy {
  /**
   * Create a points proxy.
   * @param {any} data - The data value.
   */
  constructor(data) {
    super(data);
  }
}

/** Class representing a lines proxy.
 * @extends BaseProxy
 * @private
 */
class LinesProxy extends BaseProxy {
  /**
   * Create a lines proxy.
   * @param {any} data - The data value.
   */
  constructor(data) {
    super(data);
  }
}

/** Class representing a mesh proxy.
 * @extends BaseProxy
 * @private
 */
class MeshProxy extends BaseProxy {
  /**
   * Create a mesh proxy.
   * @param {any} data - The data value.
   */
  constructor(data) {
    super(data);
  }
}

/** A class for generating a point grid.
 * @extends Points
 */
class PointGrid extends Points {
  /**
   * Create a point grid.
   * @param {number} x - The length of the point grid along the X axis.
   * @param {number} y - The length of the point grid along the Y axis.
   * @param {number} xDivisions - The number of divisions along the X axis.
   * @param {number} yDivisions - The number of divisions along the Y axis.
   * @param {boolean} addTextureCoords - The addTextureCoords value.

   */
  constructor(
    x = 1.0,
    y = 1.0,
    xDivisions = 1,
    yDivisions = 1,
    addTextureCoords = false
  ) {
    super();

    if (isNaN(x) || isNaN(y) || isNaN(xDivisions) || isNaN(yDivisions))
      throw new Error('Invalid geom args')

    this.__x = x;
    this.__y = y;
    this.__xDivisions = xDivisions;
    this.__yDivisions = yDivisions;
    if (addTextureCoords) this.addVertexAttribute('texCoords', Vec2);
    this.__rebuild();
  }

  /**
   * Getter for X.
   * Is deprectated. Please use "getX".
   * @return {number} - Returns the length.
   */
  get x() {
    console.warn("getter is deprectated. Please use 'getX'");
    return this.getX()
  }

  /**
   * Setter for X.
   * Is deprectated. Please use "setX".
   * @param {number} val - The length along the X axis.
   */
  set x(val) {
    console.warn("getter is deprectated. Please use 'setX'");
    this.setX(val);
  }

  /**
   * Getter for Y.
   * Is deprectated. Please use "getY".
   * @return {number} - Returns the length.
   */
  get y() {
    console.warn("getter is deprectated. Please use 'getY'");
    return this.getY()
  }

  /**
   * Setter for Y.
   * Is deprectated. Please use "setY".
   * @param {number} val - The length along the Y axis.
   */
  set y(val) {
    console.warn("getter is deprectated. Please use 'setY'");
    this.setY(val);
  }

  /**
   * Getter for the length of the point grid along the X axis.
   * @return {number} - Returns the length.
   */
  getX() {
    return this.__x
  }

  /**
   * Setter for the length of the point grid along the X axis.
   * @param {number} val - The length along the X axis.
   */
  setX(val) {
    this.__x = val;
    this.__resize();
  }

  /**
   * Getter for the length of the point grid along the Y axis.
   * @return {number} - Returns the length.
   */
  getY() {
    return this.__y
  }

  /**
   * Setter for the length of the point grid along the Y axis.
   * @param {number} val - The length along the Y axis.
   */
  setY(val) {
    this.__y = val;
    this.__resize();
  }

  /**
   * Setter for the size of the point grid.
   * @param {number} x - The length along the X axis.
   * @param {number} y - The length along the Y axis.
   */
  setSize(x, y) {
    this.__x = x;
    this.__y = y;
    this.__resize();
  }

  /**
   * The __rebuild method.
   * @private
   */
  __rebuild() {
    this.setNumVertices(this.__xDivisions * this.__yDivisions);

    const texCoords = this.getVertexAttribute('texCoords');
    if (texCoords) {
      for (let i = 0; i < this.__yDivisions; i++) {
        const y = i / (this.__yDivisions - 1);
        for (let j = 0; j < this.__xDivisions; j++) {
          const x = j / (this.__xDivisions - 1);
          texCoords.getValueRef(i * this.__xDivisions + j).set(x, y);
        }
      }
    }

    this.__resize();
  }

  /**
   * The __resize method.
   * @private
   */
  __resize() {
    for (let i = 0; i < this.__yDivisions; i++) {
      const y = (i / (this.__yDivisions - 1) - 0.5) * this.__y;
      for (let j = 0; j < this.__xDivisions; j++) {
        const x = (j / (this.__xDivisions - 1) - 0.5) * this.__x;
        this.getVertex(i * this.__xDivisions + j).set(x, y, 0.0);
      }
    }
    this.setBoundingBoxDirty();
  }

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - Returns the json object.
   */
  toJSON() {
    const json = super.toJSON();
    json['x'] = this.__x;
    json['y'] = this.__y;
    json['xDivisions'] = this.__xDivisions;
    json['yDivisions'] = this.__yDivisions;
    return json
  }
}

/** A class for generating a rectangle shape.
 * @extends Lines
 */
class Rect extends Lines {
  /**
   * Create a rect.
   * @param {number} x - The length of the rect along the X axis.
   * @param {number} y - The length of the rect along the Y axis.
   */
  constructor(x = 1.0, y = 1.0) {
    super();

    if (isNaN(x) || isNaN(y)) throw new Error('Invalid geom args')

    this.__x = this.addParameter(new NumberParameter('x', x));
    this.__x.valueChanged.connect(this.__resize.bind(this));
    this.__y = this.addParameter(new NumberParameter('y', y));
    this.__y.valueChanged.connect(this.__resize.bind(this));
    this.__rebuild();
  }

  /**
   * Getter for the length of the rect along the X axis.
   * @return {number} - Returns the length.
   */
  get x() {
    return this.__x.getValue()
  }

  /**
   * Setter for the length of the rect along the X axis.
   * @param {number} val - The length along the X axis.
   */
  set x(val) {
    this.__x.setValue(val);
  }

  /**
   * Getter for the length of the rect along the Y axis.
   * @return {number} - Returns the length.
   */
  get y() {
    return this.__y.getValue()
  }

  /**
   * Setter for the length of the rect along the U axis.
   * @param {number} val - The length along the Y axis.
   */
  set y(val) {
    this.__y.setValue(val);
  }

  /**
   * Setter for the size of the rect.
   * @param {number} x - The length along the X axis.
   * @param {number} y - The length along the Y axis.
   */
  setSize(x, y) {
    this.__x.setValue(x, -1);
    this.__y.setValue(y, -1);
    this.__resize();
  }

  /**
   * The __rebuild method.
   * @private
   */
  __rebuild() {
    this.setNumVertices(4);
    this.setNumSegments(4);
    this.setSegment(0, 0, 1);
    this.setSegment(1, 1, 2);
    this.setSegment(2, 2, 3);
    this.setSegment(3, 3, 0);
    this.__resize(-1);
    this.geomDataTopologyChanged.emit();
  }

  /**
   * The __resize method.
   * @param {number} mode - The mode value.
   * @private
   */
  __resize(mode) {
    const x = this.__x.getValue();
    const y = this.__y.getValue();

    this.getVertex(0).set(-0.5 * x, -0.5 * y, 0.0);
    this.getVertex(1).set(0.5 * x, -0.5 * y, 0.0);
    this.getVertex(2).set(0.5 * x, 0.5 * y, 0.0);
    this.getVertex(3).set(-0.5 * x, 0.5 * y, 0.0);
    this.setBoundingBoxDirty();
    if (mode != -1) this.geomDataChanged.emit();
  }

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - Returns the json object.
   */
  toJSON() {
    const json = super.toJSON();
    json['x'] = this.__x;
    json['y'] = this.__y;
    return json
  }
}
sgFactory.registerClass('Rect', Rect);

/** A class for generating a circle shape.
 * @extends Lines
 */
class Circle extends Lines {
  /**
   * Create a circle.
   * @param {number} radius - The radius of the circle.
   * @param {number} numSegments - The number of segments.
   */
  constructor(radius = 1.0, angle = Math.PI * 2, numSegments = 32) {
    super();

    if (isNaN(radius) || isNaN(numSegments))
      throw new Error('Invalid geom args')

    this.__radius = this.addParameter(new NumberParameter('Radius', radius));
    this.__angle = this.addParameter(new NumberParameter('Angle', angle));
    this.__numSegments = this.addParameter(
      new NumberParameter(
        'NumSegments',
        numSegments >= 3 ? numSegments : 3,
        [3, 200],
        1
      )
    );
    this.__radius.valueChanged.connect(this.__resize.bind(this));
    this.__angle.valueChanged.connect(this.__rebuild.bind(this));
    this.__numSegments.valueChanged.connect(this.__rebuild.bind(this));
    this.__rebuild();
  }

  /**
   * The __rebuild method.
   * @private
   */
  __rebuild() {
    const segs = this.__numSegments.getValue();
    this.setNumVertices(segs);
    const arc = this.__angle.getValue() < Math.PI * 2;
    if (arc) this.setNumSegments(segs - 1);
    else this.setNumSegments(segs);
    for (let i = 0; i < (arc ? segs-1 : segs); i++) this.setSegment(i, i, (i + 1) % segs);
    this.__resize(-1);
    this.geomDataTopologyChanged.emit();
  }

  /**
   * The __resize method.
   * @param {number} mode - The mode value.
   * @private
   */
  __resize(mode) {
    const radius = this.__radius.getValue();
    const segs = this.__numSegments.getValue();
    const step = this.__angle.getValue() / segs;
    for (let i = 0; i < segs; i++)
      this.getVertex(i).set(
        Math.cos(step * i) * radius,
        Math.sin(step * i) * radius,
        0.0
      );
    this.setBoundingBoxDirty();
    if (mode != -1) this.geomDataChanged.emit();
  }
}
sgFactory.registerClass('Circle', Circle);

/** A class for generating a cross shape.
 * @extends Lines
 */
class Cross extends Lines {
  /**
   * Create a cross.
   * @param {number} size - The size of the cross.
   */
  constructor(size = 1.0) {
    super();

    if (isNaN(size)) throw new Error('Invalid geom args')

    this.__sizeParam = this.addParameter(new NumberParameter('size', size));
    this.__rebuild();

    const resize = () => {
      this.__resize();
    };
    this.__sizeParam.valueChanged.connect(resize);
  }

  /**
   * Getter for the cross size.
   * @return {number} - Returns the size.
   */
  get size() {
    return this.__size
  }

  /**
   * Setter for the cross size.
   * @param {number} val - The size value.
   */
  set size(val) {
    this.__size = val;
    this.__resize();
  }

  /**
   * The __rebuild method.
   * @private
   */
  __rebuild() {
    this.setNumVertices(6);
    this.setNumSegments(3);
    this.setSegment(0, 0, 1);
    this.setSegment(1, 2, 3);
    this.setSegment(2, 4, 5);
    this.__resize();
  }

  /**
   * The __resize method.
   * @private
   */
  __resize() {
    const size = this.__sizeParam.getValue();
    this.getVertex(0).set(-0.5 * size, 0, 0);
    this.getVertex(1).set(0.5 * size, 0, 0);
    this.getVertex(2).set(0, 0.5 * size, 0);
    this.getVertex(3).set(0, -0.5 * size, 0);
    this.getVertex(4).set(0, 0, 0.5 * size);
    this.getVertex(5).set(0, 0, -0.5 * size);
    this.setBoundingBoxDirty();
  }
}
sgFactory.registerClass('Cross', Cross);

/** A class for generating a lines cuboid shape.
 * @extends Lines
 */
class LinesCuboid extends Lines {
  /**
   * Create a lines cuboid.
   * @param {number} x - The length of the line cuboid along the X axis.
   * @param {number} y - The length of the line cuboid along the Y axis.
   * @param {number} z - The length of the line cuboid along the Z axis.
   * @param {boolean} baseZAtZero - The baseZAtZero value.
   */
  constructor(x = 1.0, y = 1.0, z = 1.0, baseZAtZero = false) {
    super();

    this.__x = this.addParameter(new NumberParameter('x', x));
    this.__x.valueChanged.connect(this.__resize.bind(this));
    this.__y = this.addParameter(new NumberParameter('y', y));
    this.__y.valueChanged.connect(this.__resize.bind(this));
    this.__z = this.addParameter(new NumberParameter('z', z));
    this.__z.valueChanged.connect(this.__resize.bind(this));
    this.__baseZAtZero = this.addParameter(
      new NumberParameter('BaseZAtZero', baseZAtZero)
    );
    this.__baseZAtZero.valueChanged.connect(this.__rebuild.bind(this));
    this.__rebuild();
  }

  /**
   * The __rebuild method.
   * @private
   */
  __rebuild() {
    this.setNumVertices(8);
    this.setNumSegments(12);
    this.setSegment(0, 0, 1);
    this.setSegment(1, 1, 2);
    this.setSegment(2, 2, 3);
    this.setSegment(3, 3, 0);

    this.setSegment(4, 4, 5);
    this.setSegment(5, 5, 6);
    this.setSegment(6, 6, 7);
    this.setSegment(7, 7, 4);

    this.setSegment(8, 0, 4);
    this.setSegment(9, 1, 5);
    this.setSegment(10, 2, 6);
    this.setSegment(11, 3, 7);
    this.__resize(-1);
    this.geomDataTopologyChanged.emit();
  }

  /**
   * The __resize method.
   * @param {number} mode - The mode value.
   * @private
   */
  __resize(mode) {
    const x = this.__x.getValue();
    const y = this.__y.getValue();
    const z = this.__z.getValue();
    const baseZAtZero = this.__baseZAtZero.getValue();

    let zoff = 0.5;
    if (baseZAtZero) zoff = 1.0;
    this.getVertex(0).set(0.5 * x, -0.5 * y, zoff * z);
    this.getVertex(1).set(0.5 * x, 0.5 * y, zoff * z);
    this.getVertex(2).set(-0.5 * x, 0.5 * y, zoff * z);
    this.getVertex(3).set(-0.5 * x, -0.5 * y, zoff * z);

    zoff = -0.5;
    if (baseZAtZero) zoff = 0.0;
    this.getVertex(4).set(0.5 * x, -0.5 * y, zoff * z);
    this.getVertex(5).set(0.5 * x, 0.5 * y, zoff * z);
    this.getVertex(6).set(-0.5 * x, 0.5 * y, zoff * z);
    this.getVertex(7).set(-0.5 * x, -0.5 * y, zoff * z);

    this.setBoundingBoxDirty();
    if (mode != -1) this.geomDataChanged.emit();
  }

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - Returns the json object.
   */
  toJSON() {
    const json = super.toJSON();
    json['size'] = this.__size;
    return json
  }
}

sgFactory.registerClass('LinesCuboid', LinesCuboid);

/** A class for generating a grid.
 * @extends Lines
 */
class Grid extends Lines {
  /**
   * Create a grid.
   * @param {number} x - The length of the grid along the X axis.
   * @param {number} y - The length of the grid along the Y axis.
   * @param {number} xDivisions - The number of divisions along the X axis.
   * @param {number} yDivisions - The number of divisions along the X axis.
   * @param {boolean} skipCenterLines - A boolean indicating whether to display the center grid lines or not.
   */
  constructor(
    x = 1.0,
    y = 1.0,
    xDivisions = 10,
    yDivisions = 10,
    skipCenterLines = false
  ) {
    super();

    if (isNaN(x) || isNaN(y) || isNaN(xDivisions) || isNaN(yDivisions))
      throw new Error('Invalid geom args')

    this.__xParam = this.addParameter(new NumberParameter('x', x));
    this.__yParam = this.addParameter(new NumberParameter('y', y));
    this.__xDivisionsParam = this.addParameter(
      new NumberParameter('xDivisions', xDivisions)
    );
    this.__yDivisionsParam = this.addParameter(
      new NumberParameter('yDivisions', yDivisions)
    );
    this.__skipCenterLinesParam = this.addParameter(
      new BooleanParameter('skipCenterLines', skipCenterLines)
    );

    this.__rebuild();
  }

  /**
   * Getter for the length of the grid along the X axis.
   * @return {number} - Returns the length.
   */
  get sizeX() {
    return this.__x
  }

  /**
   * Setter for the length of the grid along the X axis.
   * @param {number} val - The length along the X axis.
   */
  set sizeX(val) {
    this.__x = val;
    this.__resize();
  }

  /**
   * Getter for the length of the grid along the Y axis.
   * @return {number} - Returns the length.
   */
  get sizeY() {
    return this.__y
  }

  /**
   * Setter for the length of the grid along the U axis.
   * @param {number} val - The length along the Y axis.
   */
  set sizeY(val) {
    this.__y = val;
    this.__resize();
  }

  /**
   * Getter for the number of divisions along the X axis.
   * @return {number} - Returns the number of divisions.
   */
  get divisionsX() {
    return this.__xDivisions
  }

  /**
   * Setter for the number of divisions along the X axis.
   * @param {number} val - The number of divisions.
   */
  set divisionsX(val) {
    this.__xDivisions = val;
    this.__rebuild();
  }

  /**
   * Getter for the number of divisions along the Y axis.
   * @return {number} - Returns the number of divisions.
   */
  get divisionsY() {
    return this.__yDivisions
  }

  /**
   * Setter for the number of divisions along the Y axis.
   * @param {number} val - The number of divisions.
   */
  set divisionsY(val) {
    this.__yDivisions = val;
    this.__rebuild();
  }

  /**
   * Setter for the size of the grid.
   * @param {number} x - The length along the X axis.
   * @param {number} y - The length along the Y axis.
   */
  setSize(x, y) {
    this.__x = x;
    this.__y = y;
    this.__resize();
  }

  /**
   * The __rebuild method.
   * @private
   */
  __rebuild() {
    const xDivisions = this.__xDivisionsParam.getValue();
    const yDivisions = this.__yDivisionsParam.getValue();

    const skipCenterLines =
      this.__skipCenterLinesParam.getValue() &&
      xDivisions % 2 == 0 &&
      yDivisions % 2 == 0;
    this.setNumVertices(
      (xDivisions + yDivisions + 2 - (skipCenterLines ? 1 : 0)) * 2
    );
    this.setNumSegments(xDivisions + yDivisions + 2 - (skipCenterLines ? 1 : 0));
    let idx = 0;
    for (let i = 0; i <= xDivisions; i++) {
      if (skipCenterLines && i == xDivisions / 2) continue
      const v0 = idx * 2;
      const v1 = idx * 2 + 1;
      this.setSegment(idx, v0, v1);
      idx++;
    }
    for (let i = 0; i <= yDivisions; i++) {
      if (skipCenterLines && i == xDivisions / 2) continue
      const v0 = idx * 2;
      const v1 = idx * 2 + 1;
      this.setSegment(idx, v0, v1);
      idx++;
    }
    this.__resize();
  }

  /**
   * The __resize method.
   * @private
   */
  __resize() {
    const xDivisions = this.__xDivisionsParam.getValue();
    const yDivisions = this.__yDivisionsParam.getValue();
    const xSize = this.__xParam.getValue();
    const ySize = this.__yParam.getValue();

    const skipCenterLines =
      this.__skipCenterLinesParam.getValue() &&
      xDivisions % 2 == 0 &&
      yDivisions % 2 == 0;
    let idx = 0;
    for (let i = 0; i <= xDivisions; i++) {
      if (skipCenterLines && i == xDivisions / 2) continue
      const v0 = idx * 2;
      const v1 = idx * 2 + 1;
      const x = (i / xDivisions - 0.5) * xSize;
      this.getVertex(v0).set(x, -0.5 * ySize, 0.0);
      this.getVertex(v1).set(x, 0.5 * ySize, 0.0);
      idx++;
    }
    for (let i = 0; i <= yDivisions; i++) {
      if (skipCenterLines && i == xDivisions / 2) continue
      const v0 = idx * 2;
      const v1 = idx * 2 + 1;
      const y = (i / yDivisions - 0.5) * ySize;
      this.getVertex(v0).set(-0.5 * xSize, y, 0.0);
      this.getVertex(v1).set(0.5 * xSize, y, 0.0);
      idx++;
    }

    this.setBoundingBoxDirty();
  }

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - Returns the json object.
   */
  toJSON() {
    const json = super.toJSON();
    json['x'] = this.__x;
    json['z'] = this.__y;
    json['xDivisions'] = this.__xDivisions;
    json['yDivisions'] = this.__yDivisions;
    return json
  }
}

sgFactory.registerClass('Grid', Grid);

/** A class for generating a cone geometry.
 * @extends Mesh
 */
class Cone extends Mesh {
  /**
   * Create a cone.
   * @param {number} radius - The radius of the cone at the base.
   * @param {number} height - The height of the cone.
   * @param {number} detail - The detail of the cone.
   * @param {boolean} cap -  A boolean indicating whether the base of the cone is capped or open.
   */
  constructor(radius = 0.5, height = 1.0, detail = 32, cap = true) {
    super();

    if (isNaN(radius) || isNaN(height) || isNaN(detail))
      throw new Error('Invalid geom args')

    this.__radiusParam = this.addParameter(
      new NumberParameter('radius', radius)
    );
    this.__heightParam = this.addParameter(
      new NumberParameter('height', height)
    );
    this.__detailParam = this.addParameter(
      new NumberParameter('detail', detail >= 3 ? detail : 3, [3, 200], 1)
    );
    this.__capParam = this.addParameter(new BooleanParameter('cap', cap));

    this.addVertexAttribute('texCoords', Vec2);
    this.addVertexAttribute('normals', Vec3$1);
    this.__rebuild();

    const resize = () => {
      this.__resize();
    };
    const rebuild = () => {
      this.__rebuild();
    };
    this.__radiusParam.valueChanged.connect(resize);
    this.__heightParam.valueChanged.connect(resize);
    this.__detailParam.valueChanged.connect(rebuild);
    this.__capParam.valueChanged.connect(rebuild);
  }

  /**
   * Getter for the cone radius.
   * @return {number} - Returns the radius.
   */
  get radius() {
    return this.__radiusParam.getValue()
  }

  /**
   * Setter for the cone radius.
   * @param {number} val - The radius value.
   */
  set radius(val) {
    this.__radiusParam.setValue(val);
    this.__resize();
  }

  /**
   * Getter for the cone height.
   * @return {number} - Returns the height.
   */
  get height() {
    return this.__heightParam.getValue()
  }

  /**
   * Setter for the cone height.
   * @param {number} val - The height value.
   */
  set height(val) {
    this.__heightParam.setValue(val);
    this.__resize();
  }

  /**
   * Getter for the cone detail.
   * @return {number} - Returns the detail.
   */
  get detail() {
    return this.__detailParam.getValue()
  }

  /**
   * Setter for the cone detail.
   * @param {number} val - The detail value.
   */
  set detail(val) {
    this.__detailParam.setValue(val);
    this.__rebuild();
  }

  /**
   * Getter for the cone cap.
   * @return {any} - The return value.
   */
  get cap() {
    return this.__capParam.getValue()
  }

  /**
   * Setter for the cone cap.
   * @param {number} val - The val param.
   */
  set cap(val) {
    this.__capParam.setValue(val);
    this.__rebuild();
  }

  /**
   * The __rebuild method.
   * @private
   */
  __rebuild() {
    this.clear();

    const nbSides = this.__detailParam.getValue();
    const radius = this.__radiusParam.getValue();
    const height = this.__heightParam.getValue();
    const cap = this.__capParam.getValue();
    let numVertices = nbSides + 1;
    if (cap) {
      numVertices += 1;
    }
    this.setNumVertices(numVertices);
    const tipPoint = nbSides;
    const basePoint = nbSides + 1;

    // ////////////////////////////
    // Set Vertex Positions

    this.getVertex(tipPoint).set(0.0, 0.0, height);
    for (let i = 0; i < nbSides; i++) {
      const theta = (i / nbSides) * 2.0 * Math.PI;
      this.getVertex(i).set(
        radius * Math.cos(theta),
        radius * Math.sin(theta),
        0.0
      );
    }
    if (cap) {
      this.getVertex(basePoint).set(0.0, 0.0, 0.0);
    }

    // ////////////////////////////
    // Build the topology
    this.setFaceCounts([nbSides + (cap ? nbSides : 0)]);
    for (let i = 0; i < nbSides; i++) {
      const j = (i + 1) % nbSides;
      this.setFaceVertexIndices(i, j, i, tipPoint);
    }
    if (cap) {
      for (let i = 0; i < nbSides; i++) {
        const j = (i + 1) % nbSides;
        this.setFaceVertexIndices(nbSides + i, i, j, basePoint);
      }
    }

    // ////////////////////////////
    // setNormals
    const normals = this.getVertexAttribute('normals');

    let normalElevation;
    const divider = height;
    if (Math.abs(height) < 1.0e-12)
      normalElevation = height < 0 ? -1.0e-12 : 1.0e-12;
    normalElevation = radius / divider;

    let tri = 0;
    for (let i = 0; i < nbSides; i++) {
      const theta1 = ((i + 1) / nbSides) * 2.0 * Math.PI;
      const theta2 = (i / nbSides) * 2.0 * Math.PI;
      const theta = (theta1 + theta2) * 0.5;

      normals.setFaceVertexValue(
        tri,
        0,
        new Vec3$1(
          Math.cos(theta1),
          normalElevation,
          Math.sin(theta1)
        ).normalize()
      );
      normals.setFaceVertexValue(
        tri,
        1,
        new Vec3$1(
          Math.cos(theta2),
          normalElevation,
          Math.sin(theta2)
        ).normalize()
      );
      normals.setFaceVertexValue(
        tri,
        2,
        new Vec3$1(Math.cos(theta), normalElevation, Math.sin(theta)).normalize()
      );
      tri++;
    }
    if (cap) {
      const normal = new Vec3$1(0.0, -1.0, 0.0);
      for (let i = 0; i < nbSides; i++) {
        normals.setFaceVertexValue(tri, 0, normal);
        normals.setFaceVertexValue(tri, 1, normal);
        normals.setFaceVertexValue(tri, 2, normal);
        tri++;
      }
    }

    // ////////////////////////////
    // setUVs
    const texCoords = this.getVertexAttribute('texCoords');

    // Now set the attrbute values
    tri = 0;
    for (let i = 0; i < nbSides; i++) {
      texCoords.setFaceVertexValue(tri, 0, new Vec2((i + 1) / nbSides, 0.0));
      texCoords.setFaceVertexValue(tri, 1, new Vec2(i / nbSides, 0.0));
      texCoords.setFaceVertexValue(tri, 2, new Vec2((i + 0.5) / nbSides, 1.0));
    }
    if (cap) {
      for (let i = 0; i < nbSides; i++) {
        texCoords.setFaceVertexValue(tri, 0, new Vec2(i / nbSides, 0.0));
        texCoords.setFaceVertexValue(tri, 1, new Vec2((i + 1) / nbSides, 0.0));
        texCoords.setFaceVertexValue(tri, 2, new Vec2((i + 0.5) / nbSides, 1.0));
        tri++;
      }
    }

    this.setBoundingBoxDirty();
  }

  /**
   * The __resize method.
   * @private
   */
  __resize() {
    const nbSides = this.__detailParam.getValue();
    const radius = this.__radiusParam.getValue();
    const height = this.__heightParam.getValue();
    const cap = this.__capParam.getValue();

    const tipPoint = nbSides;
    const basePoint = nbSides + 1;

    this.getVertex(tipPoint).set(0.0, 0.0, height);
    for (let i = 0; i < nbSides; i++) {
      const theta = (i / nbSides) * 2.0 * Math.PI;
      this.getVertex(i).set(
        radius * Math.cos(theta),
        radius * Math.sin(theta),
        0.0
      );
    }
    if (this.__cap) {
      this.getVertex(basePoint).set(0.0, 0.0, 0.0);
    }

    this.setBoundingBoxDirty();
  }
}

sgFactory.registerClass('Cone', Cone);

/** A class for generating a cuboid geometry.
 * @extends Mesh
 */
class Cuboid extends Mesh {
  /**
   * Create a cuboid.
   * @param {number} x - The length of the cuboid along the X axis.
   * @param {number} y - The length of the cuboid along the Y axis.
   * @param {number} z - The length of the cuboid along the Z axis.
   * @param {boolean} baseZAtZero - The baseZAtZero value.
   */
  constructor(x = 1.0, y = 1.0, z = 1.0, baseZAtZero = false) {
    super();

    if (isNaN(x) || isNaN(y) || isNaN(z)) throw new Error('Invalid geom args')

    this.__xParam = this.addParameter(new NumberParameter('x', x));
    this.__yParam = this.addParameter(new NumberParameter('y', y));
    this.__zParam = this.addParameter(new NumberParameter('z', z));
    this.__baseZAtZeroParam = this.addParameter(
      new BooleanParameter('baseZAtZero', baseZAtZero)
    );

    this.setFaceCounts([0, 6]);
    this.setFaceVertexIndices(0, 0, 1, 2, 3);
    this.setFaceVertexIndices(1, 7, 6, 5, 4);

    this.setFaceVertexIndices(2, 1, 0, 4, 5);
    this.setFaceVertexIndices(3, 3, 2, 6, 7);

    this.setFaceVertexIndices(4, 0, 3, 7, 4);
    this.setFaceVertexIndices(5, 2, 1, 5, 6);
    this.setNumVertices(8);
    this.addVertexAttribute('texCoords', Vec2);
    this.addVertexAttribute('normals', Vec3$1);
    this.__rebuild();

    const resize = () => {
      this.__resize();
    };
    this.__xParam.valueChanged.connect(resize);
    this.__yParam.valueChanged.connect(resize);
    this.__zParam.valueChanged.connect(resize);
    this.__baseZAtZeroParam.valueChanged.connect(resize);
  }

  /**
   * Setter for the size of the cuboid.
   * @param {number} x - The length of the edges along the X axis.
   * @param {number} y - The length of the edges along the Y axis.
   * @param {number} z - The length of the edges along the Z axis.
   */
  setSize(x, y, z) {
    this.__xParam.setValue(x);
    this.__yParam.setValue(y);
    this.__zParam.setValue(z);
  }

  /**
   * Setter for the base size of the cuboid.
   * @param {number} x - The length of the edges along the X axis.
   * @param {number} y - The length of the edges along the Y axis.
   */
  setBaseSize(x, y) {
    this.__xParam.setValue(x);
    this.__yParam.setValue(y);
  }

  /**
   * The __rebuild method.
   * @private
   */
  __rebuild() {
    const normals = this.getVertexAttribute('normals');
    for (let i = 0; i < 6; i++) {
      let normal;
      switch (i) {
        case 0:
          normal = new Vec3$1(0, 0, 1);
          break
        case 1:
          normal = new Vec3$1(0, 0, -1);
          break
        case 2:
          normal = new Vec3$1(1, 0, 0);
          break
        case 3:
          normal = new Vec3$1(-1, 0, 0);
          break
        case 4:
          normal = new Vec3$1(0, 1, 0);
          break
        case 5:
          normal = new Vec3$1(0, -1, 0);
          break
      }
      normals.setFaceVertexValue(i, 0, normal);
      normals.setFaceVertexValue(i, 1, normal);
      normals.setFaceVertexValue(i, 2, normal);
      normals.setFaceVertexValue(i, 3, normal);
    }
    const texCoords = this.getVertexAttribute('texCoords');
    for (let i = 0; i < 6; i++) {
      texCoords.setFaceVertexValue(i, 0, new Vec2(0, 0));
      texCoords.setFaceVertexValue(i, 1, new Vec2(1, 0));
      texCoords.setFaceVertexValue(i, 2, new Vec2(1, 1));
      texCoords.setFaceVertexValue(i, 3, new Vec2(0, 1));
    }
    this.__resize();
  }

  /**
   * The __resize method.
   * @param {number} mode - The mode value.
   * @private
   */
  __resize(mode) {
    const x = this.__xParam.getValue();
    const y = this.__yParam.getValue();
    const z = this.__zParam.getValue();
    const baseZAtZero = this.__baseZAtZeroParam.getValue();
    let zoff = 0.5;
    if (baseZAtZero) zoff = 1.0;
    this.getVertex(0).set(0.5 * x, -0.5 * y, zoff * z);
    this.getVertex(1).set(0.5 * x, 0.5 * y, zoff * z);
    this.getVertex(2).set(-0.5 * x, 0.5 * y, zoff * z);
    this.getVertex(3).set(-0.5 * x, -0.5 * y, zoff * z);

    zoff = -0.5;
    if (baseZAtZero) zoff = 0.0;
    this.getVertex(4).set(0.5 * x, -0.5 * y, zoff * z);
    this.getVertex(5).set(0.5 * x, 0.5 * y, zoff * z);
    this.getVertex(6).set(-0.5 * x, 0.5 * y, zoff * z);
    this.getVertex(7).set(-0.5 * x, -0.5 * y, zoff * z);

    this.setBoundingBoxDirty();
    this.geomDataChanged.emit();
  }

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - Returns the json object.
   */
  toJSON() {
    const json = super.toJSON();
    json['x'] = this.__x;
    json['y'] = this.__y;
    json['z'] = this.__z;
    return json
  }
}

sgFactory.registerClass('Cuboid', Cuboid);

/** A class for generating a cylinder geometry.
 * @extends Mesh
 */
class Cylinder extends Mesh {
  /**
   * Create a cylinder.
   * @param {number} radius - The radius of the cylinder.
   * @param {number} height - The height of the cylinder.
   * @param {number} sides - The number of sides.
   * @param {number} loops - The number of loops.
   * @param {boolean} caps - A boolean indicating whether the ends of the cylinder are capped or open.
   * @param {boolean} baseZAtZero - The baseZAtZero value.
   */
  constructor(
    radius = 0.5,
    height = 1.0,
    sides = 32,
    loops = 2,
    caps = true,
    baseZAtZero = false
  ) {
    super();

    if (isNaN(radius) || isNaN(height) || isNaN(sides) || isNaN(loops))
      throw new Error('Invalid geom args')

    this.__radiusParam = this.addParameter(
      new NumberParameter('radius', radius)
    );
    this.__heightParam = this.addParameter(
      new NumberParameter('height', height)
    );
    this.__sidesParam = this.addParameter(
      new NumberParameter('sides', sides >= 3 ? sides : 3, [3, 200], 1)
    );
    this.__loopsParam = this.addParameter(
      new NumberParameter('loops', loops >= 2 ? loops : 2, [1, 200], 1)
    );
    this.__capsParam = this.addParameter(new BooleanParameter('caps', caps));
    this.__baseZAtZeroParam = this.addParameter(
      new BooleanParameter('baseZAtZero', baseZAtZero)
    );

    this.addVertexAttribute('texCoords', Vec2);
    this.addVertexAttribute('normals', Vec3$1);
    this.__rebuild();

    const resize = () => {
      this.__resize();
    };
    const rebuild = () => {
      this.__rebuild();
    };
    this.__radiusParam.valueChanged.connect(resize);
    this.__heightParam.valueChanged.connect(resize);
    this.__sidesParam.valueChanged.connect(rebuild);
    this.__loopsParam.valueChanged.connect(rebuild);
    this.__capsParam.valueChanged.connect(rebuild);
    this.__baseZAtZeroParam.valueChanged.connect(resize);
  }

  /**
   * The __rebuild method.
   * @private
   */
  __rebuild() {
    this.clear();

    const radius = this.__radiusParam.getValue();
    const nbSides = this.__sidesParam.getValue();
    const nbLoops = this.__loopsParam.getValue();
    const height = this.__heightParam.getValue();
    const caps = this.__capsParam.getValue();
    const baseZAtZero = this.__baseZAtZeroParam.getValue();

    let numVertices = nbSides * nbLoops;
    if (caps) {
      numVertices += 2;
    }
    this.setNumVertices(numVertices);
    if (caps) this.setFaceCounts([nbSides * 2, nbSides]);
    else this.setFaceCounts([0, nbSides]);

    // ////////////////////////////
    // Set Vertex Positions
    // let vertex = 0;
    // for (let i = 0; i < nbLoops; i++) {
    //     let z = ((i / (nbLoops - 1)) * this.__height) - (height * 0.5);
    //     for (let j = 0; j < nbSides; j++) {
    //         let phi = (j / nbSides) * 2.0 * Math.PI;
    //         this.getVertex(vertex).set(Math.sin(phi) * radius, Math.cos(phi) * radius, z);
    //         vertex++;
    //     }
    // }
    // if (caps) {
    //     // Top caps
    //     this.getVertex(numVertices - 1).set(0.0, 0.0, height * -0.5);
    //     this.getVertex(numVertices - 2).set(0.0, 0.0, height * 0.5);
    // }

    // ////////////////////////////
    // Build the topology
    let faceIndex = 0;
    // build the topology for the body of the cylinder
    for (let i = 0; i < nbLoops - 1; i++) {
      for (let j = 0; j < nbSides; j++) {
        const v0 = nbSides * i + ((j + 1) % nbSides);
        const v1 = nbSides * i + j;
        const v2 = nbSides * (i + 1) + j;
        const v3 = nbSides * (i + 1) + ((j + 1) % nbSides);
        this.setFaceVertexIndices(faceIndex++, v0, v1, v2, v3);
      }
    }

    if (caps) {
      // Bottom caps topology
      for (let j = 0; j < nbSides; j++) {
        const v0 = numVertices - 1;
        const v1 = j;
        const v2 = (j + 1) % nbSides;
        this.setFaceVertexIndices(faceIndex++, v0, v1, v2);
      }
      // Top caps topology
      for (let j = 0; j < nbSides; j++) {
        const v0 = nbSides * (nbLoops - 1) + j;
        const v1 = numVertices - 2;
        const v2 = nbSides * (nbLoops - 1) + ((j + 1) % nbSides);
        this.setFaceVertexIndices(faceIndex++, v0, v1, v2);
      }
    }

    // ////////////////////////////
    // setNormals
    const normals = this.getVertexAttribute('normals');

    // Now set the attrbute values
    faceIndex = 0;
    for (let i = 0; i < nbLoops - 1; i++) {
      for (let j = 0; j < nbSides; j++) {
        let phi = (j / nbSides) * 2.0 * Math.PI;
        const normal1 = new Vec3$1(Math.sin(phi), Math.cos(phi), 0.0);
        normals.setFaceVertexValue(faceIndex, 0, normal1);
        normals.setFaceVertexValue(faceIndex, 1, normal1);

        phi = ((j + 1) / nbSides) * 2.0 * Math.PI;
        const normal2 = new Vec3$1(Math.sin(phi), Math.cos(phi), 0.0);
        normals.setFaceVertexValue(faceIndex, 2, normal2);
        normals.setFaceVertexValue(faceIndex, 3, normal2);
        faceIndex++;
      }
    }
    if (caps) {
      const normal = new Vec3$1(0.0, 0.0, -1.0);
      for (let i = 0; i < nbSides; i++) {
        normals.setFaceVertexValue(faceIndex, 0, normal);
        normals.setFaceVertexValue(faceIndex, 1, normal);
        normals.setFaceVertexValue(faceIndex, 2, normal);
        faceIndex++;
      }
      normal.set(0.0, 0.0, 1.0);
      for (let i = 0; i < nbSides; i++) {
        normals.setFaceVertexValue(faceIndex, 0, normal);
        normals.setFaceVertexValue(faceIndex, 1, normal);
        normals.setFaceVertexValue(faceIndex, 2, normal);
        faceIndex++;
      }
    }

    // ////////////////////////////
    // setUVs
    const texCoords = this.getVertexAttribute('texCoords');

    // Now set the attrbute values
    faceIndex = 0;
    for (let i = 0; i < nbSides; i++) {
      texCoords.setFaceVertexValue(
        faceIndex,
        0,
        new Vec2((i + 1) / nbSides, 0.0)
      );
      texCoords.setFaceVertexValue(
        faceIndex,
        2,
        new Vec2((i + 1) / nbSides, 1.0)
      );
      texCoords.setFaceVertexValue(faceIndex, 1, new Vec2(i / nbSides, 0.0));
      texCoords.setFaceVertexValue(faceIndex, 3, new Vec2(i / nbSides, 1.0));
      faceIndex++;
    }
    if (caps) {
      for (let i = 0; i < nbSides; i++) {
        texCoords.setFaceVertexValue(faceIndex, 0, new Vec2(i / nbSides, 0.0));
        texCoords.setFaceVertexValue(
          faceIndex,
          1,
          new Vec2((i + 1) / nbSides, 0.0)
        );
        texCoords.setFaceVertexValue(
          faceIndex,
          2,
          new Vec2((i + 0.5) / nbSides, 1.0)
        );
        faceIndex++;
      }
      for (let i = 0; i < nbSides; i++) {
        texCoords.setFaceVertexValue(faceIndex, 0, new Vec2(i / nbSides, 0.0));
        texCoords.setFaceVertexValue(
          faceIndex,
          1,
          new Vec2((i + 1) / nbSides, 0.0)
        );
        texCoords.setFaceVertexValue(
          faceIndex,
          2,
          new Vec2((i + 0.5) / nbSides, 1.0)
        );
        faceIndex++;
      }
    }

    // this.setBoundingBoxDirty();
    this.geomDataTopologyChanged.emit();
    this.__resize();
  }

  /**
   * The __resize method.
   * @private
   */
  __resize() {
    const nbSides = this.__sidesParam.getValue();
    const nbLoops = this.__loopsParam.getValue();
    const radius = this.__radiusParam.getValue();
    const height = this.__heightParam.getValue();
    const caps = this.__capsParam.getValue();
    const baseZAtZero = this.__baseZAtZeroParam.getValue();

    let numVertices = nbSides * nbLoops;
    if (caps) {
      numVertices += 2;
    }
    let vertex = 0;
    let zoff = 0.5;
    if (baseZAtZero) zoff = 0.0;
    for (let i = 0; i < nbLoops; i++) {
      const z = (i / (nbLoops - 1)) * height - height * zoff;
      for (let j = 0; j < nbSides; j++) {
        const phi = (j / nbSides) * 2.0 * Math.PI;
        this.getVertex(vertex).set(
          Math.sin(phi) * radius,
          Math.cos(phi) * radius,
          z
        );
        vertex++;
      }
    }
    if (caps) {
      this.getVertex(numVertices - 1).set(
        0.0,
        0.0,
        height * (baseZAtZero ? 0.0 : -0.5)
      );
      this.getVertex(numVertices - 2).set(
        0.0,
        0.0,
        height * (baseZAtZero ? 1.0 : 0.5)
      );
    }

    this.setBoundingBoxDirty();
    this.geomDataChanged.emit();
  }
}

sgFactory.registerClass('Cylinder', Cylinder);

/** A class for generating a disc geometry.
 * @extends Mesh
 */
class Disc extends Mesh {
  /**
   * Create a disc.
   * @param {number} radius - The radius of the disc.
   * @param {number} sides - The number of sides.
   */
  constructor(radius = 0.5, sides = 32) {
    super();

    if (isNaN(radius) || isNaN(sides)) throw new Error('Invalid geom args')

    this.__radiusParam = this.addParameter(
      new NumberParameter('radius', radius)
    );
    this.__sidesParam = this.addParameter(
      new NumberParameter('sides', sides >= 3 ? sides : 3, [3, 200], 1)
    );

    this.addVertexAttribute('texCoords', Vec2);
    this.addVertexAttribute('normals', Vec3$1);
    this.__rebuild();
  }

  /**
   * Getter for the disc radius.
   * @return {number} - Returns the radius.
   */
  get radius() {
    return this.__radius
  }

  /**
   * Setter for disc radius.
   * @param {number} val - The radius value.
   */
  set radius(val) {
    this.__radius = val;
    this.__resize();
  }

  /**
   * Setter for the number of sides.
   * @param {number} val - The number of sides.
   */
  set sides(val) {
    this.__sides = val >= 3 ? val : 3;
    this.__rebuild();
  }

  /**
   * The __rebuild method.
   * @private
   */
  __rebuild() {
    const nbSides = this.__sidesParam.getValue();

    this.setNumVertices(nbSides + 1);
    this.setFaceCounts([nbSides]);

    // ////////////////////////////
    // Set Vertex Positions
    this.getVertex(0).set(0.0, 0.0, 0.0);

    // ////////////////////////////
    // Build the topology
    for (let j = 0; j < nbSides; j++) {
      const v1 = (j % nbSides) + 1;
      const v2 = ((j + 1) % nbSides) + 1;
      this.setFaceVertexIndices(j, 0, v1, v2);
    }

    // ////////////////////////////
    // setNormals
    const normals = this.getVertexAttribute('normals');
    // Now set the attrbute values
    const normal = new Vec3$1(0, 0, 1);
    normals.setValue(0, normal);
    for (let i = 0; i < nbSides; i++) {
      normals.setValue(i + 1, normal);
    }

    // ////////////////////////////
    // setUVs
    const texCoords = this.getVertexAttribute('texCoords');
    texCoords.getValueRef(0).set(0.5, 0.5);
    for (let i = 0; i < nbSides; i++) {
      const phi = (i / nbSides) * 2.0 * Math.PI;
      texCoords
        .getValueRef(i + 1)
        .set(Math.sin(phi) * 0.5 + 0.5, Math.cos(phi) * 0.5 + 0.5);
    }

    this.setBoundingBoxDirty();
    this.__resize();
  }

  /**
   * The __resize method.
   * @param {number} mode - The mode value.
   * @private
   */
  __resize() {
    const nbSides = this.__sidesParam.getValue();
    const radius = this.__radiusParam.getValue();
    for (let i = 0; i < nbSides; i++) {
      const phi = (i / nbSides) * 2.0 * Math.PI;
      this.getVertex(i + 1).set(
        Math.sin(phi) * radius,
        Math.cos(phi) * radius,
        0.0
      );
    }
    this.setBoundingBoxDirty();
  }

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - Returns the json object.
   */
  toJSON() {
    const json = super.toJSON();
    json['radius'] = this.__radius;
    return json
  }
}

sgFactory.registerClass('Disc', Disc);

/** A class for generating a plane geometry.
 * @extends Mesh
 */
class Plane$1 extends Mesh {
  /**
   * Create a plane.
   * @param {number} SizeX - The length of the plane along the X axis.
   * @param {number} SizeY - The length of the plane along the Y axis.
   * @param {number} DetailX - The number of divisions along the X axis.
   * @param {number} DetailY - The number of divisions along the Y axis.
   * @param {boolean} addNormals - The addNormals value.
   * @param {boolean} addTextureCoords - The addTextureCoords value.
   */
  constructor(
    SizeX = 1.0,
    SizeY = 1.0,
    DetailX = 1,
    DetailY = 1,
    addNormals = true,
    addTextureCoords = true
  ) {
    super();

    if (isNaN(SizeX) || isNaN(SizeY) || isNaN(DetailX) || isNaN(DetailY))
      throw new Error('Invalid geom args')

    this.__sizeXParam = this.addParameter(new NumberParameter('SizeX', SizeX));
    this.__sizeYParam = this.addParameter(new NumberParameter('SizeY', SizeY));
    this.__detailXParam = this.addParameter(new NumberParameter('DetailX', DetailX));
    this.__detailYParam = this.addParameter(new NumberParameter('DetailY', DetailY));
    if (addNormals) this.addVertexAttribute('normals', Vec3$1);
    if (addTextureCoords) this.addVertexAttribute('texCoords', Vec2);
    this.__rebuild();
    
    this.__sizeXParam.valueChanged.connect(this.__resize.bind(this));
    this.__sizeYParam.valueChanged.connect(this.__resize.bind(this));
    this.__detailXParam.valueChanged.connect(this.__rebuild.bind(this));
    this.__detailYParam.valueChanged.connect(this.__rebuild.bind(this));
  }

  /**
   * The __rebuild method.
   * @private
   */
  __rebuild() {
    const detailX = this.__detailXParam.getValue();
    const detailY = this.__detailYParam.getValue();
    this.setNumVertices((detailX + 1) * (detailY + 1));
    this.setFaceCounts([0, detailX * detailY]);

    let quadId = 0;
    for (let i = 0; i < detailY; i++) {
      for (let j = 0; j < detailX; j++) {
        const v0 = (detailX + 1) * (i + 1) + j;
        const v1 = (detailX + 1) * (i + 1) + (j + 1);
        const v2 = (detailX + 1) * i + (j + 1);
        const v3 = (detailX + 1) * i + j;
        this.setFaceVertexIndices(quadId, v0, v1, v2, v3);
        quadId = quadId + 1;
      }
    }

    let voff = 0;
    const normals = this.getVertexAttribute('normals');
    if (normals) {
      for (let i = 0; i <= detailY; i++) {
        for (let j = 0; j <= detailX; j++) {
          normals.getValueRef(voff).set(0, 0, 1);
          voff++;
        }
      }
    }

    voff = 0;
    const texCoords = this.getVertexAttribute('texCoords');
    if (texCoords) {
      for (let i = 0; i <= detailY; i++) {
        const y = i / detailY;
        for (let j = 0; j <= detailX; j++) {
          const x = j / detailX;
          texCoords.getValueRef(voff).set(x, y);
          voff++;
        }
      }
    }

    this.__resize(false);
    this.geomDataTopologyChanged.emit();
  }

  /**
   * The __resize method.
   * @private
   */
  __resize(emit = true) {
    const sizeX = this.__sizeXParam.getValue();
    const sizeY = this.__sizeYParam.getValue();
    const detailX = this.__detailXParam.getValue();
    const detailY = this.__detailYParam.getValue();
    let voff = 0;
    for (let i = 0; i <= detailY; i++) {
      const y = (i / detailY - 0.5) * sizeY;
      for (let j = 0; j <= detailX; j++) {
        const x = (j / detailX - 0.5) * sizeX;
        this.getVertex(voff).set(x, y, 0.0);
        voff++;
      }
    }

    this.setBoundingBoxDirty();
    if (emit) this.geomDataChanged.emit();
  }
}

/** A class for generating a sphere geometry.
 * @extends Mesh
 */
class Sphere$1 extends Mesh {
  /**
   * Create a sphere.
   * @param {number} radius - The radius of the sphere.
   * @param {number} sides - The number of sides.
   * @param {number} loops - The number of loops.
   */
  constructor(radius = 1.0, sides = 12, loops = 12) {
    super();

    if (isNaN(radius) || isNaN(sides) || isNaN(loops))
      throw new Error('Invalid geom args')

    this.__radiusParam = this.addParameter(
      new NumberParameter('radius', radius)
    );
    this.__sidesParam = this.addParameter(
      new NumberParameter('sides', sides >= 3 ? sides : 3, [3, 200], 1)
    );
    this.__loopsParam = this.addParameter(
      new NumberParameter('loops', loops >= 3 ? loops : 3, [3, 200], 1)
    );

    this.addVertexAttribute('texCoords', Vec2);
    this.addVertexAttribute('normals', Vec3$1);
    this.__rebuild();

    const resize = () => {
      this.__resize();
    };
    const rebuild = () => {
      this.__rebuild();
    };
    this.__radiusParam.valueChanged.connect(resize);
    this.__sidesParam.valueChanged.connect(rebuild);
    this.__loopsParam.valueChanged.connect(rebuild);
  }

  /**
   * The __rebuild method.
   * @private
   */
  __rebuild() {
    const radius = this.__radiusParam.getValue();
    const nbSides = this.__sidesParam.getValue();
    const nbLoops = this.__loopsParam.getValue();

    const numVertices = 2 + nbSides * nbLoops;
    const numTris = nbSides * 2;
    const numQuads = nbSides * nbLoops;
    this.setNumVertices(numVertices);
    this.setFaceCounts([numTris, numQuads]);

    // ////////////////////////////
    // Set Vertex Positions

    const normals = this.getVertexAttribute('normals');
    const normal = new Vec3$1(0.0, 0.0, 1.0);
    let vertex = 0;
    this.getVertex(vertex).set(0.0, 0.0, radius);
    normals.getValueRef(vertex).set(0.0, 0.0, 1.0);
    vertex++;

    for (let i = 0; i < nbLoops; i++) {
      const theta = ((i + 1) / (nbLoops + 1)) * Math.PI;
      for (let j = 0; j < nbSides; j++) {
        const phi = (j / nbSides) * 2.0 * Math.PI;
        normal.set(
          Math.sin(theta) * Math.cos(phi),
          Math.sin(theta) * Math.sin(phi),
          Math.cos(theta)
        );

        // Set positions and normals at the same time.
        this.getVertex(vertex).setFromOther(normal.scale(radius));
        normals.getValueRef(vertex).setFromOther(normal);
        vertex++;
      }
    }
    this.getVertex(vertex).set(0.0, 0.0, -radius);
    normals.getValueRef(vertex).set(0.0, 0.0, -1.0);
    vertex++;

    // ////////////////////////////
    // Build the topology
    const texCoords = this.getVertexAttribute('texCoords');

    // build the fan at the first pole.
    let faceIndex = 0;
    for (let j = 0; j < nbSides; j++) {
      const v0 = 0;
      const v1 = ((j + 1) % nbSides) + 1;
      const v2 = j + 1;
      this.setFaceVertexIndices(faceIndex, v0, v1, v2);

      const uv0 = new Vec2(0.5, 0.0);
      const uv1 = new Vec2(1.0 - (j + 1) / nbSides, 0.0);
      const uv2 = new Vec2(1.0 - j / nbSides, 1.0 / (nbLoops + 1));
      texCoords.setFaceVertexValue(faceIndex, 0, uv0);
      texCoords.setFaceVertexValue(faceIndex, 1, uv1);
      texCoords.setFaceVertexValue(faceIndex, 2, uv2);

      faceIndex++;
    }
    // Build the fan at the second pole.
    for (let j = 0; j < nbSides; j++) {
      const v0 = numVertices - 1;
      const v1 = nbSides * (nbLoops - 1) + j + 1;
      const v2 = nbSides * (nbLoops - 1) + ((j + 1) % nbSides) + 1;
      this.setFaceVertexIndices(faceIndex, v0, v1, v2);

      const uv0 = new Vec2(1.0 - j / nbSides, nbLoops / (nbLoops + 1));
      const uv1 = new Vec2(1.0 - (j + 1) / nbSides, nbLoops / (nbLoops + 1));
      const uv2 = new Vec2(0.5, 1.0);
      texCoords.setFaceVertexValue(faceIndex, 0, uv0);
      texCoords.setFaceVertexValue(faceIndex, 1, uv1);
      texCoords.setFaceVertexValue(faceIndex, 2, uv2);

      faceIndex++;
    }

    for (let i = 0; i < nbLoops - 1; i++) {
      for (let j = 0; j < nbSides; j++) {
        const v0 = nbSides * i + j + 1;
        const v1 = nbSides * i + ((j + 1) % nbSides) + 1;
        const v2 = nbSides * (i + 1) + ((j + 1) % nbSides) + 1;
        const v3 = nbSides * (i + 1) + j + 1;
        this.setFaceVertexIndices(faceIndex, v0, v1, v2, v3);

        texCoords.setFaceVertexValue(
          faceIndex,
          0,
          new Vec2(i / nbLoops, j / nbLoops)
        );
        texCoords.setFaceVertexValue(
          faceIndex,
          1,
          new Vec2(i / nbLoops, (j + 1) / nbLoops)
        );
        texCoords.setFaceVertexValue(
          faceIndex,
          2,
          new Vec2((i + 1) / nbLoops, (j + 1) / nbLoops)
        );
        texCoords.setFaceVertexValue(
          faceIndex,
          3,
          new Vec2((i + 1) / nbLoops, j / nbLoops)
        );
        faceIndex++;
      }
    }

    this.setBoundingBoxDirty();
    this.geomDataTopologyChanged.emit();
  }

  /**
   * The __resize method.
   * @private
   */
  __resize() {
    const radius = this.__radiusParam.getValue();
    const nbSides = this.__sidesParam.getValue();
    const nbLoops = this.__loopsParam.getValue();

    // ////////////////////////////
    // Set Vertex Positions
    let vertex = 0;
    const normal = new Vec3$1(0.0, 0.0, 1.0);
    this.getVertex(vertex).set(0.0, 0.0, radius);
    vertex++;

    for (let i = 0; i < nbLoops; i++) {
      const theta = ((i + 1) / (nbLoops + 1)) * Math.PI;
      for (let j = 0; j < nbSides; j++) {
        const phi = (j / nbSides) * 2.0 * Math.PI;
        normal.set(
          Math.sin(theta) * Math.cos(phi),
          Math.sin(theta) * Math.sin(phi),
          Math.cos(theta)
        );

        // Set positions and normals at the same time.
        this.getVertex(vertex).setFromOther(normal.scale(radius));
        vertex++;
      }
    }
    this.getVertex(vertex).set(0.0, 0.0, -radius);
    vertex++;

    this.setBoundingBoxDirty();
    this.geomDataChanged.emit();
  }
}
sgFactory.registerClass('Sphere', Sphere$1);

/** A class for generating a torus geometry.
 * @extends Mesh
 */
class Torus extends Mesh {
  /**
   * Create a torus.
   * @param {number} innerRadius - The inner radius of the torus.
   * @param {number} outerRadius - The outer radius of the torus.
   * @param {number} detail - The detail of the cone.
   */
  constructor(innerRadius = 0.5, outerRadius = 1.0, detail = 32) {
    super();

    if (isNaN(innerRadius) || isNaN(outerRadius) || isNaN(detail))
      throw new Error('Invalid geom args')

    this.__innerRadius = innerRadius;
    this.__outerRadius = outerRadius;
    this.__detail = detail >= 3 ? detail : 3;

    this.addVertexAttribute('texCoords', Vec2);
    this.addVertexAttribute('normals', Vec3$1);
    this.__rebuild();
  }

  /**
   * Getter for the inner radius.
   * @return {number} - Returns the radius.
   */
  get innerRadius() {
    return this.__innerRadius
  }

  /**
   * Setter for the inner radius.
   * @param {number} val - The radius value.
   */
  set innerRadius(val) {
    this.__innerRadius = val;
    this.__resize();
  }

  /**
   * Getter for the outer radius.
   * @return {number} - Returns the radius.
   */
  get outerRadius() {
    return this.__outerRadius
  }

  /**
   * Setter for the outer radius.
   * @param {number} val - The radius value.
   */
  set outerRadius(val) {
    this.__outerRadius = val;
    this.__resize();
  }

  /**
   * Getter for the torus detail.
   * @return {number} - Returns the detail.
   */
  get detail() {
    return this.__detail
  }

  /**
   * Setter for the torus detail.
   * @param {number} val - The detail value.
   */
  set detail(val) {
    this.__detail = val >= 3 ? val : 3;
    this.__rebuild();
  }

  /**
   * The __rebuild method.
   * @private
   */
  __rebuild() {
    const nbSlices = this.__detail;
    const nbLoops = this.__detail * 2;
    const numVertices = nbSlices * nbLoops;

    this.setNumVertices(numVertices);
    this.setFaceCounts([0, nbSlices * nbLoops]);

    // ////////////////////////////
    // Set Vertex Positions

    const normals = this.getVertexAttribute('normals');
    let vertex = 0;
    for (let i = 0; i < nbLoops; i++) {
      const theta = (i / nbLoops) * 2.0 * Math.PI;
      const ctheta = Math.cos(theta);
      const stheta = Math.sin(theta);

      for (let j = 0; j < nbSlices; j++) {
        const phi = (j / nbSlices) * 2.0 * Math.PI;

        const sphi = Math.sin(phi);
        const cphi = Math.cos(phi);
        const d = this.__outerRadius + cphi * this.__innerRadius;

        // Set positions and normals at the same time.
        this.getVertex(vertex).set(
          ctheta * d,
          stheta * d,
          this.__innerRadius * sphi
        );
        normals.getValueRef(vertex).set(ctheta * cphi, stheta * cphi, sphi);
        vertex++;
      }
    }

    // ////////////////////////////
    // Build the topology and texCoords
    const texCoords = this.getVertexAttribute('texCoords');
    let faceIndex = 0;
    for (let i = 0; i < nbLoops; i++) {
      for (let j = 0; j < nbSlices; j++) {
        const ip = (i + 1) % nbLoops;
        const jp = (j + 1) % nbSlices;
        const v0 = nbSlices * i + j;
        const v1 = nbSlices * i + jp;
        const v2 = nbSlices * ip + jp;
        const v3 = nbSlices * ip + j;
        this.setFaceVertexIndices(faceIndex, v0, v1, v2, v3);

        texCoords.setFaceVertexValue(
          faceIndex,
          0,
          new Vec2(i / nbLoops, j / nbLoops)
        );
        texCoords.setFaceVertexValue(
          faceIndex,
          1,
          new Vec2(i / nbLoops, (j + 1) / nbLoops)
        );
        texCoords.setFaceVertexValue(
          faceIndex,
          2,
          new Vec2((i + 1) / nbLoops, (j + 1) / nbLoops)
        );
        texCoords.setFaceVertexValue(
          faceIndex,
          3,
          new Vec2((i + 1) / nbLoops, j / nbLoops)
        );
        faceIndex++;
      }
    }

    this.setBoundingBoxDirty();
  }

  /**
   * The __resize method.
   * @private
   */
  __resize() {
    const nbSlices = this.__detail;
    const nbLoops = this.__detail * 2;

    const vertex = 0;
    for (let i = 0; i < nbLoops; i++) {
      const theta = (i / nbLoops) * 2.0 * Math.PI;
      const ctheta = Math.cos(theta);
      const stheta = Math.sin(theta);

      for (let j = 0; j < nbSlices; j++) {
        const phi = (j / nbSlices) * 2.0 * Math.PI;

        const sphi = Math.sin(phi);
        const cphi = Math.cos(phi);
        const d = this.__outerRadius + cphi * this.__innerRadius;

        // Set positions and normals at the same time.
        this.getVertex(vertex).set(
          ctheta * d,
          stheta * d,
          this.__innerRadius * sphi
        );
        index++;
      }
    }

    this.setBoundingBoxDirty();
  }

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - Returns the json object.
   */
  toJSON() {
    const json = super.toJSON();
    json['x'] = this.__x;
    json['y'] = this.__y;
    json['z'] = this.__z;
    return json
  }
}

// Defines used to explicity specify types for WebGL.
const SaveFlags = {
  SAVE_FLAG_SKIP_CHILDREN: 1 << 0,
};

const LoadFlags = {
  // When loading the values of a bin tree, as opposed
  // to loading a full json defined tree.
  LOAD_FLAG_LOADING_BIN_TREE_VALUES: 1 << 4,
};

const CloneFlags = {
  CLONE_FLAG_INSTANCED_TREE: 1 << 0,
};

let selectionOutlineColor = new Color('#03E3AC');
selectionOutlineColor.a = 0.1;
let branchSelectionOutlineColor = selectionOutlineColor.lerp(
  new Color('white'),
  0.5
);
branchSelectionOutlineColor.a = 0.1;

/** Class representing a tree item in the scene tree.
 * @extends BaseItem
 */
class TreeItem extends BaseItem {
  /**
   * Create a tree item.
   * @param {string} name - The name of the tree item.
   */
  constructor(name) {
    super(name);

    this.__visibleCounter = 1; // Visible by Default.
    this.__visible = true;
    this.__highlightMapping = {};
    this.__highlights = [];

    this.__childItems = [];
    this.__childItemsSignalIds = [];
    this.__childItemsMapping = {};

    this.mouseDown = new Signal();
    this.mouseUp = new Signal();
    this.mouseMove = new Signal();
    this.mouseEnter = new Signal();
    this.mouseLeave = new Signal();

    // /////////////////////////////////////
    // Add parameters.

    this.__visibleParam = this.addParameter(
      new BooleanParameter('Visible', true)
    );
    this.__localXfoParam = this.addParameter(
      new XfoParameter('LocalXfo', new Xfo())
    );
    this.__globalXfoParam = this.addParameter(
      new XfoParameter('GlobalXfo', new Xfo())
    );
    this.__boundingBoxParam = this.addParameter(
      new Parameter('BoundingBox', new Box3$1())
    );

    this.parentChanged = this.ownerChanged;
    this.childAdded = new Signal();
    this.childRemoved = new Signal();
    // this.componentAdded = new Signal();
    // this.componentRemoved = new Signal();
    this.highlightChanged = new Signal();
    this.visibilityChanged = new Signal();
    this.localXfoChanged = this.__localXfoParam.valueChanged;
    this.globalXfoChanged = this.__globalXfoParam.valueChanged;
    this.boundingChanged = this.__boundingBoxParam.valueChanged;

    // Bind handlers
    this._cleanGlobalXfo = this._cleanGlobalXfo.bind(this);
    this._setGlobalXfoDirty = this._setGlobalXfoDirty.bind(this);
    this._setBoundingBoxDirty = this._setBoundingBoxDirty.bind(this);
    this._cleanBoundingBox = this._cleanBoundingBox.bind(this);

    this.__localXfoParam.valueChanged.connect(this._setGlobalXfoDirty);
    
    // Note: if the user changes the global xfo, we compute the 
    // local xfo when it is needed (generally when GlobalXfo is pulled)
    // In the future, we will move this into the operators and ops
    // will support 'inversion' where the param asks the op to
    // proccess an input value.
    const cleanLocalXfo = prevValue => {
      const globalXfo = this.__globalXfoParam.getValue();
      if (this.__ownerItem !== undefined)
        return this.__ownerItem
          .getGlobalXfo()
          .inverse()
          .multiply(globalXfo)
      else return globalXfo
    };
    this.__globalXfoParam.valueChanged.connect(mode => {
      // Dirtiness propagates from Local to Global, but not vice versa.
      // We need to move to using operators to invert values.
      // This system of having ops connected in all directions
      // is super difficult to debug.
      if (mode != ValueSetMode.OPERATOR_DIRTIED) {
        this.__localXfoParam.setDirty(cleanLocalXfo);
      }
      this._setBoundingBoxDirty();
    });

    this.__visibleParam.valueChanged.connect(mode => {
      this.__visibleCounter += this.__visibleParam.getValue() ? 1 : -1;
      this.__updateVisiblity();
    });

    // Note: one day we will remove the concept of 'selection' from the engine
    // and keep it only in UX. to Select an item, we will add it to the selectino
    // in the selection manager. Then the selection group will apply a highlight.
    this.selectedChanged.connect(() => {
      if (this.__selected) {
        this.addHighlight('selected', selectionOutlineColor, true);
      } else {
        this.removeHighlight('selected', true);
      }
    });
  }

  /**
   * Getter for SaveFlags.
   * @return {any} - The return value.
   */
  static get SaveFlags() {
    return SaveFlags
  }

  /**
   * Getter for LoadFlags.
   * @return {any} - The return value.
   */
  static get LoadFlags() {
    return LoadFlags
  }

  /**
   * Getter for CloneFlags.
   * @return {any} - The return value.
   */
  static get CloneFlags() {
    return CloneFlags
  }

  /**
   * Returns the selection outline color.
   * @return {Color} - Returns a color.
   */
  static getSelectionOutlineColor() {
    return selectionOutlineColor
  }

  /**
   * Sets the selection outline color.
   * @param {Color} color - The color value.
   */
  static setSelectionOutlineColor(color) {
    selectionOutlineColor = color;
  }

  /**
   * Returns the branch selection outline color.
   * @return {Color} - Returns a color.
   */
  static getBranchSelectionOutlineColor() {
    return branchSelectionOutlineColor
  }

  /**
   * Sets the branch selection outline color.
   * @param {Color} color - The color value.
   */
  static setBranchSelectionOutlineColor(color) {
    branchSelectionOutlineColor = color;
  }

  // ////////////////////////////////////////
  // Flags

  /**
   * The _childFlagsChanged method.
   * @param {number} flags - The flags value.
   * @private
   */
  _childFlagsChanged(flags) {
    if ((flags & ParamFlags.USER_EDITED) != 0)
      this.setFlag(ItemFlags.USER_EDITED);
  }

  /**
   * The setFlag method.
   * @param {number} flag - The flag value.
   */
  setFlag(flag) {
    super.setFlag(flag);
    if (this.__ownerItem) this.__ownerItem._childFlagsChanged(flag);
  }

  // ////////////////////////////////////////
  // Parent Item

  /**
   * Sets the owner of the tree item.
   * @param {any} parentItem - The parent item.
   */
  setOwner(parentItem) {
    if (this.__ownerItem) {
      this.__ownerItem.globalXfoChanged.disconnect(this._setGlobalXfoDirty);

      // The effect of the invisible owner is removed.
      if (!this.__ownerItem.getVisible()) this.__visibleCounter++;
      const index = this.__ownerItem.getChildIndex(this);
      if (index >= 0) this.__ownerItem.__unbindChild(index, this);
    }

    super.setOwner(parentItem);

    this._setGlobalXfoDirty();
    if (this.__ownerItem) {
      this.setSelectable(this.__ownerItem.getSelectable(), true);

      // The effect of the invisible owner is added.
      if (!this.__ownerItem.getVisible()) this.__visibleCounter--;

      this.__ownerItem.globalXfoChanged.connect(this._setGlobalXfoDirty);
    }

    this.__updateVisiblity();
  }

  /**
   * The __updatePath method.
   * @private
   */
  __updatePath() {
    super.__updatePath();
    for (const childItem of this.__childItems) {
      if (childItem) childItem.__updatePath();
    }
  }

  /**
   * Returns the parent of the tree item.
   * @return {any} - Returns the parent item.
   */
  getParentItem() {
    return this.getOwner()
  }

  /**
   * Sets the parent of the tree item.
   * @param {any} parentItem - The parent item.
   */
  setParentItem(parentItem) {
    this.setOwner(parentItem);
  }

  // ////////////////////////////////////////
  // Global Matrix

  /**
   * Returns the local Xfo transform.
   * @return {Xfo} - Returns the local Xfo.
   */
  getLocalXfo() {
    return this.__localXfoParam.getValue()
  }

  /**
   * Sets the local Xfo transform.
   * @param {Xfo} xfo - The local xfo transform.
   * @param {number} mode - The mode value.
   */
  setLocalXfo(xfo, mode) {
    this.__localXfoParam.setValue(xfo, mode);
  }

  /**
   * Returns the global Xfo transform.
   * @param {number} mode - The mode value.
   * @return {Xfo} - Returns the global Xfo.
   */
  getGlobalXfo(mode) {
    return this.__globalXfoParam.getValue(mode)
  }

  /**
   * Sets the global Xfo transform.
   * @param {Xfo} xfo - The global xfo transform.
   * @param {number} mode - The mode value.
   */
  setGlobalXfo(xfo, mode) {
    const owner = this.getOwner();
    if (owner) {
      const parentXfo = owner.getGlobalXfo();
      const localXfo = parentXfo.inverse().multiply(xfo);
      this.__localXfoParam.setValue(localXfo, mode);
    } else {
      this.__globalXfoParam.setValue(xfo, mode);
    }
  }

  /**
   * The _cleanGlobalXfo method.
   * @param {any} prevValue - The prevValue value.
   * @return {any} - The return value.
   * @private
   */
  _cleanGlobalXfo(prevValue) {
    const parentItem = this.getParentItem();
    const localXfo = this.__localXfoParam.getValue();
    if (parentItem !== undefined) {
      const parentGlobal = parentItem.getGlobalXfo();
      return parentGlobal.multiply(localXfo)
    } else return localXfo
  }

  /**
   * The _setGlobalXfoDirty method.
   * @private
   */
  _setGlobalXfoDirty() {
    this.__globalXfoParam.setDirty(this._cleanGlobalXfo);
  }

  // ////////////////////////////////////////
  // Visibility

  /**
   * The getVisible method.
   * @return {any} - The return value.
   */
  getVisible() {
    // Should never be more than 1, but can be less than 0.
    return this.__visibleCounter > 0
  }

  /**
   * The setVisible method.
   * @param {any} val - The val param.
   */
  setVisible(val) {
    this.__visibleParam.setValue(val);
  }

  /**
   * The propagateVisiblity method.
   * @param {any} val - The val param.
   */
  propagateVisiblity(val) {
    this.__visibleCounter += val;
    this.__updateVisiblity();
  }

  /**
   * The __updateVisiblity method.
   * @return {boolean} - Returns a boolean.
   * @private
   */
  __updateVisiblity() {
    const visible = this.__visibleCounter > 0;
    if (visible != this.__visible) {
      this.__visible = visible;
      for (const childItem of this.__childItems) {
        if (childItem instanceof TreeItem)
          childItem.propagateVisiblity(this.__visible ? 1 : -1);
      }
      this.visibilityChanged.emit(visible);
      return true
    }
    return false
  }

  // ////////////////////////////////////////
  // Highlights

  /**
   * Add a hightlight to the tree item.
   * @param {string} name - The name of the tree item.
   * @param {Color} color - The color of the highlight.
   * @param {boolean} propagateToChildren - A boolean indicating whether to propagate to children.
   */
  addHighlight(name, color, propagateToChildren = false) {
    // If the hilight was already in the list,
    // remove it and put it at the top.
    if (name in this.__highlightMapping) {
      const id = this.__highlights.indexOf(name);
      this.__highlights.splice(id, 1);
    }
    this.__highlights.push(name);
    this.__highlightMapping[name] = color;
    this.highlightChanged.emit();

    if (propagateToChildren) {
      this.__childItems.forEach(childItem => {
        if (childItem instanceof TreeItem)
          childItem.addHighlight(name, color, propagateToChildren);
      });
    }
  }

  /**
   * Remove a hightlight to the tree item.
   * @param {string} name - The name of the tree item.
   * @param {boolean} propagateToChildren - A boolean indicating whether to propagate to children.
   */
  removeHighlight(name, propagateToChildren = false) {
    if (name in this.__highlightMapping) {
      const id = this.__highlights.indexOf(name);
      this.__highlights.splice(id, 1);
      delete this.__highlightMapping[name];
      this.highlightChanged.emit();
    }
    if (propagateToChildren) {
      this.__childItems.forEach(childItem => {
        if (childItem instanceof TreeItem)
          childItem.removeHighlight(name, propagateToChildren);
      });
    }
  }

  /**
   * Returns the color of the current hilghlight.
   * @return {Color} - The color value.
   */
  getHighlight() {
    if (this.__highlights.length > 0)
      return this.__highlightMapping[
        this.__highlights[this.__highlights.length - 1]
      ]
  }

  /**
   * Returns true if this items has a hilghlight color assigned.
   * @return {boolean} - True if this item is hilghlighted.
   */
  isHighlighted() {
    return this.__highlights.length > 0
  }

  // ////////////////////////////////////////
  // Bounding Box

  /**
   * Getter for a bounding box.
   */
  get boundingBox() {
    console.warn("getter is deprectated. Please use 'getBoundingBox'");
    return this.getBoundingBox()
  }

  /**
   * The getBoundingBox method.
   * @return {Box3} - The return value.
   */
  getBoundingBox() {
    return this.__boundingBoxParam.getValue()
  }

  /**
   * The _cleanBoundingBox method.
   * @param {Box3} bbox - The bounding box value.
   * @return {Box3} - The return value.
   * @private
   */
  _cleanBoundingBox(bbox) {
    bbox.reset();
    this.__childItems.forEach(childItem => {
      if (childItem instanceof TreeItem)
        if (
          childItem.getVisible() &&
          !childItem.testFlag(ItemFlags.IGNORE_BBOX)
        ) {
          // console.log(" - ", childItem.constructor.name, childItem.getName(), childItem.getGlobalXfo().sc.x, childItem.getBoundingBox().toString())
          bbox.addBox3(childItem.getBoundingBox());
        }
    });
    // console.log(this.getName(), bbox.toString())
    return bbox
  }

  /**
   * The _childBBoxChanged method.
   * @private
   */
  _childBBoxChanged() {
    this._setBoundingBoxDirty();
  }

  /**
   * The _setBoundingBoxDirty method.
   * @private
   */
  _setBoundingBoxDirty() {
    if (this.__boundingBoxParam) {
      // Will cause boundingChanged to emit
      this.__boundingBoxParam.setDirty(this._cleanBoundingBox);
    }
  }

  // ////////////////////////////////////////
  // Children

  /**
   * The getChildren method.
   * @return {TreeItem} - The return value.
   */
  getChildren() {
    return this.__childItems
  }

  /**
   * The numChildren method.
   * @deprecated since version 0.0.80
   * @return {number} - The return value.
   */
  numChildren() {
    console.warn('Deprecated method. Please use getNumChildren');
    return this.__childItems.length
  }

  /**
   * The getNumChildren method.
   * @return {number} - The return value.
   */
  getNumChildren() {
    return this.__childItems.length
  }

  /**
   * Generate a unique name.
   * @param {string} name - The name value.
   * @return {string} - Returns a unique name.
   */
  generateUniqueName(name) {
    if (!(name in this.__childItemsMapping)) return name

    let index = 1;
    if (
      name.length > 4 &&
      !Number.isNaN(parseInt(name.substring(name.length - 4)))
    )
      index = parseInt(name.substr(name.length - 4));
    else if (
      name.length > 3 &&
      !Number.isNaN(parseInt(name.substring(name.length - 3)))
    )
      index = parseInt(name.substr(name.length - 3));
    else if (
      name.length > 2 &&
      !Number.isNaN(parseInt(name.substring(name.length - 2)))
    )
      index = parseInt(name.substr(name.length - 2));

    const names = [];
    for (const c of this.__childItems) {
      // Sometimes we have an empty child slot.
      // We resize the child vector, and then populate it.
      if (c) {
        names.push(c.getName());
      }
    }

    let uniqueName = name;
    while (true) {
      let suffix = '' + index;
      while (suffix.length < 2) {
        suffix = '0' + suffix;
      }

      uniqueName = name + suffix;
      if (names.indexOf(uniqueName) == -1) break
      index++;
    }
    return uniqueName
  }

  /**
   * The __updateMapping method.
   * @param {any} start - The start value.
   * @private
   */
  __updateMapping(start) {
    // If a child has been added or removed from the
    // tree item, we need to update the acceleration structure.
    for (let i = start; i < this.__childItems.length; i++) {
      this.__childItemsMapping[this.__childItems[i].getName()] = i;
    }
  }

  /**
   * Insert a child TreeItem.
   * @param {object} childItem - The child TreeItem to insert.
   * @param {number} index - The index to add the child item.
   * @param {boolean} maintainXfo - Boolean that determines if the Xfo value is maintained.
   * @param {boolean} fixCollisions - Modify the name of the item to avoid name collisions.
   * If false, an exception wll be thrown instead if a name collision occurs.
   * @return {number} - The index of the child item in this items children array.
   */
  insertChild(childItem, index, maintainXfo = false, fixCollisions = true) {
    if (childItem.getName() in this.__childItemsMapping) {
      if (fixCollisions) {
        childItem.setName(this.generateUniqueName(childItem.getName()));
      } else {
        throw new Error(
          "Item '" +
            childItem.getName() +
            "' is already a child of :" +
            this.getPath()
        )
      }
    }
    if (!(childItem instanceof BaseItem)) {
      throw new Error(
        'Object is is not a tree item :' + childItem.constructor.name
      )
    }

    const signalIds = {};
    signalIds.nameChangedId = childItem.nameChanged.connect((name, oldName) => {
      // Update the acceleration structure.
      const index = this.__childItemsMapping[oldName];
      delete this.__childItemsMapping[oldName];
      this.__childItemsMapping[name] = index;
    });

    let newLocalXfo;
    if (childItem instanceof TreeItem) {
      if (maintainXfo) {
        newLocalXfo = this.getGlobalXfo()
          .inverse()
          .multiply(childItem.getGlobalXfo());
      }
      signalIds.bboxChangedId = childItem.boundingChanged.connect(() => {
        this._setBoundingBoxDirty();
      });
      signalIds.visChangedId = childItem.visibilityChanged.connect(
        this._setBoundingBoxDirty
      );
    }

    this.__childItems.splice(index, 0, childItem);
    this.__childItemsSignalIds.splice(index, 0, signalIds);
    this.__childItemsMapping[childItem.getName()] = index;
    this.__updateMapping(index);

    childItem.setOwner(this);

    if (childItem instanceof TreeItem) {
      if (maintainXfo) childItem.setLocalXfo(newLocalXfo);
      this._setBoundingBoxDirty();
    }

    if (childItem.testFlag(ItemFlags.USER_EDITED))
      this.setFlag(ItemFlags.USER_EDITED);

    this.childAdded.emit(childItem, index);

    return childItem
  }

  /**
   * Add a child TreeItem..
   * @param {TreeItem} childItem - The child TreeItem to add.
   * @param {boolean} maintainXfo - Boolean that determines if
   * the Global Xfo value is maintained. If true, when moving
   * items in the hierarchy from one parent to another, the local Xfo
   * of the item will be modified to maintaine and the Global Xfo.
   * Note: this option defaults to false because we expect that is the
   * behavior users would expect when manipulating the tree in code.
   * To be safe and unambiguous, always try to specify this value.
   * @param {boolean} fixCollisions - Modify the name of the item to avoid
   * name collisions with other chidrent of the same parent.
   * If false, an exception wll be thrown instead if a name collision occurs.
   * @return {number} - The index of the child item in this items children array.
   */
  addChild(childItem, maintainXfo = true, fixCollisions = true) {
    const index = this.__childItems.length;
    this.insertChild(childItem, index, maintainXfo, fixCollisions);
    return index
  }

  /**
   * The getChild method.
   * @param {number} index - The index to remove the child TreeItem.
   * @return {TreeItem} - Return the child TreeItem.
   */
  getChild(index) {
    return this.__childItems[index]
  }

  /**
   * The getChildByName method.
   * @param {string} name - The name value.
   * @return {TreeItem} - Return the child TreeItem.
   */
  getChildByName(name) {
    const index = this.__childItemsMapping[name];
    if (index != undefined) {
      return this.__childItems[index]
    }
    return null
  }

  /**
   * The getChildNames method.
   * @return {array} - An array of names for each child.
   */
  getChildNames() {
    const names = [];
    for (let i = 0; i < this.__childItems.length; i++) {
      const childItem = this.__childItems[i];
      if (childItem != null) names[i] = childItem.getName();
    }
    return names
  }

  /**
   * UnBind an item from the group. This method is called
   * automatically when an item is removed from the group.
   * @param {number} index - The index value.
   * @param {TreeItem} childItem - item to unbind.
   * @private
   */
  __unbindChild(index, childItem) {
    const signalIds = this.__childItemsSignalIds[index];
    childItem.nameChanged.disconnectId(signalIds.nameChangedId);

    if (childItem instanceof TreeItem) {
      childItem.boundingChanged.disconnectId(signalIds.bboxChangedId);
      childItem.visibilityChanged.disconnectId(signalIds.visChangedId);
    }

    this.__childItems.splice(index, 1);
    this.__childItemsSignalIds.splice(index, 1);
    delete this.__childItemsMapping[childItem.getName()];
    this.__updateMapping(index);

    if (childItem instanceof TreeItem) {
      this._setBoundingBoxDirty();
    }

    this.childRemoved.emit(childItem, index);
  }

  /**
   * Remove a child tree item.
   * @param {number} index - The index value.
   */
  removeChild(index) {
    const childItem = this.__childItems[index];
    if (childItem) {
      this.__unbindChild(index, childItem);
      childItem.setOwner(undefined);
    }
  }

  /**
   * The removeChildByName method.
   * @param {string} name - The name param.
   * @return {TreeItem} - Return the child TreeItem.
   */
  removeChildByName(name) {
    const index = this.__childItemsMapping[name];
    if (index != undefined) {
      return this.removeChild(index)
    }
    return null
  }

  /**
   * Remove a child tree item by handle.
   * @param {objTreeItemect} childItem - The child TreeItem to remove.
   */
  removeChildByHandle(childItem) {
    console.warn('Deprecated method. Please use removeChild');
    const index = this.__childItems.indexOf(childItem);
    if (index == -1)
      throw new Error(
        'Error in removeChildByHandle. Child not found:' + childItem.getName()
      )
    this.removeChild(index);
  }

  /**
   * Remove all child TreeItems.
   */
  removeAllChildren() {
    let index = this.__childItems.length;
    while (index--) {
      this.removeChild(index);
    }
    this._setBoundingBoxDirty();
  }

  /**
   * The getChildIndex method.
   * @param {TreeItem} childItem - The child TreeItem value.
   * @return {object} - The return value.
   */
  getChildIndex(childItem) {
    return this.__childItems.indexOf(childItem)
  }

  /**
   * The indexOfChild method.
   * @param {object} childItem - The child TreeItem value.
   * @return {any} - The return value.
   */
  indexOfChild(childItem) {
    console.warn('Deprecated method. Please use getChildIndex');
    return this.getChildIndex(childItem)
  }

  // ////////////////////////////////////////
  // Path Traversial
  // Note: Path resolution starts at the root of the
  // tree the path was generated from (so index=1, because we don't resolve root).
  // Note: When a path is made relative to an item in its tree, the path
  // starts with the child elements.

  /**
   * The resolvePath method.
   * @param {any} path - The path value.
   * @param {number} index - The index value.
   * @return {any} - The return value.
   */
  resolvePath(path, index = 0) {
    if (typeof path == 'string') path = path.split('/');

    if (index == 0) {
      if (path[0] == '.' || path[0] == this.__name) index++;
      else if (path[0] == '..') {
        return this.__ownerItem.resolvePath(path, index + 1)
      }
    }

    if (index == path.length) {
      return this
    }

    // if (path[index] == '>' && index == path.length - 2) {
    //   if (this.hasComponent(path[index + 1])) {
    //     const component = this.getComponent(path[index + 1])
    //     return component.resolvePath(path, index + 2)
    //   }
    // }

    const childName = path[index];
    const childItem = this.getChildByName(childName);
    if (childItem == undefined) {
      // Maybe the name is a component name.
      // if (this.hasComponent(path[index])) {
      //   const component = this.getComponent(path[index])
      //   if (index == path.length) {
      //     return component
      //   } else {
      //     return component.resolvePath(path, index + 1)
      //   }
      // }

      // Maybe the name is a parameter name.
      const param = this.getParameter(path[index]);
      if (param) {
        return param
      }

      // Note: consuming code should generate errors if necssary.
      // In some cases, this _should_ return null and errors messages ares imply distracting.
      // report("Unable to resolve path '"+"/".join(path)+"' after:"+this.getName());
      // console.warn("Unable to resolve path :" + (path) + " after:" + this.getName() + "\nNo child, component or property called :" + path[index]);
      return null
    }
    return childItem.resolvePath(path, index + 1)
  }

  /**
   * Traverse the tree structure from this point down
   * and fire the callback for each visited item.
   * Note: Depth only used by selection sets for now.
   * @param {any} callback - The callback value.
   * @param {boolean} includeThis - Fire the callback for this item.
   */
  traverse(callback, includeThis = true) {
    const __c = (treeItem, depth) => {
      const children = treeItem.getChildren();
      for (const childItem of children) {
        if (childItem) __t(childItem, depth + 1);
      }
    };
    const __t = (treeItem, depth) => {
      if (callback(treeItem, depth) == false) return false
      __c(treeItem, depth);
    };
    if (includeThis) __t(this, 1);
    else __c(this, 0);
  }

  // ///////////////////////
  // Events

  /**
   * Causes an event to occur when a user presses a mouse button over an element.
   * @param {MouseEvent} event - The mouse event that occurs.
   */
  onMouseDown(event) {
    this.mouseDown.emit(event);
    if (event.propagating && this.__ownerItem) {
      this.__ownerItem.onMouseDown(event);
    }
  }

  /**
   * Causes an event to occur when a user releases a mouse button over a element.
   * @param {MouseEvent} event - The mouse event that occurs.
   */
  onMouseUp(event) {
    this.mouseUp.emit(event);
    if (event.propagating && this.__ownerItem) {
      this.__ownerItem.onMouseUp(event);
    }
  }

  /**
   * Causes an event to occur when the mouse pointer is moving while over an element.
   * @param {MouseEvent} event - The mouse event that occurs.
   */
  onMouseMove(event) {
    this.mouseMove.emit(event);
    if (event.propagating && this.__ownerItem) {
      this.__ownerItem.onMouseMove(event);
    }
  }

  /**
   * Causes an event to occur when the mouse pointer is moved onto an element.
   * @param {MouseEvent} event - The mouse event that occurs.
   */
  onMouseEnter(event) {
    this.mouseEnter.emit(event);
    if (event.propagating && this.__ownerItem) {
      this.__ownerItem.onMouseEnter(event);
    }
  }

  /**
   * Causes an event to occur when the mouse pointer is moved out of an element.
   * @param {MouseEvent} event - The mouse event that occurs.
   */
  onMouseLeave(event) {
    this.mouseLeave.emit(event);
    if (event.propagating && this.__ownerItem) {
      this.__ownerItem.onMouseLeave(event);
    }
  }

  /**
   * Causes an event to occur when the mouse wheel is rolled up or down over an element.
   * @param {WheelEvent } event - The wheel event that occurs.
   */
  onWheel(event) {
    if (event.propagating && this.__ownerItem) {
      this.__ownerItem.onWheel(event);
    }
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    if (!this.testFlag(ItemFlags.USER_EDITED)) return

    const j = super.toJSON(context, flags);

    // Some Items, such as the SliderSceneWidget do not need thier children
    // to be saved.
    if (!(flags & SaveFlags.SAVE_FLAG_SKIP_CHILDREN)) {
      const childItemsJSON = {};
      for (const childItem of this.__childItems) {
        if (childItem) {
          const childJSON = childItem.toJSON(context, flags);
          if (childJSON) childItemsJSON[childItem.getName()] = childJSON;
        }
      }
      if (Object.keys(childItemsJSON).length > 0) {
        if (j) {
          j.children = childItemsJSON;
        } else {
          j = {
            name: this.__name,
            children: childItemsJSON,
          };
        }
      }
    }
    return j
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    super.fromJSON(j, context, flags);

    context.numTreeItems++;

    // Note: JSON data is only used to store user edits, so
    // parameters loaded from JSON are considered user edited.
    this.setFlag(ItemFlags.USER_EDITED);

    // if ('bbox' in j){
    //     let box = new Box3();
    //     box.fromJSON(j.bbox);
    //     this.__boundingBoxParam.setValue(box);
    // }

    if (j.children != null) {
      const childrenJson = j.children;
      if (Array.isArray(childrenJson)) {
        for (const childJson of childrenJson) {
          // Note: During loading of asset trees, we have an
          // existing tree generated by loading a bin data file.
          let childItem = this.getChildByName(childJson.name);
          if (childItem) {
            childItem.fromJSON(childJson, context, flags);
          } else {
            if (childJson.type) {
              childItem = sgFactory.constructClass(childJson.type);
              if (childItem) {
                // Note: we should load the json first, as it
                // may contain the unique name of the item.
                childItem.fromJSON(childJson, context, flags);
                this.addChild(childItem, false, false);
              }
            }
          }
        }
      } else {
        // eslint-disable-next-line guard-for-in
        for (const childName in childrenJson) {
          const childJson = childrenJson[childName];
          // Note: During loading of asset trees, we have an
          // existing tree generated by loading a bin data file.
          let childItem = this.getChildByName(childName);
          if (childItem) {
            childItem.fromJSON(childJson, context, flags);
          } else if (childJson.type) {
            childItem = sgFactory.constructClass(childJson.type);
            if (childItem) {
              // Note: we add the child now before loading.
              // This is because certain items. (e.g. Groups)
              // Calculate thier global Xfo, and use it to modify
              // the transform of thier members.
              // Note: Groups bind to items in the scene which are
              // already added as children, and so have global Xfos.
              // We prefer to add a child afer its loaded, because sometimes
              // In the tree is asset items, who will only toggled as
              // unloaded once they are loaded(else they are considered inline assets.)
              childItem.fromJSON(childJson, context, flags);
              this.addChild(childItem, false, false);
            }
          }
        }
      }
    }

    // if (j.components) {
    //   for (const cj of j.components) {
    //     const component = sgFactory.constructClass(cj.type ? cj.type : cj.name)
    //     if (component) {
    //       component.fromJSON(cj, context)
    //       this.addComponent(component)
    //     }
    //   }
    // }
  }

  /**
   * The readBinary method.
   * @param {object} reader - The reader value.
   * @param {object} context - The context value.
   */
  readBinary(reader, context) {
    super.readBinary(reader, context);

    context.numTreeItems++;

    const itemflags = reader.loadUInt8();

    // const visibilityFlag = 1 << 1
    // this.setVisible(itemflags&visibilityFlag);

    // this.setVisible(j.visibility);
    // Note: to save space, some values are skipped if they are identity values
    const localXfoFlag = 1 << 2;
    if (itemflags & localXfoFlag) {
      const xfo = new Xfo();
      xfo.tr = reader.loadFloat32Vec3();
      xfo.ori = reader.loadFloat32Quat();
      xfo.sc.set(reader.loadFloat32());
      // console.log(this.getPath() + " TreeItem:" + xfo.toString());
      this.__localXfoParam.setValue(xfo, ValueSetMode.DATA_LOAD);
    }

    const bboxFlag = 1 << 3;
    if (itemflags & bboxFlag)
      this.__boundingBoxParam.setValue(
        new Box3$1(reader.loadFloat32Vec3(), reader.loadFloat32Vec3()),
        ValueSetMode.DATA_LOAD
      );

    const numChildren = reader.loadUInt32();
    if (numChildren > 0) {
      const toc = reader.loadUInt32Array(numChildren);
      for (let i = 0; i < numChildren; i++) {
        reader.seek(toc[i]); // Reset the pointer to the start of the item data.
        let childType = reader.loadStr();

        if (childType.startsWith('N') && childType.endsWith('E')) {
          // ///////////////////////////////////////
          // hack to work around a linux issue
          // untill we have a fix.
          const ppos = childType.indexOf('podium');
          if (ppos != -1) {
            if (parseInt(childType[ppos + 7]))
              childType = childType.substring(ppos + 8, childType.length - 1);
            else childType = childType.substring(ppos + 7, childType.length - 1);
          }
          const lnpos = childType.indexOf('livenurbs');
          if (lnpos != -1) {
            childType = childType.substring(
              childType.indexOf('CAD'),
              childType.length - 1
            );
          }
        }
        // const childName = reader.loadStr();
        const childItem = sgFactory.constructClass(childType);
        if (!childItem) {
          const childName = reader.loadStr();
          console.warn(
            'Unable to construct child:' + childName + ' of type:' + childType
          );
          continue
        }
        reader.seek(toc[i]); // Reset the pointer to the start of the item data.
        childItem.readBinary(reader, context);

        // Flagging this node as a bin tree node. (A node generated from loading a binary file)
        childItem.setFlag(ItemFlags.BIN_NODE);
        
        this.addChild(childItem, false, false);
      }
    }
  }

  // ////////////////////////////////////////
  // Clone and Destroy

  /**
   * The clone method constructs a new tree item, copies its values
   * from this item and returns it.
   * @param {number} flags - The flags value.
   * @return {TreeItem} - Returns a new cloned tree item.
   */
  clone(flags) {
    const cloned = new TreeItem();
    cloned.copyFrom(this, flags);
    return cloned
  }

  /**
   * The copyFrom method.
   * @param {TreeItem} src - The tree item to copy from.
   * @param {number} flags - The flags value.
   */
  copyFrom(src, flags) {
    super.copyFrom(src, flags);

    // Share a local Xfo
    // Note: disabled for now.
    // When cloning instanced trees, the root item should
    // have a unique LocalXfoParam, as it must be re-set.
    // (The root of the tree is a cloned and attached to an Instance node that provides the transform)

    // if(flags& CloneFlags.CLONE_FLAG_INSTANCED_TREE)
    //     this.__localXfoParam = this.replaceParameter(src.getParameter('LocalXfo'));

    src.getChildren().forEach(srcChildItem => {
      if (srcChildItem) this.addChild(srcChildItem.clone(flags), false, false);
      // if(flags& CloneFlags.CLONE_FLAG_INSTANCED_TREE) {
      //     src.childAdded.connect((childItem, index)=>{
      //         this.addChild(childItem.clone(flags), false);
      //     })
      // }
    });
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    this.removeAllChildren();
    super.destroy();
  }
}

sgFactory.registerClass('TreeItem', TreeItem);

/** Class representing an instance item in a scene tree.
 * @extends TreeItem
 */
class InstanceItem extends TreeItem {
  /**
   * Create an instance item.
   * @param {string} name - The name of the instance item.
   */
  constructor(name) {
    super(name);
  }

  /**
   * The setSrcTree method.
   * @param {any} treeItem - The treeItem value.
   */
  setSrcTree(treeItem, context) {
    this.__srcTree = treeItem;

    const numChildren = this.__srcTree.getNumChildren();
    if (numChildren == 0) {
      const clonedTree = this.__srcTree.clone(context);
      clonedTree.setLocalXfo(new Xfo(), ValueSetMode.DATA_LOAD);
      this.addChild(clonedTree, false);
    } else {
      const children = this.__srcTree.getChildren();
      children.forEach(child => {
        const clonedChild = child.clone(context);
        this.addChild(clonedChild, false);
      });
    }

    // this.__srcTree.childAdded.connect((child)=>{
    //     this.addChild(child.clone(CloneFlags.CLONE_FLAG_INSTANCED_TREE), false)
    // })
  }

  /**
   * The getSrcTree method.
   * @return {any} - The return value.
   */
  getSrcTree() {
    return this.__srcTree
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The readBinary method.
   * @param {object} reader - The reader value.
   * @param {object} context - The context value.
   */
  readBinary(reader, context = {}) {
    super.readBinary(reader, context);

    // console.log("numTreeItems:", context.numTreeItems, " numGeomItems:", context.numGeomItems)
    const path = reader.loadStrArray();
    // console.log("InstanceItem of:", path)
    context.resolvePath(path, treeItem => {
      this.setSrcTree(treeItem, context);
    });
  }

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context = {}, flags = 0) {
    const j = super.toJSON(context, flags);
    return j
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @param {any} onDone - The onDone value.
   */
  fromJSON(j, context = {}, flags = 0, onDone) {}
}

sgFactory.registerClass('InstanceItem', InstanceItem);

/** Class representing an audio item in a scene tree.
 * @extends TreeItem
 */
class AudioItem extends TreeItem {
  /**
   * Create an audio item.
   * @param {string} name - The name of the audio item.
   */
  constructor(name) {
    super(name);

    this.__loaded = false;

    this.audioSourceCreated = new Signal();

    const fileParam = this.addParameter(new FilePathParameter('FilePath'));
    let audioSource;
    let audioBuffer;
    const startAudioPlayback = () => {
      audioSource = window.ZeaAudioaudioCtx.createBufferSource();
      audioSource.buffer = audioBuffer;
      audioSource.loop = loopParam.getValue();
      audioSource.muted = muteParam.getValue();
      audioSource.start(0);
      this.audioSourceCreated.emit(audioSource);
    };
    fileParam.valueChanged.connect(() => {
      const request = new XMLHttpRequest();
      request.open('GET', fileParam.getURL(), true);
      request.responseType = 'arraybuffer';

      request.onload = () => {
        const audioData = request.response;
        // Note: this code is not pretty and should not access the global object
        // However, its difficult to handle this case.
        // TODO: clean this up.
        window.ZeaAudioaudioCtx.decodeAudioData(
          audioData,
          buffer => {
            audioBuffer = buffer;
            this.__loaded = true;
            this.loaded.emit(true);
            if (autoplayParam.getValue()) startAudioPlayback();
          },
          e => {
            console.log('Error with decoding audio data' + e.err);
          }
        );
      };

      request.send();
    });
    const autoplayParam = this.addParameter(
      new BooleanParameter('Autoplay', false)
    );
    const playStateParam = this.addParameter(
      new NumberParameter('PlayState', 0)
    );
    playStateParam.valueChanged.connect(mode => {
      if (mode != ValueSetMode.CUSTOM) {
        switch (playStateParam.getValue()) {
          case 0:
            if (this.__loaded) {
              if (audioSource) {
                audioSource.stop(0);
                audioSource = undefined;
              }
            }
            break
          case 1:
            if (this.__loaded) {
              startAudioPlayback();
            }
            break
        }
      }
    });

    this.isPlaying = () => {
      return playStateParam.getValue() != 0
    };

    this.play = () => {
      playStateParam.setValue(1, ValueSetMode.CUSTOM);
    };
    this.stop = () => {
      playStateParam.setValue(0, ValueSetMode.CUSTOM);
    };
    this.pause = () => {
      playStateParam.setValue(0, ValueSetMode.CUSTOM);
    };

    this.getAudioSource = () => {
      return audioSource
    };
    const muteParam = this.addParameter(new BooleanParameter('Mute', false));

    this.addParameter(new NumberParameter('Gain', 1.0)).setRange([0, 5]);
    const loopParam = this.addParameter(new BooleanParameter('Loop', false));
    this.addParameter(new BooleanParameter('SpatializeAudio', true));
    this.addParameter(new NumberParameter('refDistance', 2));
    this.addParameter(new NumberParameter('maxDistance', 10000));
    // Defaults taken from here.: https://github.com/mdn/webaudio-examples/blob/master/panner-node/main.js
    this.addParameter(new NumberParameter('rolloffFactor', 1));
    this.addParameter(new NumberParameter('coneInnerAngle', 360));
    this.addParameter(new NumberParameter('coneOuterAngle', 0));
    this.addParameter(new NumberParameter('coneOuterGain', 1));

    muteParam.valueChanged.connect(() => {
      if (audioSource) audioSource.muted = muteParam.getValue();
    });
    loopParam.valueChanged.connect(() => {
      if (audioSource) audioSource.loop = loopParam.getValue();
    });

    this.mute = value => {
      muteParam.setValue(value, ValueSetMode.CUSTOM);
    };

    // Note: Many parts of the code assume a 'loaded' signal.
    // We should probably deprecate and use only 'updated'.
    this.loaded = new Signal(true);
    this.loaded.setToggled(false);
  }

  /**
   * The isLoaded method.
   * @return {any} - The return value.
   */
  isLoaded() {
    return this.__loaded
  }

  /**
   * The setAudioStream method.
   * @param {any} audio - The audio value.
   */
  setAudioStream() {
    this.__loaded = true;
    this.loaded.emit();
    this.audioSourceCreated.emit(audioSource);
  }
}

/** Class representing a audio file item in a scene tree.
 * @extends AudioItem
 */
class FileAudioItem extends AudioItem {
  /**
   * Create a audio file item.
   * @param {string} name - The name of the audio file.
   */
  constructor(name) {}
}

/** Class representing a base geometry item in a scene tree.
 * @extends TreeItem
 */
class BaseGeomItem extends TreeItem {
  /**
   * Create a base geometry item.
   * @param {string} name - The name of the base geom item.
   */
  constructor(name) {
    super(name);
    this.overlay = false;
    this.__cutAway = false;
    this.__cutAwayVector = false;
    this.__cutAwayDist = false;
    this.cutAwayChanged = new Signal();

    this.__layers = [];
  }

  /**
   * The setOverlay method.
   * @param {any} val - The val param.
   */
  setOverlay(val) {
    // TODO: need to find the layer and add this item to it.
    this.overlay = val;
  }

  /**
   * The getLayers method.
   * @return {boolean} - The return value.
   */
  isOverlay() {
    return this.overlay
  }

  /**
   * Adds a layer.
   * @param {string} name - The name of the layer.
   */
  addLayer(name) {
    // TODO: need to find the layer and add this item to it.
    this.__layers.push(name);
  }

  /**
   * The getLayers method.
   * @return {any} - The return value.
   */
  getLayers() {
    return this.__layers
  }

  // ////////////////////////////////////////
  // Cutaways

  /**
   * Checks if cutways are enabled.
   * @return {boolean} - Returns true if enabled.
   */
  isCutawayEnabled() {
    return this.__cutAway
  }

  /**
   * Setter for enabling cutways.
   * @param {any} state - The state of the cutway.
   */
  setCutawayEnabled(state) {
    this.__cutAway = state;
    this.cutAwayChanged.emit();
  }

  /**
   * Getter for cutway vectors.
   * @return {any} - The return value.
   */
  getCutVector() {
    return this.__cutAwayVector
  }

  /**
   * Setter for cutway vectors.
   * @param {any} cutAwayVector - The cutAwayVector value.
   */
  setCutVector(cutAwayVector) {
    this.__cutAwayVector = cutAwayVector;
    this.cutAwayChanged.emit();
  }

  /**
   * Getter for the cutaway distance.
   * @return {any} - The return value.
   */
  getCutDist() {
    return this.__cutAwayDist
  }

  /**
   * Setter for the cutaway distance.
   * @param {any} cutAwayDist - The cutAwayDist value.
   */
  setCutDist(cutAwayDist) {
    this.__cutAwayDist = cutAwayDist;
    this.cutAwayChanged.emit();
  }

  // ///////////////////////////
  // Persistence

  /**
   * The readBinary method.
   * @param {object} reader - The reader value.
   * @param {object} context - The context value.
   */
  readBinary(reader, context) {
    super.readBinary(reader, context);

    if (context.versions['zea-engine'].greaterOrEqualThan([0, 0, 4])) {
      const materialName = reader.loadStr();
      // const materialName = 'Material' + this.__bodyDescId;

      const materialLibrary = context.assetItem.getMaterialLibrary();
      let material = materialLibrary.getMaterial(materialName, false);
      if (!material) {
        // console.warn("BaseGeomItem :'" + this.name + "' Material not found:" + materialName);
        // material = materialLibrary.getMaterial('DefaultMaterial');

        material = new Material(materialName, 'SimpleSurfaceShader');
        material
          .getParameter('BaseColor')
          .setValue(Color.random(0.25), ValueSetMode.DATA_LOAD);
        context.assetItem.getMaterialLibrary().addMaterial(material);
      }
      this.setMaterial(material, ValueSetMode.DATA_LOAD);

      this.__layers = reader.loadStrArray();
      if (this.__layers.length > 0) {
        // console.log("Layers:", this.__layers)
        for (const layer of this.__layers) context.addGeomToLayer(this, layer);
      }
    }
  }
}

/** Class representing a geometry item in a scene tree.
 * @extends BaseGeomItem
 */
class GeomItem extends BaseGeomItem {
  /**
   * Create a geometry item.
   * @param {string} name - The name of the geom item.
   * @param {any} geom - The geom value.
   * @param {any} material - The material value.
   */
  constructor(name, geom = undefined, material = undefined) {
    super(name);

    this.__geomParam = this.insertParameter(
      new GeometryParameter('Geometry'),
      0
    );
    this.__geomParam.valueChanged.connect(this._setBoundingBoxDirty.bind(this));
    this.__geomParam.boundingBoxDirtied.connect(
      this._setBoundingBoxDirty.bind(this)
    );
    this.__materialParam = this.insertParameter(
      new MaterialParameter('Material'),
      1
    );
    this.__paramMapping['material'] = this.getParameterIndex(this.__materialParam);

    this.__lightmapCoordOffset = new Vec2();
    this.__geomOffsetXfoParam = this.addParameter(
      new XfoParameter('GeomOffsetXfo')
    );
    this.__geomMatParam = this.addParameter(new Mat4Parameter('GeomMat'));

    this.__cleanGeomMat = this.__cleanGeomMat.bind(this);
    this.__globalXfoParam.valueChanged.connect(mode => {
      this.__geomMatParam.setDirty(this.__cleanGeomMat);
    });
    this.__geomOffsetXfoParam.valueChanged.connect(mode => {
      this.__geomMatParam.setDirty(this.__cleanGeomMat);
    });

    this.geomXfoChanged = this.__geomMatParam.valueChanged;
    this.materialAssigned = this.__materialParam.valueChanged;
    this.geomAssigned = this.__geomParam.valueChanged;

    if (geom) this.setGeometry(geom, ValueSetMode.DATA_LOAD);
    if (material) this.setMaterial(material, ValueSetMode.DATA_LOAD);
  }

  /**
   * The __cleanGeomMat method.
   * @return {any} - The return value.
   * @private
   */
  __cleanGeomMat() {
    const globalMat4 = this.__globalXfoParam.getValue().toMat4();
    const geomOffsetMat4 = this.__geomOffsetXfoParam.getValue().toMat4();
    return globalMat4.multiply(geomOffsetMat4)
  }

  // ////////////////////////////////////////
  // Geometry

  /**
   * Getter for geometry.
   * @return {any} - The return value.
   */
  getGeometry() {
    return this.__geomParam.getValue()
  }

  /**
   * Setter for geometry.
   * @param {any} geom - The geom value.
   * @param {number} mode - The mode value.
   */
  setGeometry(geom, mode) {
    this.__geomParam.setValue(geom, mode);
  }

  /**
   * Getter for geometry (getGeom is deprectated. Please use getGeometry).
   * @return {any} - The return value.
   */
  getGeom() {
    console.warn("getGeom is deprectated. Please use 'getGeometry'");
    return this.getGeometry()
  }

  /**
   * Setter for geometry. (setGeom is deprectated. Please use setGeometry).
   * @param {any} geom - The geom value.
   * @return {any} - The return value.
   */
  setGeom(geom) {
    console.warn("setGeom is deprectated. Please use 'setGeometry'");
    return this.setGeometry(geom)
  }

  /**
   * Getter for material.
   * @return {Material} - The return value.
   */
  getMaterial() {
    return this.__materialParam.getValue()
  }

  /**
   * Setter for material.
   * @param {Material} material - The material value.
   * @param {number} mode - The mode value.
   */
  setMaterial(material, mode) {
    this.__materialParam.setValue(material, mode);
  }

  /**
   * The _cleanBoundingBox method.
   * @param {Box3} bbox - The bounding box value.
   * @return {any} - The return value.
   * @private
   */
  _cleanBoundingBox(bbox) {
    bbox = super._cleanBoundingBox(bbox);
    const geom = this.getGeometry();
    if (geom) {
      bbox.addBox3(geom.boundingBox, this.getGeomMat4());
    }
    return bbox
  }

  // ////////////////////////////////////////
  // Xfos

  /**
   * Getter for the geom offset Xfo translation.
   * @return {Xfo} - Returns the geom offset Xfo.
   */
  getGeomOffsetXfo() {
    return this.__geomOffsetXfoParam.getValue()
  }

  /**
   * Setter for the geom offset Xfo translation.
   * @param {Xfo} xfo - The Xfo value.
   */
  setGeomOffsetXfo(xfo) {
    this.__geomOffsetXfoParam.setValue(xfo);
  }

  /**
   * Getter for the geom Xfo translation.
   * @return {Xfo} - Returns the geom Xfo.
   */
  getGeomMat4() {
    return this.__geomMatParam.getValue()
  }

  // ///////////////////////////
  // Lightmaps

  /**
   * Getter for a lightmap name.
   * @return {string} - Returns the lightmap name.
   */
  getLightmapName() {
    return this.__lightmapName
  }

  /**
   * Getter for a lightmap coordinate offset.
   * @return {any} - Returns the lightmap coord offset.
   */
  getLightmapCoordsOffset() {
    return this.__lightmapCoordOffset
  }

  /**
   * The root asset item pushes its offset to the geom items in the
   * tree. This offsets the light coords for each geom.
   * @param {string} lightmapName - The lightmap name.
   * @param {any} offset - The offset value.
   */
  applyAssetLightmapSettings(lightmapName, offset) {
    this.__lightmap = lightmapName;
    this.__lightmapCoordOffset.addInPlace(offset);
  }

  // ///////////////////////////
  // Debugging

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    const json = super.toJSON(context, flags);
    return json
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} json - The json object this item must decode.
   * @param {object} context - The context value.
   */
  fromJSON(json, context) {
    super.fromJSON(json, context);
    context.numGeomItems++;
  }

  /**
   * The readBinary method.
   * @param {object} reader - The reader value.
   * @param {object} context - The context value.
   */
  readBinary(reader, context) {
    super.readBinary(reader, context);

    context.numGeomItems++;

    this.__lightmapName = context.assetItem.getName();

    const itemflags = reader.loadUInt8();
    const geomIndex = reader.loadUInt32();
    const geomLibrary = context.assetItem.getGeometryLibrary();
    const geom = geomLibrary.getGeom(geomIndex);
    if (geom) {
      this.setGeometry(geom, ValueSetMode.DATA_LOAD);
    } else {
      this.geomIndex = geomIndex;
      const onGeomLoaded = range => {
        if (geomIndex >= range[0] && geomIndex < range[1]) {
          const geom = geomLibrary.getGeom(geomIndex);
          if (geom) this.setGeometry(geom, ValueSetMode.DATA_LOAD);
          else console.warn('Geom not loaded:', this.getName());
          geomLibrary.rangeLoaded.disconnectId(connid);
        }
      };
      const connid = geomLibrary.rangeLoaded.connect(onGeomLoaded);
    }

    // this.setVisibility(j.visibility);
    // Note: to save space, some values are skipped if they are identity values
    const geomOffsetXfoFlag = 1 << 2;
    if (itemflags & geomOffsetXfoFlag) {
      this.__geomOffsetXfoParam.setValue(
        new Xfo(
          reader.loadFloat32Vec3(),
          reader.loadFloat32Quat(),
          reader.loadFloat32Vec3()
        )
      );
    }

    // BaseGeomItem now handles loading materials.
    // if (context.version < 4) {
    if (context.versions['zea-engine'].lessThan([0, 0, 4])) {
      const materialFlag = 1 << 3;
      if (itemflags & materialFlag) {
        const materialLibrary = context.assetItem.getMaterialLibrary();
        const materialName = reader.loadStr();
        let material = materialLibrary.getMaterial(materialName);
        if (!material) {
          console.warn(
            "Geom :'" + this.name + "' Material not found:" + materialName
          );
          material = materialLibrary.getMaterial('Default');
        }
        this.setMaterial(material, ValueSetMode.DATA_LOAD);
      } else {
        // Force nodes to have a material so we can see them.
        this.setMaterial(
          context.assetItem.getMaterialLibrary().getMaterial('Default'),
          ValueSetMode.DATA_LOAD
        );
      }
    }

    this.__lightmapCoordOffset = reader.loadFloat32Vec2();
  }

  /**
   * The toString method.
   * @return {any} - The return value.
   */
  toString() {
    return JSON.stringify(this.toJSON(), null, 2)
  }

  // ////////////////////////////////////////
  // Clone and Destroy

  /**
   * The clone method constructs a new geom item, copies its values
   * from this item and returns it.
   * @param {number} flags - The flags value.
   * @return {GeomItem} - Returns a new cloned geom item.
   */
  clone(context) {
    const cloned = new GeomItem();
    cloned.copyFrom(this, context);
    return cloned
  }

  /**
   * The copyFrom method.
   * @param {GeomItem} src - The geom item to copy from.
   * @param {number} flags - The flags value.
   */
  copyFrom(src, context) {
    super.copyFrom(src, context);
    this.__lightmapCoordOffset = src.__lightmapCoordOffset;

    if (!src.getGeometry() && src.geomIndex != -1) {
      const geomLibrary = context.assetItem.getGeometryLibrary();
      const geomIndex = src.geomIndex;
      const onGeomLoaded = range => {
        if (geomIndex >= range[0] && geomIndex < range[1]) {
          const geom = geomLibrary.getGeom(geomIndex);
          if (geom) this.setGeometry(geom, ValueSetMode.DATA_LOAD);
          else console.warn('Geom not loaded:', this.getName());
          geomLibrary.rangeLoaded.disconnectId(connid);
        }
      };
      const connid = geomLibrary.rangeLoaded.connect(onGeomLoaded);
    }

    // Geom Xfo should be dirty after cloning.
    // Note: this might not be necessary. It should
    // always be dirty after cloning.
    this.__geomMatParam.setDirty(this.__cleanGeomMat);
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    super.destroy();
  }
}

sgFactory.registerClass('GeomItem', GeomItem);

const GROUP_INITIAL_XFO_MODES = {
  manual: 0,
  first: 1,
  average: 2,
  globalOri: 3,
};

/** Class representing a group in the scene tree.
 * @extends TreeItem
 */
class Group extends TreeItem {
  /**
   * Create a group.
   * @param {string} name - The name of the group.
   */
  constructor(name) {
    super(name);

    // Items which can be constructed by a user (not loaded in binary data.)
    // Should always have this flag set.
    this.setFlag(ItemFlags.USER_EDITED);

    this.groupXfoDirty = false;
    this.calculatingGroupXfo = false;
    this.dirty = false;

    this.invGroupXfo = undefined;
    this.__initialXfos = [];
    this.__signalIndices = [];

    let pid = 0;
    this.__itemsParam = this.insertParameter(
      new ItemSetParameter('Items', item => item instanceof TreeItem),
      pid++
    );
    this.__itemsParam.itemAdded.connect((item, index) => {
      this.__bindItem(item, index);
    });
    this.__itemsParam.itemRemoved.connect((item, index) => {
      this.__unbindItem(item, index);
    });
    this.__itemsParam.valueChanged.connect(() => {
      this.calcGroupXfo();
      this._setBoundingBoxDirty();
    });

    this.__initialXfoModeParam = this.insertParameter(
      new MultiChoiceParameter(
        'InitialXfoMode',
        GROUP_INITIAL_XFO_MODES.average,
        ['manual', 'first', 'average', 'global']
      ),
      pid++
    );
    this.__initialXfoModeParam.valueChanged.connect(() => {
      this.calcGroupXfo();
    });

    this.__highlightedParam = this.insertParameter(
      new BooleanParameter('Highlighted', false),
      pid++
    );
    this.__highlightedParam.valueChanged.connect(() => {
      this.__updateHighlight();
    });

    this.__updateHighlight = this.__updateHighlight.bind(this);
    const highlightColorParam = this.insertParameter(
      new ColorParameter('HighlightColor', new Color(0.5, 0.5, 1)),
      pid++
    );
    highlightColorParam.valueChanged.connect(this.__updateHighlight);
    const highlightFillParam = this.insertParameter(
      new NumberParameter('HighlightFill', 0.0, [0, 1]),
      pid++
    );
    highlightFillParam.valueChanged.connect(this.__updateHighlight);

    this.__materialParam = this.insertParameter(
      new MaterialParameter('Material'),
      pid++
    );
    this.__materialParam.valueChanged.connect(() => {
      this.__updateMaterial();
    });

    this.__updateCutaway = this.__updateCutaway.bind(this);
    this.insertParameter(
      new BooleanParameter('CutAwayEnabled', false),
      pid++
    ).valueChanged.connect(this.__updateCutaway);
    this.insertParameter(
      new Vec3Parameter('CutVector', new Vec3$1(1, 0, 0)),
      pid++
    ).valueChanged.connect(this.__updateCutaway);
    this.insertParameter(
      new NumberParameter('CutDist', 0.0),
      pid++
    ).valueChanged.connect(this.__updateCutaway);

    // TODO: this should be the way we propagate dirty. Instead
    // of using the overloaded method (_setGlobalXfoDirty)
    // However we seem to get infinite callstacks.
    // The migration to real operators should clean this up.
    // Check: servo_mestre/?stage=assembly
    this.__globalXfoParam.valueChanged.connect(mode => {
      if (!this.calculatingGroupXfo && !this.groupXfoDirty) {
        this._propagateDirtyXfoToItems();
      }
    });
  }

  /**
   * Getter for INITIAL_XFO_MODES.
   */
  static get INITIAL_XFO_MODES() {
    return GROUP_INITIAL_XFO_MODES
  }

  /**
   * The __updateVisiblity method.
   * @return {boolean} - The return value.
   * @private
   */
  __updateVisiblity() {
    if (super.__updateVisiblity()) {
      const value = this.getVisible();
      Array.from(this.__itemsParam.getValue()).forEach(item => {
        if (item instanceof TreeItem) item.propagateVisiblity(value ? 1 : -1);
      });
      return true
    }
    return false
  }

  // /////////////////////////////

  /**
   * The __updateHighlight method.
   * @private
   */
  __updateHighlight() {
    let highlighted = false;
    let color;
    if (this.getParameter('Highlighted').getValue() || this.isSelected()) {
      highlighted = true;
      color = this.getParameter('HighlightColor').getValue();
      color.a = this.getParameter('HighlightFill').getValue();
    }

    const key = 'groupItemHighlight' + this.getId();
    Array.from(this.__itemsParam.getValue()).forEach(item => {
      if (item instanceof TreeItem) {
        if (highlighted) item.addHighlight(key, color, true);
        else item.removeHighlight(key, true);
      }
    });
  }

  /**
   * Returns a boolean indicating if this group is selectable.
   * @param {boolean} sel - Boolean indicating the new selection state.
   */
  setSelected(sel) {
    super.setSelected(sel);
    this.__updateHighlight();

    // if (sel) {
    //   if (!this.getParameter('Highlighted').getValue()) {
    //     Array.from(this.__itemsParam.getValue()).forEach(item => {
    //       if (item instanceof TreeItem)
    //         item.addHighlight(
    //           'branchselected' + this.getId(),
    //           TreeItem.getBranchSelectionOutlineColor(),
    //           true
    //         )
    //     })
    //   }
    //   // We want to re-apply the group hilight over the branch selection hilight.
    //   this.__updateHighlight()
    // } else {
    //   Array.from(this.__itemsParam.getValue()).forEach(item => {
    //     if (item instanceof TreeItem)
    //       item.removeHighlight('branchselected' + this.getId(), true)
    //   })
    // }
  }

  // ////////////////////////////////////////
  // Global Xfo

  /**
   * The _setGlobalXfoDirty method.
   * @private
   */
  _setGlobalXfoDirty() {
    super._setGlobalXfoDirty();
    // Note: dirty should propagat from one
    // Parameter to others following the operator graph.
    // See: comment above (line 124)
    // this._propagateDirtyXfoToItems()
  }

  /**
   * Calculate the group Xfo translate.
   * @return {Xfo} - Returns a new Xfo.
   */
  calcGroupXfo() {
    const items = Array.from(this.__itemsParam.getValue());
    if (items.length == 0) return new Xfo()
    this.calculatingGroupXfo = true;
    const initialXfoMode = this.__initialXfoModeParam.getValue();
    let xfo;
    if (initialXfoMode == GROUP_INITIAL_XFO_MODES.manual) {
      // The xfo is manually set by the current global xfo.
      this.invGroupXfo = this.getGlobalXfo().inverse();
      this.calculatingGroupXfo = false;
      this.groupXfoDirty = false;
      return
    } else if (initialXfoMode == GROUP_INITIAL_XFO_MODES.first) {
      xfo = this.__initialXfos[0];
    } else if (initialXfoMode == GROUP_INITIAL_XFO_MODES.average) {
      xfo = new Xfo();
      xfo.ori.set(0, 0, 0, 0);
      let numTreeItems = 0;
      items.forEach((item, index) => {
        if (item instanceof TreeItem) {
          xfo.tr.addInPlace(this.__initialXfos[index].tr);
          xfo.ori.addInPlace(this.__initialXfos[index].ori);
          numTreeItems++;
        }
      });
      xfo.tr.scaleInPlace(1 / numTreeItems);
      xfo.ori.normalizeInPlace();
      // xfo.sc.scaleInPlace(1/ numTreeItems);
    } else if (initialXfoMode == GROUP_INITIAL_XFO_MODES.globalOri) {
      xfo = new Xfo();
      let numTreeItems = 0;
      items.forEach((item, index) => {
        if (item instanceof TreeItem) {
          xfo.tr.addInPlace(this.__initialXfos[index].tr);
          numTreeItems++;
        }
      });
      xfo.tr.scaleInPlace(1 / numTreeItems);
    } else {
      throw new Error('Invalid mode.')
    }

    this.setGlobalXfo(xfo, ValueSetMode.GENERATED_VALUE);
    
    // Note: if the Group global param becomes dirty
    // then it stops propagating dirty to its members.
    const newGlobal = this.getGlobalXfo(); // force a cleaning.
    this.invGroupXfo = newGlobal.inverse();

    this.calculatingGroupXfo = false;
    this.groupXfoDirty = false;
  }

  /**
   * The _propagateDirtyXfoToItems method.
   * @private
   */
  _propagateDirtyXfoToItems() {
    if (this.groupXfoDirty || this.calculatingGroupXfo) return

    const items = Array.from(this.__itemsParam.getValue());
    // Only after all the items are resolved do we have an invXfo and we can tranform our items.
    if (
      !this.calculatingGroupXfo &&
      items.length > 0 &&
      this.invGroupXfo &&
      !this.dirty
    ) {
      // Note: because each 'clean' function is a unique
      // value, the parameter does not know that this Group
      // has already registered a clean function. For now
      // we use this 'dirty' hack to avoid registering multiple
      // clean functions. However, once the cleaning is handled
      // via a bound operator, then this code will be removed.
      this.dirty = true;
      this.propagatingXfoToItems = true; // Note: selection group needs this set.
      let delta;
      const setDirty = (item, initialXfo) => {
        const param = item.getParameter('GlobalXfo');
        const clean = () => {
          if (!delta) {
            // Compute the skinning transform that we can
            // apply to all the items in the group.
            const xfo = this.__globalXfoParam.getValue();
            delta = xfo.multiply(this.invGroupXfo);
            this.dirty = false;
          }
          const result = delta.multiply(initialXfo);
          param.setClean(result);
        };
        param.setDirty(clean);
      };
      items.forEach((item, index) => {
        if (item instanceof TreeItem) setDirty(item, this.__initialXfos[index]);
      });
      this.propagatingXfoToItems = false;
    }
  }

  // _propagateGroupXfoToItem(index) {
  //   const clean = () => {
  //     const xfo = this.__globalXfoParam.getValue()
  //     const delta = xfo.multiply(this.invGroupXfo)
  //     return delta.multiply(this.__initialXfos[index])
  //   }
  //   item.getParameter('GlobalXfo').setDirty(clean)
  // }

  // ////////////////////////////////////////
  // Materials

  /**
   * The __updateMaterial method.
   * @private
   */
  __updateMaterial() {
    const material = this.getParameter('Material').getValue();

    Array.from(this.__itemsParam.getValue()).forEach(item => {
      item.traverse(treeItem => {
        if (treeItem instanceof TreeItem && treeItem.hasParameter('Material')) {
          const p = treeItem.getParameter('Material');
          if (material) {
            const m = p.getValue();
            if (m != material) {
              p.__backupMaterial = m;
              p.setValue(material, ValueSetMode.GENERATED_VALUE);
            }
          } else if (p.__backupMaterial) {
            p.setValue(p.__backupMaterial, ValueSetMode.GENERATED_VALUE);
          }
        }
      }, false);
    });
  }

  // ////////////////////////////////////////
  // Cutaways

  /**
   * The __updateCutaway method.
   * @private
   */
  __updateCutaway() {
    const cutEnabled = this.getParameter('CutAwayEnabled').getValue();
    const cutAwayVector = this.getParameter('CutVector').getValue();
    const cutAwayDist = this.getParameter('CutDist').getValue();

    Array.from(this.__itemsParam.getValue()).forEach(item => {
      item.traverse(treeItem => {
        if (treeItem instanceof BaseGeomItem) {
          treeItem.setCutawayEnabled(cutEnabled);
          treeItem.setCutVector(cutAwayVector);
          treeItem.setCutDist(cutAwayDist);
        }
      }, true);
    });
  }

  // ////////////////////////////////////////
  // Items

  /**
   * This method is mostly used in our demos,
   * and should be removed from the interface
   * @param {any} paths - The paths value.
   */
  setPaths(paths) {
    this.clearItems(false);

    const searchRoot = this.getOwner();
    if (searchRoot == undefined) { 
      console.warn('Group does not have an owner and so cannot resolve paths:', this.getName());
      return
    }
    const items = [];
    paths.forEach(path => {
      const treeItem = searchRoot.resolvePath(path);
      if (treeItem) items.push(treeItem);
      else {
        console.warn('Path does not resolve to an Item:', path, " group:", this.getName());
      }
    });
    this.setItems(items);
  }

  /**
   * For backwards compatiblity.
   * @param {any} paths - The paths value.
   */
  resolveItems(paths) {
    this.setPaths(paths);
  }

  /**
   * The __bindItem method.
   * @param {any} item - The item value.
   * @param {number} index - The index value.
   * @private
   */
  __bindItem(item, index) {
    if (!(item instanceof TreeItem)) return

    const sigIds = {};

    sigIds.mouseDownIndex = item.mouseDown.connect(event => {
      this.onMouseDown(event);
    });
    sigIds.mouseUpIndex = item.mouseUp.connect(event => {
      this.onMouseUp(event);
    });
    sigIds.mouseMoveIndex = item.mouseMove.connect(event => {
      this.onMouseMove(event);
    });
    sigIds.mouseEnterIndex = item.mouseEnter.connect(event => {
      this.onMouseEnter(event);
    });
    sigIds.mouseLeaveIndex = item.mouseLeave.connect(event => {
      this.onMouseLeave(event);
    });

    // ///////////////////////////////
    // Update the Material
    const material = this.getParameter('Material').getValue();
    if (material) {
      item.traverse(treeItem => {
        if (treeItem instanceof TreeItem && treeItem.hasParameter('Material')) {
          const p = treeItem.getParameter('Material');
          if (material) {
            const m = p.getValue();
            if (m != material) {
              p.__backupMaterial = m;
              p.setValue(material, ValueSetMode.GENERATED_VALUE);
            }
          }
        }
      }, true);
    }

    // ///////////////////////////////
    // Update the highlight
    if (
      item instanceof TreeItem &&
      this.getParameter('Highlighted').getValue()
    ) {
      const color = this.getParameter('HighlightColor').getValue();
      color.a = this.getParameter('HighlightFill').getValue();
      item.addHighlight('groupItemHighlight' + this.getId(), color, true);
    }

    // ///////////////////////////////
    // Update the item cutaway
    const cutEnabled = this.getParameter('CutAwayEnabled').getValue();
    if (cutEnabled) {
      const cutAwayVector = this.getParameter('CutVector').getValue();
      const cutAwayDist = this.getParameter('CutDist').getValue();
      item.traverse(treeItem => {
        if (treeItem instanceof BaseGeomItem) {
          // console.log("cutEnabled:", treeItem.getPath(), cutAwayVector.toString(), treeItem.getMaterial().getShaderName())
          treeItem.setCutawayEnabled(cutEnabled);
          treeItem.setCutVector(cutAwayVector);
          treeItem.setCutDist(cutAwayDist);
        }
      }, true);
    }

    if (!this.getVisible()) {
      // Decrement the visiblity counter which might cause
      // this item to become invisible. (or it might already be invisible.)
      item.propagateVisiblity(-1);
    }

    const updateGlobalXfo = () => {
      const initialXfoMode = this.__initialXfoModeParam.getValue();
      if (initialXfoMode == GROUP_INITIAL_XFO_MODES.first && index == 0) {
        this.calcGroupXfo();
      } else if (
        initialXfoMode == GROUP_INITIAL_XFO_MODES.average ||
        initialXfoMode == GROUP_INITIAL_XFO_MODES.globalOri
      ) {
        this.calcGroupXfo();
      }
    };

    sigIds.globalXfoChangedIndex = item.globalXfoChanged.connect(mode => {
      // If the item's xfo changees, potentially through its own hierarchy
      // then we need to re-bind here.
      if (!this.propagatingXfoToItems) {
        this.__initialXfos[index] = item.getGlobalXfo();
        this.groupXfoDirty = true;
        updateGlobalXfo();
      }
    });
    this.__initialXfos[index] = item.getGlobalXfo();

    sigIds.bboxChangedIndex = item.boundingChanged.connect(
      this._setBoundingBoxDirty
    );

    this.__signalIndices[index] = sigIds;

    updateGlobalXfo();
  }

  /**
   * The __unbindItem method.
   * @param {any} item - The item value.
   * @param {number} index - The index value.
   * @private
   */
  __unbindItem(item, index) {
    if (!(item instanceof TreeItem)) return

    item.removeHighlight('branchselected' + this.getId(), true);
    if (this.getParameter('Highlighted').getValue()) {
      item.removeHighlight('groupItemHighlight' + this.getId(), true);
    }

    if (!this.getVisible()) {
      // Increment the visiblity counter which might cause
      // this item to become visible.
      // It will stay invisible if its parent is invisible, or if
      // multiple groups connect to it and say it is invisible.
      item.propagateVisiblity(1);
    }

    // ///////////////////////////////
    // Update the item cutaway
    item.traverse(treeItem => {
      if (treeItem instanceof BaseGeomItem) {
        treeItem.setCutawayEnabled(false);
      }
    }, true);

    const sigIds = this.__signalIndices[index];
    item.mouseDown.disconnectId(sigIds.mouseDownIndex);
    item.mouseUp.disconnectId(sigIds.mouseUpIndex);
    item.mouseMove.disconnectId(sigIds.mouseMoveIndex);
    item.mouseEnter.disconnectId(sigIds.mouseEnterIndex);
    item.mouseLeave.disconnectId(sigIds.mouseLeaveIndex);

    item.globalXfoChanged.disconnectId(sigIds.globalXfoChangedIndex);
    item.boundingChanged.disconnectId(sigIds.bboxChangedIndex);
    this.__signalIndices.splice(index, 1);
    this.__initialXfos.splice(index, 1);
  }

  /**
   * Add an item to the group.
   * @param {any} item - The item value.
   * @param {boolean} emit - The emit value.
   */
  addItem(item, emit = true) {
    if (!item) {
      console.warn('Error adding item to group. Item is null');
      return
    }
    this.__itemsParam.addItem(item, emit);
  }

  /**
   * Remove an item to the group.
   * @param {any} item - The item value.
   * @param {boolean} emit - The emit value.
   */
  removeItem(item, emit = true) {
    this.__itemsParam.removeItem(item, emit);
  }

  /**
   * Clear items from the group.
   * @param {boolean} emit - The emit value.
   */
  clearItems(emit = true) {
    // Note: Unbind reversed so that indices
    // do not get changed during the unbind.
    const items = Array.from(this.__itemsParam.getValue());
    for (let i = items.length - 1; i >= 0; i--) {
      this.__unbindItem(items[i], i);
    }
    this.__signalIndices = [];
    this.__initialXfos = [];
    this.__itemsParam.clearItems(emit);
  }

  /**
   * The getItems method.
   * @return {any} - The return value.
   */
  getItems() {
    return this.__itemsParam.getValue()
  }

  /**
   * The setItems method.
   * @param {any} items - The items value.
   */
  setItems(items) {
    this.clearItems(false);
    this.__itemsParam.setItems(items);
  }

  /**
   * The _cleanBoundingBox method.
   * @param {Box3} bbox - The bounding box value.
   * @return {Box3} - The return value.
   * @private
   */
  _cleanBoundingBox(bbox) {
    const result = super._cleanBoundingBox(bbox);
    const items = Array.from(this.__itemsParam.getValue());
    items.forEach(item => {
      if (item instanceof TreeItem) {
        if (item.getVisible() && !item.testFlag(ItemFlags.IGNORE_BBOX))
          result.addBox3(item.getBoundingBox());
      }
    });
    return result
  }

  // ///////////////////////
  // Events

  /**
   * Occurs when a user presses a mouse button over an element.
   * @param {MouseEvent} event - The mouse event that occurs.
   */
  onMouseDown(event) {
    super.onMouseDown(event);
  }

  /**
   * Occurs when a user releases a mouse button over an element.
   * @param {MouseEvent} event - The mouse event that occurs.
   */
  onMouseUp(event) {
    super.onMouseUp(event);
  }

  /**
   * Occur when the mouse pointer is moving  while over an element.
   * @param {MouseEvent} event - The mouse event that occurs.
   */
  onMouseMove(event) {
    super.onMouseMove(event);
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    const j = super.toJSON(context, flags);
    const items = Array.from(this.__itemsParam.getValue());
    const treeItems = [];
    items.forEach(p => {
      const path = p.getPath();
      treeItems.push(context ? context.makeRelative(path) : path);
    });
    j.treeItems = treeItems;
    return j
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    super.fromJSON(j, context, flags);

    // Note: JSON data is only used to store user edits, so
    // parameters loaed from JSON are considered user edited.
    this.setFlag(ItemFlags.USER_EDITED);

    if (!j.treeItems) {
      console.warn('Invalid Parameter JSON');
      return
    }
    let count = j.treeItems.length;

    const addItem = path => {
      context.resolvePath(
        path,
        treeItem => {
          this.addItem(treeItem);
          count--;
          if (count == 0) {
            this.calculatingGroupXfo = true;
            // this.setGlobalXfo(this.calcGroupXfo(), ValueSetMode.GENERATED_VALUE)
            this.calcGroupXfo();
            this.calculatingGroupXfo = false;
          }
        },
        reason => {
          console.warn(
            "Group: '" + this.getName() + "'. Unable to load item:" + path
          );
        }
      );
    };
    for (const path of j.treeItems) {
      addItem(path);
    }
  }

  // ////////////////////////////////////////
  // Clone and Destroy

  /**
   * The clone method constructs a new group,
   * copies its values and returns it.
   * @param {number} flags - The flags value.
   * @return {Group} - Returns a new cloned group.
   */
  clone(flags) {
    const cloned = new Group();
    cloned.copyFrom(this, flags);
    return cloned
  }

  /**
   * The copyFrom method.
   * @param {Group} src - The group to copy from.
   * @param {number} flags - The flags value.
   */
  copyFrom(src, flags) {
    super.copyFrom(src, flags);
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    super.destroy();
  }
}

sgFactory.registerClass('Group', Group);

/* eslint-disable */
var WorkerFactory$1 = createBase64WorkerFactory('', null, false);
/* eslint-enable */

// import {
//     parseGeomsBinary
// } from './Geometry/parseGeomsBinary.js';

/** Class representing a geometry library.
 * @private
 */
class GeomLibrary {
  /**
   * Create a geom library.
   */
  constructor() {
    this.rangeLoaded = new Signal();
    this.streamFileParsed = new Signal();
    this.loaded = new Signal(true);

    this.__streamInfos = {};
    this.__genBuffersOpts = {};

    this.__workers = [];
    this.__nextWorker = 0;

    {
      for (let i = 0; i < 3; i++) {
        this.__workers.push(this.__constructWorker());
      }
    }

    this.clear();
  }

  /**
   * The clear method.
   */
  clear() {
    this.__loaded = 0;
    this.__numGeoms = 0;
    this.geoms = [];
  }

  /**
   * The __constructWorker method.
   * @return {GeomParserWorker} - Returns a GeomParserWorker.
   * @private
   */
  __constructWorker() {
    const worker = new WorkerFactory$1();
    worker.onmessage = event => {
      this.__recieveGeomDatas(
        event.data.key,
        event.data.geomDatas,
        event.data.geomIndexOffset,
        event.data.geomsRange
      );
    };
    return worker
  }

  /**
   * The __terminateWorkers method.
   * @private
   */
  __terminateWorkers() {
    for (const worker of this.__workers) worker.terminate();
    this.__workers = [];
  }

  /**
   * The setGenBufferOption method.
   * @param {any} key - The key value.
   * @param {any} value - The value param.
   */
  setGenBufferOption(key, value) {
    this.__genBuffersOpts[key] = value;
  }

  /**
   * The setNumGeoms method.
   * @param {any} expectedNumGeoms - The expectedNumGeoms value.
   */
  setNumGeoms(expectedNumGeoms) {
    this.__numGeoms = expectedNumGeoms;
  }

  /**
   * The getGeom method.
   * @param {number} index - The index value.
   * @return {any} - The return value.
   */
  getGeom(index) {
    if (index >= this.geoms.length) {
      // console.warn("Geom index invalid:" + index);
      return null
    }
    return this.geoms[index]
  }

  /**
   * The loadUrl method.
   * @param {any} fileUrl - The fileUrl value.
   */
  loadUrl(fileUrl) {
    loadBinfile(
      fileUrl,
      data => {
        this.loadBin(data);
      },
      statusText => {
        console.warn(statusText);
      }
    );
  }

  /**
   * The readBinaryBuffer method.
   * @param {any} key - The key value.
   * @param {ArrayBuffer} buffer - The buffer value.
   * @param {object} context - The context value.
   * @return {any} - The return value.
   */
  readBinaryBuffer(key, buffer, context) {
    const isMobile = SystemDesc.isMobileDevice;
    const reader = new BinReader(buffer, 0, isMobile);
    const numGeoms = reader.loadUInt32();
    const geomIndexOffset = reader.loadUInt32();
    this.__streamInfos[key] = {
      total: numGeoms,
      done: 0,
    };

    if (numGeoms == 0) {
      this.streamFileParsed.emit(1);
      return numGeoms
    }
    if (this.__numGeoms == 0) {
      // Note: for loading geom streams, we need to know the total number
      // ahead of time to be able to generate accurate progress reports.
      this.__numGeoms = numGeoms;
      // throw("Loading cannot start will we know how many geomms.");
    }

    const toc = reader.loadUInt32Array(numGeoms);

    let numCores = window.navigator.hardwareConcurrency;
    if (!numCores) {
      if (isMobile) numCores = 2;
      else numCores = 4;
    }
    const numGeomsPerWorkload = Math.max(1, Math.floor(numGeoms / numCores + 1));

    // TODO: Use SharedArrayBuffer once available.
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer

    let offset = 0;
    while (offset < numGeoms) {
      const bufferSlice_start = toc[offset];
      let bufferSlice_end;
      let geomsRange;
      if (offset + numGeomsPerWorkload >= numGeoms) {
        geomsRange = [offset, numGeoms];
        bufferSlice_end = buffer.byteLength;
      } else {
        geomsRange = [offset, offset + numGeomsPerWorkload];
        bufferSlice_end = toc[geomsRange[1]];
      }
      const bufferSlice = buffer.slice(bufferSlice_start, bufferSlice_end);
      offset += numGeomsPerWorkload;

      // ////////////////////////////////////////////
      // Multi Threaded Parsing
      {
        this.__workers[this.__nextWorker].postMessage(
          {
            key,
            toc,
            geomIndexOffset,
            geomsRange,
            isMobileDevice: reader.isMobileDevice,
            bufferSlice,
            genBuffersOpts: this.__genBuffersOpts,
            context,
          },
          [bufferSlice]
        );
        this.__nextWorker = (this.__nextWorker + 1) % this.__workers.length;
      }
    }
    return numGeoms
  }

  /**
   * The __recieveGeomDatas method.
   * @param {any} key - The key value.
   * @param {any} geomDatas - The geomDatas value.
   * @param {any} geomIndexOffset - The offset of the file geoms in the asset.
   * @param {any} geomsRange - The range of geoms in the bin file.
   * @private
   */
  __recieveGeomDatas(key, geomDatas, geomIndexOffset, geomsRange) {
    // We are storing a subset of the geoms from a binary file
    // which is a subset of the geoms in an asset.
    // geomIndexOffset: the offset of the file geoms in the asset.
    // geomsRange: the range of geoms in the bin file.
    const offset = geomIndexOffset + geomsRange[0];
    const storedRange = [offset, geomIndexOffset + geomsRange[1]];

    for (let i = 0; i < geomDatas.length; i++) {
      const geomData = geomDatas[i];
      if (!geomData.type) continue
      let proxy;
      switch (geomData.type) {
        case 'Points':
          proxy = new PointsProxy(geomData);
          break
        case 'Lines':
          proxy = new LinesProxy(geomData);
          break
        case 'Mesh':
        case 'Plane': // TODO: Support procedural shape params
        case 'Sphere':
        case 'Cone':
          proxy = new MeshProxy(geomData);
          break
        default:
          throw new Error('Unsupported Geom type:' + className)
      }
      this.geoms[offset + i] = proxy;
    }
    this.rangeLoaded.emit(storedRange);

    const loaded = storedRange[1] - storedRange[0];
    // console.log("GeomLibrary Loaded:" + loaded);

    // Each file in the stream has its own counter for the number of
    // geoms, and once each stream file finishes parsing, we fire a signal.
    const streamInfo = this.__streamInfos[key];
    streamInfo.done += loaded;
    // console.log(key + " Loaded:" + streamInfo.done + " of :" + streamInfo.total);
    if (streamInfo.done == streamInfo.total) {
      this.streamFileParsed.emit(1);
    }

    // Once all the geoms from all the files are loaded and parsed
    // fire the loaded signal.
    this.__loaded += loaded;
    // console.log("this.__loaded:" + this.__loaded +" this.__numGeoms:" + this.__numGeoms);
    if (this.__loaded == this.__numGeoms) {
      // console.log("GeomLibrary Loaded:" + this.__name + " count:" + geomDatas.length + " loaded:" + this.__loaded);
      this.__terminateWorkers();
      this.loaded.emit();
    }
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @return {object} - Returns the json object.
   */
  toJSON() {
    return {
      numGeoms: this.geoms.length(),
    }
  }

  /**
   * The toString method.
   * @return {any} - The return value.
   */
  toString() {
    return JSON.stringify(this.toJSON(), null, 2)
  }
}

/** Class representing an asset item in a scene tree.
 * @extends TreeItem
 */
class AssetItem extends TreeItem {
  /**
   * Create an asset item.
   * @param {string} name - The name of the asset item.
   */
  constructor(name) {
    super(name);

    this.__geomLibrary = new GeomLibrary();
    this.__materials = new MaterialLibrary();

    this.loaded = new Signal(true);
    // Assets that are generated inline can be considered loaded
    // (e.g. the ground plane). So we set loaded to true, unless a file is specified.
    this.loaded.setToggled(true);
  }

  /**
   * The isLoaded method.
   * @return {boolean} - Returns true if the asset has already loaded its data.
   */
  isLoaded() {
    return this.loaded.isToggled()
  }

  /**
   * The getGeometryLibrary method.
   * @return {any} - The return value.
   */
  getEngineDataVersion() {
    return this.__engineDataVersion
  }

  /**
   * The getGeometryLibrary method.
   * @return {any} - The return value.
   */
  getGeometryLibrary() {
    return this.__geomLibrary
  }

  /**
   * The getMaterialLibrary method.
   * @return {any} - The return value.
   */
  getMaterialLibrary() {
    return this.__materials
  }

  /**
   * The getUnitsConversion method.
   * @return {any} - The return value.
   */
  getUnitsConversion() {
    return this.__unitsScale
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The readBinary method.
   * @param {object} reader - The reader value.
   * @param {object} context - The context value.
   */
  readBinary(reader, context = {}) {
    context.assetItem = this;
    context.numTreeItems = 0;
    context.numGeomItems = 0;

    if (!context.versions['zea-engine']) {
      context.versions['zea-engine'] = new Version(reader.loadStr());
    }
    this.__engineDataVersion = context.versions['zea-engine'];
    console.log("Loading Engine File version:", context.versions['zea-engine']);

    let layerRoot;
    const layers = {};
    context.addGeomToLayer = (geomItem, layer) => {
      if (!layers[layer]) {
        if (!layerRoot) {
          layerRoot = new TreeItem('Layers');
          this.addChild(layerRoot, false);
        }
        const group = new Group(layer);
        group.propagateXfoToItems = false;
        layerRoot.addChild(group, false);
        layers[layer] = group;
      }
      layers[layer].addItem(geomItem);
    };
    const loadUnits = () => {
      this.__units = reader.loadStr();
      // Calculate a scale factor to convert
      // the asset units to meters(the scene units)
      let scaleFactor = 1.0;
      switch (this.__units) {
        case 'Millimeters':
          scaleFactor = 0.001;
          break
        case 'Centimeters':
          scaleFactor = 0.01;
          break
        case 'Meters':
          scaleFactor = 1.0;
          break
        case 'Kilometers':
          scaleFactor = 1000.0;
          break
        case 'Inches':
          scaleFactor = 0.0254;
          break
        case 'Feet':
          scaleFactor = 0.3048;
          break
        case 'Miles':
          scaleFactor = 1609.34;
          break
      }
      this.__unitsScale = scaleFactor;

      // Apply units change to existing Xfo (avoid changing tr).
      const xfo = this.getLocalXfo().clone();
      xfo.sc.scaleInPlace(scaleFactor);
      this.setLocalXfo(xfo);
    };

    if (context.versions['zea-engine'].greaterThan([0, 0, 6])) {
      // Loading units modifies our Xfo, which then propagates up
      // the tree forcing a re-computation. Better just do it at
      // the start.
      loadUnits();
    }

    this.__materials.readBinary(reader, context);

    super.readBinary(reader, context);

    if (
      context.versions['zea-engine'].greaterOrEqualThan([0, 0, 5]) &&
      context.versions['zea-engine'].lessThan([0, 0, 7])
    ) {
      loadUnits();
    }

    // console.log("numTreeItems:", context.numTreeItems, " numGeomItems:", context.numGeomItems)
  }

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context = {}, flags = 0) {
    context.makeRelative = path => {
      const assetPath = this.getPath();
      const start = path.slice(0, assetPath.length);
      for (let i = 0; i < start.length - 1; i++) {
        if (start[i] != assetPath[i]) {
          console.warn(
            'Param Path is not relative to the asset. May not be able to be resolved at load time:' +
              path
          );
          return path
        }
      }
      // Relative paths start with a symbol for the root element.
      const relativePath = path.slice(assetPath.length - 1);
      relativePath[0] = '.';
      return relativePath
    };
    context.assetItem = this;
    const j = super.toJSON(context, flags);
    return j
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @param {any} onDone - The onDone value.
   */
  fromJSON(j, context = {}, flags = 0, onDone) {
    if (!context) context = {};

    context.assetItem = this;
    context.numTreeItems = 0;
    context.numGeomItems = 0;
    if (context.version == undefined) context.version = 0;

    context.assetItem = this;

    const plcbs = []; // Post load callbacks.
    context.resolvePath = (path, cb) => {
      // Note: Why not return a Promise here?
      // Promise evaluation is always async, so
      // all promisses will be resolved after the current call stack
      // has terminated. In our case, we want all paths
      // to be resolved before the end of the function, which
      // we can handle easily with callback functions.
      if (!path) throw new Error('Path not spcecified')
      const item = this.resolvePath(path);
      if (item) {
        cb(item);
      } else {
        // Some paths resolve to items generated during load,
        // so push a callback to re-try after the load is complete.
        plcbs.push(() => {
          const param = this.resolvePath(path);
          if (param) cb(param);
          else {
            console.warn('Path unable to be resolved:' + path);
          }
        });
      }
    };
    context.addPLCB = plcb => plcbs.push(plcb);

    // Avoid loading the FilePath as we are already loading json data.
    // if (j.params && j.params.FilePath) {
    //   delete j.params.FilePath
    // }

    super.fromJSON(j, context, flags);

    // Invoke all the post-load callbacks to resolve any
    // remaning references.
    for (const cb of plcbs) cb();

    if (onDone) onDone();
  }
}

sgFactory.registerClass('AssetItem', AssetItem);

/** Class representing a billboard item in a scene tree.
 * @extends TreeItem
 */
class BillboardItem extends TreeItem {
  /**
   * Create a billboard item.
   * @param {string} name - The name of the billboard item.
   * @param {any} image - The image value.
   */
  constructor(name, image) {
    super(name);
    const imageParam = this.addParameter(new ImageParameter('Image'));
    if (image) imageParam.setValue(image); // Note: this dirties the param and will ensure it is saved to JSON
    this.addParameter(new NumberParameter('PixelsPerMeter', 1000.0));
    this.addParameter(new NumberParameter('Alpha', 1.0));
    this.addParameter(new ColorParameter('Color', new Color(1.0, 1.0, 1.0)));
    this.addParameter(new BooleanParameter('AlignedToCamera', false));
  }
}
sgFactory.registerClass('BillboardItem', BillboardItem);

/** Class representing a camera in the scene tree.
 * @extends TreeItem
 */
class Camera extends TreeItem {
  /**
   * Create a camera.
   * @param {string} name - The name of the camera.
   */
  constructor(name = undefined) {
    if (name == undefined) name = 'Camera';
    super(name);

    this.__isOrthographicParam = this.addParameter(
      new BooleanParameter('isOrthographic', false)
    );
    this.__fovParam = this.addParameter(new NumberParameter('fov', 1.0));
    this.__nearParam = this.addParameter(new NumberParameter('near', 0.1));
    this.__farParam = this.addParameter(new NumberParameter('far', 1000.0));
    this.__focalDistanceParam = this.addParameter(
      new NumberParameter('focalDistance', 5.0)
    );

    // this.__viewMatParam = this.addParameter(new Parameter('viewMat', new Mat4()));
    // const _cleanViewMat = (xfo)=>{
    //     return this.__globalXfoParam.getValue().inverse().toMat4();
    // }
    // this.__globalXfoParam.valueChanged.connect((changeType)=>{
    //     this.__viewMatParam.setDirty(_cleanViewMat);
    // });

    // this.viewMatChanged = this.__viewMatParam.valueChanged;
    this.projectionParamChanged = new Signal();
    this.movementFinished = new Signal();

    this.__isOrthographicParam.valueChanged.connect(
      this.projectionParamChanged.emit
    );
    this.__fovParam.valueChanged.connect(this.projectionParamChanged.emit);
    this.__nearParam.valueChanged.connect(this.projectionParamChanged.emit);
    this.__farParam.valueChanged.connect(this.projectionParamChanged.emit);

    // Initial viewing coords of a person standing 3 meters away from the
    // center of the stage looking at something 1 meter off the ground.
    this.setPositionAndTarget(
      new Vec3$1(3, 3, 1.75),
      new Vec3$1(0, 0, 1),
      ValueSetMode.GENERATED_VALUE
    );
    this.setLensFocalLength('28mm', ValueSetMode.GENERATED_VALUE);
  }

  // ////////////////////////////////////////////
  // Getters/setters.

  /**
   * The getNear method.
   * @return {number} - Returns the near value.
   */
  getNear() {
    return this.__nearParam.getValue()
  }

  /**
   * The setNear method.
   * @param {number} value - The near value.
   */
  setNear(value) {
    this.__nearParam.setValue(value);
  }

  /**
   * The getFar method.
   * @return {number} - Returns the far value.
   */
  getFar() {
    return this.__farParam.getValue()
  }

  /**
   * The setFar method.
   * @param {number} value - The far value.
   */
  setFar(value) {
    this.__farParam.setValue(value);
  }

  /**
   * Getter for the camera field of view (FOV).
   * The FOV is how much of the scene the camera can see at once.
   * @return {number} - Returns the FOV value.
   */
  getFov() {
    return this.__fovParam.getValue()
  }

  /**
   * Setter for the camera field of view (FOV).
   * The FOV is how much of the scene the camera can see at once.
   * @param {number} value - The FOV value.
   */
  setFov(value) {
    this.__fovParam.setValue(value);
  }

  /**
   * Setter for the camera lens focal length.
   * @param {number} value - The lens focal length value.
   * @param {number} mode - The mode value.
   */
  setLensFocalLength(value, mode = ValueSetMode.USER_SETVALUE) {
    // https://www.nikonians.org/reviews/fov-tables
    const mapping = {
      '10mm': 100.4,
      '11mm': 95.0,
      '12mm': 90.0,
      '14mm': 81.2,
      '15mm': 77.3,
      '17mm': 70.4,
      '18mm': 67.4,
      '19mm': 64.6,
      '20mm': 61.9,
      '24mm': 53.1,
      '28mm': 46.4,
      '30mm': 43.6,
      '35mm': 37.8,
      '45mm': 29.9,
      '50mm': 27.0,
      '55mm': 24.6,
      '60mm': 22.6,
      '70mm': 19.5,
      '75mm': 18.2,
      '80mm': 17.1,
      '85mm': 16.1,
      '90mm': 15.2,
      '100mm': 13.7,
      '105mm': 13.0,
      '120mm': 11.4,
      '125mm': 11.0,
      '135mm': 10.2,
      '150mm': 9.1,
      '170mm': 8.1,
      '180mm': 7.6,
      '210mm': 6.5,
      '300mm': 4.6,
      '400mm': 3.4,
      '500mm': 2.7,
      '600mm': 2.3,
      '800mm': 1.7,
    };
    if (!value in mapping) {
      console.warn('Camera lense focal length not suported:' + value);
      return
    }
    this.__fovParam.setValue(Math.degToRad(mapping[value]), mode);
  }

  /**
   * Getter for the camera focal length.
   * @return {any} - Returns the lens focal length value..
   */
  getFocalDistance() {
    return this.__focalDistanceParam.getValue()
  }

  /**
   * Setter for the camera focal length.
   * @param {number} dist - The focal distance value.
   * @param {number} mode - The mode value.
   */
  setFocalDistance(dist, mode = ValueSetMode.USER_SETVALUE) {
    if (dist < 0.0001) console.error('Never set focal distance to zero');
    this.__focalDistanceParam.setValue(dist, mode);
    this.__nearParam.setValue(dist * 0.01, mode);
    this.__farParam.setValue(dist * 200.0, mode);
  }

  /**
   * The getIsOrthographic method.
   * @return {any} - The return value.
   */
  getIsOrthographic() {
    return this.__isOrthographicParam.getValue()
  }

  /**
   * The setIsOrthographic method.
   * @param {any} value - The value param.
   * @param {number} mode - The mode value.
   */
  setIsOrthographic(value, mode = ValueSetMode.USER_SETVALUE) {
    this.__isOrthographicParam.setValue(value, mode);
  }

  /**
   * Setter for the camera postion and target.
   * @param {Vec3} position - The position of the camera.
   * @param {Vec3} target - The target of the camera.
   * @param {number} mode - The mode value.
   */
  setPositionAndTarget(position, target, mode = ValueSetMode.USER_SETVALUE) {
    this.setFocalDistance(position.distanceTo(target), mode);
    const xfo = new Xfo();
    xfo.setLookAt(position, target, new Vec3$1(0.0, 0.0, 1.0));
    this.setGlobalXfo(xfo, mode);
  }

  /**
   * Getter for the target position.
   * @return {Vec3} - Returns the target position.
   */
  getTargetPostion() {
    const focalDistance = this.__focalDistanceParam.getValue();
    const xfo = this.getGlobalXfo();
    const target = xfo.ori.getZaxis();
    target.scaleInPlace(-focalDistance);
    target.addInPlace(xfo.tr);
    return target
  }

  // ///////////////////////////

  /**
   * The frameView method.
   * @param {any} viewport - The viewport value.
   * @param {any} treeItems - The treeItems value.
   * @param {number} mode - The mode value.
   */
  frameView(viewport, treeItems, mode = ValueSetMode.USER_SETVALUE) {
    const boundingBox = new Box3$1();
    for (const treeItem of treeItems)
      boundingBox.addBox3(treeItem.getBoundingBox());

    if (!boundingBox.isValid()) {
      console.warn('Bounding box not valid.');
      return
    }
    const focalDistance = this.__focalDistanceParam.getValue();
    const fovY = this.__fovParam.getValue();

    const globalXfo = this.getGlobalXfo().clone();
    const cameraViewVec = globalXfo.ori.getZaxis();
    const targetOffset = cameraViewVec.scale(-focalDistance);
    const currTarget = globalXfo.tr.add(targetOffset);
    const newTarget = boundingBox.center();

    const pan = newTarget.subtract(currTarget);
    globalXfo.tr.addInPlace(pan);

    // Transform the bounding box into camera space.
    const transformedBBox = new Box3$1();
    transformedBBox.addBox3(boundingBox, globalXfo.inverse());
    const camSpaceTarget = transformedBBox.center();

    const fovX = fovY * (viewport.getWidth() / viewport.getHeight());

    // p1 is the closest corner of the transformed bbox.
    const p = transformedBBox.p1;
    const newFocalDistanceX = (Math.abs(p.x) / Math.tan(0.5 * fovX)) * 1.2;
    const newFocalDistanceY = (Math.abs(p.y) / Math.tan(0.5 * fovY)) * 1.2;

    const camSpaceBBoxDepth =
      (transformedBBox.p0.z - transformedBBox.p1.z) * -0.5;
    const newFocalDistance =
      Math.max(newFocalDistanceX, newFocalDistanceY) + camSpaceBBoxDepth;

    const dollyDist = newFocalDistance - focalDistance;
    globalXfo.tr.addInPlace(cameraViewVec.scale(dollyDist));

    this.setFocalDistance(newFocalDistance, mode);
    this.setGlobalXfo(globalXfo, mode);
    this.movementFinished.emit();
  }

  /**
   * The updateProjectionMatrix method.
   * @param {any} mat - The mat value.
   * @param {any} aspect - The aspect value.
   */
  updateProjectionMatrix(mat, aspect) {
    const isOrthographic = this.__isOrthographicParam.getValue();
    const fov = this.__fovParam.getValue();
    const near = this.__nearParam.getValue();
    const far = this.__farParam.getValue();
    mat.setPerspectiveMatrix(fov, aspect, near, far);
  }
}

sgFactory.registerClass('Camera', Camera);

/** Class representing scene settings in a scene tree.
 * @extends BaseItem
 */
class SceneSettings extends BaseItem {
  /**
   * Create scene settings.
   * @param {string} name - The name of the scene settings item.
   */
  constructor(name) {
    super(name);
    this.addParameter(
      new ColorParameter('BackgroundColor', new Color('#808080'))
    );
    this.addParameter(new ImageParameter('EnvMap'));
    this.addParameter(new BooleanParameter('Display EnvMap', false));
    this.addParameter(new NumberParameter('EnvMapLOD', 0));
  }
}

/** Class representing a VLA asset.
 * @extends AssetItem
 */
class VLAAsset extends AssetItem {
  /**
   * Create a VLA asset.
   * @param {string} name - The name value.
   */
  constructor(name) {
    super(name);
    this.loaded.setToggled(false);

    this.lightmap = null;

    // A signal that is emitted once all the geoms are loaded.
    // Often the state machine will activate the first state
    // when this signal emits.
    this.geomsLoaded = new Signal(true);
    this.geomsLoaded.setToggled(false);
    this.loaded.setToggled(false);
    this.__geomLibrary.loaded.connect(()=>{
      this.geomsLoaded.emit();
    });

    this.__datafileParam = this.addParameter(
      new FilePathParameter('DataFilePath')
    );
    this.__datafileParam.valueChanged.connect(() => {
      const file = this.__datafileParam.getFileDesc();
      if (!file) return
      console.log(file);
      if (this.getName() == "") {
        const stem = this.__datafileParam.getStem();
        this.setName(stem);
      }

      this.geomsLoaded.setToggled(false);
      this.loadDataFile(
        () => {
          if (!this.loaded.isToggled()) this.loaded.emit();
        },
        () => {
          // if(!this.loaded.isToggled()){
          //   this.loaded.emit();
          // }
          // this.geomsLoaded.emit()
        }
      );
    });

    this.addParameter(new ColorParameter('LightmapTint', new Color(1, 1, 1, 1)));
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The readBinary method.
   * @param {object} reader - The reader value.
   * @param {object} context - The context value.
   * @return {any} - The return value.
   */
  readBinary(reader, context) {
    if (context.version != -1) { // Necessary for the smart lok
      const version = new Version();
      version.patch = context.version;
      context.versions = { 'zea-mesh': version, 'zea-engine': version };
      context.meshSdk = "FBX";
    } else {
      const v = reader.loadUInt8();
      reader.seek(0);
      // 10 == ascii code for newline. Note: previous non-semver only reached 7
      if (v != 10) {
        const version = new Version();
        version.patch = reader.loadUInt32();
        context.versions = { 'zea-mesh': version, 'zea-engine': version };
        context.meshSdk = "FBX";
      } else {
        // Now we split the mesh out from the engine version.
        const version = new Version(reader.loadStr());
        context.versions = { 'zea-mesh': version };
        context.meshSdk = "FBX";
      }
    }
    this.meshfileversion = context.versions['zea-mesh'];
    this.meshSdk = context.meshSdk;
    console.log("Loading CAD File version:", context.versions['zea-mesh'], " exported using SDK:", context.meshSdk);

    const numGeomsFiles = reader.loadUInt32();

    super.readBinary(reader, context);

    // Strangely, reading the latest HMD files gives us 12 bytes
    // at the end and the next 4 == 0. Not sure why.
    // setNumGeoms sets 0, but this doesn't bother the loading
    // so simply leaving for now.
    // if (reader.remainingByteLength != 4) {
    //   throw new Error(
    //     'File needs to be re-exported:' +
    //       this.getParameter('FilePath').getValue()
    //   )
    // }
    
    // Perpare the geom library for loading
    // This helps with progress bars, so we know how many geoms are coming in total.
    // Note: the geom library encodes in its binary buffer the number of geoms.
    // No need to set it here. (and the number is now incorrect for a reason I do not understand.)

    // if (context.version < 5) {
    if (context.versions['zea-engine'].lessThan([0, 0, 5])) {
      // Some data is no longer being read at the end of the buffer
      // so we skip to the end here.
      reader.seek(reader.byteLength - 4);
    }
    this.__geomLibrary.setNumGeoms(reader.loadUInt32());
    
    return numGeomsFiles
  }

  /**
   * The loadDataFile method.
   * @param {any} onDone - The onDone value.
   * @param {any} onGeomsDone - The onGeomsDone value.
   */
  loadDataFile(onDone, onGeomsDone) {
    const file = this.__datafileParam.getFileDesc();
    if (!file) {
      console.warn('VLAAsset data file not found.');
      return
    }

    const folder = this.__datafileParam.getFileFolderPath();
    const fileId = this.__datafileParam.getValue();
    const stem = this.__datafileParam.getStem();
    let numGeomsFiles = 0;

    const isVLFile = new RegExp('\\.(vla)$', 'i').test(file.name);
    const vlgeomFiles = [];

    const loadBinary = entries => {
      // Load the tree file. This file contains
      // the scene tree of the asset, and also
      // tells us how many geom files will need to be loaded.

      let version = -1;
      let treeReader;
      if (entries.tree2) {
        treeReader = new BinReader(
          entries.tree2.buffer,
          0,
          SystemDesc.isMobileDevice
        );
      } else {
        const entry = entries.tree
          ? entries.tree
          : entries[Object.keys(entries)[0]];
        treeReader = new BinReader(entry.buffer, 0, SystemDesc.isMobileDevice);
        version = 0;
      }

      numGeomsFiles = this.readBinary(treeReader, {
        assetItem: this,
        version,
      });

      if (!isVLFile) {
        // Check that the number of geom files we have
        // match the cound given by the file.
        if (numGeomsFiles != vlgeomFiles.length)
          console.error(
            'The number of GeomFiles does not match the count given by the VLA file.'
          );
      }

      onDone();

      if (numGeomsFiles == 0 && entries.geoms0) {
        resourceLoader.addWork(fileId + 'geoms', 1); // (load + parse + extra)
        this.__geomLibrary.readBinaryBuffer(fileId, entries.geoms0.buffer, {
          version,
        });
        onGeomsDone();
      } else {
        // add the work for the the geom files....
        resourceLoader.addWork(fileId + 'geoms', 4 * numGeomsFiles); // (load + parse + extra)

        // Note: Lets just load all the goem files in parallel.
        loadAllGeomFiles();
      }
    };

    const loadAllGeomFiles = () => {
      const promises = [];
      for (let geomFileID = 0; geomFileID < numGeomsFiles; geomFileID++) {
        // console.log('LoadingGeom File:', geomFileID)
        if (isVLFile) {
          const nextGeomFileName = folder + stem + geomFileID + '.vlageoms';
          const geomFile = resourceLoader.resolveFilepath(nextGeomFileName);
          if (geomFile) promises.push(loadGeomsfile(geomFileID, geomFile.url));
          else {
            throw new Error('VLA Geoms file not found:' + nextGeomFileName)
          }
        } else {
          promises.push(loadGeomsfile(geomFileID, vlgeomFiles[geomFileID].url));
        }
      }
      Promise.all(promises).then(() => {
        if (onGeomsDone) onGeomsDone();
      });
    };

    const loadGeomsfile = (index, geomFileUrl) => {
      return new Promise(resolve => {
        resourceLoader.loadUrl(
          fileId + index,
          geomFileUrl,
          entries => {
            const geomsData = entries[Object.keys(entries)[0]];
            this.__geomLibrary.readBinaryBuffer(fileId, geomsData.buffer);
            resolve();
          },
          false
        ); // <----
        // Note: Don't add load work as we already pre-added it at the begining
        // and after the Tree file was loaded...
      })
    };

    if (isVLFile) {
      resourceLoader.loadResource(fileId, loadBinary);
    } else if (file.metadata.ConvertFile) {
      let vlaFile;
      file.metadata.ConvertFile.map(metadataFile => {
        if (metadataFile.filename.endsWith('.vla')) vlaFile = metadataFile;
        else if (metadataFile.filename.endsWith('.vlageoms'))
          vlgeomFiles.push(metadataFile);
      });
      if (vlaFile) {
        resourceLoader.loadUrl(fileId, vlaFile.url, loadBinary);
      } else {
        console.warn('ConvertFile metadata contains no vla file.');
      }
    }

    // To ensure that the resource loader knows when
    // parsing is done, we listen to the GeomLibrary streamFileLoaded
    // signal. This is fired every time a file in the stream is finshed parsing.
    this.__geomLibrary.streamFileParsed.connect(fraction => {
      // A chunk of geoms are now parsed, so update the resource loader.
      resourceLoader.addWorkDone(fileId + 'geoms', fraction);
    });
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {any} onDone - The onDone value.
   */
  fromJSON(j, context, onDone) {
    if (!context) context = {};
    context.assetItem = this;

    const loadAssetJSON = () => {
      super.fromJSON(j, context, onDone);
      if (onDone) onDone();
    };

    if (j.params && j.params.DataFilePath) {
      // Save the callback function for later.
      this.__datafileLoaded = loadAssetJSON;
      const filePathJSON = j.params.DataFilePath;
      delete j.params.DataFilePath;
      this.__datafileParam.fromJSON(filePathJSON, context);
    } else {
      loadAssetJSON();
    }
  }
}

sgFactory.registerClass('VLAAsset', VLAAsset);

const defaultGridColor = new Color('#DCDCDC');

/** Class representing a scene in a scene tree. */
class Scene {
  /**
   * Create a scene.
   * @param {any} resources - The resources value.
   */
  constructor(resources) {
    if (resources) {
      resourceLoader.setResources(resources);
    }
    this.settings = new SceneSettings('Scene Settings');
    this.root = new TreeItem('root');
    this.root.addChild(this.settings);

    // Common resources are used by systems such at the renderer and VR controllers.
    // Any asset that will probably be used my multiple differeint independent objects
    // should be loaded here. (For now, it is being used to load VR Controller assets.)
    this.__commonResources = {};
  }

  /**
   * The getRoot method.
   * @return {any} - The return value.
   */
  getSettings() {
    return this.settings
  }

  /**
   * The getRoot method.
   * @return {any} - The return value.
   */
  getRoot() {
    return this.root
  }

  /**
   * The getResourceLoader method.
   * @return {any} - The return value.
   */
  getResourceLoader() {
    return resourceLoader
  }

  /**
   * The setEnvMap method.
   * @param {any} envMap - The envMap value.
   */
  setEnvMap(envMap) {
    console.warn(
      'Deprecated Function. Please access the Scene Settings object.'
    );
    this.settings.getParameter('EnvMap').setValue(envMap);
  }

  /**
   * The addAsset method.
   * @param {any} asset - The asset value.
   */
  addAsset(asset) {
    console.warn('Deprecated Function. Please access the Scene Root object.');
    this.root.addChild(asset, false);
  }
  /**
   * Set up the scene grid.
   * @param {number} gridSize - The size of the grid.
   * @param {number} resolution - The resolution of the grid.
   * @param {Color} gridColor - The color of the grid.
   * @return {any} - The return value.
   */
  setupGrid(gridSize = 5, resolution = 50, gridColor = defaultGridColor) {
    const gridTreeItem = new TreeItem('Grid');
    const gridMaterial = new Material('gridMaterial', 'LinesShader');
    gridMaterial.getParameter('BaseColor').setValue(gridColor);
    const grid = new Grid(gridSize, gridSize, resolution, resolution, true);
    gridTreeItem.addChild(new GeomItem('GridItem', grid, gridMaterial), false);
    const axisLine = new Lines();
    axisLine.setNumVertices(2);
    axisLine.setNumSegments(1);
    axisLine.setSegment(0, 0, 1);
    axisLine.getVertex(0).set(gridSize * -0.5, 0.0, 0.0);
    axisLine.getVertex(1).set(gridSize * 0.5, 0.0, 0.0);
    const gridXAxisMaterial = new Material('gridXAxisMaterial', 'LinesShader');
    gridXAxisMaterial
      .getParameter('BaseColor')
      .setValue(new Color(gridColor.luminance(), 0, 0));
    gridTreeItem.addChild(
      new GeomItem('xAxisLine', axisLine, gridXAxisMaterial),
      false
    );
    const gridZAxisMaterial = new Material('gridZAxisMaterial', 'LinesShader');
    gridZAxisMaterial
      .getParameter('BaseColor')
      .setValue(new Color(0, gridColor.luminance(), 0));
    const geomOffset = new Xfo();
    geomOffset.ori.setFromAxisAndAngle(new Vec3$1(0, 0, 1), Math.PI * 0.5);
    const zAxisLineItem = new GeomItem('yAxisLine', axisLine, gridZAxisMaterial);
    zAxisLineItem.setGeomOffsetXfo(geomOffset);
    gridTreeItem.addChild(zAxisLineItem, false);
    gridTreeItem.setSelectable(false, true);
    gridTreeItem.setFlag(ItemFlags.IGNORE_BBOX);

    // Avoid persisting the grid and hide in the tree view.
    gridTreeItem.clearFlag(ItemFlags.USER_EDITED);
    gridTreeItem.setFlag(ItemFlags.INVISIBLE);
    this.root.addChild(gridTreeItem, false);

    return gridTreeItem
  }
  
  /**
   * The loadCommonAssetResource method.
   * @param {any} resourceId - The resourceId value.
   * @return {any} - The return value.
   */
  loadCommonAssetResource(resourceId) {
    if (resourceId in this.__commonResources) {
      return this.__commonResources[resourceId]
    }
    const asset = new VLAAsset();
    asset.getParameter('DataFilePath').setValue(resourceId);
    this.__commonResources[resourceId] = asset;
    return asset
  }


  // /////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context = {}, flags = 0) {
    context.makeRelative = path => path;
    const json = {
      root: this.root.toJSON(context, flags),
    };
    return json
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} json - The json object this item must decode.
   * @param {object} context - The context value.
   */
  fromJSON(json, context = {}) {
    const plcbs = []; // Post load callbacks.
    context.resolvePath = (path, cb) => {
      // Note: Why not return a Promise here?
      // Promise evaluation is always async, so
      // all promisses will be resolved after the current call stack
      // has terminated. In our case, we want all paths
      // to be resolved before the end of the function, which
      // we can handle easily with callback functions.
      if (!path) throw new Error('Path not spcecified')
      const item = this.root.resolvePath(path);
      if (item) {
        cb(item);
      } else {
        // Some paths resolve to items generated during load,
        // so push a callback to re-try after the load is complete.
        plcbs.push(() => {
          const param = this.resolvePath(path);
          if (param) cb(param);
          else {
            console.warn('Path unable to be resolved:' + path);
          }
        });
      }
    };
    context.addPLCB = plcb => plcbs.push(plcb);
    context.settings = this.settings;

    if (json.root) {
      this.root.fromJSON(json.root, context);
    }

    // Invoke all the post-load callbacks to resolve any
    // remaning references.
    for (const cb of plcbs) cb();
  }
}

// AssetItem.registerDataLoader('.obj', ObjDataLoader);

/** Class representing an object asset.
 * @extends AssetItem
 */
class ObjAsset extends AssetItem {
  /**
   * Create an obj asset.
   * @param {string} name - The name of the object asset.
   */
  constructor(name) {
    super(name);

    // A signal that is emitted once all the geoms are loaded.
    // Often the state machine will activate the first state
    // when this signal emits.
    this.geomsLoaded = new Signal(true);
    this.geomsLoaded.setToggled(false);
    this.loaded.setToggled(false);

    this.addParameter(new BooleanParameter('splitObjects', false));
    this.addParameter(new BooleanParameter('splitGroupsIntoObjects', false));
    this.addParameter(new BooleanParameter('loadMtlFile', true));
    this.addParameter(new NumberParameter('unitsConversion', 1.0));
    this.addParameter(new StringParameter('defaultShader', ''));

    this.objfileParam = this.addParameter(new FilePathParameter('ObjFilePath'));
    this.objfileParam.valueChanged.connect(() => {
      this.loaded.untoggle();
      this.__loadObj(
        () => {
          this.loaded.emit();
        },
        () => {
          this.geomsLoaded.emit();
        }
      );
    });
    this.geomLibrary = new GeomLibrary();
    this.materials = new MaterialLibrary();
  }

  /**
   * The getGeometryLibrary method.
   * @return {any} - The return value.
   */
  getGeometryLibrary() {
    return this.geomLibrary
  }

  /**
   * The getMaterialLibrary method.
   * @return {any} - The return value.
   */
  getMaterialLibrary() {
    return this.materials
  }

  /**
   * The __loadObj method.
   * @param {any} onDone - The onDone value.
   * @param {any} onGeomsLoaded - The onGeomsLoaded value.
   * @private
   */
  __loadObj(onDone, onGeomsLoaded) {
    const stem = this.objfileParam.getStem();

    const parseMtlData = mtlFileData => {
      const lines = mtlFileData.split('\n');
      const WHITESPACE_RE = /\s+/;
      let material;

      const parseColor = function(elements) {
        if (elements.length == 3)
          return new Color(
            parseFloat(elements[0]),
            parseFloat(elements[1]),
            parseFloat(elements[2])
          )
        else
          throw new Error(
            'Unable to parse a color from the following parts:' +
              elements.join('_')
          )
      };

      const parseMap = elements => {
        const fileFolder = this.objfileParam.getFileFolder();
        return new FileImage(elements[0], fileFolder + elements[0])
      };

      for (let i = 0; i < lines.length; i++) {
        let line = lines[i].trim();
        if (line.startsWith('#')) continue
        if (line.indexOf('#') != -1)
          line = line.substring(0, line.indexOf('#')).trim();
        const elements = line.split(WHITESPACE_RE);
        const key = elements.shift();
        const value = elements.join(' ');
        switch (key) {
          case 'newmtl':
            material = new Material(value);
            material.setShaderName('StandardSurfaceShader');
            this.materials.addMaterial(material);
            break
          case 'Kd':
            material.getParameter('BaseColor').setValue(parseColor(elements));
            break
          case 'map_Kd':
            material.getParameter('BaseColor').setValue(parseMap(elements));
            break
          case 'Ks':
            const specular =
              (parseFloat(elements[0]) +
                parseFloat(elements[1]) +
                parseFloat(elements[2])) /
              3.0;
            material.roughness = 1.0 - specular;
            material.getParameter('Roughness').setValue(1.0 - specular);
            material.getParameter('Reflectance').setValue(specular);
            break
          case 'map_Ks':
            material
              .getParameter('Roughness')
              .setValue(parseMap(elements /* flags=TEXTURE_INVERT */));
            material.getParameter('Reflectance').setValue(0.2);
            break
          case 'd':
            const d = parseFloat(value);
            if (d < 1.0) {
              material.setShaderName('TransparentSurfaceShader');
              material.getParameter('Opacity').setValue(d);
            }
            break
          case 'map_d':
            material.getParameter('alpha').setValue(parseFloat(elements));
            break
          case 'map_bump':
            material
              .getParameter('normal')
              .setValue(parseMap(elements /* flags=BUMP_TO_NORMAL */));
            break
          // console.warn("Unhandled material parameter: '" + key +"' in:" + filePath);
        }
      }
    };

    const async = new Async();
    async.incAsyncCount();
    async.ready.connect(() => {
      buildChildItems();
    });

    const loadMtlFile = mtlFile => {
      return new Promise(resolve => {
        loadTextfile(mtlFile.url, fileData => {
          resourceLoader.addWorkDone(stem, 1);
          parseMtlData(fileData);
          async.decAsyncCount();
          resourceLoader.addWorkDone(stem, 1);
          resolve();
        });
      })
    };

    const vertices = new Array();
    const normals = new Array();
    const texCoords = new Array();

    const geomDatas = {};

    const parseObjData = async fileData => {
      // performance.mark("parseObjData");

      // array of lines separated by the newline
      const lines = fileData.split('\n');
      const WHITESPACE_RE = /\s+/;

      let currGeom = undefined;
      let currMtl = undefined;
      const newGeom = name => {
        let suffix = 0;
        while (name in geomDatas) {
          suffix++;
          name = name + String(suffix);
        }
        currGeom = {
          verticesRemapping: {},
          texCoordsRemapping: {},
          normalsRemapping: {},
          vertexIndices: [],
          texCoordIndices: [],
          normalIndices: [],
          numVertices: 0,
          numTexCoords: 0,
          numNormals: 0,
          numTris: 0,
          numQuads: 0,
          material: currMtl,
        };
        geomDatas[name] = currGeom;
      };
      newGeom(stem);

      const splitGroupsIntoObjects = this.getParameter(
        'splitGroupsIntoObjects'
      ).getValue();

      const stop = false;
      // let numPolys = 0;
      for (let i = 0; i < lines.length && !stop; i++) {
        let line = lines[i].trim();
        if (line.startsWith('#')) continue
        if (line.indexOf('#') != -1)
          line = line.substring(0, line.indexOf('#')).trim();
        const elements = line.split(WHITESPACE_RE);
        const key = elements.shift();
        const value = elements.join(' ');
        switch (key) {
          case '':
          case 's':
            // ignore shading groups
            continue
          case 'mtllib':
            if (!this.getParameter('loadMtlFile').getValue()) continue
            // Load and parse the mat lib.
            async.incAsyncCount();
            resourceLoader.addWork(stem, 2);
            const fileFolder = this.objfileParam.getFileFolderPath();
            const mtlFile = resourceLoader.resolveFilepath(fileFolder + value);
            if (mtlFile) {
              await loadMtlFile(mtlFile);
            }
            break
          case 'o':
            newGeom(value);
            break
          case 'usemtl':
            currMtl = value;
            newGeom(value + Object.keys(geomDatas).length);
            break
          case 'g':
            if (splitGroupsIntoObjects) newGeom(elements.join('_'));
            break
          case 'v':
            vertices.push(elements.map(i => parseFloat(i)));
            break
          case 'vt':
            texCoords.push(elements.map(i => parseFloat(i)));
            break
          case 'vn':
            normals.push(elements.map(i => parseFloat(i)));
            break
          case 'f': {
            const v_poly = [];
            const vt_poly = [];
            const vn_poly = [];
            for (let j = 0, eleLen = elements.length; j < eleLen; j++) {
              // v/vt/vn
              const indices = elements[j].split('/').map(i => parseInt(i) - 1);
              const v = indices[0];

              // v_poly.push(v);
              let v_index = currGeom.verticesRemapping[v];
              if (v_index == undefined) {
                v_index = currGeom.numVertices;
                currGeom.verticesRemapping[v] = v_index;
                currGeom.numVertices++;
              }
              v_poly.push(v_index);

              if (indices.length > 1 && !isNaN(indices[1])) {
                const vt = indices[1];
                vt_poly.push(vt);
              }
              if (indices.length > 2 && !isNaN(indices[2])) {
                const vn = indices[2];
                vn_poly.push(vn);
              }
            }
            currGeom.vertexIndices.push(v_poly);
            if (vn_poly.length > 0) currGeom.normalIndices.push(vn_poly);
            if (vt_poly.length > 0) currGeom.texCoordIndices.push(vt_poly);

            if (v_poly.length == 3) {
              currGeom.numTris++;
            } else {
              currGeom.numQuads++;
            }
            // numPolys++;
            // if(numPolys == 16000)
            //     stop = true;
            break
          }
          default: {
            console.warn('Unhandled line:' + line);
          }
        }
      }

      async.decAsyncCount();
    };

    const buildChildItems = () => {
      // performance.mark("parseObjDataDone");
      // performance.mark("buildObjTree");
      for (const geomName in geomDatas) {
        if (geomDatas[geomName].numVertices == 0) continue
        buildChildItem(geomName, geomDatas[geomName]);
      }

      // Done.
      onDone();
      onGeomsLoaded();
    };

    const buildChildItem = (geomName, geomData) => {
      const numVertices = geomData.numVertices;
      const mesh = new Mesh(geomName);
      mesh.setFaceCounts([geomData.numTris, geomData.numQuads]);
      mesh.setNumVertices(numVertices);
      const positionsAttr = mesh.getVertexAttribute('positions');
      const unitsConversion = this.getParameter('unitsConversion').getValue();

      for (const vsrc in geomData.verticesRemapping) {
        const vtgt = geomData.verticesRemapping[vsrc];
        positionsAttr
          .getValueRef(vtgt)
          .set(
            vertices[vsrc][0] * unitsConversion,
            vertices[vsrc][1] * unitsConversion,
            vertices[vsrc][2] * unitsConversion
          );
      }

      let normalsAttr;
      let texCoordsAttr;
      if (geomData.normalIndices.length > 0)
        normalsAttr = mesh.addVertexAttribute('normals', Vec3$1);
      if (geomData.texCoordIndices.length > 0)
        texCoordsAttr = mesh.addVertexAttribute('texCoords', Vec2);

      for (let i = 0; i < geomData.vertexIndices.length; i++) {
        const v_poly = geomData.vertexIndices[i];
        mesh.setFaceVertexIndices(i, ...v_poly);

        // Set the texCoords and normals...
        if (normalsAttr) {
          const vn_poly = geomData.normalIndices[i];
          for (let j = 0; j < vn_poly.length; j++) {
            const value = new Vec3$1(
              normals[vn_poly[j]][0],
              normals[vn_poly[j]][1],
              normals[vn_poly[j]][2]
            );
            normalsAttr.setFaceVertexValue(i, j, value);
          }
        }
        if (
          texCoordsAttr &&
          geomData.texCoordIndices.length == geomData.vertexIndices.length
        ) {
          const vt_poly = geomData.texCoordIndices[i];
          for (let j = 0; j < vt_poly.length; j++) {
            const value = new Vec2(
              texCoords[vt_poly[j]][0],
              texCoords[vt_poly[j]][1]
            );
            texCoordsAttr.setFaceVertexValue(i, j, value);
          }
        }
      }

      const geomItem = new GeomItem(geomName, mesh);
      geomItem.selectable = true;

      // Move the transform of the geom item to the center of the geom.
      // This is so that transparent objects can render correctly, and the
      // transform gizmo becomes centered on each geom(for testing)
      const delta = mesh.boundingBox.center();
      mesh.moveVertices(delta.negate());
      geomItem.setLocalXfo(new Xfo(delta));

      if (
        geomData.material != undefined &&
        this.materials.hasMaterial(geomData.material)
      ) {
        geomItem.setMaterial(this.materials.getMaterial(geomData.material));
      } else {
        const defaultShader = this.getParameter('defaultShader').getValue();
        const material = new Material(geomName + 'mat');
        material.setShaderName(
          defaultShader != '' ? defaultShader : 'StandardSurfaceShader'
        );
        const baseColorParam = material.getParameter('BaseColor');
        if (baseColorParam) baseColorParam.setValue(Color.random(0.5));
        else {
          const colorParam = material.getParameter('Color');
          if (colorParam) colorParam.setValue(Color.random(0.5));
        }
        const roughnessParam = material.getParameter('Roughness');
        if (roughnessParam) roughnessParam.setValue(0.6);
        const reflectanceParam = material.getParameter('Reflectance');
        if (reflectanceParam) reflectanceParam.setValue(0.2);
        this.materials.addMaterial(material);
        geomItem.setMaterial(material);
      }

      this.addChild(geomItem, false);
    };

    const loadObjData = () => {
      const file = this.objfileParam.getFileDesc();
      const stem = this.objfileParam.getStem();
      resourceLoader.addWork(stem, 2);
      loadTextfile(file.url, fileData => {
        resourceLoader.addWorkDone(stem, 1);
        parseObjData(fileData);
        resourceLoader.addWorkDone(stem, 1);
      });
    };

    loadObjData();
  }
}

/** Class representing an operator.
 * @extends BaseItem
 */
class Operator extends BaseItem {
  /**
   * Create an operator.
   * @param {string} name - The name value.
   */
  constructor(name) {
    super(name);

    // Items which can be constructed by a user (not loaded in binary data).
    // Should always have this flag set.
    this.setFlag(ItemFlags.USER_EDITED);
    
    this.__outputs = [];
    this.__evalOutput = this.__evalOutput.bind(this);

    this.postEval = new Signal();
  }

  /**
   * This method sets the state of the operator to dirty which propagates
   * to the outputs of this operator, and which wmay then propagate to other
   * operators. When the scene is cleaned, which usually is caused by rendering
   * then the chain of operators are cleaned by triggering evaluation.
   * @param {any} param - The param param.
   * @param {any} mode - The mode param.
   * @private
   */
  setDirty() {
    // for (const o of this.__outputs) o.setDirty(this.__evalOutput)
    for (const o of this.__outputs) o.setDirtyFromOp();
  }

  /**
   * This method can be overrridden in derived classes
   * to perform general updates (see GLPass or BaseItem).
   * @param {any} param - The param param.
   * @param {any} mode - The mode param.
   * @private
   */
  __parameterValueChanged(param, mode) {
    this.setDirty();
  }

  /**
   * The addOutput method.
   * @param {any} output - The output value.
   * @return {any} - The return value.
   */
  addOutput(output) {
    this.__outputs.push(output);
    output.paramSet.connect(param => {
      // output.setDirty(this.__evalOutput)
      param.bindOperator(this);
    });
    return output
  }

  /**
   * The removeOutput method.
   * @param {any} output - The output value.
   */
  removeOutput(output) {
    if (output.getParam()) output.getParam().unbindOperator(this);
    this.__outputs.splice(this.__outputs.indexOf(output), 1);
  }

  /**
   * Getter for the number of outputs in this operator.
   * @return {number} - Returns the number of outputs.
   */
  getNumOutputs() {
    return this.__outputs.length
  }

  /**
   * The getOutputByIndex method.
   * @param {number} index - The index value.
   * @return {object} - The return value.
   */
  getOutputByIndex(index) {
    return this.__outputs[index]
  }

  /**
   * The getOutput method.
   * @param {string} name - The name value.
   * @return {any} - The return value.
   */
  getOutput(name) {
    for (const o of this.__outputs) {
      if (o.getName() == name) return o
    }
  }

  /**
   * The __evalOutput method.
   * @param {any} cleanedParam - The cleanedParam value.
   * @private
   */
  __evalOutput(cleanedParam /* value, getter */) {
    for (const o of this.__outputs) {
      o.removeCleanerFn(this.__evalOutput);
    }
    this.evaluate();

    // Why does the cleaner need to return a value?
    // Usually operators are connected to multiple outputs.
    // return getter(1);
  }

  /**
   * The __opInputChanged method.
   * @private
   */
  __opInputChanged() {
    // For each output, install a function to evalate the operator
    // Note: when the operator evaluates, it will remove the cleaners
    // on all outputs. This means that after the first operator to
    // cause an evaluation, all outputs are considered clean.
    this.setDirty();
  }

  /**
   * The evaluate method.
   */
  evaluate() {
    throw new Error('Not yet implemented')
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    const j = super.toJSON(context, flags);
    j.type = sgFactory.getClassName(this);

    const oj = [];
    for (const o of this.__outputs) {
      oj.push(o.toJSON(context, flags));
    }

    j.outputs = oj;
    return j
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    super.fromJSON(j, context, flags);

    if (j.outputs) {
      for (let i = 0; i < this.__outputs.length; i++) {
        const output = this.__outputs[i];
        output.fromJSON(j.outputs[i], context);
      }

      // Force an evaluation of the operator as soon as loading is done.
      context.addPLCB(() => {
        this.__opInputChanged();
      });
    }
  }

  /**
   * The detach method.
   */
  detach() {
    this.__outputs.forEach(output => output.detach());
  }

  /**
   * The reattach method.
   */
  reattach() {
    this.__outputs.forEach(output => output.reattach());
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    super.destroy();
    this.__outputs = [];
  }
}

/** Class representing an operator output. */
class OperatorOutput {
  /**
   * Create an operator output.
   * @param {string} name - The name value.
   * @param {any} filterFn - The filterFn value.
   */
  constructor(name, filterFn) {
    this.__name = name;
    this.__filterFn = filterFn;
    this._param = undefined;
    this.detached = false;

    this.paramSet = new Signal();
  }

  /**
   * The getName method.
   * @return {any} - The return value.
   */
  getName() {
    return this.__name
  }

  /**
   * The getFilterFn method.
   * @return {any} - The return value.
   */
  getFilterFn() {
    return this.__filterFn
  }

  /**
   * The isConnected method.
   * @return {boolean} - The return value.
   */
  isConnected() {
    return this._param != undefined
  }

  /**
   * The getParam method.
   * @return {any} - The return value.
   */
  getParam() {
    return this._param
  }

  /**
   * The setParam method.
   * @param {any} param - The param value.
   */
  setParam(param) {
    this._param = param;
    this.paramSet.emit();
  }

  /**
   * The getValue method.
   * @param {boolean} mode - The mode param.
   * @return {any} - The return value.
   */
  getValue(mode = ValueGetMode.OPERATOR_GETVALUE) {
    if (this._param) return this._param.getValue(mode)
  }

  /**
   * The setValue method.
   * Note: Sometimes outputs are used in places like statemachines,
   * where we would want the change to cause an event.
   * @param {any} value - The value param.
   * @param {boolean} mode - The mode value.
   */
  setValue(value, mode = ValueSetMode.OPERATOR_SETVALUE) {
    if (this._param) {
      this._param.setValue(value, mode);
    }
  }

  /**
   * The setClean method.
   * @param {any} value - The value param.
   */
  setClean(value) {
    if (this._param) {
      this._param.setClean(value);
    }
  }

  /**
   * The setDirty method.
   * @param {any} fn - The fn value.
   */
  setDirty(fn) {
    if (this._param) {
      this._param.setDirty(fn);
    }
  }
  setDirtyFromOp() {
    if (this._param) {
      this._param.setDirtyFromOp();
    }
  }

  /**
   * The removeCleanerFn method.
   * @param {any} fn - The fn value.
   */
  removeCleanerFn(fn) {
    if (this._param) this._param.removeCleanerFn(fn);
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    const paramPath = this._param ? this._param.getPath() : '';
    return {
      type: sgFactory.getClassName(this),
      paramPath:
        context && context.makeRelative
          ? context.makeRelative(paramPath)
          : paramPath,
    }
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    if (j.paramPath) {
      // Note: the tree should have fully loaded by the time we are loading operators
      // even new items and groups should have been created. Operators and state machines
      // are loaded last.
      context.resolvePath(
        j.paramPath,
        param => {
          this.setParam(param);
        },
        reason => {
          console.warn(
            "Operator Output: '" +
              this.getName() +
              "'. Unable to load item:" +
              j.paramPath
          );
        }
      );
    }
  }

  /**
   * The detach method.
   */
  detach() {
    // This function is called when we want to suspend an operator
    // from functioning because it is deleted and on the undo stack.
    // Once operators have persistent connections,
    // we will simply uninstall the output from the parameter.
    this.detached = true;
  }

  /**
   * The reattach method.
   */
  reattach() {
    this.detached = false;
  }
}
sgFactory.registerClass('OperatorOutput', OperatorOutput);

/** Class representing an Xfo operator output.
 * @extends OperatorOutput
 */
class XfoOperatorOutput extends OperatorOutput {
  /**
   * Create an Xfo operator output.
   * @param {string} name - The name value.
   */
  constructor(name) {
    super(name, p => p.getDataType() == 'Xfo');
  }

  /**
   * The getInitialValue method.
   * @return {any} - The return value.
   */
  getInitialValue() {
    return this._initialParamValue
  }

  /**
   * The setParam method.
   * @param {any} param - The param value.
   */
  setParam(param) {
    // Note: sometimes the param value is changed after binding.
    // e.g. The group Xfo is updated after the operator
    // that binds to it is loaded. It could also change if a user
    // Is adding items to the group using the UI. Therefore, the
    // initial Xfo needs to be updated.
    const init = () => {
      this._initialParamValue = param.getValue();
      if (this._initialParamValue.clone)
        this._initialParamValue = this._initialParamValue.clone();

      if (this._initialParamValue == undefined) throw new Error('WTF?')
    };
    init();
    // param.valueChanged.connect(mode => {
    //   if (
    //     mode == ValueSetMode.USER_SETVALUE ||
    //     mode == ValueSetMode.REMOTEUSER_SETVALUE ||
    //     mode == ValueSetMode.DATA_LOAD
    //   ) {
    //     init()
    //   }
    // })

    this._param = param;
    this.paramSet.emit(param);
  }
}
sgFactory.registerClass('XfoOperatorOutput', XfoOperatorOutput);

/** Class representing an explode part parameter.
 * @extends StructParameter
 * @private
 */
class ExplodePartParameter extends StructParameter {
  /**
   * Create an explode part parameter.
   * @param {string} name - The name value.
   */
  constructor(name) {
    super(name);

    this.__stageParam = this._addMember(new NumberParameter('Stage', 0));
    this.__axisParam = this._addMember(
      new Vec3Parameter('Axis', new Vec3$1(1, 0, 0))
    );

    // The Movement param enables fine level timing to be set per part.
    this.__movementParam = this._addMember(
      new Vec2Parameter('MovementTiming', new Vec2(0, 1), [
        new Vec2(0, 0),
        new Vec2(1, 1),
      ])
    );
    this.__multiplierParam = this._addMember(
      new NumberParameter('Multiplier', 1.0)
    );
    this.__output = new XfoOperatorOutput('Part');
  }

  /**
   * The getStage method.
   * @param {number} mode - The mode value.
   * @return {any} - The return value.
   */
  getStage(mode = ValueSetMode.USER_GETVALUE) {
    return this.__stageParam.getValue(mode)
  }

  /**
   * The setStage method.
   * @param {any} stage - The stage value.
   * @param {number} mode - The mode value.
   */
  setStage(stage, mode = ValueSetMode.USER_SETVALUE) {
    this.__stageParam.setValue(stage, mode);
  }

  /**
   * The getOutput method.
   * @return {any} - The return value.
   */
  getOutput() {
    return this.__output
  }

  /**
   * The evaluate method.
   * @param {any} explode - The explode value.
   * @param {any} explodeDist - The distance that the parts explode to.
   * @param {any} offset - The offset value.
   * @param {any} stages - The stages value.
   * @param {any} cascade - In "cascade" mode, the parts move in a cascade.
   * @param {any} centered - The centered value.
   * @param {Xfo} parentXfo - The parentXfo value.
   * @param {any} parentDelta - The parentDelta value.
   */
  evaluate(
    explode,
    explodeDist,
    offset,
    stages,
    cascade,
    centered,
    parentXfo,
    parentDelta
  ) {
    // Note: during interactive setup of the operator we
    // can have evaluations before anhthing is connected.
    if (!this.__output.isConnected()) return

    const stage = this.__stageParam.getValue();
    const movement = this.__movementParam.getValue();
    let dist;
    if (cascade) {
      // In 'cascade' mode, the parts move in a cascade,
      // starting with stage 0. then 1 ...
      let t = stage / stages;
      if (centered) t -= 0.5;
      dist =
        explodeDist *
        Math.linStep(movement.x, movement.y, Math.max(0, explode - t));
    } else {
      // Else all the parts are spread out across the explode distance.
      let t = 1.0 - stage / stages;
      if (centered) t -= 0.5;
      dist = explodeDist * Math.linStep(movement.x, movement.y, explode) * t;
    }
    dist += offset;

    let explodeDir = this.__axisParam.getValue();
    const multiplier = this.__multiplierParam.getValue();
    const initialXfo = this.__output.getInitialValue();
    let xfo;
    if (parentXfo) {
      xfo = parentDelta.multiply(initialXfo);
      explodeDir = parentXfo.ori.rotateVec3(explodeDir);
      xfo.tr.addInPlace(explodeDir.scale(dist * multiplier));
    } else {
      // Get the current value without triggering an eval
      xfo = this.__output.getValue();
      xfo.tr = initialXfo.tr.add(explodeDir.scale(dist * multiplier));
    }

    this.__output.setClean(xfo);
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    const j = super.toJSON(context, flags);
    if (j) {
      j.output = this.__output.toJSON(context, flags);
    }
    return j
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    super.fromJSON(j, context, flags);
    if (j.output) {
      this.__output.fromJSON(j.output, context);
    }
  }
}

/** Class representing an explode parts operator.
 * @extends ParameterOwner
 */
class ExplodePartsOperator extends Operator {
  /**
   * Create an explode parts operator.
   * @param {string} name - The name value.
   */
  constructor(name) {
    super(name);

    this.__stagesParam = this.addParameter(new NumberParameter('Stages', 0));
    this._explodeParam = this.addParameter(
      new NumberParameter('Explode', 0.0, [0, 1])
    );
    this._distParam = this.addParameter(new NumberParameter('Dist', 1.0));
    this._offsetParam = this.addParameter(new NumberParameter('Offset', 0));
    this._cascadeParam = this.addParameter(
      new BooleanParameter('Cascade', false)
    );
    this._centeredParam = this.addParameter(
      new BooleanParameter('Centered', false)
    );
    this.__parentItemParam = this.addParameter(
      new TreeItemParameter('RelativeTo')
    );
    this.__parentItemParam.valueChanged.connect(() => {
      // compute the local xfos
      const parentItem = this.__parentItemParam.getValue();
      if (parentItem)
        this.__invParentSpace = parentItem.getGlobalXfo().inverse();
      else this.__invParentSpace = undefined;
    });
    this.__parentItemParam.treeItemGlobalXfoChanged.connect(() => {
      this.setDirty();
    });

    this.__itemsParam = this.addParameter(
      new ListParameter('Parts', ExplodePartParameter)
    );
    this.__itemsParam.elementAdded.connect((value, index) => {
      if (index > 0) {
        const prevStage = this.__itemsParam.getElement(index - 1).getStage();
        value.setStage(prevStage + 1);
        this.__stagesParam.setClean(prevStage + 2);
      } else {
        this.__stagesParam.setClean(1);
      }
      this.addOutput(value.getOutput());
      this.setDirty();
    });
    this.__itemsParam.elementRemoved.connect((value, index) => {
      this.removeOutput(value.getOutput());
    });

    this.__localXfos = [];
    this.__parts = [];
    this.__stages = 2;
  }

  /**
   * The evaluate method.
   */
  evaluate() {
    const stages = this.__stagesParam.getValue();
    const explode = this._explodeParam.getValue();
    // const explodeDir = this.getParameter('Axis').getValue();
    const explodeDist = this._distParam.getValue();
    const offset = this._offsetParam.getValue();
    const cascade = this._cascadeParam.getValue();
    const centered = this._centeredParam.getValue();
    const parentItem = this.__parentItemParam.getValue();
    let parentXfo;
    let parentDelta;
    if (parentItem) {
      parentXfo = parentItem.getGlobalXfo();
      parentDelta = this.__invParentSpace.multiply(parentXfo);
    }

    const items = this.__itemsParam.getValue();
    for (let i = 0; i < items.length; i++) {
      const part = items[i];
      part.evaluate(
        explode,
        explodeDist,
        offset,
        stages,
        cascade,
        centered,
        parentXfo,
        parentDelta
      );
    }
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    return super.toJSON(context, flags)
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    super.fromJSON(j, context, flags);
  }

  // ////////////////////////////////////////
  // Destroy

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    clearTimeout(this.__timeoutId);
    super.destroy();
  }
}

sgFactory.registerClass('ExplodePartsOperator', ExplodePartsOperator);

/** Class representing a gear parameter.
 * @extends StructParameter
 */
class GearParameter extends StructParameter {
  /**
   * Create a gear parameter.
   * @param {string} name - The name value.
   */
  constructor(name) {
    super(name);

    this.__ratioParam = this._addMember(new NumberParameter('Ratio', 1.0));
    this.__offsetParam = this._addMember(new NumberParameter('Offset', 0.0));
    this.__axisParam = this._addMember(
      new Vec3Parameter('Axis', new Vec3$1(1, 0, 0))
    );
    this.__output = new XfoOperatorOutput('Gear');
  }

  /**
   * The getOutput method.
   * @return {any} - The return value.
   */
  getOutput() {
    return this.__output
  }

  /**
   * Getter for the gear ratio.
   * @return {number} - Returns the ratio.
   */
  getRatio() {
    return this.__ratioParam.getValue()
  }

  /**
   * getter for the gear offset.
   * @return {number} - Returns the offset.
   */
  getOffset() {
    return this.__offsetParam.getValue()
  }

  /**
   * The getAxis method.
   * @return {any} - The return value.
   */
  getAxis() {
    return this.__axisParam.getValue()
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    const j = super.toJSON(context, flags);
    if (j) {
      j.output = this.__output.toJSON(context, flags);
    }
    return j
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    super.fromJSON(j, context, flags);
    if (j.output) {
      this.__output.fromJSON(j.output, context);
    }
  }
}

/** Class representing a gears operator.
 * @extends Operator
 */
class GearsOperator extends Operator {
  /**
   * Create a gears operator.
   * @param {string} name - The name value.
   */
  constructor(name) {
    super(name);

    this.__revolutionsParam = this.addParameter(
      new NumberParameter('Revolutions', 0.0)
    );
    const rpmParam = this.addParameter(new NumberParameter('RPM', 0.0)); // revolutions per minute
    this.__timeoutId;
    rpmParam.valueChanged.connect(() => {
      const rpm = rpmParam.getValue();
      if (Math.abs(rpm) > 0.0) {
        if (!this.__timeoutId) {
          const timerCallback = () => {
            const rpm = rpmParam.getValue();
            const revolutions = this.__revolutionsParam.getValue();
            this.__revolutionsParam.setValue(
              revolutions + rpm * (1 / (50 * 60))
            );
            this.__timeoutId = setTimeout(timerCallback, 20); // Sample at 50fps.
          };
          timerCallback();
        }
      } else {
        clearTimeout(this.__timeoutId);
        this.__timeoutId = undefined;
      }
    });
    this.__gearsParam = this.addParameter(
      new ListParameter('Gears', GearParameter)
    );
    this.__gearsParam.elementAdded.connect((value, index) => {
      this.addOutput(value.getOutput());
    });
    this.__gearsParam.elementRemoved.connect((value, index) => {
      this.removeOutput(index);
    });

    this.__gears = [];
  }

  /**
   * The evaluate method.
   */
  evaluate() {
    const revolutions = this.__revolutionsParam.getValue();
    const gears = this.__gearsParam.getValue();
    const len = gears.length;
    for (const gear of gears) {
      const output = gear.getOutput();
      const initialxfo = output.getInitialValue();
      if (!initialxfo) {
        // Note: we have cases where we have interdependencies.
        // Operator A Writes to [A, B, C]
        // Operator B Writes to [A, B, C].
        // During the load of operator B.C, we trigger an evaluation
        // of Opeator A, which causes B to evaluate (due to B.A already connected)
        // Now operator B is evaluating will partially setup.
        // See SmartLoc: Exploded Parts and Gears read/write the same set of
        // params.
        return
      }

      const rot = revolutions * gear.getRatio() + gear.getOffset();

      const quat = new Quat();
      quat.setFromAxisAndAngle(gear.getAxis(), rot * Math.PI * 2.0);
      // const initialxfo = output.getInitialValue().clone();
      const xfo = output.getValue();
      xfo.ori = quat.multiply(initialxfo.ori);
      output.setClean(xfo);
    }
  }

  /**
   * The detach method.
   */
  detach() {
    super.detach();
    if (this.__timeoutId) {
      clearTimeout(this.__timeoutId);
      this.__timeoutId = null;
    }
  }

  /**
   * The reattach method.
   */
  reattach() {
    super.reattach();

    // Restart the operator.
    this.getParameter('RPM').valueChanged.emit();
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    if (this.__timeoutId) {
      clearTimeout(this.__timeoutId);
      this.__timeoutId = null;
    }
    super.destroy();
  }
}

sgFactory.registerClass('GearsOperator', GearsOperator);

/** Class representing a piston parameter.
 * @extends StructParameter
 */
class PistonParameter extends StructParameter {
  /**
   * Create a piston parameter.
   * @param {string} name - The name value.
   */
  constructor() {
    super('Piston');

    // this.__pistonAxisParam = this._addMember(new Vec('Axis', 0));
    this.__pistonAngleParam = this._addMember(
      new NumberParameter('PistonAngle', 0)
    );
    this.__camPhaseParam = this._addMember(new NumberParameter('CamPhase', 0));
    this.__camLengthParam = this._addMember(new NumberParameter('CamLength', 3));
    this.__rodLengthParam = this._addMember(new NumberParameter('RodLength', 3));

    // The first RodItem added causes the rodOffset to be computed.
    this.__rodoutput = new XfoOperatorOutput('Rod');
    this.__capoutput = new XfoOperatorOutput('Cap');

    this.__pistonAngleParam.valueChanged.connect(this.init.bind(this));
    this.__camPhaseParam.valueChanged.connect(this.init.bind(this));
    this.__camLengthParam.valueChanged.connect(this.init.bind(this));
    this.__rodLengthParam.valueChanged.connect(this.init.bind(this));

    this.__bindXfos = {};
  }

  /**
   * The getRodOutput method.
   * @return {any} - The return value.
   */
  getRodOutput() {
    return this.__rodoutput
  }

  /**
   * The getCapOutput method.
   * @return {any} - The return value.
   */
  getCapOutput() {
    return this.__capoutput
  }

  /**
   * The setCrankXfo method.
   * @param {Xfo} baseCrankXfo - The baseCrankXfo value.
   */
  setCrankXfo(baseCrankXfo) {
    this.__baseCrankXfo = baseCrankXfo;
    this.init();
  }

  /**
   * The init method.
   */
  init() {
    if (!this.__baseCrankXfo) return

    const camPhase = this.__camPhaseParam.getValue();
    const camLength = this.__camLengthParam.getValue();
    const rodLength = this.__rodLengthParam.getValue();
    const pistonAngle = this.__pistonAngleParam.getValue();
    const crankVec = new Vec3$1(
      Math.sin(Math.degToRad(pistonAngle)),
      Math.cos(Math.degToRad(pistonAngle)),
      0.0
    );
    this.__pistonAxis = this.__baseCrankXfo.ori.rotateVec3(crankVec);

    this.__camVec = this.__baseCrankXfo.ori.rotateVec3(
      new Vec3$1(
        Math.sin(camPhase * 2.0 * Math.PI) * camLength,
        Math.cos(camPhase * 2.0 * Math.PI) * camLength,
        0.0
      )
    );

    const camAngle = camPhase * 2.0 * Math.PI;
    const bigEndOffset = Math.sin(camAngle) * camLength;
    const headOffset =
      Math.sqrt(rodLength * rodLength - bigEndOffset * bigEndOffset) +
      Math.cos(camAngle) * camLength;
    this.__pistonOffset = headOffset;
  }

  /**
   * The evaluate method.
   * @param {Quat} quat - The quat value.
   * @param {any} crankAxis - The crankAxis value.
   * @param {any} revolutions - The revolutions value.
   */
  evaluate(quat, crankAxis, revolutions) {
    const camPhase = this.__camPhaseParam.getValue();
    const camLength = this.__camLengthParam.getValue();
    const rodLength = this.__rodLengthParam.getValue();
    const camAngle = (camPhase + revolutions) * 2.0 * Math.PI;

    const bigEndOffset = Math.sin(camAngle) * camLength;
    const rodAngle = Math.asin(bigEndOffset / rodLength);
    const headOffset =
      Math.sqrt(rodLength * rodLength - bigEndOffset * bigEndOffset) +
      Math.cos(camAngle) * camLength;

    if (this.__rodoutput.isConnected()) {
      const initialRodxfo = this.__rodoutput.getInitialValue().clone();
      const rodxfo = this.__rodoutput.getValue();
      const axisPos = rodxfo.tr.subtract(this.__baseCrankXfo.tr).dot(crankAxis);

      const rotRotation = new Quat();
      rotRotation.setFromAxisAndAngle(crankAxis, -rodAngle);

      rodxfo.tr = this.__baseCrankXfo.tr.add(quat.rotateVec3(this.__camVec));
      rodxfo.tr.addInPlace(crankAxis.scale(axisPos));
      rodxfo.ori = rotRotation.multiply(initialRodxfo.ori);
      this.__rodoutput.setValue(rodxfo);
    }

    if (this.__capoutput.isConnected()) {
      const initialHeadxfo = this.__capoutput.getInitialValue().clone();
      const headxfo = this.__capoutput.getValue();
      headxfo.tr = initialHeadxfo.tr.add(
        this.__pistonAxis.scale(headOffset - this.__pistonOffset)
      );
      this.__capoutput.setValue(headxfo);
    }
  }

  /**
   * The setOwner method.
   * @param {any} owner - The owner value.
   */
  setOwner(owner) {
    this.__owner = owner;
  }

  /**
   * The getOwner method.
   * @return {any} - The return value.
   */
  getOwner() {
    return this.__owner
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    const j = super.toJSON(context, flags);
    return j
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    super.fromJSON(j, context, flags);
  }

  // ////////////////////////////////////////
  // Clone

  /**
   * The clone method constructs a new pistom parameter, copies its values
   * from this parameter and returns it.
   * @param {number} flags - The flags value.
   * @return {PistonParameter} - Returns a new cloned piston parameter.
   */
  clone(flags) {
    const clonedParam = new PistonParameter(this.__name, this.__value);
    return clonedParam
  }
}

/** Class representing a piston operator.
 * @extends Operator
 */
class PistonOperator extends Operator {
  /**
   * Create a piston operator.
   * @param {string} name - The name value.
   */
  constructor(name) {
    super(name);

    this.__revolutionsParam = this.addParameter(
      new NumberParameter('Revolutions', 0.0, [0, 1])
    );
    const rpmParam = this.addParameter(new NumberParameter('RPM', 0.0)); // revolutions per minute
    const fps = 50;
    const sampleTime = 1000 / fps;
    const anglePerSample = 1 / (fps * 60);
    rpmParam.valueChanged.connect(() => {
      let rpm = rpmParam.getValue();
      if (rpm > 0.0) {
        if (!this.__timeoutId) {
          const timerCallback = () => {
            rpm = rpmParam.getValue();
            const revolutions = this.__revolutionsParam.getValue();
            this.__revolutionsParam.setValue(revolutions + rpm * anglePerSample);
            this.__timeoutId = setTimeout(timerCallback, sampleTime); // Sample at 50fps.
          };
          timerCallback();
        }
      } else {
        clearTimeout(this.__timeoutId);
        this.__timeoutId = undefined;
      }
    });

    // this.__crankParam = this.addParameter(new KinematicGroupParameter('Crank'));
    this.__crankOutput = this.addOutput(new XfoOperatorOutput('Crank'));
    this.__crankOutput.paramSet.connect(this.init.bind(this));
    this.__crankAxisParam = this.addParameter(
      new Vec3Parameter('CrankAxis', new Vec3$1(1, 0, 0))
    );
    this.__crankAxisParam.valueChanged.connect(() => {
      // this.__baseCrankXfo.ori.setFromAxisAndAngle(this.__crankAxisParam.getValue(), 0.0);
      this.__baseCrankXfo.ori.setFromDirectionAndUpvector(
        this.__crankAxisParam.getValue(),
        new Vec3$1(0, 0, 1)
      );
      this.init();
    });
    this.__pistonsParam = this.addParameter(
      new ListParameter('Pistons', PistonParameter)
    );
    this.__pistonsParam.elementAdded.connect(value => {
      value.setCrankXfo(this.__baseCrankXfo);

      this.addOutput(value.getRodOutput());
      this.addOutput(value.getCapOutput());
    });
    this.__pistonsParam.elementRemoved.connect(value => {
      this.removeOutput(value.getRodOutput());
      this.removeOutput(value.getCapOutput());
    });

    this.__baseCrankXfo = new Xfo();
    this.__pistons = [];
  }

  /**
   * The setOwner method.
   * @param {any} ownerItem - The ownerItem value.
   */
  setOwner(ownerItem) {
    super.setOwner(ownerItem);
  }

  /**
   * The getCrankOutput method.
   * @return {any} - The return value.
   */
  getCrankOutput() {
    return this.__crankOutput
  }

  /**
   * The init method.
   */
  init() {
    const pistons = this.__pistonsParam.getValue();
    for (const piston of pistons) piston.setCrankXfo(this.__baseCrankXfo);

    if (this.__crankOutput.isConnected())
      this.__crankOffset = this.__baseCrankXfo
        .inverse()
        .multiply(this.__crankOutput.getInitialValue());
  }

  /**
   * The evaluate method.
   */
  evaluate() {
    const revolutions = this.__revolutionsParam.getValue(
      ValueGetMode.OPERATOR_GETVALUE
    );
    const crankAxis = this.__crankAxisParam.getValue(
      ValueGetMode.OPERATOR_GETVALUE
    );
    const quat = new Quat();
    quat.setFromAxisAndAngle(crankAxis, revolutions * Math.PI * 2.0);

    if (this.__crankOutput.isConnected()) {
      const crankXfo = this.__crankOutput.getValue();
      crankXfo.ori = quat.multiply(this.__crankOutput.getInitialValue().ori);
      this.__crankOutput.setValue(crankXfo);
    }

    const pistons = this.__pistonsParam.getValue();
    const len = pistons.length;
    for (let i = 0; i < len; i++) {
      const piston = pistons[i];
      piston.evaluate(quat, crankAxis, revolutions);
    }

    this.postEval.emit(revolutions);
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    return super.toJSON(context, flags)
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    super.fromJSON(j, context, flags);
    if (j.crankOutput) {
      this.__crankOutput.fromJSON(j.crankOutput, context);
    }
    this.init();
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    clearTimeout(this.__timeoutId);
    super.destroy();
  }
}

sgFactory.registerClass('PistonOperator', PistonOperator);

/** Class representing a router operator.
 * @extends Operator
 * @private
 */
class RouterOperator extends Operator {
  /**
   * Create a router operator.
   * @param {string} name - The name value.
   */
  constructor(name) {
    super(name);

    this.__inputParam = this.addParameter(new NumberParameter('Input'));
    this.__routesParam = this.addParameter(
      new ListParameter('Routes', NumberParameter)
    );
    this.__routesParam.elementAdded.connect(value => {
      value.setValue(1.0);
      this.addOutput(new OperatorOutput('Output'));
    });
    this.__routesParam.elementRemoved.connect((value, index) => {
      this.removeOutput(this.getOutputByIndex(index));
    });
  }

  /**
   * The evaluate method.
   */
  evaluate() {
    const input = this.__inputParam.getValue(ValueGetMode.OPERATOR_GETVALUE);
    const routes = this.__routesParam.getValue();
    let i = this.__outputs.length;
    while (i--) {
      const output = this.__outputs[i];
      output.setValue(
        input * routes[i].getValue(ValueGetMode.OPERATOR_GETVALUE)
      );
    }
    this.postEval.emit(input);
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    return super.toJSON(context, flags)
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    super.fromJSON(j, context, flags);
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    super.destroy();
  }
}

sgFactory.registerClass('RouterOperator', RouterOperator);

/** An operator for aiming items at targets.
 * @extends Operator
 */
class AimOperator extends Operator {
  /**
   * Create a gears operator.
   * @param {string} name - The name value.
   */
  constructor(name) {
    super(name);

    this.addParameter(new NumberParameter('Weight', 1));
    this.addParameter(
      new MultiChoiceParameter('Axis', 0, [
        '+X Axis',
        '-X Axis',
        '+Y Axis',
        '-Y Axis',
        '+Z Axis',
        '-Z Axis',
      ])
    );

    this.addParameter(new NumberParameter('Stretch', 0.0));
    this.addParameter(new NumberParameter('Initial Dist', 1.0));
    this.addParameter(new XfoParameter('Target'));
    this.addOutput(new XfoOperatorOutput('InputOutput'));
  }

  /**
   * The resetStretchRefDist method.
   */
  resetStretchRefDist() {
    const target = this.getParameter('Target').getValue();
    const output = this.getOutputByIndex(0);
    const xfo = output.getValue();
    const dist = target.tr.subtract(xfo.tr).length();
    this.getParameter('Initial Dist').setValue(dist);
  }

  /**
   * The evaluate method.
   */
  evaluate() {
    const weight = this.getParameter('Weight').getValue();
    const target = this.getParameter('Target').getValue();
    const axis = this.getParameter('Axis').getValue();
    const output = this.getOutputByIndex(0);
    const xfo = output.getValue();
    const dir = target.tr.subtract(xfo.tr);
    const dist = dir.length();
    if (dist < 0.000001) return
    dir.scaleInPlace(1 / dist);
    let vec;
    switch (axis) {
      case 0:
        vec = xfo.ori.getXaxis();
        break
      case 1:
        vec = xfo.ori.getXaxis().negate();
        break
      case 2:
        vec = xfo.ori.getYaxis();
        break
      case 3:
        vec = xfo.ori.getYaxis().negate();
        break
      case 4:
        vec = xfo.ori.getZaxis();
        break
      case 5:
        vec = xfo.ori.getZaxis().negate();
        break
    }

    let align = new Quat();
    align.setFrom2Vectors(vec, dir);
    align.alignWith(new Quat());
    if (weight < 1.0) align = new Quat().lerp(align, weight);

    xfo.ori = align.multiply(xfo.ori);

    const stretch = this.getParameter('Stretch').getValue();
    if (stretch > 0.0) {
      const initialDist = this.getParameter('Initial Dist').getValue();
      // Scale the output to reach towards the target.
      // Note: once the base xfo is re-calculated, then
      // we can make this scale relative. (e.g. *= sc)
      // This will happen once GalcGlibalXfo is the base
      // operator applied to GlobalXfo param.
      // Until then, we must reset scale manually here.
      const sc = 1.0 + (dist / initialDist - 1.0) * stretch;
      switch (axis) {
        case 0:
        case 1:
          xfo.sc.x = sc;
          break
        case 2:
        case 3:
          xfo.sc.y = sc;
          break
        case 4:
        case 5:
          xfo.sc.z = sc;
          break
      }
      // console.log("AimOperator.evaluate:", xfo.sc.toString())
    }
    output.setClean(xfo);
  }
}

sgFactory.registerClass('AimOperator', AimOperator);

/** Class representing a camera, mouse and keyboard.
 * @extends ParameterOwner
 */
class CameraMouseAndKeyboard extends ParameterOwner {
  /**
   * Create a camera, mouse and keyboard
   * @param {string} name - The name value.
   */
  constructor(name = undefined) {
    if (name == undefined) name = 'Camera';
    super(name);

    this.__defaultManipulationState = 'orbit';
    this.__manipulationState = this.__defaultManipulationState;
    this.__mouseDown = false;
    this.__dragging = false;
    this.__mouseDragDelta = new Vec2();
    this.__keyboardMovement = false;
    this.__keysPressed = [];
    this.__maxVel = 0.002;
    this.__velocity = new Vec3$1();

    this.__ongoingTouches = {};

    this.__orbitRateParam = this.addParameter(
      new NumberParameter('orbitRate', SystemDesc.isMobileDevice ? -0.3 : 1)
    );
    this.__dollySpeedParam = this.addParameter(
      new NumberParameter('dollySpeed', 0.02)
    );
    this.__mouseWheelDollySpeedParam = this.addParameter(
      new NumberParameter('mouseWheelDollySpeed', 0.0005)
    );

    this.movementFinished = new Signal();
  }

  /**
   * Setter for the default manipulation mode.
   * @param {mode} mode - The mode value.
   */
  setDefaultManipulationMode(mode) {
    this.__defaultManipulationState = mode;
  }

  /**
   * The look method.
   * @param {any} event - The event value.
   * @param {any} dragVec - The drag vector value.
   */
  look(event, dragVec) {
    const { viewport } = event;
    const camera = viewport.getCamera();

    const focalDistance = camera.getFocalDistance();
    const orbitRate = this.__orbitRateParam.getValue();

    if (this.__keyboardMovement) {
      const globalXfo = camera.getGlobalXfo();
      this.__mouseDownCameraXfo = globalXfo.clone();
      this.__mouseDownZaxis = globalXfo.ori.getZaxis();
      const targetOffset = this.__mouseDownZaxis.scale(-focalDistance);
      this.__mouseDownCameraTarget = globalXfo.tr.add(targetOffset);
    }

    const globalXfo = this.__mouseDownCameraXfo.clone();

    // Orbit
    const orbit = new Quat();
    orbit.rotateZ(dragVec.x / viewport.getWidth() * Math.PI * orbitRate);
    globalXfo.ori = orbit.multiply(globalXfo.ori);

    // Pitch
    const pitch = new Quat();
    pitch.rotateX(dragVec.y / viewport.getHeight() * Math.PI * orbitRate);
    globalXfo.ori.multiplyInPlace(pitch);

    if (this.__keyboardMovement) {
      // TODO: debug this potential regression. we now use the generic method which emits a signal.
      // Avoid generating a signal because we have an animation frame occuring.
      // see: onKeyPressed
      camera.setGlobalXfo(globalXfo);
    } else {
      camera.setGlobalXfo(globalXfo);
    }
  }

  /**
   * The orbit method.
   * @param {any} event - The event value.
   * @param {any} dragVec - The drag vector value.
   */
  orbit(event, dragVec) {
    const { viewport } = event;
    const camera = viewport.getCamera();

    const focalDistance = camera.getFocalDistance();
    const orbitRate = this.__orbitRateParam.getValue();

    if (this.__keyboardMovement) {
      const globalXfo = camera.getGlobalXfo();
      this.__mouseDownCameraXfo = globalXfo.clone();
      this.__mouseDownZaxis = globalXfo.ori.getZaxis();
      const targetOffset = this.__mouseDownZaxis.scale(-focalDistance);
      this.__mouseDownCameraTarget = globalXfo.tr.add(targetOffset);
    }

    const globalXfo = this.__mouseDownCameraXfo.clone();

    // Orbit
    const orbit = new Quat();
    orbit.rotateZ(dragVec.x / viewport.getWidth() * 2 * Math.PI * -orbitRate);
    globalXfo.ori = orbit.multiply(globalXfo.ori);

    // Pitch
    const pitch = new Quat();
    pitch.rotateX(dragVec.y / viewport.getHeight() * Math.PI * -orbitRate);
    globalXfo.ori.multiplyInPlace(pitch);

    globalXfo.tr = this.__mouseDownCameraTarget.add(
      globalXfo.ori.getZaxis().scale(focalDistance)
    );

    if (this.__keyboardMovement) {
      // TODO: debug this potential regression. we now use the generic method which emits a signal.
      // Avoid generating a signal because we have an animation frame occuring.
      // see: onKeyPressed
      camera.setGlobalXfo(globalXfo);
    } else {
      camera.setGlobalXfo(globalXfo);
    }
  }

  /**
   * The pan method.
   * @param {any} event - The event value.
   * @param {any} dragVec - The drag vector value.
   */
  pan(event, dragVec) {
    const { viewport } = event;
    const camera = viewport.getCamera();

    const focalDistance = camera.getFocalDistance();
    const fovY = camera.getFov();
    const xAxis = new Vec3$1(1, 0, 0);
    const yAxis = new Vec3$1(0, 1, 0);

    const cameraPlaneHeight = 2.0 * focalDistance * Math.tan(0.5 * fovY);
    const cameraPlaneWidth =
      cameraPlaneHeight * (viewport.getWidth() / viewport.getHeight());
    const delta = new Xfo();
    delta.tr = xAxis.scale(
      -(dragVec.x / viewport.getWidth()) * cameraPlaneWidth
    );
    delta.tr.addInPlace(
      yAxis.scale((dragVec.y / viewport.getHeight()) * cameraPlaneHeight)
    );

    camera.setGlobalXfo(this.__mouseDownCameraXfo.multiply(delta));
  }

  /**
   * The dolly method.
   * @param {any} event - The event value.
   * @param {any} dragVec - The drag vector value.
   */
  dolly(event, dragVec) {
    const { viewport } = event;
    const camera = viewport.getCamera();

    const dollyDist = dragVec.x * this.__dollySpeedParam.getValue();
    const delta = new Xfo();
    delta.tr.set(0, 0, dollyDist);
    camera.setGlobalXfo(this.__mouseDownCameraXfo.multiply(delta));
  }

  /**
   * The panAndZoom method.
   * @param {any} event - The event value.
   * @param {any} panDelta - The pan delta value.
   * @param {any} dragDist - The drag distance value.
   */
  panAndZoom(event, panDelta, dragDist) {
    const { viewport } = event;
    const camera = viewport.getCamera();

    const focalDistance = camera.getFocalDistance();
    const fovY = camera.getFov();

    const xAxis = new Vec3$1(1, 0, 0);
    const yAxis = new Vec3$1(0, 1, 0);

    const cameraPlaneHeight = 2.0 * focalDistance * Math.tan(0.5 * fovY);
    const cameraPlaneWidth =
      cameraPlaneHeight * (viewport.getWidth() / viewport.getHeight());
    const delta = new Xfo();
    delta.tr = xAxis.scale(
      -(panDelta.x / viewport.getWidth()) * cameraPlaneWidth
    );
    delta.tr.addInPlace(
      yAxis.scale((panDelta.y / viewport.getHeight()) * cameraPlaneHeight)
    );

    const zoomDist = dragDist * focalDistance;
    camera.setFocalDistance(this.__mouseDownFocalDist + zoomDist);
    delta.tr.z += zoomDist;
    camera.setGlobalXfo(this.__mouseDownCameraXfo.multiply(delta));
  }

  /**
   * The initDrag method.
   * @param {any} event - The event value.
   */
  initDrag(event) {
    const { viewport } = event;
    const camera = viewport.getCamera();
    const focalDistance = camera.getFocalDistance();
    
    this.__mouseDown = true;
    this.__calculatingDragAction = false;
    this.__mouseDownPos = event.mousePos;
    this.__mouseDownViewport = viewport;
    this.__mouseDragDelta.set(0, 0);
    this.__mouseDownCameraXfo = camera.getGlobalXfo().clone();
    this.__mouseDownZaxis = this.__mouseDownCameraXfo.ori.getZaxis();
    const targetOffset = this.__mouseDownZaxis.scale(-focalDistance);
    this.__mouseDownCameraTarget = camera.getGlobalXfo().tr.add(targetOffset);
    this.__mouseDownFocalDist = focalDistance;
    
    this.__dragListenerId = camera.getParameter("GlobalXfo").valueChanged.connect(this.__globalXfoChangedDuringDrag.bind(this));
  }

  __globalXfoChangedDuringDrag(mode) {
    if (!this.__calculatingDragAction) {
      if (this.__dragListenerId != null) {
        const camera = this.__mouseDownViewport.getCamera();
        camera.getParameter("GlobalXfo").valueChanged.disconnectId(this.__dragListenerId);
        this.__dragListenerId = null;
      }
      this.initDrag({ viewport: this.__mouseDownViewport, mousePos: this.__mouseDownPos } );
    }
  }
  /**
   * The initDrag method.
   * @param {any} event - The event value.
   */
  endDrag(event) {
    if (this.__dragListenerId != null) {
      const { viewport } = event;
      const camera = viewport.getCamera();
      camera.getParameter("GlobalXfo").valueChanged.disconnectId(this.__dragListenerId);
      this.__dragListenerId = null;
    }
    this.__mouseDown = false;
    this.__dragging = false;
  }

  /**
   * The aimFocus method.
   * @param {any} event - The event value.
   * @param {any} pos - The position value.
   */
  aimFocus(event, pos) {
    const { viewport } = event;
    const camera = viewport.getCamera();

    if (this.__focusIntervalId) clearInterval(this.__focusIntervalId);

    const count = 20;
    let i = 0;
    const applyMovement = () => {
      const initlalGlobalXfo = camera.getGlobalXfo();
      const initlalDist = camera.getFocalDistance();
      const dir = pos.subtract(initlalGlobalXfo.tr);
      const dist = dir.normalizeInPlace();

      const orbit = new Quat();
      const pitch = new Quat();

      // Orbit
      {
        const currDir = initlalGlobalXfo.ori.getZaxis().clone();
        currDir.z = 0;
        const newDir = dir.negate();
        newDir.z = 0;

        orbit.setFrom2Vectors(currDir, newDir);
      }

      // Pitch
      {
        const currDir = initlalGlobalXfo.ori.getZaxis().clone();
        const newDir = dir.negate();
        currDir.x = newDir.x;
        currDir.y = newDir.y;
        currDir.normalizeInPlace();

        if (currDir.cross(newDir).dot(initlalGlobalXfo.ori.getXaxis()) > 0.0)
          pitch.rotateX(currDir.angleTo(newDir));
        else pitch.rotateX(-currDir.angleTo(newDir));
      }

      const targetGlobalXfo = initlalGlobalXfo.clone();
      targetGlobalXfo.ori = orbit.multiply(targetGlobalXfo.ori);
      targetGlobalXfo.ori.multiplyInPlace(pitch);

      // With each iteraction we get closer to our goal
      // and on the final iteration we should aim perfectly at
      // the target.
      const t = Math.pow(i / count, 2);
      const globalXfo = initlalGlobalXfo.clone();
      globalXfo.ori = initlalGlobalXfo.ori.lerp(targetGlobalXfo.ori, t);

      camera.setFocalDistance(initlalDist + (dist - initlalDist) * t);
      camera.setGlobalXfo(globalXfo);

      i++;
      if (i <= count) {
        this.__focusIntervalId = setTimeout(applyMovement, 20);
      } else {
        this.__focusIntervalId = undefined;
        this.movementFinished.emit();
      }
    };
    applyMovement();

    this.__manipulationState = 'focussing';
  }

  /**
   * Causes an event to occur when the mouse pointer is moving while over an element.
   * @param {MouseEvent} event - The mouse event that occurs.
   */
  onMouseMove(event) {}

  /**
   * Causes an event to occur when a user double clicks a mouse button over an element.
   * @param {MouseEvent} event - The mouse event that occurs.
   */
  onDoubleClick(event) {
    if (event.intersectionData) {
      const camera = event.viewport.getCamera();
      const pos = camera
        .getGlobalXfo()
        .tr.add(event.mouseRay.dir.scale(event.intersectionData.dist));
      this.aimFocus(event, pos);
    }
  }

  /**
   * Causes an event to occur when the user starts to drag an element.
   * @param {MouseEvent} event - The mouse event that occurs.
   */
  onMouseDown(event) {
    this.initDrag(event);

    if (event.button == 2) {
      this.__manipulationState = 'pan';
    } else if (event.ctrlKey && event.altKey) {
      this.__manipulationState = 'dolly';
    } else if (event.ctrlKey || event.button == 2) {
      this.__manipulationState = 'look';
    } else {
      this.__manipulationState = this.__defaultManipulationState;
    }
  }

  /**
   * Causes an event to occur when an element is being dragged.
   * @param {MouseEvent} event - The mouse event that occurs.
   */
  onMouseMove(event) {
    if (!this.__mouseDown) return;
    const mousePos = event.mousePos;
    this.__calculatingDragAction = true;
    if (this.__keyboardMovement) {
      this.__mouseDragDelta = mousePos;
    } else {
      this.__mouseDragDelta = mousePos.subtract(this.__mouseDownPos);
    }
    switch (this.__manipulationState) {
      case 'orbit':
        this.orbit(event, this.__mouseDragDelta);
        break
      case 'look':
        this.look(event, this.__mouseDragDelta);
        break
      case 'pan':
        this.pan(event, this.__mouseDragDelta);
        break
      case 'dolly':
        this.dolly(event, this.__mouseDragDelta);
        break
    }
    this.__dragging = true;
    this.__calculatingDragAction = false;
    event.stopPropagation();
  }

  /**
   * Causes an event to occur when the user has finished dragging an element.
   * @param {MouseEvent} event - The mouse event that occurs.
   * @return {boolean} - The return value.
   */
  onMouseUp(event) {
    if (this.__dragging) {
      this.movementFinished.emit();
      event.stopPropagation();
    }
    this.endDrag(event);
  }

  /**
   * Causes an event to occur when the mouse wheel is rolled up or down over an element.
   * @param {WheelEvent } event - The wheel event that occurs.
   */
  onWheel(event) {
    const { viewport } = event;
    const camera = viewport.getCamera();
    const mouseWheelDollySpeed = this.__mouseWheelDollySpeedParam.getValue();
    const modulator = event.shiftKey ? 0.1 : 0.5;
    const xfo = camera.getGlobalXfo();
    const movementVec = xfo.ori.getZaxis();
    if (this.__mouseWheelZoomIntervalId)
      clearInterval(this.__mouseWheelZoomIntervalId);
    let count = 0;
    const applyMovement = () => {
      const focalDistance = camera.getFocalDistance();
      const zoomDist =
        event.deltaY * mouseWheelDollySpeed * focalDistance * modulator;
      xfo.tr.addInPlace(movementVec.scale(zoomDist));
      if (this.__defaultManipulationState == 'orbit')
        camera.setFocalDistance(camera.getFocalDistance() + zoomDist);
      camera.setGlobalXfo(xfo);

      count++;
      if (count < 10) {
        this.__mouseWheelZoomIntervalId = setTimeout(applyMovement, 10);
      } else {
        this.__mouseWheelZoomIntervalId = undefined;
        this.movementFinished.emit();
      }
    };
    applyMovement();

    event.preventDefault();
    event.stopPropagation();
  }

  /**
   * The __integrateVelocityChange method.
   * @param {any} event - The event value.
   * @private
   */
  __integrateVelocityChange(event) {
    const { viewport } = event;
    const camera = viewport.getCamera();
    const delta = new Xfo();
    delta.tr = this.__velocity.normalize().scale(this.__maxVel);
    camera.setGlobalXfo(camera.getGlobalXfo().multiply(delta));
  }

  /**
   * Causes an event to occurs when the user presses a key on the keyboard.
   * @param {any} key - The key the user presses.
   * @param {KeyboardEvent} event - The keyboard event that occurs.
   * @return {boolean} - The return value.
   */
  onKeyPressed(key, event) {
    // Note: onKeyPressed is called intiallly only once, and then we
    // get a series of calls. Here we ignore subsequent events.
    // (TODO: move this logic to a special controller)
    /*
    switch (key) {
      case 'w':
        if (this.__keysPressed.indexOf(key) != -1)
          return false;
        this.__velocity.z -= 1.0;
        break;
      case 's':
        if (this.__keysPressed.indexOf(key) != -1)
          return false;
        this.__velocity.z += 1.0;
        break;
      case 'a':
        if (this.__keysPressed.indexOf(key) != -1)
          return false;
        this.__velocity.x -= 1.0;
        break;
      case 'd':
        if (this.__keysPressed.indexOf(key) != -1)
          return false;
        this.__velocity.x += 1.0;
        break;
      default:
        return false;
    }
    this.__keysPressed.push(key);
    if (!this.__keyboardMovement) {
      this.__keyboardMovement = true;
      let animationFrame = ()=>{
        this.__integrateVelocityChange(event)
        if (this.__keyboardMovement)
          window.requestAnimationFrame(animationFrame);
      }
      window.requestAnimationFrame(animationFrame);
    }
    */
    return false // no keys handled
  }

  /**
   * Causes an event to occur when the user is pressing a key on the keyboard.
   * @param {any} key - The key the user is pressing.
   * @param {KeyboardEvent} event - The keyboard event that occurs.
   */
  onKeyDown(key, event) {}

  /**
   * Causes an event to occur when the user releases a key on the keyboard.
   * @param {any} key - The key the user releases.
   * @param {any} event - The event that occurs.
   * @return {boolean} - The return value.
   */
  onKeyUp(key, event) {
    // (TODO: move this logic to a special controller)
    /*
    switch (key) {
      case 'w':
        this.__velocity.z += 1.0;
        break;
      case 's':
        this.__velocity.z -= 1.0;
        break;
      case 'a':
        this.__velocity.x += 1.0;
        break;
      case 'd':
        this.__velocity.x -= 1.0;
        break;
      default:
        return false;
    }
    let keyIndex = this.__keysPressed.indexOf(key);
    this.__keysPressed.splice(keyIndex, 1);
    if (this.__keysPressed.length == 0)
      this.__keyboardMovement = false;
    */
  }

  // ///////////////////////////////////
  // Touch controls

  /**
   * The __startTouch method.
   * @param {any} touch - The touch value.
   * @private
   */
  __startTouch(touch) {
    this.__ongoingTouches[touch.identifier] = {
      identifier: touch.identifier,
      pos: new Vec2(touch.pageX, touch.pageY),
    };
  }

  /**
   * The __endTouch method.
   * @param {any} touch - The touch value.
   * @private
   */
  __endTouch(touch) {
    // let idx = this.__ongoingTouchIndexById(touch.identifier);
    // this.__ongoingTouches.splice(idx, 1); // remove it; we're done
    delete this.__ongoingTouches[touch.identifier];
  }

  // Touch events

  /**
   * Causes an event to occur when the user touches an element on a touch screen.
   * @param {TouchEvent} event - The touch event that occurs.
   */
  onTouchStart(event) {
    console.log('onTouchStart');
    event.preventDefault();
    event.stopPropagation();

    if (Object.keys(this.__ongoingTouches).length == 0)
      this.__manipMode = undefined;

    const touches = event.changedTouches;
    for (let i = 0; i < touches.length; i++) {
      this.__startTouch(touches[i]);
    }

    if (Object.keys(this.__ongoingTouches).length == 1) {
      this.initDrag(event);
      
      this.__dragging = true;
    }
  }

  /**
   * The event that occurs when the user moves his/her finger across a touch screen.
   * @param {TouchEvent} event - The touch event that occurs.
   */
  onTouchMove(event) {
    event.preventDefault();
    event.stopPropagation();
    // console.log("this.__manipMode:" + this.__manipMode);

    
    this.__calculatingDragAction = true;

    const touches = event.touches;
    if (touches.length == 1 && this.__manipMode != 'panAndZoom') {
      const touch = touches[0];
      const touchPos = new Vec2(touch.pageX, touch.pageY);
      const touchData = this.__ongoingTouches[touch.identifier];
      const dragVec = touchData.pos.subtract(touchPos);
      if (this.__defaultManipulationState == 'look') {
        // TODO: scale panning here.
        dragVec.scaleInPlace(6.0);
        this.look(event, dragVec);
      } else {
        this.orbit(event, dragVec);
      }
    } else if (touches.length == 2) {
      const touch0 = touches[0];
      const touchData0 = this.__ongoingTouches[touch0.identifier];
      const touch1 = touches[1];
      const touchData1 = this.__ongoingTouches[touch1.identifier];

      const touch0Pos = new Vec2(touch0.pageX, touch0.pageY);
      const touch1Pos = new Vec2(touch1.pageX, touch1.pageY);
      const startSeparation = touchData1.pos.subtract(touchData0.pos).length();
      const dragSeparation = touch1Pos.subtract(touch0Pos).length();
      const separationDist = startSeparation - dragSeparation;

      const touch0Drag = touch0Pos.subtract(touchData0.pos);
      const touch1Drag = touch1Pos.subtract(touchData1.pos);
      const dragVec = touch0Drag.add(touch1Drag);
      // TODO: scale panning here.
      dragVec.scaleInPlace(0.5);
      this.panAndZoom(event, dragVec, separationDist * 0.002);
      this.__manipMode = 'panAndZoom';
    }

    
    this.__calculatingDragAction = false;
  }

  /**
   * Causes an event to occur when the user removes his/her finger from an element.
   * @param {TouchEvent} event - The touch event that occurs.
   */
  onTouchEnd(event) {
    event.preventDefault();
    event.stopPropagation();
    const touches = event.changedTouches;
    // switch (this.__manipMode) {
    // case 'camera-manipulation':
    //     let touch = touches[0];
    //     let releasePos = new Vec2(touch.pageX, touch.pageY);
    //     viewport.getCamera().onDragEnd(event, releasePos);
    //     break;
    // }
    for (let i = 0; i < touches.length; i++) {
      this.__endTouch(touches[i]);
    }
    
    if (Object.keys(this.__ongoingTouches).length == 0) this.endDrag(event);
  }

  /**
   * Causes an event to occur when the touch event gets interrupted.
   * @param {TouchEvent} event - The touch event that occurs.
   */
  onTouchCancel(event) {
    event.preventDefault();
    const touches = event.touches;
    for (let i = 0; i < touches.length; i++) {
      this.__endTouch(touches[i]);
    }
    if (Object.keys(this.__ongoingTouches).length == 0) this.endDrag(event);
  }

  /**
   * Causes an event to occur when the user double taps an element on a touch screen.
   * @param {TouchEvent} event - The touch event that occurs.
   */
  onDoubleTap(event) {
    if (event.intersectionData) {
      const { viewport } = event;
      const camera = viewport.getCamera();
      const pos = camera
        .getGlobalXfo()
        .tr.add(event.touchRay.dir.scale(event.intersectionData.dist));
      this.aimFocus(event, pos);
    }
    event.preventDefault();
  }
}

var SceneTree = /*#__PURE__*/Object.freeze({
  __proto__: null,
  RefCounted: RefCounted,
  ParameterOwner: ParameterOwner,
  ItemFlags: ItemFlags,
  BaseItem: BaseItem,
  getFileFolder: getFileFolder,
  loadTextfile: loadTextfile,
  loadJSONfile: loadJSONfile,
  loadXMLfile: loadXMLfile,
  loadBinfile: loadBinfile,
  sgFactory: sgFactory,
  isObject: isObject,
  mergeDeep: mergeDeep,
  resourceLoader: resourceLoader,
  Version: Version,
  BinReader: BinReader,
  BinWriter: BinWriter,
  ParamFlags: ParamFlags,
  ValueGetMode: ValueGetMode,
  ValueSetMode: ValueSetMode,
  BaseParameter: BaseParameter,
  Parameter: Parameter,
  MultiChoiceParameter: MultiChoiceParameter,
  BooleanParameter: BooleanParameter,
  NumberParameter: NumberParameter,
  Vec2Parameter: Vec2Parameter,
  Vec3Parameter: Vec3Parameter,
  Vec4Parameter: Vec4Parameter,
  ColorParameter: ColorParameter,
  Mat3Parameter: Mat3Parameter,
  Mat4Parameter: Mat4Parameter,
  XfoParameter: XfoParameter,
  ImageParameter: ImageParameter,
  StringParameter: StringParameter,
  CodeParameter: CodeParameter,
  FilePathParameter: FilePathParameter,
  ListParameter: ListParameter,
  StructParameter: StructParameter,
  TreeItemParameter: TreeItemParameter,
  ItemSetParameter: ItemSetParameter,
  ProxyParameter: ProxyParameter,
  GeometryParameter: GeometryParameter,
  MaterialParameter: MaterialParameter,
  MaterialFloatParam: MaterialFloatParam,
  MaterialColorParam: MaterialColorParam,
  Attribute: Attribute$1,
  BaseGeom: BaseGeom,
  SAVE_FLAG_SKIP_GEOMDATA: SAVE_FLAG_SKIP_GEOMDATA,
  VertexAttribute: VertexAttribute$1,
  Points: Points,
  Lines: Lines,
  Mesh: Mesh,
  PointsProxy: PointsProxy,
  LinesProxy: LinesProxy,
  MeshProxy: MeshProxy,
  PointGrid: PointGrid,
  Rect: Rect,
  Circle: Circle,
  Cross: Cross,
  LinesCuboid: LinesCuboid,
  Grid: Grid,
  Cone: Cone,
  Cuboid: Cuboid,
  Cylinder: Cylinder,
  Disc: Disc,
  Plane: Plane$1,
  Sphere: Sphere$1,
  Torus: Torus,
  DataImage: DataImage,
  FileImage: FileImage$1,
  FileImage2D: FileImage2D,
  LDRImage: LDRImage,
  LDRVideo: LDRVideo,
  GIFImage: GIFImage,
  EnvMap: EnvMap,
  Label: Label,
  VideoStreamImage2D: VideoStreamImage2D,
  labelManager: labelManager,
  SaveFlags: SaveFlags,
  LoadFlags: LoadFlags,
  CloneFlags: CloneFlags,
  TreeItem: TreeItem,
  InstanceItem: InstanceItem,
  AudioItem: AudioItem,
  FileAudioItem: FileAudioItem,
  BaseGeomItem: BaseGeomItem,
  GeomItem: GeomItem,
  AssetItem: AssetItem,
  BillboardItem: BillboardItem,
  Camera: Camera,
  Group: Group,
  GeomLibrary: GeomLibrary,
  Material: Material,
  BaseImage: BaseImage,
  MaterialLibrary: MaterialLibrary,
  Scene: Scene,
  VLAAsset: VLAAsset,
  ObjAsset: ObjAsset,
  Operator: Operator,
  OperatorOutput: OperatorOutput,
  XfoOperatorOutput: XfoOperatorOutput,
  ExplodePartsOperator: ExplodePartsOperator,
  GearsOperator: GearsOperator,
  PistonOperator: PistonOperator,
  RouterOperator: RouterOperator,
  AimOperator: AimOperator,
  CameraMouseAndKeyboard: CameraMouseAndKeyboard
});

const create3DContext = function(canvas, opt_attribs) {
  console.log(SystemDesc);
  let context = null;
  if (opt_attribs.webglContextType != undefined) {
    try {
      context = canvas.getContext(opt_attribs.webglContextType, opt_attribs);
      context.name = opt_attribs.webglContextType;
    } catch (e) {}
  } else {
    const names = ['webgl2', 'webgl'];
    names.some(name => {
      try {
        context = canvas.getContext(name, opt_attribs);
        context.name = name;
      } catch (e) {}
      if (context) {
        return true
      }
    });
  }
  if (!context) {
    return
  }

  // context.setupInstancedQuad = setupInstancedQuad;
  // context.bindInstancedQuad = bindInstancedQuad;
  context.sizeInBytes = function(type) {
    switch (type) {
      case this.BYTE:
      case this.UNSIGNED_BYTE:
        return 1
      case this.SHORT:
      case this.UNSIGNED_SHORT:
        return 2
      case this.INT:
      case this.UNSIGNED_INT:
      case this.FLOAT:
        return 4
      default:
        throw new Error('unknown type')
    }
  };

  if (context.name == 'webgl2') {
    context.floatTexturesSupported = true;

    context.__ext_float_linear = context.getExtension(
      'OES_texture_float_linear'
    );
    context.__ext_texture_half_float_linear = context.getExtension(
      'OES_texture_half_float_linear'
    );

    // Needed for rendering to float textures in an Fbo
    context.__ext_color_buffer_float = context.getExtension(
      'EXT_color_buffer_float'
    );

    // Safari does not support uploading HALF_FLOAT data into the GPU.
  } else {
    context.__ext_float = context.getExtension('OES_texture_float');
    if (context.__ext_float) {
      context.floatTexturesSupported = true;
      context.__ext_float_linear = context.getExtension(
        'OES_texture_float_linear'
      );
    } else {
      console.warn('OES_texture_float is not available');
    }

    context.__ext_half_float = context.getExtension('OES_texture_half_float');
    if (context.__ext_half_float) {
      context.HALF_FLOAT = context.__ext_half_float.HALF_FLOAT_OES;
      context.floatTexturesSupported = true;
      context.__ext_texture_half_float_linear = context.getExtension(
        'OES_texture_half_float_linear'
      );
    }

    // Needed for rendering to flat textures in an Fbo
    context.__ext_color_buffer_float = context.getExtension(
      'EXT_color_buffer_float'
    );

    context.__ext_std_derivatives = context.getExtension(
      'OES_standard_derivatives'
    );
    // context.__ext_sRGB = context.getExtension("EXT_sRGB");
    // context.__ext_draw_buffers = context.getExtension("WEBGL_draw_buffers");

    context.__ext_Inst = context.getExtension('ANGLE_instanced_arrays');
    if (context.__ext_Inst) {
      context.vertexAttribDivisor = context.__ext_Inst.vertexAttribDivisorANGLE.bind(
        context.__ext_Inst
      );
      context.drawArraysInstanced = context.__ext_Inst.drawArraysInstancedANGLE.bind(
        context.__ext_Inst
      );
      context.drawElementsInstanced = context.__ext_Inst.drawElementsInstancedANGLE.bind(
        context.__ext_Inst
      );
    }

    {
      // Note: OES_vertex_array_object is now supported on Safari.
      context.__ext_VAO = context.getExtension('OES_vertex_array_object');
      if (context.__ext_VAO) {
        context.createVertexArray = context.__ext_VAO.createVertexArrayOES.bind(
          context.__ext_VAO
        );
        context.deleteVertexArray = context.__ext_VAO.deleteVertexArrayOES.bind(
          context.__ext_VAO
        );
        context.bindVertexArray = context.__ext_VAO.bindVertexArrayOES.bind(
          context.__ext_VAO
        );
      }
    }
    context.__ext_element_index_uint = context.getExtension(
      'OES_element_index_uint'
    );
    context.__ext_WEBGL_depth_texture = context.getExtension(
      'WEBGL_depth_texture'
    ); // Or browser-appropriate prefix
    if (context.__ext_WEBGL_depth_texture) {
      context.UNSIGNED_INT_24_8 =
        context.__ext_WEBGL_depth_texture.UNSIGNED_INT_24_8_WEBGL;
    }

    context.DRAW_FRAMEBUFFER = context.FRAMEBUFFER;
  }

  context.__ext_frag_depth = context.getExtension('EXT_frag_depth');

  context.setupInstancedQuad = function() {
    // ////////////////////////////
    // Generate a buffer for drawing a full screen quad.
    const vertexIDs = new Float32Array([0.0, 1.0, 2.0, 3.0]);
    const indices = new Uint16Array([0, 1, 2, 2, 1, 3]);

    this.__quadVertexIdsBuffer = this.createBuffer();
    this.bindBuffer(this.ARRAY_BUFFER, this.__quadVertexIdsBuffer);
    this.bufferData(this.ARRAY_BUFFER, vertexIDs, this.STATIC_DRAW);

    this.__quadIndexBuffer = this.createBuffer();
    this.bindBuffer(this.ELEMENT_ARRAY_BUFFER, this.__quadIndexBuffer);
    this.bufferData(this.ELEMENT_ARRAY_BUFFER, indices, this.STATIC_DRAW);

    this.__quadattrbuffers = {
      vertexIDs: {
        buffer: this.__quadVertexIdsBuffer,
        dataType: Float32,
        dimension: 1,
        count: vertexIDs.length,
        shared: true /*This buffer is shared between geoms. do not destroy */
      },
    };
  };
  context.drawQuad = function() {
    this.drawElements(this.TRIANGLES, 6, this.UNSIGNED_SHORT, 0);
  };

  context.setupLineSegAttrBuffers = function() {
    // ////////////////////////////
    // Generate a buffer for drawing an instanced 2 point line
    const vertexIDs = new Float32Array([0.0, 1.0]);
    const vertexIdsBuffer = context.createBuffer();
    context.bindBuffer(context.ARRAY_BUFFER, vertexIdsBuffer);
    context.bufferData(context.ARRAY_BUFFER, vertexIDs, context.STATIC_DRAW);

    context.__linesegattrbuffers = {
      vertexIDs: {
        buffer: vertexIdsBuffer,
        dimension: 1,
        count: vertexIDs.length,
        shared: true /*This buffer is shared between geoms. do not destroy */
      },
    };
  };

  return context
};

/** Class representing a GL texture 2D.
 * @extends RefCounted
 */
class GLTexture2D extends RefCounted {
  /**
   * Create a GL texture 2D.
   * @param {any} gl - The gl value.
   * @param {any} params - The params value.
   */
  constructor(gl, params) {
    super();
    this.__gl = gl;

    this.ready = new Signal(true);
    this.updated = new Signal();
    this.resized = new Signal();

    this.width = 0;
    this.height = 0;
    this.textureType = 1; // Default 2d 8 bit texture image texture.
    this.textureDesc = [0, 0, 0, 0]; // To be populated by derived classes.
    this.__loaded = false;
    this.__bound = false;
    if (params != undefined) {
      if (params instanceof BaseImage) {
        this.__texture = params;
        this.__texture.setMetadata('gltexture', this);
        const imageUpdated = () => {
          // this.bufferData(data);
          const params = this.__texture.getParams();
          const width = params.width;
          const height = params.height;
          const data = params.data;
          this.bufferData(data, width, height);
        };
        if (this.__texture.isLoaded()) {
          this.configure(this.__texture.getParams());
          this.__texture.updated.connect(imageUpdated);
        } else {
          this.__texture.loaded.connect(() => {
            this.configure(this.__texture.getParams());
            this.__texture.updated.connect(imageUpdated);
          });
        }
      } else {
        this.configure(params);
      }
    }
  }

  /**
   * The isLoaded method.
   * @return {boolean} - The return value.
   */
  isLoaded() {
    return this.__loaded
  }

  /**
   * The getTexture method.
   * @return {any} - The return value.
   */
  getTexture() {
    return this.__texture
  }

  /**
   * The getInternalFormat method.
   * @return {any} - The return value.
   */
  getInternalFormat() {
    return this.__internalFormat
  }

  /**
   * The getType method.
   * @return {any} - The return value.
   */
  getType() {
    return this.__typeParam
  }

  /**
   * The getTypeID method.
   * @return {any} - The return value.
   */
  getTypeID() {
    return this.__type
  }

  /**
   * The getFormat method.
   * @return {any} - The return value.
   */
  getFormat() {
    return this.__formatParam
  }

  /**
   * The getFormatID method.
   * @return {any} - The return value.
   */
  getFormatID() {
    return this.__format
  }

  /**
   * The getFilter method.
   * @return {any} - The return value.
   */
  getFilter() {
    return this.__filterParam
  }

  /**
   * The getWrap method.
   * @return {any} - The return value.
   */
  getWrap() {
    return this.__wrapParam
  }

  /**
   * The getMipMapped method.
   * @return {any} - The return value.
   */
  getMipMapped() {
    return this.__mipMapped
  }

  /**
   * The configure method.
   * @param {any} params - The params value.
   * @param {boolean} emit - The emit value.
   */
  configure(params, emit = true) {
    if (
      !('type' in params) ||
      !('format' in params) ||
      !('width' in params) ||
      !('height' in params)
    )
      throw new Error('Invalid texture params')

    const gl = this.__gl;
    const width = params.width;
    const height = params.height;
    const data = params.data;

    const maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
    if (width <= 0 || width > maxSize || height <= 0 || height > maxSize) {
      throw new Error(
        'gl-texture2d: Invalid texture size. width:' +
          width +
          ' height:' +
          height +
          ' maxSize:' +
          maxSize
      )
    }

    const format = params.format;
    const type = params.type;
    let minFilter =
      'minFilter' in params
        ? params.minFilter
        : 'filter' in params
        ? params.filter
        : 'LINEAR';
    let magFilter =
      'magFilter' in params
        ? params.magFilter
        : 'filter' in params
        ? params.filter
        : 'LINEAR';
    const wrap = 'wrap' in params ? params.wrap : 'CLAMP_TO_EDGE';

    // if(format == 'ALPHA')
    //     throw("ALPHA textures are now deprecated. Please use RED instead.")

    // https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml
    if (type == 'FLOAT') {
      this.textureType = 3; // Indicating an Float HDR image.

      if (gl.name == 'webgl2') {
        if (minFilter == 'LINEAR' && !gl.__ext_float_linear) {
          console.warn(
            'Floating point texture filtering not supported on this device'
          );
          minFilter = 'NEAREST';
        }
        if (magFilter == 'LINEAR' && !gl.__ext_float_linear) {
          console.warn(
            'Floating point texture filtering not supported on this device'
          );
          magFilter = 'NEAREST';
        }
      } else {
        if (gl.__ext_float) {
          if (minFilter == 'LINEAR' && !gl.__ext_float_linear) {
            console.warn(
              'Floating point texture filtering not supported on this device'
            );
            minFilter = 'NEAREST';
          }
          if (magFilter == 'LINEAR' && !gl.__ext_float_linear) {
            console.warn(
              'Floating point texture filtering not supported on this device'
            );
            magFilter = 'NEAREST';
          }
        } else {
          if (gl.__ext_half_float) {
            type = 'HALF_FLOAT';
            if (minFilter == 'LINEAR' && !gl.__ext_texture_half_float_linear) {
              console.warn(
                'Half Float texture filtering not supported on this device'
              );
              minFilter = 'NEAREST';
            }
            if (magFilter == 'LINEAR' && !gl.__ext_texture_half_float_linear) {
              console.warn(
                'Half Float texture filtering not supported on this device'
              );
              magFilter = 'NEAREST';
            }
          } else {
            throw new Error('OES_texture_half_float is not available')
          }
        }
      }
    } else if (type == 'HALF_FLOAT') {
      if (gl.name == 'webgl2') ; else {
        if (!gl.supportUploadingHalfFloat && data != undefined) {
          throw new Error(
            'Safari does not support uploading HALF_FLOAT texture data.'
          )
        }
        if (gl.__ext_half_float) {
          if (minFilter == 'LINEAR' && !gl.__ext_texture_half_float_linear) {
            console.warn(
              'Half Float texture filtering not supported on this device'
            );
            minFilter = 'NEAREST';
          }
          if (magFilter == 'LINEAR' && !gl.__ext_texture_half_float_linear) {
            console.warn(
              'Half Float texture filtering not supported on this device'
            );
            magFilter = 'NEAREST';
          }
        } else {
          throw new Error('OES_texture_half_float is not available')
        }
        if (format == 'RGB') {
          throw new Error('OES_texture_half_float onlysupports RGBA textures')
        }
      }
    } else if (type == 'sRGB') {
      if (!gl.__ext_sRGB) throw new Error('EXT_sRGB is not available')
    }

    this.__formatParam = format;
    this.__typeParam = type;
    this.__minFilterParam = minFilter;
    this.__magFilterParam = magFilter;
    this.__wrapParam = wrap;

    this.__format = gl[format];
    this.__internalFormat =
      'internalFormat' in params ? gl[params.internalFormat] : this.__format;
    this.__type = gl[type];

    if (gl.name == 'webgl2') {
      if (!('internalFormat' in params)) {
        if (this.__type == gl.FLOAT) {
          if (this.__format == gl.RED) {
            this.__internalFormat = gl.R32F;
          } else if (this.__format == gl.RG) {
            this.__internalFormat = gl.RG32F;
          } else if (this.__format == gl.RGB) {
            this.__internalFormat = gl.RGB32F;
          } else if (this.__format == gl.RGBA) {
            this.__internalFormat = gl.RGBA32F;
          }
        } else if (this.__type == gl.HALF_FLOAT) {
          if (this.__format == gl.RED) {
            this.__internalFormat = gl.R16F;
          } else if (this.__format == gl.RG) {
            this.__internalFormat = gl.RG16F;
          } else if (this.__format == gl.RGB) {
            this.__internalFormat = gl.RGB16F;
          } else if (this.__format == gl.RGBA) {
            this.__internalFormat = gl.RGBA16F;
          }
        } else if (this.__type == gl.UNSIGNED_BYTE) {
          if (this.__format == gl.RED) {
            this.__internalFormat = gl.R8;
          }
          if (this.__format == gl.RG) {
            this.__internalFormat = gl.RG8;
          }
          if (this.__format == gl.RGB) {
            this.__internalFormat = gl.RGB8;
          } else if (this.__format == gl.RGBA) {
            this.__internalFormat = gl.RGBA8;
          }
        }
      }
    }
    this.__minFilter = gl[minFilter];
    this.__magFilter = gl[magFilter];
    this.__wrap = gl[wrap];
    this.__flipY = 'flipY' in params ? params.flipY : false;
    this.__mipMapped = 'mipMapped' in params ? params.mipMapped : false;
    this.invert = 'invert' in params ? params.invert : false;
    this.alphaFromLuminance =
      'alphaFromLuminance' in params ? params.alphaFromLuminance : false;
    this.textureDesc = [width, height, 0, 0];

    if (this.__gltex) {
      gl.deleteTexture(this.__gltex);
    }

    this.__gltex = gl.createTexture();
    this.__updateGLTexParams();
    if (data) {
      this.bufferData(data, width, height, false, false);
    } else {
      this.resize(width, height, false, false);
    }
    if (!this.__loaded) {
      this.ready.emit();
      this.__loaded = true;
    }
  }

  /**
   * The __updateGLTexParams method.
   * @private
   */
  __updateGLTexParams() {
    const gl = this.__gl;

    // Load the image into the GPU for rendering.
    gl.bindTexture(gl.TEXTURE_2D, this.__gltex);

    // This parameter caused all images to be blank. Flipping in the pixel shader instead(by default)
    // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);

    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.__minFilter);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.__magFilter);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this.__wrap);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this.__wrap);
  }

  /**
   * The bufferData method.
   * @param {any} data - The data value.
   * @param {number} width - The width value.
   * @param {number} height - The height value.
   * @param {boolean} bind - The bind value.
   * @param {boolean} emit - The emit value.
   */
  bufferData(data, width = -1, height = -1, bind = true, emit = true) {
    const gl = this.__gl;
    if (bind) {
      gl.bindTexture(gl.TEXTURE_2D, this.__gltex);
    }
    if (data != undefined) {
      if (
        data instanceof Image ||
        data instanceof ImageData ||
        data instanceof HTMLCanvasElement ||
        data instanceof HTMLImageElement ||
        data instanceof HTMLVideoElement
      ) {
        gl.texImage2D(
          gl.TEXTURE_2D,
          0,
          this.__internalFormat,
          this.__format,
          this.__type,
          data
        );
        this.width = data.width;
        this.height = data.height;
      } else {
        // if wieght and height not specified, assume they stay the same.
        if (width == -1) {
          width = this.width;
        }
        if (height == -1) {
          height = this.height;
        }
        // Note: data images must have an even size width/height to load correctly.
        // this doesn't mean they must be pot textures...
        const numPixels = width * height;
        let numChannels;
        switch (this.__format) {
          case gl.RED:
          case gl.RED_INTEGER:
          case gl.ALPHA:
          case gl.LUMINANCE:
          case gl.LUMINANCE_ALPHA:
            numChannels = 1;
            break
          case gl.RG:
            numChannels = 2;
            break
          case gl.RGB:
            numChannels = 3;
            break
          case gl.RGBA:
            numChannels = 4;
            break
        }
        if (data.length != numPixels * numChannels) {
          console.warn(
            'Invalid data for Image width:' +
              width +
              ' height:' +
              height +
              ' format:' +
              this.__formatParam +
              ' type:' +
              this.__typeParam +
              ' Data Length:' +
              data.length +
              ' Expected:' +
              numPixels * numChannels
          );
        }
        if (this.__type == gl.HALF_FLOAT && data instanceof Float32Array) {
          data = Math.convertFloat32ArrayToUInt16Array(data);
        }
        if (gl.name == 'webgl2') {
          gl.texImage2D(
            gl.TEXTURE_2D,
            0,
            this.__internalFormat,
            width,
            height,
            0,
            this.__format,
            this.__type,
            data,
            0
          );
        } else {
          gl.texImage2D(
            gl.TEXTURE_2D,
            0,
            this.__internalFormat,
            width,
            height,
            0,
            this.__format,
            this.__type,
            data
          );
        }
        // These values may not have changed....
        this.width = width;
        this.height = height;
      }

      if (this.__mipMapped) {
        gl.generateMipmap(gl.TEXTURE_2D);
      }
    } else {
      gl.texImage2D(
        gl.TEXTURE_2D,
        0,
        this.__internalFormat,
        this.width,
        this.height,
        0,
        this.__format,
        this.__type,
        null
      );

      // simply resize the buffer.
      this.width = width;
      this.height = height;
    }

    if (emit) {
      this.updated.emit();
    }
  }

  /**
   * The clear method.
   */
  clear() {
    const gl = this.__gl;
    const numPixels = this.width * this.height;
    let numChannels;
    switch (this.__format) {
      case gl.RED:
      case gl.RED_INTEGER:
      case gl.ALPHA:
      case gl.LUMINANCE:
      case gl.LUMINANCE_ALPHA:
        numChannels = 1;
        break
      case gl.RG:
        numChannels = 2;
        break
      case gl.RGB:
        numChannels = 3;
        break
      case gl.RGBA:
        numChannels = 4;
        break
      default:
        throw new Error('Invalid Format')
    }
    let data;
    switch (this.__type) {
      case gl.UNSIGNED_BYTE:
        data = new UInt8Array(numPixels * numChannels);
        break
      case gl.HALF_FLOAT:
        data = new UInt16Array(numPixels * numChannels);
        break
      case gl.FLOAT:
        data = new Float32Array(numPixels * numChannels);
        break
      default:
        throw new Error('Invalid Type')
    }

    if (gl.name == 'webgl2') {
      gl.texImage2D(
        gl.TEXTURE_2D,
        0,
        this.__internalFormat,
        this.width,
        this.height,
        0,
        this.__format,
        this.__type,
        data,
        0
      );
    } else {
      gl.texImage2D(
        gl.TEXTURE_2D,
        0,
        this.__internalFormat,
        this.width,
        this.height,
        0,
        this.__format,
        this.__type,
        data
      );
    }
  }

  /**
   * The resize method.
   * @param {number} width - The width value.
   * @param {number} height - The height value.
   * @param {boolean} preserveData - The preserveData value.
   * @param {boolean} emit - The emit value.
   */
  resize(width, height, preserveData = false, emit = true) {
    const gl = this.__gl;
    const sizeChanged = this.width != width || this.height != height;
    if (sizeChanged) {
      const maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
      if (width < 0 || width > maxSize || height < 0 || height > maxSize) {
        throw new Error(
          'gl-texture2d: Invalid texture size. width:' +
            width +
            ' height:' +
            height +
            ' maxSize:' +
            maxSize
        )
      }

      if (preserveData) {
        const gltex = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, gltex);
        gl.texImage2D(
          gl.TEXTURE_2D,
          0,
          this.__internalFormat,
          width,
          height,
          0,
          this.__format,
          this.__type,
          null
        );
        const fbo = gl.createFramebuffer();
        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
        gl.framebufferTexture2D(
          gl.FRAMEBUFFER,
          gl.COLOR_ATTACHMENT0,
          gl.TEXTURE_2D,
          this.__gltex,
          0
        );

        gl.bindTexture(gl.TEXTURE_2D, gltex); // Do we need this line?
        gl.copyTexImage2D(
          gl.TEXTURE_2D,
          0,
          this.__internalFormat,
          0,
          0,
          this.width,
          this.height,
          0
        );

        gl.bindFramebuffer(gl.FRAMEBUFFER, null);

        gl.deleteFramebuffer(fbo);

        this.__gl.deleteTexture(this.__gltex);
        this.__gltex = gltex;
        this.__updateGLTexParams();
      } else {
        gl.bindTexture(gl.TEXTURE_2D, this.__gltex);
        gl.texImage2D(
          gl.TEXTURE_2D,
          0,
          this.__internalFormat,
          width,
          height,
          0,
          this.__format,
          this.__type,
          null
        );
      }

      this.width = width;
      this.height = height;

      if (emit) {
        this.resized.emit(width, height);
      }
    }
  }

  // Upload data for the image to the GPU.
  populate(dataArray, width, height, offsetX=0, offsetY=0, bind=true) {
    const gl = this.__gl;
    if (bind)
      gl.bindTexture(gl.TEXTURE_2D, this.__gltex);
    gl.texSubImage2D(
      gl.TEXTURE_2D,
      0,
      offsetX,
      offsetY,
      width,
      height,
      this.__format,
      this.__type,
      dataArray
    );
  }

  /**
   * The getSize method.
   * @return {any} - The return value.
   */
  getSize() {
    return [this.width, this.height]
  }

  /**
   * The glTex method.
   * @return {any} - The return value.
   */
  get glTex() {
    return this.__gltex
  }

  /**
   * The getTexHdl method.
   * @return {any} - The return value.
   */
  getTexHdl() {
    return this.__gltex
  }

  /**
   * The bind method.
   * @param {any} renderstate - The renderstate value.
   * @param {any} unif - The unif value.
   * @return {any} - The return value.
   */
  bind(renderstate, unif) {
    console.warn("'bind' is deprecated. Please use 'bindToUniform'");
    return this.bindToUniform(renderstate, unif)
  }

  /**
   * The preBind method.
   * @param {any} unif - The unif value.
   * @param {any} unifs - The unifs value.
   * @return {any} - The return value.
   */
  preBind(unif, unifs) {
    return {
      textureTypeUnif: unifs[unif.name + 'Type'],
      textureDescUnif: unifs[unif.name + 'Desc'],
    }
  }

  /**
   * The bindToUniform method.
   * @param {any} renderstate - The renderstate value.
   * @param {any} unif - The unif value.
   * @param {any} bindings - The bindings value.
   * @return {any} - The return value.
   */
  bindToUniform(renderstate, unif, bindings) {
    if (!this.__loaded) {
      return false
    }
    if (!this.__gltex) {
      throw new Error('Unable to bind non-initialized or deleted texture.')
    }

    const unit = renderstate.boundTextures++;
    const texId = this.__gl.TEXTURE0 + unit;
    const gl = this.__gl;
    gl.activeTexture(texId);
    gl.bindTexture(gl.TEXTURE_2D, this.__gltex);
    gl.uniform1i(unif.location, unit);

    if (bindings) {
      if (bindings.textureTypeUnif) {
        gl.uniform1i(bindings.textureTypeUnif.location, this.textureType);
      }

      if (bindings.textureDescUnif) {
        this.__gl.uniform4fv(
          bindings.textureDescUnif.location,
          this.textureDesc
        );
      }
    }

    return true
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    super.destroy();
    if (this.__texture) {
      this.__texture.setMetadata('gltexture', undefined);
    }
    this.__gl.deleteTexture(this.__gltex);
    this.__gltex = undefined;
  }
}

/** Class representing a geom shader binding. 
 * @private
*/
class GeomShaderBinding {
  /**
   * Create a geom shader binding.
   * @param {any} gl - The gl value.
   * @param {any} shaderAttrs - The shader attributes.
   * @param {any} glattrbuffers - The glattrbuffers value.
   * @param {any} indexBuffer - The index buffer.
   */
  constructor(gl, shaderAttrs, glattrbuffers, indexBuffer) {
    this.__gl = gl;
    this.__shaderAttrs = shaderAttrs;
    this.__glattrbuffers = glattrbuffers;
    this.__indexBuffer = indexBuffer;
  }

  /**
   * The bind method.
   * @param {any} renderstate - The render state.
   * @return {any} - The return value.
   */
  bind(renderstate) {
    const gl = this.__gl;

    for (const attrName in this.__shaderAttrs) {
      if (attrName == 'instancedIds') continue
      const attrDesc = this.__shaderAttrs[attrName];
      const location = attrDesc.location;
      if (location == -1) continue
      const glattrbuffer = this.__glattrbuffers[attrName];
      if (!glattrbuffer) {
        gl.disableVertexAttribArray(location);
        continue
      }

      let dimension;
      let elementSize;
      let dataType;
      switch (glattrbuffer.dataType) {
        case UInt8:
          dimension = 1;
          elementSize = 4;
          dataType = gl.UNSIGNED_BYTE;
          break
        case SInt8:
          dimension = 1;
          elementSize = 4;
          dataType = gl.BYTE;
          break
        case UInt16:
          dimension = 1;
          elementSize = 4;
          dataType = gl.UNSIGNED_SHORT;
          break
        case SInt16:
          dimension = 1;
          elementSize = 4;
          dataType = gl.SHORT;
          break
        case UInt32:
          dimension = 1;
          elementSize = 4;
          dataType = gl.UNSIGNED_INT;
          break
        case SInt32:
          dimension = 1;
          elementSize = 4;
          dataType = gl.INT;
          break
        case Float32:
          dimension = 1;
          elementSize = 4;
          dataType = gl.FLOAT;
          break
        case Vec2:
          dimension = 2;
          elementSize = 4;
          dataType = gl.FLOAT;
          break
        case Vec3$1:
          dimension = 3;
          elementSize = 4;
          dataType = gl.FLOAT;
          break
        case Vec4$1:
        case Color:
          dimension = 4;
          elementSize = 4;
          dataType = gl.FLOAT;
          break
        case RGBA:
          dimension = 4;
          elementSize = 1;
          dataType = gl.UNSIGNED_BYTE;
          break
        default: throw("Unhandled Type")
      }

      const stride = dimension * elementSize;
      const offset =
        glattrbuffer.offset != undefined
          ? glattrbuffer.offset * dimension * elementSize
          : 0;
      const normalized = glattrbuffer.normalized == true;
      const instanced = attrDesc.instanced;

      gl.enableVertexAttribArray(location);
      gl.bindBuffer(gl.ARRAY_BUFFER, glattrbuffer.buffer);
      gl.vertexAttribPointer(
        location,
        dimension,
        dataType,
        normalized,
        stride,
        offset
      );

      if (gl.vertexAttribDivisor) {
        if (instanced == true) {
          gl.vertexAttribDivisor(location, 1); // This makes it instanced
        } else {
          gl.vertexAttribDivisor(location, 0); // This makes it not-instanced
        }
      }

      // console.log("Binding :" + attrName + " to attr:" + location + " count:" + glattrbuffer.count + " dimension:" + dimension  + " stride:" + stride  + " offset:" + offset + " normalized:" + normalized + " instanced:" + instanced);
    }

    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.__indexBuffer);

    return true
  }

  /**
   * The unbind method.
   */
  unbind() {
    const gl = this.__gl;
    for (const attrName in this.__shaderAttrs) {
      const attrDesc = this.__shaderAttrs[attrName];
      const location = attrDesc.location;
      if (location == -1) continue
      gl.disableVertexAttribArray(location);
      gl.vertexAttribDivisor(location, 0); // This makes it not-instanced

      // console.log("Binding :" + attrName + " to attr:" + location + " count:" + glattrbuffer.count + " dimension:" + dimension  + " stride:" + stride  + " offset:" + offset + " normalized:" + normalized + " instanced:" + instanced);
    }

    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {}
}

/** Class representing vertex array objects (VAO) geom shader binding. 
 * @private
*/
class VAOGeomShaderBinding {
  /**
   * Create VAO geom shader binding.
   * @param {any} gl - The gl value.
   * @param {any} shaderAttrs - The shaderAttrs value.
   * @param {any} glattrbuffers - The glattrbuffers value.
   * @param {any} indexBuffer - The indexBuffer value.
   */
  constructor(gl, shaderAttrs, glattrbuffers, indexBuffer) {
    this.__gl = gl;
    this.__vao = gl.createVertexArray();
    gl.bindVertexArray(this.__vao);

    for (const attrName in shaderAttrs) {
      if (attrName == 'instancedIds') continue

      const attrDesc = shaderAttrs[attrName];
      const location = attrDesc.location;
      if (location == -1) continue
      const glattrbuffer = glattrbuffers[attrName];
      if (!glattrbuffer) {
        // console.warn("glattrbuffer missing:" + attrName + " location:" + location);
        gl.disableVertexAttribArray(location);
        continue
      }

      let dimension;
      let elementSize;
      let dataType;
      switch (glattrbuffer.dataType) {
        case UInt8:
          dimension = 1;
          elementSize = 4;
          dataType = gl.UNSIGNED_BYTE;
          break
        case SInt8:
          dimension = 1;
          elementSize = 4;
          dataType = gl.BYTE;
          break
        case UInt16:
          dimension = 1;
          elementSize = 4;
          dataType = gl.UNSIGNED_SHORT;
          break
        case SInt16:
          dimension = 1;
          elementSize = 4;
          dataType = gl.SHORT;
          break
        case UInt32:
          dimension = 1;
          elementSize = 4;
          dataType = gl.UNSIGNED_INT;
          break
        case SInt32:
          dimension = 1;
          elementSize = 4;
          dataType = gl.INT;
          break
        case Float32:
          dimension = 1;
          elementSize = 4;
          dataType = gl.FLOAT;
          break
        case Vec2:
          dimension = 2;
          elementSize = 4;
          dataType = gl.FLOAT;
          break
        case Vec3$1:
          dimension = 3;
          elementSize = 4;
          dataType = gl.FLOAT;
          break
        case Vec4$1:
        case Color:
          dimension = 4;
          elementSize = 4;
          dataType = gl.FLOAT;
          break
        case RGBA:
          dimension = 4;
          elementSize = 1;
          dataType = gl.UNSIGNED_BYTE;
          break
        default: throw("Unhandled Type")
      }

      const stride = dimension * elementSize;
      const offset =
        glattrbuffer.offset != undefined
          ? glattrbuffer.offset * dimension * elementSize
          : 0;
      const normalized = glattrbuffer.normalized == true;
      const instanced = attrDesc.instanced;

      gl.enableVertexAttribArray(location);
      gl.bindBuffer(gl.ARRAY_BUFFER, glattrbuffer.buffer);
      gl.vertexAttribPointer(
        location,
        dimension,
        dataType,
        normalized,
        stride,
        offset
      );
      if (instanced) {
        gl.vertexAttribDivisor(location, 1); // This makes it instanced
      } else {
        gl.vertexAttribDivisor(location, 0); // This makes it not-instanced
      }

      // console.log("Binding :" + attrName + " to attr:" + location + " count:" + glattrbuffer.count + " dimension:" + dimension  + " stride:" + stride  + " offset:" + offset + " normalized:" + normalized + " instanced:" + instanced);
    }

    this.__indexBuffer = indexBuffer;
  }

  /**
   * The bind method.
   * @param {any} renderstate - The render state.
   * @return {any} - The return value.
   */
  bind(renderstate) {
    this.__gl.bindVertexArray(this.__vao);
    if (this.__indexBuffer)
      this.__gl.bindBuffer(this.__gl.ELEMENT_ARRAY_BUFFER, this.__indexBuffer);
    return true
  }

  /**
   * The unbind method.
   */
  unbind() {
    const gl = this.__gl;
    for (const attrName in this.__shaderAttrs) {
      const attrDesc = this.__shaderAttrs[attrName];
      const location = attrDesc.location;
      if (location == -1) continue
      gl.disableVertexAttribArray(location);
      gl.vertexAttribDivisor(location, 0); // This makes it not-instanced

      // console.log("Unbinding :" + attrName + " to attr:" + location + " count:" + glattrbuffer.count + " dimension:" + dimension  + " stride:" + stride  + " offset:" + offset + " normalized:" + normalized + " instanced:" + instanced);
    }

    this.__gl.bindVertexArray(null);
    if (this.__indexBuffer) gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    this.__gl.deleteVertexArray(this.__vao);
  }
}

function generateShaderGeomBinding(
  gl,
  shaderAttrs,
  glattrbuffers,
  indexBuffer
) {
  if (gl.createVertexArray == null) {
    return new GeomShaderBinding(gl, shaderAttrs, glattrbuffers, indexBuffer)
  } else {
    return new VAOGeomShaderBinding(gl, shaderAttrs, glattrbuffers, indexBuffer)
  }
}

/** Class representing a GL geom.
 * @private
 */
class GLGeom extends RefCounted {
  /**
   * Create a GL geom.
   * @param {any} gl - The gl value.
   * @param {any} geom - The geom value.
   */
  constructor(gl, geom) {
    super();
    this.__gl = gl;
    this.__geom = geom;
    this.__glattrs = {};

    this.__glattrbuffers = {};
    this.__shaderBindings = {};
    this.destructing = new Signal();
    this.updated = new Signal();

    const updateBuffers = opts => {
      this.updateBuffers(opts);
      this.updated.emit();
    };
    this.__geom.geomDataChanged.connect(updateBuffers);

    const regenBuffers = opts => {
      this.clearShaderBindings();
      this.updateBuffers(opts);
      this.updated.emit();
    };
    this.__geom.geomDataTopologyChanged.connect(regenBuffers);
  }

  /**
   * The getGeom method.
   * @return {any} - The return value.
   */
  getGeom() {
    return this.__geom
  }

  // /////////////////////////////////////
  // Buffers

  /**
   * The genBuffers method.
   */
  genBuffers() {}

  /**
   * The updateBuffers method.
   * @param {any} opts - The opts value.
   */
  updateBuffers(opts) {}

  // /////////////////////////////////////
  // Binding

  /**
   * The bind method.
   * @param {any} renderstate - The renderstate value.
   * @return {any} - The return value.
   */
  bind(renderstate) {
    if (this.__destroyed) throw new Error('Error binding a destroyed geom')

    let shaderBinding = this.__shaderBindings[renderstate.shaderkey];
    if (!shaderBinding) {
      const gl = this.__gl;
      shaderBinding = generateShaderGeomBinding(
        gl,
        renderstate.attrs,
        this.__glattrbuffers,
        this.__indexBuffer
      );
      this.__shaderBindings[renderstate.shaderkey] = shaderBinding;
    }
    shaderBinding.bind(renderstate);
    return true
  }

  /**
   * The unbind method.
   * @param {any} renderstate - The renderstate value.
   */
  unbind(renderstate) {
    // Unbinding a geom is important as it puts back some important
    // GL state. (vertexAttribDivisor)
    const shaderBinding = this.__shaderBindings[renderstate.shaderkey];
    if (shaderBinding) {
      shaderBinding.unbind(renderstate);
    }
  }

  // /////////////////////////////////////
  // Drawing
  // Draw an item to screen.

  /**
   * The draw method.
   */
  draw() {
    throw new Error(
      'Not implemented. Implement this method in a derived class.'
    )
  }

  /**
   * The drawInstanced method.
   * @param {any} instanceCount - The instanceCount param.
   */
  drawInstanced(instanceCount) {
    throw new Error(
      'Not implemented. Implement this method in a derived class.'
    )
  }

  /**
   * The bindAndDraw method.
   * @param {any} renderstate - The renderstate value.
   */
  bindAndDraw(renderstate) {
    this.bind(renderstate);
    this.draw(renderstate);
  }

  /**
   * The clearShaderBindings method.
   */
  clearShaderBindings() {
    for (const shaderkey in this.__shaderBindings) {
      const shaderBinding = this.__shaderBindings[shaderkey];
      shaderBinding.destroy();
    }
    this.__shaderBindings = {};
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    this.__geom.deleteMetadata('glgeom');

    this.clearShaderBindings();

    const gl = this.__gl;
    // eslint-disable-next-line guard-for-in
    for (const attrName in this.__glattrbuffers) {
      const glbuffer = this.__glattrbuffers[attrName];
      if (glbuffer.shared)
        continue /* This buffer is shared between geoms. do not destroy */
      gl.deleteBuffer(glbuffer.buffer);
    }
    this.__glattrs = {};

    this.__shaderBindings = {};
    this.__destroyed = true;
    this.destructing.emit(this);
  }
}

/** Class representing a GL mesh.
 * @extends GLGeom
 * @private
 */
class GLMesh extends GLGeom {
  /**
   * Create a GL mesh.
   * @param {any} gl - The gl value.
   * @param {any} mesh - The mesh value.
   */
  constructor(gl, mesh) {
    super(gl, mesh);
    this.genBuffers();
  }

  /**
   * The getNumTriangles method.
   * @return {any} - The return value.
   */
  getNumTriangles() {
    return this.__numTriangles
  }

  // /////////////////////////////////////
  // Buffers

  /**
   * The genBuffers method.
   */
  genBuffers() {
    super.genBuffers();

    const gl = this.__gl;

    const geomBuffers = this.__geom.genBuffers();
    const indices = geomBuffers.indices;
    this.__numTriIndices = geomBuffers.indices.length;
    if (indices instanceof Uint8Array)
      this.__indexDataType = this.__gl.UNSIGNED_BYTE;
    if (indices instanceof Uint16Array)
      this.__indexDataType = this.__gl.UNSIGNED_SHORT;
    if (indices instanceof Uint32Array)
      this.__indexDataType = this.__gl.UNSIGNED_INT;

    this.__numTriangles = indices.length / 3;
    this.__numRenderVerts = geomBuffers.numRenderVerts;

    this.__indexBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.__indexBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, geomBuffers.indices, gl.STATIC_DRAW);

    // Create some vertex attribute buffers
    // const debugAttrValues = false;
    // let maxIndex;
    // if (debugAttrValues)
    //   maxIndex = Math.max(...indices);
    for (const attrName in geomBuffers.attrBuffers) {
      const attrData = geomBuffers.attrBuffers[attrName];

      const attrBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, attrBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, attrData.values, gl.STATIC_DRAW);

      this.__glattrbuffers[attrName] = {
        buffer: attrBuffer,
        dataType: attrData.dataType,
        normalized: attrData.normalized,
      };

      if (attrName == 'textureCoords')
        this.__glattrbuffers['texCoords'] = this.__glattrbuffers[
          'textureCoords'
        ];
    }
  }

  /**
   * The updateBuffers method.
   * @param {any} opts - The opts value.
   */
  updateBuffers(opts) {
    const gl = this.__gl;

    const geomBuffers = this.__geom.genBuffers({ includeIndices: false });
    for (const attrName in geomBuffers.attrBuffers) {
      const attrData = geomBuffers.attrBuffers[attrName];
      const glattr = this.__glattrbuffers[attrName];
      gl.bindBuffer(gl.ARRAY_BUFFER, glattr.buffer);
      gl.bufferData(gl.ARRAY_BUFFER, attrData.values, gl.STATIC_DRAW);
    }
  }

  /**
   * The getNumUnSplitVerts method.
   * @return {any} - The return value.
   */
  getNumUnSplitVerts() {
    return this.__geom.vertices.length
  }

  /**
   * The getNumSplitVerts method.
   * @return {any} - The return value.
   */
  getNumSplitVerts() {
    return this.__numRenderVerts
  }

  // ////////////////////////////////
  // Wireframes

  /**
   * The generateWireframesVAO method.
   * @return {any} - The return value.
   */
  generateWireframesVAO() {
    if (!this.__vao) return false

    if (!this.__geom.edgeVerts) this.__geom.genTopologyInfo();

    // Generate the wireframes VAO.
    // It can share buffers with the regular VAO, but provide a different index buffer.
    if (this.__wireframesVao)
      this.__ext.deleteVertexArrayOES(this.__wireframesVao);
    this.__wireframesVao = this.__ext.createVertexArrayOES();
    this.__ext.bindVertexArrayOES(this.__wireframesVao);

    const gl = this.__gl;
    const wireframeIndexBuffer = gl.createBuffer();
    const wireframeIndices = Uint32Array.from(this.__geom.edgeVerts);
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, wireframeIndexBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, wireframeIndices, gl.STATIC_DRAW);

    const positionsBuffer = this.__glattrbuffers['positions'].buffer;
    gl.enableVertexAttribArray(0);
    gl.bindBuffer(gl.ARRAY_BUFFER, positionsBuffer);
    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 3 * 4, 0);

    this.__numWireIndices = wireframeIndices.length;
    this.__ext.bindVertexArrayOES(null); // Note: is this necessary?
  }

  /**
   * The bindWireframeVAO method.
   * @param {any} renderstate - The renderstate value.
   * @return {any} - The return value.
   */
  bindWireframeVAO(renderstate) {
    if (this.__wireframesVao == undefined) return false
    this.__ext.bindVertexArrayOES(this.__wireframesVao);
    return true
  }

  /**
   * The unbindWireframeVAO method.
   */
  unbindWireframeVAO() {
    this.__ext.bindVertexArrayOES(null); // Note: is this necessary?
  }

  /**
   * Draw an item to screen.
   */
  drawWireframe() {
    if (this.__wireframesVao)
      this.__gl.drawElements(
        this.__gl.LINES,
        this.__numWireIndices,
        this.__gl.UNSIGNED_INT,
        0
      );
  }

  // ////////////////////////////////
  // Hard Edges

  /**
   * The generateHardEdgesVAO method.
   * @return {any} - The return value.
   */
  generateHardEdgesVAO() {
    if (!this.__vao) return false

    if (!this.__geom.edgeVerts) this.__geom.generateHardEdgesFlags();

    // generate the wireframes VAO.
    // It can share buffers with the regular VAO, but provide a different index buffer.
    if (this.__hardEdgesVao)
      this.__ext.deleteVertexArrayOES(this.__hardEdgesVao);
    this.__hardEdgesVao = this.__ext.createVertexArrayOES();
    this.__ext.bindVertexArrayOES(this.__hardEdgesVao);

    const gl = this.__gl;
    const hardEdgeIndexBuffer = gl.createBuffer();
    const hardEdgeIndices = Uint32Array.from(
      this.__geom.computeHardEdgesIndices()
    );
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, hardEdgeIndexBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, hardEdgeIndices, gl.STATIC_DRAW);

    const positionsBuffer = this.__glattrbuffers['positions'].buffer;
    gl.enableVertexAttribArray(0);
    gl.bindBuffer(gl.ARRAY_BUFFER, positionsBuffer);
    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 3 * 4, 0);

    this.__numEdgeIndices = hardEdgeIndices.length;
    this.__ext.bindVertexArrayOES(null); // Note: is this necessary?
  }

  /**
   * The bindHardEdgesVAO method.
   * @param {any} renderstate - The renderstate value.
   * @return {any} - The return value.
   */
  bindHardEdgesVAO(renderstate) {
    if (this.__hardEdgesVao == undefined) return false
    this.__ext.bindVertexArrayOES(this.__hardEdgesVao);
    return true
  }

  /**
   * The unbindHardEdgesVAO method.
   */
  unbindHardEdgesVAO() {
    this.__ext.bindVertexArrayOES(null); // Note: is this necessary?
  }

  /**
   * Draw an item to screen.
   */
  drawHardEdges() {
    if (this.__hardEdgesVao)
      this.__gl.drawElements(
        this.__gl.LINES,
        this.__numEdgeIndices,
        this.__gl.UNSIGNED_INT,
        0
      );
  }

  // ////////////////////////////////
  // Drawing Mesh Points.

  /**
   * The drawPoints method.
   */
  drawPoints() {
    this.__gl.drawArrays(this.__gl.POINTS, 0, this.__geom.numVertices());
  }

  // ////////////////////////////////
  // Regular Drawing.

  /**
   * Draw an item to screen.
   */
  draw() {
    this.__gl.drawElements(
      this.__gl.TRIANGLES,
      this.__numTriIndices,
      this.__indexDataType,
      0
    );
  }

  /**
   * The drawInstanced method.
   * @param {any} instanceCount - The instanceCount value.
   */
  drawInstanced(instanceCount) {
    this.__gl.drawElementsInstanced(
      this.__gl.TRIANGLES,
      this.__numTriIndices,
      this.__indexDataType,
      0,
      instanceCount
    );
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    super.destroy();
    const gl = this.__gl;
    gl.deleteBuffer(this.__indexBuffer);
    this.__indexBuffer = undefined;
    // if (this.__wireframesVao)
    //     gl.deleteVertexArray(this.__wireframesVao);
    // if (this.__hardEdgesVao)
    //     gl.deleteVertexArray(this.__hardEdgesVao);
  }
}

/** Class representing GL lines.
 * @extends GLGeom
 * @private
 */
class GLLines extends GLGeom {
  /**
   * Create a GL line.
   * @param {any} gl - The gl value.
   * @param {any} lines - The geom value.
   */
  constructor(gl, lines) {
    super(gl, lines);

    this.genBuffers();
  }

  /**
   * The genBuffers method.
   */
  genBuffers() {
    super.genBuffers();


    const gl = this.__gl;
    const geomBuffers = this.__geom.genBuffers();
    const indices = geomBuffers.indices;

    this.fatLines =
      (this.__geom.lineThickness > 0 ||
        geomBuffers.attrBuffers.lineThickness) &&
      gl.floatTexturesSupported;

    if (this.fatLines) {
      if (!gl.__quadVertexIdsBuffer) {
        gl.setupInstancedQuad();
      }
      this.__glattrbuffers.vertexIDs = gl.__quadattrbuffers.vertexIDs;

      this.__drawCount = indices.length / 2;

      const vertexAttributes = this.__geom.getVertexAttributes();
      const positions = vertexAttributes.positions;
      const lineThicknessAttr = vertexAttributes.lineThickness;

      const stride = 4; // The number of floats per draw item.
      const dataArray = new Float32Array(positions.length * stride);
      for (let i = 0; i < positions.length; i++) {
        const pos = Vec3$1.createFromFloat32Buffer(dataArray.buffer, i * 4);
        pos.setFromOther(positions.getValueRef(i));

        // The thickness of the line.
        if (lineThicknessAttr)
          dataArray[i * 4 + 3] = lineThicknessAttr.getFloat32Value(i);
        else dataArray[i * 4 + 3] = this.__geom.lineThickness;
      }
      this.__positionsTexture = new GLTexture2D(gl, {
        format: 'RGBA',
        type: 'FLOAT',
        width: positions.length,
        /* each pixel has 4 floats*/
        height: 1,
        filter: 'NEAREST',
        wrap: 'CLAMP_TO_EDGE',
        data: dataArray,
        mipMapped: false,
      });

      const indexArray = new Float32Array(indices.length);
      for (let i = 0; i < indices.length; i++) {
        let seqentialIndex;
        if (i % 2 == 0) {
          seqentialIndex =
            i > 0
              ? indices[i] == indices[i - 1]
              : indices[i] == indices[indices.length - 1];
        } else {
          seqentialIndex =
            i < indices.length - 1
              ? indices[i] == indices[i + 1]
              : indices[i] == indices[0];
        }
        // encode the flag into the indices values.
        // this flag is decoded in GLSL.
        indexArray[i] = (seqentialIndex ? 1 : 0) + indices[i] * 2;
      }
      const indexBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, indexArray, gl.STATIC_DRAW);

      this.__glattrbuffers.segmentIndices = {
        buffer: indexBuffer,
        dimension: 2,
      };
    } else {
      this.__indexBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.__indexBuffer);
      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);

      for (const attrName in geomBuffers.attrBuffers) {
        const attrData = geomBuffers.attrBuffers[attrName];

        const attrBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, attrBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, attrData.values, gl.STATIC_DRAW);

        this.__glattrbuffers[attrName] = {
          buffer: attrBuffer,
          dataType: attrData.dataType,
          normalized: attrData.normalized,
        };
      }

      // Cache the size so we know later if it changed (see below)
      this.__numSegIndices = indices.length;
      this.__numVertices = geomBuffers.numVertices;
    }

    if (indices instanceof Uint8Array)
      this.__indexDataType = this.__gl.UNSIGNED_BYTE;
    if (indices instanceof Uint16Array)
      this.__indexDataType = this.__gl.UNSIGNED_SHORT;
    if (indices instanceof Uint32Array)
      this.__indexDataType = this.__gl.UNSIGNED_INT;
  }

  /**
   * The updateBuffers method.
   * @param {any} opts - The opts value.
   */
  updateBuffers(opts) {
    const gl = this.__gl;
    const geomBuffers = this.__geom.genBuffers();
    const indices = geomBuffers.indices;

    if (this.fatLines) {
      this.__drawCount = indices.length / 2; // every pair of verts draws a quad.

      const vertexAttributes = this.__geom.getVertexAttributes();

      const positions = vertexAttributes.positions;
      const lineThicknessAttr = vertexAttributes.lineThickness;

      const stride = 4; // The number of floats per draw item.
      const dataArray = new Float32Array(positions.length * stride);
      for (let i = 0; i < positions.length; i++) {
        const pos = Vec3$1.createFromFloat32Buffer(dataArray.buffer, i * 4);
        pos.setFromOther(positions.getValueRef(i));

        // The thickness of the line.
        if (lineThicknessAttr)
          dataArray[i * 4 + 3] = lineThicknessAttr.getFloat32Value(i);
        else dataArray[i * 4 + 3] = this.__geom.lineThickness;
      }

      this.__positionsTexture.bufferData(dataArray, positions.length, 1);

      const indexArray = new Float32Array(indices.length);
      for (let i = 0; i < indices.length; i++) {
        let seqentialIndex;
        if (i % 2 == 0) seqentialIndex = i > 0 && indices[i] == indices[i - 1];
        else
          seqentialIndex =
            i < indices.length - 1 && indices[i] == indices[i + 1];
        indexArray[i] = (seqentialIndex ? 1 : 0) + indices[i] * 2;
      }

      gl.bindBuffer(gl.ARRAY_BUFFER, this.__glattrbuffers.segmentIndices.buffer);
      gl.bufferData(gl.ARRAY_BUFFER, indexArray, gl.STATIC_DRAW);
    } else {
      const vertexAttributes = this.__geom.getVertexAttributes();

      if (opts && opts.indicesChanged) {
        const indices = this.__geom.getIndices();
        if (this.__numSegIndices != indices.length) {
          gl.deleteBuffer(this.__indexBuffer);
          this.__indexBuffer = gl.createBuffer();
        }
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.__indexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
        this.__numSegIndices = indices.length;
      }

      // Update the vertex attribute buffers
      const numVertsChanged = geomBuffers.numVertices != this.__numVertices;
      for (const attrName in geomBuffers.attrBuffers) {
        const attrData = geomBuffers.attrBuffers[attrName];
        const glattr = this.__glattrbuffers[attrName];
        if (numVertsChanged) {
          gl.deleteBuffer(glattr.buffer);
          glattr.buffer = gl.createBuffer();
        }
        gl.bindBuffer(gl.ARRAY_BUFFER, glattr.buffer);
        gl.bufferData(gl.ARRAY_BUFFER, attrData.values, gl.STATIC_DRAW);
      }

      // Cache the size so we know later if it changed (see below)
      this.__numVertices = geomBuffers.numVertices;
      this.__numSegIndices = indices.length;
    }

    if (indices instanceof Uint8Array)
      this.__indexDataType = this.__gl.UNSIGNED_BYTE;
    if (indices instanceof Uint16Array)
      this.__indexDataType = this.__gl.UNSIGNED_SHORT;
    if (indices instanceof Uint32Array)
      this.__indexDataType = this.__gl.UNSIGNED_INT;
  }

  /**
   * The bind method.
   * @param {any} renderstate - The renderstate value.
   * @return {any} - The return value.
   */
  bind(renderstate) {
    if (this.fatLines && 'LineThickness' in renderstate.unifs) {
      // TODO: Provide a geomdata shader for thick lines.

      const gl = this.__gl;

      let shaderBinding = this.__shaderBindings[renderstate.shaderkey];
      if (!shaderBinding) {
        shaderBinding = generateShaderGeomBinding(
          gl,
          renderstate.attrs,
          this.__glattrbuffers,
          gl.__quadIndexBuffer
        );
        this.__shaderBindings[renderstate.shaderkey] = shaderBinding;
      }
      shaderBinding.bind(renderstate);
      {
        const unifs = renderstate.unifs;
        if (unifs.positionsTexture) {
          this.__positionsTexture.bindToUniform(
            renderstate,
            unifs.positionsTexture
          );
          gl.uniform1i(
            unifs.positionsTextureSize.location,
            this.__positionsTexture.width
          );
        }
      }

      const unifs = renderstate.unifs;
      gl.uniform1f(
        unifs.LineThickness.location,
        (this.__geom.lineThickness ? this.__geom.lineThickness : 1.0) *
          renderstate.viewScale
      );
      return true
    } else {
      return super.bind(renderstate)
    }
  }

  // ////////////////////////////////
  // Drawing Lines Points.

  /**
   * The drawPoints method.
   */
  drawPoints() {
    this.__gl.drawArrays(this.__gl.POINTS, 0, this.__geom.numVertices());
  }

  // ////////////////////////////////
  // Regular Drawing.

  /**
   * The draw method.
   * @param {any} renderstate - The renderstate value.
   */
  draw(renderstate) {
    const gl = this.__gl;
    if (this.fatLines) {
      if (renderstate.unifs.LineThickness)
        gl.drawElementsInstanced(
          gl.TRIANGLES,
          6,
          gl.UNSIGNED_SHORT,
          0,
          this.__drawCount
        );

      // Note: We don't have a solution for drawing fat lines to the geom data buffer.
    } else {
      gl.drawElements(
        this.__gl.LINES,
        this.__numSegIndices,
        this.__indexDataType,
        0
      );
    }
  }

  /**
   * The drawInstanced method.
   * @param {any} instanceCount - The instanceCount value.
   */
  drawInstanced(instanceCount) {
    this.__gl.drawElementsInstanced(
      this.__gl.LINES,
      this.__numSegIndices,
      this.__indexDataType,
      0,
      instanceCount
    );
  }
}

/** Class representing GL points.
 * @extends GLGeom
 * @private
 */
class GLPoints extends GLGeom {
  /**
   * Create a GL point.
   * @param {any} gl - The gl value.
   * @param {any} points - The points value.
   */
  constructor(gl, points) {
    super(gl, points);
    this.genBuffers();
  }

  /**
   * The genBuffers method.
   */
  genBuffers() {
    super.genBuffers();

    const gl = this.__gl;

    const geomBuffers = this.__geom.genBuffers();

    for (const attrName in geomBuffers.attrBuffers) {
      const attrData = geomBuffers.attrBuffers[attrName];

      const attrBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, attrBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, attrData.values, gl.STATIC_DRAW);

      this.__glattrbuffers[attrName] = {
        buffer: attrBuffer,
        dataType: attrData.dataType,
        normalized: attrData.normalized
      };
    }

    this.__numVerts = geomBuffers.numVertices;
    this.__vboState = 2;
  }

  /**
   * The bind method.
   * @param {any} renderstate - The renderstate value.
   * @return {any} - The return value.
   */
  bind(renderstate) {
    if (renderstate.unifs.PointSize) {
      const gl = this.__gl;
      let shaderBinding = this.__shaderBindings[renderstate.shaderkey];
      if (!shaderBinding) {
        if (!gl.__quadVertexIdsBuffer) gl.setupInstancedQuad();

        // Merge the points attrs with the quad attrs.
        const attrbuffers = Object.assign(
          this.__glattrbuffers,
          gl.__quadattrbuffers
        );

        shaderBinding = generateShaderGeomBinding(
          gl,
          renderstate.attrs,
          attrbuffers,
          gl.__quadIndexBuffer
        );
        this.__shaderBindings[renderstate.shaderkey] = shaderBinding;
      }
      shaderBinding.bind(renderstate);
      return true
    } else {
      return super.bind(renderstate)
    }
  }

  /**
   * The draw method.
   * @param {any} renderstate - The renderstate value.
   */
  draw(renderstate) {
    const gl = this.__gl;
    if (renderstate.unifs.PointSize) {
      gl.drawElementsInstanced(
        gl.TRIANGLES,
        6,
        gl.UNSIGNED_SHORT,
        0,
        this.__numVerts
      );
    } else {
      gl.drawArrays(gl.POINTS, 0, this.__numVerts);
    }
  }

  /**
   * The drawInstanced method.
   * @param {any} instanceCount - The instanceCount value.
   */
  drawInstanced(instanceCount) {
    this.__gl.drawArraysInstanced(
      this.__gl.POINTS,
      0,
      this.__numVerts,
      instanceCount
    );
  }
}
// GLPoints;

const glslTypes = {
  bool: Boolean,
  int: SInt32,
  uint: UInt32,
  float: Float32,
  ivec2: Vec2,
  ivec3: Vec3$1,
  ivec4: Vec4$1,
  vec2: Vec2,
  vec3: Vec3$1,
  vec4: Vec4$1,
  color: Color,
  mat3: Mat3$1,
  mat4: Mat4,
  sampler2D: BaseImage,
};

/** Class representing a shader library.
 * @private
 */
class ShaderLibrary {
  /**
   * Create a shader library.
   */
  constructor() {
    this.__shaderModules = {};
  }

  /**
   * The hasShaderModule method.
   * @param {string} shaderName - The shader name.
   * @return {any} - The return value.
   */
  hasShaderModule(shaderName) {
    return shaderName in this.__shaderModules
  }

  /**
   * The setShaderModule method.
   * @param {string} shaderName - The shader name.
   * @param {any} shader - The shader value.
   * @return {any} - The return value.
   */
  setShaderModule(shaderName, shader) {
    // console.log("setShaderModule:" + shaderName);
    return this.parseShader(shaderName, shader)
  }

  /**
   * The getShaderModule method.
   * @param {string} shaderName - The shader name.
   * @return {any} - The return value.
   */
  getShaderModule(shaderName) {
    return this.__shaderModules[shaderName]
  }

  /**
   * The getShaderModuleNames method.
   * @return {any} - The return value.
   */
  getShaderModuleNames() {
    const shaderNames = [];
    for (const shaderName in this.__shaderModules) shaderNames.push(shaderName);
    return shaderNames
  }

  /**
   * The parseShader method.
   * @param {string} shaderName - The shader name.
   * @param {any} glsl - The glsl param.
   * @return {any} - The return value.
   */
  parseShader(shaderName, glsl) {
    const parsePath = path => {
      // An absolute path
      if (path.startsWith('..')) {
        const parentFolder = fileFolder.substring(
          0,
          fileFolder.lastIndexOf('/')
        );
        return parentFolder + path.substring(2)
      } else if (path.startsWith('.')) return fileFolder + path.substring(1)
      else if (path.startsWith('/')) return path.substring(1)
      else return path
    };

    // console.log("parseShader:" + shaderName);
    const shaderNameHash = hashStr(shaderName);
    const fileFolder = shaderName.substring(0, shaderName.lastIndexOf('/'));
    const lines = glsl.split('\n');

    const result = {
      glsl: ' //starting:' + shaderName + '\n',
      lines: lines,
      numLines: 0,
      includeMetaData: [],
      uniforms: {},
      attributes: {},
    };

    const WHITESPACE_RE = /\s+/;
    for (let i = 0; i < lines.length; i++) {
      let line = lines[i];
      let trimmedline = line.trim();
      if (trimmedline.startsWith('//') || trimmedline.startsWith('*')) {
        result.glsl = result.glsl + line + '\n';
        result.numLines++;
        continue
      }
      if (trimmedline.indexOf('//') != -1) {
        trimmedline = trimmedline.slice(0, trimmedline.indexOf('//')).trim();
      }

      if (trimmedline.startsWith('<%') || trimmedline.startsWith('</%')) {
        const parseTag = function(line) {
          if (line.startsWith('</%')) line = line.slice(3);
          else line = line.slice(2);
          if (line.endsWith('/>')) line = line.slice(0, line.length - 2);
          else line = line.slice(0, line.length - 1);
          const parts = line.split(WHITESPACE_RE);
          const tag = parts.shift();
          const result = {
            tag: tag,
            attributes: {},
          };
          for (const attr of parts) {
            const pairs = attr.split('=');
            result.attributes[pairs[0]] = pairs[1].replace(/['"]+/g, '');
          }
          return result
        };

        const elements = parseTag(lines[i].trim());
        switch (elements.tag) {
          case 'include': {
            const includeFile = parsePath(elements.attributes.file);
            if (!this.hasShaderModule(includeFile)) {
              throw new Error(
                'Error while parsing :' +
                  shaderName +
                  ' \nShader module not found:' +
                  includeFile +
                  '\n in:' +
                  this.getShaderModuleNames()
              )
            }

            const shaderModule = this.getShaderModule(includeFile);

            const includedModuleHash = hashStr(elements.attributes.file);
            let includedGLSL = shaderModule.glsl;

            // Remove the first line of GLSL, and replace it with the line tag.
            includedGLSL = includedGLSL.substring(
              includedGLSL.indexOf('\n') + 1
            );
            result.glsl =
              result.glsl + ' //including:' + elements.attributes.file + '\n';

            const repl = {};
            for (const key in elements.attributes) {
              if (key == 'file') continue
              const value = elements.attributes[key];
              includedGLSL = includedGLSL.replaceAll(key, value);
              repl[key] = value;
            }

            result.glsl = result.glsl + includedGLSL;
            result.includeMetaData.push({
              src: result.numLines,
              tgt: i,
              length: shaderModule.numLines,
              key: includeFile,
            });

            // Add line number tag to GLSL so that the GLSL error messages have the correct file name and line number.
            result.glsl = result.glsl + ' //continuing:' + shaderName + '\n';
            result.numLines += shaderModule.numLines + 1;

            for (const name in shaderModule.attributes) {
              let newname = name;
              for (const key in repl)
                newname = newname.replaceAll(key, repl[key]);
              result.attributes[newname] = shaderModule.attributes[name];
            }
            for (const name in shaderModule.uniforms) {
              let newname = name;
              for (const key in repl)
                newname = newname.replaceAll(key, repl[key]);
              result.uniforms[newname] = shaderModule.uniforms[name];
            }

            break
          }
          default: {
            console.warn(
              'Error while parsing :' + shaderName + ' \nUnhandled line:' + line
            );
            continue
          }
        }
      } else {
        const parseAttr = (parts, instanced) => {
          if (!(parts[1] in glslTypes))
            throw new Error(
              'Error while parsing :' +
                shaderName +
                ' \nType not recognized:' +
                parts[1]
            )
          const name = parts[2].slice(0, parts[2].length - 1);
          result.attributes[name] = {
            type: glslTypes[parts[1]],
            instanced: instanced,
          };
          // console.log('attributes:' + name + ":" + parts[1]);

          if (parts[1] == 'color') {
            parts[1] = 'vec4';
            line = parts.join(' ');
          }
        };
        if (trimmedline.startsWith('struct')) {
          let membersStr = '';
          if (trimmedline.indexOf('}') != -1) {
            membersStr = trimmedline.substring(
              trimmedline.indexOf('{') + 1,
              trimmedline.indexOf('}') - 1
            );
          } else {
            i++;
            while (true) {
              line += lines[i] + '\n';
              membersStr += line.trim();
              i++;
              if (membersStr.indexOf('}') != -1) break
            }
          }
          const structMembers = membersStr.substring(
            membersStr.indexOf('{') + 1,
            membersStr.indexOf('}') - 1
          );
          const members = structMembers.split(';');
          const structDesc = [];
          for (const member of members) {
            if (member.length == 0) continue
            const memberparts = member.trim().split(WHITESPACE_RE);
            structDesc.push({
              name: memberparts[1],
              type: glslTypes[memberparts[0]],
            });
          }
          const parts = trimmedline.split(WHITESPACE_RE);
          glslTypes[parts[1]] = structDesc;
        }
        if (trimmedline.startsWith('attribute')) {
          const parts = trimmedline.split(WHITESPACE_RE);
          parseAttr(parts, false);
        }
        if (trimmedline.startsWith('instancedattribute')) {
          const parts = trimmedline.split(WHITESPACE_RE);
          parseAttr(parts, true);
          parts[0] = 'attribute';
          line = parts.join(' ');
        } else if (trimmedline.startsWith('uniform')) {
          const parts = trimmedline.split(WHITESPACE_RE);

          // When a precision qualifier exists in the uniform definition.
          // e.g. uniform highp int instancesTextureSize;
          let typeIndex = 1;
          if (parts.length == 4) typeIndex = 2;
          const typeName = parts[typeIndex];
          if (!(typeName in glslTypes))
            throw new Error(
              'Error while parsing :' +
                shaderName +
                ' \nType not recognized:' +
                parts[1]
            )
          const name = parts[typeIndex + 1].slice(0, parts[typeIndex + 1].length - 1);
          result.uniforms[name] = glslTypes[typeName];
          // console.log('uniform:', name, ":", typeName);

          if (result.uniforms[name] == 'struct') {
            console.log(parts);
          }
          if (parts[1] == 'color') {
            parts[1] = 'vec4';
            line = parts.join(' ');
          }
        }

        result.glsl = result.glsl + line + '\n';
        result.numLines++;
      }
    }

    this.__shaderModules[shaderName] = result;

    return result
  }
}
const shaderLibrary = new ShaderLibrary();

// Every instance of every shader should have a unique id.
// This is so that we can uniquely identify the bound shader during
// rendering. Materials and geometries cache bindings to shaders.
// And need the id to be unique. (Note: we used to use the constructor.name
// which was only unique if the same shader was constructed once, and
// never unique in release mode after the port to Rollup)
let shaderInstanceId = 0;

/** Class representing a GL shader.
 * @extends BaseItem
 * @private
 */
class GLShader extends BaseItem {
  /**
   * Create a GL shader.
   * @param {any} gl - The gl value.
   */
  constructor(gl) {
    super();
    if (!gl) {
      throw new Error('gl context must be passed to shader constructor')
    }
    this.__gl = gl;
    this.__shaderStages = {
      VERTEX_SHADER: {
        glsl: '',
        lines: 0,
        uniforms: {},
        attributes: {},
      },
      FRAGMENT_SHADER: {
        glsl: '',
        lines: 0,
        uniforms: {},
        attributes: {},
      },
    };

    this.__shaderProgramHdls = {};
    this.__gltextures = {};
    this.updated = new Signal();

    this.__id = shaderInstanceId++;

    this.invisibleToGeomBuffer = false;
  }

  /**
   * The isTransparent method.
   * @return {boolean} - The return value.
   */
  static isTransparent() {
    return false
  }

  /**
   * The isOverlay method.
   * @return {boolean} - The return value.
   */
  static isOverlay() {
    return false
  }

  // /////////////////////////////////
  // Compilation

  /**
   * The __compileShaderStage method.
   * @param {any} glsl - The glsl value.
   * @param {any} stageID - The stageID value.
   * @param {string} name - The name value.
   * @param {any} shaderopts - The shaderopts value.
   * @return {any} - The return value.
   * @private
   */
  __compileShaderStage(glsl, stageID, name, shaderopts) {
    const gl = this.__gl;
    // console.log("__compileShaderStage:" + this.name+"."+name + " glsl:\n" + glsl);
    if (!shaderopts) shaderopts = gl.shaderopts;
    if (shaderopts) {
      if (shaderopts.repl) {
        for (const key in shaderopts.repl)
          glsl = glsl.replaceAll(key, shaderopts.repl[key]);
      }
      if (shaderopts.defines) glsl = shaderopts.defines + glsl;
    }

    let prefix;
    if (gl.name == 'webgl2') {
      glsl = glsl.replaceAll('attribute', 'in');
      if (name == 'vertexShader') glsl = glsl.replaceAll('varying', 'out');
      else glsl = glsl.replaceAll('varying', 'in');
      glsl = glsl.replaceAll('texture2D', 'texture');

      prefix = '#version 300 es\n';
      glsl = prefix + glsl;
    }

    const shaderHdl = gl.createShader(stageID);
    gl.shaderSource(shaderHdl, glsl);

    // Compile the shader program.
    gl.compileShader(shaderHdl);

    // See if it compiled successfully
    if (!gl.getShaderParameter(shaderHdl, gl.COMPILE_STATUS)) {
      console.log('Errors in :' + this.constructor.name);
      const errors = gl.getShaderInfoLog(shaderHdl).split('\n');
      const errorLines = {};
      for (let i in errors) {
        if (errors[i].startsWith("'")) {
          errors[i - 1] = errors[i - 1] + errors[i];
          delete errors[i];
          i--;
          continue
        }
        const parts = errors[i].split(':');
        if (parts.length >= 2) {
          const lineNum = parseInt(parts[2]); // TODO check against ATI and intel cards
          if (!isNaN(lineNum)) {
            if (errorLines[lineNum]) errorLines[lineNum].push(errors[i]);
            else errorLines[lineNum] = [errors[i]];
          }
        }
      }
      const numberedLinesWithErrors = [];
      const lines = glsl.split('\n');
      for (let i = 0; i < lines.length; i++) {
        numberedLinesWithErrors.push((i + 1 + ':').lpad(' ', 3) + lines[i]);
        if (i + 1 in errorLines) {
          const errors = errorLines[i + 1];
          for (const error of errors) {
            numberedLinesWithErrors.push(error);
            numberedLinesWithErrors.push('-'.lpad('-', error.length));
          }
        }
      }
      // throw("An error occurred compiling the shader \n\n" + numberedLinesWithErrors.join('\n') + "\n\n=================\n" + this.constructor.name + "." + name + ": \n\n" + errors.join('\n'));
      throw new Error(
        'An error occurred compiling the shader \n=================\n' +
          this.constructor.name +
          '.' +
          name +
          ': \n\n' +
          errors.join('\n') +
          '\n' +
          numberedLinesWithErrors.join('\n')
      )
    }
    return shaderHdl
  }

  /**
   * The __createProgram method.
   * @param {any} shaderopts - The shaderopts value.
   * @return {any} - The return value.
   * @private
   */
  __createProgram(shaderopts) {
    const gl = this.__gl;
    this.__shaderCompilationAttempted = true;
    const shaderProgramHdl = gl.createProgram();
    const vertexShaderGLSL = this.__shaderStages['VERTEX_SHADER'].glsl;
    const shaderHdls = {};
    if (vertexShaderGLSL != undefined) {
      const vertexShader = this.__compileShaderStage(
        vertexShaderGLSL,
        gl.VERTEX_SHADER,
        'vertexShader',
        shaderopts
      );
      if (!vertexShader) {
        return false
      }
      gl.attachShader(shaderProgramHdl, vertexShader);
      shaderHdls[gl.VERTEX_SHADER] = vertexShader;
    }
    const fragmentShaderGLSL = this.__shaderStages['FRAGMENT_SHADER'].glsl;
    if (fragmentShaderGLSL != undefined) {
      const fragshaderopts = Object.assign({}, gl.shaderopts, shaderopts);
      if (fragshaderopts.frag)
        fragshaderopts.defines =
          fragshaderopts.frag.defines + fragshaderopts.defines;
      const fragmentShader = this.__compileShaderStage(
        fragmentShaderGLSL,
        gl.FRAGMENT_SHADER,
        'fragmentShader',
        fragshaderopts
      );
      if (!fragmentShader) {
        return false
      }
      gl.attachShader(shaderProgramHdl, fragmentShader);
      shaderHdls[gl.FRAGMENT_SHADER] = fragmentShader;
    }
    gl.linkProgram(shaderProgramHdl);

    if (!gl.getProgramParameter(shaderProgramHdl, gl.LINK_STATUS)) {
      const info = gl.getProgramInfoLog(shaderProgramHdl);

      if (info.includes('D3D shader compilation failed')) {
        // Usefull for debugging very nasty compiler errors generated only in the ANGL layer.
        const debug_ext = gl.getExtension('WEBGL_debug_shaders');
        if (debug_ext) {
          const hlsl = debug_ext.getTranslatedShaderSource(
            shaderHdls[gl.VERTEX_SHADER]
          );
          console.log(hlsl);
        }
      }

      console.log('vertexShaderGLSL:' + vertexShaderGLSL);
      console.log('fragmentShaderGLSL:' + fragmentShaderGLSL);
      throw new Error(
        'Unable to link the shader program:' +
          this.constructor.name +
          '\n==================\n' +
          info
      )
    }

    const result = this.__extractAttributeAndUniformLocations(
      shaderProgramHdl,
      shaderopts
    );
    result.shaderProgramHdl = shaderProgramHdl;
    return result
  }

  /**
   * The __extractAttributeAndUniformLocations method.
   * @param {any} shaderProgramHdl - The shaderProgramHdl value.
   * @param {any} shaderopts - The shaderopts value.
   * @return {any} - The return value.
   * @private
   */
  __extractAttributeAndUniformLocations(shaderProgramHdl, shaderopts) {
    const gl = this.__gl;
    const attrs = this.getAttributes();
    const result = {
      attrs: {},
      unifs: {},
    };
    for (const attrName in attrs) {
      const location = gl.getAttribLocation(shaderProgramHdl, attrName);
      if (location == undefined) {
        console.warn('Shader attribute not found:' + attrName);
        continue
      }
      const attrDesc = attrs[attrName];
      result.attrs[attrName] = {
        name: attrName,
        location: location,
        type: attrDesc.type,
        instanced: attrDesc.instanced,
      };
    }
    const unifs = this.getUniforms();
    for (let uniformName in unifs) {
      const unifType = unifs[uniformName];
      if (unifType instanceof Array) {
        for (const member of unifType) {
          const structMemberName = uniformName + '.' + member.name;
          const location = gl.getUniformLocation(
            shaderProgramHdl,
            structMemberName
          );
          if (location == undefined) {
            // console.warn(this.constructor.name + " uniform found in shader code but not in compiled program:" + uniformName);
            continue
          }
          result.unifs[structMemberName] = {
            name: structMemberName,
            location: location,
            type: member.type,
          };
        }
      }
      if (shaderopts) {
        if (shaderopts.repl) {
          for (const key in shaderopts.repl)
            uniformName = uniformName.replace(key, shaderopts.repl[key]);
        }
      }

      const location = gl.getUniformLocation(shaderProgramHdl, uniformName);
      if (location == undefined) {
        // console.warn(this.constructor.name + " uniform found in shader code but not in compiled program:" + uniformName);
        continue
      }
      result.unifs[uniformName] = {
        name: uniformName,
        location: location,
        type: unifType,
      };
    }
    return result
  }

  /**
   * The getAttributes method.
   * @return {any} - The return value.
   */
  getAttributes() {
    const attributes = {};
    for (const stageName in this.__shaderStages) {
      const shaderStageBlock = this.__shaderStages[stageName];
      for (const attrName in shaderStageBlock['attributes'])
        attributes[attrName] = shaderStageBlock['attributes'][attrName];
    }
    return attributes
  }

  /**
   * The getUniforms method.
   * @return {any} - The return value.
   */
  getUniforms() {
    const uniforms = {};
    for (const stageName in this.__shaderStages) {
      const shaderStageBlock = this.__shaderStages[stageName];
      for (const unifName in shaderStageBlock['uniforms'])
        uniforms[unifName] = shaderStageBlock['uniforms'][unifName];
    }
    return uniforms
  }

  /**
   * The finalize method.
   */
  finalize() {}

  /**
   * The compileForTarget method.
   * @param {any} key - The key value.
   * @param {any} shaderopts - The shaderopts value.
   * @return {any} - The return value.
   */
  compileForTarget(key, shaderopts) {
    const shaderkey = key ? this.__id + key : this.__id;
    let shaderCompilationResult = this.__shaderProgramHdls[shaderkey];
    if (!shaderCompilationResult) {
      if (shaderCompilationResult !== false) {
        shaderCompilationResult = this.__createProgram(shaderopts);
        shaderCompilationResult.shaderkey = shaderkey;
        this.__shaderProgramHdls[shaderkey] = shaderCompilationResult;
      }
    }
    return shaderCompilationResult
  }

  /**
   * The compile method.
   */
  compile() {
    this.compileForTarget();
  }

  /**
   * The bind method.
   * @param {any} renderstate - The renderstate value.
   * @param {any} key - The key value.
   * @return {any} - The return value.
   */
  bind(renderstate, key) {
    const gl = this.__gl;

    if (renderstate.glshader != this) {
      const shaderCompilationResult = this.compileForTarget(
        key,
        renderstate.shaderopts
      );
      if (shaderCompilationResult === false) {
        console.warn(this.constructor.name + ' is not compiled for ' + key);
        return false
      }

      const shaderProgramHdl = shaderCompilationResult.shaderProgramHdl;

      gl.useProgram(shaderProgramHdl);
      renderstate.glshader = this;
      renderstate.shaderkey = shaderCompilationResult.shaderkey;
      renderstate.unifs = shaderCompilationResult.unifs;
      renderstate.attrs = shaderCompilationResult.attrs;

      renderstate.boundTextures = 0;
      renderstate.boundLightmap = undefined;
      // Make sure we clear the binding cached.
      renderstate.glgeom = undefined;

      // Once the shader has been bound, we allow the renderer to bind any
      // of its global uniform values. (e.g. env map values etc...)
      if (renderstate.bindRendererUnifs)
        renderstate.bindRendererUnifs(shaderCompilationResult.unifs);
    }

    renderstate.supportsInstancing = true;

    return true
  }

  /**
   * The unbind method.
   * @param {any} renderstate - The renderstate value.
   * @return {any} - The return value.
   */
  unbind(renderstate) {
    return true
  }

  // /////////////////////////////
  // Parameters

  /**
   * The getParamDeclarations method.
   * @return {any} - The return value.
   */
  static getParamDeclarations() {
    return []
  }

  /**
   * The getGeomDataShaderName method.
   */
  static getGeomDataShaderName() {}

  /**
   * The getSelectedShaderName method.
   */
  static getSelectedShaderName() {}

  // /////////////////////////////////
  // Destroy

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    const gl = this.__gl;
    for (const key in this.__shaderProgramHdls) {
      const shaderCompilationResult = this.__shaderProgramHdls[key];
      gl.deleteProgram(shaderCompilationResult.shaderProgramHdl);
    }
    this.__shaderProgramHdls = {};
  }
}

shaderLibrary.setShaderModule(
  'utils/quadVertexFromID.glsl',
  `

attribute float vertexIDs;

vec2 getQuadVertexPositionFromID(){
    int vertexID = int(vertexIDs);
    if(vertexID == 0)
        return vec2(-0.5, -0.5);
    else if(vertexID == 1)
        return vec2(0.5, -0.5);
    else if(vertexID == 2)
        return vec2(-0.5, 0.5);
    else if(vertexID == 3)
        return vec2(0.5, 0.5);
    return vec2(0,0);
}
`
);

shaderLibrary.setShaderModule(
  'utils/unpackHDR.glsl',
  `

vec3 decodeHDR(const in vec3 ldrPixel, const in float cdmAlpha) {
    float avg = (cdmAlpha * 16.0 - 8.0);
    float scl = 1.0;
    vec3 color;
    color.x = (tan((ldrPixel.x-0.5)*1.5)/scl)+avg;
    color.y = (tan((ldrPixel.y-0.5)*1.5)/scl)+avg;
    color.z = (tan((ldrPixel.z-0.5)*1.5)/scl)+avg;

    // convert from logarithmic curve to linear curve.
    // subtract the epsilon that was added during encoding.
    const float eps = 0.001;
    color.x = pow(10.0, color.x) - eps;
    color.y = pow(10.0, color.y) - eps;
    color.z = pow(10.0, color.z) - eps;
    return color;
}

vec3 decodeHDR(sampler2D ldrSampler, sampler2D cdmSampler, vec2 texCoord) {
#ifdef ENABLE_ES3
    float cdm = texture2D(cdmSampler, texCoord).r;
#else
    float cdm = texture2D(cdmSampler, texCoord).a;
#endif
    return decodeHDR(texture2D(ldrSampler, texCoord).rgb, cdm);
}

`
);

class UnpackHDRShader extends GLShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'UnpackHDRShader.vertexShader',
      `
precision highp float;

<%include file="utils/quadVertexFromID.glsl"/>

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
    vec2 position = getQuadVertexPositionFromID();
    v_texCoord = position+0.5;
    gl_Position = vec4(position*2.0, 0.0, 1.0);
}
`
    );
    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'UnpackHDRShader.fragmentShader',
      `
precision highp float;

varying vec2 v_texCoord;
uniform sampler2D ldrSampler;
uniform sampler2D cdmSampler;
uniform float exposure;
uniform vec4 tint;

<%include file="utils/unpackHDR.glsl"/>

#ifdef ENABLE_ES3
    out vec4 fragColor;
#endif
void main(void) {

#ifndef ENABLE_ES3
    vec4 fragColor;
#endif

    fragColor = vec4(decodeHDR(ldrSampler, cdmSampler, v_texCoord) * tint.rgb * exposure, 1.0);

#ifndef ENABLE_ES3
    gl_FragColor = fragColor;
#endif
}

`
    );
  }
}

/** This class abstracts the rendering of a collection of geometries to screen. */
class GLFbo {
  /**
   * Create a GLFbo.
   * @param {any} gl - The gl value.
   * @param {any} colorTexture - The colorTexture value.
   * @param {boolean} createDepthTexture - The createDepthTexture value.
   */
  constructor(gl, colorTexture, createDepthTexture = false) {
    if (
      SystemDesc.isIOSDevice &&
      (colorTexture.getType() == 'FLOAT' ||
        colorTexture.getType() == 'HALF_FLOAT')
    ) {
      // So iOS simply refuses to bind aything to a render target except a UNSIGNED_BYTE texture.
      // See the subtle error message here: "floating-point render targets not supported -- this is legal"
      // https://www.khronos.org/registry/webgl/conformance-suites/1.0.2/conformance/extensions/oes-texture-float.html
      console.error('IOS devices are unable to render to float textures.');
    }

    this.__gl = gl;
    this.__colorTexture = colorTexture;
    this.__createDepthTexture = createDepthTexture;
    this.__clearColor = [0, 0, 0, 0];
    this.__depthTexture = undefined;

    this.setup = this.setup.bind(this);
    this.resize = this.resize.bind(this);

    if (this.__colorTexture) this.__colorTexture.resized.connect(this.resize);

    this.setup();
  }

  /**
   * The setClearColor method.
   * @param {any} clearColor - The clearColor value.
   */
  setClearColor(clearColor) {
    this.__clearColor = clearColor;
  }

  /**
   * The getWidth method.
   * @return {any} - The return value.
   */
  getWidth() {
    return this.__colorTexture.width
  }

  /**
   * The getHeight method.
   * @return {any} - The return value.
   */
  getHeight() {
    return this.__colorTexture.height
  }

  /**
   * The getSize method.
   * @return {any} - The return value.
   */
  getSize() {
    return [this.__colorTexture.width, this.__colorTexture.height]
  }

  /**
   * The getColorTexture method.
   * @return {any} - The return value.
   */
  getColorTexture() {
    return this.__colorTexture
  }

  /**
   * The getDepthTextureGL method.
   * @return {any} - The return value.
   */
  getDepthTextureGL() {
    return this.__depthTexture
  }

  /**
   * Getter for width.
   */
  get width() {
    return this.__colorTexture.width
  }

  /**
   * Getter for height.
   */
  get height() {
    return this.__colorTexture.height
  }

  /**
   * Getter for size.
   */
  get size() {
    return [this.__colorTexture.width, this.__colorTexture.height]
  }

  /**
   * Getter for colorTexture.
   */
  get colorTexture() {
    return this.__colorTexture
  }

  /**
   * The setColorTexture method.
   * @param {any} colorTexture - The colorTexture value.
   */
  setColorTexture(colorTexture) {
    this.__colorTexture = colorTexture;
    gl.framebufferTexture2D(
      gl.FRAMEBUFFER,
      gl.COLOR_ATTACHMENT0,
      gl.TEXTURE_2D,
      this.__colorTexture.glTex,
      0
    );
  }

  /**
   * Getter for depthTextureGL.
   */
  get depthTextureGL() {
    return this.__depthTexture
  }

  /**
   * The setup method.
   */
  setup() {
    const gl = this.__gl;

    this.__fbo = gl.createFramebuffer();
    if (gl.name == 'webgl2') gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.__fbo);
    else gl.bindFramebuffer(gl.FRAMEBUFFER, this.__fbo);

    // TOSO: Migrate to using GLRenderTarget... This system is a mess.
    // if(gl.name == 'webgl2'){
    //     if (this.__colorTexture && this.__colorTexture.getType() == 'FLOAT' && this.__colorTexture.getFilter() == 'LINEAR') {
    //         if (!gl.__ext_float_linear)
    //             throw ("Unable to use filtering on floating point textures");
    //     }
    // }
    // else {
    //     if (this.__colorTexture.getType() == 'FLOAT') {
    //         if(gl.__ext_float){
    //             if (this.__colorTexture.getFilter() == 'LINEAR') {
    //                 if (!gl.__ext_float_linear)
    //                     throw ("Unable to use filtering on floating point textures");
    //             }
    //         }
    //         else if(gl.__ext_half_float){
    //             if (this.__colorTexture.getFilter() == 'LINEAR') {
    //                 if (!gl.__ext_texture_half_float_linear)
    //                     throw ("Unable to use filtering on half-floating point textures");
    //             }
    //         }
    //         else{
    //             throw("floating point textures unsupported.");
    //         }
    //     }
    // }

    if (this.__colorTexture) {
      if (gl.name == 'webgl2')
        gl.framebufferTexture2D(
          gl.DRAW_FRAMEBUFFER,
          gl.COLOR_ATTACHMENT0,
          gl.TEXTURE_2D,
          this.__colorTexture.glTex,
          0
        );
      else
        gl.framebufferTexture2D(
          gl.FRAMEBUFFER,
          gl.COLOR_ATTACHMENT0,
          gl.TEXTURE_2D,
          this.__colorTexture.glTex,
          0
        );
    }

    // Create the depth texture
    if (this.__createDepthTexture) {
      if (gl.name != 'webgl2' && !gl.__ext_WEBGL_depth_texture) {
        // Create the depth buffer
        const depthBuffer = gl.createRenderbuffer();
        gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);
        gl.renderbufferStorage(
          gl.RENDERBUFFER,
          gl.DEPTH_COMPONENT16,
          this.width,
          this.height
        );
        gl.framebufferRenderbuffer(
          gl.FRAMEBUFFER,
          gl.DEPTH_ATTACHMENT,
          gl.RENDERBUFFER,
          depthBuffer
        );
      } else {
        gl.activeTexture(gl.TEXTURE0);
        this.__depthTexture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this.__depthTexture);
        // TODO: Copy params from the color image.
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        if (gl.name == 'webgl2') {
          // the proper texture format combination can be found here
          // https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml
          // https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/fbo_rtt_depth_texture.html
          // gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT16, this.width, this.height, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_SHORT, null);
          gl.texImage2D(
            gl.TEXTURE_2D,
            0,
            gl.DEPTH_COMPONENT24,
            this.width,
            this.height,
            0,
            gl.DEPTH_COMPONENT,
            gl.UNSIGNED_INT,
            null
          );
          gl.framebufferTexture2D(
            gl.DRAW_FRAMEBUFFER,
            gl.DEPTH_ATTACHMENT,
            gl.TEXTURE_2D,
            this.__depthTexture,
            0
          );
        } else {
          gl.texImage2D(
            gl.TEXTURE_2D,
            0,
            gl.DEPTH_COMPONENT,
            this.width,
            this.height,
            0,
            gl.DEPTH_COMPONENT,
            gl.UNSIGNED_INT,
            null
          );
          gl.framebufferTexture2D(
            gl.FRAMEBUFFER,
            gl.DEPTH_ATTACHMENT,
            gl.TEXTURE_2D,
            this.__depthTexture,
            0
          );
        }
      }
    }

    this.__checkFramebuffer();

    if (gl.name == 'webgl2') gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
    else gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  }

  /**
   * Triggered Automatically when the texture resizes.
   * TODO: fbos should manage the textures assigned to them
   * E.g. resizing and preserving data.
   */
  resize() {
    const gl = this.__gl;
    if (gl.name == 'webgl2') gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.__fbo);
    else gl.bindFramebuffer(gl.FRAMEBUFFER, this.__fbo);

    // The color texture is destoryed and re-created when it is resized,
    // so we must re-bind it here.
    gl.framebufferTexture2D(
      gl.FRAMEBUFFER,
      gl.COLOR_ATTACHMENT0,
      gl.TEXTURE_2D,
      this.__colorTexture.glTex,
      0
    );
    if (this.__depthTexture) {
      gl.activeTexture(gl.TEXTURE0);
      gl.bindTexture(gl.TEXTURE_2D, this.__depthTexture);
      if (gl.name == 'webgl2') {
        // the proper texture format combination can be found here
        // https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml
        gl.texImage2D(
          gl.TEXTURE_2D,
          0,
          gl.DEPTH_COMPONENT24,
          this.width,
          this.height,
          0,
          gl.DEPTH_COMPONENT,
          gl.UNSIGNED_INT,
          null
        );
      } else
        gl.texImage2D(
          gl.TEXTURE_2D,
          0,
          gl.DEPTH_COMPONENT,
          this.width,
          this.height,
          0,
          gl.DEPTH_COMPONENT,
          gl.UNSIGNED_INT,
          null
        );
    }
    this.__checkFramebuffer();
  }

  /**
   * The __checkFramebuffer method.
   * @private
   */
  __checkFramebuffer() {
    const gl = this.__gl;

    let check;
    if (gl.name == 'webgl2')
      check = gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER);
    else check = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
    if (check !== gl.FRAMEBUFFER_COMPLETE) {
      gl.bindTexture(gl.TEXTURE_2D, null);
      if (gl.name == 'webgl2') gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
      else gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      console.warn(
        'Error creating Fbo width:',
        this.width,
        ', height:',
        this.height,
        ' Texture Type:',
        this.__colorTexture.getType()
      );
      switch (check) {
        case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
          throw new Error(
            'The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.'
          )
        case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
          throw new Error('There is no attachment.')
        case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
          throw new Error(
            'Height and width of the attachment are not the same.'
          )
        case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
          throw new Error(
            'The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.'
          )
        case 36061: // gl.GL_FRAMEBUFFER_UNSUPPORTED:
          throw new Error('The framebuffer is unsupported')
        default:
          throw new Error('Incomplete Frambuffer')
      }
    }
  }

  /**
   * The bindForWriting method.
   * @param {any} renderstate - The renderstate value.
   */
  bindForWriting(renderstate) {
    if (renderstate) {
      this.__prevBoundFbo = renderstate.boundRendertarget;
      renderstate.boundRendertarget = this.__fbo;
    }
    const gl = this.__gl;
    if (gl.name == 'webgl2') gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.__fbo);
    else gl.bindFramebuffer(gl.FRAMEBUFFER, this.__fbo);
    gl.viewport(0, 0, this.width, this.height); // Match the viewport to the texture size
  }

  /**
   * The unbindForWriting method.
   * @param {any} renderstate - The renderstate value.
   */
  unbindForWriting(renderstate) {
    if (renderstate) renderstate.boundRendertarget = this.__prevBoundFbo;
    const gl = this.__gl;
    if (gl.name == 'webgl2')
      gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.__prevBoundFbo);
    else gl.bindFramebuffer(gl.FRAMEBUFFER, this.__prevBoundFbo);
  }

  /**
   * The bind method.
   * @param {any} renderstate - The renderstate value.
   */
  bind(renderstate) {
    this.bindForWriting(renderstate);
  }

  /**
   * The unbind method.
   * @param {any} renderstate - The renderstate value.
   */
  unbind(renderstate) {
    this.unbindForWriting(renderstate);
  }

  /**
   * The bindForReading method.
   * @param {any} renderstate - The renderstate value.
   */
  bindForReading() {
    const gl = this.__gl;
    if (gl.name == 'webgl2') gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this.__fbo);
    else gl.bindFramebuffer(gl.FRAMEBUFFER, this.__fbo);
  }

  /**
   * The unbindForReading method.
   * @param {any} renderstate - The renderstate value.
   */
  unbindForReading() {
    const gl = this.__gl;
    if (gl.name == 'webgl2') gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
    else gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  }

  /**
   * The clear method.
   */
  clear() {
    const gl = this.__gl;
    gl.colorMask(true, true, true, true); // Don't write to the color channels at all
    gl.clearColor(...this.__clearColor);
    if (this.__createDepthTexture) {
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    } else {
      gl.clear(gl.COLOR_BUFFER_BIT);
    }
  }

  /**
   * The bindAndClear method.
   * @param {any} renderstate - The renderstate value.
   */
  bindAndClear(renderstate) {
    this.bind(renderstate);
    this.clear(renderstate);
  }

  /**
   * The unbind method.
   */
  unbind() {
    const gl = this.__gl;
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    const gl = this.__gl;
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    gl.deleteFramebuffer(this.__fbo);
    this.__fbo = null;
    this.__colorTexture.resized.disconnect(this.resize);
  }
}

/** Class representing a GL high dynamic range (HDR) image.
 * @extends GLTexture2D
 * @private
 */
class GLHDRImage extends GLTexture2D {
  /**
   * Create a GL HDR image.
   * @param {any} gl - The gl value.
   * @param {any} hdrImage - The HDR image.
   */
  constructor(gl, hdrImage) {
    super(gl);

    this.__hdrImage = hdrImage;
    this.__hdrImage.setMetadata('gltexture', this);
    this.__hdrImage.updated.connect(() => {
      this.__unpackHDRImage(this.__hdrImage.getParams());
    });
    if (this.__hdrImage.isLoaded()) {
      this.__unpackHDRImage(this.__hdrImage.getParams());
    } else {
      this.__hdrImage.loaded.connect(() => {
        this.__unpackHDRImage(this.__hdrImage.getParams());
      });
    }
  }

  /**
   * The __unpackHDRImage method.
   * @param {any} hdrImageParams - The HDR image parameters.
   * @private
   */
  __unpackHDRImage(hdrImageParams) {
    const gl = this.__gl;

    const ldr = hdrImageParams.data.ldr;
    const cdm = hdrImageParams.data.cdm;

    if (!this.__fbo) {
      // Note: iOS devices create FLOAT Fbox.
      // If we want better quality, we could unpack the texture in JavaScript.
      this.configure({
        format: 'RGBA',
        type: 'FLOAT',
        width: ldr.width,
        height: ldr.height,
        filter: 'LINEAR',
        wrap: 'CLAMP_TO_EDGE',
      });
      this.__fbo = new GLFbo(gl, this);
      this.__fbo.setClearColor([0, 0, 0, 0]);

      this.__srcLDRTex = new GLTexture2D(gl, {
        format: 'RGB',
        type: 'UNSIGNED_BYTE',
        width: ldr.width,
        height: ldr.height,
        filter: 'NEAREST',
        mipMapped: false,
        wrap: 'CLAMP_TO_EDGE',
        data: ldr,
      });
      this.__srcCDMTex = new GLTexture2D(gl, {
        format: gl.name == 'webgl2' ? 'RED' : 'ALPHA',
        type: 'UNSIGNED_BYTE',
        width: ldr.width /* 8*/,
        height: ldr.height /* 8*/,
        filter: 'NEAREST',
        mipMapped: false,
        wrap: 'CLAMP_TO_EDGE',
        data: cdm,
      });

      this.__unpackHDRShader = new UnpackHDRShader(gl);
      const shaderComp = this.__unpackHDRShader.compileForTarget('GLHDRImage');
      this.__shaderBinding = generateShaderGeomBinding(
        gl,
        shaderComp.attrs,
        gl.__quadattrbuffers,
        gl.__quadIndexBuffer
      );
    } else {
      this.__srcLDRTex.bufferData(ldr);
      this.__srcCDMTex.bufferData(cdm);
    }

    this.__fbo.bindAndClear();

    const renderstate = {};
    this.__unpackHDRShader.bind(renderstate, 'GLHDRImage');
    this.__shaderBinding.bind(renderstate);

    const unifs = renderstate.unifs;
    this.__srcLDRTex.bindToUniform(renderstate, unifs.ldrSampler);
    this.__srcCDMTex.bindToUniform(renderstate, unifs.cdmSampler);

    gl.uniform1f(unifs.exposure.location, 1);
    gl.uniform4fv(unifs.tint.location, this.__hdrImage.getHDRTint().asArray());
    gl.drawQuad();

    // // Debug a block of pixels.
    // console.log(this.__hdrImage.getName());
    // gl.finish();
    // let numPixels = 4;
    // let pixels = new Float32Array(4 * numPixels);
    // gl.readPixels(ldr.width / 4, ldr.height/4, numPixels, 1, gl.RGBA, gl.FLOAT, pixels);
    // console.log(pixels);
    // gl.bindFramebuffer(gl.FRAMEBUFFER, null);

    this.__fbo.unbind();

    // if (!this.__hdrImage.isStream()) {
    //     this.__fbo.destroy();
    //     this.__srcLDRTex.destroy();
    //     this.__srcCDMTex.destroy();
    //     this.__fbo = null;
    //     this.__srcLDRTex = null;
    //     this.__srcCDMTex = null;
    // }

    this.updated.emit();
  }

  /**
   * The bindToUniform method.
   * @param {any} renderstate - The renderstate value.
   * @param {any} unif - The unif value.
   * @param {any} bindings - The bindings value.
   * @return {any} - The return value.
   */
  bindToUniform(renderstate, unif, bindings) {
    return super.bindToUniform(renderstate, unif, bindings)
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    super.destroy();
    if (this.__fbo) {
      this.__fbo.destroy();
      this.__srcLDRTex.destroy();
      this.__srcCDMTex.destroy();
    }
    if (this.__unpackHDRShader) this.__unpackHDRShader.destroy();
    if (this.__shaderBinding) this.__shaderBinding.destroy();

    this.__hdrImage.loaded.disconnectScope(this);
    this.__hdrImage.updated.disconnectScope(this);
  }
}

shaderLibrary.setShaderModule(
  'GLSLUtils.glsl',
  `


int ftoi(float val){
    return int(floor(val + 0.5));
}

#ifdef ENABLE_ES3

int imod(int x, int y) {
    return x % y;
}

void setFlag(inout int flags, int flag) {
    flags |= flag;
}

void clearFlag(inout int flags, int flag) {
    flags &= ~flag;
}

bool testFlag(int flags, int flag) {
    return (flags & flag) != 0;
}

// private function: Mangle me...
ivec2 _pixelIndexToUV(int index, int textureWidth){
    return ivec2(index % textureWidth, index / textureWidth);
}

vec4 fetchTexel(sampler2D texture, int textureWidth, int index) {
    return texelFetch(texture, _pixelIndexToUV(index, textureWidth), 0);
}

vec4 fetchTexel(sampler2D texture, ivec2 textureSize, ivec2 texCoord) {
    return texelFetch(texture, texCoord, 0);
}

#else

// TODO: integrate: https://gist.github.com/mattatz/70b96f8c57d4ba1ad2cd

int max(int a, int b) {
    return a > b ? a : b;
}
int min(int a, int b) {
    return a < b ? a : b;
}


float round(float val){
    return floor(val + 0.4);
}

int imod(int x, int y) {
    return x-y*(x/y);
}

void setFlag(inout int flags, int flag) {
    flags += flag;
}
void clearFlag(inout int flags, int flag) {
    flags -= flag;
}

bool testFlag(int flags, int flag) {
    return imod(flags / flag, 2) != 0;
}

// private function: Mangle me...
vec2 _pixelIndexToUV(int index, int textureSize){
    float flTexSize = float(textureSize);
    float x = (float(imod(index, textureSize))+0.5)/flTexSize;
    float y = (floor(float(index / textureSize))+0.5)/flTexSize;
    return vec2(x, y);
}

vec4 fetchTexel(sampler2D texture, int textureSize, int index) {
    vec2 texCoord = _pixelIndexToUV(index, textureSize);
    return texture2D(texture, texCoord);
}

vec4 fetchTexel(sampler2D texture, ivec2 textureSize, ivec2 texCoord) {
    vec2 ftextureSize = vec2(textureSize);
    return texture2D(texture, (vec2(texCoord) + 0.5) / ftextureSize);
}


#endif // ENABLE_ES3

int uvToPixelIndex(vec2 uv, int textureSize){
    return int(uv.x * float(textureSize)) + (int(floor(uv.y * float(textureSize))) * textureSize);
}



`
);

shaderLibrary.setShaderModule(
  'utils/ImageStream.glsl',
  `

// Stream Desc looks like the following
// x : atlas Width in images
// y : atlas height in images
// z : image Width
// w : image Height

vec2 calcFrameImageTexCoords(vec2 texCoord, int index, in vec4 streamDesc){
	float index_x = floor(mod(float(index), streamDesc.x));
	float index_y = floor(float(index) / streamDesc.x);
    return vec2( 
    	(index_x + texCoord.x) / streamDesc.x, 
    	(index_y + texCoord.y) / streamDesc.y
    	);
}

vec4 sampleStreamFrame(vec2 texCoord, int index, in sampler2D streamImage, in vec4 streamDesc){
    return texture2D(streamImage, calcFrameImageTexCoords(texCoord, index, streamDesc));
}

`
);

/** Class representing a GL image stream. 
 * @private
*/
class GLImageStream$1 {
  /**
   * Create a GL image stream.
   * @param {any} gl - The gl value.
   * @param {any} streamImage - The streamImage value.
   */
  constructor(gl, streamImage) {
    this.__gl = gl;
    this.__streamImage = streamImage;
    this.ready = new Signal(true);
    this.updated = new Signal();
    this.resized = new Signal();
    this.__descParam = this.__streamImage.getParameter('StreamAtlasDesc');
    this.__indexParam = this.__streamImage.getParameter('StreamAtlasIndex');
    this.__indexParam.valueChanged.connect(this.updated.emit);

    // To support playing back the same image atlas through many different streams.
    // (e.g. the same Gif progress bar in many places)
    // The GLImageStream should own an instance of GLTexture2D instead of extending it.
    // this would enable multiple streams to share a reference.
    const configure = () => {
      const params = this.__streamImage.getParams();
      if (!params.data.__atlasTexture) {
        params.data.__atlasTexture = new GLTexture2D(gl, params);
      }
      this.__atlasTexture = params.data.__atlasTexture;
      this.__atlasTexture.textureType = 2;
      this.__atlasTexture.textureDesc = this.__descParam.getValue().asArray();
    };

    if (this.__streamImage.isLoaded()) {
      configure();
    } else {
      this.__streamImage.loaded.connect(() => {
        configure();
      });
    }
  }

  /**
   * The preBind method.
   * @param {any} unif - The unif value.
   * @param {any} unifs - The unifs value.
   * @return {any} - The return value.
   */
  preBind(unif, unifs) {
    const res = this.__atlasTexture.preBind(unif, unifs);
    res.textureDescUnif = unifs[unif.name + 'Desc'];
    res.textureIndexUnif = unifs[unif.name + 'Index'];
    return res
  }

  /**
   * The bindToUniform method.
   * @param {any} renderstate - The renderstate value.
   * @param {any} unif - The unif value.
   * @param {any} bindings - The bindings value.
   * @return {boolean} - The return value.
   */
  bindToUniform(renderstate, unif, bindings) {
    if (!this.__atlasTexture.bindToUniform(renderstate, unif, bindings)) {
      return false
    }

    if (bindings) {
      if (bindings.textureIndexUnif) {
        this.__gl.uniform1i(
          bindings.textureIndexUnif.location,
          this.__indexParam.getValue()
        );
      }
    }

    return true
  }
}

/** Class representing simple uniform binding.
 * @private
 */
class SimpleUniformBinding {
  /**
   * Create simple uniform binding.
   * @param {any} gl - The gl value.
   * @param {any} glmaterial - The glmaterial value.
   * @param {any} param - The param value.
   * @param {any} unif - The unif value.
   */
  constructor(gl, glmaterial, param, unif) {
    this.__unif = unif;

    switch (unif.type) {
      case Boolean:
        // gl.uniform1ui(unif.location, value);// WebGL 2
        this.uniformXX = gl.uniform1i.bind(gl);
        break
      case UInt32:
        if (gl.name == 'webgl2') this.uniformXX = gl.uniform1ui.bind(gl);
        else this.uniformXX = gl.uniform1i.bind(gl);
        break
      case SInt32:
        this.uniformXX = gl.uniform1i.bind(gl);
        break
      case Float32:
        this.uniformXX = gl.uniform1f.bind(gl);
        break
    }

    this.__val = param.getValue();
    param.valueChanged.connect(() => {
      this.__val = param.getValue();
      glmaterial.updated.emit();
    });
  }

  /**
   * The bind method.
   * @param {any} renderstate - The renderstate value.
   */
  bind(renderstate) {
    this.uniformXX(this.__unif.location, this.__val);
  }

  /**
   * The unbind method.
   */
  unbind() {}

  /**
   * The destroy method.
   */
  destroy() {}
}

/** Class representing complex uniform binding. 
 * @private
*/
class ComplexUniformBinding {
  /**
   * Create complex uniform binding.
   * @param {any} gl - The gl value.
   * @param {any} glmaterial - The glmaterial value.
   * @param {any} param - The param value.
   * @param {any} unif - The unif value.
   */
  constructor(gl, glmaterial, param, unif) {
    this.__unif = unif;

    switch (unif.type) {
      case Vec2:
        this.uniformXX = gl.uniform2fv.bind(gl);
        break
      case Vec3$1:
        this.uniformXX = gl.uniform3fv.bind(gl);
        break
      case Vec4$1:
        this.uniformXX = gl.uniform4fv.bind(gl);
        break
    }

    this.__vals = param.getValue().asArray();
    param.valueChanged.connect(() => {
      this.__vals = param.getValue().asArray();
      glmaterial.updated.emit();
    });
  }

  /**
   * The bind method.
   * @param {any} renderstate - The renderstate value.
   */
  bind(renderstate) {
    this.uniformXX(this.__unif.location, this.__vals);
  }

  /**
   * The unbind method.
   */
  unbind() {}

  /**
   * The destroy method.
   */
  destroy() {}
}

/** Class representing material uniform binding. 
 * @private
*/
class MatrixUniformBinding {
  /**
   * Create material uniform binding.
   * @param {any} gl - The gl value.
   * @param {any} glmaterial - The glmaterial value.
   * @param {any} param - The param value.
   * @param {any} unif - The unif value.
   */
  constructor(gl, glmaterial, param, unif) {
    this.__unif = unif;

    switch (unif.type) {
      case Mat3:
        this.uniformMatrixXXX = gl.uniformMatrix3fv.bind(gl);
        break
      case Mat4:
        this.uniformMatrixXXX = gl.uniformMatrix4fv.bind(gl);
        break
    }

    this.__vals = param.getValue().asArray();
    param.valueChanged.connect(() => {
      this.__val = param.getValue().asArray();
      glmaterial.updated.emit();
    });
  }

  /**
   * The bind method.
   * @param {any} renderstate - The renderstate value.
   */
  bind(renderstate) {
    this.uniformMatrixXXX(this.__unif.location, false, this.__val);
  }

  /**
   * The unbind method.
   */
  unbind() {}

  /**
   * The destroy method.
   */
  destroy() {}
}

/** Class representing color uniform binding. 
 * @private
*/
class ColorUniformBinding {
  /**
   * Create color uniform binding.
   * @param {any} gl - The gl value.
   * @param {any} glmaterial - The glmaterial value.
   * @param {any} param - The param value.
   * @param {any} unif - The unif value.
   * @param {any} unifs - The unifs value.
   */
  constructor(gl, glmaterial, param, unif, unifs) {
    this.__gl = gl;
    this.__unif = unif;
    this.__textureUnif = unifs[unif.name + 'Tex'];
    this.__textureTypeUnif = unifs[unif.name + 'TexType'];

    this.__vals = [0, 0, 0, 0];
    this.bind = this.bindValue;

    const genGLTex = image => {
      let gltexture = image.getMetadata('gltexture');
      const textureType = 1;
      if (!gltexture) {
        if (image.type === 'FLOAT') {
          gltexture = new GLHDRImage(this.__gl, image);
        } else if (image.isStreamAtlas()) {
          gltexture = new GLImageStream$1(this.__gl, image);
        }
        // else if (image.hasAlpha()){
        //     gltexture = new GLLDRAlphaImage(this.__gl, image);
        // }
        else {
          gltexture = new GLTexture2D(this.__gl, image);
        }
      }
      this.texBinding = gltexture.preBind(this.__textureUnif, unifs);
      gltexture.updated.connect(() => {
        glmaterial.updated.emit();
      });
      this.gltexture = gltexture;
      this.gltexture.addRef(this);
      this.textureType = textureType;
      this.bind = this.bindTexture;
      glmaterial.updated.emit();
    };

    let boundImage;
    let imageLoadedId;
    const imageLoaded = () => {
      genGLTex(boundImage);
    };
    const connectImage = image => {
      if (!image.isLoaded()) {
        image.loaded.connect(imageLoaded);
      } else {
        genGLTex(image);
      }
      boundImage = image;
    };

    const disconnectImage = () => {
      const gltexture = boundImage.getMetadata('gltexture');
      gltexture.removeRef(this);
      this.texBinding = null;
      this.gltexture = null;
      this.textureType = null;
      this.bind = this.bindValue;

      if (imageLoadedId) {
        boundImage.loaded.disconnectId(imageLoadedId);
      }
      boundImage = null;
      imageLoadedId = null;
      glmaterial.updated.emit();
    };

    const update = () => {
      // Sometimes the value of a color param is an image.
      const value = param.getValue(false);
      this.__vals = value.asArray();

      if (this.__textureUnif) {
        let image;
        if (param.getImage) {
          image = param.getImage();
        }
        if (image && image != boundImage) {
          connectImage(image);
        } else if (!image && boundImage) {
          disconnectImage();
        }
      }
      glmaterial.updated.emit();
    };

    /**
     * The update method.
     */
    update();
    if (param.textureConnected) {
      param.textureConnected.connect(() => {
        connectImage(param.getImage());
      });
    }
    param.valueChanged.connect(update);

    this.uniform1i = gl.uniform1i.bind(gl);
    this.uniform4fv = gl.uniform4fv.bind(gl);
  }

  /**
   * The bindValue method.
   * @param {any} renderstate - The renderstate value.
   */
  bindValue(renderstate) {
    this.uniform4fv(this.__unif.location, this.__vals);
    if (this.__textureTypeUnif)
      this.uniform1i(this.__textureTypeUnif.location, 0);
  }

  /**
   * The bindTexture method.
   * @param {any} renderstate - The renderstate value.
   */
  bindTexture(renderstate) {
    this.gltexture.bindToUniform(
      renderstate,
      this.__textureUnif,
      this.texBinding
    );
  }
}

const logged = {};

/** Class representing material shader binding. 
 * @private
*/
class MaterialShaderBinding {
  /**
   * Create material shader binding.
   * @param {any} gl - The gl value.
   * @param {any} glmaterial - The glmaterial value.
   * @param {any} unifs - The unifs value.
   * @param {any} warnMissingUnifs - The warnMissingUnifs value.
   */
  constructor(gl, glmaterial, unifs, warnMissingUnifs) {
    this.__uniformBindings = [];

    const bindParam = param => {
      const name = param.getName();
      const unif = unifs[name];
      if (unif == undefined) {
        // Note: we now bind the Material even for rendering geom datas,
        // which can mean many params have no uniform in the shader, which is fine.
        if (warnMissingUnifs) {
          // Note: this silent error caused me a lot of searching. make it noisy.
          const shaderName = glmaterial.getMaterial().getShaderName();
          if (!logged[shaderName]) {
            logged[shaderName] = {};
          }
          if (!logged[shaderName][name]) {
            // TODO: Many of these warnings are because when we change shaders
            // we do not remove obsolete params, but we probably should.
            console.warn(
              'Material:' + glmaterial.getMaterial().getName(),
              'with Shader ',
              shaderName,
              'Param has no unif',
              name
            );
            logged[shaderName][name] = true;
          }
        }
        return
      }
      switch (unif.type) {
        case Boolean:
        case UInt32:
        case SInt32:
        case Float32:
          this.__uniformBindings.push(
            new SimpleUniformBinding(gl, glmaterial, param, unif)
          );
          break
        case Vec2:
        case Vec3$1:
        case Vec4$1:
          this.__uniformBindings.push(
            new ComplexUniformBinding(gl, glmaterial, param, unif)
          );
          break
        case Color:
          this.__uniformBindings.push(
            new ColorUniformBinding(gl, glmaterial, param, unif, unifs)
          );
          break
        case Mat4:
          this.__uniformBindings.push(
            new MatrixUniformBinding(gl, glmaterial, param, unif)
          );
          break
        default:
          console.warn(
            'Param :' + name + ' has unhandled data type:' + unif.type
          );
          return
      }
      return
    };
    const params = glmaterial.getMaterial().getParameters();
    for (const param of params) {
      bindParam(param);
    }
  }

  /**
   * The bind method.
   * @param {any} renderstate - The renderstate value.
   * @return {any} - The return value.
   */
  bind(renderstate) {
    for (const uniformBinding of this.__uniformBindings) {
      uniformBinding.bind(renderstate);
    }
    return true
  }

  /**
   * The unbind method.
   */
  unbind() {
    for (const uniformBinding of this.__uniformBindings) {
      uniformBinding.unbind(renderstate);
    }
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    for (const uniformBinding of this.__uniformBindings) {
      uniformBinding.destroy(renderstate);
    }
  }
}

/** Class representing a GL material. 
 * @private
 */
class GLMaterial /* extends BaseItem why do we inherit base item here?*/ {
  /**
   * Create a GL material.
   * @param {any} gl - The gl value.
   * @param {any} material - The material value.
   * @param {any} glshader - The glshader value.
   */
  constructor(gl, material, glshader) {
    // super(name);
    this.__gl = gl;
    this.__material = material;
    this.__glshader = glshader;

    this.updated = new Signal();

    this.__shaderBindings = {};
  }

  /**
   * The getMaterial method.
   * @return {any} - The return value.
   */
  getMaterial() {
    return this.__material
  }

  /**
   * The getGLShader method.
   * @return {any} - The return value.
   */
  getGLShader() {
    return this.__glshader
  }

  /**
   * The generateShaderBinding method.
   */
  generateShaderBinding() {
    const params = this.__material.getParameters();
    for (const param of params) {
      bindParam(gl, param);
    }
  }

  /**
   * The bind method.
   * @param {any} renderstate - The renderstate value.
   * @param {any} warnMissingUnifs - The renderstate value.
   * @return {any} - The return value.
   */
  bind(renderstate, warnMissingUnifs) {
    // console.log("Material:" + this.__material.getName());
    this.__boundTexturesBeforeMaterial = renderstate.boundTextures;

    let shaderBinding = this.__shaderBindings[renderstate.shaderkey];
    if (!shaderBinding) {
      const gl = this.__gl;
      shaderBinding = new MaterialShaderBinding(
        gl,
        this,
        renderstate.unifs,
        warnMissingUnifs
      );
      this.__shaderBindings[renderstate.shaderkey] = shaderBinding;
    }
    return shaderBinding.bind(renderstate)
  }

  /**
   * The unbind method.
   * @param {any} renderstate - The renderstate value.
   */
  unbind(renderstate) {
    // Enable texture units to be re-used by resetting the count back
    // to what it was.
    renderstate.boundTextures = this.__boundTexturesBeforeMaterial;
  }
}

const processTextureParams = function(gl, params) {
  if (!params.width || !params.height) throw new Error('Invalid texture params')

  const maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
  if (
    params.width <= 0 ||
    params.width > maxSize ||
    params.height <= 0 ||
    params.height > maxSize
  ) {
    throw new Error(
      'GLTextureParams: Invalid texture size. width:' +
        params.width +
        ' height:' +
        params.height +
        ' maxSize:' +
        maxSize
    )
  }

  const result = {
    width: params.width,
    height: params.height,
  };
  const processParam = (name, defaultValue) => {
    if (name in params)
      result[name] = isNaN(params[name]) ? gl[params[name]] : params[name];
    else if (defaultValue) result[name] = defaultValue;
  };
  processParam('format');
  processParam('internalFormat', result.format);
  processParam('type', gl.UNSIGNED_BYTE);
  processParam('minFilter', gl.LINEAR);
  processParam('magFilter', gl.LINEAR);
  processParam('wrapS', gl.CLAMP_TO_EDGE);
  processParam('wrapT', gl.CLAMP_TO_EDGE);
  processParam('flipY', false);
  processParam('mipMapped', false);

  processParam('depthFormat');
  processParam('depthType');

  // https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml
  if (result.format == gl.FLOAT) {
    if (gl.name == 'webgl2') {
      if (result.filter == gl.LINEAR && !gl.__ext_float_linear) {
        console.warn(
          'Floating point texture filtering not supported on result device'
        );
        result.filter = gl.NEAREST;
      }
    } else {
      if (gl.__ext_float) {
        if (result.filter == gl.LINEAR && !gl.__ext_float_linear) {
          console.warn(
            'Floating point texture filtering not supported on result device'
          );
          result.filter = gl.NEAREST;
        }
      } else {
        if (gl.__ext_half_float) {
          result.format = gl.HALF_FLOAT;
          if (
            result.filter == gl.LINEAR &&
            !gl.__ext_texture_half_float_linear
          ) {
            console.warn(
              'Half Float texture filtering not supported on result device'
            );
            result.filter = gl.NEAREST;
          }
        } else {
          throw new Error('OES_texture_half_float is not available')
        }
      }
    }
  } else if (result.format == gl.HALF_FLOAT) {
    if (gl.name == 'webgl2') ; else {
      if (gl.__ext_half_float) {
        if (result.filter == gl.LINEAR && !gl.__ext_texture_half_float_linear) {
          console.warn(
            'Half Float texture filtering not supported on result device'
          );
          result.filter = gl.NEAREST;
        }
      } else throw new Error('OES_texture_half_float is not available')
      if (result.channels == gl.RGB) {
        throw new Error('OES_texture_half_float onlysupports RGBA textures')
      }
    }
  } else if (result.format == 'sRGB') {
    if (!gl.__ext_sRGB) throw new Error('EXT_sRGB is not available')
  }

  // ////////////////////////////////////////////////////
  // Format ... InternalFormat combos.
  // Setup the correct combos.
  // the proper texture format combination can be found here
  // https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml
  // Determine the internal format from mthe format and type.
  if (
    result.format != undefined &&
    gl.name == 'webgl2' &&
    result.internalFormat == result.format
  ) {
    if (result.type == gl.FLOAT) {
      if (result.format == gl.RED) {
        result.internalFormat = gl.R32F;
      } else if (result.format == gl.RED) {
        result.internalFormat = gl.R32F;
      } else if (result.format == gl.RG) {
        result.internalFormat = gl.RG32F;
      } else if (result.format == gl.RGBA) {
        result.internalFormat = gl.RGBA32F;
      }
    } else if (result.type == gl.HALF_FLOAT) {
      if (result.format == gl.RED) {
        result.internalFormat = gl.R16F;
      } else if (result.format == gl.RGB) {
        result.internalFormat = gl.RGB16F;
      } else if (result.format == gl.RGBA) {
        result.internalFormat = gl.RGBA16F;
      }
    } else if (result.type == gl.UNSIGNED_BYTE) {
      if (result.format == gl.RED) {
        result.internalFormat = gl.R8;
      }
      if (result.format == gl.RGB) {
        result.internalFormat = gl.RGB8;
      } else if (result.format == gl.RGBA) {
        result.internalFormat = gl.RGBA8;
      }
    }
  }

  if (result.depthFormat != undefined) {
    if (gl.name == 'webgl2') {
      if (result.depthType == gl.UNSIGNED_SHORT) {
        result.depthInternalFormat = gl.DEPTH_COMPONENT16;
      } else if (result.depthType == gl.UNSIGNED_INT) {
        result.depthInternalFormat = gl.UNSIGNED_INT;
      }
    } else {
      result.depthInternalFormat = result.depthFormat;
    }
  }

  return result
};

/** Class representing a GL render target. */
class GLRenderTarget {
  /**
   * Create a GL render target.
   * @param {any} gl - The gl value.
   * @param {any} params - The params value.
   */
  constructor(gl, params) {
    this.resized = new Signal();
    this.updated = new Signal();
    this.__gl = gl;
    this.textureTargets = [];
    this.depthTexture = null;

    if (params) {
      this.configure(params);
    }
  }

  /**
   * The configure method.
   * @param {any} params - The params param.
   */
  configure(params) {
    const gl = this.__gl;

    const p = processTextureParams(gl, params);

    this.textureTargets.forEach(colorTexture => {
      gl.deleteTexture(colorTexture);
    });
    this.textureTargets = [];
    if (this.depthTexture) {
      gl.deleteTexture(this.depthTexture);
      this.depthTexture = null;
    }
    if (this.frameBuffer){
      gl.deleteFramebuffer(this.frameBuffer);
    }

    this.type = p.type;
    this.format = p.format;
    this.internalFormat = p.internalFormat;
    this.filter = p.filter;
    this.wrap = p.wrap;
    this.flipY = p.flipY;
    this.width = p.width;
    this.height = p.height;
    this.clearColor = new Color(0, 0, 0, 0);
    this.colorMask = [true, true, true, true];

    this.textureType = 1; // Default 2d 8 bit texture image texture.
    this.textureDesc = [this.width, this.height, 0, 0];


    // -- Initialize texture targets
    const numColorChannels =
      params.numColorChannels != undefined
        ? params.numColorChannels
        : p.format != undefined
        ? 1
        : 0;
    for (let i = 0; i < numColorChannels; i++) {
      gl.activeTexture(gl.TEXTURE0 + 1);
      const colorTexture = gl.createTexture();
      gl.bindTexture(gl.TEXTURE_2D, colorTexture);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, p.wrapS);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, p.wrapT);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, p.minFilter);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, p.magFilter);
      gl.texImage2D(
        gl.TEXTURE_2D,
        0,
        this.internalFormat,
        p.width,
        p.height,
        0,
        this.format,
        this.type,
        null
      );
      this.textureTargets.push(colorTexture);
    }

    if (p.depthFormat) {
      if (gl.name == 'webgl' && !gl.__ext_WEBGL_depth_texture)
        throw new Error('Depth textures not support on this device')
      // -- Initialize depth texture
      gl.activeTexture(gl.TEXTURE0);
      this.depthTexture = gl.createTexture();
      gl.bindTexture(gl.TEXTURE_2D, this.depthTexture);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, p.wrapS);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, p.wrapT);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, p.minFilter);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, p.magFilter);

      // the proper texture format combination can be found here
      // https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml
      gl.texImage2D(
        gl.TEXTURE_2D,
        0,
        p.depthInternalFormat,
        p.width,
        p.height,
        0,
        p.depthFormat,
        p.depthType,
        null
      );
    }

    // -- Initialize frame buffer
    this.frameBuffer = gl.createFramebuffer();
    if (gl.name == 'webgl2')
      gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.frameBuffer);
    else gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);

    if (this.textureTargets.length > 0) {
      if (this.textureTargets.length > 1) {
        if (gl.name == 'webgl' && !gl.drawBuffers) {
          gl.__ext_draw_buffers = gl.getExtension('WEBGL_draw_buffers');
          gl.drawBuffers = gl.__ext_draw_buffers.drawBuffersWEBGL.bind(
            gl.__ext_draw_buffers
          );
          for (let i = 1; i < 14; i++) {
            gl['COLOR_ATTACHMENT' + i] =
              gl.__ext_draw_buffers['COLOR_ATTACHMENT' + i + '_WEBGL'];
          }
          gl.MAX_COLOR_ATTACHMENTS =
            gl.__ext_draw_buffers.MAX_COLOR_ATTACHMENTS_WEBGL;
          gl.MAX_DRAW_BUFFERS = gl.__ext_draw_buffers.MAX_DRAW_BUFFERS_WEBGL;
        }
      }

      const bufferIds = [];
      for (let i = 0; i < this.textureTargets.length; i++) {
        gl.framebufferTexture2D(
          gl.DRAW_FRAMEBUFFER,
          gl.COLOR_ATTACHMENT0 + i,
          gl.TEXTURE_2D,
          this.textureTargets[i],
          0
        );
        bufferIds.push(gl.COLOR_ATTACHMENT0 + i);
      }
      if (this.textureTargets.length > 1) {
        gl.drawBuffers(bufferIds);
      }
    }

    if (this.depthTexture) {
      gl.framebufferTexture2D(
        gl.DRAW_FRAMEBUFFER,
        gl.DEPTH_ATTACHMENT,
        gl.TEXTURE_2D,
        this.depthTexture,
        0
      );
    }

    const status = gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER);
    if (status != gl.FRAMEBUFFER_COMPLETE) {
      switch (status) {
        case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
          throw new Error(
            'The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.'
          )
        case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
          throw new Error('There is no attachment.')
        case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
          throw new Error(
            'Height and width of the attachment are not the same.'
          )
        case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
          throw new Error(
            'The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.'
          )
        case 36061: // gl.GL_FRAMEBUFFER_UNSUPPORTED:
          throw new Error('The framebuffer is unsupported')
        default:
          throw new Error('Incomplete Frambuffer')
      }
    }
    this.unbind();
  }

  /**
   * The bindForWriting method.
   * @param {any} renderstate - The renderstate value.
   * @param {boolean} clear - The clear value.
   */
  bindForWriting(renderstate, clear = false) {
    if (renderstate) {
      this.__prevBoundFbo = renderstate.boundRendertarget;
      renderstate.boundRendertarget = this.frameBuffer;
    }
    const gl = this.__gl;
    if (gl.name == 'webgl2')
      gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.frameBuffer);
    else gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);
    gl.viewport(0, 0, this.width, this.height); // Match the viewport to the texture size
    if (clear) this.clear();
  }

  /**
   * The unbindForWriting method.
   * @param {any} renderstate - The renderstate value.
   */
  unbindForWriting(renderstate) {
    if (renderstate) renderstate.boundRendertarget = this.__prevBoundFbo;
    const gl = this.__gl;
    if (gl.name == 'webgl2')
      gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.__prevBoundFbo);
    else gl.bindFramebuffer(gl.FRAMEBUFFER, this.__prevBoundFbo);
  }

  /**
   * The clear method.
   * @param {boolean} clearDepth - The clearDepth value.
   */
  clear(clearDepth = true) {
    const gl = this.__gl;
    gl.colorMask(...this.colorMask);
    gl.clearColor(...this.clearColor.asArray());
    let flags = 0;
    if (this.textureTargets.length > 0) flags |= gl.COLOR_BUFFER_BIT;
    if (this.depthTexture) flags |= gl.DEPTH_BUFFER_BIT;
    gl.clear(flags);
  }

  /**
   * The bindForReading method.
   */
  bindForReading() {
    const gl = this.__gl;
    if (gl.name == 'webgl2')
      gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this.frameBuffer);
    else gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);
  }

  /**
   * The unbindForReading method.
   */
  unbindForReading() {
    const gl = this.__gl;
    if (gl.name == 'webgl2') gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
    else gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  }


  /**
   * The bindColorTexture method.
   * @param {any} renderstate - The renderstate value.
   * @param {any} unif - The unif value.
   * @param {number} channelId - The channelId value.
   * @return {boolean} - The return value.
   */
  bindColorTexture(renderstate, unif, channelId = 0) {
    const gl = this.__gl;
    const unit = renderstate.boundTextures++;
    gl.uniform1i(unif.location, unit);
    gl.activeTexture(gl.TEXTURE0 + unit);
    gl.bindTexture(gl.TEXTURE_2D, this.textureTargets[channelId]);
    return true
  }

  /**
   * The bindDepthTexture method.
   * @param {any} renderstate - The renderstate value.
   * @param {any} unif - The unif value.
   * @return {boolean} - The return value.
   */
  bindDepthTexture(renderstate, unif) {
    const gl = this.__gl;
    const unit = renderstate.boundTextures++;
    gl.uniform1i(unif.location, unit);
    gl.activeTexture(gl.TEXTURE0 + unit);
    gl.bindTexture(gl.TEXTURE_2D, this.depthTexture);
    return true
  }

  /**
   * The unbind method.
   */
  unbind() {
    const gl = this.__gl;
    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
  }

  /**
   * The resize method.
   * @param {any} width - The width value.
   * @param {any} height - The height value.
   * @param {boolean} preserveData - The preserveData value.
   */
  resize(width, height, preserveData = false) {
    /*
    const gl = this.__gl;
    const sizeChanged = this.width != width || this.height != height;
    if (sizeChanged) {
      const maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE)
      if (width < 0 || width > maxSize || height < 0 || height > maxSize) {
          throw new Error("gl-texture2d: Invalid texture size. width:" + width + " height:" + height + " maxSize:" + maxSize);
      }
      const gltex = gl.createTexture();
      gl.bindTexture(gl.TEXTURE_2D, gltex);
      gl.texImage2D(gl.TEXTURE_2D, 0, this.__internalFormat, width, height, 0, this.__channels, this.__format, null);

      if (preserveData) {
        const fbo = gl.createFramebuffer();
        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.__gltex, 0);

        gl.bindTexture(gl.TEXTURE_2D, gltex); // Do we need this line?
        gl.copyTexImage2D(gl.TEXTURE_2D, 0, this.__internalFormat, 0, 0, this.width, this.height, 0);

        gl.bindFramebuffer(gl.FRAMEBUFFER, null);

        gl.deleteFramebuffer(fbo)
      }

      this.width = width;
      this.height = height;

      this.__gl.deleteTexture(this.__gltex);
      this.__gltex = gltex;
      this.__updateGLTexParams();
      if (emit) {
          this.resized.emit(width, height);
      }
    }

    if (gl.name == 'webgl2')
      gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.frameBuffer);
    else
      gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);

    // The color texture is destoryed and re-created when it is resized,
    // so we must re-bind it here..
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.__colorTexture.glTex, 0);
    if (this.depthChannel) {
      gl.activeTexture(gl.TEXTURE0);
      gl.bindTexture(gl.TEXTURE_2D, this.__depthTexture);
      if (gl.name == 'webgl2'){
        // the proper texture format combination can be found here
        // https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT24, this.width, this.height, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_INT, null);
      }
      else
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT, this.width, this.height, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_INT, null);
    }
    this.__checkFramebuffer();
    //gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    */
  }


  /**
   * The bindToUniform method.
   * @param {any} renderstate - The renderstate param.
   * @param {any} unif - The unif param.
   * @param {any} bindings - The bindings param.
   * @return {any} - The return value.
   */
  bindToUniform(renderstate, unif, bindings) {
    // if (!this.__loaded) {
    //   return false
    // }
    // if (!this.__gltex) {
    //   throw new Error('Unable to bind non-initialized or deleted texture.')
    // }

    const unit = renderstate.boundTextures++;
    const texId = this.__gl.TEXTURE0 + unit;
    const gl = this.__gl;
    gl.activeTexture(texId);
    gl.bindTexture(gl.TEXTURE_2D, this.textureTargets[0]);
    gl.uniform1i(unif.location, unit);

    if (bindings) {
      if (bindings.textureTypeUnif) {
        gl.uniform1i(bindings.textureTypeUnif.location, this.textureType);
      }

      if (bindings.textureDescUnif) {
        this.__gl.uniform4fv(
          bindings.textureDescUnif.location,
          this.textureDesc
        );
      }
    }

    return true
  }

  

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    const gl = this.__gl;
    this.textureTargets.forEach(colorTexture => {
      gl.deleteTexture(colorTexture);
    });
    this.textureTargets = [];
    if (this.depthTexture) {
      gl.deleteTexture(this.depthTexture);
      this.depthTexture = null;
    }
    if (this.frameBuffer){
      gl.deleteFramebuffer(this.frameBuffer);
    }
  }
}

//based on http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
const bits = new Uint32Array(1);

function radicalInverse_VdC(i) {
  bits[0] = i;
  bits[0] = ((bits[0] << 16) | (bits[0] >> 16)) >>> 0;
  bits[0] = ((bits[0] & 0x55555555) << 1) | (((bits[0] & 0xaaaaaaaa) >>> 1) >>> 0);
  bits[0] = ((bits[0] & 0x33333333) << 2) | (((bits[0] & 0xcccccccc) >>> 2) >>> 0);
  bits[0] = ((bits[0] & 0x0f0f0f0f) << 4) | (((bits[0] & 0xf0f0f0f0) >>> 4) >>> 0);
  bits[0] = ((bits[0] & 0x00ff00ff) << 8) | (((bits[0] & 0xff00ff00) >>> 8) >>> 0);
  return bits[0] * 2.3283064365386963e-10 // / 0x100000000 or / 4294967296
}

function hammersley(i, n) {
      return [i / n, radicalInverse_VdC(i)]
}

shaderLibrary.setShaderModule(
  'utils/imageAtlas.glsl',
  `

// Note: On mobile, I can't seem to pass around a stuct containing sampler2D.
// I have to unpack the struct and pass its members. :(
// struct ImageAtlas {
//     sampler2D layout;
//     sampler2D image;
//     vec4 desc;
// };



vec4 getSubImageLayout(int index, in sampler2D atlasLayout, in vec4 atlasDesc){
    return fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);
}

vec2 calcSubImageTexCoords(vec2 texCoord, int index, in sampler2D atlasLayout, in vec4 atlasDesc){
    vec4 layoutData = fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);
    // The following line is a hack to fix artifacts in our PBR lighting
    // We were seeing loads of lighting garbage on some sufaces that were orthogonal
    // to the world. The UV coordinates would have been landing right on the edges
    // of our subimages and were often sampling outside the image. This couuld
    // have been because of filtering, or an error in the uv coords. 
    texCoord = clamp(texCoord, vec2(0.01, 0.01), vec2(0.99, 0.99));
    vec2 subimageTexel = texCoord * layoutData.zw;
    // subimageTexel = clamp(subimageTexel, vec2(0.0, 0.0), vec2(1.0, 1.0));
    return subimageTexel + layoutData.xy;
}

vec4 sampleSubImage(vec2 texCoord, int index, in sampler2D atlasLayout, in sampler2D atlasImage, in vec4 atlasDesc){
    vec4 layoutData = fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);
    vec2 atlasCoords = calcSubImageTexCoords(texCoord, index, atlasLayout, atlasDesc);
    return texture2D(atlasImage, atlasCoords);
}

`
);

// eslint-disable-next-line require-jsdoc
class AtlasLayoutShader extends GLShader {
  /**
   * Create an atlas layout shader.
   * @param {any} gl - The gl value.
   */
  constructor(gl) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'AtlasLayoutShader.vertexShader',
      `

precision highp float;

<%include file="utils/quadVertexFromID.glsl"/>

uniform vec2 pos;
uniform vec2 size;
uniform vec2 srctextureDim;
const int border = 2;

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
  vec2 position = getQuadVertexPositionFromID();
  v_texCoord = position+0.5;
  gl_Position = vec4(vec2(-1.0, -1.0) + (pos * 2.0) + (v_texCoord * size * 2.0), 0.0, 1.0);

  vec2 borderVec2 = vec2(float(border), float(border));
  v_texCoord *= (srctextureDim + (borderVec2 * 2.0)) / srctextureDim;
  v_texCoord -= borderVec2 / srctextureDim;
}

`
    );
    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'AtlasLayoutShader.fragmentShader',
      `
precision highp float;

uniform sampler2D srctexture;
uniform vec2 srctextureDim;
uniform bool alphaFromLuminance;
uniform bool invert;

/* VS Outputs */
varying vec2 v_texCoord;

float luminanceFromRGB(vec3 rgb) {
  return 0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b;
}

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

void main(void) {
  vec2 pixelCoord = v_texCoord*srctextureDim;
  vec2 uv = v_texCoord;

  // Wrap X coords
  if(pixelCoord.x < 0.0){
    uv.x += 1.0/srctextureDim.x;
    uv.y = 1.0 - uv.y;
  }
  else if(pixelCoord.x > srctextureDim.x){
    uv.x -= 1.0/srctextureDim.x;
    uv.y = 1.0 - uv.y;
  }

  // Wrap Y coords
  if(pixelCoord.y < 0.0){
    uv.y += 1.0/srctextureDim.y;
    uv.x = 1.0 - uv.x;
  }
  else if(pixelCoord.y > srctextureDim.y){
    uv.y -= 1.0/srctextureDim.y;
    uv.x = 1.0 - uv.x;
  }

  vec4 texel = texture2D(srctexture, uv);

#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  // TODO: check why we pre-multiply alphas here.
  // fragColor = vec4(texel.rgb/texel.a, texel.a);

  if(alphaFromLuminance) {
    fragColor = vec4(texel.rgb, luminanceFromRGB(texel.rgb));
  }
  else {
    fragColor = texel;
  }
  
  if(invert) {
    fragColor = vec4(1.0) - fragColor;
  }

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}

`
    );
  }
}

// eslint-disable-next-line require-jsdoc
class GLImageAtlas extends GLRenderTarget {
  /**
   * Create an image atlas..
   * @param {any} gl - The gl value.
   * @param {string} name - The name value.
   * @param {any} format - The format value.
   * @param {any} type - The type value.
   * @param {any} clearColor - The clearColor value.
   */
  constructor(gl, name, format = 'RGBA', type = 'FLOAT') {
    super(gl);
    this.__name = name;
    this.__formatParam = format;
    this.__typeParam = type;
    this.clearColor = new Color(0, 0, 0, 0);
    this.__subImages = [];
    this.__layoutNeedsRegeneration = false;
    this.__async = new Async();
    this.loaded = this.__async.ready;
  }

  /**
   * The isLoaded method.
   * @return {any} - The return value.
   */
  isLoaded() {
    return this.__async.count == 0
  }

  /**
   * The getMainImage method.
   * @return {any} - The return value.
   */
  getMainImage() {
    return this.super
  }

  /**
   * The addSubImage method.
   * @param {any} subImage - The subImage value.
   * @return {any} - The return value.
   */
  addSubImage(subImage) {
    if (subImage instanceof BaseImage) {
      const gltexture = new GLTexture2D(this.__gl, subImage);
      if (!subImage.isLoaded()) {
        this.__async.incAsyncCount();
        subImage.loaded.connect(() => {
          this.__async.decAsyncCount();
        });
      }
      subImage.setMetadata('ImageAtlas_gltex', gltexture);
      gltexture.addRef(this);
      subImage.updated.connect(() => {
        // TODO: Check to see if the new dimensions
        // do not match the previous. If not, then we 
        // need to relayout. wE could also avlid a complete
        // relaout by reremoving and re-adding this image.
        this.__layoutNeedsRegeneration = true;
        this.renderAtlas();
      });
      this.__subImages.push(gltexture);
    } else {
      subImage.addRef(this); // subImage is a GLTexture2D
      this.__subImages.push(subImage);
    }

    this.__layoutNeedsRegeneration = true;
    return this.__subImages.length - 1
  }

  /**
   * The removeSubImage method.
   * @param {any} subImage - The subImage value.
   */
  removeSubImage(subImage) {
    let index;
    if (subImage instanceof BaseImage) {
      const gltext = subImage.getMetadata('ImageAtlas_gltex');
      index = this.__subImages.indexOf(gltext);
      subImage.deleteMetadata('ImageAtlas_gltex');
    } else {
      index = this.__subImages.indexOf(subImage);
    }
    const gltexture = this.__subImages[index];
    gltexture.removeRef(this);

    this.__subImages.splice(index, 1);

    this.__layoutNeedsRegeneration = true;
  }

  /**
   * The getSubImage method.
   * @param {number} index - The index value.
   * @return {any} - The return value.
   */
  getSubImage(index) {
    return this.__subImages[index]
  }

  /**
   * The numSubImages method.
   * @return {any} - The return value.
   */
  numSubImages() {
    if (this.__layout) return this.__layout.length
    return this.__subImages.length
  }

  /**
   * The generateAtlasLayout method.
   */
  generateAtlasLayout() {
    if (this.__subImages.length == 0) {
      this.__layoutNeedsRegeneration = false;
      return
    }
    const border = 2;

    // We must lay out the sub images in order of size.
    // else the paker might have trouble.
    const blocks = [];
    this.__subImages.forEach((subImage, index) => {
      blocks.push({
        w: subImage.width + border * 2,
        h: subImage.height + border * 2,
        area: subImage.width * subImage.height,
        index,
      });
    });

    blocks.sort((a, b) => (a.area > b.area ? -1 : a.area < b.area ? 1 : 0));

    const packer = new GrowingPacker();
    packer.fit(blocks);

    this.__layout = [];
    blocks.forEach((block, index) => {
      const subImage = this.__subImages[block.index];
      if (block.fit) {
        this.__layout[block.index] = {
          pos: new Vec2(block.fit.x + border, block.fit.y + border),
          size: new Vec2(block.w, block.h),
        };
      } else {
        console.warn('Unable to fit image');
      }
    });

    const width = packer.root.w;
    const height = packer.root.h;

    // console.log(this.__name + " Atlas Texture size:" + width.toFixed() + ", " + height.toFixed());

    // Note: only RGBA Float textures can be rendered to on Firefox.(Not RGB)
    this.configure({
      width,
      height,
      format:
        this.__typeParam == 'FLOAT' && this.__formatParam == 'RGB'
          ? 'RGBA'
          : this.__formatParam,
      type: this.__typeParam,
      filter: 'LINEAR',
    });

    const gl = this.__gl;
    // this.__fbo = new GLFbo(gl, this)
    // this.__fbo.setClearColor(this.__clearColor)

    if (!gl.__quadVertexIdsBuffer) gl.setupInstancedQuad();

    if (!gl.__atlasLayoutShader) {
      gl.__atlasLayoutShader = new AtlasLayoutShader(gl);
      const shaderComp = gl.__atlasLayoutShader.compileForTarget('GLImageAtlas');
      gl.__atlasLayoutShaderBinding = generateShaderGeomBinding(
        gl,
        shaderComp.attrs,
        gl.__quadattrbuffers,
        gl.__quadIndexBuffer
      );
    }

    const pixelsPerItem = 1;
    let size = Math.round(Math.sqrt(this.__layout.length * pixelsPerItem) + 0.5);
    // Only support power 2 textures. Else we get strange corruption on some GPUs
    // in some scenes.
    size = Math.nextPow2(size);
    // Size should be a multiple of pixelsPerItem, so each geom item is always contiguous
    // in memory. (makes updating a lot easier. See __updateItemInstanceData below)
    if (size % pixelsPerItem != 0)
      size += pixelsPerItem - (size % pixelsPerItem);

    if (!gl.floatTexturesSupported) {
      this.__layoutVec4s = [];
      this.__layout.forEach((layoutItem, index) => {
        this.__layoutVec4s[index] = [
          layoutItem.pos.x / width,
          layoutItem.pos.y / height,
          layoutItem.size.x / width,
          layoutItem.size.y / height,
        ];
      });
    } else {
      const dataArray = new Float32Array(
        size * size * 4
      ); /* each pixel has 4 floats*/
      for (let i = 0; i < this.__layout.length; i++) {
        const layoutItem = this.__layout[i];
        const vec4 = Vec4$1.createFromFloat32Buffer(dataArray.buffer, i * 4);
        vec4.set(
          layoutItem.pos.x / width,
          layoutItem.pos.y / height,
          layoutItem.size.x / width,
          layoutItem.size.y / height
        );
      }
      if (
        !this.__atlasLayoutTexture ||
        this.__atlasLayoutTexture.width != size ||
        this.__atlasLayoutTexture.height != size
      ) {
        if (this.__atlasLayoutTexture) this.__atlasLayoutTexture.destroy();
        this.__atlasLayoutTexture = new GLTexture2D(gl, {
          format: 'RGBA',
          type: 'FLOAT',
          filter: 'NEAREST',
          wrap: 'CLAMP_TO_EDGE',
          mipMapped: false,
          width: size,
          height: size,
          data: dataArray,
        });
      } else {
        this.__atlasLayoutTexture.bufferData(dataArray, size, size);
      }
    }

    this.__layoutNeedsRegeneration = false;
  }

  /**
   * The getLayoutData method.
   * @param {number} index - The index value.
   * @return {any} - The return value.
   */
  getLayoutData(index) {
    return this.__layoutVec4s[index]
  }

  /**
   * The renderAtlas method.
   * @param {boolean} cleanup - The cleanup value.
   * @param {number} off - The off value.
   */
  renderAtlas(cleanup = false, off = 0) {
    if (this.__subImages.length == 0) {
      return
    }
    if (this.__layoutNeedsRegeneration) {
      this.generateAtlasLayout();
    }
    const gl = this.__gl;
    const renderstate = {};
    this.bindForWriting(renderstate, true);

    gl.__atlasLayoutShader.bind(renderstate, 'GLImageAtlas');
    gl.__atlasLayoutShaderBinding.bind(renderstate);
    const scl = new Vec2(1.0 / this.width, 1.0 / this.height);

    const unifs = renderstate.unifs;
    for (let j = off; j < this.__subImages.length; j++) {
      const glimage = this.__subImages[j];

      const layoutItem = this.__layout[j];
      glimage.bindToUniform(renderstate, unifs.srctexture);
      gl.uniform2fv(unifs.pos.location, layoutItem.pos.multiply(scl).asArray());
      gl.uniform2fv(
        unifs.size.location,
        layoutItem.size.multiply(scl).asArray()
      );
      gl.uniform2f(unifs.srctextureDim.location, glimage.width, glimage.height);
      gl.uniform1i(
        unifs.alphaFromLuminance.location,
        glimage.alphaFromLuminance
      );
      gl.uniform1i(unifs.invert.location, glimage.invert);
      gl.drawQuad();

      // After rendering the texture, we can reuse the texture unit.
      renderstate.boundTextures--;
    }

    if (cleanup) {
      this.cleanup();
    }

    this.unbind(renderstate);
    // this.__fbo.unbind()
    this.updated.emit();
  }

  /**
   * The isReady method.
   * @return {any} - The return value.
   */
  isReady() {
    return this.__atlasLayoutTexture != undefined
  }

  /**
   * The bindToUniform method.
   * @param {any} renderstate - The renderstate value.
   * @param {any} unif - The unif value.
   * @return {any} - The return value.
   */
  bindToUniform(renderstate, unif) {
    if (!this.__atlasLayoutTexture) return false

    super.bindToUniform(renderstate, unif);

    const unifs = renderstate.unifs;
    const atlasLayoutUnif = unifs[unif.name + '_layout'];
    if (atlasLayoutUnif)
      this.__atlasLayoutTexture.bindToUniform(renderstate, atlasLayoutUnif);

    const atlasDescUnif = unifs[unif.name + '_desc'];
    if (atlasDescUnif)
      this.__gl.uniform4f(
        atlasDescUnif.location,
        this.width,
        this.height,
        this.__atlasLayoutTexture.width,
        0.0
      );

    return true
  }

  /**
   * The cleanup method.
   */
  cleanup() {
    for (const glimage of this.__subImages) {
      glimage.removeRef(this);
    }
    this.__subImages = [];
    this.destroy();
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    this.cleanup();
    super.destroy();
  }
}

class ConvolverShader extends GLShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'ConvolverShader.vertexShader',
      `
precision highp float;

<%include file="utils/quadVertexFromID.glsl"/>

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
  vec2 position = getQuadVertexPositionFromID();
  v_texCoord = position+0.5;
  gl_Position = vec4(position*2.0, 0.0, 1.0);
}
`
    );
    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'ConvolverShader.fragmentShader',
      `
precision highp float;

<%include file="math/constants.glsl"/>
<%include file="GLSLUtils.glsl"/>
<%include file="utils/imagePyramid.glsl"/>
<%include file="pragmatic-pbr/envmap-octahedral.glsl"/>

uniform float roughness;
varying vec2 v_texCoord;

uniform sampler2D hammersleyMap;
vec2 Hammersley(int i, int N) {
  vec4 rgba =  texture2D(hammersleyMap, vec2((float(i) + 0.5)/float(N)), 0.5);
  return rgba.rg;
}

mat3 matrixFromVector(vec3 n) { // frisvad
  float a = 1.0 / (1.0 + n.z);
  float b = -n.x * n.y * a;
  vec3 b1 = vec3(1.0 - n.x * n.x * a, b, -n.x);
  vec3 b2 = vec3(b, 1.0 - n.y * n.y * a, -n.y);
  return mat3(b1, b2, n);
}

vec3 ImportanceSampleGGX(vec2 Xi, float a) {
  float phi = 2.0 * PI * Xi.x;
  float cos_theta = sqrt((1.0 - Xi.y)/(1.0 + (a*a - 1.0) * Xi.y));
  float sin_theta = sqrt(1.0 - cos_theta * cos_theta);

  // float phi = Xi.y * 2.0 * PI;
  // float cos_theta = sqrt(1.0 - Xi.x);
  // float sin_theta = sqrt(1.0 - cos_theta * cos_theta);

  vec3 H;
  H.x = sin_theta * cos(phi);
  H.y = sin_theta * sin(phi);
  H.z = cos_theta;
  return H;
}

// TODO: use tobias's code. The guy clearly knows what he's doing...
// https://github.com/thefranke/dirtchamber/blob/master/shader/importance.hlsl
// Compute a LOD level for filtered importance sampling.
// From GPU Gems 3: GPU-Based Importance Sampling.


#define M_PI       3.14159265358979323846   // pi
#define M_HALF_PI  1.57079632679489661923   // pi/2
float sqr(float val){ return val*val; }
float saturate(float val) { return clamp(val, 0.0, 1.0); }
vec3 saturate(vec3 val) { return clamp(val, 0.0, 1.0); }

// Microfacet Models for Refraction through Rough Surfaces
// Walter et al.
// http://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.html
// aka Towbridge-Reitz
float D_ggx(in float alpha, in float NoH)
{
  float a2 = alpha*alpha;
  float cos2 = NoH*NoH;

  return (1.0/M_PI) * sqr(alpha/(cos2 * (a2 - 1.0) + 1.0));

  /*
  // version from the paper, eq 33
  float CosSquared = NoH*NoH;
  float TanSquared = (1.0 - CosSquared)/CosSquared;
  return (1.0/M_PI) * sqr(alpha/(CosSquared * (alpha*alpha + TanSquared)));
  */
}
float compute_lod(in vec3 H, in float pdf, in int num_samples, in int ww, in int hh)
{
  return max(0.0, 0.5*log2(float(ww*hh)/float(num_samples)) - 0.5*log2(pdf));
}

uniform sampler2D   envMapPyramid;
uniform sampler2D   envMapPyramid_layout;
uniform vec4        envMapPyramid_desc;

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif
void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  vec3 N = sphOctUvToDir(v_texCoord);

  if(false){
    vec2 uv = dirToSphOctUv(N);
    // fragColor = vec4(uv.x, uv.y, 0.0, 1.0);
    fragColor = sampleImagePyramid(uv, 0.5, envMapPyramid_layout, envMapPyramid, envMapPyramid_desc);
    // fragColor = sampleSubImage(uv, 0, envMapPyramid_layout, envMapPyramid, envMapPyramid_desc);
    // fragColor = texture2D(envMapPyramid, uv);
  }
  else{
    const int numSamples = NUM_SAMPLES;
    int w = int(floor(envMapPyramid_desc.x + 0.5));
    int h = int(floor(envMapPyramid_desc.y + 0.5));

    vec4 color = vec4(0.0,0.0,0.0,0.0);
    float weight = 0.0;
    mat3 vecSpace = matrixFromVector(N);
    float a = roughness*roughness;
    for(int i=0; i<numSamples; i++) {
      vec2 Xi = Hammersley(i, numSamples);
      vec3 H = ImportanceSampleGGX(Xi, a);
      vec3 V = normalize(vecSpace * H);
      float VdotN = dot(V, N);
      float NoH = saturate( dot( N, H ) );
      float VoH = saturate( dot( V, H ) );

      vec2 uv = dirToSphOctUv(V);
      // float pdf = D_ggx(a, NoH) * NoH / (4.0 * VoH);
      // float lod = compute_lod(H, pdf, numSamples, w, h);

      color += sampleImagePyramid(uv, a, envMapPyramid_layout, envMapPyramid, envMapPyramid_desc) * VdotN;
      weight += VdotN;
    }
    color /= float(weight);
    fragColor = vec4(color.rgb, 1.0);
  }
  
#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}

`
    );
  }
}

shaderLibrary.setShaderModule(
  'utils/imagePyramid.glsl',
  `

<%include file="utils/imageAtlas.glsl"/>

vec4 sampleImagePyramid(vec2 uv, float lod, in sampler2D atlasLayout, in sampler2D atlasImage, in vec4 atlasDesc){
  if (lod < 0.00001 || lod > 0.9999) {
    float imageIndex = lod * (atlasDesc.z-1.0);
    int imageId0 = int(imageIndex);
    return sampleSubImage(uv, imageId0, atlasLayout, atlasImage, atlasDesc);
  } else {
    float imageIndex = lod * (atlasDesc.z-1.0);
    int imageId0 = int(floor(imageIndex));
    int imageId1 = imageId0+1;
    float blend = fract(imageIndex);
    vec4 c0 = sampleSubImage(uv, imageId0, atlasLayout, atlasImage, atlasDesc);
    vec4 c1 = sampleSubImage(uv, imageId1, atlasLayout, atlasImage, atlasDesc);
    return mix(c0, c1, blend);
  } 
}


`
);

const Math_log2 = function(value) {
  // IE11 doesn't support Math.log2.
  return Math.log2(value)
  // return Math.log( value ) / Math.log( 2 ) - 2;
};

// class PyramidShader extends GLShader {

//     constructor(gl) {
//         super(gl);
//         this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader('PyramidShader.vertexShader', `

// <%include file="utils/quadVertexFromID.glsl"/>

// uniform vec2 pos;
// uniform vec2 size;

// /* VS Outputs */
// varying vec2 v_texCoord;

// void main()
// {
//     vec2 position = getQuadVertexPositionFromID();
//     v_texCoord = position+0.5;
//     gl_Position = vec4(vec2(-1.0,-1.0)+(pos*2.0)+(v_texCoord*size*2.0), 0.0, 1.0);
// }

// `);
//         this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader('PyramidShader.fragmentShader', `

// precision highp float;

// uniform sampler2D texture;
// uniform vec2 textureDim;

// varying vec2 v_texCoord;

// void main(void) {
//     vec2 pixelCoord = v_texCoord*textureDim;

//     vec2 acoord = abs(pixelCoord-textureDim*0.5);
//     float limit = textureDim.x*0.5-1.0;
//     vec2 sourceCoord = clamp(pixelCoord-1.0, 0.5, textureDim.x-2.5);
//     vec2 uv = sourceCoord/(textureDim-2.0);

//     if(acoord.x > limit && acoord.y > limit){
//         uv = 1.0 - uv;
//     }
//     else if(acoord.x > limit){
//         uv.y = 1.0 - uv.y;
//     }
//     else if(acoord.y > limit){
//         uv.x = 1.0 - uv.x;
//     }
//     vec4 texel = texture2D(texture, uv);
//     gl_FragColor = vec4(texel.rgb/texel.a, 1);
// }

// `);
//     }
// };

/** Class representing an image pyramid.
 * @extends GLImageAtlas
 * @private
 */
class ImagePyramid extends GLImageAtlas {
  /**
   * Create an image pyramid.
   * @param {any} gl - The gl value.
   * @param {string} name - The name value.
   * @param {any} srcGLTex - The srcGLTex value.
   * @param {boolean} destroySrcImage - The destroySrcImage value.
   * @param {number} minTileSize - The minTileSize value.
   */
  constructor(gl, name, srcGLTex, destroySrcImage = true, minTileSize = 16) {
    super(gl, name);

    this.__srcGLTex = srcGLTex;
    this.__fbos = [];

    srcGLTex.updated.connect(() => {
      this.renderAtlas(destroySrcImage);
    });
    if (this.__srcGLTex.isLoaded()) {
      this.generateAtlasLayout(minTileSize);
      this.renderAtlas(destroySrcImage);
    } else {
      this.__srcGLTex.updated.connect(() => {
        this.generateAtlasLayout(minTileSize);
        this.renderAtlas(destroySrcImage);
      });
    }
  }

  /**
   * The generateAtlasLayout method.
   * @param {any} minTileSize - The minTileSize value.
   */
  generateAtlasLayout(minTileSize) {
    const gl = this.__gl;

    this.size = this.__srcGLTex.height;
    const aspectRatio = this.__srcGLTex.width / this.__srcGLTex.height;

    this.addSubImage(this.__srcGLTex);
    const numLevels = Math.round(Math_log2(this.size)) - 1; // compute numLevels-1 levels(because we use the source image as the base level);
    for (let i = numLevels; i >= 0; --i) {
      const size = Math.pow(2, i);
      if (size < minTileSize) break
      // Create a target texture for this level of the pyramid.
      // and then render to it using the base level as a source image.
      const level = new GLTexture2D(gl, {
        format: this.__srcGLTex.getFormat(),
        type: this.__srcGLTex.getType(),
        width: size * aspectRatio,
        height: size,
        filter: 'LINEAR',
        wrap: 'CLAMP_TO_EDGE',
      });
      this.addSubImage(level);
      this.__fbos.push(new GLFbo(gl, level));
    }

    super.generateAtlasLayout();
  }

  /**
   * The renderAtlas method.
   * @param {boolean} cleanup - The cleanup value.
   */
  renderAtlas(cleanup = true) {
    const gl = this.__gl;
    const renderstate = {};
    gl.screenQuad.bindShader(renderstate);

    for (let i = 0; i < this.__fbos.length; i++) {
      this.__fbos[i].bindAndClear();
      gl.screenQuad.draw(renderstate, this.getSubImage(i)); // Note: we are binding the previous image. (we have 1 more images than fbos.)
    }

    super.renderAtlas(cleanup);
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    super.destroy();
    for (const fbo of this.__fbos) {
      fbo.destroy();
    }
  }
}

/** Class representing a GL probe.
 * @extends GLImageAtlas
 * @private
 */
class GLProbe extends GLImageAtlas {
  /**
   * Create a GL probe.
   * @param {any} gl - The gl value.
   * @param {string} name - The name value.
   */
  constructor(gl, name) {
    super(gl, name);
    this.__gl = gl;

    if (!gl.__quadVertexIdsBuffer) gl.setupInstancedQuad();

    this.__convolved = false;
    this.__fbos = [];
  }

  /**
   * The generateHammersleySamples method.
   * @param {any} numSamples - The numSamples value.
   * @return {any} - The return value.
   */
  generateHammersleySamples(numSamples) {
    const gl = this.__gl;
    if (!gl['Hammersley' + numSamples]) {
      const dataArray = new Float32Array(numSamples * 3);
      for (let i = 0; i < numSamples; i++) {
        const Xi = hammersley(i, numSamples);
        const offset = i * 3;
        dataArray[offset + 0] = Xi[0];
        dataArray[offset + 1] = Xi[1];
      }
      gl['Hammersley' + numSamples] = new GLTexture2D(gl, {
        format: 'RGB',
        type: 'FLOAT',
        filter: 'NEAREST',
        wrap: 'CLAMP_TO_EDGE',
        width: numSamples,
        height: 1,
        data: dataArray,
        mipMapped: false,
      });
    }
    return gl['Hammersley' + numSamples]
  }

  /**
   * The convolveProbe method.
   * @param {any} srcGLTex - The srcGLTex value.
   */
  convolveProbe(srcGLTex) {
    const gl = this.__gl;

    // Compile and bind the convolver shader.
    const numSamples = 1024;
    // const numSamples = 64;
    const hammersleyTexture = this.generateHammersleySamples(numSamples);

    if (!this.__convolved) {
      if (!this.__lodPyramid) {
        this.__lodPyramid = new ImagePyramid(gl, 'Probe Lods', srcGLTex, false);
        this.__lodPyramid.updated.connect(() => {
          // If the image pyramid updates, we need to re-convolve.
          this.convolveProbe(srcGLTex);
        });
      }

      this.addSubImage(srcGLTex);

      let currRez = [srcGLTex.width / 2, srcGLTex.height / 2];

      const levels = 6; // this.__lodPyramid.numSubImages();
      for (let i = 0; i < levels; i++) {
        const level = new GLTexture2D(gl, {
          format: 'RGBA',
          type: 'FLOAT',
          filter: 'LINEAR',
          wrap: 'CLAMP_TO_EDGE',
          width: currRez[0],
          height: currRez[1],
        });
        this.addSubImage(level);

        const fbo = new GLFbo(gl, level);
        fbo.setClearColor([0, 1, 0, 0]);
        this.__fbos.push(fbo);

        currRez = [currRez[0] / 2, currRez[1] / 2];
      }

      this.generateAtlasLayout();

      this.__convolverShader = new ConvolverShader(gl);
      const covolverShaderComp = this.__convolverShader.compileForTarget(
        'GLProbe',
        Object.assign(
          {
            repl: {
              NUM_SAMPLES: numSamples,
            },
          },
          gl.shaderopts
        )
      );
      this.__covolverShaderBinding = generateShaderGeomBinding(
        gl,
        covolverShaderComp.attrs,
        gl.__quadattrbuffers,
        gl.__quadIndexBuffer
      );
    }

    // TODO: Refactor this code.
    // We only need one target image for the probe. (not all these Fbos.)
    // Instead we can simply move the viewport around the target image atlas.
    const renderstate = {};
    this.__convolverShader.bind(renderstate, 'GLProbe');
    this.__covolverShaderBinding.bind(renderstate);
    const unifs = renderstate.unifs;
    for (let i = 0; i < this.__fbos.length; i++) {
      this.__fbos[i].bindAndClear();

      // Note: we should not need to bind the texture every iteration.
      this.__lodPyramid.bindToUniform(renderstate, unifs.envMapPyramid);
      if ('hammersleyMap' in unifs) {
        hammersleyTexture.bindToUniform(renderstate, unifs.hammersleyMap);
      }

      // Set the roughness.
      if ('roughness' in unifs) {
        const roughness = (i + 1) / this.__fbos.length;
        gl.uniform1f(unifs.roughness.location, roughness);
      }

      gl.drawQuad();
    }

    this.__convolved = true;

    this.renderAtlas(false);
  }

  /**
   * The bindProbeToUniform method.
   * @param {any} renderstate - The renderstate value.
   * @param {any} unif - The unif value.
   */
  bindProbeToUniform(renderstate, unif) {
    // this.__lodPyramid.getSubImage(3).bind(renderstate, unif);
    if (this.__convolved) super.bindToUniform(renderstate, unif);
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    super.destroy();
    this.__convolverShader.destroy();

    for (const fbo of this.__fbos) {
      fbo.destroy();
    }
  }
}

shaderLibrary.setShaderModule(
  'stack-gl/inverse.glsl',
  `


#ifndef ENABLE_ES3

float inverse(float m) {
  return 1.0 / m;
}

mat2 inverse(mat2 m) {
  return mat2(m[1][1],-m[0][1],
             -m[1][0], m[0][0]) / (m[0][0]*m[1][1] - m[0][1]*m[1][0]);
}

mat3 inverse(mat3 m) {
  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];
  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];
  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];

  float b01 = a22 * a11 - a12 * a21;
  float b11 = -a22 * a10 + a12 * a20;
  float b21 = a21 * a10 - a11 * a20;

  float det = a00 * b01 + a01 * b11 + a02 * b21;

  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),
              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),
              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;
}

mat4 inverse(mat4 m) {
  float
      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],
      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],
      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],
      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],

      b00 = a00 * a11 - a01 * a10,
      b01 = a00 * a12 - a02 * a10,
      b02 = a00 * a13 - a03 * a10,
      b03 = a01 * a12 - a02 * a11,
      b04 = a01 * a13 - a03 * a11,
      b05 = a02 * a13 - a03 * a12,
      b06 = a20 * a31 - a21 * a30,
      b07 = a20 * a32 - a22 * a30,
      b08 = a20 * a33 - a23 * a30,
      b09 = a21 * a32 - a22 * a31,
      b10 = a21 * a33 - a23 * a31,
      b11 = a22 * a33 - a23 * a32,

      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  return mat4(
      a11 * b11 - a12 * b10 + a13 * b09,
      a02 * b10 - a01 * b11 - a03 * b09,
      a31 * b05 - a32 * b04 + a33 * b03,
      a22 * b04 - a21 * b05 - a23 * b03,
      a12 * b08 - a10 * b11 - a13 * b07,
      a00 * b11 - a02 * b08 + a03 * b07,
      a32 * b02 - a30 * b05 - a33 * b01,
      a20 * b05 - a22 * b02 + a23 * b01,
      a10 * b10 - a11 * b08 + a13 * b06,
      a01 * b08 - a00 * b10 - a03 * b06,
      a30 * b04 - a31 * b02 + a33 * b00,
      a21 * b02 - a20 * b04 - a23 * b00,
      a11 * b07 - a10 * b09 - a12 * b06,
      a00 * b09 - a01 * b07 + a02 * b06,
      a31 * b01 - a30 * b03 - a32 * b00,
      a20 * b03 - a21 * b01 + a22 * b00) / det;
}

#endif

`
);

shaderLibrary.setShaderModule(
  'stack-gl/transpose.glsl',
  `


#ifndef ENABLE_ES3

float transpose(float m) {
  return m;
}

mat2 transpose(mat2 m) {
  return mat2(m[0][0], m[1][0],
              m[0][1], m[1][1]);
}

mat3 transpose(mat3 m) {
  return mat3(m[0][0], m[1][0], m[2][0],
              m[0][1], m[1][1], m[2][1],
              m[0][2], m[1][2], m[2][2]);
}

mat4 transpose(mat4 m) {
  return mat4(m[0][0], m[1][0], m[2][0], m[3][0],
              m[0][1], m[1][1], m[2][1], m[3][1],
              m[0][2], m[1][2], m[2][2], m[3][2],
              m[0][3], m[1][3], m[2][3], m[3][3]);
}

#endif

`
);

// https://gist.github.com/pyalot/cc7c3e5f144fb825d626
shaderLibrary.setShaderModule(
  'pragmatic-pbr/envmap-octahedral.glsl',
  `

#define sectorize(value) step(0.0, (value))*2.0-1.0
#define sum(value) dot(clamp((value), 1.0, 1.0), (value))


vec2 dirToSphOctUv(vec3 normal){
    normal = normalize(normal);
    vec3 aNorm = abs(normal);
    vec3 sNorm = sectorize(normal);

    vec2 dir = max(aNorm.xy, 1e-20);
    float orient = atan(dir.x, dir.y)/HalfPI;

    dir = max(vec2(aNorm.z, length(aNorm.xy)), 1e-20);
    float pitch = atan(dir.y, dir.x)/HalfPI;

    vec2 uv = vec2(sNorm.x*orient, sNorm.y*(1.0-orient))*pitch;

    if(normal.z < 0.0){
        uv = sNorm.xy - abs(uv.ts)*sNorm.xy;
    }
    return uv*0.5+0.5;
}


vec3 sphOctUvToDir(vec2 uv){
    uv = uv*2.0-1.0;
    vec2 suv = sectorize(uv);
    float sabsuv =  sum(abs(uv));
    float pitch = sabsuv*HalfPI;

    if (pitch <= 0.0) {
        return vec3(0.0, 0.0, 1.0);
    }
    if (abs(pitch - PI) < 0.000001) {
        return vec3(0.0, 0.0, -1.0);
    }
    if(sabsuv > 1.0){
        uv = (1.0-abs(uv.ts))*suv;
    }

    float orient = (abs(uv.s)/sabsuv)*HalfPI;
    float sOrient = sin(orient);
    float cOrient = cos(orient);
    float sPitch = sin(pitch);
    float cPitch = cos(pitch);

    return vec3(
        sOrient*suv.s*sPitch,
        cOrient*suv.t*sPitch,
        cPitch
    );
}

`
);

shaderLibrary.setShaderModule(
  'pragmatic-pbr/envmap-equirect.glsl',
  `


vec2 latLongUVsFromDir(vec3 dir) {
  // Math function taken from...
  // http://gl.ict.usc.edu/Data/HighResProbes/
  // Note: Scaling from u=[0,2], v=[0,1] to u=[0,1], v=[0,1]
  float phi = acos(dir.z);
  float theta = atan(dir.x, dir.y);
  return vec2((1.0 + theta / PI) / 2.0, phi / PI);
}

// Note: when u == 0.5 z = 1.0
vec3 dirFromLatLongUVs(float u, float v) {
    // http://gl.ict.usc.edu/Data/HighResProbes/
    float theta = PI*((u * 2.0) - 1.0);
    float phi = PI*v;
    return vec3(sin(phi)*sin(theta), sin(phi)*cos(theta), cos(phi));
}

vec3 dirFromPolar(vec2 polar) {
    float u = polar.x / (PI * 2.0);
    float v = polar.y / PI;
    return dirFromLatLongUVs(u, v);
}

`
);

shaderLibrary.setShaderModule(
  'pragmatic-pbr/envmap-dualfisheye.glsl',
  `



vec2 dualfisheyeUVsFromDir(vec3 dir) {
  vec2 result;
  float angle = 0.465;
    if(dir.x < 0.0) {
        result = vec2(((dir.z * -angle) + 0.5) * 0.5, (dir.y * angle) + 0.5);
    }
    else {
        result = vec2( 0.5 + ((dir.z * angle) + 0.5) * 0.5, (dir.y * angle) + 0.5);
    }
    return result;
}


`
);

/* eslint-disable require-jsdoc */

class EnvMapShader extends GLShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'EnvMapShader.vertexShader',
      `
precision highp float;

<%include file="utils/quadVertexFromID.glsl"/>

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;

<%include file="stack-gl/inverse.glsl"/>
<%include file="stack-gl/transpose.glsl"/>

/* VS Outputs */
varying vec3 v_worldDir;
varying vec2 v_texCoord;
 
void main()
{
  vec2 position = getQuadVertexPositionFromID() * 2.0;
  v_texCoord = position * 0.5 + 0.5;

  mat4 inverseProjection = inverse(projectionMatrix);
  mat3 inverseModelview = transpose(mat3(viewMatrix));

  // transform from the normalized device coordinates back to the view space
  vec3 unprojected = (inverseProjection * vec4(position, 0, 1)).xyz;

  // transfrom from the view space back to the world space
  // and use it as a sampling vector
  v_worldDir = inverseModelview * unprojected;

  gl_Position = vec4(position, 0, 1);
}

`
    );
  }
}

class BackgroundImageShader extends EnvMapShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'LatLongEnvMapShader.fragmentShader',
      `
precision highp float;

<%include file="math/constants.glsl"/>
<%include file="GLSLUtils.glsl"/>
<%include file="pragmatic-pbr/envmap-equirect.glsl"/>

#define ENABLE_INLINE_GAMMACORRECTION
#ifdef ENABLE_INLINE_GAMMACORRECTION
<%include file="stack-gl/gamma.glsl"/>
uniform float exposure;
#endif

uniform sampler2D backgroundImage;


/* VS Outputs */
varying vec2 v_texCoord;

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  vec4 texel = texture2D(backgroundImage, v_texCoord);
  fragColor = vec4(texel.rgb/texel.a, 1.0);

#ifdef ENABLE_INLINE_GAMMACORRECTION
  //fragColor.rgb = toGamma(fragColor.rgb * exposure);

  // Assuming a simple RGB image in gamma space for now.
  fragColor.rgb = fragColor.rgb * exposure;
#endif


#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`
    );
    this.finalize();
  }
}

class OctahedralEnvMapShader extends EnvMapShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'OctahedralEnvMapShader.fragmentShader',
      `
precision highp float;

<%include file="math/constants.glsl"/>
<%include file="GLSLUtils.glsl"/>
<%include file="pragmatic-pbr/envmap-octahedral.glsl"/>
<%include file="utils/imagePyramid.glsl"/>
<%include file="stack-gl/gamma.glsl"/>

uniform float focus;

#define ENABLE_INLINE_GAMMACORRECTION
#ifdef ENABLE_INLINE_GAMMACORRECTION
uniform float exposure;
#endif

// uniform ImageAtlas envMap;
uniform sampler2D   envMapPyramid;
uniform sampler2D   envMapPyramid_layout;
uniform vec4        envMapPyramid_desc;


/* VS Outputs */
varying vec3 v_worldDir;
varying vec2 v_texCoord;

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  vec2 uv = dirToSphOctUv(normalize(v_worldDir));
  if(false){
    // Use these lines to debug the src GL image.
    vec4 texel = texture2D(envMapPyramid, uv);
    fragColor = vec4(texel.rgb/texel.a, 1.0);
  }
  else{
    fragColor = vec4(sampleImagePyramid(uv, focus, envMapPyramid_layout, envMapPyramid, envMapPyramid_desc).rgb, 1.0);
  }

#ifdef ENABLE_INLINE_GAMMACORRECTION
  fragColor.rgb = toGamma(fragColor.rgb * exposure);
#endif

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`
    );
    this.finalize();
  }
}

class LatLongEnvMapShader extends EnvMapShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'LatLongEnvMapShader.fragmentShader',
      `
precision highp float;

<%include file="math/constants.glsl"/>
<%include file="GLSLUtils.glsl"/>
<%include file="pragmatic-pbr/envmap-equirect.glsl"/>

#define ENABLE_INLINE_GAMMACORRECTION
#ifdef ENABLE_INLINE_GAMMACORRECTION
<%include file="stack-gl/gamma.glsl"/>
uniform float exposure;
#endif

uniform sampler2D backgroundImage;


/* VS Outputs */
varying vec3 v_worldDir;
varying vec2 v_texCoord;

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  vec2 uv = latLongUVsFromDir(normalize(v_worldDir));

  vec4 texel = texture2D(backgroundImage, uv);
  fragColor = vec4(texel.rgb/texel.a, 1.0);

#ifdef ENABLE_INLINE_GAMMACORRECTION
  fragColor.rgb = toGamma(fragColor.rgb * exposure);
#endif
#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`
    );
    this.finalize();
  }
  static getParamDeclarations() {
    const paramDescs = super.getParamDeclarations();
    return paramDescs
  }
}

class SterioLatLongEnvMapShader extends EnvMapShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'SterioLatLongEnvMapShader.fragmentShader',
      `
precision highp float;

<%include file="math/constants.glsl"/>
<%include file="GLSLUtils.glsl"/>
<%include file="pragmatic-pbr/envmap-equirect.glsl"/>

#define ENABLE_INLINE_GAMMACORRECTION
#ifdef ENABLE_INLINE_GAMMACORRECTION
<%include file="stack-gl/gamma.glsl"/>
uniform float exposure;
#endif

uniform int eye;// L = 0, R = 1;

uniform sampler2D backgroundImage;

/* VS Outputs */
varying vec3 v_worldDir;
varying vec2 v_texCoord;

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  vec2 uv = latLongUVsFromDir(normalize(v_worldDir));
  uv.y *= 0.5;
  if(eye == 1){
    uv.y += 0.5;
  }

  vec4 texel = texture2D(backgroundImage, uv);
  fragColor = vec4(texel.rgb/texel.a, 1.0);

#ifdef ENABLE_INLINE_GAMMACORRECTION
  //fragColor.rgb = toGamma(fragColor.rgb * exposure);

  // Assuming a simple RGB image in gamma space for now.
  fragColor.rgb = fragColor.rgb * exposure;
#endif

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`
    );
    this.finalize();
  }
}

class DualFishEyeEnvMapShader extends EnvMapShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'DualFishEyeEnvMapShader.fragmentShader',
      `
precision highp float;

<%include file="math/constants.glsl"/>
<%include file="GLSLUtils.glsl"/>
<%include file="pragmatic-pbr/envmap-dualfisheye.glsl"/>

#define ENABLE_INLINE_GAMMACORRECTION
#ifdef ENABLE_INLINE_GAMMACORRECTION
<%include file="stack-gl/gamma.glsl"/>
uniform float exposure;
#endif

uniform sampler2D backgroundImage;

/* VS Outputs */
varying vec3 v_worldDir;
varying vec2 v_texCoord;

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  vec2 uv = dualfisheyeUVsFromDir(normalize(v_worldDir));

  vec4 texel = texture2D(backgroundImage, uv);
  fragColor = vec4(texel.rgb/texel.a, 1.0);

#ifdef ENABLE_INLINE_GAMMACORRECTION
  //fragColor.rgb = toGamma(fragColor.rgb * exposure);

  // Assuming a simple RGB image in gamma space for now.
  fragColor.rgb = fragColor.rgb * exposure;
#endif

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`
    );
    this.finalize();
  }
}

class DualFishEyeToLatLongBackgroundShader extends EnvMapShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'DualFishEyeEnvMapShader.fragmentShader',
      `
precision highp float;

<%include file="math/constants.glsl"/>
<%include file="GLSLUtils.glsl"/>
<%include file="pragmatic-pbr/envmap-equirect.glsl"/>
<%include file="pragmatic-pbr/envmap-dualfisheye.glsl"/>

#define ENABLE_INLINE_GAMMACORRECTION
#ifdef ENABLE_INLINE_GAMMACORRECTION
<%include file="stack-gl/gamma.glsl"/>
uniform float exposure;
#endif

uniform sampler2D backgroundImage;

/* VS Outputs */
varying vec3 v_worldDir;
varying vec2 v_texCoord;

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  vec2 uv = dualfisheyeUVsFromDir(dirFromLatLongUVs(v_texCoord.x, v_texCoord.y));
  vec4 texel = texture2D(backgroundImage, uv);
  fragColor = vec4(texel.rgb/texel.a, 1.0);

#ifdef ENABLE_INLINE_GAMMACORRECTION
  //fragColor.rgb = toGamma(fragColor.rgb * exposure);

  // Assuming a simple RGB image in gamma space for now.
  // fragColor.rgb = fragColor.rgb * exposure;
#endif

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`
    );
    this.finalize();
  }
}

/** Class representing a GL environment map.
 * @extends GLProbe
 * @private
 */
class GLEnvMap extends GLProbe {
  /**
   * Create a GL env map.
   * @param {any} renderer - The renderer value.
   * @param {any} envMap - The environment map.
   * @param {any} preproc - The preproc value.
   */
  constructor(renderer, envMap, preproc) {
    super(renderer.gl, 'EnvMap');
    this.__renderer = renderer;
    this.__envMap = envMap;
    this.__backgroundFocus = 0.0;

    const gl = renderer.gl;
    if (!gl.__quadVertexIdsBuffer) gl.setupInstancedQuad();

    let srcGLTex = this.__envMap.getMetadata('gltexture');
    if (!srcGLTex) {
      srcGLTex = new GLHDRImage(gl, this.__envMap);
    }
    this.__srcGLTex = srcGLTex; // for debugging

    this.__envMapShader = new OctahedralEnvMapShader(gl);
    const envMapShaderComp = this.__envMapShader.compileForTarget(
      'GLEnvMap',
      preproc
    );
    this.__envMapShaderBinding = generateShaderGeomBinding(
      gl,
      envMapShaderComp.attrs,
      gl.__quadattrbuffers,
      gl.__quadIndexBuffer
    );

    // srcGLTex.updated.connect(() => {
    //     this.convolveProbe(srcGLTex);
    // });
    if (this.__envMap.isLoaded()) {
      this.convolveProbe(srcGLTex);
    } else {
      this.__envMap.loaded.connect(() => {
        // console.log(this.__envMap.getName() + " loaded");
        this.convolveProbe(srcGLTex);
        this.loaded.emit();
      });
    }
  }

  /**
   * The getEnvMap method.
   * @return {any} - The return value.
   */
  getEnvMap() {
    return this.__envMap
  }

  /**
   * The getBackgroundFocus method.
   * @return {any} - The return value.
   */
  getBackgroundFocus() {
    return this.__backgroundFocus
  }

  /**
   * The setBackgroundFocus method.
   * @param {any} val - The val param.
   */
  setBackgroundFocus(val) {
    this.__backgroundFocus = val;
    this.__renderer.requestRedraw();
  }

  /**
   * The draw method.
   * @param {any} renderstate - The renderstate value.
   */
  draw(renderstate) {
    if (this.__envMap.isLoaded()) {
      const gl = this.__gl;
      {
        // /////////////////
        this.__envMapShader.bind(renderstate, 'GLEnvMap');
        const unifs = renderstate.unifs;
        // this.__srcGLTex.bind(renderstate, renderstate.unifs.envMap.location);
        // this.__lodPyramid.bind(renderstate, renderstate.unifs.envMap.location);
        this.bindProbeToUniform(renderstate, unifs.envMapPyramid);
        // this.bindToUniform(renderstate, unifs.envMapPyramid);

        {
          const unif = unifs.focus;
          if (unif) gl.uniform1f(unif.location, this.__backgroundFocus);
        }
        {
          const unif = unifs.exposure;
          if (unif) gl.uniform1f(unif.location, renderstate.exposure);
        }

        this.__envMapShaderBinding.bind(renderstate);
        gl.depthMask(false);

        renderstate.bindViewports(unifs, () => {
          gl.drawQuad();
        });
      }
    }
  }

  /**
   * The bindToUniform method.
   * An EnvMap can be bound as a regular texture, but we want the
   * original source data, not the atlas of convolved images.
   * @param {any} renderstate - The renderstate value.
   * @param {any} unif - The unif value.
   * @param {any} bindings - The bindings value.
   * @return {any} - The return value.
   */
  bindToUniform(renderstate, unif, bindings) {
    return this.__srcGLTex.bindToUniform(renderstate, unif, bindings)
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    super.destroy();
    this.__srcGLTex.loaded.disconnectScope(this);
    this.__srcGLTex.updated.disconnectScope(this);
    this.__srcGLTex.destroy();
  }
}

class ScreenQuadShader extends GLShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'ScreenQuadShader.vertexShader',
      `
precision highp float;

<%include file="utils/quadVertexFromID.glsl"/>

uniform vec2 pos;
uniform vec2 size;

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
    vec2 position = getQuadVertexPositionFromID();
    v_texCoord = position+0.5;
    gl_Position = vec4(vec2(-1.0, -1.0) + (pos * 2.0) + (v_texCoord * abs(size) * 2.0), 0.0, 1.0);
    if(size.x < 0.0)
        v_texCoord.x = 1.0 - v_texCoord.x;
    if(size.y < 0.0)
        v_texCoord.y = 1.0 - v_texCoord.y;
}
`
    );
    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'ScreenQuadShader.fragmentShader',
      `
precision highp float;

uniform sampler2D image;

varying vec2 v_texCoord;


#ifdef ENABLE_ES3
    out vec4 fragColor;
#endif
void main(void) {
#ifndef ENABLE_ES3
    vec4 fragColor;
#endif
    fragColor = texture2D(image, v_texCoord);
    fragColor = vec4(fragColor.rgb/fragColor.a, 1.0);

#ifndef ENABLE_ES3
    gl_FragColor = fragColor;
#endif
}
`
    );
    this.finalize();
  }
}
//export default ScreenQuadShader;

/** Class representing a GL screen quad. 
 * @private
 */
class GLScreenQuad {
  /**
   * Create a GL screen quad.
   * @param {any} gl - The gl value.
   * @param {any} preproc - The preproc value.
   */
  constructor(gl, preproc) {
    this.__gl = gl;

    this.__pos = [0.0, 0.0];
    this.__size = [1.0, 1.0];
    this.flipY = true;
    this.__glshader = new ScreenQuadShader(gl);

    if (!gl.__quadVertexIdsBuffer) gl.setupInstancedQuad();

    const shaderComp = this.__glshader.compileForTarget('GLScreenQuad', preproc);
    this.__quadBinding = generateShaderGeomBinding(
      gl,
      shaderComp.attrs,
      gl.__quadattrbuffers,
      gl.__quadIndexBuffer
    );

    this.ready = true;
  }

  /**
   * The bind method.
   * @param {any} renderstate - The renderstate value.
   * @param {any} texture - The texture pavalueram.
   * @param {any} pos - The pos value.
   * @param {any} size - The size value.
   */
  bind(renderstate, texture, pos = undefined, size = undefined) {
    const unifs = renderstate.unifs;
    texture.bindToUniform(renderstate, renderstate.unifs.image);

    const gl = this.__gl;
    {
      const unif = unifs.pos;
      if (unif) {
        gl.uniform2fv(
          unif.location,
          pos ? (pos instanceof AttrValue ? pos.asArray() : pos) : this.__pos
        );
      }
    }
    {
      const unif = unifs.size;
      if (unif) {
        gl.uniform2fv(
          unif.location,
          size
            ? size instanceof AttrValue
              ? size.asArray()
              : size
            : this.__size
        );
      }
    }
    // if ('flipY' in unifs)
    //     gl.uniform1i(unifs.flipY.location, this.flipY ? 1 : 0);

    // if ('textureDim' in unifs)
    //     gl.uniform2fv(unifs.textureDim.location, [texture.width, texture.height]);

    this.__quadBinding.bind(renderstate);
  }

  /**
   * The bindShader method.
   * @param {any} renderstate - The renderstate value.
   * @return {any} - The return value.
   */
  bindShader(renderstate) {
    return this.__glshader.bind(renderstate, 'GLScreenQuad')
  }

  /**
   * The draw method.
   * @param {any} renderstate - The renderstate value.
   * @param {any} texture - The texture value.
   * @param {any} pos - The pos value.
   * @param {any} size - The size value.
   */
  draw(renderstate, texture, pos = undefined, size = undefined) {
    this.bind(renderstate, texture, pos, size);

    this.__gl.drawQuad();
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {}
}

/** Class representing a GL base viewport.
 * @extends ParameterOwner
 * @private
 */
class GLBaseViewport extends ParameterOwner {
  /**
   * Create a GL base viewport.
   * @param {any} renderer - The renderer value.
   */
  constructor(renderer) {
    super();
    this.__renderer = renderer;
    this.__doubleClickTimeMSParam = this.addParameter(
      new NumberParameter('DoubleClickTimeMS', 200)
    );
    this.__fbo = undefined;
    this.updated = new Signal();
    this.resized = new Signal();

    this.__renderer.sceneSet.connect(() => {
      const settings = renderer.getScene().settings;
      const bgColorParam = settings.getParameter('BackgroundColor');
      const processBGValue = mode => {
        const value = bgColorParam.getValue();
        let gl = this.__renderer.gl;
        if (value instanceof BaseImage) {
          if (value.type === 'FLOAT') {
            this.__backgroundTexture = value;
            this.__backgroundGLTexture = new GLHDRImage(gl, value);
          } else {
            this.__backgroundTexture = value;
            this.__backgroundGLTexture = new GLTexture2D(gl, value);
          }
        } else if (value instanceof Color) {
          if (this.__backgroundGLTexture) {
            this.__backgroundGLTexture.destroy();
            this.__backgroundGLTexture = undefined;
            this.__backgroundTexture = undefined;
          }
          this.__backgroundColor = value;
        } else {
          console.warn('Invalid background:' + value);
        }
        this.updated.emit();
      };
      processBGValue(bgColorParam.getValue());
      bgColorParam.valueChanged.connect(processBGValue);
    });
  }

  /**
   * The getRenderer method.
   * @return {any} - The return value.
   */
  getRenderer() {
    return this.__renderer
  }

  /**
   * The getName method.
   * @return {any} - The return value.
   */
  getName() {
    return this.__name
  }

  /**
   * The getBl method.
   * @return {any} - The return value.
   */
  getBl() {
    return this.__bl
  }

  /**
   * The setBl method.
   * @param {any} bl - The bl value.
   */
  setBl(bl) {
    this.__bl = bl;
    this.resize(this.__canvasWidth, this.__canvasHeight);
  }

  /**
   * The getTr method.
   * @return {any} - The return value.
   */
  getTr() {
    return this.__tr
  }

  /**
   * The setTr method.
   * @param {any} tr - The tr value.
   */
  setTr(tr) {
    this.__tr = tr;
    this.resize(this.__canvasWidth, this.__canvasHeight);
  }

  /**
   * The getPosX method.
   * @return {any} - The return value.
   */
  getPosX() {
    return this.__x
  }

  /**
   * The getPosY method.
   * @return {any} - The return value.
   */
  getPosY() {
    return this.__y
  }

  /**
   * The getWidth method.
   * @return {any} - The return value.
   */
  getWidth() {
    return this.__width
  }

  /**
   * The getHeight method.
   * @return {any} - The return value.
   */
  getHeight() {
    return this.__height
  }

  /**
   * The getBackground method.
   * @return {any} - The return value.
   */
  getBackground() {
    console.warn("Deprecated Function. Please access the Scene Settings object.");
    const settings = this.__renderer.getScene().settings;
    const bgColorParam = settings.getParameter('BackgroundColor');
    return bgColorParam.getValue()
  }

  /**
   * The setBackground method.
   * @param {any} background - The background value.
   */
  setBackground(background) {
    console.warn("Deprecated Function. Please access the Scene Settings object.");
    const settings = this.__renderer.getScene().settings;
    const bgColorParam = settings.getParameter('BackgroundColor');
    bgColorParam.setValue(background);
    this.updated.emit();
  }

  /**
   * The resize method.
   * @param {any} width - The src value.
   * @param {any} height - The flags value.
   */
  resize(canvasWidth, canvasHeight) {
    this.__canvasWidth = canvasWidth;
    this.__canvasHeight = canvasHeight;
    this.__width = canvasWidth;
    this.__height = canvasHeight;
    this.resized.emit();
  }

  // ///////////////////////////
  // Events

  /**
   * Causes an event to occur when a user presses a mouse button over an element.
   * @param {any} event - The event that occurs.
   * @return {boolean} - The return value.
   */
  onMouseDown(event) {
    return false
  }

  /**
   * Causes an event to occur when a user releases a mouse button over a element.
   * @param {any} event - The event that occurs.
   * @return {boolean} - The return value.
   */
  onMouseUp(event) {
    return false
  }

  /**
   * Causes an event to occur when the mouse pointer is moving while over an element.
   * @param {any} event - The event that occurs.
   * @return {boolean} - The return value.
   */
  onMouseMove(event) {
    return false
  }

  /**
   * Causes an event to occur when the mouse pointer is moved out of an element.
   * @param {any} event - The event that occurs.
   * @return {boolean} - The return value.
   */
  onMouseLeave(event) {
    return false
  }

  /**
   * Causes an event to occurs when the user presses a key on the keyboard.
   * @param {any} key - The key the user presses.
   * @param {any} event - The event that occurs.
   * @return {boolean} - The return value.
   */
  onKeyPressed(key, event) {
    return false
  }

  /**
   * Causes an event to occur when the user is pressing a key on the keyboard.
   * @param {any} key - The key the user is pressing.
   * @param {any} event - The event that occurs.
   * @return {boolean} - The return value.
   */
  onKeyDown(key, event) {
    return false
  }

  /**
   * Causes an event to occur  when the user releases a key on the keyboard.
   * @param {any} key - The key the user releases
   * @param {any} event - The event that occurs.
   * @return {boolean} - The return value.
   */
  onKeyUp(key, event) {
    return false
  }
}

/** Class representing a GL viewport.
 * @extends GLBaseViewport
 */
class GLViewport extends GLBaseViewport {
  /**
   * Create a GL viewport.
   * @param {any} renderer - The renderer value.
   * @param {string} name - The name value.
   * @param {any} width - The width of the viewport
   * @param {any} height - The height of the viewport
   */
  constructor(renderer, name, width, height) {
    super(renderer);
    this.__name = name;
    this.__projectionMatrix = new Mat4();
    this.__frustumDim = new Vec2();

    // Layout coords, x:[0..1], y:[0..1]
    this.__bl = new Vec2(0, 0);
    this.__tr = new Vec2(1, 1);

    this.__exposure = 0.0;
    this.__exposureRange = [-5, 10];
    this.__tonemap = true;
    this.__gamma = 2.2;
    this.__prevDownTime = 0;

    this.__geomDataBuffer = undefined;
    this.__geomDataBufferFbo = undefined;

    // Signals to abstract the user view.
    // I.e. when a user switches to VR mode, the signals
    // simply emit the new VR data.
    this.viewChanged = new Signal();

    this.capturedItem = null;
    this.keyDown = new Signal();
    this.keyPressed = new Signal();
    this.keyUp = new Signal();
    this.mouseDown = new Signal();
    this.mouseDoubleClicked = new Signal();
    this.mouseMove = new Signal();
    this.mouseUp = new Signal();
    this.mouseLeave = new Signal();
    this.mouseDownOnGeom = new Signal();
    this.mouseWheel = new Signal();

    this.touchStart = new Signal();
    this.touchMove = new Signal();
    this.touchEnd = new Signal();
    this.touchCancel = new Signal();
    this.doubleTapped = new Signal();

    // this.renderGeomDataFbo = this.renderGeomDataFbo.bind(this);

    // Each user has a separate camera, and so the default
    //  camera cannot be part of the scene.
    this.setCamera(new Camera('Default'));
    this.setManipulator(new CameraMouseAndKeyboard());

    this.resize(width, height);
  }

  /**
   * The resize method.
   * @param {number} width - The width value.
   * @param {number} height - The height value.
   */
  resize(width, height) {
    this.__canvasWidth = width;
    this.__canvasHeight = height;
    this.__x = width * this.__bl.x;
    this.__y = width * this.__bl.y;
    this.__width = width * this.__tr.x - width * this.__bl.x;
    this.__height = height * this.__tr.y - height * this.__bl.y;
    this.region = [this.__x, this.__y, this.__width, this.__height];

    if (this.__camera) this.__updateProjectionMatrix();

    if (this.__geomDataBufferFbo) {
      this.__geomDataBuffer.resize(this.__width, this.__height);
      this.__geomDataBufferFbo.resize();
    }
    this.resized.emit();
  }

  /**
   * The getCamera method.
   * @return {any} - The return value.
   */
  getCamera() {
    return this.__camera
  }

  /**
   * The setCamera method.
   * @param {any} camera - The camera value.
   */
  setCamera(camera) {
    this.__camera = camera;
    const globalXfoParam = camera.getParameter('GlobalXfo');
    const getCameraParams = () => {
      this.__cameraXfo = globalXfoParam.getValue();
      this.__cameraMat = this.__cameraXfo.toMat4();
      this.__viewMat = this.__cameraMat.inverse();
    };
    getCameraParams();
    globalXfoParam.valueChanged.connect(() => {
      getCameraParams();
      this.invalidateGeomDataBuffer();
      this.updated.emit();
      this.viewChanged.emit({
        interfaceType: 'CameraAndPointer',
        viewXfo: this.__cameraXfo,
        focalDistance: this.__camera.getFocalDistance(),
      });
    });
    this.__camera.projectionParamChanged.connect(() => {
      this.__updateProjectionMatrix();
      this.updated.emit();
    });

    this.__updateProjectionMatrix();
  }

  /**
   * The getManipulator method.
   * @return {any} - The return value.
   */
  getManipulator() {
    return this.__cameraManipulator
  }

  /**
   * The setManipulator method.
   * @param {any} manipulator - The manipulator value.
   */
  setManipulator(manipulator) {
    this.__cameraManipulator = manipulator;
  }

  // eslint-disable-next-line require-jsdoc
  __updateProjectionMatrix() {
    const aspect = this.__width / this.__height;
    this.__camera.updateProjectionMatrix(this.__projectionMatrix, aspect);

    const frustumH =
      Math.tan(this.__camera.getFov() / 2.0) * this.__camera.getNear() * 2.0;
    const frustumW = frustumH * aspect;
    this.__frustumDim.set(frustumW, frustumH);
  }

  /**
   * The getProjectionMatrix method.
   * @return {Mat4} - The return projection matrix for the viewport.
   */
  getProjectionMatrix() {
    return this.__projectionMatrix
  }

  /**
   * The getProjectionMatrix method.
   * @return {Mat4} - The return projection matrix for the viewport.
   */
  getViewMatrix() {
    return this.__viewMat
  }

  /**
   * The setActive method.
   * @param {boolean} state - The state value.
   */
  setActive(state) {
    if (state) activeViewport = this;
    else activeViewport = undefined;
  }

  /**
   * The frameView method.
   * @param {array} treeItems - The treeItems value.
   */
  frameView(treeItems) {
    if (this.__width > 0 && this.__height > 0)
      this.__camera.frameView(this, treeItems);
    else {
      console.warn("Unable to frameView while Viewport with and height are 0.");
    }
  }

  /**
   * Compute a ray into the scene based on a mouse coordinate.
   * @param {Vec2} screenPos - The screen position.
   * @return {Ray} - The return value.
   */
  calcRayFromScreenPos(screenPos) {
    // Convert the raster coordinates to screen space ([0,{w|h}] -> [-1,1]
    // - Note: The raster vertical is inverted wrt OGL screenspace Y

    const topy = this.__canvasHeight * (1.0 - this.__tr.y);
    let sx = (screenPos.x - this.__x) / this.__width;
    let sy = (screenPos.y - topy) / this.__height;

    sx = sx * 2.0 - 1.0;
    sy = sy * 2.0 - 1.0;

    // Transform the origin from camera local to world space
    const cameraMat = this.__cameraMat;

    const projInv = this.__projectionMatrix.inverse();
    if (projInv == null)
      // Sometimes this happens, not sure why...
      return null

    let rayStart;
    let rayDirection;
    if (this.__camera.getIsOrthographic()) {
      // Orthographic projections.
      rayStart = cameraMat.transformVec3(
        projInv.transformVec3(new Vec3$1(sx, -sy, -1.0))
      );
      rayDirection = new Vec3$1(0.0, 0.0, -1.0);
    } else {
      rayStart = cameraMat.translation;
      // Get the projected window coordinate on the near plane
      // See http://www.songho.ca/opengl/gl_projectionmatrix.html
      // for details.
      rayDirection = projInv.transformVec3(new Vec3$1(sx, -sy, -1.0));
    }
    // And from projection space to camera local.
    // - We nuke the translation part since we're transforming a vector.
    rayDirection = cameraMat.rotateVec3(rayDirection).normalize();
    return new Ray(rayStart, rayDirection)
  }

  // //////////////////////////
  // GeomData

  /**
   * The createGeomDataFbo method.
   * @param {boolean} floatGeomBuffer - true if the GPU supports rendering
   * to floating point textures.
   */
  createGeomDataFbo(floatGeomBuffer) {
    const gl = this.__renderer.gl;
    this.__floatGeomBuffer = floatGeomBuffer;
    if (this.__floatGeomBuffer) {
      this.__geomDataBuffer = new GLTexture2D(gl, {
        type: 'FLOAT',
        format: 'RGBA',
        filter: 'NEAREST',
        width: this.__width <= 1 ? 1 : this.__width,
        height: this.__height <= 1 ? 1 : this.__height,
      });
    } else {
      this.__geomDataBuffer = new GLTexture2D(gl, {
        type: 'UNSIGNED_BYTE',
        format: 'RGBA',
        filter: 'NEAREST',
        width: this.__width <= 1 ? 1 : this.__width,
        height: this.__height <= 1 ? 1 : this.__height,
      });
    }
    this.__geomDataBufferFbo = new GLFbo(gl, this.__geomDataBuffer, true);
    this.__geomDataBufferFbo.setClearColor([0, 0, 0, 0]);
  }

  /**
   * The getGeomDataFbo method.
   * @return {GLFbo} - The return value.
   */
  getGeomDataFbo() {
    return this.__geomDataBufferFbo
  }

  /**
   * Renders the scene geometry to the viewports geom data buffer
   * in preparation for mouse picking.
   */
  renderGeomDataFbo() {
    if (this.__geomDataBufferFbo) {
      this.__geomDataBufferFbo.bindAndClear();

      const renderstate = {};
      this.__initRenderState(renderstate);
      this.__renderer.drawSceneGeomData(renderstate);
      this.__geomDataBufferInvalid = false;
    }
  }

  /**
   * The invalidateGeomDataBuffer method.
   */
  invalidateGeomDataBuffer() {
    this.__geomDataBufferInvalid = true;
  }

  /**
   * The getGeomDataAtPos method.
   * @param {Vec2} screenPos - The screen position.
   * @param {Ray} mouseRay - The mouseRay value.
   * @return {object} - The return value.
   */
  getGeomDataAtPos(screenPos, mouseRay) {
    if (this.__geomDataBufferFbo) {
      if (this.__geomDataBufferInvalid) {
        this.renderGeomDataFbo();
        this.__screenPos = null;
      }

      // Cache the intersection tests result so subsequent queries will return the same value.
      // Note: every new mouse event will generate a new mousePos value, so the cache
      // is only valid for a given event propagation, and for that exact mousePos value.
      if (screenPos === this.__screenPos) {
        return this.__intersectionData
      }
      this.__screenPos = screenPos;
      this.__intersectionData = null;

      const gl = this.__renderer.gl;
      gl.finish();

      this.__geomDataBufferFbo.bindForReading();

      // const logGeomData = ()=>{
      //     console.log("logGeomData :[" + this.__geomDataBuffer.width +","+ this.__geomDataBuffer.height + "]")
      //     const pixels = new Float32Array(this.__geomDataBuffer.width * 4);
      //     for(let i=0; i<this.__geomDataBuffer.height; i++){
      //       gl.readPixels(0, i, this.__geomDataBuffer.width, 1, gl.RGBA, gl.FLOAT, pixels);
      //         for(let j=0; j<this.__geomDataBuffer.width; j++){
      //             const geomData = pixels.subarray(j*4, (j+1)*4);
      //             if (geomData[0] != 0 || geomData[1] != 0){
      //                 console.log(j, i)
      //                 break; // Only log the left border pixels.
      //             }
      //         }
      //       // console.log(pixels);
      //     }
      // }
      // logGeomData();
      // console.log("getGeomDataAtPos:", screenPos.toString(), screenPos.x,this.__width)

      // Allocate a 1 pixel block and read grom the GeomData buffer.
      let passId;
      let geomData;
      if (gl.floatGeomBuffer) {
        geomData = new Float32Array(4);
        gl.readPixels(
          screenPos.x,
          this.__height - screenPos.y,
          1,
          1,
          gl.RGBA,
          gl.FLOAT,
          geomData
        );
        if (geomData[3] == 0) return undefined
        // Mask the pass id to be only the first 6 bits of the integer.
        passId = Math.round(geomData[0]) & (64 - 1);
      } else {
        geomData = new Uint8Array(4);
        gl.readPixels(
          screenPos.x,
          this.__height - screenPos.y,
          1,
          1,
          gl.RGBA,
          gl.UNSIGNED_BYTE,
          geomData
        );
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        if (geomData[0] == 0 && geomData[1] == 0) return undefined
        passId = 0;
      }
      this.__geomDataBufferFbo.unbind();
      const pass = this.__renderer.getPass(passId);
      if (!pass) {
        console.warn('Geom data buffer returns invalid pass id:', passId);
        return
      }
      const geomItemAndDist = pass.getGeomItemAndDist(geomData);

      if (geomItemAndDist) {
        if (!mouseRay) mouseRay = this.calcRayFromScreenPos(screenPos);
        const intersectionPos = mouseRay.start.add(
          mouseRay.dir.scale(geomItemAndDist.dist)
        );
        this.__intersectionData = {
          screenPos,
          mouseRay,
          intersectionPos,
          geomItem: geomItemAndDist.geomItem,
          dist: geomItemAndDist.dist,
          geomData,
        };
      }
      return this.__intersectionData
    }
  }

  /**
   * getGeomItemsInRect
   * Gathers all the geoms renders in a given rectangle of the viewport.
   * @param {Vec2} tl - The top left value of the rectangle.
   * @param {Vec2} br - The bottom right corner of the rectangle.
   * @return {Set} - The return value.
   */
  getGeomItemsInRect(tl, br) {
    // TODO: Use a Math.Rect instead
    if (this.__geomDataBufferFbo) {
      const gl = this.__renderer.gl;
      gl.finish();
      // Allocate a pixel block.
      const rectBottom = Math.round(this.__height - br.y);
      const rectLeft = Math.round(tl.x);
      const rectWidth = Math.round(br.x - tl.x);
      const rectHeight = Math.round(br.y - tl.y);
      const numPixels = rectWidth * rectHeight;

      this.__geomDataBufferFbo.bindForReading();

      let geomDatas;
      if (gl.floatGeomBuffer) {
        geomDatas = new Float32Array(4 * numPixels);
        gl.readPixels(
          rectLeft,
          rectBottom,
          rectWidth,
          rectHeight,
          gl.RGBA,
          gl.FLOAT,
          geomDatas
        );
      } else {
        geomDatas = new Uint8Array(4 * numPixels);
        gl.readPixels(
          rectLeft,
          rectBottom,
          rectWidth,
          rectHeight,
          gl.RGBA,
          gl.UNSIGNED_BYTE,
          geomDatas
        );
      }

      gl.bindFramebuffer(gl.FRAMEBUFFER, null);

      const geomItems = new Set();
      for (let i = 0; i < numPixels; i++) {
        let passId;
        const geomData = geomDatas.subarray(i * 4, (i + 1) * 4);
        if (gl.floatGeomBuffer) {
          passId = Math.round(geomData[0]);
        } else {
          passId = 0;
        }

        const geomItemAndDist = this.__renderer
          .getPass(passId)
          .getGeomItemAndDist(geomData);
        if (geomItemAndDist) {
          geomItems.add(geomItemAndDist.geomItem);
        }
      }
      return geomItems
    }
  }

  // ///////////////////////////
  // Events

  /**
   * The __eventMousePos method calculates the event coordinates relative to the viewprot.
   * There could be multiple viewports connected to the current renderer.
   * @param {any} event - The event that occurs.
   * @return {Vec2} - Returns a new Vec2.
   * @private
   */
  __eventMousePos(event) {
    return new Vec2(
      event.rendererX - this.getPosX(),
      event.rendererY - this.getPosY()
    )
  }

  /**
   * The __prepareEvent method.
   * @param {any} event - The event that occurs.
   * @private
   */
  __prepareEvent(event) {
    event.viewport = this;
    event.propagating = true;
    event.stopPropagation();
    event.stopPropagation = () => {
      event.propagating = false;
    };
    event.setCapture = (item) => {
      this.capturedItem = item;
    };
    event.getCapture = (item) => {
      return this.capturedItem
    };
    event.releaseCapture = () => {
      this.capturedItem = null;
      // TODO: This should be a request, wbihch is fulfilled next time
      // a frame is dranw.
      this.renderGeomDataFbo();
    };

    if (event instanceof MouseEvent) {
      const mousePos = this.__eventMousePos(event);
      event.mousePos = mousePos;
      event.mouseRay = this.calcRayFromScreenPos(mousePos);

      const intersectionData = this.getGeomDataAtPos(
        event.mousePos,
        event.mouseRay
      );
      if (intersectionData != undefined) {
        // console.log("onMouseDown on Geom"); // + " Material:" + geomItem.getMaterial().name);
        // console.log(intersectionData.geomItem.getPath()); // + " Material:" + geomItem.getMaterial().name);
        event.intersectionData = intersectionData;
      }
    }
  }

  /**
   * The setCapture method.
   * @param {any} target - The target value.
   * @private
   */
  setCapture(target) {
    this.capturedItem = target;
  }

  /**
   * The getCapture method.
   * @return {any} - The return value.
   */
  getCapture() {
    return this.capturedItem
  }

  /**
   * The releaseCapture method.
   */
  releaseCapture() {
    this.capturedItem = null;
    // TODO: This should be a request, wbihch is fulfilled next time
    // a frame is dranw.
    this.renderGeomDataFbo();
  }

  /**
   * Causes an event to occur when a user presses a mouse button over an element.
   * @param {any} event - The event that occurs.
   * @return {any} - The return value.
   */
  onMouseDown(event) {
    this.__prepareEvent(event);

    if (this.capturedItem) {
      this.capturedItem.onMouseDown(event);
      return
    }

    if (event.intersectionData != undefined) {
      event.intersectionData.geomItem.onMouseDown(event);
      if (!event.propagating || this.capturedItem) return

      this.mouseDownOnGeom.emit(event);
      if (!event.propagating) return
    }

    const downTime = Date.now();
    if (
      downTime - this.__prevDownTime <
      this.__doubleClickTimeMSParam.getValue()
    ) {
      if (this.__cameraManipulator) {
        this.__cameraManipulator.onDoubleClick(event);
        if (!event.propagating) return
      }

      this.mouseDoubleClicked.emit(event);
    } else {
      this.__prevDownTime = downTime;
      if (this.__cameraManipulator) {
        this.__cameraManipulator.onMouseDown(event);
        if (!event.propagating) return
      }

      this.mouseDown.emit(event);
    }

    return false
  }

  /**
   * Causes an event to occur when the mouse pointer is moving while over an element.
   * @param {MouseEvent} event - The event that occurs.
   */
  onMouseMove(event) {
    this.__prepareEvent(event);

    if (this.capturedItem) {
      this.capturedItem.onMouseMove(event);
      return
    }

    if (event.intersectionData != undefined) {
      if (event.intersectionData.geomItem != this.mouseOverItem) {
        if (this.mouseOverItem) this.mouseOverItem.onMouseLeave(event);
        this.mouseOverItem = event.intersectionData.geomItem;
        this.mouseOverItem.onMouseEnter(event);
      }

      event.intersectionData.geomItem.onMouseMove(event);
      if (!event.propagating || this.capturedItem) return
    } else if (this.mouseOverItem) {
      this.mouseOverItem.onMouseLeave(event);
      this.mouseOverItem = null;
    }

    if (this.__cameraManipulator) {
      this.__cameraManipulator.onMouseMove(event);
      if (!event.propagating) return
    }
    this.mouseMove.emit(event);
  }

  /**
   * Causes an event to occur when a user releases a mouse button over a element.
   * @param {MouseEvent} event - The event that occurs.
   */
  onMouseUp(event) {
    this.__prepareEvent(event);

    if (this.capturedItem) {
      this.capturedItem.onMouseUp(event);
      return
    }

    if (event.intersectionData != undefined) {
      event.intersectionData.geomItem.onMouseUp(event);
      if (!event.propagating) return
    }

    if (this.__cameraManipulator) {
      this.__cameraManipulator.onMouseUp(event);
      if (!event.propagating) return
    }

    this.mouseUp.emit(event);
  }

  /**
   * Causes an event to occur when the mouse pointer is moved out of an element.
   * @param {MouseEvent} event - The event that occurs.
   */
  onMouseLeave(event) {
    this.__prepareEvent(event);
    this.mouseLeave.emit(event);
  }

  /**
   * Causes an event to occurs when the user presses a key on the keyboard.
   * @param {string} key - The key the user presses.
   * @param {KeyboardEvent} event - The event that occurs.
   */
  onKeyPressed(key, event) {
    this.__prepareEvent(event);
    if (this.__cameraManipulator) {
      if (this.__cameraManipulator.onKeyPressed(key, event)) return
    }
    this.keyPressed.emit(key, event);
  }

  /**
   * Causes an event to occur when the user is pressing a key on the keyboard.
   * @param {string} key - The key the user is pressing.
   * @param {KeyboardEvent} event - The event that occurs.
   */
  onKeyDown(key, event) {
    this.__prepareEvent(event);
    if (this.__cameraManipulator) {
      if (this.__cameraManipulator.onKeyDown(key, event)) return
    }
    this.keyDown.emit(key, event);
  }

  /**
   * Causes an event to occur  when the user releases a key on the keyboard.
   * @param {string} key - The key the user releases
   * @param {KeyboardEvent} event - The event that occurs.
   */
  onKeyUp(key, event) {
    this.__prepareEvent(event);
    if (this.__cameraManipulator) {
      if (this.__cameraManipulator.onKeyUp(key, event)) return
    }
    this.keyUp.emit(key, event);
  }

  /**
   * Causes an event to occur when the mouse wheel is rolled up or down over an element.
   * @param {MouoseWheelEvent} event - The event that occurs.
   */
  onWheel(event) {
    this.__prepareEvent(event);
    if (event.intersectionData != undefined) {
      event.intersectionData.geomItem.onWheel(event);
      if (!event.propagating) return
    }

    if (this.__cameraManipulator) {
      this.__cameraManipulator.onWheel(event);
      return
    }
    this.mouseWheel.emit(event);
  }

  // Touch events

  /**
   * The __eventTouchPos method.
   * @param {any} touch - The touch value.
   * @return {Vec2} - The return value.
   * @private
   */
  __eventTouchPos(touch) {
    return new Vec2(
      touch.rendererX - this.getPosX(),
      touch.rendererY - this.getPosY()
    )
  }

  /**
   * Causes an event to occur when the user touches an element on a touch screen.
   * @param {TouchEvent} event - The event that occurs.
   */
  onTouchStart(event) {
    this.__prepareEvent(event);

    if (event.touches.length == 1) {
      const touch = event.touches[0];
      const touchPos = this.__eventTouchPos(touch);
      event.touchPos = touchPos;
      event.touchRay = this.calcRayFromScreenPos(touchPos);

      const intersectionData = this.getGeomDataAtPos(touchPos, event.touchRay);
      if (intersectionData != undefined) {
        // console.log("onMouseDown on Geom"); // + " Material:" + geomItem.getMaterial().name);
        // console.log(intersectionData.geomItem.getPath()); // + " Material:" + geomItem.getMaterial().name);
        event.intersectionData = intersectionData;
        intersectionData.geomItem.onMouseDown(event, intersectionData);
        if (!event.propagating) return
        if (this.capturedItem) return

        this.mouseDownOnGeom.emit(event);
        if (!event.propagating) return
      }

      const downTime = Date.now();
      if (
        downTime - this.__prevDownTime <
        this.__doubleClickTimeMSParam.getValue()
      ) {
        if (this.__cameraManipulator) {
          this.__cameraManipulator.onDoubleTap(event);
          if (!event.propagating) return
        }
        this.doubleTapped.emit(event);
        return
      } else {
        this.__prevDownTime = downTime;
      }
    }

    if (this.__cameraManipulator) {
      this.__cameraManipulator.onTouchStart(event);
      return
    }
    this.touchStart.emit(event);
  }

  /**
   * The event that occurs when the user moves his/her finger across a touch screen.
   * @param {TouchEvent} event - The event that occurs.
   */
  onTouchMove(event) {
    this.__prepareEvent(event);

    if (this.capturedItem) {
      event.touchPos = [];
      event.touchRay = [];
      for (let index = 0; index < event.touches.length; index++) {
        const touch = event.touches[index];
        const touchPos = this.__eventTouchPos(touch);
        event.touchPos[index] = touchPos;
        event.touchRay[index] = this.calcRayFromScreenPos(touchPos);
      }
      event.mousePos = event.touchPos[0];
      event.mouseRay = event.touchRay[0];
      this.capturedItem.onMouseMove(event);
      return
    }

    if (this.__cameraManipulator) {
      this.__cameraManipulator.onTouchMove(event);
      return
    }
    this.touchMove.emit(event);
  }

  /**
   * Causes an event to occur when the user removes his/her finger from an element.
   * @param {TouchEvent} event - The event that occurs.
   */
  onTouchEnd(event) {
    this.__prepareEvent(event);

    if (this.capturedItem) {
      this.capturedItem.onMouseUp(event);
      return
    }

    if (this.__cameraManipulator) {
      this.__cameraManipulator.onTouchEnd(event);
      return
    }
    this.touchEnd.emit(event);
  }

  /**
   * Causes an event to occur when the touch event gets interrupted.
   * @param {TouchEvent} event - The event that occurs.
   */
  onTouchCancel(event) {
    this.__prepareEvent(event);

    if (this.capturedItem) {
      this.capturedItem.onTouchCancel(event);
      return
    }

    if (this.__cameraManipulator) {
      this.__cameraManipulator.onTouchCancel(event);
      return
    }
    this.touchCancel.emit(event);
  }

  // //////////////////////////
  // Rendering

  /**
   * The __initRenderState method.
   * @param {any} renderstate - The renderstate value.
   * @private
   */
  __initRenderState(renderstate) {
    // console.log(this.__viewMat.toString())
    renderstate.viewXfo = this.__cameraXfo;
    renderstate.viewScale = 1.0;
    renderstate.region = this.region;
    renderstate.cameraMatrix = this.__cameraMat;
    renderstate.viewports = [
      {
        region: this.region,
        viewMatrix: this.__viewMat,
        projectionMatrix: this.__projectionMatrix,
        viewportFrustumSize: this.__frustumDim,
        isOrthographic: this.__camera.getIsOrthographic(),
        fovY: this.__camera.getFov(),
      },
    ];
  }

  /**
   * The draw method.
   */
  draw() {
    const gl = this.__renderer.gl;

    // Make sure the default fbo is bound
    // Note: Sometimes an Fbo is left bound
    // from anohter op(like resizing, populating etc..)
    // We need to unbind here to ensure rendering is to the
    // right target.
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);

    gl.viewport(...this.region);

    if (this.__backgroundColor)
      gl.clearColor(...this.__backgroundColor.asArray());
    gl.colorMask(true, true, true, true);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

    const renderstate = {};
    this.__initRenderState(renderstate);
    this.__renderer.drawScene(renderstate);

    // Turn this on to debug the geom data buffer.
    // {
    //     gl.screenQuad.bindShader(renderstate);
    //     gl.screenQuad.draw(renderstate, this.__geomDataBuffer);
    // }
  }
}

/** Class representing a VR head. 
 * @private
*/
class VRHead {
  /**
   * Create a VR head.
   * @param {any} vrviewport - The VR viewport.
   * @param {any} stageTreeItem - The stageTreeItem value.
   */
  constructor(vrviewport, stageTreeItem) {
    this.__vrviewport = vrviewport;
    this.__treeItem = new TreeItem('VRHead');
    stageTreeItem.addChild(this.__treeItem);

    this.__mat4 = new Mat4();
    this.__localXfo = new Xfo();
  }

  /**
   * The update method.
   * @param {any} pose - The pose value.
   */
  update(pose) {
    // Old
    // this.__mat4.setDataArray(pose.poseModelMatrix);

    // New
    this.__mat4.setDataArray(pose.transform.matrix);

    this.__localXfo.fromMat4(this.__mat4);

    // const pos = pose.transform.position;
    // this.__localXfo.tr.set(pos.x, pos.y,pos.z);
    // const ori = pose.transform.orientation;
    // this.__localXfo.ori.set(ori.x, ori.y, ori.z, ori.x);

    this.__treeItem.setLocalXfo(this.__localXfo);
  }

  /**
   * The getTreeItem method.
   * @return {any} - The return value.
   */
  getTreeItem() {
    return this.__treeItem
  }

  /**
   * The getXfo method.
   * @return {Xfo} - The return value.
   */
  getXfo() {
    return this.__localXfo
  }
}

/** Class representing a VR controller. */
class VRController {
  /**
   * Create a VR controller.
   * @param {any} vrviewport - The Vr viewport.
   * @param {any} inputSource - The input source.
   * @param {any} id - The id value.
   */
  constructor(vrviewport, inputSource, id) {
    this.__vrviewport = vrviewport;
    this.__inputSource = inputSource;
    this.__id = id;
    this.__isDaydramController = SystemDesc.isMobileDevice;

    this.touchpadTouched = new Signal();
    this.buttonPressed = new Signal();
    this.buttonReleased = new Signal();
    this.__pressedButtons = [];

    // /////////////////////////////////
    // Xfo

    this.__mat4 = new Mat4();
    this.__xfo = new Xfo();

    // this.setVisible(true);

    this.__treeItem = new TreeItem(
      'VRController:' + inputSource.handedness + id
    );
    // Controller coordinate system
    // X = Horizontal.
    // Y = Up.
    // Z = Towards handle base.

    if (!this.__isDaydramController) {
      // A Vive or Occulus Touch Controller
      this.__tip = new TreeItem('Tip');
      // Note: the tip of the controller need to be off
      // the end of the controller. getGeomItemAtTip
      // now searches a grid in that area and so we need to
      // ensure that the grid does not touch the controller,
      // else it will return the controller geom from
      // the getGeomItemAtTip function
      const tipXfo = new Xfo();
      tipXfo.tr.set(0.0, -0.05, -0.13);
      // Flip the tip around so +z is forwards.
      // tipXfo.ori.setFromAxisAndAngle(new Vec3(0, 1, 0), Math.PI)
      this.__tip.setLocalXfo(tipXfo);
      this.__treeItem.addChild(this.__tip, false);
      vrviewport.getTreeItem().addChild(this.__treeItem);

      this.__activeVolumeSize = 0.04;

      vrviewport.loadHMDResources().then(asset => {
        asset.loaded.connect(() => {
          let srcControllerTree;
          if (id == 0)
            srcControllerTree = asset.getChildByName('LeftController');
          else if (id == 1)
            srcControllerTree = asset.getChildByName('RightController');
          if (!srcControllerTree)
            srcControllerTree = asset.getChildByName('Controller');
          const controllerTree = srcControllerTree.clone();

          controllerTree.setLocalXfo(
            new Xfo(
              new Vec3$1(0, -0.035, -0.085),
              new Quat({ setFromAxisAndAngle: [new Vec3$1(0, 1, 0), Math.PI] }),
              new Vec3$1(0.001, 0.001, 0.001) // VRAsset units are in mm.
            )
          );
          this.__treeItem.addChild(controllerTree, false);
        });
      });
    }
  }

  /**
   * The getHandedness method.
   * @return {any} - The return value.
   */
  getHandedness() {
    return this.__inputSource.handedness
  }

  /**
   * The getId method.
   * @return {any} - The return value.
   */
  getId() {
    return this.__id
  }

  /**
   * The getTreeItem method.
   * @return {any} - The return value.
   */
  getTreeItem() {
    return this.__treeItem
  }

  /**
   * The getTipItem method.
   * @return {any} - The return value.
   */
  getTipItem() {
    return this.__tip
  }

  /**
   * The getTipXfo method.
   * @return {any} - The return value.
   */
  getTipXfo() {
    return this.__tip.getGlobalXfo()
  }

  /**
   * The getTouchPadValue method.
   * @return {any} - The return value.
   */
  getTouchPadValue() {
    return this.__touchpadValue
  }

  /**
   * The isButtonPressed method.
   * @return {boolean} - The return value.
   */
  isButtonPressed() {
    return this.__buttonPressed
  }

  /**
   * The getControllerStageLocalXfo method.
   * @return {any} - The return value.
   */
  getControllerStageLocalXfo() {
    return this.__xfo
  }

  /**
   * The getControllerTipStageLocalXfo method.
   * @return {any} - The return value.
   */
  getControllerTipStageLocalXfo() {
    return this.__xfo.multiply(this.__tip.getLocalXfo())
  }

  // ////////////////////////////////

  /**
   * The updatePose method.
   * @param {any} refSpace - The refSpace value.
   * @param {any} xrFrame - The xrFrame value.
   * @param {any} inputSource - The inputSource value.
   */
  updatePose(refSpace, xrFrame, inputSource) {
    const inputPose = xrFrame.getPose(inputSource.gripSpace, refSpace);

    // We may not get a inputPose back in cases where the input source has lost
    // tracking or does not know where it is relative to the given frame
    // of reference.
    if (!inputPose || !inputPose.transform) {
      return
    }

    this.__mat4.setDataArray(inputPose.transform.matrix);
    this.__xfo.fromMat4(this.__mat4);

    // const pos = inputPose.transform.position;
    // this.__xfo.tr.set(pos.x, pos.y,pos.z);
    // const ori = inputPose.transform.orientation;
    // this.__xfo.ori.set(ori.x, ori.y, ori.z, ori.x);
    // //////////////////////////////

    this.__treeItem.setLocalXfo(this.__xfo);

    // Reset the geom at tip so it will be recomuted if necessary
    this.__geomAtTip = undefined;
    this.__hitTested = false;

    // /////////////////////////////////
    // Simulate Mouse Events.
    // const intersectionData = this.getGeomItemAtTip()
    // if (intersectionData != undefined) {
    //   if (intersectionData.geomItem != this.mouseOverItem) {
    //     if (this.mouseOverItem) {
    //       const event = {
    //         viewport: this.__vrviewport,
    //         geomItem: this.mouseOverItem,
    //       }
    //       this.mouseOverItem.onMouseLeave(event)
    //     }
    //     this.mouseOverItem = intersectionData.geomItem
    //     const event = {
    //       viewport: this.__vrviewport,
    //       geomItem: intersectionData.geomItem,
    //       intersectionData,
    //     }
    //     this.mouseOverItem.onMouseEnter(event)
    //   }

    //   const event = {
    //     viewport: this.__vrviewport,
    //     geomItem: intersectionData.geomItem,
    //     intersectionData,
    //   }
    //   intersectionData.geomItem.onMouseMove(event)
    // } else if (this.mouseOverItem) {
    //   const event = {
    //     viewport: this.__vrviewport,
    //     geomItem: this.mouseOverItem,
    //     intersectionData,
    //   }
    //   this.mouseOverItem.onMouseLeave(event)
    //   this.mouseOverItem = null
    // }
  }

  // ////////////////////////////////

  /**
   * The getGeomItemAtTip method.
   * @return {any} - The return value.
   */
  getGeomItemAtTip() {
    if (this.__hitTested) return this.__intersectionData
    this.__hitTested = true;

    const renderer = this.__vrviewport.getRenderer();
    const xfo = this.__tip.getGlobalXfo();
    const vol = this.__activeVolumeSize;
    this.__intersectionData = renderer.raycastWithXfo(xfo, vol, vol);
    return this.__intersectionData
  }
}

/** Class representing a VR viewport.
 * @extends GLBaseViewport
 */
class VRViewport extends GLBaseViewport {
  /**
   * Create a VR viewport.
   * @param {any} renderer - The renderer value.
   */
  constructor(renderer) {
    super(renderer);
    this.getParameter('DoubleClickTimeMS').setValue(300);

    // ////////////////////////////////////////////
    // Viewport params
    this.__projectionMatriciesUpdated = false;

    // These values are in meters.
    this.__far = 1024.0;
    this.__near = 0.1;
    // ////////////////////////////////////////////
    // Tree

    this.__stageTreeItem = new TreeItem('VRStage');
    this.__stageTreeItem.setSelectable(false);
    this.__stageTreeItem.setVisible(false);
    this.__renderer.addTreeItem(this.__stageTreeItem);

    this.__vrhead = new VRHead(this.__renderer.gl, this.__stageTreeItem);

    this.__vrControllersMap = {};
    this.__vrControllers = [];

    // ////////////////////////////////////////////
    // Xfos
    const xfo = new Xfo();
    // Convert Y-Up to Z-Up.
    xfo.ori.setFromAxisAndAngle(new Vec3$1(1, 0, 0), Math.PI * 0.5);
    this.setXfo(xfo); // Reset the stage Xfo.

    this.__leftViewMatrix = new Mat4();
    this.__leftProjectionMatrix = new Mat4();
    this.__rightViewMatrix = new Mat4();
    this.__rightProjectionMatrix = new Mat4();

    // ////////////////////////////////////////////
    // Signals
    this.resized = new Signal();

    // Signals to abstract the user view.
    // i.e. when a user switches to VR mode, the signals
    // simply emit the new VR data.
    this.viewChanged = new Signal();
    this.presentingChanged = new Signal();

    this.controllerAdded = new Signal();
    this.controllerButtonDown = new Signal();
    this.controllerButtonUp = new Signal();
    this.controllerDoubleClicked = new Signal();
    this.controllerTouchpadTouched = new Signal();
  }

  /**
   * The getVRDisplay method.
   * @return {any} - The return value.
   */
  getVRDisplay() {
    return this.__vrDisplay
  }

  /**
   * The getAsset method.
   * @return {any} - The return value.
   */
  getAsset() {
    return this.__vrAsset
  }

  /**
   * The getTreeItem method.
   * @return {any} - The return value.
   */
  getTreeItem() {
    return this.__stageTreeItem
  }

  /**
   * The getVRHead method.
   * @return {any} - The return value.
   */
  getVRHead() {
    return this.__vrhead
  }

  /**
   * The getXfo method.
   * @return {Xfo} - The return value.
   */
  getXfo() {
    return this.__stageXfo
  }

  /**
   * The setXfo method.
   * @param {Xfo} xfo - The xfo value.
   */
  setXfo(xfo) {
    this.__stageXfo = xfo;
    this.__stageTreeItem.setGlobalXfo(xfo);
    this.__stageMatrix = xfo.inverse().toMat4();
    // this.__stageMatrix.multiplyInPlace(this.__sittingToStandingMatrix);
    this.__stageScale = xfo.sc.x;
  }

  /**
   * The getControllers method.
   * @return {any} - The return value.
   */
  getControllers() {
    return this.__vrControllers
  }

  // //////////////////////////
  // Presenting

  /**
   * The canPresent method.
   * @return {any} - The return value.
   */
  canPresent() {
    return this.__canPresent
  }

  /**
   * The isPresenting method.
   * @return {boolean} - The return value.
   */
  isPresenting() {
    return this.__session
  }

  /**
   * The __startSession method.
   * @private
   */
  __startSession() {
    const onAnimationFrame = (t, frame) => {
      if (this.__session) {
        this.__session.requestAnimationFrame(onAnimationFrame);
        this.draw(frame);
        // console.log(frame)
        // let pose = frame.getViewerPose(this.__refSpace);
        // if(pose) {
        //     console.log(pose)
        //     this.__session.end();
        // }
        // else {
        //     this.__session.requestAnimationFrame(onAnimationFrame);
        // }
      }
    };
    this.__session.requestAnimationFrame(onAnimationFrame);
  }

  /**
   * The loadHMDResources method.
   * @return {any} - The return value.
   */
  loadHMDResources() {
    // If the HMD has changed, reset it.
    const hmd = localStorage.getItem('hmd');
    if (this.__hmd != hmd) {
      this.__hmdAssetPromise = undefined;
    }

    if (this.__hmdAssetPromise) return this.__hmdAssetPromise

    this.__hmd = hmd;
    this.__hmdAssetPromise = new Promise((resolve, reject) => {
      // ////////////////////////////////////////////
      // Resources

      // Note: when the VRViewport is setup
      this.__renderer.sceneSet.connect(scene => {
        const resourceLoader = scene.getResourceLoader();

        let assetPath;
        switch (hmd) {
          case 'Vive':
            assetPath = 'ZeaEngine/Vive.vla';
            break
          case 'Oculus':
            assetPath = 'ZeaEngine/Oculus.vla';
            break
          default:
            assetPath = 'ZeaEngine/Oculus.vla';
            break
        }

        const hmdAssetId = resourceLoader.resolveFilePathToId(assetPath);
        if (hmdAssetId && !SystemDesc.isMobileDevice) {
          this.__vrAsset = this.__renderer
            .getScene()
            .loadCommonAssetResource(hmdAssetId);
          this.__vrAsset.loaded.connect(() => {
            const materialLibrary = this.__vrAsset.getMaterialLibrary();
            const materialNames = materialLibrary.getMaterialNames();
            for (const name of materialNames) {
              const material = materialLibrary.getMaterial(name, false);
              if (material) {
                material.visibleInGeomDataBuffer = false;
                material.setShaderName('SimpleSurfaceShader');
              }
            }
            resolve(this.__vrAsset);
          });
        } else reject();
      });
    });
    return this.__hmdAssetPromise
  }

  /**
   * The startPresenting method.
   */
  startPresenting() {
    return new Promise((resolve, reject) => {
      
    // https://github.com/immersive-web/webxr/blob/master/explainer.md

    const gl = this.__renderer.gl;

    const __startPresenting = () => {
      navigator.xr
        .requestSession('immersive-vr', {
          requiredFeatures: ['local-floor'],
          optionalFeatures: ['bounded-floor']
        }).then(session => {
          this.__renderer.__xrViewportPresenting = true;

          let mirrorCanvas;
          if (!SystemDesc.isMobileDevice) {
            // Add an output canvas that will allow XR to also send a view
            // back the monitor.
            mirrorCanvas = document.createElement('canvas');
            mirrorCanvas.style.position = 'relative';
            mirrorCanvas.style.left = '0px';
            mirrorCanvas.style.top = '0px';
            mirrorCanvas.style.width = '100%';
            mirrorCanvas.style.height = '100%';

            this.__renderer
              .getDiv()
              .replaceChild(mirrorCanvas, this.__renderer.getGLCanvas());

            session.addEventListener('end', event => {
                this.__renderer
                  .getDiv()
                  .replaceChild(this.__renderer.getGLCanvas(), mirrorCanvas);
            });
          }

          session.addEventListener('end', event => {
            this.__stageTreeItem.setVisible(false);
            this.__session = null;
            this.presentingChanged.emit(false);
          });

          const onSelectStart = ev => {
            const controller = this.__vrControllersMap[
              ev.inputSource.handedness
            ];
            if (controller) {
              const downTime = Date.now();
              console.log(
                'controller:',
                ev.inputSource.handedness,
                ' down',
                downTime - controller.__prevDownTime
              );
              if (
                downTime - controller.__prevDownTime <
                this.__doubleClickTimeMSParam.getValue()
              ) {
                this.controllerDoubleClicked.emit(
                  {
                    button: 1,
                    controller,
                    vleStopPropagation: false,
                    vrviewport: this,
                  },
                  this
                );
              } else {
                controller.__prevDownTime = downTime;

                this.controllerButtonDown.emit(
                  {
                    button: 1,
                    controller,
                    vleStopPropagation: false,
                    vrviewport: this,
                  },
                  this
                );
              }
            }
          };
          const onSelectEnd = ev => {
            const controller = this.__vrControllersMap[
              ev.inputSource.handedness
            ];
            if (controller) {
              console.log('controller:', ev.inputSource.handedness, ' up');
              this.controllerButtonUp.emit(
                {
                  button: 1,
                  controller,
                  vleStopPropagation: false,
                  vrviewport: this,
                },
                this
              );
            }
          };
          session.addEventListener('selectstart', onSelectStart);
          session.addEventListener('selectend', onSelectEnd);

          this.__session = session;

          // ////////////////////////////
          // Old code
          // this.__session.baseLayer = new XRWebGLLayer(session, gl);

          // New code
          session.updateRenderState({
            baseLayer: new XRWebGLLayer(session, gl, {
              compositionDisabled: session.mode == 'inline',
            }),
            outputContext: mirrorCanvas ? mirrorCanvas.getContext('xrpresent') : null,
          });
          // ////////////////////////////

          // Get a stage frame of reference, which will align the user's physical
          // floor with Y=0 and can provide boundaries that indicate where the
          // user can safely walk. If the system can't natively provide stage
          // coordinates (for example, with a 3DoF device) then it will return an
          // emulated stage, where the view is translated up by a static height so
          // that the scene still renders in approximately the right place.

          // If a bounded reference space isn't supported, fall back to a
          // stationary/floor-level reference space. This still provides a
          // floor-relative space and will always be supported for
          // immersive sessions. It will not, however, provide boundaries
          // and generally expects the user to stand in one place.
          // If the device doesn't have a way of determining the floor
          // level (for example, with a 3DoF device) then it will return
          // an emulated floor-level space, where the view is translated
          // up by a static height so that the scene still renders in
          // approximately the right place.
          //   console.log('Falling back to floor-level reference space');
          session
            .requestReferenceSpace(SystemDesc.isMobileDevice ? 'local' : 'local-floor')
            .catch(e => {
              // if (!session.mode.startsWith('immersive')) {
                // If we're in inline mode, our underlying platform may not support
                // the stationary reference space, but an identity space is guaranteed.
                console.log('Falling back to identity reference space');
                return session
                  .requestReferenceSpace('viewer')
                  .then(refSpace => {
                    // If we use an identity reference space we need to scoot the
                    // origin down a bit to put the camera at approximately the
                    // right level. (Here we're moving it 1.6 meters, which should
                    // *very* roughly align us with the eye height of an "average"
                    // adult human.)
                    return refSpace.getOffsetReferenceSpace(
                      new XRRigidTransform({ y: -1.6 })
                    )
                  })
              // } else {
              //   throw e
              // }
            })
            .then(refSpace => {
              this.__refSpace = refSpace;
              this.__stageTreeItem.setVisible(true);
              this.presentingChanged.emit(true);
              this.__startSession();

              resolve();
            })
            .catch(e => {
              console.warn(e.message);
              reject("Unable to start XR Session:" + e.message);
            });
        })
        .catch(e => {
          console.warn(e.message);
        });
    };

    if (SystemDesc.isMobileDevice) {
      __startPresenting();
    } else {
      // Note: we should not need to load the resources here
      // They could be loaded only once the controllers are
      // being created. However, I can't see the controllers if
      // the loading is defered
      this.loadHMDResources().then(__startPresenting);
    }
    })
  }

  /**
   * The stopPresenting method.
   */
  stopPresenting() {
    if (!this.__session) return

    this.__session.end();
  }

  /**
   * The togglePresenting method.
   */
  togglePresenting() {
    if (this.__session) this.stopPresenting();
    else this.startPresenting();
  }

  /**
   * The getHMDCanvasSize method.
   * @return {any} - The return value.
   */
  getHMDCanvasSize() {
    return this.__hmdCanvasSize
  }

  // //////////////////////////
  // Controllers

  /**
   * The __createController method.
   * @param {any} id - The id value.
   * @param {any} inputSource - The inputSource value.
   * @return {any} - The return value.
   * @private
   */
  __createController(id, inputSource) {
    console.log('creating controller:', inputSource.handedness);
    const vrController = new VRController(this, inputSource, id);
    this.__vrControllersMap[inputSource.handedness] = vrController;
    this.__vrControllers[id] = vrController;
    this.controllerAdded.emit(vrController);
    return vrController
  }

  /**
   * The updateControllers method.
   * @param {any} xrFrame - The xrFrame value.
   */
  updateControllers(xrFrame) {
    const inputSources = this.__session.inputSources;
    for (let i = 0; i < inputSources.length; i++) {
      const inputSource = inputSources[i];

      // Note: This is to avoid a bug/feature in WebXR where initially the
      // controllers have no handedness specified, then suddenly
      // get handedness. We need the handedness before we can setup the controller.
      if (inputSource.handedness == '' || inputSource.handedness == 'none')
        return

      if (!this.__vrControllers[i]) {
        this.__createController(i, inputSource);
      }
      this.__vrControllers[i].updatePose(this.__refSpace, xrFrame, inputSource);
    }
  }

  /**
   * The draw method.
   * @param {any} xrFrame - The xrFrame value.
   */
  draw(xrFrame) {
    const session = xrFrame.session;
    // Assumed to be a XRWebGLLayer for now.

    // Old
    // const layer = session.baseLayer;
    // New
    const layer = session.renderState.baseLayer;

    const pose = xrFrame.getViewerPose(this.__refSpace);
    const views = pose.views;

    if (!this.__projectionMatriciesUpdated) {
      this.__projectionMatrices = [];
      this.__viewMatrices = [];
      this.__cameraMatrices = [];
      this.__region = [0, 0, 0, 0];
      for (let i = 0; i < views.length; i++) {
        const view = views[i];
        const projMat = new Mat4();
        projMat.setDataArray(view.projectionMatrix);
        this.__projectionMatrices[i] = projMat;
        this.__viewMatrices[i] = new Mat4();
        this.__cameraMatrices[i] = new Mat4();

        const vp = layer.getViewport(view);
        this.__region[2] = Math.max(this.__region[2], vp.x + vp.width);
        this.__region[3] = Math.max(this.__region[3], vp.y + vp.height);
      }

      this.__renderer.resizeFbos(this.__region[2], this.__region[3]);
      this.__projectionMatriciesUpdated = true;
    }

    const gl = this.__renderer.gl;
    gl.bindFramebuffer(gl.FRAMEBUFFER, layer.framebuffer);

    if (this.__backgroundColor)
      gl.clearColor(...this.__backgroundColor.asArray());
    gl.colorMask(true, true, true, true);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

    const renderstate = {
      boundRendertarget: layer.framebuffer,
      region: this.__region,
      viewports: [],
    };
    // renderstate.boundRendertarget.vrfbo = true;

    for (let i = 0; i < views.length; i++) {
      const view = views[i];
      this.__viewMatrices[i].setDataArray(view.transform.inverse.matrix);
      this.__viewMatrices[i].multiplyInPlace(this.__stageMatrix);
      // this.__cameraMatrices[i].setDataArray(view.transform.matrix);

      const vp = layer.getViewport(view);
      renderstate.viewports.push({
        viewMatrix: this.__viewMatrices[i],
        projectionMatrix: this.__projectionMatrices[i],
        region: [vp.x, vp.y, vp.width, vp.height],
      });
    }

    this.__vrhead.update(pose);

    this.updateControllers(xrFrame);

    renderstate.viewXfo = this.__vrhead.getTreeItem().getGlobalXfo();
    renderstate.viewScale = 1.0 / this.__stageScale;
    renderstate.cameraMatrix = renderstate.viewXfo.toMat4();
    renderstate.region = this.__region;

    this.__renderer.drawScene(renderstate);

    if (this.capturedElement) {
      const event = {
        viewport: this,
      };
      this.capturedElement.onMouseMove(event);
    }

    // ///////////////////////
    // Emit a signal for the shared session.
    const data = {
      interfaceType: 'VR',
      hmd: this.__hmd,
      viewXfo: renderstate.viewXfo,
      controllers: this.__vrControllers,
      vrviewport: this,
    };
    this.viewChanged.emit(data, this);
  }


  /**
   * The setCapture method.
   * @param {any} target - The target value.
   * @private
   */
  setCapture(target) {
    this.capturedElement = target;
  }

  /**
   * The getCapture method.
   * @return {any} - The return value.
   */
  getCapture() {
    return this.capturedElement
  }

  /**
   * The releaseCapture method.
   */
  releaseCapture() {
    this.capturedElement = null;
    // TODO: This should be a request, wbihch is fulfilled next time
    // a frame is dranw.
    this.renderGeomDataFbo();
  }

}

let activeGLRenderer = undefined;
let mouseIsDown = false;
let mouseLeft = false;

const registeredPasses = {};

/** Class representing a GL base renderer.
 * @private
 */
class GLBaseRenderer {
  /**
   * Create a GL base renderer.
   * @param {any} canvasDiv - The canvasDiv value.
   * @param {any} options - The options value.
   */
  constructor(canvasDiv, options = {}) {
    if (!SystemDesc.gpuDesc) {
      console.warn('Unable to create renderer');
      return
    }

    this.__shaders = {};
    this.__passes = {};
    this.__passCallbacks = [];

    this.addTreeItem = this.addTreeItem.bind(this);
    this.removeTreeItem = this.removeTreeItem.bind(this);

    this.__viewports = [];
    this.__activeViewport = undefined;
    this.__continuousDrawing = false;
    this.__redrawRequested = false;
    this.__isMobile = SystemDesc.isMobileDevice;

    this.__drawSuspensionLevel = 1;
    this.__shaderDirectives = {};
    this.__preproc = {};

    this.__xrViewportPresenting = false;

    // Function Bindings.
    this.renderGeomDataFbos = this.renderGeomDataFbos.bind(this);
    this.requestRedraw = this.requestRedraw.bind(this);

    this.resized = new Signal();
    this.keyPressed = new Signal();
    this.sceneSet = new Signal(true);
    this.vrViewportSetup = new Signal(true);
    this.sessionClientSetup = new Signal(true);

    // Signals to abstract the user view.
    // i.e. when a user switches to VR mode, the signals
    // simply emit the new VR data.
    this.viewChanged = new Signal();
    this.redrawOccured = new Signal();

    this.setupWebGL(canvasDiv, options.webglOptions ? options.webglOptions : {});
    this.bindEventHandlers();

    for (const passtype in registeredPasses) {
      for (const cls of registeredPasses[passtype]) {
        this.addPass(new cls(), passtype, false);
      }
    }

    this.addViewport('main');

    // ////////////////////////////////////////////
    // WebXR
    this.__supportXR =
      options.supportXR !== undefined ? options.supportXR : true;
    this.__xrViewport = undefined;
    this.__xrViewportPromise = new Promise((resolve, reject) => {
      if (this.__supportXR) {
        // if(!navigator.xr && window.WebVRPolyfill != undefined) {
        //     this.__vrpolyfill = new WebVRPolyfill();
        // }
        if (navigator.xr) {
          const setupXRViewport = () => {
            // Note: could cause a context loss on machines with
            // multi-gpus (integrated Intel).
            // This is because the may force the context to switch
            // to the discrete GPU.
            // TODO: Provide a system to re-load the GPU data.
            // this.__gl.setCompatibleXRDevice(device);
            this.__gl.makeXRCompatible().then(() => {
              this.__xrViewport = this.__setupXRViewport();
              this.vrViewportSetup.emit(this.__xrViewport);
              resolve(this.__xrViewport);
            });
          };
          if (navigator.xr.supportsSessionMode) {
            // Old
            navigator.xr
              .supportsSessionMode('immersive-vr')
              .then(setupXRViewport)
              .catch(reason => {
                console.warn('Unable to setup XR:' + reason);
              });
          } else {
            // New
            navigator.xr
              .isSessionSupported('immersive-vr')
              .then(isSupported => {
                if (isSupported) {
                  setupXRViewport();
                }
              })
              .catch(reason => {
                console.warn('Unable to setup XR:' + reason);
              });
          }

          // TODO:
          // navigator.xr.addEventListener('devicechange', checkForXRSupport);
        }
      }
    });
  }

  /**
   * The addShaderPreprocessorDirective method.
   * @param {string} name - The name value.
   * @param {any} value - The value param.
   */
  addShaderPreprocessorDirective(name, value) {
    if (value) this.__shaderDirectives[name] = '#define ' + name + ' = ' + value;
    else this.__shaderDirectives[name] = '#define ' + name;
    const directives = [];
    for (const key in this.__shaderDirectives) {
      directives.push(this.__shaderDirectives[key]);
    }
    this.__preproc.defines = directives.join('\n') + '\n';
    this.__gl.shaderopts = this.__preproc;
  }

  /**
   * The getShaderPreproc method.
   * @return {any} - The return value.
   */
  getShaderPreproc() {
    return this.__preproc
  }

  /**
   * The getWidth method.
   * @return {any} - The return value.
   */
  getWidth() {
    return this.__glcanvas.width
  }

  /**
   * The getHeight method.
   * @return {any} - The return value.
   */
  getHeight() {
    return this.__glcanvas.height
  }

  // //////////////////////////////////////
  // Viewports

  /**
   * Add a viewport.
   * @param {string} name - The name of the viewport.
   * @return {GLViewport} - The return value.
   */
  addViewport(name) {
    const vp = new GLViewport(this, name, this.getWidth(), this.getHeight());
    vp.updated.connect(() => {
      this.requestRedraw();
    });

    vp.createGeomDataFbo(this.__floatGeomBuffer);

    vp.viewChanged.connect(data => {
      if (!this.__xrViewportPresenting) this.viewChanged.emit(data);
    });

    this.__viewports.push(vp);
    return vp
  }

  /**
   * The getViewport method.
   * @param {number} index - The index value.
   * @return {GLViewport} - The return value.
   */
  getViewport(index = 0) {
    return this.__viewports[index]
  }

  /**
   * The getViewportAtPos method.
   * @param {number} offsetX - The viewport offset in the X axis.
   * @param {number} offsetY - The viewport offset in the Y axis.
   * @return {GLViewport} - The return value.
   */
  getViewportAtPos(offsetX, offsetY) {
    for (const vp of this.__viewports) {
      const x = vp.getPosX();
      const y = vp.getPosY();
      const width = vp.getWidth();
      const height = vp.getHeight();
      if (
        offsetX >= x &&
        offsetY >= y &&
        offsetX <= width + x &&
        offsetY <= height + y
      )
        return vp
    }
    return undefined
  }

  /**
   * The activateViewport method.
   * @param {GLViewport} vp - The viewport.
   */
  activateViewport(vp) {
    if (this.__activeViewport == vp) return

    this.__activeViewport = vp;
  }

  /**
   * The activateViewportAtPos method.
   * @param {number} offsetX - The viewport offset in the X axis.
   * @param {number} offsetY - The viewport offset in the Y axis.
   */
  activateViewportAtPos(offsetX, offsetY) {
    if (this.__xrViewportPresenting) return
    const vp = this.getViewportAtPos(offsetX, offsetY);
    if (vp && vp != this.__activeViewport) this.activateViewport(vp);
  }

  /**
   * The getActiveViewport method.
   * @return {any} - The return value.
   */
  getActiveViewport() {
    if (this.__xrViewportPresenting) return this.__xrViewport
    return this.__activeViewport
  }

  /**
   * The suspendDrawing method.
   */
  suspendDrawing() {
    this.__drawSuspensionLevel++;
  }

  /**
   * The resumeDrawing method.
   */
  resumeDrawing() {
    this.__drawSuspensionLevel--;
    if (this.__drawSuspensionLevel == 0) {
      if (this.__loadingImg) this.__glcanvasDiv.removeChild(this.__loadingImg);

      this.renderGeomDataFbos();
      this.requestRedraw();
    }
  }

  /**
   * The renderGeomDataFbos method. Frame buffer (FBO).
   */
  renderGeomDataFbos() {
    if (this.__renderGeomDataFbosRequested == true) return

    this.__renderGeomDataFbosRequested = true;
    const onAnimationFrame = () => {
      for (const vp of this.__viewports) vp.renderGeomDataFbo();
      this.__renderGeomDataFbosRequested = false;
    };
    window.requestAnimationFrame(onAnimationFrame);
  }

  // //////////////////////////////////////
  // Scene

  /**
   * Setup the grid in the scene.
   * @param {any} gridSize - The size of the grid.
   * @param {Color} gridColor - The color of the grid.
   * @param {any} resolution - The resolution of the grid.
   * @param {any} lineThickness - The thickness of the grid lines.
   * @return {any} - The return value.
   */
  setupGrid(gridSize, gridColor, resolution, lineThickness) {
    console.warn('Deprecated Method. Please use scene.setupGrid');
    return this.__scene.setupGrid(gridSize, resolution, gridColor)
  }

  /**
   * The getScene method.
   * @return {any} - The return value.
   */
  getScene() {
    return this.__scene
  }

  /**
   * The setScene method.
   * @param {any} scene - The scene value.
   */
  setScene(scene) {
    this.__scene = scene;
    this.addTreeItem(this.__scene.getRoot());

    if (this.__gizmoContext)
      this.__gizmoContext.setSelectionManager(scene.getSelectionManager());

    this.sceneSet.emit(this.__scene);
  }

  /**
   * Add tree items to the scene.
   * @param {any} treeItem - The tree item to add.
   */
  addTreeItem(treeItem) {
    // Note: we can have BaseItems in the tree now.
    if (!(treeItem instanceof TreeItem)) return

    for (const passCbs of this.__passCallbacks) {
      const rargs = {
        continueInSubTree: true,
      };
      const handled = passCbs.itemAddedFn(treeItem, rargs);
      if (handled) {
        if (!rargs.continueInSubTree) return
        break
      }
    }

    // Traverse the tree adding items until we hit the leaves (which are usually GeomItems.)
    for (const childItem of treeItem.getChildren()) {
      if (childItem) this.addTreeItem(childItem);
    }

    treeItem.childAdded.connect(this.addTreeItem);
    treeItem.childRemoved.connect(this.removeTreeItem);

    this.renderGeomDataFbos();
  }

  /**
   * Remove tree items from the scene.
   * @param {any} treeItem - The tree item to remove.
   */
  removeTreeItem(treeItem) {
    // Note: we can have BaseItems in the tree now.
    if (!(treeItem instanceof TreeItem)) return

    treeItem.childAdded.disconnect(this.addTreeItem);
    treeItem.childRemoved.disconnect(this.removeTreeItem);

    for (const passCbs of this.__passCallbacks) {
      if (!passCbs.itemRemovedFn) continue
      const rargs = {
        continueInSubTree: true,
      };
      const handled = passCbs.itemRemovedFn(treeItem, rargs);
      if (handled) {
        if (!rargs.continueInSubTree) return
        break
      }
    }

    // Traverse the tree adding items till we hit the leaves (which are usually GeomItems).
    for (const childItem of treeItem.getChildren()) {
      if (childItem) this.removeTreeItem(childItem);
    }
    this.renderGeomDataFbos();
  }

  // ///////////////////////
  // Renderer Setup

  /**
   * Getter for gl.
   */
  get gl() {
    return this.__gl
  }

  /**
   * The getGL method.
   * @return {any} - The return value.
   */
  getGL() {
    return this.__gl
  }

  /**
   * The resizeFbos method. Frame buffer (FBO).
   * @param {any} width - The width of the frame buffer.
   * @param {any} height - The height of the frame buffer.
   */
  resizeFbos(width, height) {}

  /**
   * The __onResize method.
   * @private
   */
  __onResize() {
    if (!this.__xrViewportPresenting) {
      // Note: devicePixelRatio has already been factored into the clientWidth and clientHeight,
      // meaning we do not need to multiply client values by devicePixelRatio to get real values.
      // On some devices, this duplicate multiplication (when the meta tag was not present), caused
      // very large offscreen buffers to be created, which crashed devices.
      // (PT 15/10/2019 - Zahner project)
      // In some cases I have seen this is disabled using a viewport meta tag in the DOM, which then
      // requires that we multiply by devicePixelRatio to get the screen pixels size.
      // By removing that tag, it seems like manual zooming now on desktop systems does _NOT_
      // effect the clientWidth/clientHeight which causes blurry rendering(when zoomed).
      // This is a minor issue IMO, and so am disabling devicePixelRatio until its value is clear.
      // _Remove the meta name="viewport" from the HTML_
      const dpr = 1.0;//window.devicePixelRatio
      this.__glcanvas.width = this.__glcanvas.clientWidth * dpr;
      this.__glcanvas.height = this.__glcanvas.clientHeight * dpr;

      for (const vp of this.__viewports)
        vp.resize(this.__glcanvas.width, this.__glcanvas.height);

      this.resizeFbos(this.__glcanvas.width, this.__glcanvas.height);

      this.resized.emit(this.__glcanvas.width, this.__glcanvas.height);
      this.requestRedraw();
    }
  }

  /**
   * The getDiv method.
   * @return {any} - The return value.
   */
  getDiv() {
    return this.__glcanvasDiv
  }

  /**
   * The setupWebGL method.
   * @param {any} canvasDiv - The canvasDiv value.
   * @param {any} webglOptions - The webglOptions value.
   */
  setupWebGL(canvasDiv, webglOptions) {
    this.__glcanvas = document.createElement('canvas');
    this.__glcanvas.style.position = webglOptions.canvasPosition
      ? webglOptions.canvasPosition
      : 'absolute';
    this.__glcanvas.style.left = '0px';
    this.__glcanvas.style.top = '0px';
    this.__glcanvas.style.width = '100%';
    this.__glcanvas.style.height = '100%';

    this.__glcanvasDiv = canvasDiv;
    this.__glcanvasDiv.appendChild(this.__glcanvas);

    onResize(this.__glcanvas, event => {
      this.__onResize();
    });
    this.__onResize();

    webglOptions.preserveDrawingBuffer = true;
    webglOptions.stencil = webglOptions.stencil ? webglOptions.stencil : false;
    webglOptions.alpha = webglOptions.alpha ? webglOptions.alpha : false;
    webglOptions.xrCompatible = true;
    this.__gl = create3DContext(this.__glcanvas, webglOptions);
    if (!this.__gl)
      alert('Unable to create WebGL context. WebGL not supported.');
    this.__gl.renderer = this;

    if (this.__gl.name == 'webgl2') {
      this.addShaderPreprocessorDirective('ENABLE_ES3');
    }
    if (this.__gl.floatTexturesSupported) {
      this.addShaderPreprocessorDirective('ENABLE_FLOAT_TEXTURES');
    }

    this.__gl.screenQuad = new GLScreenQuad(this.__gl);
    this.__screenQuad = this.__gl.screenQuad;

    // Note: Mobile devices don't provide much support for reading data back from float textures,
    // and checking compatibility is patchy at best.
    // Note: We are now pushing on high-end mobile devices.
    // Galaxy and above. We need this. We need to accurately determine
    // if the float buffer is not supported.
    this.__floatGeomBuffer =
      this.__gl.floatTexturesSupported && SystemDesc.browserName != 'Safari';
    this.__gl.floatGeomBuffer = this.__floatGeomBuffer;
    // Note: the following returns UNSIGNED_BYTE even if the browser supports float.
    // const implType = this.__gl.getParameter(this.__gl.IMPLEMENTATION_COLOR_READ_TYPE);
    // this.__floatGeomBuffer = (implType == this.__gl.FLOAT);

    // //////////////////////////////////
    // Bind a default texture.
    // Note: If shaders have sampler2D uniforms, but we don't bind textures, then
    // they get assigned texture0. If we have no textures bound at all, then
    // we get warnings saying.
    // There is no texture bound to the unit 0
    // Bind a default texture to unit 0 simply to avoid these warnings.
    // this.__texture0 = new GLTexture2D(this.__gl, {
    //     format: 'RGB',
    //     type: 'UNSIGNED_BYTE',
    //     width: 1,
    //     height: 1,
    //     filter: 'NEAREST',
    //     mipMapped: false,
    //     wrap: 'CLAMP_TO_EDGE',
    //     data: new Uint8Array(3)
    // });

    // // gl.activeTexture(this.__gl.TEXTURE0);
    // this.__gl.bindTexture(this.__gl.TEXTURE_2D, this.__texture0.getTexHdl());
  }

  /**
   * The bindEventHandlers method.
   */
  bindEventHandlers() {
    // ////////////////////////////////
    // Setup event handlers
    const isValidCanvas = () => {
      return this.__glcanvas.width > 0 && this.__glcanvas.height
    };

    const calcRendererCoords = (event) => {
      const rect = this.__glcanvas.getBoundingClientRect();
      // Disabling devicePixelRatio for now. See: __onResize
      const dpr = 1.0;//window.devicePixelRatio
      // Note: the rendererX/Y values are relative to the viewport,
      // but are available outside the viewport. So when a mouse
      // drag occurs, and drags outside the viewport, these values
      // provide consistent coords.
      // offsetX/Y are only valid inside the viewport and so cause
      // jumps when the mouse leaves the viewport.
      event.rendererX = (event.clientX - rect.left) * dpr;
      event.rendererY = (event.clientY - rect.top) * dpr;
    };

    this.__glcanvas.addEventListener('mouseenter', event => {
      event.stopPropagation();
      event.undoRedoManager = this.undoRedoManager;
      if (!mouseIsDown) {
        activeGLRenderer = this;
        calcRendererCoords(event);
        // TODO: Check mouse pos.
        activeGLRenderer.activateViewportAtPos(event.rendererX, event.rendererY);
        mouseLeft = false;
      }
    });
    this.__glcanvas.addEventListener('mouseleave', event => {
      if (activeGLRenderer != this || !isValidCanvas()) return
      event.stopPropagation();
      event.undoRedoManager = this.undoRedoManager;
      if (!mouseIsDown) {
        const vp = activeGLRenderer.getActiveViewport();
        if (vp) {
          vp.onMouseLeave(event);
          event.preventDefault();
        }
        activeGLRenderer = undefined;
      } else {
        mouseLeft = true;
      }
    });
    this.__glcanvas.addEventListener('mousedown', event => {
      event.stopPropagation();
      event.undoRedoManager = this.undoRedoManager;
      calcRendererCoords(event);
      mouseIsDown = true;
      activeGLRenderer = this;
      activeGLRenderer.activateViewportAtPos(event.rendererX, event.rendererY);
      const vp = activeGLRenderer.getActiveViewport();
      if (vp) {
        vp.onMouseDown(event);
      }
      mouseLeft = false;
      return false
    });
    document.addEventListener('mouseup', event => {
      if (activeGLRenderer != this || !isValidCanvas()) return
      event.stopPropagation();
      event.undoRedoManager = this.undoRedoManager;
      // if(mouseIsDown && mouseMoveDist < 0.01)
      //     mouseClick(event);
      calcRendererCoords(event);
      mouseIsDown = false;
      const vp = activeGLRenderer.getActiveViewport();
      if (vp) {
        vp.onMouseUp(event);
      }
      if (mouseLeft) {
        const vp = activeGLRenderer.getActiveViewport();
        if (vp) {
          vp.onMouseLeave(event);
          event.preventDefault();
        }
        activeGLRenderer = undefined;
      }
      return false
    });

    // document.addEventListener('dblclick', (event)=>{
    //     event.preventDefault();
    //     event.stopPropagation();
    // });
    // document.addEventListener('click', (event)=>{
    //     event.preventDefault();
    //     event.stopPropagation();
    // });

    document.addEventListener('mousemove', event => {
      if (activeGLRenderer != this || !isValidCanvas()) return
      event.preventDefault();
      event.stopPropagation();
      event.undoRedoManager = this.undoRedoManager;
      calcRendererCoords(event);
      if (!mouseIsDown)
        activeGLRenderer.activateViewportAtPos(event.rendererX, event.rendererY);

      const vp = activeGLRenderer.getActiveViewport();
      if (vp) {
        vp.onMouseMove(event);
      }
      return false
    });

    const onWheel = event => {
      if (activeGLRenderer != this || !isValidCanvas()) return
      if (activeGLRenderer) {
        event.stopPropagation();
        event.undoRedoManager = this.undoRedoManager;
        this.onWheel(event);
        event.preventDefault();
      }
      return false
    };
    if (window.addEventListener)
      /** DOMMouseScroll is for mozilla. */
      window.addEventListener('wheel', onWheel, { passive: false });
    else {
      /** IE/Opera. */
      window.onmousewheel = document.onmousewheel = onWheel;
    }

    window.oncontextmenu = function() {
      return false
    };

    document.addEventListener('keypress', event => {
      if (activeGLRenderer != this || !isValidCanvas()) return
      const key = String.fromCharCode(event.keyCode).toLowerCase();
      const vp = activeGLRenderer.getActiveViewport();
      if (vp) {
        vp.onKeyPressed(key, event);
      }
    });

    document.addEventListener('keydown', event => {
      if (activeGLRenderer != this || !isValidCanvas()) return
      const key = String.fromCharCode(event.keyCode).toLowerCase();
      const vp = activeGLRenderer.getActiveViewport();
      if (vp) {
        vp.onKeyDown(key, event);
      }
    });

    document.addEventListener('keyup', event => {
      if (activeGLRenderer != this || !isValidCanvas()) return
      const key = String.fromCharCode(event.keyCode).toLowerCase();
      const vp = activeGLRenderer.getActiveViewport();
      if (vp) {
        vp.onKeyUp(key, event);
      }
    });

    this.__glcanvas.addEventListener(
      'touchstart',
      event => {
        event.stopPropagation();
        event.undoRedoManager = this.undoRedoManager;
        for (let i = 0; i < event.touches.length; i++) {
          calcRendererCoords(event.touches[i]);
        }
        this.getViewport().onTouchStart(event);
      },
      false
    );

    this.__glcanvas.addEventListener(
      'touchmove',
      event => {
        event.stopPropagation();
        event.undoRedoManager = this.undoRedoManager;
        for (let i = 0; i < event.touches.length; i++) {
          calcRendererCoords(event.touches[i]);
        }
        this.getViewport().onTouchMove(event);
      },
      false
    );

    this.__glcanvas.addEventListener(
      'touchend',
      event => {
        event.stopPropagation();
        event.undoRedoManager = this.undoRedoManager;
        for (let i = 0; i < event.touches.length; i++) {
          calcRendererCoords(event.touches[i]);
        }
        this.getViewport().onTouchEnd(event);
      },
      false
    );

    this.__glcanvas.addEventListener(
      'touchcancel',
      event => {
        event.stopPropagation();
        event.undoRedoManager = this.undoRedoManager;
        this.getViewport().onTouchCancel(event);
      },
      false
    );
  }

  /**
   * The setUndoRedoManager method.
   * @param {object} undoRedoManager - The undoRedoManager state.
   */
  setUndoRedoManager(undoRedoManager) {
    this.undoRedoManager = undoRedoManager;
  }

  /**
   * The getGLCanvas method.
   * @return {any} - The return value.
   */
  getGLCanvas() {
    return this.__glcanvas
  }

  /**
   * The getScreenQuad method.
   * @return {any} - The return value.
   */
  getScreenQuad() {
    return this.__screenQuad
  }

  /**
   * Causes an event to occur when the mouse wheel is rolled up or down over an element.
   * @param {any} event - The event that occurs.
   */
  onWheel(event) {
    this.__viewports[0].onWheel(event);
  }

  /**
   * The frameAll method.
   * @param {number} viewportIndex - The viewportIndex value.
   */
  frameAll(viewportIndex = 0) {
    this.__viewports[viewportIndex].frameView([this.__scene.getRoot()]);
  }

  // ///////////////////////
  // Render Items Setup

  /**
   * The getOrCreateShader method.
   * @param {string} shaderName - The shader name.
   * @return {any} - The return value.
   */
  getOrCreateShader(shaderName) {
    let glshader = this.__shaders[shaderName];
    if (!glshader) {
      glshader = sgFactory.constructClass(shaderName, this.__gl);
      if (!glshader)
        console.error('Shader not registered with the SGFactory:', shaderName);
      this.__shaders[shaderName] = glshader;
    }
    return glshader
  }

  /**
   * The addPass method.
   * @param {any} pass - The pass value.
   * @param {number} passtype - The passtype value.
   * @param {boolean} updateIndices - The updateIndices value.
   * @return {any} - The return value.
   */
  addPass(pass, passtype = 0, updateIndices = true) {
    if (!this.__passes[passtype]) this.__passes[passtype] = [];

    let index = 0;
    for (const key in this.__passes) {
      if (key == passtype) break
      index += this.__passes[key].length;
    }
    index += this.__passes[passtype].length;

    pass.updated.connect(this.requestRedraw.bind(this));
    pass.init(this, index);
    this.__passes[passtype].push(pass);

    if (updateIndices) {
      // Now update all the  subsequent pass indices because the
      // indices after will have changed.
      let offset = 0;
      for (const key in this.__passes) {
        const passSet = this.__passes[key];
        passSet.forEach((pass, index) => {
          pass.setPassIndex(offset + index);
        });
        offset += passSet.length;
      }
    }

    this.requestRedraw();
    return index
  }

  /**
   * The registerPass method.
   * @param {any} itemAddedFn - The itemAddedFn value.
   * @param {any} itemRemovedFn - The itemRemovedFn value.
   */
  registerPass(itemAddedFn, itemRemovedFn) {
    // insert at the beginning so it is called first.
    this.__passCallbacks.splice(0, 0, {
      itemAddedFn,
      itemRemovedFn,
    });
  }

  /**
   * The getPass method.
   * @param {number} index - The index value.
   * @return {any} - The return value.
   */
  getPass(index) {
    let offset = 0;
    for (const key in this.__passes) {
      const passSet = this.__passes[key];
      if (index - offset < passSet.length) return passSet[index - offset]
      offset += passSet.length;
    }
  }

  /**
   * The findPass method.
   * @param {any} constructor - The constructor value.
   * @return {any} - The return value.
   */
  findPass(constructor) {
    for (const key in this.__passes) {
      const passSet = this.__passes[key];
      for (const pass of passSet) {
        if (pass.constructor == constructor) return pass
      }
    }
  }

  /**
   * The getGizmoPass method.
   * @return {any} - The return value.
   */
  getGizmoPass() {
    return this.__gizmoPass
  }

  // ///////////////////////
  // VR Setup

  /**
   * The supportsVR method.
   * @return {any} - The return value.
   */
  supportsVR() {
    console.warn(
      'Deprecated Method. Please instead connect to the vrViewportSetup signal.'
    );
    return this.__supportXR && navigator.xr != null
  }

  /**
   * The __setupXRViewport method.
   * @return {any} - The return value.
   * @private
   */
  __setupXRViewport() {
    // Always get the last display. Additional displays are added at the end.(e.g. [Polyfill, HMD])
    const xrvp = new VRViewport(this);

    xrvp.presentingChanged.connect(state => {
      this.__xrViewportPresenting = state;
      if (state) {
        // Let the passes know that VR is starting.
        // They can do things like optimize shaders.
        for (const key in this.__passes) {
          const passSet = this.__passes[key];
          for (const pass of passSet) {
            pass.startPresenting();
          }
        }

        xrvp.viewChanged.connect(this.viewChanged.emit);
      } else {
        xrvp.viewChanged.disconnect(this.viewChanged.emit);

        for (const key in this.__passes) {
          const passSet = this.__passes[key];
          for (const pass of passSet) {
            pass.stopPresenting();
          }
        }

        this.viewChanged.emit({
          interfaceType: 'CameraAndPointer',
          viewXfo: this.getViewport()
            .getCamera()
            .getGlobalXfo(),
        });

        this.resizeFbos(this.__glcanvas.width, this.__glcanvas.height);
        this.requestRedraw();
      }
    });
    return xrvp
  }

  /**
   * The getVRViewport method.
   * @return {any} - The return value.
   */
  getVRViewport() {
    return this.__xrViewport
  }

  /**
   * The getXRViewport method.
   * @return {any} - The return value.
   */
  getXRViewport() {
    return this.__xrViewportPromise
  }

  /**
   * The isXRViewportPresenting method.
   * @return {any} - The return value.
   */
  isXRViewportPresenting() {
    return this.__xrViewportPresenting
  }

  // //////////////////////////
  // Rendering

  /**
   * The isContinuouslyDrawing method.
   * @return {any} - The return value.
   */
  isContinuouslyDrawing() {
    return this.__continuousDrawing
  }

  /**
   * The startContinuousDrawing method.
   */
  startContinuousDrawing() {
    if (this.isContinuouslyDrawing() || this.__xrViewportPresenting) return

    const onAnimationFrame = () => {
      if (this.__continuousDrawing && !this.__xrViewportPresenting)
        window.requestAnimationFrame(onAnimationFrame);
      for (const vp of this.__viewports) vp.draw();
    };

    this.__continuousDrawing = true;
    window.requestAnimationFrame(onAnimationFrame);
  }

  /**
   * The stopContinuousDrawing method.
   */
  stopContinuousDrawing() {
    this.__continuousDrawing = false;
  }

  /**
   * The toggleContinuousDrawing method.
   */
  toggleContinuousDrawing() {
    if (!this.__continuousDrawing) {
      this.startContinuousDrawing();
    } else {
      this.stopContinuousDrawing();
    }
  }

  /**
   * The drawItemChanged method.
   */
  drawItemChanged() {
    for (const vp of this.__viewports) vp.invalidateGeomDataBuffer();
    this.requestRedraw();
  }

  /**
   * Request a single redraw, usually in response to a signal/event.
   * @return {boolean} - The return value.
   */
  requestRedraw() {
    // If a redraw has already been requested, then simply return and wait.
    if (
      this.__redrawRequested ||
      this.__continuousDrawing ||
      this.__xrViewportPresenting
    )
      return false

    const onAnimationFrame = () => {
      this.__redrawRequested = false;
      for (const vp of this.__viewports) {
        vp.draw();
      }
    };
    window.requestAnimationFrame(onAnimationFrame);
    this.__redrawRequested = true;
    return true
  }

  /**
   * The bindGLBaseRenderer method.
   * @param {any} renderstate - The renderstate value.
   */
  bindGLBaseRenderer(renderstate) {
    renderstate.shaderopts = this.__preproc;

    const gl = this.__gl;
    if (!renderstate.viewports || renderstate.viewports.length == 1) {
      renderstate.bindRendererUnifs = unifs => {
        const { cameraMatrix, viewMatrix, projectionMatrix, eye } = unifs;
        if (cameraMatrix) {
          gl.uniformMatrix4fv(
            cameraMatrix.location,
            false,
            renderstate.cameraMatrix.asArray()
          );
        }

        const vp = renderstate.viewports[0];
        if (viewMatrix) {
          gl.uniformMatrix4fv(viewMatrix.location, false, vp.viewMatrix.asArray());
        }

        if (projectionMatrix) {
          gl.uniformMatrix4fv(
            projectionMatrix.location,
            false,
            vp.projectionMatrix.asArray()
          );
        }

        if (eye) {
          // Left or right eye, when rendering sterio VR.
          gl.uniform1i(eye.location, index);
        }
      };
      renderstate.bindViewports = (unifs, cb) => cb();
    } else {
      renderstate.bindRendererUnifs = unifs => {
        // Note: the camera matrix should be the head position instead
        // of the eye position. The inverse(viewMatrix) can be used
        // when we want the eye pos.
        const { cameraMatrix } = unifs;
        if (cameraMatrix) {
          gl.uniformMatrix4fv(
            cameraMatrix.location,
            false,
            renderstate.cameraMatrix.asArray()
          );
        }
      };

      renderstate.bindViewports = (unifs, cb) => {
        renderstate.viewports.forEach((vp, index) => {
          gl.viewport(...vp.region);

          const { viewMatrix, projectionMatrix, eye } = unifs;
          if (viewMatrix) {
            gl.uniformMatrix4fv(viewMatrix.location, false, vp.viewMatrix.asArray());
          }

          if (projectionMatrix) {
            gl.uniformMatrix4fv(
              projectionMatrix.location,
              false,
              vp.projectionMatrix.asArray()
            );
          }

          if (eye) {
            // Left or right eye, when rendering sterio VR.
            gl.uniform1i(eye.location, index);
          }
          cb();
        });
      };
    }
  }

  /**
   * The drawScene method.
   * @param {any} renderstate - The renderstate value.
   */
  drawScene(renderstate) {
    // Bind already called by GLRenderer.
    for (const key in this.__passes) {
      const passSet = this.__passes[key];
      for (const pass of passSet) {
        if (pass.enabled) pass.draw(renderstate);
      }
    }
  }

  /**
   * The drawHighlightedGeoms method.
   * @param {any} renderstate - The renderstate value.
   */
  drawHighlightedGeoms(renderstate) {
    this.bindGLBaseRenderer(renderstate);
    for (const key in this.__passes) {
      const passSet = this.__passes[key];
      for (const pass of passSet) {
        if (pass.enabled) pass.drawHighlightedGeoms(renderstate);
      }
    }
  }

  /**
   * The drawSceneGeomData method.
   * @param {any} renderstate - The renderstate value.
   */
  drawSceneGeomData(renderstate, mask=255) {
    this.bindGLBaseRenderer(renderstate);
    for (const key in this.__passes) {
      // Skip pass categories that do not match
      // the mask. E.g. we may not want to hit
      // "Overlay" geoms such as labels,
      // or we might be trying to move labels and don't
      // want to grab normal geoms.
      if ((Number.parseInt(key) & mask) == 0) continue
      const passSet = this.__passes[key];
      for (const pass of passSet) {
        if (pass.enabled) pass.drawGeomData(renderstate);
      }
    }
  }

  // ////////////////////////////////////////
  // Static Methods

  /**
   * The registerPass method.
   * @param {any} cls - The cls value.
   * @param {any} passtype - The passtype value.
   */
  static registerPass(cls, passtype) {
    if (!registeredPasses[passtype]) registeredPasses[passtype] = [];
    registeredPasses[passtype].push(cls);
  }
}

const PassType = {
  OPAQUE: 1 << 0,
  TRANSPARENT: 1 << 1,
  OVERLAY: 1 << 2,
};


/** This class abstracts the rendering of a collection of geometries to screen.
 * @extends ParameterOwner
 */
class GLPass extends ParameterOwner {
  /**
   * Create a GL pass.
   */
  constructor() {
    super();
    this.updated = new Signal();
    this.enabled = true;
    this.__passIndex = 0;

    const enabledParam = this.addParameter(
      new BooleanParameter('Enabled', true)
    );
    enabledParam.valueChanged.connect(
      mode => (this.enabled = enabledParam.getValue())
    );
  }

  /**
   * The __parameterValueChanged method.
   * @param {any} param - The param value.
   * @param {number} mode - The mode value.
   * @private
   */
  __parameterValueChanged(param, mode) {
    super.__parameterValueChanged(param, mode);
    if (this.__renderer) this.__renderer.requestRedraw();
  }

  /**
   * The init method.
   * @param {any} renderer - The renderer value.
   * @param {any} passIndex - The passIndex value.
   */
  init(renderer, passIndex) {
    if (passIndex == undefined) throw new Error('Missing constructor argument.') // Type checking. Seomthing that TypeScript will do for us.

    this.__gl = renderer.gl;
    this.__renderer = renderer;
    this.__passIndex = passIndex;
  }

  /**
   * The setPassIndex method.
   * @param {any} passIndex - The passIndex value.
   */
  setPassIndex(passIndex) {
    this.__passIndex = passIndex;
  }

  /**
   * The startPresenting method.
   */
  startPresenting() {}

  /**
   * The stopPresenting method.
   */
  stopPresenting() {}

  // ///////////////////////////////////
  // Rendering

  /**
   * The draw method.
   * @param {any} renderstate - The renderstate value.
   */
  draw(renderstate) {}

  /**
   * The drawHighlightedGeoms method.
   * @param {any} renderstate - The renderstate value.
   */
  drawHighlightedGeoms(renderstate) {}

  /**
   * The drawGeomData method.
   * @param {any} renderstate - The renderstate value.
   */
  drawGeomData(renderstate) {}

  /**
   * The getGeomItemAndDist method.
   * @param {any} geomData - The geomData value.
   */
  getGeomItemAndDist(geomData) {}
}

class OutlinesShader extends GLShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'OutlinesShader.vertexShader',
      `
precision highp float;

attribute vec3 positions;    //(location = 0)

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
    v_texCoord = positions.xy+0.5;
    gl_Position = vec4(positions.xy*2.0, 0.0, 1.0);
}

`
    );
    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'OutlinesShader.fragmentShader',
      `
precision highp float;

uniform sampler2D highlightDataTexture;
uniform vec2 highlightDataTextureSize;

varying vec2 v_texCoord;


bool isFilledPixel(vec4 p) {
    return p.r > 0.01 || p.g > 0.01 || p.b > 0.01;
}
void accumOutlinePixel(vec2 fragCoord, inout vec4 res) {
    vec3 p = texture2D(highlightDataTexture, fragCoord/highlightDataTextureSize).rgb;
    if(p.r > 0.01 || p.g > 0.01 || p.b > 0.01) {
        res.r += p.r;
        res.g += p.g;
        res.b += p.b;
        res.a += 1.0;
    }
}
vec4 getOutlinePixelColor(vec2 fragCoord) {
    vec4 M = texture2D(highlightDataTexture, fragCoord/highlightDataTextureSize);
    
    /// To display a fill instead of an outline.
    // return M;

    if( isFilledPixel(M) ) {
        // Note: the filled pixel has an alpha value
        // that determines how much fill is applied
        // The outline is a solid color. 
        return M;
    }
    // Search surrounding pixels for selected geoms.
    vec4 res;
    accumOutlinePixel(fragCoord+vec2( 1, 1), res); // NW
    accumOutlinePixel(fragCoord+vec2(-1, 1), res); // NE
    accumOutlinePixel(fragCoord+vec2( 1,-1), res); // SW
    accumOutlinePixel(fragCoord+vec2(-1,-1), res); // SE
    accumOutlinePixel(fragCoord+vec2( 0, 2), res); // NN
    accumOutlinePixel(fragCoord+vec2(-2, 0), res); // EE
    accumOutlinePixel(fragCoord+vec2( 2, 0), res); // WW
    accumOutlinePixel(fragCoord+vec2( 0,-2), res); // SS
    accumOutlinePixel(fragCoord+vec2( 1, 2), res); // NNW
    accumOutlinePixel(fragCoord+vec2(-1, 2), res); // NNE
    accumOutlinePixel(fragCoord+vec2(-2, 1), res); // EEN
    accumOutlinePixel(fragCoord+vec2(-2,-1), res); // EES
    accumOutlinePixel(fragCoord+vec2( 2, 1), res); // WWN
    accumOutlinePixel(fragCoord+vec2( 2,-1), res); // WWS
    accumOutlinePixel(fragCoord+vec2( 1,-2), res); // SSW
    accumOutlinePixel(fragCoord+vec2(-1,-2), res); // SSE

    if(isFilledPixel(res))
        return vec4(res.rgb / res.a, 1.0);
    else
        return vec4(0.0, 0.0, 0.0, 0.0);
}


#ifdef ENABLE_ES3
out vec4 fragColor;
#endif

void main(void) {

    // fragColor = texture2D(highlightDataTexture, v_texCoord);;
    //can also use gl_FragCoord.xy
    mediump vec2 fragCoord = v_texCoord * highlightDataTextureSize; 
    /////////////////
    // Selection Outlines
    vec4 outlineColor = getOutlinePixelColor(fragCoord);
    if(outlineColor.a > 0.0001){
#ifndef ENABLE_ES3
        gl_FragColor = outlineColor;
#else
        fragColor = outlineColor;
#endif
    }
    else {
        discard;
    }
}

`
    );
  }
}

const ALL_PASSES = PassType.OPAQUE | PassType.TRANSPARENT | PassType.OVERLAY;

/** Class representing a GL renderer.
 * @extends GLBaseRenderer
 */
class GLRenderer extends GLBaseRenderer {
  /**
   * Create a GL renderer.
   * @param {any} canvasDiv - The canvasDiv value.
   * @param {any} options - The options value.
   */
  constructor(canvasDiv, options = {}) {
    super(canvasDiv, options, {
      antialias: true,
      depth: true,
    });

    // ///////////////////////
    // Renderer Setup
    this.__exposure = 1.0;
    this.__tonemap = true;
    this.__gamma = 2.2;

    this.__glEnvMap = undefined;
    this.__glBackgroundMap = undefined;
    this.envMapAssigned = new Signal(true);

    this.__glLightmaps = {};
    this.__displayEnvironment = true;
    this.__debugMode = 0;
    this.__debugLightmaps = false;
    this._planeDist = 0.0;
    this.__cutPlaneNormal = new Vec3$1(1, 0, 0);

    const gl = this.__gl;

    this.__debugTextures = [undefined];

    this.addShaderPreprocessorDirective('ENABLE_INLINE_GAMMACORRECTION');

    if (!options.disableLightmaps)
      this.addShaderPreprocessorDirective('ENABLE_LIGHTMAPS');
    if (!options.disableTextures)
      this.addShaderPreprocessorDirective('ENABLE_TEXTURES');

    if (!SystemDesc.isMobileDevice) {
      if (!options.disableSpecular)
        this.addShaderPreprocessorDirective('ENABLE_SPECULAR');
      // this.addShaderPreprocessorDirective('ENABLE_DEBUGGING_LIGHTMAPS');
    }

    this.__outlineShader = new OutlinesShader(gl);
    this.quad = new GLMesh(gl, new Plane$1(1, 1));

    // this.__glshaderScreenPostProcess = new PostProcessing(gl);

    this.createSelectedGeomsFbo();
    this.createRayCastRenderTarget();
  }

  /**
   * The __bindEnvMap method.
   * @param {any} env - The env value.
   * @private
   */
  __bindEnvMap(env) {
    if (env instanceof EnvMap) {
      this.__glEnvMap = env.getMetadata('gltexture');
      if (!this.__glEnvMap) {
        if (env.type === 'FLOAT') {
          this.addShaderPreprocessorDirective('ENABLE_SPECULAR');
          this.__glEnvMap = new GLEnvMap(this, env, this.__preproc);
        } else if (env.isStreamAtlas()) {
          this.__glEnvMap = new GLImageStream(this.__gl, env);
        } else {
          this.__glEnvMap = new GLTexture2D(this.__gl, env);
        }
      }
    } else {
      // Note: The difference bween an EnvMap and a BackgroundMap, is that
      // An EnvMap must be HDR, and can be convolved for reflections.
      // A Background map can be simply an image.
      const backgroundMap = env;
      this.__glBackgroundMap = backgroundMap.getMetadata('gltexture');
      if (!this.__glBackgroundMap) {
        if (backgroundMap.type === 'FLOAT') {
          this.__glBackgroundMap = new GLHDRImage(gl, backgroundMap);
        } else {
          this.__glBackgroundMap = new GLTexture2D(gl, backgroundMap);
        }
      }
      this.__glBackgroundMap.loaded.connect(this.requestRedraw);
      this.__glBackgroundMap.updated.connect(this.requestRedraw);
      if (!this.__backgroundMapShader) {
        if (!gl.__quadVertexIdsBuffer) gl.setupInstancedQuad();
        switch (backgroundMap.getMapping()) {
          case 'octahedral':
            this.__backgroundMapShader = new OctahedralEnvMapShader(gl);
            break
          case 'latlong':
            this.__backgroundMapShader = new LatLongEnvMapShader(gl);
            break
          case 'steriolatlong':
            this.__backgroundMapShader = new SterioLatLongEnvMapShader(gl);
            break
          case 'dualfisheye':
            this.__backgroundMapShader = new DualFishEyeToLatLongBackgroundShader(
              gl
            );
            break
          case 'uv':
          default:
            this.__backgroundMapShader = new BackgroundImageShader(gl);
            break
        }
        const shaderComp = this.__backgroundMapShader.compileForTarget();
        this.__backgroundMapShaderBinding = generateShaderGeomBinding(
          gl,
          shaderComp.attrs,
          gl.__quadattrbuffers,
          gl.__quadIndexBuffer
        );
      }
      // console.warn('Unsupported EnvMap:' + env)
      return
    }
    this.__glEnvMap.loaded.connect(this.requestRedraw);
    this.__glEnvMap.updated.connect(this.requestRedraw);

    this.envMapAssigned.emit(this.__glEnvMap);
  }

  /**
   * The getGLEnvMap method.
   * @return {any} - The return value.
   */
  getGLEnvMap() {
    return this.__glEnvMap
  }

  /**
   * The getEnvMapTex method.
   * @return {any} - The return value.
   */
  getEnvMapTex() {
    console.warn('Deprecated Function');
    return this.__glEnvMap
  }

  /**
   * The setScene method.
   * @param {any} scene - The scene value.
   */
  setScene(scene) {
    const envMapParam = scene.settings.getParameter('EnvMap');
    if (envMapParam.getValue() != undefined) {
      this.__bindEnvMap(envMapParam.getValue());
    }
    envMapParam.valueChanged.connect(() => {
      this.__bindEnvMap(envMapParam.getValue());
    });
    const displayEnvMapParam = scene.settings.getParameter('Display EnvMap');
    this.__displayEnvironment = displayEnvMapParam.getValue();
    displayEnvMapParam.valueChanged.connect(() => {
      this.__displayEnvironment = displayEnvMapParam.getValue();
      this.requestRedraw();
    });

    super.setScene(scene);
  }

  /**
   * The addTreeItem method.
   * @param {any} treeItem - The treeItem param.
   */
  addTreeItem(treeItem) {
    super.addTreeItem(treeItem);

    // Note: we can have BaseItems in the tree now.
    if (treeItem instanceof VLAAsset) {
      const addLightmap = (name, lightmap) => {
        let gllightmap = lightmap.image.getMetadata('gltexture');
        if (!gllightmap) {
          gllightmap = new GLHDRImage(this.__gl, lightmap.image);
        }
        gllightmap.updated.connect(data => {
          this.requestRedraw();
        });
        this.__glLightmaps[name] = {
          atlasSize: lightmap.atlasSize,
          glimage: gllightmap,
        };
      };
      const vlaAsset = treeItem;
      vlaAsset.loaded.connect(() => {
        if (this.__glEnvMap && vlaAsset.getLightmap()) {
          addLightmap(vlaAsset.getName(), vlaAsset.getLightmap());
        }
      });
    }
  }

  /**
   * The removeTreeItem method.
   * @param {any} treeItem - The treeItem param.
   */
  removeTreeItem(treeItem) {
    super.removeTreeItem(treeItem);

    // TODO: Remove the lightmap.

  }
  /**
   * The addViewport method.
   * @param {string} name - The name value.
   * @return {any} - The return value.
   */
  addViewport(name) {
    const vp = super.addViewport(name);
    // vp.createOffscreenFbo();
    return vp
  }

  /**
   * The onKeyPressed method.
   * @param {any} key - The key value.
   * @param {any} event - The event value.
   */
  onKeyPressed(key, event) {
    switch (key) {
      case 'b':
        this.__displayEnvironment = !this.__displayEnvironment;
        this.requestRedraw();
        break
      default:
        super.onKeyPressed(key, event);
    }
  }

  // //////////////////////////
  // GUI

  /**
   * Getter for exposure.
   */
  get exposure() {
    return this.__exposure
  }

  /**
   * Setter for exposure.
   * @param {number} val - The val value.
   */
  set exposure(val) {
    this.__exposure = val;
    this.requestRedraw();
  }

  /**
   * Getter for gamma.
   */
  get gamma() {
    return this.__gamma
  }

  /**
   * Setter for gamma.
   * @param {number} val - The val value.
   */
  set gamma(val) {
    this.__gamma = val;
    this.requestRedraw();
  }

  /**
   * Getter for displayEnvironment.
   */
  get displayEnvironment() {
    return this.__displayEnvironment
  }

  /**
   * Setter for displayEnvironment.
   * @param {number} val - The val value.
   */
  set displayEnvironment(val) {
    this.__displayEnvironment = val;
    this.requestRedraw();
  }

  /**
   * Getter for planeDist.
   */
  get planeDist() {
    return this._planeDist
  }

  /**
   * Setter for planeDist.
   * @param {number} val - The val value.
   */
  set planeDist(val) {
    this._planeDist = val;
    this.requestRedraw();
  }

  /**
   * Getter for cutPlaneNormal.
   */
  get cutPlaneNormal() {
    return this.__cutPlaneNormal
  }

  /**
   * Setter for cutPlaneNormal.
   * @param {number} val - The val value.
   */
  set cutPlaneNormal(val) {
    this.__cutPlaneNormal = val;
    this.requestRedraw();
  }

  // //////////////////////////
  // Fbos

  /**
   * The resizeFbos method.
   * @param {any} width - The width value.
   * @param {any} height - The height value.
   */
  resizeFbos(width, height) {
    super.resizeFbos();
    if (this.__fbo) {
      this.__fbo.colorTexture.resize(width, height);
    }
    if (this.__highlightedGeomsBufferFbo) {
      this.__highlightedGeomsBuffer.resize(width, height);
    }
  }

  // //////////////////////////
  // SelectedGeomsBuffer

  /**
   * The createSelectedGeomsFbo method.
   */
  createSelectedGeomsFbo() {
    const gl = this.__gl;
    this.__highlightedGeomsBuffer = new GLTexture2D(gl, {
      type: 'UNSIGNED_BYTE',
      format: 'RGBA',
      filter: 'NEAREST',
      width: this.__glcanvas.width <= 1 ? 1 : this.__glcanvas.width,
      height: this.__glcanvas.height <= 1 ? 1 : this.__glcanvas.height,
    });
    this.__highlightedGeomsBufferFbo = new GLFbo(
      gl,
      this.__highlightedGeomsBuffer,
      true
    );
    this.__highlightedGeomsBufferFbo.setClearColor([0, 0, 0, 0]);
  }
  
  /**
   * The getFbo method.
   * @return {any} - The return value.
   */
  getFbo() {
    return this.__fbo
  }

  /**
   * The createOffscreenFbo method.
   * @param {any} format - The format value.
   */
  createOffscreenFbo(format = 'RGB') {
    const targetWidth = this.__glcanvas.width;
    const targetHeight = this.__glcanvas.height;

    const gl = this.__gl;
    this.__fwBuffer = new GLTexture2D(gl, {
      type: 'FLOAT',
      format,
      filter: 'NEAREST',
      width: targetWidth,
      height: targetHeight,
    });
    this.__fbo = new GLFbo(gl, this.__fwBuffer, true);
    this.__fbo.setClearColor(this.__backgroundColor.asArray());
  }

  // //////////////////////////
  // Raycasting

  /**
   * The createRayCastRenderTarget method.
   */
  createRayCastRenderTarget() {
    // The geom data buffer is a 3x3 data buffer.
    // See getGeomItemAtTip below
    const gl = this.__gl;
    this.__rayCastRenderTarget = new GLRenderTarget(gl, {
      type: 'FLOAT',
      format: 'RGBA',
      filter: 'NEAREST',
      width: 3,
      height: 3,
      numColorChannels: 1
    });
    this.__rayCastRenderTargetProjMatrix = new Mat4();
    this.rayCastDist = 0;
    this.rayCastArea = 0;
  }

  
  /**
   * The raycast method.
   * @return {any} - The return value.
   */
  raycastWithRay(ray, dist, area = 0.01, mask = ALL_PASSES) {
    const xfo = new Xfo();
    xfo.setLookAt(ray.start, ray.start.add(ray.dir));
    return this.raycast(xfo, ray, dist, area, mask)
  }
  
  raycastWithXfo(xfo, dist, area = 0.01, mask = ALL_PASSES) {
    const ray = new Ray(xfo.tr, xfo.ori.getZaxis().negate());
    return this.raycast(xfo, ray, dist, area, mask)
  }

  /**
   * The raycast method.
   * @return {any} - The return value.
   */
  raycast(xfo, ray, dist, area = 0.01, mask = ALL_PASSES) {
    if (this.rayCastDist != dist || this.rayCastArea != area) {
      this.__rayCastRenderTargetProjMatrix.setOrthographicMatrix(
        area * -0.5,
        area * 0.5,
        area * -0.5,
        area * 0.5,
        0.0,
        dist
      );
      this.rayCastDist = dist;
      this.rayCastArea = area;
    }

    const gl = this.__gl;

    const region = [0, 0, 3, 3];
    const renderstate = {
      cameraMatrix: xfo.toMat4(),
      viewports: [
        {
          region,
          viewMatrix: xfo.inverse().toMat4(),
          projectionMatrix: this.__rayCastRenderTargetProjMatrix,
          isOrthographic: true,
        },
      ],
    };

    this.__rayCastRenderTarget.bindForWriting(renderstate, true);
    gl.enable(gl.CULL_FACE);
    gl.enable(gl.DEPTH_TEST);
    gl.depthFunc(gl.LEQUAL);
    gl.depthMask(true);

    this.drawSceneGeomData(renderstate, mask);
    gl.finish();
    this.__rayCastRenderTarget.unbindForWriting();
    this.__rayCastRenderTarget.bindForReading();

    const geomDatas = new Float32Array(4 * 9);
    gl.readPixels(0, 0, 3, 3, gl.RGBA, gl.FLOAT, geomDatas);
    this.__rayCastRenderTarget.unbindForReading();

    // ////////////////////////////////////
    // We have a 3x3 grid of pixels, and we
    // scan them to find if any geom was in the
    // frustum.
    // Starting with the center pixel (4),
    // then left and right (3, 5)
    // Then top bottom (1, 7)
    const checkPixel = id => geomDatas[id * 4 + 3] != 0;
    const dataPixels = [4, 3, 5, 1, 7];
    let geomData;
    for (const pixelID of dataPixels) {
      if (checkPixel(pixelID)) {
        geomData = geomDatas.subarray(pixelID * 4, pixelID * 4 + 4);
        break
      }
    }
    if (!geomData) return

    // Mask the pass id to be only the first 6 bits of the integer.
    const passId = Math.round(geomData[0]) & (64 - 1);
    const geomItemAndDist = this.getPass(passId).getGeomItemAndDist(geomData);

    if (geomItemAndDist) {
      const intersectionPos = ray.start.add(ray.dir.scale(geomItemAndDist.dist));

      return {
        ray,
        intersectionPos,
        geomItem: geomItemAndDist.geomItem,
        dist: geomItemAndDist.dist,
        geomData,
      }
    }
  }

  // //////////////////////////
  // Rendering

  /**
   * The drawBackground method.
   * @param {any} renderstate - The renderstate value.
   */
  drawBackground(renderstate) {
    if (this.__glBackgroundMap) {
      if (!this.__glBackgroundMap.isLoaded()) return
      const gl = this.__gl;
      gl.depthMask(false);
      this.__backgroundMapShader.bind(renderstate);
      const unifs = renderstate.unifs;
      this.__glBackgroundMap.bindToUniform(renderstate, unifs.backgroundImage);
      this.__backgroundMapShaderBinding.bind(renderstate);
      gl.drawQuad();
    } else if (
      this.__glEnvMap &&
      this.__glEnvMap.draw /* Note: video env maps cannot be drawn directly.*/
    ) {
      this.__glEnvMap.draw(renderstate);
    }
  }

  /**
   * The bindGLRenderer method.
   * @param {any} renderstate - The renderstate value.
   */
  bindGLRenderer(renderstate) {
    super.bindGLBaseRenderer(renderstate);

    renderstate.envMap = this.__glEnvMap;
    renderstate.exposure = this.__exposure;
    renderstate.gamma = this.__gamma;
    renderstate.lightmaps = this.__glLightmaps;
    renderstate.boundLightmap = undefined;
    // renderstate.debugLightmaps = this.__debugLightmaps;
    // renderstate.planeDist = this._planeDist;
    // renderstate.planeNormal = this.__cutPlaneNormal;

    const gl = this.__gl;
    const bindGLBaseRendererUnifs = renderstate.bindRendererUnifs;
    renderstate.bindRendererUnifs = unifs => {
      bindGLBaseRendererUnifs(unifs);

      if (this.__glEnvMap) {
        const envMapPyramid = unifs.envMapPyramid;
        if (envMapPyramid && this.__glEnvMap.bindProbeToUniform) {
          this.__glEnvMap.bindProbeToUniform(renderstate, envMapPyramid);
        } else {
          // Bind the env map src 2d image to the env map param
          const { envMapTex, envMapTexType } = unifs;
          if (envMapTex) {
            this.__glEnvMap.bindToUniform(renderstate, envMapTex, {
              textureTypeUnif: envMapTexType,
            });
          }
        }
      }
      {
        const unif = unifs.exposure;
        if (unif) {
          gl.uniform1f(unif.location, this.__exposure);
        }
      }
      {
        const unif = unifs.gamma;
        if (unif) {
          gl.uniform1f(unif.location, this.__gamma);
        }
      }
    };
  }

  /**
   * The drawScene method.
   * @param {any} renderstate - The renderstate value.
   */
  drawScene(renderstate) {
    this.bindGLRenderer(renderstate);

    if (this.__displayEnvironment) this.drawBackground(renderstate);

    super.drawScene(renderstate);
    // console.log("Draw Calls:" + renderstate['drawCalls']);

    if (this.__highlightedGeomsBufferFbo) {
      const gl = this.__gl;

      this.__highlightedGeomsBufferFbo.bindForWriting(renderstate);
      this.__highlightedGeomsBufferFbo.clear();

      // We need to explicitly clear the depth buffer,
      // It seems that sometimes the function above does
      // not do the trick.
      // gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

      gl.disable(gl.BLEND);
      gl.enable(gl.DEPTH_TEST);
      gl.depthFunc(gl.LESS);
      gl.depthMask(true);

      this.drawHighlightedGeoms(renderstate);

      // Unbind and restore the bound fbo
      this.__highlightedGeomsBufferFbo.unbindForWriting(renderstate);

      // Now render the outlines to the entire screen.
      gl.viewport(...renderstate.region);

      // Turn this on to debug the hilight data buffer.
      // {
      //   gl.screenQuad.bindShader(renderstate);
      //   gl.screenQuad.draw(renderstate, this.__highlightedGeomsBuffer);
      // }

      this.__outlineShader.bind(renderstate);
      gl.enable(gl.BLEND);
      gl.blendEquation(gl.FUNC_ADD);
      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA); // For add

      const unifs = renderstate.unifs;
      this.__highlightedGeomsBuffer.bindToUniform(
        renderstate,
        unifs.highlightDataTexture
      );
      gl.uniform2f(
        unifs.highlightDataTextureSize.location,
        renderstate.region[2],
        renderstate.region[3]
      );
      this.quad.bindAndDraw(renderstate);

      gl.disable(gl.BLEND);
    }

    // /////////////////////////////////////
    // // Post processing.
    // if (this.__fbo) {
    //     const gl = this.__gl;

    //     // Bind the default framebuffer
    //     gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    //     gl.viewport(...this.region);
    //     // gl.disable(gl.SCISSOR_TEST);

    //     // this.__glshaderScreenPostProcess.bind(renderstate);

    //     // const unifs = renderstate.unifs;
    //     // if ('antialiase' in unifs)
    //     //     gl.uniform1i(unifs.antialiase.location, this.__antialiase ? 1 : 0);
    //     // if ('textureSize' in unifs)
    //     //     gl.uniform2fv(unifs.textureSize.location, fbo.size);
    //     // if ('gamma' in unifs)
    //     //     gl.uniform1f(unifs.gamma.location, this.__gamma);
    //     // if ('exposure' in unifs)
    //     //     gl.uniform1f(unifs.exposure.location, this.__exposure);
    //     // if ('tonemap' in unifs)
    //     //     gl.uniform1i(unifs.tonemap.location, this.__tonemap ? 1 : 0);

    //     gl.screenQuad.bindShader(renderstate);
    //     gl.screenQuad.draw(renderstate, this.__fbo.colorTexture);

    //     // Note: if the texture is left bound, and no textures are bound to slot 0 befor rendering
    //     // more goem int he next frame then the fbo color tex is being read from and written to
    //     // at the same time. (baaaad).
    //     // Note: any textures bound at all avoids this issue, and it only comes up when we have no env
    //     // map, background or textures params in the scene. When it does happen it can be a bitch to
    //     // track down.
    //     gl.bindTexture(gl.TEXTURE_2D, null);
    // }

    this.redrawOccured.emit();
  }
}

shaderLibrary.setShaderModule(
  'drawItemId.glsl',
  `

#ifdef ENABLE_FLOAT_TEXTURES

attribute float instancedIds;    // instanced attribute..
uniform int instancedDraw;
uniform int transformIndex;

int getDrawItemId() {
    if(instancedDraw == 0){
       return transformIndex;
    }
    else{
       return int(instancedIds);
    }
}


#else

uniform int transformIndex;

int getDrawItemId() {
    return transformIndex;
}

#endif

`
);


shaderLibrary.setShaderModule(
  'drawItemTexture.glsl',
  `

#ifdef ENABLE_FLOAT_TEXTURES

uniform sampler2D instancesTexture;
uniform highp int instancesTextureSize;

<%include file="GLSLUtils.glsl"/>

const int pixelsPerItem = 6;

vec4 getInstanceData(int id) {
    return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 0);
}

#else

uniform vec4 drawItemData;

vec4 getInstanceData(int id) {
    return drawItemData;
}

#endif


`
);

shaderLibrary.setShaderModule(
  'modelMatrix.glsl',
  `

#ifdef ENABLE_FLOAT_TEXTURES

mat4 getMatrix(sampler2D texture, int textureSize, int index) {
    // Unpack 3 x 4 matix columns into a 4 x 4 matrix.
    vec4 col0 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 1);
    vec4 col1 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 2);
    vec4 col2 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 3);
    mat4 result = mat4(col0, col1, col2, vec4(0.0, 0.0, 0.0, 1.0));
    return transpose(result);
    // return mat4(1.0);
}

mat4 getModelMatrix(int id) {
    return getMatrix(instancesTexture, instancesTextureSize, id);
}

#else

uniform mat4 modelMatrix;

mat4 getModelMatrix(int id) {
    return modelMatrix;
}

#endif


`
);

shaderLibrary.setShaderModule(
  'materialparams.glsl',
  `

////////////////////////
// Material Param Helpers.

vec4 getColorParamValue(vec4 value, sampler2D tex, int texType, vec2 texCoord) {
    if(texType == 0){
        return toLinear(value);
    }
    else if(texType == 1 || texType == 2){
        // TODO: Use SRGB textures.
        return toLinear(texture2D(tex, texCoord));
    }
    else if(texType == 3){
        // Float HDR Texture
        return texture2D(tex, texCoord);
    }
    else
        return value;
}



float luminanceFromRGB(vec3 rgb) {
    return 0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b;
}

float getLuminanceParamValue(float value, sampler2D tex, int texType, vec2 texCoord) {
    if(texType == 0)
        return value;
    else
        return luminanceFromRGB(texture2D(tex, texCoord).rgb);
}
`
);

shaderLibrary.setShaderModule(
  'debugColors.glsl',
  `

float modI(float a, float b) {
    float m=a-floor((a+0.5)/b)*b;
    return floor(m+0.5);
}

vec3 getDebugColor(float id) {
#ifdef GLSL_ES3
    const vec3 clusterColors[4] = vec3[4]( vec3(0.0, 0.25, 0.25), vec3(0.0, 0.85, 0.25), vec3(0.0, 0.25, 0.85), vec3(0.0, 0.85, 0.85) );
#else
    vec3 clusterColors[8];
    clusterColors[0] = vec3(0.0, 0.15, 0.15);
    clusterColors[1] = vec3(0.0, 0.85, 0.15);
    clusterColors[2] = vec3(0.0, 0.15, 0.85);
    clusterColors[3] = vec3(0.0, 0.85, 0.85);
    clusterColors[4] = vec3(0.75, 0.15, 0.15);
    clusterColors[5] = vec3(0.75, 0.85, 0.15);
    clusterColors[6] = vec3(0.75, 0.15, 0.85);
    clusterColors[7] = vec3(0.75, 0.85, 0.85);
#endif

    if(modI(id, 8.0) == 0.0)
        return clusterColors[0];
    else if(modI(id, 8.0) == 1.0)
        return clusterColors[1];
    else if(modI(id, 8.0) == 2.0)
        return clusterColors[2];
    else if(modI(id, 8.0) == 3.0)
        return clusterColors[3];
    else if(modI(id, 8.0) == 4.0)
        return clusterColors[4];
    else if(modI(id, 8.0) == 5.0)
        return clusterColors[5];
    else if(modI(id, 8.0) == 6.0)
        return clusterColors[6];
    else if(modI(id, 8.0) == 7.0)
        return clusterColors[7];

    return vec3(1,0,0);
}


`
);

class BillboardShader extends GLShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'BillboardShader.vertexShader',
      `
precision highp float;


<%include file="utils/quadVertexFromID.glsl"/>

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 cameraMatrix;

#ifdef ENABLE_FLOAT_TEXTURES

instancedattribute float instanceIds;

<%include file="GLSLUtils.glsl"/>
<%include file="stack-gl/transpose.glsl"/>
<%include file="utils/imageAtlas.glsl"/>

uniform sampler2D atlasBillboards_layout;
uniform vec4 atlasBillboards_desc;

uniform sampler2D instancesTexture;
uniform int instancesTextureSize;


const int cols_per_instance = 5;

mat4 getMatrix(sampler2D texture, int textureSize, int index) {
  // Unpack 3 x 4 matix columns into a 4 x 4 matrix.
  vec4 col0 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 0);
  vec4 col1 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 1);
  vec4 col2 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 2);
  mat4 result = mat4(col0, col1, col2, vec4(0.0, 0.0, 0.0, 1.0));
  return transpose(result);
  // return mat4(1.0);
}

mat4 getModelMatrix(int id) {
  return getMatrix(instancesTexture, instancesTextureSize, id);
}
vec4 getInstanceData(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 3);
}
vec4 getTintColor(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 4);
}


#else

uniform vec4 atlasBillboards_desc;

uniform mat4 modelMatrix;
uniform vec4 billboardData;
uniform vec4 tintColor;
uniform vec4 layoutData;


#endif

mat4 calcLookAtMatrix(vec3 origin, vec3 target, float roll) {
  // vec3 rr = vec3(sin(roll), 0.0, cos(roll));
  vec3 rr = vec3(0.0, 0.0, 1.0);
  vec3 ww = normalize(target - origin);
  vec3 uu = normalize(cross(rr, ww));
  vec3 vv = normalize(cross(ww, uu));

  return mat4(vec4(uu, 0.0), vec4(vv, 0.0), vec4(ww, 0.0), vec4(origin, 1.0));
}

float map(float value, float inMin, float inMax, float outMin, float outMax) {
  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);
}

/* VS Outputs */
varying vec2 v_texCoord;
varying float v_alpha;
varying vec4 v_tint;

void main(void) {

#ifdef ENABLE_FLOAT_TEXTURES

  int instanceID = int(instanceIds);

  mat4 modelMatrix = getModelMatrix(instanceID);
  vec4 billboardData = getInstanceData(instanceID);
  vec4 layoutData = fetchTexel(atlasBillboards_layout, int(atlasBillboards_desc.z), int(billboardData.z));
  v_tint = getTintColor(instanceID);

#else

  v_tint = tintColor;

#endif

  vec2 quadVertex = getQuadVertexPositionFromID();


  v_texCoord = vec2(quadVertex.x, -quadVertex.y) + 0.5;
  v_alpha = billboardData.w;
  v_texCoord *= layoutData.zw;
  v_texCoord += layoutData.xy;

  float scl = billboardData.x;
  float width = layoutData.z * atlasBillboards_desc.x * scl;
  float height = layoutData.w * atlasBillboards_desc.y * scl;
  int flags = int(billboardData.y);
  bool alignedToCamera = flags > 0;
  if(alignedToCamera){
    vec3 cameraPos = vec3(cameraMatrix[3][0], cameraMatrix[3][1], cameraMatrix[3][2]);
    vec3 billboardPos = vec3(modelMatrix[3][0], modelMatrix[3][1], modelMatrix[3][2]);
    mat4 lookAt = calcLookAtMatrix(billboardPos, cameraPos, 0.0);
    mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * lookAt;
    gl_Position = modelViewProjectionMatrix * vec4(quadVertex.x * width, (quadVertex.y + 0.5) * height, 0.0, 1.0);
  }
  else{
    mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;
    gl_Position = modelViewProjectionMatrix * vec4(quadVertex.x * width, (quadVertex.y + 0.5) * height, 0.0, 1.0);
  }

  bool overlay = flags > 0;
  if(overlay){
    gl_Position.z -= 0.05;
  }
}
`
    );

    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'BillboardShader.fragmentShader',
      `
precision highp float;

<%include file="stack-gl/gamma.glsl"/>
<%include file="GLSLUtils.glsl"/>
<%include file="materialparams.glsl"/>
<%include file="utils/imageAtlas.glsl"/>

uniform sampler2D atlasBillboards;

/* VS Outputs */
varying vec2 v_texCoord;
varying float v_alpha;
varying vec4 v_tint;


#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif
void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  fragColor = texture2D(atlasBillboards, v_texCoord) * v_tint;
  fragColor.a *= v_alpha;

  // fragColor.r = 1.0;
  // fragColor.a = 1.0;
  
#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`
    );
  }
}

class DepthMapShader extends GLShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'DepthMapShader.vertexShader',
      `
precision highp float;

attribute vec3 positions;    //(location = 0)

uniform mat4 modelMatrix;
uniform mat4 lightViewMatrix;
uniform mat4 lightProjectionMatrix;

/* VS Outputs */
varying vec3 v_viewPos;

void main(void) {
  mat4 modelViewMatrix = lightViewMatrix * modelMatrix;
  v_viewPos = modelViewMatrix * vec4(positions, 1.0);
  gl_Position = lightProjectionMatrix * v_viewPos;
}

`
    );
    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'DepthMapShader.fragmentShader',
      `
#extension GL_OES_standard_derivatives : enable
precision highp float;

uniform float near;
uniform float far;

varying vec3 v_viewPos;

float linstep(float edge0, float edge1, float value){
  return clamp((value-edge0)/(edge1-edge0), 0.0, 1.0);
}

void main(void) {
  float depth = linstep(near, far, -v_viewPos.z);
  //gl_FragColor = vec4(depth, depth, depth,  1.0);

  float dx = dFdx(depth);
  float dy = dFdy(depth);
  gl_FragColor = vec4(depth, pow(depth, 2.0) + 0.25*(dx*dx + dy*dy), 0.0, 1.0);
}
`
    );
  }
}

class EnvProjectionShader extends GLShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'EnvProjectionShader.vertexShader',
      `
precision highp float;

attribute vec3 positions;    //(location = 0)

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform vec3 projectionCenter;

<%include file="stack-gl/inverse.glsl"/>
<%include file="stack-gl/transpose.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="modelMatrix.glsl"/>

/* VS Outputs */
varying vec3 v_worldDir;
 
void main()
{
  int drawItemId = getDrawItemId();
  vec4 pos = vec4(positions, 1.);
  mat4 modelMatrix = getModelMatrix(drawItemId);
  mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;

  gl_Position = modelViewProjectionMatrix * pos;

  vec4 worldPos = modelMatrix * pos;
  v_worldDir = worldPos.xyz - projectionCenter;
}

`
    );

    this.finalize();
  }

  static getParamDeclarations() {
    const paramDescs = super.getParamDeclarations();
    paramDescs.push({
      name: 'projectionCenter',
      defaultValue: new Vec3$1(0.0, 0.0, 1.7),
    });
    return paramDescs
  }
}

class OctahedralEnvProjectionShader extends EnvProjectionShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'OctahedralEnvProjectionShader.fragmentShader',
      `
precision highp float;

<%include file="math/constants.glsl"/>
<%include file="GLSLUtils.glsl"/>
<%include file="pragmatic-pbr/envmap-octahedral.glsl"/>
<%include file="stack-gl/gamma.glsl"/>
<%include file="materialparams.glsl"/>


uniform color envMap;
uniform sampler2D envMapTex;
uniform int envMapTexType;


uniform float exposure;

/* VS Outputs */
varying vec3 v_worldDir;

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif
void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  vec2 texCoord = dirToSphOctUv(normalize(v_worldDir));
  vec4 env = getColorParamValue(envMap, envMapTex, envMapTexType, texCoord);

  fragColor = vec4(env.rgb/env.a, 1.0);

#ifdef ENABLE_INLINE_GAMMACORRECTION
  fragColor.rgb = toGamma(fragColor.rgb * exposure);
#endif

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`
    );
    this.finalize();
  }
}

sgFactory.registerClass(
  'OctahedralEnvProjectionShader',
  OctahedralEnvProjectionShader
);

class LatLongEnvProjectionShader extends EnvProjectionShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'LatLongEnvProjectionShader.fragmentShader',
      `
precision highp float;

<%include file="math/constants.glsl"/>
<%include file="GLSLUtils.glsl"/>
<%include file="pragmatic-pbr/envmap-equirect.glsl"/>
<%include file="stack-gl/gamma.glsl"/>
<%include file="materialparams.glsl"/>

uniform color envMap;
uniform sampler2D envMapTex;
uniform int envMapTexType;

uniform float exposure;

/* VS Outputs */
varying vec3 v_worldDir;

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif
void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  vec2 texCoord = latLongUVsFromDir(normalize(v_worldDir));
  vec4 env = getColorParamValue(envMap, envMapTex, envMapTexType, texCoord);
  fragColor = vec4(env.rgb/env.a, 1.0);

#ifdef ENABLE_INLINE_GAMMACORRECTION
  fragColor.rgb = toGamma(fragColor.rgb * exposure);
#endif


#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`
    );
    this.finalize();
  }
}

sgFactory.registerClass(
  'LatLongEnvProjectionShader',
  LatLongEnvProjectionShader
);

class FatLinesShader extends GLShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'FatLinesShader.vertexShader',
      `
precision highp float;

instancedattribute vec2 segmentIndices;
attribute float vertexIDs;

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

<%include file="stack-gl/transpose.glsl"/>
<%include file="drawItemId.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="modelMatrix.glsl"/>

uniform sampler2D positionsTexture;
uniform int positionsTextureSize;

uniform float LineThickness;

/* VS Outputs */
varying vec3 v_viewPos;
varying vec3 v_viewNormal;
varying vec2 v_texCoord;

void main(void) {
  int drawItemId = getDrawItemId();
  int vertexID = int(vertexIDs);

  mat4 modelMatrix = getModelMatrix(drawItemId);
  mat4 modelViewMatrix = viewMatrix * modelMatrix;

  int seqentialIndex_0 = int(mod(segmentIndices.x, 2.));
  int seqentialIndex_1 = int(mod(segmentIndices.y, 2.));
  int index_0 = int(segmentIndices.x) / 2;
  int index_1 = int(segmentIndices.y) / 2;

  vec3 viewPos;
  vec4 data_0 = fetchTexel(positionsTexture, positionsTextureSize, index_0);
  vec4 data_1 = fetchTexel(positionsTexture, positionsTextureSize, index_1);

  vec4 pos_0 = modelViewMatrix * vec4(data_0.xyz, 1.0);
  vec4 pos_1 = modelViewMatrix * vec4(data_1.xyz, 1.0);
  // Note: multiply the per-vertex line thickness with the line thickness uniform value;
  float lineThickness_0 = LineThickness * data_0.w;
  float lineThickness_1 = LineThickness * data_1.w;

  if(vertexID < 2){
    viewPos = pos_0.xyz;
  }
  else{
    viewPos = pos_1.xyz;
  }
  if(pos_1 != pos_0){
    vec3 segmentDir = normalize(pos_1.xyz - pos_0.xyz);
    vec3 viewVector = normalize(viewPos);

    if(vertexID < 2){
      vec3 segmentStartDir = segmentDir;
      if(seqentialIndex_0 != 0){
        //if index_0 == 0, get the last index in the line as previous
        int index_prev = (index_0 > 0) ? (index_0-1) : (positionsTextureSize-1);
        vec4 data_prev = fetchTexel(positionsTexture, positionsTextureSize, index_prev);
        vec4 pos_prev = modelViewMatrix * vec4(data_prev.xyz, 1.0);
        segmentStartDir = normalize(segmentDir + normalize(pos_0.xyz - pos_prev.xyz));
      }
      vec3 startBiTangent = normalize(cross(segmentStartDir, viewVector));
      v_viewNormal = normalize(cross(segmentStartDir, startBiTangent));
      // Move the endpoints to overlap a bit more.
      //viewPos -= vec3(segmentStartDir * lineThickness_0 * 0.25);
      if(mod(vertexIDs, 2.0) == 0.0){
        viewPos += vec3(startBiTangent * lineThickness_0);
        v_texCoord.x = 1.0;
      }
      else{
        viewPos -= vec3(startBiTangent * lineThickness_0);
        v_texCoord.x = 0.0;
      }
      v_texCoord.y = 0.0;
    }
    else{
      vec3 segmentEndDir = segmentDir;
      if(seqentialIndex_1 != 0){
        //if index_1 == numPoints-1, get the first index in the line as next
        int index_next = (index_1 < (positionsTextureSize-1)) ? (index_1+1) : 0;
        vec4 data_next = fetchTexel(positionsTexture, positionsTextureSize, index_next);
        vec4 pos_next = modelViewMatrix * vec4(data_next.xyz, 1.0);
        segmentEndDir = normalize(segmentDir + normalize(pos_next.xyz - pos_1.xyz));
      }
      vec3 endBiTangent = normalize(cross(segmentEndDir, viewVector));
      v_viewNormal = normalize(cross(segmentEndDir, endBiTangent));
      // Move the endpoints to overlap a bit more.
      //viewPos += vec3(segmentEndDir * lineThickness_1 * 0.25);
      if(mod(vertexIDs, 2.0) == 0.0){
        viewPos += vec3(endBiTangent * lineThickness_1);
        v_texCoord.x = 1.0;
      }
      else{
        viewPos -= vec3(endBiTangent * lineThickness_1);
        v_texCoord.x = 0.0;
      }
      v_texCoord.y = 1.0;
    }

    // Move the line towards the viewer by the line thickness.
    // this is to avoid depth issues when lines are rendered over meshes. 
    viewPos.z -= (lineThickness_0 + lineThickness_1) * 0.25;
  }

  v_viewPos       = viewPos;
  gl_Position     = projectionMatrix * vec4(viewPos, 1.0);
}
`
    );

    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'FatLinesShader.fragmentShader',
      `
precision highp float;

/* VS Outputs */
varying vec3 v_viewPos;
varying vec3 v_viewNormal;
varying vec2 v_texCoord;

uniform color BaseColor;
uniform mat4 cameraMatrix;

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif
void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  int debugLevel = 0;
  if(debugLevel == 0){

    vec3 viewVector = mat3(cameraMatrix) * normalize(-v_viewPos);
    vec3 normal = mat3(cameraMatrix) * v_viewNormal;
    float NdotV = dot(normalize(normal), normalize(viewVector));

    // Modulate the lighting using the texture coord so the line looks round.
    NdotV *= cos((v_texCoord.x - 0.5) * 2.0);

    vec4 color = BaseColor * NdotV;
    fragColor = vec4(color.rgb, BaseColor.a);
  }
  else{
    fragColor = vec4(v_texCoord.x, 0.0, 0.0, 1.0);
  }

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`
    );
    this.finalize();
  }

  bind(renderstate) {
    if (super.bind(renderstate)) {
      renderstate.supportsInstancing = false;
      return true
    }
    return false
  }

  static getParamDeclarations() {
    const paramDescs = super.getParamDeclarations();
    paramDescs.push({
      name: 'BaseColor',
      defaultValue: new Color(1.0, 1.0, 0.5),
    });
    paramDescs.push({ name: 'Opacity', defaultValue: 1.0 });
    return paramDescs
  }
}

sgFactory.registerClass('FatLinesShader', FatLinesShader);

shaderLibrary.setShaderModule(
  'stack-gl/gamma.glsl',
  `

const float gamma_const = 2.2;

float toLinear(float v) {
  return pow(v, gamma_const);
}

vec2 toLinear(vec2 v) {
  return pow(v, vec2(gamma_const));
}

vec3 toLinear(vec3 v) {
  return pow(v, vec3(gamma_const));
}

vec4 toLinear(vec4 v) {
  return vec4(toLinear(v.rgb), v.a);
}


float toGamma(float v) {
  return pow(v, 1.0 / gamma_const);
}

vec2 toGamma(vec2 v) {
  return pow(v, vec2(1.0 / gamma_const));
}

vec3 toGamma(vec3 v) {
  return pow(v, vec3(1.0 / gamma_const));
}

vec4 toGamma(vec4 v) {
  return vec4(toGamma(v.rgb), v.a);
}

float toGamma(float v, float gamma) {
  return pow(v, 1.0 / gamma);
}

vec2 toGamma(vec2 v, float gamma) {
  return pow(v, vec2(1.0 / gamma));
}

vec3 toGamma(vec3 v, float gamma) {
  return pow(v, vec3(1.0 / gamma));
}

vec4 toGamma(vec4 v, float gamma) {
  return vec4(toGamma(v.rgb, gamma), v.a);
}


`
);

class FlatSurfaceShader extends GLShader {
  constructor(gl) {
    super(gl);

    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'FlatSurfaceShader.vertexShader',
      `
precision highp float;

attribute vec3 positions;
#ifdef ENABLE_TEXTURES
attribute vec2 texCoords;
#endif

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

<%include file="stack-gl/transpose.glsl"/>
<%include file="drawItemId.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="modelMatrix.glsl"/>

/* VS Outputs */
varying vec3 v_viewPos;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif


void main(void) {
  int drawItemId = getDrawItemId();
    mat4 modelMatrix = getModelMatrix(drawItemId);
    mat4 modelViewMatrix = viewMatrix * modelMatrix;

    vec4 viewPos = (modelViewMatrix * vec4(positions, 1.0));
    gl_Position = projectionMatrix * viewPos;

    v_viewPos = viewPos.xyz;
    v_textureCoord = texCoords;
    v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y
}
`
    );

    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'FlatSurfaceShader.fragmentShader',
      `
precision highp float;

<%include file="stack-gl/gamma.glsl"/>
<%include file="materialparams.glsl"/>

uniform color BaseColor;

#ifdef ENABLE_TEXTURES
uniform sampler2D BaseColorTex;
uniform int BaseColorTexType;
#endif

/* VS Outputs */
varying vec3 v_viewPos;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif


#ifdef ENABLE_ES3
    out vec4 fragColor;
#endif
void main(void) {

#ifndef ENABLE_TEXTURES
    vec4 baseColor = BaseColor;
#else
    vec4 baseColor      = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);
#endif

#ifndef ENABLE_ES3
    vec4 fragColor;
#endif
    fragColor = baseColor;

#ifdef ENABLE_INLINE_GAMMACORRECTION
    fragColor.rgb = toGamma(fragColor.rgb);
#endif

#ifndef ENABLE_ES3
    gl_FragColor = fragColor;
#endif
}
`
    );

    this.finalize();
  }

  static getParamDeclarations() {
    const paramDescs = super.getParamDeclarations();
    paramDescs.push({
      name: 'BaseColor',
      defaultValue: new Color(1.0, 1.0, 0.5),
    });
    return paramDescs
  }

  static getGeomDataShaderName() {
    return 'StandardSurfaceGeomDataShader'
  }

  static getSelectedShaderName() {
    return 'StandardSurfaceSelectedGeomsShader'
  }
}

sgFactory.registerClass('FlatSurfaceShader', FlatSurfaceShader);

class FlatAlphaSurfaceShader extends FlatSurfaceShader {
  static isTransparent() {
    return true
  }

  bind(renderstate, key) {
    if (renderstate.pass != 'ADD') return false
    return super.bind(renderstate, key)
  }
}

sgFactory.registerClass('FlatAlphaSurfaceShader', FlatAlphaSurfaceShader);

shaderLibrary.setShaderModule(
  'math/constants.glsl',
  `

#define PI 3.141592653589793
#define TwoPI (2.0 * PI)
#define HalfPI (0.5 * PI)

`
);

shaderLibrary.setShaderModule(
  'GGX_Specular.glsl',
  `


<%include file="pragmatic-pbr/envmap-octahedral.glsl"/>
<%include file="utils/imagePyramid.glsl"/>

// uniform ImageAtlas envMap;
// see: GLImageAtlas.js: line 460.
uniform sampler2D   envMapPyramid;
uniform sampler2D   envMapPyramid_layout;
uniform vec4        envMapPyramid_desc;


vec3 sampleEnvMap(vec3 dir, float roughness) {
    return sampleImagePyramid(dirToSphOctUv(dir), roughness, envMapPyramid_layout, envMapPyramid, envMapPyramid_desc).rgb;
}


// Borrowed heavily from here: http://www.codinglabs.net/article_physically_based_rendering_cook_torrance.aspx

vec3 Fresnel_Schlick(float cosT, vec3 F0)
{
    return F0 + (vec3(1.0)-F0) * vec3(pow( 1.0 - cosT, 5.0));

    // for now we calculate this in the suface shader
    // float schlick = reflectance + pow((1.0-reflectance)*(1.0-dot(N,V)), 5.0);
}

float chiGGX(float v)
{
    return v > 0.0 ? 1.0 : 0.0;
}

float saturate(float v)
{
    return clamp(v, 0.0, 1.0);
}

vec3 saturate(vec3 v)
{
    return clamp(v, vec3(0.0), vec3(1.0));
}

float saturatedDot( in vec3 a, in vec3 b )
{
    return max( dot( a, b ), 0.0 );   
}

float GGX_PartialGeometryTerm(vec3 v, vec3 n, vec3 h, float alpha)
{
    float VoH2 = saturate(dot(v,h));
    float chi = chiGGX( VoH2 / saturate(dot(v,n)) );
    VoH2 = VoH2 * VoH2;
    float tan2 = ( 1.0 - VoH2 ) / VoH2;
    return (chi * 2.0) / ( 1.0 + sqrt( 1.0 + alpha * alpha * tan2 ) );
}

vec3 GGX_Specular_PrefilteredEnv(vec3 normal, vec3 viewVector, float roughness, float fresnel)
{
    vec3 reflectionVector = reflect(-viewVector, normal);
    vec3 radiance = vec3(0.0);
    float NoV = saturate(dot(normal, viewVector));

    vec3 sampleVector = reflectionVector;

    // Calculate the half vector
    vec3 halfVector = normalize(sampleVector + viewVector);
    float cosT = saturatedDot(reflectionVector, normal);
    float sinT = sqrt( 1.0 - cosT * cosT);

    // Calculate fresnel
    // vec3 fresnel = Fresnel_Schlick( saturate(dot( halfVector, viewVector ) ), F0 );
    // Geometry term
    float geometry = GGX_PartialGeometryTerm(viewVector, normal, halfVector, clamp(roughness, 0.01, 1.0)) * GGX_PartialGeometryTerm(reflectionVector, normal, halfVector, clamp(roughness, 0.01, 1.0));

    // Calculate the Cook-Torrance denominator
    float denominator = clamp( 4.0 * (NoV * saturate(dot(halfVector, normal)) + 0.05), 0.0, 1.0 );
    // kS += fresnel;

    // Accumulate the radiance
    vec3 envColor = sampleEnvMap(reflectionVector, roughness);
    radiance += envColor * geometry * fresnel * sinT / denominator;
    //radiance += envColor * fresnel; // Removing "geometry" for now until we construct a better geometric shading term

    return radiance;        
}
`
);

shaderLibrary.setShaderModule(
  'PBRSurfaceRadiance.glsl',
  `

struct MaterialParams {
    vec3 baseColor;
    float metallic;
    float roughness;
    float reflectance;
};

vec4 pbrSpecularReflectance(in MaterialParams materialParams, vec3 normal, in vec3 viewVector) {

    float NdotV = dot(normal, viewVector);
    
    // -------------------------- Specular Reflectance --------------------------
    // vec3 ks = vec3(0.0);
    // vec3 specular = GGX_Specular_PrefilteredEnv(normal, viewVector, materialParams.roughness, F0, ks );
    // vec3 kd = (vec3(1.0) - ks) * vec3(1.0 - metallic);    

    float schlickFresnel = materialParams.reflectance + pow((1.0-materialParams.reflectance)*(1.0-NdotV), 5.0);

    vec3 specularReflectance = GGX_Specular_PrefilteredEnv(normal, viewVector, materialParams.roughness, schlickFresnel);


    // -------------------------- Specular Occlusion --------------------------
    // Fast and quick way of reducing specular reflection in areas that are less exposed to the environment
    // A better approch is to try screen space specular occlusion but need to check performance and feasibility in webGL
    //float specularOcclusion = clamp(length(irradiance), 0.01, 1.0);    
    //specularReflectance = (specularReflectance * specularOcclusion); 

    return vec4(specularReflectance, schlickFresnel);
}


vec3 pbrSurfaceRadiance(in MaterialParams materialParams, vec3 irradiance, vec3 normal, in vec3 viewVector) {

    float NdotV = dot(normal, viewVector);
    vec3 specularReflectance;

    // -------------------------- Diffuse Reflectance --------------------------

    vec3 diffuseReflectance = materialParams.baseColor * irradiance;

    // From the Disney dielectric BRDF    
    // Need to check if this is useful for us but the implementation works based on their paper
    //diffuseReflectance = (diffuseReflectance / PI); // << [PT 18-08-2018] What did this line do??? (makes everything 3.1x darker.)
    // diffuseReflectance = vec3(mix(diffuseReflectance, diffuseReflectance * mix(0.5, 2.5, materialParams.roughness), pow(1.0 - NdotV, 5.0)));
    diffuseReflectance = vec3(mix(diffuseReflectance, diffuseReflectance * mix(0.5, 1.0, materialParams.roughness), pow(1.0 - NdotV, 5.0)));


    // -------------------------- Color at normal incidence --------------------------
    
    // Need to use 'Reflectance' here instead of 'ior'
    //vec3 F0 = vec3(abs((1.0 - ior) / (1.0 + ior)));    
    //F0 = F0 * F0;
    //F0 = mix(F0, materialParams.baseColor, materialParams.metallic);      


    // -------------------------- Specular Reflectance --------------------------
    // vec3 ks = vec3(0.0);
    // vec3 specular = GGX_Specular_PrefilteredEnv(normal, viewVector, materialParams.roughness, F0, ks );
    // vec3 kd = (vec3(1.0) - ks) * vec3(1.0 - metallic);    

    float schlickFresnel = materialParams.reflectance + pow((1.0-materialParams.reflectance)*(1.0-NdotV), 5.0);

    specularReflectance = GGX_Specular_PrefilteredEnv(normal, viewVector, materialParams.roughness, schlickFresnel);


    // -------------------------- Specular Occlusion --------------------------
    // Fast and quick way of reducing specular reflection in areas that are less exposed to the environment
    // A better approch is to try screen space specular occlusion but need to check performance and feasibility in webGL
    //float specularOcclusion = clamp(length(irradiance), 0.01, 1.0);    
    //specularReflectance = (specularReflectance * specularOcclusion);  
      

    // -------------------------- Metallic --------------------------
    // We need to do few things given a higher > 0 metallic value
    //      1. tint specular reflectance by the albedo color (not at grazing angles)
    //      2. almost elliminate all diffuse reflectance (in reality metals have some diffuse due to layering (i.e. dust, prints, etc.))
    //      3. set "specular" artistic value to metallic range (0.6 - 0.85)

    specularReflectance = mix(specularReflectance, specularReflectance * materialParams.baseColor, materialParams.metallic);
    diffuseReflectance = mix(diffuseReflectance, vec3(0.0,0.0,0.0), materialParams.metallic); // Leaveing at pure black for now but always need some %3 diffuse left for imperfection of pulished pure metal
    // Would be best to compute reflectace internally and set here to 0.6-0.85 for metals
    

    // -------------------------- Final color --------------------------
    // Energy conservation already taken into account in both the diffuse and specular reflectance
    vec3 radiance = diffuseReflectance + specularReflectance;

    // radiance = vec4( kd * diffuse + /*ks */ specular, 1);
    return radiance;
}
`
);

class LayeredCarPaintShader extends GLShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'LayeredCarPaintShader.vertexShader',
      `
precision highp float;

attribute vec3 positions;
attribute vec3 normals;
#ifdef ENABLE_TEXTURES
attribute vec2 texCoords;
#endif
attribute vec2 lightmapCoords;

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

<%include file="stack-gl/transpose.glsl"/>
<%include file="stack-gl/inverse.glsl"/>
<%include file="drawItemId.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="modelMatrix.glsl"/>

attribute float clusterIDs;
uniform vec2 lightmapSize;

/* VS Outputs */
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
varying vec3 v_viewNormal;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif
// varying vec2 v_lightmapCoord;
// #ifdef ENABLE_DEBUGGING_LIGHTMAPS
// varying float v_clusterID;
// #endif
varying vec3 v_worldPos;
/* VS Outputs */

void main(void) {
    int drawItemId = getDrawItemId();

    v_geomItemData = getInstanceData(drawItemId);

    vec4 pos = vec4(positions, 1.);
    mat4 modelMatrix = getModelMatrix(drawItemId);
    mat4 modelViewMatrix = viewMatrix * modelMatrix;
    vec4 viewPos    = modelViewMatrix * pos;
    gl_Position     = projectionMatrix * viewPos;


#ifdef ENABLE_TEXTURES
    v_textureCoord  = texCoords;
#endif
    // v_lightmapCoord = (lightmapCoords + geomItemData.zw) / lightmapSize;

    // mat4 mvp = projectionMatrix * viewMatrix * modelMatrix;
    // gl_Position = mvp * vec4((lightmapCoords + geomItemData.xy), 0., 1.);
// #ifdef ENABLE_DEBUGGING_LIGHTMAPS
//     v_clusterID = clusterIDs;
// #endif

    v_worldPos      = (modelMatrix * pos).xyz;
    mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));
    v_viewPos       = -viewPos.xyz;
    v_viewNormal    = normalMatrix * normals;
}
`
    );

    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'LayeredCarPaintShader.fragmentShader',
      `
#ifndef ENABLE_ES3
    #extension GL_OES_standard_derivatives : enable
#endif
precision highp float;

<%include file="math/constants.glsl"/>
<%include file="GLSLUtils.glsl"/>
<%include file="GGX_Specular.glsl"/>
<%include file="PBRSurfaceRadiance.glsl"/>
#ifdef ENABLE_INLINE_GAMMACORRECTION
<%include file="stack-gl/gamma.glsl"/>
#endif
<%include file="materialparams.glsl"/>

/* VS Outputs */
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
varying vec3 v_viewNormal;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif
// varying vec2 v_lightmapCoord;
// #ifdef ENABLE_DEBUGGING_LIGHTMAPS
// varying float v_clusterID;
// #endif
varying vec3 v_worldPos;
/* VS Outputs */


uniform sampler2D lightmap;
uniform vec2 lightmapSize;
#ifdef ENABLE_DEBUGGING_LIGHTMAPS
<%include file="debugColors.glsl"/>
uniform bool debugLightmapTexelSize;
#endif

#ifdef ENABLE_INLINE_GAMMACORRECTION
uniform float exposure;
#endif

uniform mat4 cameraMatrix;

uniform color BaseColor;
uniform color MidColorTint;
uniform float MidColorTintReflectance;

uniform float MicroflakePerturbation;
uniform sampler2D FlakesNormalTex;
uniform float FlakesScale;

#ifdef ENABLE_SPECULAR

uniform float BaseRoughness;
uniform float BaseMetallic;
uniform float BaseReflectance;
uniform float GlossRoughness;
uniform float GlossMetallic;
uniform float GlossReflectance;

#endif

#ifdef ENABLE_TEXTURES

uniform sampler2D BaseColorTex;
uniform int BaseColorTexType;

#endif

// Followup: Normal Mapping Without Precomputed Tangents
// http://www.thetenthplanet.de/archives/1180
mat3 cotangent_frame( vec3 normal, vec3 position, vec2 uv )
{
    // get edge vectors of the pixel triangle
    vec3 dp1 = dFdx( position );
    vec3 dp2 = dFdy( position );
    vec2 duv1 = dFdx( uv );
    vec2 duv2 = dFdy( uv );
 
    // solve the linear system
    vec3 dp2perp = cross( dp2, normal );
    vec3 dp1perp = cross( normal, dp1 );
    vec3 tangent = dp2perp * duv1.x + dp1perp * duv2.x;
    vec3 bitangent = dp2perp * duv1.y + dp1perp * duv2.y;
 
    // construct a scale-invariant frame 
    float invmax = inversesqrt( max( dot(tangent,tangent), dot(bitangent,bitangent) ) );
    return mat3( tangent * invmax, bitangent * invmax, normal );
}

#define WITH_NORMALMAP_UNSIGNED 1

vec3 sampleNormalMap( sampler2D normalMap, vec2 texcoord )
{
    // assume normal, the interpolated vertex normal and 
    // viewVec, the view vector (vertex to eye)
    vec3 map = texture2D( normalMap, texcoord ).xyz;
#ifdef WITH_NORMALMAP_UNSIGNED
    map = map * 255./127. - 128./127.;
#endif
#ifdef WITH_NORMALMAP_2CHANNEL
    map.z = sqrt( 1. - dot( map.xy, map.xy ) );
#endif
#ifdef WITH_NORMALMAP_GREEN_UP
    map.y = -map.y;
#endif
    return map;
}


#ifdef ENABLE_ES3
    out vec4 fragColor;
#endif

void main(void) {

    MaterialParams material;

#ifndef ENABLE_TEXTURES
    material.baseColor      = BaseColor.rgb;
#else
    vec2 texCoord           = vec2(v_textureCoord.x, 1.0 - v_textureCoord.y);
    material.baseColor      = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, texCoord).rgb;
#endif

#ifdef ENABLE_SPECULAR
    material.roughness      = BaseRoughness;
    material.metallic       = BaseMetallic;
    material.reflectance    = BaseReflectance;
#endif

    vec3 irradiance = texture2D(lightmap, v_lightmapCoord).rgb;
 
#ifdef ENABLE_DEBUGGING_LIGHTMAPS
    if(debugLightmapTexelSize)
    {
        vec2 coord_texelSpace = (v_lightmapCoord * lightmapSize) - v_geomItemData.zw;
        //vec2 coord_texelSpace = (v_textureCoord * lightmapSize);
        float total = floor(coord_texelSpace.x) +
                      floor(coord_texelSpace.y);
                      
        vec3 clustercolor = getDebugColor(v_clusterID);

        if(mod(total,2.0)==0.0){
            material.baseColor = clustercolor;
            irradiance = vec3(1.0);
        }
        else{
            material.baseColor = material.baseColor * 1.5;
        }
    }
#endif

    vec3 viewNormal = normalize(v_viewNormal);
    vec3 surfacePos = -v_viewPos;

    // The vector from the camera to the surface point.
    vec3 viewVector = mat3(cameraMatrix) * normalize(v_viewPos);
    vec3 viewDir = normalize(viewVector);
    vec3 normal = normalize(mat3(cameraMatrix) * viewNormal);

    float NdotV = dot(normal, viewDir);
    if(NdotV < 0.0){
        normal = -normal;
        NdotV = dot(normal, viewDir);
    }

#ifndef ENABLE_SPECULAR
    vec3 radiance = material.baseColor * irradiance;
#else
    
    // Mix the base color to give a multi-layered paint look.
    material.baseColor      = mix(material.baseColor, material.baseColor * MidColorTint.rgb, (1.0-NdotV));

    mat3 TBN = cotangent_frame( normal, surfacePos, v_lightmapCoord );
    vec3 flakesNormal = TBN * -sampleNormalMap( FlakesNormalTex, (v_lightmapCoord * lightmapSize) / FlakesScale );
    flakesNormal = normalize(mix(normal, flakesNormal, MicroflakePerturbation));

    vec3 baseRadiance = pbrSurfaceRadiance(material, irradiance, flakesNormal, viewVector);

    material.roughness      = GlossRoughness;
    material.reflectance    = GlossReflectance;
    vec4 gloss = pbrSpecularReflectance(material, normal, viewVector);
    vec3 radiance = mix(baseRadiance, gloss.rgb, gloss.a);
    //vec3 radiance = baseRadiance;

#endif

#ifndef ENABLE_ES3
    vec4 fragColor;
#endif

    fragColor = vec4(radiance, 1.0);

#ifdef ENABLE_INLINE_GAMMACORRECTION
    fragColor.rgb = toGamma(fragColor.rgb * exposure);
#endif

#ifndef ENABLE_ES3
    gl_FragColor = fragColor;
#endif
}
`
    );

    this.finalize();
  }

  static getParamDeclarations() {
    const paramDescs = super.getParamDeclarations();

    // F0 = reflectance and is a physical property of materials
    // It also has direct relation to IOR so we need to dial one or the other
    // For simplicity sake, we don't need to touch this value as metalic can dictate it
    // such that non metallic is mostly around (0.01-0.025) and metallic around (0.7-0.85)

    paramDescs.push({
      name: 'BaseColor',
      defaultValue: new Color(1.0, 0.0, 0.0),
    });
    paramDescs.push({ name: 'BaseMetallic', defaultValue: 0.0 });
    paramDescs.push({ name: 'BaseRoughness', defaultValue: 0.35 });
    paramDescs.push({ name: 'BaseReflectance', defaultValue: 0.03 });
    paramDescs.push({
      name: 'MidColorTint',
      defaultValue: new Color(1.0, 1.0, 1.0),
    });
    paramDescs.push({ name: 'MidColorTintReflectance', defaultValue: 0.03 });
    paramDescs.push({ name: 'GlossMetallic', defaultValue: 0.0 });
    paramDescs.push({ name: 'GlossRoughness', defaultValue: 0.35 });
    paramDescs.push({ name: 'GlossReflectance', defaultValue: 0.03 });

    const flakesNormal = new FileImage$1(
      'flakes',
      'ZeaEngine/FlakesNormalMap.png'
    );
    flakesNormal.wrap = 'REPEAT';
    flakesNormal.mipMapped = true;
    paramDescs.push({ name: 'FlakesNormal', defaultValue: flakesNormal });
    paramDescs.push({ name: 'FlakesScale', defaultValue: 0.1 });
    paramDescs.push({ name: 'MicroflakePerturbation', defaultValue: 0.1 });

    return paramDescs
  }
  static getGeomDataShaderName() {
    return 'StandardSurfaceGeomDataShader'
  }

  static getSelectedShaderName() {
    return 'StandardSurfaceSelectedGeomsShader'
  }
}

sgFactory.registerClass('LayeredCarPaintShader', LayeredCarPaintShader);

class BaseShadowCatcherShader extends GLShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'FlatShader.vertexShader',
      `
precision highp float;

attribute vec3 positions;
attribute vec2 lightmapCoords;

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform vec3 ProjectionCenter;

<%include file="stack-gl/transpose.glsl"/>
<%include file="stack-gl/inverse.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="modelMatrix.glsl"/>

attribute float clusterIDs;
uniform vec2 lightmapSize;

/* VS Outputs */
// varying vec2 v_lightmapCoord;
varying vec3 v_worldDir;

void main(void) {
    int drawItemId = getDrawItemId();

    vec4 geomItemData = getInstanceData(drawItemId);

    vec4 pos = vec4(positions, 1.);
    mat4 modelMatrix = getModelMatrix(drawItemId);
    mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;
    gl_Position     = modelViewProjectionMatrix * pos;

    vec4 worldPos = modelMatrix * pos;
    v_worldDir = worldPos.xyz - ProjectionCenter;

    v_lightmapCoord = (lightmapCoords + geomItemData.zw) / lightmapSize;
}
`
    );
  }
}

class ShadowCatcherShader extends BaseShadowCatcherShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'ShadowCatcherShader.fragmentShader',
      `
precision highp float;

<%include file="math/constants.glsl"/>
<%include file="GLSLUtils.glsl"/>
<%include file="pragmatic-pbr/envmap-octahedral.glsl"/>
#ifdef ENABLE_INLINE_GAMMACORRECTION
<%include file="stack-gl/gamma.glsl"/>
#endif

/* VS Outputs */
varying vec2 v_lightmapCoord;
varying vec3 v_worldDir;

uniform sampler2D lightmap;
uniform float ShadowMultiplier;

uniform color envMap;
uniform sampler2D envMapTex;
uniform int envMapTexType;

#ifdef ENABLE_INLINE_GAMMACORRECTION
uniform float exposure;
#endif

float luminanceFromRGB(vec3 rgb) {
    return 0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b;
}


#ifdef ENABLE_ES3
    out vec4 fragColor;
#endif
void main(void) {

    vec4 env = envMap;
    if(envMapTexType != 0) {
        vec2 texCoord = dirToSphOctUv(normalize(v_worldDir));
        env = texture2D(envMapTex, texCoord);
    }

    vec3 irradiance = texture2D(lightmap, v_lightmapCoord).rgb * ShadowMultiplier;
    float irradianceLum = clamp(luminanceFromRGB(irradiance), 0.0, 1.0);

#ifndef ENABLE_ES3
    vec4 fragColor;
#endif

    fragColor = vec4(env.rgb/env.a, 1.0);
    fragColor.rgb = mix(fragColor.rgb * irradiance, fragColor.rgb, irradianceLum);

#ifdef ENABLE_INLINE_GAMMACORRECTION
    fragColor.rgb = toGamma(fragColor.rgb * exposure);
#endif


#ifndef ENABLE_ES3
    gl_FragColor = fragColor;
#endif
}
`
    );
    this.finalize();
  }

  static getParamDeclarations() {
    const paramDescs = super.getParamDeclarations();
    paramDescs.push({
      name: 'ProjectionCenter',
      defaultValue: new Vec3$1(0.0, 0.0, 1.7),
    });
    paramDescs.push({ name: 'ShadowMultiplier', defaultValue: 1.0 });
    return paramDescs
  }

  static isTransparent() {
    return true
  }

  bind(renderstate, key) {
    if (renderstate.pass != 'ADD') return false
    return super.bind(renderstate, key)
  }
}

sgFactory.registerClass('ShadowCatcherShader', ShadowCatcherShader);

class FloatingShadowCatcherShader extends BaseShadowCatcherShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'FloatingShadowCatcherShader.fragmentShader',
      `
precision highp float;

<%include file="math/constants.glsl"/>
<%include file="GLSLUtils.glsl"/>
<%include file="stack-gl/gamma.glsl"/>
<%include file="materialparams.glsl"/>
<%include file="pragmatic-pbr/envmap-octahedral.glsl"/>

/* VS Outputs */
varying vec2 v_lightmapCoord;
varying vec3 v_worldDir;

uniform sampler2D lightmap;

uniform float ShadowMultiplier;

#ifdef ENABLE_INLINE_GAMMACORRECTION
uniform float exposure;
#endif


#ifdef ENABLE_ES3
    out vec4 fragColor;
#endif
void main(void) {

#ifndef ENABLE_ES3
    vec4 fragColor;
#endif
    
    float shadow = luminanceFromRGB(texture2D(lightmap, v_lightmapCoord).rgb) * ShadowMultiplier;

    // This material works by multiplying the image buffer values by the luminance in the lightmap.
    fragColor.rgb = vec3(pow(shadow, 1.0/ShadowMultiplier));
    fragColor.a = 1.0;

#ifdef ENABLE_INLINE_GAMMACORRECTION
    fragColor.rgb = toGamma(fragColor.rgb * exposure);
#endif

#ifndef ENABLE_ES3
    gl_FragColor = fragColor;
#endif
}
`
    );
  }

  bind(renderstate, key) {
    if (renderstate.pass != 'MULTIPLY') return false
    return super.bind(renderstate, key)
  }

  static isTransparent() {
    return true
  }

  static getParamDeclarations() {
    const paramDescs = super.getParamDeclarations();
    paramDescs.push({ name: 'ShadowMultiplier', defaultValue: 1.0 });
    return paramDescs
  }
}

sgFactory.registerClass(
  'FloatingShadowCatcherShader',
  FloatingShadowCatcherShader
);

class LinesShader extends GLShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'LinesShader.vertexShader',
      `
precision highp float;

attribute vec3 positions;

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

<%include file="stack-gl/transpose.glsl"/>
<%include file="drawItemId.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="modelMatrix.glsl"/>

/* VS Outputs */

void main(void) {
    int drawItemId = getDrawItemId();
    mat4 modelMatrix = getModelMatrix(drawItemId);
    mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;
    gl_Position = modelViewProjectionMatrix * vec4(positions, 1.0);
}
`
    );

    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'LinesShader.fragmentShader',
      `
precision highp float;

uniform color BaseColor;
uniform float Opacity;

#ifdef ENABLE_ES3
    out vec4 fragColor;
#endif
void main(void) {
#ifndef ENABLE_ES3
    vec4 fragColor;
#endif
    fragColor = BaseColor;
    fragColor.a *= Opacity;
    
#ifndef ENABLE_ES3
    gl_FragColor = fragColor;
#endif
}
`
    );
    this.finalize();
  }

  static getParamDeclarations() {
    const paramDescs = super.getParamDeclarations();
    paramDescs.push({ name: 'BaseColor', defaultValue: new Color(1.0, 1.0, 0.5) });
    paramDescs.push({ name: 'Opacity', defaultValue: 1.0 });
    return paramDescs
  }

  static getGeomDataShaderName() {
    return 'StandardSurfaceGeomDataShader'
  }

  static getSelectedShaderName() {
    return 'StandardSurfaceSelectedGeomsShader'
  }

  static isTransparent() {
    return true
  }

  bind(renderstate, key) {
    if (renderstate.pass != 'ADD') return false
    return super.bind(renderstate, key)
  }
}

sgFactory.registerClass('LinesShader', LinesShader);

class NormalsShader extends GLShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'NormalsShader.vertexShader',
      `
precision highp float;

instancedattribute vec3 positions;
instancedattribute vec3 normals;
attribute vec2 vertexIDs;

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

uniform float normalLength;

<%include file="stack-gl/transpose.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="modelMatrix.glsl"/>


/* VS Outputs */
varying float v_weight;

void main(void) {
  mat4 modelMatrix = getModelMatrix(transformIndex);
  mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;
  if(vertexIDs.x == 0.0){
    gl_Position = modelViewProjectionMatrix * vec4(positions, 1.0);
    v_weight = 1.0;
  }
  else{
    gl_Position = modelViewProjectionMatrix * vec4(positions+(normals*normalLength), 1.0);
    v_weight = 0.0;
  }
}
`
    );

    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'NormalsShader.fragmentShader',
      `
precision highp float;

uniform color normalColor;

/* VS Outputs */
varying float v_weight;


void main(void) {
  gl_FragColor = normalColor;
  gl_FragColor.a = v_weight;
}
`
    );
  }
}

class PointsShader extends GLShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'PointsShader.vertexShader',
      `
precision highp float;

attribute vec3 positions;

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

<%include file="stack-gl/transpose.glsl"/>
<%include file="stack-gl/inverse.glsl"/>
<%include file="drawItemId.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="modelMatrix.glsl"/>

/* VS Outputs */

void main(void) {
  int drawItemId = getDrawItemId();
  mat4 modelMatrix = getModelMatrix(drawItemId);
  mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;
  gl_Position = modelViewProjectionMatrix * vec4(positions, 1.);
}
`
    );

    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'PointsShader.fragmentShader',
      `
precision highp float;

uniform color BaseColor;

#ifdef ENABLE_ES3
out vec4 fragColor;
#endif

void main(void) {

#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  fragColor = BaseColor;

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`
    );
  }

  static getParamDeclarations() {
    const paramDescs = super.getParamDeclarations();
    paramDescs.push({
      name: 'BaseColor',
      defaultValue: new Color(1.0, 1.0, 0.5),
    });
    return paramDescs
  }
}

sgFactory.registerClass('PointsShader', PointsShader);

class FatPointsShader extends GLShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'FatPointsShader.vertexShader',
      `
precision highp float;

instancedattribute vec3 positions;

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

<%include file="stack-gl/transpose.glsl"/>
<%include file="stack-gl/inverse.glsl"/>
<%include file="drawItemId.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="modelMatrix.glsl"/>
<%include file="utils/quadVertexFromID.glsl"/>

uniform float PointSize;

/* VS Outputs */
varying vec2 v_texCoord;
varying vec3 v_viewPos;
varying float v_drawItemId;

void main(void) {
  int drawItemId = getDrawItemId();
  vec2 quadPointPos = getQuadVertexPositionFromID();
  v_texCoord = quadPointPos + 0.5;

  mat4 modelMatrix = getModelMatrix(drawItemId);
  mat4 modelViewMatrix = viewMatrix * modelMatrix;
  
  vec4 viewPos = modelViewMatrix * vec4(positions, 1.);

  viewPos += vec4(vec3(quadPointPos, 0.0) * PointSize, 0.);

  // Generate a quad which is 0.5 * PointSize closer towards
  // us. This allows points to be visualized even if snug on 
  // a surface. (else they get fully clipped)
  viewPos.z += 0.5 * PointSize;

  v_drawItemId = float(getDrawItemId());
  v_viewPos = -viewPos.xyz;
  
  gl_Position = projectionMatrix * viewPos;
}
`
    );

    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'FatPointsShader.fragmentShader',
      `
precision highp float;

<%include file="math/constants.glsl"/>

uniform color BaseColor;
uniform float Rounded;
uniform float BorderWidth;

/* VS Outputs */
varying vec2 v_texCoord;
varying vec3 v_viewPos;
varying float v_drawItemId;

#ifdef ENABLE_ES3
out vec4 fragColor;
#endif

void main(void) {

#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  float dist = length(v_texCoord - 0.5);
  if(dist > 0.5)
    discard;
  if(dist > 0.5 - (BorderWidth * 0.5))
    fragColor = vec4(0.,0.,0.,1.);
  else {
    // Modulate the lighting using the texture coord so the point looks round.
    float NdotV = cos(dist * PI);

    fragColor = BaseColor * mix(1.0, NdotV, Rounded);
  }
  

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`
    );
  }

  bind(renderstate) {
    if (super.bind(renderstate)) {
      renderstate.supportsInstancing = false;
      return true
    }
    return false
  }

  static getParamDeclarations() {
    const paramDescs = super.getParamDeclarations();
    paramDescs.push({
      name: 'BaseColor',
      defaultValue: new Color(1.0, 1.0, 0.5),
    });
    paramDescs.push({ name: 'PointSize', defaultValue: 0.05 });
    paramDescs.push({ name: 'Rounded', defaultValue: 1.0 });
    paramDescs.push({ name: 'BorderWidth', defaultValue: 0.2 });
    return paramDescs
  }

  static getGeomDataShaderName() {
    return 'FatPointsGeomDataShader'
  }

  static getSelectedShaderName() {
    return 'FatPointsSelectedShader'
  }
}

class FatPointsGeomDataShader extends FatPointsShader {
  constructor(gl) {
    super(gl);

    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'FatPointsGeomDataShader.fragmentShader',
      `
precision highp float;

<%include file="math/constants.glsl"/>
<%include file="GLSLBits.glsl"/>

uniform int floatGeomBuffer;
uniform int passId;

/* VS Outputs */
varying vec2 v_texCoord;
varying vec3 v_viewPos;
varying float v_drawItemId;

#ifdef ENABLE_ES3
out vec4 fragColor;
#endif

void main(void) {

#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  float dist = length(v_texCoord - 0.5);
  if(dist > 0.5)
    discard;
    

  float viewDist = length(v_viewPos);

  if(floatGeomBuffer != 0) {
    fragColor.r = float(passId); 
    fragColor.g = float(v_drawItemId);
    fragColor.b = 0.0;// TODO: store poly-id or something.
    fragColor.a = viewDist;
  }
  else {
    ///////////////////////////////////
    // UInt8 buffer
    fragColor.r = (mod(v_drawItemId, 256.) + 0.5) / 255.;
    fragColor.g = (floor(v_drawItemId / 256.) + 0.5) / 255.;

    // encode the dist as a 16 bit float
    vec2 float16bits = encode16BitFloatInto2xUInt8(viewDist);
    fragColor.b = float16bits.x;
    fragColor.a = float16bits.y;
  }


#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`
    );
  }
}


class FatPointsSelectedShader extends FatPointsShader {
  constructor(gl) {
    super(gl);

    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'FatPointsSelectedShader.fragmentShader',
      `
precision highp float;

<%include file="math/constants.glsl"/>
<%include file="GLSLBits.glsl"/>

uniform int floatGeomBuffer;
uniform int passId;

/* VS Outputs */
varying vec2 v_texCoord;
varying vec3 v_viewPos;
varying float v_drawItemId;


<%include file="drawItemTexture.glsl"/>

#ifdef ENABLE_FLOAT_TEXTURES
vec4 getHighlightColor(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);
}
#else

uniform vec4 highlightColor;

vec4 getHighlightColor() {
    return highlightColor;
}

#endif


#ifdef ENABLE_ES3
out vec4 fragColor;
#endif

void main(void) {

#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  float dist = length(v_texCoord - 0.5);
  if(dist > 0.5)
    discard;
  
  int drawItemId = int(v_drawItemId + 0.5);
  fragColor = getHighlightColor(drawItemId);

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`
    );
  }
}

sgFactory.registerClass('FatPointsShader', FatPointsShader);
sgFactory.registerClass('FatPointsGeomDataShader', FatPointsGeomDataShader);
sgFactory.registerClass('FatPointsSelectedShader', FatPointsSelectedShader);

shaderLibrary.setShaderModule(
  'pragmatic-pbr/exposure.glsl',
  `

/*
* Get an exposure using the Saturation-based Speed method.
*/
float getSaturationBasedExposure(float aperture,
                                 float shutterSpeed,
                                 float iso)
{
    float l_max = (7800.0 / 65.0) * sqrt(aperture) / (iso * shutterSpeed);
    return 1.0 / l_max;
}

//White balance middle grey we are targetting for a good scene exposure
//https://en.wikipedia.org/wiki/Middle_gray
const float MIDDLE_GREY = 0.18;

/*
* Get an exposure using the Standard Output Sensitivity method.
* Accepts an additional parameter of the target middle grey.
*/
float getStandardOutputBasedExposure(float aperture,
                                     float shutterSpeed,
                                     float iso)
{
    //https://placeholderart.wordpress.com/2014/11/21/implementing-a-physically-based-camera-manual-exposure/
    //https://en.wikipedia.org/wiki/Film_speed#Standard_output_sensitivity_.28SOS.29
    //photometric exposure magic
    //represents the properties of lens
    float q = 0.65;

    //float l_avg = (1000.0f / 65.0f) * sqrt(aperture) / (iso * shutterSpeed);
    float l_avg = (1.0 / q) * sqrt(aperture) / (iso * shutterSpeed);
    //float l_avg = sqrt(aperture) / (iso * shutterSpeed);
    return MIDDLE_GREY / l_avg;
}

`
);

shaderLibrary.setShaderModule(
  'pragmatic-pbr/tonemap-filmic.glsl',
  `

//Based on Filmic Tonemapping Operators http://filmicgames.com/archives/75
vec3 tonemapFilmic(vec3 color) {
    vec3 x = max(vec3(0.0), color - 0.004);
    return (x * (6.2 * x + 0.5)) / (x * (6.2 * x + 1.7) + 0.06);
}

`
);

shaderLibrary.setShaderModule(
  'mattdesl/fxaa-texcoords.glsl',
  `
//To save 9 dependent texture reads, you can compute
//these in the vertex shader and use the optimized
//frag.glsl function in your frag shader. 

//This is best suited for mobile devices, like iOS.

void texcoords(vec2 fragCoord, vec2 resolution,
            out vec2 v_rgbNW, out vec2 v_rgbNE,
            out vec2 v_rgbSW, out vec2 v_rgbSE,
            out vec2 v_rgbM) {
    vec2 inverseVP = 1.0 / resolution.xy;
    v_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;
    v_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;
    v_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;
    v_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;
    v_rgbM = vec2(fragCoord * inverseVP);
}

`
);

shaderLibrary.setShaderModule(
  'mattdesl/fxaa.glsl',
  `

/**
Basic FXAA implementation based on the code on geeks3d.com with the
modification that the texture2DLod stuff was removed since it's
unsupported by WebGL.
--
From:
https://github.com/mitsuhiko/webgl-meincraft
Copyright (c) 2011 by Armin Ronacher.
Some rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.
    * The names of the contributors may not be used to endorse or
      promote products derived from this software without specific
      prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#ifndef FXAA_REDUCE_MIN
    #define FXAA_REDUCE_MIN   (1.0/ 128.0)
#endif
#ifndef FXAA_REDUCE_MUL
    #define FXAA_REDUCE_MUL   (1.0 / 8.0)
#endif
#ifndef FXAA_SPAN_MAX
    #define FXAA_SPAN_MAX     8.0
#endif

//optimized version for mobile, where dependent 
//texture reads can be a bottleneck
vec4 fxaa(sampler2D tex, vec2 fragCoord, vec2 resolution,
            vec2 v_rgbNW, vec2 v_rgbNE, 
            vec2 v_rgbSW, vec2 v_rgbSE, 
            vec2 v_rgbM) {
    vec4 color;
    mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);
    vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;
    vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;
    vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;
    vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;
    vec4 texColor = texture2D(tex, v_rgbM);
    vec3 rgbM  = texColor.xyz;
    vec3 luma = vec3(0.299, 0.587, 0.114);
    float lumaNW = dot(rgbNW, luma);
    float lumaNE = dot(rgbNE, luma);
    float lumaSW = dot(rgbSW, luma);
    float lumaSE = dot(rgbSE, luma);
    float lumaM  = dot(rgbM,  luma);
    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));
    
    mediump vec2 dir;
    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));
    
    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *
                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);
    
    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);
    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),
              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),
              dir * rcpDirMin)) * inverseVP;
    
    vec3 rgbA = 0.5 * (
        texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +
        texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);
    vec3 rgbB = rgbA * 0.5 + 0.25 * (
        texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +
        texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);

    float lumaB = dot(rgbB, luma);
    if ((lumaB < lumaMin) || (lumaB > lumaMax))
        color = vec4(rgbA, texColor.a);
    else
        color = vec4(rgbB, texColor.a);
    return color;
}

`
);

shaderLibrary.setShaderModule(
  'mattdesl/fxaa-apply.glsl',
  `

<%include file="mattdesl/fxaa.glsl"/>

vec4 apply(sampler2D tex, vec2 fragCoord, vec2 resolution) {
    mediump vec2 v_rgbNW;
    mediump vec2 v_rgbNE;
    mediump vec2 v_rgbSW;
    mediump vec2 v_rgbSE;
    mediump vec2 v_rgbM;

    //compute the texture coords
    texcoords(fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);
    
    //compute FXAA
    return fxaa(tex, fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);
}

`
);

class PostProcessing extends GLShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'PostProcessing.vertexShader',
      `
precision highp float;

<%include file="utils/quadVertexFromID.glsl"/>
<%include file="mattdesl/fxaa-texcoords.glsl"/>

uniform vec2 textureSize;

/* VS Outputs */
varying vec2 v_texCoord;

//texcoords computed in vertex step
//to avoid dependent texture reads
varying vec2 v_rgbNW;
varying vec2 v_rgbNE;
varying vec2 v_rgbSW;
varying vec2 v_rgbSE;
varying vec2 v_rgbM;

 
void main()
{
    vec2 position = getQuadVertexPositionFromID();
    v_texCoord = position+0.5;
    gl_Position = vec4(position*2.0, 0.0, 1.0);

    vec2 fragCoord = v_texCoord * textureSize;
    texcoords(fragCoord, textureSize, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);
}

`
    );
    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'PostProcessing.fragmentShader',
      `
precision highp float;

<%include file="pragmatic-pbr/exposure.glsl"/>
<%include file="pragmatic-pbr/tonemap-filmic.glsl"/>
<%include file="stack-gl/gamma.glsl"/>

<%include file="mattdesl/fxaa.glsl"/>

//texcoords computed in vertex step
//to avoid dependent texture reads
varying vec2 v_rgbNW;
varying vec2 v_rgbNE;
varying vec2 v_rgbSW;
varying vec2 v_rgbSE;
varying vec2 v_rgbM;

uniform sampler2D texture;
uniform vec2 textureSize;

uniform bool antialiase;
uniform bool tonemap;
uniform float exposure;
uniform float gamma;

varying vec2 v_texCoord;

#ifdef ENABLE_ES3
    out vec4 fragColor;
#endif
void main(void) {
    //can also use gl_FragCoord.xy
    mediump vec2 fragCoord = v_texCoord * textureSize; 

    if (antialiase) {
        fragColor = fxaa(texture, fragCoord, textureSize, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);
    } else {
        fragColor = texture2D(texture, v_texCoord);
    }
    
    //fragColor.rgb *= getStandardOutputBasedExposure(aperture, shutterSpeed, iso);
    fragColor.rgb *= exposure;
    
    if (tonemap) 
        fragColor.rgb = tonemapFilmic(fragColor.rgb);
    else
        fragColor.rgb = toGamma(fragColor.rgb, gamma);

    
    //fragColor.rgb = toGamma(fragColor.rgb, gamma);
    
    fragColor.a = 1.0;

#ifndef ENABLE_ES3
    gl_FragColor = fragColor;
#endif
}`
    );
    this.finalize();
  }
}
//export default PostProcessing;

class SimpleSurfaceShader extends GLShader {
  constructor(name) {
    super(name);

    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'SimpleSurfaceShader.vertexShader',
      `
precision highp float;

attribute vec3 positions;
attribute vec3 normals;
#ifdef ENABLE_TEXTURES
attribute vec2 texCoords;
#endif

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

<%include file="stack-gl/transpose.glsl"/>
<%include file="stack-gl/inverse.glsl"/>
<%include file="drawItemId.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="modelMatrix.glsl"/>

/* VS Outputs */
varying float v_drawItemId;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
varying vec3 v_viewNormal;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif
varying vec3 v_worldPos;

void main(void) {
    int drawItemId = getDrawItemId();
    v_drawItemId = float(drawItemId);
    v_geomItemData  = getInstanceData(drawItemId);

    vec4 pos = vec4(positions, 1.);
    mat4 modelMatrix = getModelMatrix(drawItemId);
    mat4 modelViewMatrix = viewMatrix * modelMatrix;
    vec4 viewPos    = modelViewMatrix * pos;
    gl_Position     = projectionMatrix * viewPos;

    mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));
    v_viewPos       = -viewPos.xyz;
    v_viewNormal    = normalMatrix * normals;

#ifdef ENABLE_TEXTURES
    v_textureCoord  = texCoords;
    // v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y
#endif

    v_worldPos      = (modelMatrix * pos).xyz;
}
`
    );

    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'SimpleSurfaceShader.fragmentShader',
      `
precision highp float;

<%include file="drawItemTexture.glsl"/>
<%include file="cutaways.glsl"/>
<%include file="stack-gl/gamma.glsl"/>
<%include file="materialparams.glsl"/>

/* VS Outputs */
varying float v_drawItemId;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
varying vec3 v_viewNormal;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif
varying vec3 v_worldPos;

uniform mat4 cameraMatrix;

uniform color BaseColor;
uniform float Opacity;

#ifdef ENABLE_TEXTURES

uniform sampler2D BaseColorTex;
uniform int BaseColorTexType;
uniform sampler2D OpacityTex;
uniform int OpacityTexType;

uniform color cutColor;
vec4 getCutaway(int id) {
    return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);
}

#endif

#ifdef ENABLE_ES3
    out vec4 fragColor;
#endif

void main(void) {
    int drawItemId = int(v_drawItemId + 0.5);

    int flags = int(v_geomItemData.r + 0.5);
    // Cutaways
    if(testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) 
    {
        vec4 cutAwayData   = getCutaway(drawItemId);
        vec3 planeNormal = cutAwayData.xyz;
        float planeDist = cutAwayData.w;
        if(cutaway(v_worldPos, planeNormal, planeDist)){
            discard;
            return;
        }
        else if(!gl_FrontFacing){
            fragColor = cutColor;
#ifndef ENABLE_ES3
            gl_FragColor = fragColor;
#endif
            return;
        }
    }

#ifndef ENABLE_TEXTURES
    vec4 baseColor      = BaseColor;
    float opacity       = baseColor.a * Opacity;
#else
    vec4 baseColor      = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);
    float opacity       = baseColor.a * getLuminanceParamValue(Opacity, OpacityTex, OpacityTexType, v_textureCoord);
#endif

    // Hacky simple irradiance. 
    vec3 viewVector = normalize(mat3(cameraMatrix) * normalize(v_viewPos));
    vec3 normal = normalize(mat3(cameraMatrix) * v_viewNormal);
    float ndotv = dot(normal, viewVector);
    if(ndotv < 0.0){
        normal = -normal;
        ndotv = dot(normal, viewVector);

        // Note: these 2 lines can be used to debug inverted meshes.
        //baseColor = vec4(1.0, 0.0, 0.0, 1.0);
        //ndotv = 1.0;
    }

#ifndef ENABLE_ES3
    vec4 fragColor;
#endif
    fragColor = vec4(ndotv * baseColor.rgb, opacity);

#ifdef ENABLE_INLINE_GAMMACORRECTION
    fragColor.rgb = toGamma(fragColor.rgb);
#endif

#ifndef ENABLE_ES3
    gl_FragColor = fragColor;
#endif
}
`
    );
    this.finalize();
  }

  static getParamDeclarations() {
    const paramDescs = super.getParamDeclarations();
    paramDescs.push({
      name: 'BaseColor',
      defaultValue: new Color(1.0, 1.0, 0.5),
    });
    paramDescs.push({ name: 'Opacity', defaultValue: 1.0, range: [0, 1] });
    return paramDescs
  }

  static getGeomDataShaderName() {
    return 'StandardSurfaceGeomDataShader'
  }

  static getSelectedShaderName() {
    return 'StandardSurfaceSelectedGeomsShader'
  }
}

sgFactory.registerClass('SimpleSurfaceShader', SimpleSurfaceShader);

shaderLibrary.setShaderModule(
  'cutaways.glsl',
  `


const int GEOMITEM_FLAG_CUTAWAY =  1; // 1<<0;

#define RAY_EPS 0.0000001
struct Ray {
    vec3 start;
    vec3 dir;
};

float intersectRayPlane(Ray ray, Ray plane) {
    vec3 w = ray.start - plane.start;
    float D = dot(plane.dir, ray.dir);
    float N = dot(-plane.dir, w);

    if (abs(D) < RAY_EPS) {
        // segment is parallel to plane
        if (N == 0.0)
            return -1.0; // segment lies in plane
        else
            return -1.0; // no intersection
    }
    // they are not parallel
    // compute intersect param
    float sI = N / D;
    if (sI < -RAY_EPS) {
        return -1.0; // no intersection
    }
    return sI;
}


bool cutaway(vec3 worldPos, vec3 planeNormal, float planeDist) {

    vec3 planePos = planeNormal * planeDist;
    vec3 planeDir = worldPos + planePos;
    float planeOffset = dot(planeDir, planeNormal);
    if(planeOffset > 0.0){
        return true;
    }
    return  false;
}
`
);

class StandardSurfaceShader extends GLShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'StandardSurfaceShader.vertexShader',
      `
precision highp float;

attribute vec3 positions;
attribute vec3 normals;
#ifdef ENABLE_TEXTURES
attribute vec2 texCoords;
#endif
attribute vec2 lightmapCoords;

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

<%include file="stack-gl/transpose.glsl"/>
<%include file="stack-gl/inverse.glsl"/>
<%include file="drawItemId.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="modelMatrix.glsl"/>

// attribute float clusterIDs;
// uniform vec2 lightmapSize;

/* VS Outputs */
varying float v_drawItemId;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
varying vec3 v_viewNormal;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif
// varying vec2 v_lightmapCoord;
// #ifdef ENABLE_DEBUGGING_LIGHTMAPS
// varying float v_clusterID;
// #endif
varying vec3 v_worldPos;
/* VS Outputs */


void main(void) {
    int drawItemId = getDrawItemId();
    v_drawItemId = float(drawItemId);
    v_geomItemData = getInstanceData(drawItemId);

    vec4 pos = vec4(positions, 1.);
    mat4 modelMatrix = getModelMatrix(drawItemId);
    mat4 modelViewMatrix = viewMatrix * modelMatrix;
    vec4 viewPos    = modelViewMatrix * pos;
    gl_Position     = projectionMatrix * viewPos;

    mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));
    v_viewPos       = -viewPos.xyz;
    v_viewNormal    = normalMatrix * normals;

#ifdef ENABLE_TEXTURES
    v_textureCoord  = texCoords;
#endif

    // v_lightmapCoord = (lightmapCoords + v_geomItemData.zw) / lightmapSize;

    // mat4 mvp = projectionMatrix * viewMatrix * modelMatrix;
    // gl_Position = mvp * vec4((lightmapCoords + v_geomItemData.zw), 0., 1.);
#ifdef ENABLE_DEBUGGING_LIGHTMAPS
    v_clusterID = clusterIDs;
#endif

    v_worldPos      = (modelMatrix * pos).xyz;
}
`
    );

    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'StandardSurfaceShader.fragmentShader',
      `
precision highp float;

<%include file="math/constants.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="cutaways.glsl"/>


<%include file="stack-gl/gamma.glsl"/>
<%include file="materialparams.glsl"/>

<%include file="GGX_Specular.glsl"/>
<%include file="PBRSurfaceRadiance.glsl"/>

/* VS Outputs */
varying float v_drawItemId;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
varying vec3 v_viewNormal;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif
// varying vec2 v_lightmapCoord;
// #ifdef ENABLE_DEBUGGING_LIGHTMAPS
// varying float v_clusterID;
// #endif
varying vec3 v_worldPos;
/* VS Outputs */


// uniform sampler2D lightmap;
// uniform bool lightmapConnected;
// #ifdef ENABLE_DEBUGGING_LIGHTMAPS
// <%include file="debugColors.glsl"/>
// uniform vec2 lightmapSize;
// uniform bool debugLightmapTexelSize;
// #endif

uniform color cutColor;
vec4 getCutaway(int id) {
    return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);
}

#ifdef ENABLE_INLINE_GAMMACORRECTION
uniform float exposure;
#endif

uniform mat4 cameraMatrix;

uniform color BaseColor;
uniform float EmissiveStrength;


#ifdef ENABLE_SPECULAR
uniform float Roughness;
uniform float Metallic;
uniform float Reflectance;
#endif

#ifdef ENABLE_TEXTURES
uniform sampler2D BaseColorTex;
uniform int BaseColorTexType;

#ifdef ENABLE_SPECULAR
uniform sampler2D RoughnessTex;
uniform int RoughnessTexType;

uniform sampler2D MetallicTex;
uniform int MetallicTexType;

uniform sampler2D ReflectanceTex;
uniform int ReflectanceTexType;

uniform sampler2D NormalTex;
uniform int NormalTexType;
// uniform float NormalScale;
#endif

uniform sampler2D EmissiveStrengthTex;
uniform int EmissiveStrengthTexType;


#endif

#ifdef ENABLE_ES3
out vec4 fragColor;

#endif

void main(void) {
    int drawItemId = int(v_drawItemId + 0.5);

    int flags = int(v_geomItemData.r + 0.5);
    // Cutaways
    if(testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {
        vec4 cutAwayData   = getCutaway(drawItemId);
        vec3 planeNormal = cutAwayData.xyz;
        float planeDist = cutAwayData.w;
        if(cutaway(v_worldPos, planeNormal, planeDist)){
            discard;
            return;
        }
        else if(!gl_FrontFacing){
            fragColor = cutColor;
#ifndef ENABLE_ES3
            gl_FragColor = fragColor;
#endif
            return;
        }
    }


    MaterialParams material;

#ifndef ENABLE_TEXTURES
    material.BaseColor     = BaseColor.rgb;
    float emission         = EmissiveStrength;

#ifdef ENABLE_SPECULAR
    material.roughness     = Roughness;
    material.metallic      = Metallic;
    material.reflectance   = Reflectance;
#endif

#else
    // Planar YZ projection for texturing, repeating every meter.
    // vec2 texCoord       = v_worldPos.xz * 0.2;
    vec2 texCoord          = vec2(v_textureCoord.x, 1.0 - v_textureCoord.y);
    material.baseColor     = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, texCoord).rgb;

#ifdef ENABLE_SPECULAR
    material.roughness     = getLuminanceParamValue(Roughness, RoughnessTex, RoughnessTexType, texCoord);
    material.metallic      = getLuminanceParamValue(Metallic, MetallicTex, MetallicTexType, texCoord);
    material.reflectance   = getLuminanceParamValue(Reflectance, ReflectanceTex, ReflectanceTexType, texCoord);
#endif
    float emission         = getLuminanceParamValue(EmissiveStrength, EmissiveStrengthTex, EmissiveStrengthTexType, texCoord);
#endif

    vec3 viewNormal = normalize(v_viewNormal);
    //vec3 surfacePos = -v_viewPos;

#ifdef ENABLE_TEXTURES
#ifdef ENABLE_SPECULAR
    if(NormalTexType != 0){
        vec3 textureNormal_tangentspace = normalize(texture2D(NormalTex, texCoord).rgb * 2.0 - 1.0);
        viewNormal = normalize(mix(viewNormal, textureNormal_tangentspace, 0.3));
    }
#endif
#endif

    vec3 viewVector = normalize(mat3(cameraMatrix) * normalize(v_viewPos));
    vec3 normal = normalize(mat3(cameraMatrix) * viewNormal);
    if(dot(normal, viewVector) < 0.0){
        normal = -normal;
        // Note: this line can be used to debug inverted meshes.
        //material.baseColor = vec3(1.0, 0.0, 0.0);
    }

    vec3 irradiance;
    // if(lightmapConnected){
    //     irradiance = texture2D(lightmap, v_lightmapCoord).rgb;
    // }
    // else{
#ifndef ENABLE_SPECULAR
        irradiance = sampleEnvMap(normal, 1.0);
#else
        irradiance = vec3(dot(normal, viewVector));
#endif
        
    // }

// #ifdef ENABLE_DEBUGGING_LIGHTMAPS
//     if(debugLightmapTexelSize)
//     {
//         vec2 coord_texelSpace = (v_lightmapCoord * lightmapSize) - v_geomItemData.zw;
//         //vec2 coord_texelSpace = (v_textureCoord * lightmapSize);
//         float total = floor(coord_texelSpace.x) +
//                       floor(coord_texelSpace.y);
                      
//         vec3 clustercolor = getDebugColor(v_clusterID);

//         material.metallic = 0.0;
//         material.reflectance = 0.0;
//         if(mod(total,2.0)==0.0){
//             material.baseColor = clustercolor;
//             irradiance = vec3(1.0);
//         }
//         else{
//             material.baseColor = material.baseColor * 1.5;
//         }
//     }
// #endif

#ifndef ENABLE_SPECULAR
    vec3 radiance = material.baseColor * irradiance;
#else
    vec3 radiance = pbrSurfaceRadiance(material, irradiance, normal, viewVector);
#endif

#ifndef ENABLE_ES3
    vec4 fragColor;
#endif
    // fragColor = vec4(material.baseColor, 1.0);
    // fragColor = vec4(material.baseColor * irradiance, 1.0);
    fragColor = vec4(radiance + (emission * material.baseColor), 1.0);

#ifdef ENABLE_INLINE_GAMMACORRECTION
    fragColor.rgb = toGamma(fragColor.rgb * exposure);
#endif

#ifndef ENABLE_ES3
    gl_FragColor = fragColor;
#endif
}
`
    );

    this.finalize();
  }

  static getParamDeclarations() {
    const paramDescs = super.getParamDeclarations();
    paramDescs.push({
      name: 'BaseColor',
      defaultValue: new Color(1.0, 1.0, 0.5),
    });
    paramDescs.push({ name: 'Metallic', defaultValue: 0.0, range: [0, 1] });
    paramDescs.push({ name: 'Roughness', defaultValue: 0.85, range: [0, 1] });
    // F0 = reflectance and is a physical property of materials
    // It also has direct relation to IOR so we need to dial one or the other
    // For simplicity sake, we don't need to touch this value as metalic can dictate it
    // such that non metallic is mostly around (0.01-0.025) and metallic around (0.7-0.85)
    paramDescs.push({ name: 'Reflectance', defaultValue: 0.1, range: [0, 1] });
    paramDescs.push({
      name: 'EmissiveStrength',
      defaultValue: 0.0,
      range: [0, 1],
    });

    // paramDescs.push({ name: 'TexCoordScale', defaultValue: 1.0, texturable: false });
    return paramDescs
  }

  static getGeomDataShaderName() {
    return 'StandardSurfaceGeomDataShader'
  }

  static getSelectedShaderName() {
    return 'StandardSurfaceSelectedGeomsShader'
  }
}

sgFactory.registerClass('StandardSurfaceShader', StandardSurfaceShader);

shaderLibrary.setShaderModule(
  'GLSLBits.glsl',
  `
    
/////////////////////////////////////////////////////////////////
// http://concord-consortium.github.io/lab/experiments/webgl-gpgpu/script.js
float shift_right(float v, float amt) {
  v = floor(v) + 0.5;
  return floor(v / exp2(amt));
}
float shift_left(float v, float amt) {
  return floor(v * exp2(amt) + 0.5);
}

float mask_last(float v, float bits) {
  return mod(v, shift_left(1.0, bits));
}
float extract_bits(float num, float from, float to) {
  from = floor(from + 0.5);
  to = floor(to + 0.5);
  return mask_last(shift_right(num, from), to - from);
}

/////////////////////////////////////////////////////////////////
// https://stackoverflow.com/questions/18453302/how-do-you-pack-one-32bit-int-into-4-8bit-ints-in-glsl-webgl

const vec4 bitEnc = vec4(1.,255.,65025.,16581375.);
const vec4 bitDec = 1./bitEnc;
vec4 EncodeFloatRGBA (float v) {
    vec4 enc = bitEnc * v;
    enc = fract(enc);
    enc -= enc.yzww * vec2(1./255., 0.).xxxy;
    return enc;
}
float DecodeFloatRGBA (vec4 v) {
    return dot(v, bitDec);
}



/////////////////////////////////////////////////////////////////
// https://gist.github.com/Flexi23/1713774
// 
vec2 encode16BitFloatInto2xUInt8(float v){
    vec2 c = vec2(0.);

    int signum = (v >= 0.) ? 128 : 0;
    v = abs(v);
    int exponent = 15;
    float limit = 1024.; // considering the bias from 2^-5 to 2^10 (==1024)
    for(int exp = 15; exp > 0; exp--){
        if( v < limit){
            limit /= 2.;
            exponent--;
        }
    }

    float rest;
    if(exponent == 0){
        rest = v / limit / 2.;      // "subnormalize" implicite preceding 0. 
    }else{
        rest = (v - limit)/limit;   // normalize accordingly to implicite preceding 1.
    }

    int mantissa = int(rest * 2048.);   // 2048 = 2^11 for the (split) 11 bit mantissa
    int msb = mantissa / 256;           // the most significant 3 bits go into the lower part of the first byte
    int lsb = mantissa - msb * 256;     // there go the other 8 bit of the lower significance

    c.x = float(signum + exponent * 8 + msb) / 255.;    // color normalization for texture2D
    c.y = float(lsb) / 255.;

    if(v >= 2048.){
        c.y = 1.;
    }

    return c;
}

float decode16BitFloatFrom2xUInt8(vec2 c){
    float v = 0.;

    int ix = int(c.x*255.); // 1st byte: 1 bit signum, 4 bits exponent, 3 bits mantissa (MSB)
    int iy = int(c.y*255.); // 2nd byte: 8 bit mantissa (LSB)

    int s = (c.x >= 0.5) ? 1 : -1;
    ix = (s > 0) ? ix - 128 : ix;   // remove the signum bit from exponent
    int iexp = ix / 8;              // cut off the last 3 bits of the mantissa to select the 4 exponent bits
    int msb = ix - iexp * 8;        // subtract the exponent bits to select the 3 most significant bits of the mantissa

    int norm = (iexp == 0) ? 0 : 2048;          // distinguish between normalized and subnormalized numbers
    int mantissa = norm + msb * 256 + iy;       // implicite preceding 1 or 0 added here
    norm = (iexp == 0) ? 1 : 0;                 // normalization toggle
    float exponent = pow( 2., float(iexp + norm) - 16.); // -5 for the the exponent bias from 2^-5 to 2^10 plus another -11 for the normalized 12 bit mantissa 
    v = float( s * mantissa ) * exponent;

    return v;
}


// TODO : Encoding Float32 to 4x UInt8
// http://concord-consortium.github.io/lab/experiments/webgl-gpgpu/script.js
// http://ultraist.hatenablog.com/entry/20110608/1307539319

`
);

class StandardSurfaceGeomDataShader extends GLShader {
  constructor(gl, floatGeomBuffer) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'StandardSurfaceGeomDataShader.vertexShader',
      `
precision highp float;

attribute vec3 positions;

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

<%include file="stack-gl/transpose.glsl"/>
<%include file="drawItemId.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="modelMatrix.glsl"/>


varying float v_drawItemId;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
varying float v_drawItemID;
varying vec3 v_worldPos;

void main(void) {
  int drawItemId = getDrawItemId();
  v_drawItemId = float(drawItemId);
  v_geomItemData = getInstanceData(drawItemId);

  vec4 pos = vec4(positions, 1.);
  mat4 modelMatrix = getModelMatrix(drawItemId);
  mat4 modelViewMatrix = viewMatrix * modelMatrix;
  vec4 viewPos = modelViewMatrix * pos;
  gl_Position = projectionMatrix * viewPos;

  v_viewPos = -viewPos.xyz;

  v_drawItemID = float(getDrawItemId());
  
  v_worldPos      = (modelMatrix * pos).xyz;
}
`
    );

    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'StandardSurfaceGeomDataShader.fragmentShader',
      `
precision highp float;

<%include file="drawItemTexture.glsl"/>
<%include file="cutaways.glsl"/>
<%include file="GLSLBits.glsl"/>

uniform int floatGeomBuffer;
uniform int passId;

uniform color cutColor;
vec4 getCutaway(int id) {
    return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);
}

varying float v_drawItemId;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
varying float v_drawItemID;
varying vec3 v_worldPos;


#ifdef ENABLE_ES3
    out vec4 fragColor;
#endif
void main(void) {
  int drawItemId = int(v_drawItemId + 0.5);

#ifndef ENABLE_ES3
    vec4 fragColor;
#endif

  int flags = int(v_geomItemData.r + 0.5);
  // Cutaways
  if(testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {
      vec4 cutAwayData   = getCutaway(drawItemId);
      vec3 planeNormal = cutAwayData.xyz;
      float planeDist = cutAwayData.w;
      if(cutaway(v_worldPos, planeNormal, planeDist)){
          discard;
          return;
      }
      else if(!gl_FrontFacing){
          fragColor = cutColor;
  #ifndef ENABLE_ES3
          gl_FragColor = fragColor;
  #endif
          return;
      }
  }

    float dist = length(v_viewPos);

    if(floatGeomBuffer != 0) {
        fragColor.r = float(passId); 
        fragColor.g = float(v_drawItemID);
        fragColor.b = 0.0;// TODO: store poly-id or something.
        fragColor.a = dist;
    }
    else {
        ///////////////////////////////////
        // UInt8 buffer
        fragColor.r = (mod(v_drawItemID, 256.) + 0.5) / 255.;
        fragColor.g = (floor(v_drawItemID / 256.) + 0.5) / 255.;


        // encode the dist as a 16 bit float
        vec2 float16bits = encode16BitFloatInto2xUInt8(dist);
        fragColor.b = float16bits.x;
        fragColor.a = float16bits.y;
    }


#ifndef ENABLE_ES3
    gl_FragColor = fragColor;
#endif
}
`
    );
  }
}

sgFactory.registerClass(
  'StandardSurfaceGeomDataShader',
  StandardSurfaceGeomDataShader
);

class StandardSurfaceSelectedGeomsShader extends GLShader {
  constructor(gl, floatGeomBuffer) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'StandardSurfaceSelectedGeomsShader.vertexShader',
      `
precision highp float;

attribute vec3 positions;

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

<%include file="stack-gl/transpose.glsl"/>
<%include file="drawItemId.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="modelMatrix.glsl"/>

varying float v_drawItemId;

void main(void) {
    int drawItemId = getDrawItemId();
    v_drawItemId = float(drawItemId);
    mat4 modelMatrix = getModelMatrix(drawItemId);
    mat4 modelViewMatrix = viewMatrix * modelMatrix;
    vec4 viewPos = modelViewMatrix * vec4(positions, 1.0);
    gl_Position = projectionMatrix * viewPos;

}
`
    );

    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'StandardSurfaceSelectedGeomsShader.fragmentShader',
      `
precision highp float;

varying float v_drawItemId;


<%include file="drawItemTexture.glsl"/>

#ifdef ENABLE_FLOAT_TEXTURES
vec4 getHighlightColor(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);
}
#else

uniform vec4 highlightColor;

vec4 getHighlightColor() {
    return highlightColor;
}

#endif

#ifdef ENABLE_ES3
    out vec4 fragColor;
#endif
void main(void) {

#ifndef ENABLE_ES3
    vec4 fragColor;
#endif
    int drawItemId = int(v_drawItemId + 0.5);
    fragColor = getHighlightColor(drawItemId);

#ifndef ENABLE_ES3
    gl_FragColor = fragColor;
#endif
}
`
    );
  }
}

sgFactory.registerClass(
  'StandardSurfaceSelectedGeomsShader',
  StandardSurfaceSelectedGeomsShader
);

class HandleShader extends GLShader {
  constructor(gl) {
    super(gl);

    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'HandleShader.vertexShader',
      `
precision highp float;

attribute vec3 positions;
#ifdef ENABLE_TEXTURES
attribute vec2 texCoords;
#endif

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform int maintainScreenSize;

<%include file="stack-gl/transpose.glsl"/>
<%include file="drawItemId.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="modelMatrix.glsl"/>

/* VS Outputs */
varying vec3 v_viewPos;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif


void main(void) {
  int drawItemId = getDrawItemId();
  mat4 modelMatrix = getModelMatrix(drawItemId);
  mat4 modelViewMatrix = viewMatrix * modelMatrix;

  if(maintainScreenSize != 0) {
    float dist = modelViewMatrix[3][2];
    float sc = dist;
    mat4 scmat = mat4(
      sc, 0.0, 0.0, 0.0,
      0.0, sc, 0.0, 0.0,
      0.0, 0.0, sc, 0.0,
      0.0, 0.0, 0.0, 1.0
    );
    modelViewMatrix = modelViewMatrix * scmat;
  }

  vec4 viewPos = modelViewMatrix * vec4(positions, 1.0);
  gl_Position = projectionMatrix * viewPos;

  v_viewPos = viewPos.xyz;
  v_textureCoord = texCoords;
  v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y
}
`
    );

    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'HandleShader.fragmentShader',
      `
precision highp float;

<%include file="stack-gl/gamma.glsl"/>
<%include file="materialparams.glsl"/>

uniform color BaseColor;

#ifdef ENABLE_TEXTURES
uniform sampler2D BaseColorTex;
uniform int BaseColorTexType;
#endif

/* VS Outputs */
varying vec3 v_viewPos;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif


#ifdef ENABLE_ES3
    out vec4 fragColor;
#endif
void main(void) {

#ifndef ENABLE_TEXTURES
    vec4 baseColor = BaseColor;
#else
    vec4 baseColor      = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);
#endif

#ifndef ENABLE_ES3
    vec4 fragColor;
#endif
    fragColor = baseColor;

#ifdef ENABLE_INLINE_GAMMACORRECTION
    fragColor.rgb = toGamma(fragColor.rgb);
#endif

#ifndef ENABLE_ES3
    gl_FragColor = fragColor;
#endif
}
`
    );

    this.finalize();
  }

  static getParamDeclarations() {
    const paramDescs = super.getParamDeclarations();
    paramDescs.push({
      name: 'BaseColor',
      defaultValue: new Color(1.0, 1.0, 0.5),
    });
    paramDescs.push({
      name: 'maintainScreenSize',
      defaultValue: 0,
    });
    return paramDescs
  }

  static isOverlay() {
    return true
  }

  static getGeomDataShaderName() {
    return 'HandleGeomDataShader'
  }

  // static getSelectedShaderName(){
  //     return 'StandardSurfaceSelectedGeomsShader';
  // }
}

sgFactory.registerClass('HandleShader', HandleShader);

class HandleGeomDataShader extends StandardSurfaceGeomDataShader {
  constructor(gl, floatGeomBuffer) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'HandleGeomDataShader.vertexShader',
      `
precision highp float;

attribute vec3 positions;

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform int maintainScreenSize;

<%include file="stack-gl/transpose.glsl"/>
<%include file="drawItemId.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="modelMatrix.glsl"/>


varying float v_drawItemId;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
varying float v_drawItemID;
varying vec3 v_worldPos;

void main(void) {
  int drawItemId = getDrawItemId();
  mat4 modelMatrix = getModelMatrix(drawItemId);
  mat4 modelViewMatrix = viewMatrix * modelMatrix;
  
  if(maintainScreenSize != 0) {
    float dist = modelViewMatrix[3][2];
    float sc = dist;
    mat4 scmat = mat4(
      sc, 0.0, 0.0, 0.0,
      0.0, sc, 0.0, 0.0,
      0.0, 0.0, sc, 0.0,
      0.0, 0.0, 0.0, 1.0
    );
    modelViewMatrix = modelViewMatrix * scmat;
  }

  vec4 viewPos = modelViewMatrix * vec4(positions, 1.0);
  gl_Position = projectionMatrix * viewPos;

  v_viewPos = -viewPos.xyz;

  v_drawItemID = float(getDrawItemId());
}
`
    );
  }
}

sgFactory.registerClass('HandleGeomDataShader', HandleGeomDataShader);

class TransparentSurfaceShader extends GLShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'TransparentSurfaceShader.vertexShader',
      `
precision highp float;


attribute vec3 positions;
attribute vec3 normals;

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

<%include file="stack-gl/transpose.glsl"/>
<%include file="stack-gl/inverse.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="modelMatrix.glsl"/>

/* VS Outputs */
varying vec3 v_viewPos;
varying vec3 v_viewNormal;

varying vec3 v_worldPos;
/* VS Outputs */

void main(void) {
    int drawItemId = getDrawItemId();

    vec4 geomItemData = getInstanceData(drawItemId);

    vec4 pos = vec4(positions, 1.);
    mat4 modelMatrix = getModelMatrix(drawItemId);
    mat4 modelViewMatrix = viewMatrix * modelMatrix;
    vec4 viewPos    = modelViewMatrix * pos;
    gl_Position     = projectionMatrix * viewPos;

    // mat4 mvp = projectionMatrix * viewMatrix * modelMatrix;
    // gl_Position = mvp * vec4((lightmapCoords + geomItemData.xy), 0., 1.);

    v_worldPos      = (modelMatrix * pos).xyz;

    mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));
    v_viewPos       = -viewPos.xyz;
    v_viewNormal    = normalMatrix * normals;
}
`
    );

    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'TransparentSurfaceShader.fragmentShader',
      `
precision highp float;

#ifdef ENABLE_INLINE_GAMMACORRECTION
<%include file="stack-gl/gamma.glsl"/>
#endif
<%include file="GLSLUtils.glsl"/>

/* VS Outputs */
varying vec3 v_viewPos;
varying vec3 v_viewNormal;

varying vec3 v_worldPos;
/* VS Outputs */


#ifdef ENABLE_INLINE_GAMMACORRECTION
uniform float exposure;
#endif

uniform mat4 cameraMatrix;
uniform float planeDist;
uniform float planeAngle;

uniform color BaseColor;
uniform float Opacity;

#ifdef ENABLE_SPECULAR
<%include file="math/constants.glsl"/>
<%include file="GGX_Specular.glsl"/>
<%include file="PBRSurfaceRadiance.glsl"/>
uniform float Roughness;
uniform float Metallic;
uniform float Reflectance;
#endif

#ifdef __ENABLE_TEXTURES
uniform sampler2D BaseColorTex;
uniform bool BaseColorTexType;

uniform sampler2D OpacityTex;
uniform bool OpacityTexType;

uniform sampler2D RoughnessTex;
uniform bool RoughnessTexType;

uniform sampler2D ReflectanceTex;
uniform bool ReflectanceTexType;

uniform sampler2D NormalTex;
uniform bool NormalTexType;
uniform float NormalScale;


#endif

#ifdef ENABLE_ES3
    out vec4 fragColor;
#endif
void main(void) {

    MaterialParams material;

#ifndef __ENABLE_TEXTURES
    material.baseColor      = BaseColor.rgb;
    float opacity           = Opacity;

#ifdef ENABLE_SPECULAR
    material.roughness      = Roughness;
    material.metallic       = Metallic;
    material.reflectance    = Reflectance;
#endif

#else
    // Planar YZ projection for texturing, repeating every meter.
    // vec2 texCoord        = v_worldPos.xz * 0.2;
    vec2 texCoord           = vec2(v_textureCoord.x, 1.0 - v_textureCoord.y);
    material.baseColor      = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, texCoord).rgb;
    material.roughness      = getLuminanceParamValue(Roughness, RoughnessTex, RoughnessTexType, texCoord);
    material.metallic       = getLuminanceParamValue(Metallic, MetallicTex, MetallicTexType, texCoord);
    material.reflectance    = Reflectance;//getLuminanceParamValue(Reflectance, ReflectanceTex, ReflectanceTexType, texCoord);

    float opacity           = getLuminanceParamValue(Opacity, OpacityTex, OpacityTexType, texCoords);
#endif

#ifndef ENABLE_SPECULAR
    gl_FragColor = vec4(material.baseColor.rgb, opacity);
#else

    vec3 viewNormal = normalize(v_viewNormal);
    //vec3 surfacePos = -v_viewPos;

#ifdef __ENABLE_TEXTURES
    if(NormalTexType != 0){
        vec3 textureNormal_tangentspace = normalize(texture2D(NormalTex, texCoord).rgb * 2.0 - 1.0);
        viewNormal = normalize(mix(viewNormal, textureNormal_tangentspace, 0.3));
    }
#endif

    vec3 viewVector = normalize(mat3(cameraMatrix) * normalize(v_viewPos));
    vec3 normal = normalize(mat3(cameraMatrix) * viewNormal);
    if(dot(normal, viewVector) < 0.0){
        normal = -normal;
        // Note: this line can be used to debug inverted meshes.
        //material.baseColor = vec3(1.0, 0.0, 0.0);
    }

    vec4 specularReflectance = pbrSpecularReflectance(material, normal, viewVector);

#ifndef ENABLE_ES3
    vec4 fragColor;
#endif

    fragColor = vec4(specularReflectance.rgb, mix(opacity, 1.0, specularReflectance.a));

#endif

#ifdef ENABLE_INLINE_GAMMACORRECTION
    fragColor.rgb = toGamma(fragColor.rgb * exposure);
#endif

#ifndef ENABLE_ES3
    gl_FragColor = fragColor;
#endif
}
`
    );
    this.finalize();
  }

  static getParamDeclarations() {
    const paramDescs = super.getParamDeclarations();
    paramDescs.push({
      name: 'BaseColor',
      defaultValue: new Color(1.0, 1.0, 0.5),
    });
    paramDescs.push({ name: 'Opacity', defaultValue: 1.0, range: [0, 1] });
    paramDescs.push({ name: 'Roughness', defaultValue: 0.85 });
    // F0 = reflectance and is a physical property of materials
    // It also has direct relation to IOR so we need to dial one or the other
    // For simplicity sake, we don't need to touch this value as metalic can dictate it
    // such that non metallic is mostly around (0.01-0.025) and metallic around (0.7-0.85)
    paramDescs.push({ name: 'Reflectance', defaultValue: 0.0001 });

    // paramDescs.push({ name: 'TexCoordScale', defaultValue: 1.0, texturable: false });
    return paramDescs
  }

  static getGeomDataShaderName() {
    return 'StandardSurfaceGeomDataShader'
  }

  static getSelectedShaderName() {
    return 'StandardSurfaceSelectedGeomsShader'
  }

  static isTransparent() {
    return true
  }

  bind(renderstate, key) {
    if (renderstate.pass != 'ADD') return false
    return super.bind(renderstate, key)
  }
}

sgFactory.registerClass('TransparentSurfaceShader', TransparentSurfaceShader);

class ScreenSpaceShader extends GLShader {
  constructor(gl) {
    super(gl);

    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'ScreenSpaceShader.vertexShader',
      `
precision highp float;

attribute vec3 positions;
#ifdef ENABLE_TEXTURES
attribute vec2 texCoords;
#endif

<%include file="stack-gl/transpose.glsl"/>
<%include file="drawItemId.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="modelMatrix.glsl"/>

/* VS Outputs */
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif


void main(void) {
  int drawItemId = getDrawItemId();
    mat4 modelMatrix = getModelMatrix(drawItemId);

    gl_Position = (modelMatrix * vec4(positions, 1.0));

    v_textureCoord = texCoords;
    v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y
}
`
    );

    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'ScreenSpaceShader.fragmentShader',
      `
precision highp float;

<%include file="stack-gl/gamma.glsl"/>
<%include file="materialparams.glsl"/>

uniform color BaseColor;

#ifdef ENABLE_TEXTURES
uniform sampler2D BaseColorTex;
uniform int BaseColorTexType;
#endif

/* VS Outputs */
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif


#ifdef ENABLE_ES3
    out vec4 fragColor;
#endif
void main(void) {

#ifndef ENABLE_TEXTURES
    vec4 baseColor = BaseColor;
#else
    vec4 baseColor      = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);
#endif

#ifndef ENABLE_ES3
    vec4 fragColor;
#endif
    fragColor = baseColor;

#ifdef ENABLE_INLINE_GAMMACORRECTION
    fragColor.rgb = toGamma(fragColor.rgb);
#endif

#ifndef ENABLE_ES3
    gl_FragColor = fragColor;
#endif
}
`
    );

    this.finalize();
  }

  static isOverlay() {
    return true
  }

  static getParamDeclarations() {
    const paramDescs = super.getParamDeclarations();
    paramDescs.push({
      name: 'BaseColor',
      defaultValue: new Color(1.0, 1.0, 0.5),
    });
    return paramDescs
  }

  static getGeomDataShaderName() {
    // TODO: Provide a geom data shader for overlay items.
    return null
  }

  static getSelectedShaderName() {
    // TODO: Provide a geom data shader for overlay items.
    return null
  }
}

sgFactory.registerClass('ScreenSpaceShader', ScreenSpaceShader);

class ToolIconShader extends FlatSurfaceShader {
  constructor(gl) {
    super(gl);
    this.invisibleToGeomBuffer = true;
  }
}

sgFactory.registerClass('ToolIconShader', ToolIconShader);

class UnpackLDRAlphaImageShader extends GLShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'UnpackLDRAlphaImageShader.vertexShader',
      `
precision highp float;

<%include file="utils/quadVertexFromID.glsl"/>

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
    vec2 position = getQuadVertexPositionFromID();
    v_texCoord = position+0.5;
    gl_Position = vec4(position*2.0, 0.0, 1.0);
}
`
    );
    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'UnpackLDRAlphaImageShader.fragmentShader',
      `
precision highp float;

varying vec2 v_texCoord;
uniform sampler2D ldrSampler;
uniform sampler2D alphaSampler;

float luminanceFromRGB(vec3 rgb) {
    return 0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b;
}


#ifdef ENABLE_ES3
    out vec4 fragColor;
#endif
void main(void) {

#ifndef ENABLE_ES3
    vec4 fragColor;
#endif

    fragColor = vec4(texture2D(ldrSampler, v_texCoord).rgb, luminanceFromRGB(texture2D(alphaSampler, v_texCoord).rgb));

#ifndef ENABLE_ES3
    gl_FragColor = fragColor;
#endif
}

`
    );
  }
}

class WireShader extends GLShader {
  constructor(gl) {
    super(gl);
    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(
      'WireShader.vertexShader',
      `
precision highp float;

attribute vec3 positions;    //(location = 0)

uniform mat4 modelMatrix;
uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

/* VS Outputs */

void main(void) {
    mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;
    gl_Position = modelViewProjectionMatrix * vec4(positions, 1.0);

    // Apply the perspective transform, and then move the vertices
    //  towards the camera by a tiny little bit...
    gl_Position.z -= 0.001 / gl_Position.w;
    //gl_Position.z *= 0.999;
}
`
    );

    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(
      'WireShader.fragmentShader',
      `
precision highp float;

uniform color wireColor;

#ifdef ENABLE_ES3
    out vec4 fragColor;
#endif
void main(void) {
#ifdef ENABLE_ES3
    gl_FragColor = color;
#else
    fragColor = color;
#endif  
}
`
    );
  }
}

const GLGeomItemChangeType = {
  GEOMITEM_CHANGED: 0,
  GEOM_CHANGED: 1,
  VISIBILITY_CHANGED: 2,
  HIGHLIGHT_CHANGED: 3,
};

/** This class abstracts the rendering of a collection of geometries to screen. 
 * @private
*/
class GLGeomItem {
  /**
   * Create a GL geom item.
   * @param {any} gl - The gl value.
   * @param {any} geomItem - The geomItem value.
   * @param {any} glGeom - The glGeom value.
   * @param {any} id - The id value.
   * @param {number} flags - The flags value.
   */
  constructor(gl, geomItem, glGeom, id, flags = null) {
    this.gl = gl;
    this.geomItem = geomItem;
    this.glGeom = glGeom;
    this.id = id;
    this.flags = flags;
    this.visible = this.geomItem.getVisible();
    this.culled = false;

    // if(glGeom.__numTriangles) {
    //   numSceneMeshTriangles += glGeom.__numTriangles
    //   console.log(this.geomItem.getName(), glGeom.__numTriangles, numSceneMeshTriangles)
    // }

    this.lightmapName = geomItem.getLightmapName();
    this.updated = new Signal();
    this.visibilityChanged = new Signal();
    this.highlightChanged = geomItem.highlightChanged;

    this.updateVisibility = this.updateVisibility.bind(this);
    this.updateVisibility = this.updateVisibility.bind(this);
    this.destroy = this.destroy.bind(this);

    if (!gl.floatTexturesSupported) {
      this.updateXfo = geomXfo => {
        this.updateGeomMatrix();
      };
    } else {
      this.updateXfo = geomXfo => {
        this.updated.emit(GLGeomItemChangeType.GEOMITEM_CHANGED);
      };
    }

    this.geomItem.geomXfoChanged.connect(this.updateXfo);
    this.geomItem.visibilityChanged.connect(this.updateVisibility);
    this.geomItem.cutAwayChanged.connect(() => {
      this.updated.emit(GLGeomItemChangeType.GEOMITEM_CHANGED);
    });
    this.highlightChangedId = this.geomItem.highlightChanged.connect(() => {
      this.updated.emit(GLGeomItemChangeType.HIGHLIGHT_CHANGED);
    });
    this.glGeom.updated.connect(() => {
      this.updated.emit(GLGeomItemChangeType.GEOM_CHANGED);
    });

    const lightmapCoordsOffset = this.geomItem.getLightmapCoordsOffset();
    const materialId = 0;
    const geomId = 0;
    this.geomData = [
      lightmapCoordsOffset.x,
      lightmapCoordsOffset.y,
      materialId,
      geomId,
    ];
  }

  /**
   * The getGeomItem method.
   * @return {any} - The return value.
   */
  getGeomItem() {
    return this.geomItem
  }

  /**
   * The getGLGeom method.
   * @return {any} - The return value.
   */
  getGLGeom() {
    return this.glGeom
  }

  /**
   * The getVisible method.
   * @return {any} - The return value.
   */
  getVisible() {
    return this.geomItem.getVisible()
  }

  /**
   * The getId method.
   * @return {any} - The return value.
   */
  getId() {
    return this.id
  }

  /**
   * The getFlags method.
   * @return {any} - The return value.
   */
  getFlags() {
    return this.flags
  }

  /**
   * The updateVisibility method.
   */
  updateVisibility() {
    const geomVisible = this.geomItem.getVisible();
    const visible = geomVisible && !this.culled;
    if (this.visible != visible) {
      this.visible = visible;
      this.visibilityChanged.emit(visible);
      this.updated.emit();
    }
  }

  /**
   * The setCullState method.
   * @param {any} culled - The culled value.
   */
  setCullState(culled) {
    this.culled = culled;
    this.updateVisibility();
  }

  /**
   * The updateGeomMatrix method.
   */
  updateGeomMatrix() {
    // Pull on the GeomXfo param. This will trigger the lazy evaluation of the operators in the scene.
    this.modelMatrixArray = this.geomItem.getGeomMat4().asArray();
  }

  /**
   * The getGeomMatrixArray method.
   * @return {any} - The return value.
   */
  getGeomMatrixArray() {
    return this.modelMatrixArray
  }

  /**
   * The bind method.
   * @param {any} renderstate - The renderstate value.
   * @return {any} - The return value.
   */
  bind(renderstate) {
    const gl = this.gl;
    const unifs = renderstate.unifs;

    if (!gl.floatTexturesSupported) {
      const modelMatrixunif = unifs.modelMatrix;
      if (modelMatrixunif) {
        gl.uniformMatrix4fv(
          modelMatrixunif.location,
          false,
          this.modelMatrixArray
        );
      }
      const drawItemDataunif = unifs.drawItemData;
      if (drawItemDataunif) {
        gl.uniform4f(drawItemDataunif.location, this.geomData);
      }
    }

    const unif = unifs.transformIndex;
    if (unif) {
      gl.uniform1i(unif.location, this.id);
    }

    if (renderstate.lightmaps && unifs.lightmap) {
      if (renderstate.boundLightmap != this.lightmapName) {
        const gllightmap = renderstate.lightmaps[this.lightmapName];
        if (gllightmap && gllightmap.glimage.isLoaded()) {
          gllightmap.glimage.bindToUniform(renderstate, unifs.lightmap);
          gl.uniform2fv(
            unifs.lightmapSize.location,
            gllightmap.atlasSize.asArray()
          );
          if (unifs.lightmapConnected) {
            gl.uniform1i(unifs.lightmapConnected.location, true);
          }
          renderstate.boundLightmap = this.lightmapName;
        } else {
          // disable lightmaps. Revert to default lighting.
          if (unifs.lightmapConnected) {
            gl.uniform1i(unifs.lightmapConnected.location, false);
          }
        }
      }
    }

    return true
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    this.geomItem.visibilityChanged.disconnect(this.updateVisibility);
    this.geomItem.geomXfoChanged.disconnect(this.updateXfo);
    this.geomItem.highlightChanged.disconnectId(this.highlightChangedId);
  }
}

const pixelsPerItem = 6; // The number of RGBA pixels per draw item.

/** This class abstracts the rendering of a collection of geometries to screen.
 * @extends GLPass
 */
class GLStandardGeomsPass extends GLPass {
  /**
   * Create a GL pass.
   */
  constructor() {
    super();

    this.__drawItems = [undefined];
    this.__drawItemsIndexFreeList = [];
    this.__dirtyItemIndices = [];
  }

  /**
   * The init method.
   * @param {any} renderer - The renderer value.
   * @param {any} passIndex - The passIndex value.
   */
  init(renderer, passIndex) {
    super.init(renderer, passIndex);

    this.__renderer.registerPass(
      treeItem => {
        if (treeItem instanceof GeomItem) {
          if (!treeItem.getMetadata('glgeomItem')) {
            const checkGeom = geomItem => {
              if (this.filterGeomItem(geomItem)) {
                if (treeItem.getGeometry() == undefined) {
                  // we will add this geomitem once it recieves its geom.
                  // TODO: what happens if the item is removed from the tree
                  // and then geom assigned? (maybe inmpossible with our tools)
                  // e.g. a big asset loaded, added to the tree, then removed again
                  // The geoms will get assigned after the tree is removed.
                  treeItem.geomAssigned.connect(() => {
                    this.addGeomItem(geomItem);
                  });
                } else {
                  this.addGeomItem(geomItem);
                }
                return true
              } else {
                return false
              }
            };

            if (treeItem.getMaterial() == undefined) {
              console.warn(
                'Scene item :' + treeItem.getPath() + ' has no material'
              );
              // TODO: listen for when the material is assigned.(like geoms below)
              return false
            } else {
              return checkGeom(treeItem)
            }
          } else {
            return false
          }
        } else {
          return false
        }
      },
      treeItem => {
        if (
          treeItem instanceof GeomItem &&
          treeItem.getMetadata('glgeomItem')
        ) {
          return this.removeGeomItem(treeItem)
        }
        return false
      }
    );
  }

  /**
   * The filterGeomItem method.
   * @param {any} geomItem - The geomItem value.
   * @return {any} - The return value.
   */
  filterGeomItem(geomItem) {
    return true
  }

  /**
   * The addShader method.
   * @param {any} material - The material value.
   * @return {any} - The return value.
   */
  addShader(material) {
    return this.__renderer.getOrCreateShader(material.getShaderName())
  }

  /**
   * The constructShaders method.
   * Given a material, generate the various shaders required to render objects
   * using this material. There should always be at least a single glshader
   * and optionally a glgeomdatashader for rendering the goem data buffer
   * and a glselectedshader for rendering selection hilghlights
   * @param {string} shaderName - The name of the base shader.
   * @return {object} - The object containing the shader instances.
   */
  constructShaders(shaderName) {
    let glgeomdatashader;
    let glselectedshader;
    
    const glshader = this.__renderer.getOrCreateShader(shaderName);
    if (glshader.constructor.getGeomDataShaderName()) {
      glgeomdatashader = this.__renderer.getOrCreateShader(
        glshader.constructor.getGeomDataShaderName()
      );
    }
    if (glshader.constructor.getSelectedShaderName()) {
      glselectedshader = this.__renderer.getOrCreateShader(
        glshader.constructor.getSelectedShaderName()
      );
    }
    return {
      glshader,
      glgeomdatashader,
      glselectedshader
    }
  }

  /**
   * The addMaterial method.
   * @param {any} material - The material value.
   * @return {any} - The return value.
   */
  addMaterial(material) {
    let glmaterial = material.getMetadata('glmaterial');
    if (glmaterial) {
      return glmaterial
    }
    const glshader = this.__renderer.getOrCreateShader(material.getShaderName());
    glmaterial = new GLMaterial(this.__gl, material, glshader);
    glmaterial.updated.connect(() => {
      this.__renderer.requestRedraw();
    });
    material.setMetadata('glmaterial', glmaterial);

    return glmaterial
  }

  /**
   * The addGeom method.
   * @param {any} geom - The geom value.
   * @return {any} - The return value.
   */
  addGeom(geom) {
    let glgeom = geom.getMetadata('glgeom');
    if (glgeom) {
      glgeom.addRef(this);
      return glgeom
    }
    const gl = this.__gl;
    if (geom instanceof Mesh || geom instanceof MeshProxy) {
      glgeom = new GLMesh(gl, geom);
    } else if (geom instanceof Lines || geom instanceof LinesProxy) {
      glgeom = new GLLines(gl, geom);
    } else if (geom instanceof Points || geom instanceof PointsProxy) {
      glgeom = new GLPoints(gl, geom);
    } else {
      throw new Error('Unsupported geom type:' + geom.constructor.name)
    }
    geom.setMetadata('glgeom', glgeom);
    glgeom.addRef(this);
    return glgeom
  }

  /**
   * The removeGeom method.
   * @param {any} geom - The geom value.
   */
  removeGeom(geom) {
    let glgeom = geom.getMetadata('glgeom');
    if (glgeom) {
      glgeom.removeRef(this); // Should result in a destroy
      return glgeom
    }
  }

  /**
   * The addGeomItem method.
   * @param {any} geomItem - The geomItem value.
   * @return {any} - The return value.
   */
  addGeomItem(geomItem) {
    // let glmaterialGeomItemSets = this.addMaterial(geomItem.getMaterial());
    // if (!glmaterialGeomItemSets)
    //     return;
    const glgeom = this.addGeom(geomItem.getGeometry());

    const flags = 1;
    let index;
    // Use recycled indices if there are any available...
    if (this.__drawItemsIndexFreeList.length > 0) {
      index = this.__drawItemsIndexFreeList.pop();
    } else {
      index = this.__drawItems.length;
      this.__drawItems.push(null);
    }
    this.__dirtyItemIndices.push(index);

    const gl = this.__gl;
    const glgeomItem = new GLGeomItem(gl, geomItem, glgeom, index, flags);
    geomItem.setMetadata('glgeomItem', glgeomItem);

    const updatedId = glgeomItem.updated.connect(type => {
      switch (type) {
        case GLGeomItemChangeType.GEOMITEM_CHANGED:
          if (this.__dirtyItemIndices.indexOf(index) != -1) return
          this.__dirtyItemIndices.push(index);
          break
        case GLGeomItemChangeType.GEOM_CHANGED:
        case GLGeomItemChangeType.VISIBILITY_CHANGED:
          break
        case GLGeomItemChangeType.HIGHLIGHT_CHANGED:
          if (this.__dirtyItemIndices.indexOf(index) != -1) return
          this.__dirtyItemIndices.push(index);
          this.__renderer.requestRedraw();
          return
      }
      this.__renderer.drawItemChanged();
    });

    this.__drawItems[index] = glgeomItem;

    // Note: before the renderer is disabled, this is a  no-op.
    this.__renderer.requestRedraw();

    geomItem.setMetadata('glpass', this);
    return glgeomItem
  }

  /**
   * The removeGeomItem method.
   * @param {any} geomItem - The geomItem value.
   * @return {any} - The return value.
   */
  removeGeomItem(geomItem) {
    if (geomItem.getMetadata('glpass') != this) return
    
    // TODO: Finish of ref counting GLGeoms.
    // I'm not sure if we ever clean up the renderer properly
    // when geoms are removed. (Run Instancing test and see if 
    // GLGeom is ever destoryed when instance counts drop to zero.)
    // this.removeGeom(geomItem.getGeometry())

    const glgeomItem = geomItem.getMetadata('glgeomItem');

    const index = glgeomItem.getId();
    this.__drawItems[index] = null;
    this.__drawItemsIndexFreeList.push(index);

    // TODO: review signal disconnections
    // glgeomItem.transformChanged.disconnectScope(this);

    // this.renderTreeUpdated.emit();
    this.__renderer.requestRedraw();

    geomItem.getMetadata('glpass');
    geomItem.deleteMetadata('glgeomItem');

    return glgeomItem
  }

  // removeMaterial(material) {
  //     const glshaderMaterials = this.__glshadermaterials[material.hash];
  //     if (!glshaderMaterials || glshaderMaterials != material.getMetadata('glshaderMaterials')) {
  //         console.warn("Material not found in pass");
  //         return;
  //     }

  //     const glmaterialGeomItemSets = material.getMetadata('glmaterialGeomItemSets');
  //     glshaderMaterials.removeMaterialGeomItemSets(glmaterialGeomItemSets);
  // };

  /**
   * The removeGLGeom method.
   * @param {any} geomItemMapping - The geomItemMapping value.
   * @param {any} materialGeomMapping - The materialGeomMapping value.
   */
  removeGLGeom(geomItemMapping, materialGeomMapping) {
    const index = materialGeomMapping.geomItemMappings.indexOf(geomItemMapping);
    materialGeomMapping.geomItemMappings.splice(index, 1);

    // Note: the GLMAterial cleans up iself now...
    // if(materialGeomMapping.geomItemMappings.length == 0 && !this.__explicitShader){
    //     this.removeMaterialGeomMapping(materialGeomMapping.glmaterial);
    // }
  }

  // ////////////////////////////////////////////////////////
  // / GeomItem IDs

  /**
   * The getGeomItem method.
   * @param {any} id - The id value.
   * @return {any} - The return value.
   */
  getGeomItem(id) {
    if (id >= this.__drawItems.length) {
      console.warn(
        'Invalid Draw Item id:' +
          id +
          ' NumItems:' +
          (this.__drawItems.length - 1)
      );
      return undefined
    }
    return this.__drawItems[id]
  }

  // ////////////////////////////////////////////////
  // Data Uploading

  /**
   * The __populateDrawItemDataArray method.
   * @param {any} geomItem - The geomItem value.
   * @param {number} index - The index value.
   * @param {any} dataArray - The dataArray value.
   * @private
   */
  __populateDrawItemDataArray(geomItem, index, dataArray) {
    const stride = pixelsPerItem * 4; // The number of floats per draw item.
    const offset = index * stride;

    // /////////////////////////
    // Geom Item Params
    const materialId = 0;
    let flags = 0;
    if (geomItem.isCutawayEnabled()) {
      const GEOMITEM_FLAG_CUTAWAY = 1; // 1<<0;
      flags |= GEOMITEM_FLAG_CUTAWAY;
    }
    const lightmapCoordsOffset = geomItem.getLightmapCoordsOffset();

    const pix0 = Vec4$1.createFromFloat32Buffer(dataArray.buffer, offset + 0);
    pix0.set(flags, materialId, lightmapCoordsOffset.x, lightmapCoordsOffset.y);

    // /////////////////////////
    // Geom Matrix
    const mat4 = geomItem.getGeomMat4();
    const pix1 = Vec4$1.createFromFloat32Buffer(dataArray.buffer, offset + 4);
    const pix2 = Vec4$1.createFromFloat32Buffer(dataArray.buffer, offset + 8);
    const pix3 = Vec4$1.createFromFloat32Buffer(dataArray.buffer, offset + 12);
    pix1.set(mat4.xAxis.x, mat4.yAxis.x, mat4.zAxis.x, mat4.translation.x);
    pix2.set(mat4.xAxis.y, mat4.yAxis.y, mat4.zAxis.y, mat4.translation.y);
    pix3.set(mat4.xAxis.z, mat4.yAxis.z, mat4.zAxis.z, mat4.translation.z);

    // /////////////////////////
    // Hilight
    const pix4 = Vec4$1.createFromFloat32Buffer(dataArray.buffer, offset + 16);
    if (geomItem.isHighlighted()) {
      const highlight = geomItem.getHighlight();
      pix4.set(highlight.r, highlight.g, highlight.b, highlight.a);
    }

    // /////////////////////////
    // Cutaway
    const pix5 = Vec4$1.createFromFloat32Buffer(dataArray.buffer, offset + 20);
    if (geomItem.isCutawayEnabled()) {
      const cutAwayVector = geomItem.getCutVector();
      const cutAwayDist = geomItem.getCutDist();
      // console.log(geomItem.getName(), geomItem.isCutawayEnabled(), flags, pix0.toString())
      pix5.set(cutAwayVector.x, cutAwayVector.y, cutAwayVector.z, cutAwayDist);
    }
  }

  /**
   * The newItemsReadyForLoading method.
   * @return {any} - The return value.
   */
  newItemsReadyForLoading() {
    return this.__dirtyItemIndices.length > 0
  }

  /**
   * The uploadGeomItems method.
   */
  uploadGeomItems() {
    const gl = this.__gl;
    if (!gl.floatTexturesSupported) {
      // Pull on the GeomXfo params. This will trigger the lazy evaluation of the operators in the scene.
      const len = this.__dirtyItemIndices.length;
      for (let i = 0; i < len; i++) {
        const drawItem = this.__drawItems[this.__dirtyItemIndices[i]];
        if (drawItem) {
          drawItem.updateGeomMatrix();
        }
      }
      this.__dirtyItemIndices = [];
      // this.renderTreeUpdated.emit();
      return
    }

    let size = Math.round(
      Math.sqrt(this.__drawItems.length * pixelsPerItem) + 0.5
    );
    // Only support power 2 textures. Else we get strange corruption on some GPUs
    // in some scenes.
    size = Math.nextPow2(size);
    // Size should be a multiple of pixelsPerItem, so each geom item is always contiguous
    // in memory. (makes updating a lot easier. See __updateItemInstanceData below)
    if (size % pixelsPerItem != 0)
      size += pixelsPerItem - (size % pixelsPerItem);

    if (!this.__drawItemsTexture) {
      this.__drawItemsTexture = new GLTexture2D(gl, {
        format: 'RGBA',
        type: 'FLOAT',
        width: size,
        height: size,
        filter: 'NEAREST',
        wrap: 'CLAMP_TO_EDGE',
        mipMapped: false,
      });
      this.__drawItemsTexture.clear();
    } else if (this.__drawItemsTexture.width != size) {
      this.__drawItemsTexture.resize(size, size);
      this.__dirtyItemIndices = Array((size * size) / pixelsPerItem)
        .fill()
        .map((v, i) => i);
    }

    gl.bindTexture(gl.TEXTURE_2D, this.__drawItemsTexture.glTex);
    const typeId = this.__drawItemsTexture.getTypeID();

    for (let i = 0; i < this.__dirtyItemIndices.length; i++) {
      const indexStart = this.__dirtyItemIndices[i];
      const yoffset = Math.floor((indexStart * pixelsPerItem) / size);
      let indexEnd = indexStart + 1;
      for (let j = i + 1; j < this.__dirtyItemIndices.length; j++) {
        const index = this.__dirtyItemIndices[j];
        if (Math.floor((index * pixelsPerItem) / size) != yoffset) {
          break
        }
        if (index != indexEnd) {
          break
        }
        indexEnd++;
      }

      // TODO: for contiguous blcoks, we create larger arrays and populate
      // and upload them in one step.
      const uploadCount = indexEnd - indexStart;
      const xoffset = (indexStart * pixelsPerItem) % size;
      const width = pixelsPerItem * uploadCount;
      const height = 1;
      const dataArray = new Float32Array(pixelsPerItem * 4 * uploadCount); // 4==RGBA pixels.

      for (let j = indexStart; j < indexEnd; j++) {
        const glgeomItem = this.__drawItems[j];
        // When an item is deleted, we allocate its index to the free list
        // and null this item in the array. skip over null items.
        if (!glgeomItem) continue
        this.__populateDrawItemDataArray(
          glgeomItem.getGeomItem(),
          j - indexStart,
          dataArray
        );
      }

      if (typeId == gl.FLOAT) {
        this.__drawItemsTexture.populate(
          dataArray,
          width,
          height,
          xoffset,
          yoffset,
          false
        );
      } else {
        const unit16s = Math.convertFloat32ArrayToUInt16Array(dataArray);
        this.__drawItemsTexture.populate(
          unit16s,
          width,
          height,
          xoffset,
          yoffset,
          false
        );
      }

      i += uploadCount - 1;
    }

    this.__dirtyItemIndices = [];
  }

  /**
   * The finalize method.
   */
  finalize() {
    if (this.__dirtyItemIndices.length == 0) return
    this.uploadGeomItems();
  }

  /**
   * The bind method.
   * @param {any} renderstate - The renderstate value.
   * @return {any} - The return value.
   */
  bind(renderstate) {
    const gl = this.__gl;
    const unifs = renderstate.unifs;
    if (this.__drawItemsTexture && unifs.instancesTexture) {
      this.__drawItemsTexture.bindToUniform(renderstate, unifs.instancesTexture);
      gl.uniform1i(
        unifs.instancesTextureSize.location,
        this.__drawItemsTexture.width
      );
    }
    return true
  }

  /**
   * The bindShader method.
   * @param {any} renderstate - The renderstate value.
   * @param {any} glshader - The glshader value.
   * @return {any} - The return value.
   */
  bindShader(renderstate, glshader) {
    if (!glshader.bind(renderstate)) return false
    if (!this.bind(renderstate)) return false
    return true
  }

  /**
   * The bindMaterial method.
   * @param {any} renderstate - The renderstate value.
   * @param {any} glmaterial - The glmaterial value.
   * @param {any} warnMissingUnifs - The warnMissingUnifs value.
   * @return {any} - The return value.
   */
  bindMaterial(renderstate, glmaterial, warnMissingUnifs) {
    return glmaterial.bind(renderstate, warnMissingUnifs)
  }
}

/** This class abstracts the rendering of a collection of geometries to screen. 
 * @private
*/
class GLGeomItemSet {
  /**
   * Create a GL geom item set.
   * @param {any} gl - The gl value.
   * @param {any} glgeom - The glgeom value.
   */
  constructor(gl, glgeom) {
    this.gl = gl;
    this.glgeom = glgeom;
    this.glgeomItems = [];
    this.glgeomItems_freeIndices = [];
    this.glgeomItemSignalIds = [];
    this.drawIdsArray = null;
    this.drawIdsBuffer = null;
    this.drawIdsBufferDirty = true;

    this.highlightedIdsArray = null;
    this.highlightedIdsBuffer = null;
    this.highlightedIdsBufferDirty = true;

    // this.inverted = false;
    this.lightmapName = undefined;

    this.drawCountChanged = new Signal();

    this.visibleItems = [];
    this.highlightedItems = [];
  }

  /**
   * The getGLGeom method.
   * @return {any} - The return value.
   */
  getGLGeom() {
    return this.glgeom
  }

  // getGLGeomItemCount() {
  //     return this.glgeomItems.length;
  // }

  // getGLGeomItem(index) {
  //     return this.glgeomItems[index];
  // }

  // //  Note: used by patternade to iterate over items.
  // getGLGeomItems() {
  //     return this.glgeomItems;
  // }

  /**
   * The getLightmapName method.
   * @return {any} - The return value.
   */
  getLightmapName() {
    return this.lightmapName
  }

  /**
   * The getDrawCount method.
   * @return {any} - The return value.
   */
  getDrawCount() {
    return this.visibleItems.length
  }

  /**
   * The addGeomItem method.
   * @param {any} glgeomItem - The glgeomItem value.
   */
  addGeomItem(glgeomItem) {
    let index;
    if (this.glgeomItems_freeIndices.length > 0) {
      index = this.glgeomItems_freeIndices.pop();
    } else {
      index = this.glgeomItems.length;
      this.glgeomItems.push(null);
    }
    if (glgeomItem.visible) {
      this.visibleItems.push(index);
      this.drawCountChanged.emit(1);
    }
    if (glgeomItem.getGeomItem().isHighlighted()) {
      this.highlightedItems.push(index);
      this.highlightedIdsBufferDirty = true;
    }

    if (this.glgeomItems.length == 1) {
      this.lightmapName = glgeomItem.getGeomItem().getLightmapName();
    }

    const signalIds = {};

    signalIds.sel = glgeomItem.highlightChanged.connect(() => {
      if (glgeomItem.getGeomItem().isHighlighted()) {
        // Note: highlightChanged is fired when the color changes
        // or another hilight is added over the top. We avoid
        // adding the same index again here. (TODO: use Set?)
        if (this.highlightedItems.indexOf(index) != -1) return
        this.highlightedItems.push(index);
      } else {
        this.highlightedItems.splice(this.highlightedItems.indexOf(index), 1);
      }
      // console.log("highlightChanged:", glgeomItem.getGeomItem().getName(), glgeomItem.getGeomItem().isHighlighted(), this.highlightedItems)
      this.highlightedIdsBufferDirty = true;
    });

    signalIds.vis = glgeomItem.visibilityChanged.connect(visible => {
      if (visible) {
        this.visibleItems.push(index);
        this.drawCountChanged.emit(1);
      } else {
        this.visibleItems.splice(this.visibleItems.indexOf(index), 1);
        this.drawCountChanged.emit(-1);
      }
      this.drawIdsBufferDirty = true;
    });

    this.glgeomItems[index] = glgeomItem;
    this.glgeomItemSignalIds[index] = signalIds;

    this.drawIdsBufferDirty = true;
  }

  /**
   * The removeGeomItem method.
   * @param {any} glgeomItem - The glgeomItem value.
   */
  removeGeomItem(glgeomItem) {
    const index = this.glgeomItems.indexOf(glgeomItem);
    const signalIds = this.glgeomItemSignalIds[index];
    glgeomItem.highlightChanged.disconnectId(signalIds.sel);
    glgeomItem.visibilityChanged.disconnectId(signalIds.vis);

    this.glgeomItems[index] = null;
    this.glgeomItemSignalIds[index] = null;

    this.glgeomItems_freeIndices.push(index);

    if (glgeomItem.visible) {
      this.visibleItems.splice(this.visibleItems.indexOf(index), 1);
      this.drawCountChanged.emit(-1);
    }
    const highlighted = glgeomItem.getGeomItem().isHighlighted();
    if (highlighted) {
      this.highlightedItems.splice(this.highlightedItems.indexOf(index), 1);
    }
    this.drawIdsBufferDirty = true;
    // console.log("removeGeomItem:", glgeomItem.getGeomItem().getName(), this.glgeomItems.length)
    if (this.glgeomItems.length == 0) {
      this.destroy();
    }
  }

  // ////////////////////////////////////
  // Instance Ids

  /**
   * The updateDrawIDsBuffer method.
   * The culling system will specify a subset of the total number of items for
   * drawing.
   */
  updateDrawIDsBuffer() {
    const gl = this.gl;
    if (!gl.floatTexturesSupported) {
      this.drawIdsBufferDirty = false;
      return
    }
    if (
      this.drawIdsBuffer &&
      this.glgeomItems.length != this.drawIdsArray.length
    ) {
      this.gl.deleteBuffer(this.drawIdsBuffer);
      this.drawIdsBuffer = null;
    }
    if (!this.drawIdsBuffer) {
      this.drawIdsArray = new Float32Array(this.glgeomItems.length);
      this.drawIdsBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, this.drawIdsBuffer);
    }

    // Collect all visible geom ids into the instanceIds array.
    // Note: the draw count can be less than the number of instances
    // we re-use the same buffer and simply invoke fewer draw calls.
    this.visibleItems.forEach((index, tgtIndex) => {
      this.drawIdsArray[tgtIndex] = this.glgeomItems[index].getId();
    });
    gl.bindBuffer(gl.ARRAY_BUFFER, this.drawIdsBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, this.drawIdsArray, gl.STATIC_DRAW);

    this.drawIdsBufferDirty = false;
  }

  // ////////////////////////////////////
  // Selected Items

  /**
   * The updateHighlightedIDsBuffer method.
   */
  updateHighlightedIDsBuffer() {
    const gl = this.gl;
    if (!gl.floatTexturesSupported) {
      this.highlightedIdsBufferDirty = false;
      return
    }
    if (
      this.highlightedIdsBuffer &&
      this.glgeomItems.length != this.highlightedIdsArray.length
    ) {
      this.gl.deleteBuffer(this.highlightedIdsBuffer);
      this.highlightedIdsBuffer = null;
    }

    // Collect all visible geom ids into the instanceIds array.
    // Note: the draw count can be less than the number of instances
    // we re-use the same buffer and simply invoke fewer draw calls.
    if (
      !this.highlightedIdsArray ||
      this.highlightedItems.length > this.highlightedIdsArray.length
    ) {
      this.highlightedIdsArray = new Float32Array(this.highlightedItems.length);
      if (this.highlightedIdsBuffer) {
        gl.deleteBuffer(this.highlightedIdsBuffer);
        this.highlightedIdsBuffer = null;
      }
    }

    this.highlightedItems.forEach((index, tgtIndex) => {
      this.highlightedIdsArray[tgtIndex] = this.glgeomItems[index].getId();
    });

    if (!this.highlightedIdsBuffer) {
      this.highlightedIdsBuffer = gl.createBuffer();
    }
    gl.bindBuffer(gl.ARRAY_BUFFER, this.highlightedIdsBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, this.highlightedIdsArray, gl.STATIC_DRAW);

    this.highlightedIdsBufferDirty = false;
  }

  // ////////////////////////////////////
  // Drawing

  /**
   * The draw method.
   * @param {any} renderstate - The renderstate value.
   */
  draw(renderstate) {
    if (this.visibleItems.length == 0) {
      return
    }
    if (this.drawIdsBufferDirty) {
      this.updateDrawIDsBuffer();
    }

    const gl = this.gl;
    const unifs = renderstate.unifs;

    if (renderstate.lightmaps && unifs.lightmap) {
      if (renderstate.boundLightmap != this.lightmapName) {
        const gllightmap = renderstate.lightmaps[this.lightmapName];
        if (gllightmap && gllightmap.glimage.isLoaded()) {
          gllightmap.glimage.bindToUniform(renderstate, unifs.lightmap);
          gl.uniform2fv(
            unifs.lightmapSize.location,
            gllightmap.atlasSize.asArray()
          );
          if (unifs.lightmapConnected) {
            gl.uniform1i(unifs.lightmapConnected.location, true);
          }
          renderstate.boundLightmap = this.lightmapName;
        } else {
          // disable lightmaps. Revert to default lighting.
          if (unifs.lightmapConnected) {
            gl.uniform1i(unifs.lightmapConnected.location, false);
          }
        }
      }
    }

    this.__bindAndRender(renderstate, this.visibleItems, this.drawIdsBuffer);
  }

  /**
   * The drawHighlighted method.
   * @param {any} renderstate - The renderstate value.
   */
  drawHighlighted(renderstate) {
    if (this.highlightedItems.length == 0) {
      return
    }
    if (this.highlightedIdsBufferDirty) {
      this.updateHighlightedIDsBuffer();
    }

    this.__bindAndRender(
      renderstate,
      this.highlightedItems,
      this.highlightedIdsBuffer
    );
  }

  /**
   * The __bindAndRender method.
   * @param {any} renderstate - The renderstate value.
   * @param {any} itemIndices - The itemIndices value.
   * @param {any} drawIdsBuffer - The drawIdsBuffer value.
   * @private
   */
  __bindAndRender(renderstate, itemIndices, drawIdsBuffer) {
    const gl = this.gl;
    const unifs = renderstate.unifs;

    // Lazy unbinding. We can have situations where we have many materials
    // all bound to the same geom. e.g. lots of billboards
    // We can avoid the expensive re-binding of geoms with a simple check.
    if (renderstate.glgeom != this.glgeom) {
      this.glgeom.bind(renderstate);
      renderstate.glgeom = this.glgeom;
    }

    if (
      !gl.floatTexturesSupported ||
      !gl.drawElementsInstanced ||
      !renderstate.supportsInstancing
    ) {
      if (renderstate.unifs.instancedDraw) {
        gl.uniform1i(renderstate.unifs.instancedDraw.location, 0);
      }
      itemIndices.forEach(index => {
        this.glgeomItems[index].bind(renderstate);
        renderstate.bindViewports(unifs, () => {
          this.glgeom.draw(renderstate);
        });
      });
    } else {
      // console.log("draw:"+ this.drawIdsArray);

      // Specify an instanced draw to the shader so it knows how
      // to retrieve the modelmatrix.
      gl.uniform1i(renderstate.unifs.instancedDraw.location, 1);

      // The instanced transform ids are bound as an instanced attribute.
      const location = renderstate.attrs.instancedIds.location;
      gl.enableVertexAttribArray(location);
      gl.bindBuffer(gl.ARRAY_BUFFER, drawIdsBuffer);
      gl.vertexAttribPointer(location, 1, gl.FLOAT, false, 1 * 4, 0);
      gl.vertexAttribDivisor(location, 1); // This makes it instanced

      renderstate.bindViewports(unifs, () => {
        this.glgeom.drawInstanced(itemIndices.length);
      });
    }
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
  }
}

/** Class representing GL shader materials. 
 * @private
*/
class GLShaderMaterials {
  /**
   * Create a GL shader material.
   * @param {any} glshader - The glshader value.
   * @param {any} glgeomdatashader - The glgeomdatashader value.
   * @param {any} glselectedshader - The glselectedshader value.
   */
  constructor(shaders) {
    this.glshader = shaders.glshader;
    this.glgeomdatashader = shaders.glgeomdatashader;
    this.glselectedshader = shaders.glselectedshader;
    this.glmaterialGeomItemSets = [];
  }

  /**
   * The findMaterialGeomItemSets method.
   * @param {any} glmaterial - The glmaterial value.
   * @return {any} - The return value.
   */
  findMaterialGeomItemSets(glmaterial) {
    for (const matGeomItemSet of this.glmaterialGeomItemSets) {
      if (matGeomItemSet.glmaterial == glmaterial) return matGeomItemSet
    }
  }

  /**
   * The addMaterialGeomItemSets method.
   * @param {any} glmaterialGeomItemSets - The glmaterialGeomItemSets value.
   */
  addMaterialGeomItemSets(glmaterialGeomItemSets) {
    this.glmaterialGeomItemSets.push(glmaterialGeomItemSets);
  }

  /**
   * The removeMaterialGeomItemSets method.
   * @param {any} glmaterialGeomItemSets - The glmaterialGeomItemSets value.
   */
  removeMaterialGeomItemSets(glmaterialGeomItemSets) {
    const index = this.glmaterialGeomItemSets.indexOf(glmaterialGeomItemSets);
    this.glmaterialGeomItemSets.splice(index, 1);
  }

  /**
   * The getMaterialGeomItemSets method.
   * @return {any} - The return value.
   */
  getMaterialGeomItemSets() {
    return this.glmaterialGeomItemSets
  }
}

/** Class representing GL material geom item sets. 
 * @private
*/
class GLMaterialGeomItemSets {
  /**
   * Create a GL material geom item set.
   * @param {any} glmaterial - The glmaterial value.
   */
  constructor(glmaterial = undefined) {
    this.glmaterial = glmaterial;
    this.geomItemSets = [];
    this.drawCount = 0;
    this.visibleInGeomDataBuffer = glmaterial.getMaterial().visibleInGeomDataBuffer;
    this.__drawCountChanged = this.__drawCountChanged.bind(this);
  }

  /**
   * The getGLMaterial method.
   * @return {any} - The return value.
   */
  getGLMaterial() {
    return this.glmaterial
  }

  /**
   * The __drawCountChanged method.
   * @param {any} change - The change value.
   * @private
   */
  __drawCountChanged(change) {
    this.drawCount += change;
  }

  /**
   * The addGeomItemSet method.
   * @param {any} geomItemSet - The geomItemSet value.
   */
  addGeomItemSet(geomItemSet) {
    if (this.geomItemSets.indexOf(geomItemSet) == -1) {
      this.geomItemSets.push(geomItemSet);

      this.drawCount += geomItemSet.drawCount;
      geomItemSet.drawCountChanged.connect(this.__drawCountChanged);
    } else {
      console.warn('geomItemSet already added to GLMaterialGeomItemSets');
    }
  }

  /**
   * The removeGeomItemSet method.
   * @param {any} geomItemSet - The geomItemSet value.
   */
  removeGeomItemSet(geomItemSet) {
    const index = this.geomItemSets.indexOf(geomItemSet);
    this.geomItemSets.splice(index, 1);
    geomItemSet.drawCountChanged.disconnect(this.__drawCountChanged);
    geomItemSet.destroy();
  }

  /**
   * The removeGeomItemSet method.
   * @param {any} glgeom - The glgeom value.
   * @return {any} - The return value.
   */
  findGeomItemSet(glgeom) {
    for (const geomItemSet of this.geomItemSets) {
      if (geomItemSet.getGLGeom() == glgeom) return geomItemSet
    }
    return null
  }

  /**
   * The getGeomItemSets method.
   * @return {any} - The return value.
   */
  getGeomItemSets() {
    return this.geomItemSets
  }
}

/** Class representing a GL opaque geoms pass.
 * @extends GLStandardGeomsPass
 * @private
 */
class GLOpaqueGeomsPass extends GLStandardGeomsPass {
  /**
   * Create a GL opaque geoms pass.
   */
  constructor() {
    super();

    // Optimized Render Tree
    // Structured like so for efficient render traversial.
    // {GLShaders}[GLMaterials][GLGeoms][GLGeomItems]
    this.__glshadermaterials = {};
  }

  /**
   * The init method.
   * @param {any} renderer - The renderer value.
   * @param {any} passIndex - The passIndex value.
   */
  init(renderer, passIndex) {
    super.init(renderer, passIndex);
  }

  // ///////////////////////////////////
  // Bind to Render Tree

  /**
   * The filterGeomItem method.
   * @param {any} geomItem - The geomItem value.
   * @return {boolean} - The return value.
   */
  filterGeomItem(geomItem) {
    const shaderClass = geomItem.getMaterial().getShaderClass();
    if (shaderClass) {
      if (shaderClass.isTransparent()) return false
      if (shaderClass.isOverlay()) return false

      const baseColorParam = geomItem.getMaterial().getParameter('BaseColor');
      if (baseColorParam && baseColorParam.getValue().a < 1.0) return false

      return true
    }
    return false
  }

  /**
   * The addGeomItem method.
   * @param {any} geomItem - The geomItem value.
   * @return {boolean} - The return value.
   */
  addGeomItem(geomItem) {
    const material = geomItem.getMaterial();
    const shaderName = material.getShaderName();
    const shaders = this.constructShaders(shaderName);
    let glshader = shaders.glshader;
    let glgeomdatashader = shaders.glgeomdatashader;
    let glselectedshader = shaders.glselectedshader;
    // const glshader = this.__renderer.getOrCreateShader(shaderName)
    // if (glshader.constructor.getGeomDataShaderName())
    //   glgeomdatashader = this.__renderer.getOrCreateShader(
    //     glshader.constructor.getGeomDataShaderName()
    //   )
    // if (glshader.constructor.getSelectedShaderName())
    //   glselectedshader = this.__renderer.getOrCreateShader(
    //     glshader.constructor.getSelectedShaderName()
    //   )
    const glmaterial = this.addMaterial(material);
    const glgeomItem = super.addGeomItem(geomItem);

    let glshaderMaterials = this.__glshadermaterials[shaderName];
    if (!glshaderMaterials) {
      glshaderMaterials = new GLShaderMaterials(shaders);
      this.__glshadermaterials[shaderName] = glshaderMaterials;
    }

    let glmaterialGeomItemSets = glshaderMaterials.findMaterialGeomItemSets(
      glmaterial
    );
    if (!glmaterialGeomItemSets) {
      glmaterialGeomItemSets = new GLMaterialGeomItemSets(glmaterial);
      glshaderMaterials.addMaterialGeomItemSets(glmaterialGeomItemSets);
    }

    let geomItemSet = glmaterialGeomItemSets.findGeomItemSet(glgeomItem.glGeom);
    if (!geomItemSet) {
      geomItemSet = new GLGeomItemSet(this.__gl, glgeomItem.glGeom);
      glmaterialGeomItemSets.addGeomItemSet(geomItemSet);
    }

    geomItem.setMetadata('geomItemSet', geomItemSet);

    geomItemSet.addGeomItem(glgeomItem);

    return true
  }

  /**
   * The removeGeomItem method.
   * @param {any} geomItem - The geomItem value.
   * @return {boolean} - The return value.
   */
  removeGeomItem(geomItem) {
    const glgeomItem = super.removeGeomItem(geomItem);
    if (!glgeomItem) return false

    const geomItemSet = geomItem.getMetadata('geomItemSet');
    if (geomItemSet) {
      // Note: for now leave the material and geom in place. Multiple
      // GeomItems can reference a given material/geom, so we simply wait
      // for them to be destroyed.
      geomItemSet.removeGeomItem(glgeomItem);
      geomItem.deleteMetadata('geomItemSet');
    }

    return true
  }

  /**
   * The removeMaterial method.
   * @param {any} material - The material value.
   */
  removeMaterial(material) {
    const glshaderMaterials = this.__glshadermaterials[material.hash];
    if (
      !glshaderMaterials ||
      glshaderMaterials != material.getMetadata('glshaderMaterials')
    ) {
      console.warn('Material not found in pass');
      return
    }

    const glmaterialGeomItemSets = material.getMetadata(
      'glmaterialGeomItemSets'
    );
    glshaderMaterials.removeMaterialGeomItemSets(glmaterialGeomItemSets);
  }

  /**
   * The __traverseTreeAndDraw method.
   * @param {any} renderstate - The renderstate value.
   * @private
   */
  __traverseTreeAndDraw(renderstate) {
    for (const shaderName in this.__glshadermaterials) {
      const glshaderMaterials = this.__glshadermaterials[shaderName];
      const glshader = glshaderMaterials.glshader;
      if (this.bindShader(renderstate, glshader)) {
        const glmaterialGeomItemSets = glshaderMaterials.getMaterialGeomItemSets();
        for (const glmaterialGeomItemSet of glmaterialGeomItemSets) {
          if (glmaterialGeomItemSet.drawCount == 0) continue
          if (
            this.bindMaterial(
              renderstate,
              glmaterialGeomItemSet.getGLMaterial(),
              true
            )
          ) {
            const glgeomitemsets = glmaterialGeomItemSet.getGeomItemSets();
            for (const gldrawitemset of glgeomitemsets) {
              gldrawitemset.draw(renderstate);
            }
          }
        }
      }
      glshader.unbind(renderstate);
    }

    if (renderstate.glgeom) {
      renderstate.glgeom.unbind(renderstate);
    }
  }

  /**
   * The draw method.
   * @param {any} renderstate - The renderstate value.
   */
  draw(renderstate) {
    if (this.newItemsReadyForLoading()) this.finalize();

    const gl = this.__gl;
    gl.disable(gl.BLEND);

    gl.disable(gl.CULL_FACE);

    gl.enable(gl.DEPTH_TEST);
    gl.depthFunc(gl.LESS);
    gl.depthMask(true);

    this.__traverseTreeAndDraw(renderstate);
  }

  /**
   * The drawHighlightedGeoms method.
   * @param {any} renderstate - The renderstate value.
   */
  drawHighlightedGeoms(renderstate) {
    const gl = this.__gl;
    gl.disable(gl.CULL_FACE); // 2-sided rendering.

    // for (let glshaderMaterials of this.__glshadermaterials) {
    for (const shaderName in this.__glshadermaterials) {
      const glshaderMaterials = this.__glshadermaterials[shaderName];
      if (!glshaderMaterials.glselectedshader) continue
      if (!this.bindShader(renderstate, glshaderMaterials.glselectedshader))
        continue

      const glmaterialGeomItemSets = glshaderMaterials.getMaterialGeomItemSets();
      for (const glmaterialGeomItemSet of glmaterialGeomItemSets) {
        const glgeomitemsets = glmaterialGeomItemSet.getGeomItemSets();
        for (const gldrawitemset of glgeomitemsets) {
          gldrawitemset.drawHighlighted(renderstate);
        }
      }
    }

    if (renderstate.glgeom) {
      renderstate.glgeom.unbind(renderstate);
    }
  }

  /**
   * The getGeomItemAndDist method.
   * @param {any} geomData - The geomData value.
   * @return {any} - The return value.
   */
  getGeomItemAndDist(geomData) {
    let itemId;
    let dist;
    const gl = this.__gl;
    if (gl.floatGeomBuffer) {
      itemId = Math.round(geomData[1]);
      dist = geomData[3];
    } else {
      itemId = geomData[0] + (geomData[1] << 8);
      dist = Math.decode16BitFloatFrom2xUInt8([geomData[2], geomData[3]]);
    }

    const glgeomItem = this.__drawItems[itemId];
    if (glgeomItem) {
      return {
        geomItem: glgeomItem.getGeomItem(),
        dist,
      }
    }
  }

  /**
   * The drawGeomData method.
   * @param {any} renderstate - The renderstate value.
   */
  drawGeomData(renderstate) {
    if (this.newItemsReadyForLoading()) this.finalize();

    const gl = this.__gl;
    gl.disable(gl.BLEND);
    gl.disable(gl.CULL_FACE);
    gl.enable(gl.DEPTH_TEST);
    gl.depthFunc(gl.LESS);
    gl.depthMask(true);

    // eslint-disable-next-line guard-for-in
    for (const shaderName in this.__glshadermaterials) {
      const glshaderMaterials = this.__glshadermaterials[shaderName];
      if (!glshaderMaterials.glgeomdatashader) continue
      if (!this.bindShader(renderstate, glshaderMaterials.glgeomdatashader))
        continue

      {
        const unif = renderstate.unifs.floatGeomBuffer;
        if (unif) {
          gl.uniform1i(unif.location, gl.floatGeomBuffer ? 1 : 0);
        }
      }
      {
        const unif = renderstate.unifs.passId;
        if (unif) {
          gl.uniform1i(unif.location, this.__passIndex);
        }
      }

      const glmaterialGeomItemSets = glshaderMaterials.getMaterialGeomItemSets();
      for (const glmaterialGeomItemSet of glmaterialGeomItemSets) {
        if (
          glmaterialGeomItemSet.drawCount == 0 ||
          !glmaterialGeomItemSet.visibleInGeomDataBuffer
        )
          continue
        // Sometimes materials contain params required for rendering.
        // e.g. PointSize.
        // Note: avoid generating warnings for missing uniforms.
        if (
          this.bindMaterial(
            renderstate,
            glmaterialGeomItemSet.getGLMaterial(),
            false
          )
        ) {
          const glgeomitemsets = glmaterialGeomItemSet.getGeomItemSets();
          for (const gldrawitemset of glgeomitemsets) {
            gldrawitemset.draw(renderstate);
          }
        }
      }
    }

    if (renderstate.glgeom) {
      renderstate.glgeom.unbind(renderstate);
    }
  }
}

GLRenderer.registerPass(GLOpaqueGeomsPass, PassType.OPAQUE);

/** Class representing a GL transparent geoms pass.
 * @extends GLStandardGeomsPass
 * @private
 */
class GLTransparentGeomsPass extends GLStandardGeomsPass {
  /**
   * Create GL transparent geoms pass.
   */
  constructor() {
    super();
  }

  /**
   * The init method.
   * @param {any} renderer - The renderer value.
   * @param {any} passIndex - The passIndex value.
   */
  init(renderer, passIndex) {
    super.init(renderer, passIndex);

    this.transparentItems = [];
    this.freeList = [];
    this.visibleItems = [];
    this.prevSortCameraPos = new Vec3$1(999, 999, 999);
    this.resort = false;
  }

  /**
   * The init method.
   * @param {any} geomItem - The geomItem value.
   * @return {boolean} - The return value.
   */
  filterGeomItem(geomItem) {
    const shaderClass = geomItem.getMaterial().getShaderClass();
    if (shaderClass) {
      if (shaderClass.isTransparent()) return true
      if (shaderClass.isOverlay()) return false

      const baseColorParam = geomItem.getMaterial().getParameter("BaseColor");
      if (baseColorParam && baseColorParam.getValue().a < 0.999)
        return true;
    }
    return false
  }

  /**
   * The addGeomItem method.
   * @param {any} geomItem - The geomItem value.
   */
  addGeomItem(geomItem) {
    const material = geomItem.getMaterial();
    const shaderName = material.getShaderName();
    const shaders = this.constructShaders(shaderName);
    const glmaterial = this.addMaterial(material);
    const glgeomitem = super.addGeomItem(geomItem);

    const visibilityChangedId = geomItem.visibilityChanged.connect(visible => {
      if (visible) {
        this.visibleItems.push(item);
      } else {
        const index = this.visibleItems.indexOf(item);
        this.visibleItems.splice(index, 1);
      }
    });
    const geomXfoChangedId = geomItem.geomXfoChanged.connect(() => {
      this.resort = true;
    });

    const item = {
      geomItem,
      shaders,
      glmaterial,
      glgeomitem,
      visibilityChangedId,
      geomXfoChangedId,
    };
    let itemindex;
    if (this.freeList.length > 0) itemindex = this.freeList.pop();
    else itemindex = this.transparentItems.length;
    this.transparentItems[itemindex] = item;
    geomItem.setMetadata('itemIndex', itemindex);
    if (geomItem.getVisible()) {
      this.visibleItems.push(item);
    }

    // force a resort.
    this.resort = true;
  }

  /**
   * The removeGeomItem method.
   * @param {any} geomItem - The geomItem value.
   */
  removeGeomItem(geomItem) {
    if (!super.removeGeomItem(geomItem)) return

    const itemindex = geomItem.getMetadata('itemIndex');
    const item = this.transparentItems[itemindex];
    this.transparentItems[itemindex] = null;
    this.freeList.push(itemindex);

    const visibleindex = this.visibleItems.indexOf(item);
    if (visibleindex != -1) this.visibleItems.splice(visibleindex, 1);
  }

  /**
   * The sortItems method.
   * @param {any} viewPos - The viewPos value.
   */
  sortItems(viewPos) {
    for (const transparentItem of this.visibleItems) {
      const mat4 = transparentItem.glgeomitem.geomItem.getGeomMat4();
      transparentItem.dist = mat4.translation.distanceTo(viewPos);
    }
    this.visibleItems.sort((a, b) =>
      a.dist > b.dist ? -1 : a.dist < b.dist ? 1 : 0
    );
    this.prevSortCameraPos = viewPos;
    this.resort = false;
  }


  _drawItem(renderstate, transparentItem, cache) {
    if (cache.currentglMaterial != transparentItem.glmaterial) {
      cache.currentglMaterial = transparentItem.glmaterial;
      if (!cache.currentglMaterial.bind(renderstate)) {
        return
      }
    }

    const glgeomitem = transparentItem.glgeomitem;
    if (cache.currentglGeom != glgeomitem.glGeom) {
      cache.currentglGeom = glgeomitem.glGeom;
      if (!cache.currentglGeom.bind(renderstate)) {
        return
      }
    }

    if (glgeomitem.bind(renderstate)) {
      // Specify an non-instanced draw to the shader
      if (renderstate.unifs.instancedDraw) {
        const gl = this.__gl;
        gl.uniform1i(renderstate.unifs.instancedDraw.location, 0);
        gl.disableVertexAttribArray(renderstate.attrs.instancedIds.location);
      }

      renderstate.bindViewports(renderstate.unifs, () => {
        cache.currentglGeom.draw(renderstate);
      });
    }
  }

  /**
   * The _drawItems method.
   * @param {any} renderstate - The renderstate value.
   * @private
   */
  _drawItems(renderstate) {
    const cache = {
      currentglShader: null,
      currentglMaterial: null,
      currentglGeom: null,
    };
    for (const transparentItem of this.visibleItems) {
      if (cache.currentglShader != transparentItem.shaders.glshader) {
        // Some passes, like the depth pass, bind custom uniforms.
        if (!this.bindShader(renderstate, transparentItem.shaders.glshader)) {
          continue
        }
        cache.currentglShader = transparentItem.shaders.glshader;
      }

      this._drawItem(renderstate, transparentItem, cache);
    }

    if (cache.currentglGeom) cache.currentglGeom.unbind(renderstate);
  }

  /**
   * The draw method.
   * @param {any} renderstate - The renderstate value.
   */
  draw(renderstate) {
    if (this.visibleItems.length == 0) return

    if (this.newItemsReadyForLoading()) this.finalize();

    const gl = this.__gl;

    const viewPos = renderstate.viewXfo.tr;
    // TODO: Avoid sorting if the camera did not movemore than 30cm
    if (this.resort || viewPos.distanceTo(this.prevSortCameraPos) > 0.3)
      this.sortItems(viewPos);

    gl.enable(gl.DEPTH_TEST);
    gl.depthFunc(gl.LESS);
    gl.depthMask(true);

    gl.enable(gl.BLEND);
    gl.blendEquation(gl.FUNC_ADD);
    // Complex transparent surfaces require mutiple passes.
    // First the multiply pass tints the background color, simulating
    // light passing through the surface, and then the add layer
    // adds new color to the backbuffer to simulate light bouncing off
    // the surface.

    // TODO: Optimise this system.
    // After depth sorting, we should split the items into 2 groups.
    // Multipy items, and Add  items. (Many items will be in both)
    // Then we can simply check if we have any multiply items here
    // before rendering all items.

    renderstate.pass = 'MULTIPLY';
    gl.blendFunc(gl.DST_COLOR, gl.ZERO); // For multiply, select this.
    this._drawItems(renderstate);

    renderstate.pass = 'ADD';
    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA); // For add
    this._drawItems(renderstate);

    gl.disable(gl.BLEND);
  }
  
  /**
   * The drawHighlightedGeoms method.
   * @param {any} renderstate - The renderstate value.
   */
  drawHighlightedGeoms(renderstate) {
    const gl = this.__gl;
    gl.disable(gl.CULL_FACE); // 2-sided rendering.

    const cache = {
      currentglShader: null,
      currentglMaterial: null,
      currentglGeom: null,
    };
    for (const transparentItem of this.visibleItems) {
      if (!transparentItem.geomItem.isHighlighted()) continue
      if (!transparentItem.shaders.glselectedshader) continue
      const shaders = transparentItem.shaders;
      if (cache.currentglShader != shaders.glselectedshader) {
        // Some passes, like the depth pass, bind custom uniforms.
        if (!this.bindShader(renderstate, shaders.glselectedshader)) {
          continue
        }
        cache.currentglShader = shaders.glselectedshader;
      }

      this._drawItem(renderstate, transparentItem, cache);
    }

    if (cache.currentglGeom) cache.currentglGeom.unbind(renderstate);
  }

  /**
   * The getGeomItemAndDist method.
   * @param {any} geomData - The geomData value.
   * @return {any} - The return value.
   */
  getGeomItemAndDist(geomData) {
    let itemId;
    let dist;
    const gl = this.__gl;
    if (gl.floatGeomBuffer) {
      itemId = Math.round(geomData[1]);
      dist = geomData[3];
    } else {
      itemId = geomData[0] + (geomData[1] << 8);
      dist = Math.decode16BitFloatFrom2xUInt8([geomData[2], geomData[3]]);
    }

    const glgeomItem = this.__drawItems[itemId];
    if (glgeomItem) {
      return {
        geomItem: glgeomItem.getGeomItem(),
        dist,
      }
    }
  }

  /**
   * The drawGeomData method.
   * @param {any} renderstate - The renderstate value.
   */
  drawGeomData(renderstate) {
    if (this.newItemsReadyForLoading()) this.finalize();

    const gl = this.__gl;
    gl.disable(gl.BLEND);
    gl.disable(gl.CULL_FACE);
    gl.enable(gl.DEPTH_TEST);
    gl.depthFunc(gl.LESS);
    gl.depthMask(true);

    const cache = {
      currentglShader: null,
      currentglMaterial: null,
      currentglGeom: null,
    };
    for (const transparentItem of this.visibleItems) {
      const shaders = transparentItem.shaders;
      if (cache.currentglShader != shaders.glgeomdatashader) {
        // Some passes, like the depth pass, bind custom uniforms.
        if (!this.bindShader(renderstate, shaders.glgeomdatashader)) {
          continue
        }
        cache.currentglShader = shaders.glgeomdatashader;
      }
      {
        const unif = renderstate.unifs.floatGeomBuffer;
        if (unif) {
          gl.uniform1i(unif.location, gl.floatGeomBuffer ? 1 : 0);
        }
      }
      {
        const unif = renderstate.unifs.passId;
        if (unif) {
          gl.uniform1i(unif.location, this.__passIndex);
        }
      }

      this._drawItem(renderstate, transparentItem, cache);
    }

    if (cache.currentglGeom) cache.currentglGeom.unbind(renderstate);
  }
}

GLRenderer.registerPass(GLTransparentGeomsPass, PassType.TRANSPARENT);

const pixelsPerItem$1 = 5; // The number of pixels per draw item.

/** Class representing a GL billboards pass.
 * @extends GLPass
 * @private
 */
class GLBillboardsPass extends GLPass {
  /**
   * Create a GL billboards pass.
   */
  constructor() {
    super();
  }

  /**
   * The init method.
   * @param {any} renderer - The renderer value.
   * @param {any} passIndex - The passIndex value.
   */
  init(renderer, passIndex) {
    super.init(renderer, passIndex);

    this.__billboards = [];
    this.__freeIndices = [];
    this.__drawCount = 0;
    this.__threshold = 0.0;
    this.__updateRequested = false;

    this.__prevSortCameraPos = new Vec3$1();

    this.__atlas = new GLImageAtlas(
      this.__renderer.gl,
      'Billboards',
      'RGBA',
      'UNSIGNED_BYTE',
      [1, 1, 1, 0]
    );
    this.__atlas.loaded.connect(this.updated.emit);
    this.__atlas.updated.connect(this.updated.emit);

    this.__renderer.registerPass(
      treeItem => {
        if (treeItem instanceof BillboardItem) {
          this.addBillboard(treeItem);
          return true
        }
        return false
      },
      treeItem => {
        if (treeItem instanceof BillboardItem) {
          this.removeBillboard(treeItem);
          return true
        }
        return false
      }
    );
  }

  // ///////////////////////////////////
  // Bind to Render Tree

  /**
   * The filterRenderTree method.
   */
  filterRenderTree() {}


  /**
   * The addBillboard method.
   * @param {any} billboard - The billboard value.
   */
  addBillboard(billboard) {
    const imageParam = billboard.getParameter('Image');
    const image = imageParam.getValue();
    if (!image) {
      imageParam.valueChanged.connect(() => this.addBillboard(billboard));
      return
    }
    let index;
    if (this.__freeIndices.length > 0) index = this.__freeIndices.pop();
    else index = this.__billboards.length;

    const imageIndex = this.__atlas.addSubImage(image);
    billboard.setMetadata('GLBillboardsPass_Index', index);

    const visibilityChangedId = billboard.visibilityChanged.connect(() => {
      if (billboard.getVisible()) {
        this.__drawCount++;
        // The billboard Xfo might have changed while it was 
        // not visible. We need to update here.
        this.__updateBillboard(index);
      }
      else this.__drawCount--;
      this.__reqUpdateIndexArray();
    });

    const xfoChangedId = billboard.getParameter('GlobalXfo').valueChanged.connect(() => {
      if (billboard.getVisible()) {
        this.__updateBillboard(index);
        this.updated.emit();
      }
    });

    const alphaChangedId = billboard.getParameter('Alpha').valueChanged.connect(() => {
      if (billboard.getVisible()) {
        this.__updateBillboard(index);
        this.updated.emit();
      }
    });

    if (billboard.getVisible())
      this.__drawCount++;

    this.__billboards[index] = {
      billboard,
      imageIndex,
      visibilityChangedId,
      xfoChangedId,
      alphaChangedId
    };

    this.indexArrayUpdateNeeded = true;
    this.__requestUpdate();
  }

  /**
   * The removeBillboard method.
   * @param {any} billboard - The billboard value.
   */
  removeBillboard(billboard) {
    const index = billboard.getMetadata('GLBillboardsPass_Index');
    if (index == -1) {
      console.warn('Billboard already removed.');
      return
    }
    const billboardData = this.__billboards[index];

    // Currently we are getting errors when trying to re-generate the Fbo
    // after removing and then adding images back to the atlas.
    // I don't have time to figure it out, so simply adding images
    // to the atlas. (for the Zahner demo)
    // Eventually we need to clean up the atlas, so debug this using the
    // survey-point-calibration 190528_Dummy_Srvy_Data.vlexe test
    const image = billboardData.billboard.getParameter('Image').getValue();
    this.__atlas.removeSubImage(image);

    billboard.visibilityChanged.disconnectId(billboardData.visibilityChangedId);
    billboard.getParameter('GlobalXfo').valueChanged.disconnectId(billboardData.xfoChangedId);
    billboard.getParameter('Alpha').valueChanged.disconnectId(billboardData.alphaChangedId);

    this.__billboards[index] = null;
    this.__freeIndices.push(index);
    
    if (billboard.getVisible()) this.__drawCount--;

    this.indexArrayUpdateNeeded = true;
    this.__requestUpdate();
  }

  /**
   * The __populateBillboardDataArray method.
   * @param {any} billboardData - The billboardData value.
   * @param {number} index - The index value.
   * @param {any} dataArray - The dataArray value.
   * @private
   */
  __populateBillboardDataArray(billboardData, index, dataArray) {
    const billboard = billboardData.billboard;
    const mat4 = billboard.getGlobalXfo().toMat4();
    const ppm = billboard.getParameter('PixelsPerMeter').getValue();
    const scale = 1 / ppm;
    let flags = 0;
    if (billboard.getParameter('AlignedToCamera').getValue()) flags |= 1 << 2;
    const alpha = billboard.getParameter('Alpha').getValue();
    const color = billboard.getParameter('Color').getValue();
    const offset = index * pixelsPerItem$1 * 4;
    const col0 = Vec4$1.createFromFloat32Buffer(dataArray.buffer, offset);
    const col1 = Vec4$1.createFromFloat32Buffer(dataArray.buffer, offset + 4);
    const col2 = Vec4$1.createFromFloat32Buffer(dataArray.buffer, offset + 8);
    const col3 = Vec4$1.createFromFloat32Buffer(dataArray.buffer, offset + 12);
    col0.set(mat4.xAxis.x, mat4.yAxis.x, mat4.zAxis.x, mat4.translation.x);
    col1.set(mat4.xAxis.y, mat4.yAxis.y, mat4.zAxis.y, mat4.translation.y);
    col2.set(mat4.xAxis.z, mat4.yAxis.z, mat4.zAxis.z, mat4.translation.z);
    col3.set(scale, flags, billboardData.imageIndex, alpha);

    const col4 = Vec4$1.createFromFloat32Buffer(dataArray.buffer, offset + 16);
    col4.set(color.r, color.g, color.b, color.a);
  }

  /**
   * The __requestUpdate method.
   * @private
   */
  __requestUpdate() {
    if (!this.__updateRequested) {
      this.__updateRequested = true;
      setTimeout(() => {
        this.__updateBillboards();
      }, 100);
    }
  }

  /**
   * The __reqUpdateIndexArray method.
   * @private
   */
  __reqUpdateIndexArray() {
    if (this.indexArrayUpdateNeeded) return
    this.indexArrayUpdateNeeded = true;
    this.updateIndexArrayId = setTimeout(() => {
      // Another update or a draw might have occured
      // since the request was made.
      if (!this.indexArrayUpdateNeeded) return
      this.__updateIndexArray();
      this.updated.emit();
    }, 1);
  }

  // eslint-disable-next-line require-jsdoc
  __updateIndexArray() {
    const gl = this.__gl;
    // Note: When the camera moves, this array is sorted and re-upload.
    if (this.__indexArray && this.__indexArray.length != this.__drawCount) {
      gl.deleteBuffer(this.__instanceIdsBuffer);
      this.__instanceIdsBuffer = null;
    }

    this.__indexArray = new Float32Array(this.__drawCount);
    let offset = 0;
    for (let i = 0; i < this.__billboards.length; i++) {
      if (this.__billboards[i] && this.__billboards[i].billboard.getVisible()) {
        this.__indexArray[offset] = i;
        offset++;
      }
    }
    if (!this.__instanceIdsBuffer) this.__instanceIdsBuffer = gl.createBuffer();

    gl.bindBuffer(gl.ARRAY_BUFFER, this.__instanceIdsBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, this.__indexArray, gl.STATIC_DRAW);
    this.indexArrayUpdateNeeded = false;
  }

  /**
   * The __updateBillboards method.
   * @private
   */
  __updateBillboards() {

    const doIt = () => {

      if (this.indexArrayUpdateNeeded)
        this.__updateIndexArray();

      const gl = this.__gl;
      if (!this.__glshader) {
        if (!gl.__quadVertexIdsBuffer) {
          gl.setupInstancedQuad();
        }
        this.__glshader = new BillboardShader(gl);
        const shaderComp = this.__glshader.compileForTarget(
          'GLBillboardsPass',
          this.__renderer.getShaderPreproc()
        );
        this.__shaderBinding = generateShaderGeomBinding(
          gl,
          shaderComp.attrs,
          gl.__quadattrbuffers,
          gl.__quadIndexBuffer
        );
      }

      // Note: Maybe the atlas is alreadu up to date. It should
      // maintain its own coherencey by listening to the sub images.
      this.__atlas.renderAtlas();

      if (!gl.floatTexturesSupported || !gl.drawElementsInstanced) {
        this.__modelMatrixArray = [];
        this.__billboardDataArray = [];
        this.__tintColorArray = [];
        this.__indexArray.forEach((index) => {
          // if (index == -1) return;
          const billboardData = this.__billboards[index];
          const billboard = billboardData.billboard;
          const mat4 = billboard.getGlobalXfo().toMat4();
          const ppm = billboard.getParameter('PixelsPerMeter').getValue();
          const scale = 1 / ppm;
          let flags = 0;
          if (billboard.getParameter('AlignedToCamera').getValue()) flags |= 1 << 2;
          const alpha = billboard.getParameter('Alpha').getValue();
          const color = billboard.getParameter('Color').getValue();

          this.__modelMatrixArray[index] = mat4.asArray();
          this.__billboardDataArray[index] = [
            scale,
            flags,
            billboardData.imageIndex,
            alpha,
          ];
          this.__tintColorArray[index] = [color.r, color.g, color.b, color.a];
        });
        this.__updateRequested = false;
        return
      }

      let size = Math.round(
        Math.sqrt((this.__billboards.length - this.__freeIndices.length) * pixelsPerItem$1) + 0.5
      );
      // Note: the following few lines need a cleanup.
      // We should be using power of 2 textures. The problem is that pot texture sizes don't
      // align with the 6 pixels per draw item. So we need to upload a slightly bigger teture
      // but upload the 'usable' size.

      // Only support power 2 textures. Else we get strange corruption on some GPUs
      // in some scenes.
      // Size should be a multiple of pixelsPerItem, so each geom item is always contiguous
      // in memory. (makes updating a lot easier. See __updateItemInstanceData below)
      // size = Math.nextPow2(size);

      if (size % pixelsPerItem$1 != 0)
        size += pixelsPerItem$1 - (size % pixelsPerItem$1);

      this.__width = size;
      // if((this.__width % pixelsPerItem) != 0)
      //     this.__width -= (this.__width % pixelsPerItem);

      if (!this.__drawItemsTexture) {
        this.__drawItemsTexture = new GLTexture2D(gl, {
          format: 'RGBA',
          type: 'FLOAT',
          width: size,
          height: size,
          filter: 'NEAREST',
          wrap: 'CLAMP_TO_EDGE',
          mipMapped: false,
        });
        this.__drawItemsTexture.clear();
      } else {
        this.__drawItemsTexture.resize(size, size);
      }

      this.__indexArray.forEach(index => {
        if (index != -1) this.__updateBillboard(index);
      });

      this.__updateRequested = false;
    };

    if (this.__atlas.isLoaded()) {
      doIt();
    } else {
      this.__atlas.loaded.connect(doIt);
    }
  }

  /**
   * The __updateBillboards method.
   * @param {number} index - The index value.
   * @private
   */
  __updateBillboard(index) {
    if (this.__drawCount == 0 || !this.__drawItemsTexture) {
      return
    }

    const billboardData = this.__billboards[index];
    if (!billboardData.billboard.getVisible()) return

    const gl = this.__gl;

    const dataArray = new Float32Array(pixelsPerItem$1 * 4);
    this.__populateBillboardDataArray(billboardData, 0, dataArray);

    gl.bindTexture(gl.TEXTURE_2D, this.__drawItemsTexture.glTex);
    const xoffset = (index * pixelsPerItem$1) % this.__width;
    const yoffset = Math.floor((index * pixelsPerItem$1) / this.__width);

    const width = pixelsPerItem$1;
    const height = 1;
    // console.log("xoffset:" + xoffset + " yoffset:" + yoffset +" width:" + width + " dataArray:" + dataArray.length);
    // gl.texSubImage2D(gl.TEXTURE_2D, 0, xoffset, yoffset, width, height, gl.RGBA, gl.FLOAT, dataArray);

    const type = this.__drawItemsTexture.getType();
    const format = this.__drawItemsTexture.getFormat();

    if (type == 'FLOAT') {
      gl.texSubImage2D(
        gl.TEXTURE_2D,
        0,
        xoffset,
        yoffset,
        width,
        height,
        gl[format],
        gl[type],
        dataArray
      );
    } else {
      const unit16s = Math.convertFloat32ArrayToUInt16Array(dataArray);
      gl.texSubImage2D(
        gl.TEXTURE_2D,
        0,
        xoffset,
        yoffset,
        width,
        height,
        gl[format],
        gl[type],
        unit16s
      );
    }
  }

  /**
   * The sort method.
   * @param {any} cameraPos - The cameraPos value.
   */
  sort(cameraPos) {
    for (const billboardData of this.__billboards) {
      if (billboardData && billboardData.billboard.getVisible()) {
        billboardData.dist = billboardData.billboard
          .getGlobalXfo()
          .tr.distanceTo(cameraPos);
      }
    }
    this.__indexArray.sort((a, b) => {
      if (a == -1) return 1
      if (b == -1) return -1
      return this.__billboards[a].dist > this.__billboards[b].dist
        ? -1
        : this.__billboards[a].dist < this.__billboards[b].dist
        ? 1
        : 0
    });

    const gl = this.__gl;
    if (gl.floatTexturesSupported && this.__instanceIdsBuffer) {
      gl.bindBuffer(gl.ARRAY_BUFFER, this.__instanceIdsBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, this.__indexArray, gl.STATIC_DRAW);
    }
  }

  /**
   * The sort method.
   * @param {any} renderstate - The renderstate value.
   */
  draw(renderstate) {
    if (
      this.__drawCount == 0 ||
      !this.__atlas.isReady() ||
      this.__updateRequested
    ) {
      return
    }

    if (this.indexArrayUpdateNeeded) this.__updateIndexArray();

    const gl = this.__gl;

    gl.disable(gl.CULL_FACE);
    gl.enable(gl.BLEND);
    gl.blendEquation(gl.FUNC_ADD);
    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);

    const cameraPos = renderstate.viewXfo.tr;
    const dist = cameraPos.distanceTo(this.__prevSortCameraPos);
    // Avoid sorting if the camera did not move more than 3 meters.
    if (dist > this.__threshold) {
      this.sort(cameraPos);
      this.__prevSortCameraPos = cameraPos.clone();
      if (this.__drawCount > 1) {
        const v0 = this.__billboards[
          this.__indexArray[0]
        ].billboard.getGlobalXfo().tr;
        const v1 = this.__billboards[
          this.__indexArray[1]
        ].billboard.getGlobalXfo().tr;
        this.__threshold = v0.distanceTo(v1);
      } else {
        this.__threshold = 9999;
      }
    }

    this.__glshader.bind(renderstate);
    this.__shaderBinding.bind(renderstate);

    const unifs = renderstate.unifs;
    this.__atlas.bindToUniform(renderstate, unifs.atlasBillboards);

    if (!gl.floatTexturesSupported || !gl.drawElementsInstanced) {
      const len = this.__indexArray.length;
      for (let i = 0; i < len; i++) {
        // this.__drawItems[i].bind(renderstate);
        // this.__glgeom.draw();

        gl.uniformMatrix4fv(
          unifs.modelMatrix.location,
          false,
          this.__modelMatrixArray[i]
        );
        gl.uniform4fv(
          unifs.billboardData.location,
          this.__billboardDataArray[i]
        );
        gl.uniform4fv(unifs.tintColor.location, this.__tintColorArray[i]);
        gl.uniform4fv(
          unifs.layoutData.location,
          this.__atlas.getLayoutData(this.__billboards[i].imageIndex)
        );

        renderstate.bindViewports(unifs, () => {
          gl.drawQuad();
        });
      }
    } else {
      this.__drawItemsTexture.bindToUniform(renderstate, unifs.instancesTexture);
      gl.uniform1i(unifs.instancesTextureSize.location, this.__width);

      {
        // The instance transform ids are bound as an instanced attribute.
        const location = renderstate.attrs.instanceIds.location;
        gl.enableVertexAttribArray(location);
        gl.bindBuffer(gl.ARRAY_BUFFER, this.__instanceIdsBuffer);
        gl.vertexAttribPointer(location, 1, gl.FLOAT, false, 4, 0);
        gl.vertexAttribDivisor(location, 1); // This makes it instanced
      }

      renderstate.bindViewports(unifs, () => {
        gl.drawElementsInstanced(
          gl.TRIANGLES,
          6,
          gl.UNSIGNED_SHORT,
          0,
          this.__drawCount
        );
      });
    }

    gl.disable(gl.BLEND);
  }
}

GLRenderer.registerPass(GLBillboardsPass, PassType.TRANSPARENT);

/** Class representing a GL overlay pass.
 * @extends GLOpaqueGeomsPass
 */
class GLOverlayPass extends GLOpaqueGeomsPass {
  /**
   * Create a GL overlay pass.
   * @param {string} name - The name value.
   */
  constructor() {
    super();
  }

  /**
   * The init method.
   * @param {any} renderer - The renderer value.
   * @param {any} passIndex - The passIndex value.
   */
  init(renderer, passIndex) {
    super.init(renderer, passIndex);
  }

  // ///////////////////////////////////
  // Bind to Render Tree

  /**
   * The filterGeomItem method.
   * @param {any} geomItem - The geomItem value.
   * @return {any} - The return value.
   */
  filterGeomItem(geomItem) {
    if (geomItem.isOverlay()) return true
    const shaderClass = geomItem.getMaterial().getShaderClass();
    if (shaderClass) {
      if (shaderClass.isOverlay()) return true
    }
    return false
  }

  /**
   * The draw method.
   * @param {any} renderstate - The renderstate value.
   */
  draw(renderstate) {
    if (this.newItemsReadyForLoading()) this.finalize();

    const gl = this.__gl;

    // Clear the depth buffer so handls are always drawn over the top.
    gl.clear(gl.DEPTH_BUFFER_BIT);

    {
      gl.enable(gl.CULL_FACE);
      gl.cullFace(gl.BACK);
    }
    gl.enable(gl.BLEND);
    gl.blendEquation(gl.FUNC_ADD);

    renderstate.pass = 'ADD';
    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA); // For add

    this.__traverseTreeAndDraw(renderstate);

    gl.disable(gl.BLEND);
    // gl.enable(gl.DEPTH_TEST);
  }

  /**
   * The drawGeomData method.
   * @param {any} renderstate - The renderstate value.
   */
  drawGeomData(renderstate) {
    const gl = this.__gl;

    // Clear the depth buffer so handls are always drawn over the top.
    gl.clear(gl.DEPTH_BUFFER_BIT);

    // gl.disable(gl.DEPTH_TEST);
    gl.enable(gl.BLEND);
    gl.blendEquation(gl.FUNC_ADD);

    renderstate.pass = 'ADD';
    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA); // For add

    super.drawGeomData(renderstate);

    gl.disable(gl.BLEND);
    gl.enable(gl.DEPTH_TEST);
  }
}

GLRenderer.registerPass(GLOverlayPass, PassType.OVERLAY);

const AudioContext =
  window.AudioContext || // Default
  window.webkitAudioContext || // Safari and old versions of Chrome
  false;

let audioCtx;
if (AudioContext) {
  // Do whatever you want using the Web Audio API
  audioCtx = new AudioContext();
  // ...
} else {
  // Web Audio API is not supported
  // Alert the user
  alert(
    'Sorry, but the Web Audio API is not supported by your browser. Please, consider upgrading to the latest version or downloading Google Chrome or Mozilla Firefox'
  );
}

/** Class representing a GL audio items pass.
 * @extends GLPass
 */
class GLAudioItemsPass extends GLPass {
  /**
   * Create a GL audio items pass.
   */
  constructor() {
    super();
    this.__audioItems = [];
  }

  /**
   * The init method.
   * @param {any} renderer - The renderer value.
   * @param {any} passIndex - The passIndex value.
   */
  init(renderer, passIndex) {
    super.init(renderer, passIndex);

    if (!audioCtx) return

    this.__renderer.registerPass(
      treeItem => {
        if (treeItem instanceof AudioItem) {
          treeItem.audioSourceCreated.connect(audioSource => {
            this.addAudioSource(treeItem, audioSource, treeItem);
          });
          return true
        }
        if (treeItem instanceof GeomItem) {
          const material = treeItem.getMaterial();
          if (material) {
            const baseColorParam = material.getParameter('BaseColor');
            if (
              baseColorParam &&
              baseColorParam.getImage &&
              baseColorParam.getImage()
            ) {
              const image = baseColorParam.getImage();
              image.loaded.connect(() => {
                if (image.getAudioSource) {
                  const audioSource = image.getAudioSource();
                  if (
                    audioSource instanceof HTMLMediaElement ||
                    audioSource instanceof AudioBufferSourceNode
                  )
                    this.addAudioSource(treeItem, audioSource, image);
                }
              });
            }
          }
          // Let other passes handle this item.
          return false
        }
      },
      treeItem => {}
    );
  }

  /**
   * The addAudioSource method.
   * @param {any} treeItem - The treeItem value.
   * @param {any} audioSource - The audioSource value.
   * @param {any} parameterOwner - The parameterOwner value.
   */
  addAudioSource(treeItem, audioSource, parameterOwner) {
    if (audioSource.addedToCollector) return

    let source;
    if (audioSource instanceof HTMLMediaElement)
      source = audioCtx.createMediaElementSource(audioSource);
    else if (audioSource instanceof AudioBufferSourceNode) source = audioSource;
    else source = audioCtx.createMediaStreamSource(audioSource);

    const connectVLParamToAudioNodeParam = (vlParam, param) => {
      if (!vlParam) return
      // Note: setting the gain has no effect. Not sure what to do.
      // param.value = vlParam.getValue();
      param.setValueAtTime(vlParam.getValue(), 0);
      param.setValueAtTime(vlParam.getValue(), 5);
      vlParam.valueChanged.connect(() => {
        // param.setTargetAtTime(vlParam.getValue(), audioCtx.currentTime);
        param.value = vlParam.getValue();
      });
    };

    const gainNode = audioCtx.createGain();
    const gainParam = parameterOwner.getParameter('Gain');
    if (gainParam) {
      connectVLParamToAudioNodeParam(gainParam, gainNode.gain);
    }

    source.connect(gainNode);

    const spatializeParam = parameterOwner.getParameter('SpatializeAudio');
    if (spatializeParam && spatializeParam.getValue() == false) {
      source.connect(audioCtx.destination);
    } else {
      const panner = audioCtx.createPanner();
      panner.panningModel = 'HRTF';
      panner.distanceModel = 'inverse';
      source.connect(panner);
      panner.connect(audioCtx.destination);

      const connectVLParamToAudioNode = paramName => {
        const vlParam = parameterOwner.getParameter(paramName);
        if (!vlParam) return
        panner[paramName] = vlParam.getValue();
        vlParam.valueChanged.connect(() => {
          panner[paramName] = vlParam.getValue();
        });
      };

      // connectVLParamToAudioNode('refDistance');
      // connectVLParamToAudioNode('maxDistance');
      // connectVLParamToAudioNode('rolloffFactor');
      connectVLParamToAudioNode('coneInnerAngle');
      connectVLParamToAudioNode('coneOuterAngle');
      connectVLParamToAudioNode('coneOuterGain');

      const updatePannerNodePosition = () => {
        // Note: the new audio params are reccomended to be used, but cause audio stutter.
        // ITs as if when we set the value, it is set for only a brief moment in time, and
        // then reverts back to the previous value.
        // Note: I downloaded and messed with the 'RoomOfMetal' demo here, and found
        // that I could not move the listener using the reccommended approach (setting values on the AudioParams.)
        // https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/setPosition

        let mat4;
        if (treeItem instanceof GeomItem) mat4 = treeItem.getGeomMat4();
        else mat4 = treeItem.getGlobalXfo().toMat4();
        const tr = mat4.translation;
        // if (panner.positionX) {
        //     // panner.positionX.setTargetAtTime(xfo.tr.x, audioCtx.currentTime);
        //     // panner.positionY.setTargetAtTime(xfo.tr.y, audioCtx.currentTime);
        //     // panner.positionZ.setTargetAtTime(xfo.tr.z, audioCtx.currentTime);
        //     panner.positionX.value = xfo.tr.x;
        //     panner.positionY.value = xfo.tr.y;
        //     panner.positionZ.value = xfo.tr.z;
        // } else {
        panner.setPosition(tr.x, tr.y, tr.z);
        // }

        const dir = mat4.zAxis;
        // if (panner.orientationX) {
        //     // panner.orientationX.setTargetAtTime(dir.x, audioCtx.currentTime);
        //     // panner.orientationY.setTargetAtTime(dir.y, audioCtx.currentTime);
        //     // panner.orientationZ.setTargetAtTime(dir.z, audioCtx.currentTime);
        //     panner.orientationX.value = dir.x;
        //     panner.orientationY.value = dir.y;
        //     panner.orientationZ.value = dir.z;
        // } else {
        panner.setOrientation(dir.x, dir.y, dir.z);
        // }

        // TODO:
        // setVelocity()
      };
      updatePannerNodePosition();
      treeItem.globalXfoChanged.connect(changeType => {
        updatePannerNodePosition();
      });
    }

    audioSource.addedToCollector = true;
    this.__audioItems.push({
      treeItem,
      audioSource,
      parameterOwner,
    });

    this.updated.emit();
  }

  /**
   * The __updateListenerPosition method.
   * @param {any} viewXfo - The viewXfo value.
   * @private
   */
  __updateListenerPosition(viewXfo) {
    if (!audioCtx) return

    // Note: the new audio params are reccomended to be used, but cause audio stutter.
    // ITs as if when we set the value, it is set for only a brief moment in time, and
    // then reverts back to the previous value.
    // Note: I downloaded and messed with the 'RoomOfMetal' demo here, and found
    // that I could not move the listener using the reccommended approach (setting values on the AudioParams.)
    // https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/setPosition

    // Note: Moving the listener seems to cause problems.
    const listener = audioCtx.listener;
    // if(listener.positionX) {
    //   listener.positionX.value = viewXfo.tr.x;
    //   listener.positionY.value = viewXfo.tr.y;
    //   listener.positionZ.value = viewXfo.tr.z;
    //   // listener.positionX.setValueAtTime(viewXfo.tr.x, audioCtx.currentTime);
    //   // listener.positionY.setValueAtTime(viewXfo.tr.y, audioCtx.currentTime);
    //   // listener.positionZ.setValueAtTime(viewXfo.tr.z, audioCtx.currentTime);
    // } else {
    listener.setPosition(viewXfo.tr.x, viewXfo.tr.y, viewXfo.tr.z);
    // }
    const up = viewXfo.ori.getYaxis();
    const fw = viewXfo.ori.getZaxis().negate();
    // if(listener.upX) {
    //   // listener.upX.setValueAtTime(up.x, audioCtx.currentTime);
    //   // listener.upY.setValueAtTime(up.y, audioCtx.currentTime);
    //   // listener.upZ.setValueAtTime(up.z, audioCtx.currentTime);
    //   // listener.forwardX.setValueAtTime(fw.x, audioCtx.currentTime);
    //   // listener.forwardY.setValueAtTime(fw.y, audioCtx.currentTime);
    //   // listener.forwardZ.setValueAtTime(fw.z, audioCtx.currentTime);
    //   listener.upX.value = up.x;
    //   listener.upY.value = up.y;
    //   listener.upZ.value = up.z;
    //   listener.forwardX.value = fw.x;
    //   listener.forwardY.value = fw.y;
    //   listener.forwardZ.value = fw.z;
    // } else {
    listener.setOrientation(fw.x, fw.y, fw.z, up.x, up.y, up.z);
    // }
  }

  /**
   * The draw method.
   * @param {any} renderstate - The renderstate value.
   */
  draw(renderstate) {
    if (this.__audioItems.length == 0) return
    this.__updateListenerPosition(renderstate.viewXfo);
  }
}

GLRenderer.registerPass(GLAudioItemsPass, PassType.OVERLAY);

// Hack so Audio Item can access the context.
if (window) {
  window.ZeaAudioaudioCtx = audioCtx;
}

var Renderer = /*#__PURE__*/Object.freeze({
  __proto__: null,
  create3DContext: create3DContext,
  GLTexture2D: GLTexture2D,
  GLMesh: GLMesh,
  GLLines: GLLines,
  GLPoints: GLPoints,
  GLMaterial: GLMaterial,
  GLShader: GLShader,
  GLFbo: GLFbo,
  GLRenderTarget: GLRenderTarget,
  GLRenderer: GLRenderer,
  GLBaseViewport: GLBaseViewport,
  GLViewport: GLViewport,
  shaderLibrary: shaderLibrary,
  generateShaderGeomBinding: generateShaderGeomBinding,
  BillboardShader: BillboardShader,
  ConvolverShader: ConvolverShader,
  DepthMapShader: DepthMapShader,
  EnvMapShader: EnvMapShader,
  BackgroundImageShader: BackgroundImageShader,
  OctahedralEnvMapShader: OctahedralEnvMapShader,
  LatLongEnvMapShader: LatLongEnvMapShader,
  SterioLatLongEnvMapShader: SterioLatLongEnvMapShader,
  DualFishEyeEnvMapShader: DualFishEyeEnvMapShader,
  DualFishEyeToLatLongBackgroundShader: DualFishEyeToLatLongBackgroundShader,
  EnvProjectionShader: EnvProjectionShader,
  OctahedralEnvProjectionShader: OctahedralEnvProjectionShader,
  LatLongEnvProjectionShader: LatLongEnvProjectionShader,
  FatLinesShader: FatLinesShader,
  FlatSurfaceShader: FlatSurfaceShader,
  FlatAlphaSurfaceShader: FlatAlphaSurfaceShader,
  LayeredCarPaintShader: LayeredCarPaintShader,
  LinesShader: LinesShader,
  NormalsShader: NormalsShader,
  PointsShader: PointsShader,
  FatPointsShader: FatPointsShader,
  FatPointsGeomDataShader: FatPointsGeomDataShader,
  FatPointsSelectedShader: FatPointsSelectedShader,
  PostProcessing: PostProcessing,
  ScreenQuadShader: ScreenQuadShader,
  SimpleSurfaceShader: SimpleSurfaceShader,
  StandardSurfaceShader: StandardSurfaceShader,
  StandardSurfaceGeomDataShader: StandardSurfaceGeomDataShader,
  StandardSurfaceSelectedGeomsShader: StandardSurfaceSelectedGeomsShader,
  HandleShader: HandleShader,
  HandleGeomDataShader: HandleGeomDataShader,
  TransparentSurfaceShader: TransparentSurfaceShader,
  ScreenSpaceShader: ScreenSpaceShader,
  ToolIconShader: ToolIconShader,
  UnpackHDRShader: UnpackHDRShader,
  UnpackLDRAlphaImageShader: UnpackLDRAlphaImageShader,
  WireShader: WireShader,
  GLPass: GLPass,
  PassType: PassType,
  GLStandardGeomsPass: GLStandardGeomsPass,
  GLOpaqueGeomsPass: GLOpaqueGeomsPass,
  GLTransparentGeomsPass: GLTransparentGeomsPass,
  GLBillboardsPass: GLBillboardsPass,
  GLOverlayPass: GLOverlayPass,
  GLAudioItemsPass: GLAudioItemsPass,
  get audioCtx () { return audioCtx; },
  VRViewport: VRViewport
});

/** Class representing a state in a state machine. A model can only be
 * in one state at a time.
 * @private
 */
class State {
  /**
   * Create a state.
   * @param {string} name - The name of the state.
   */
  constructor(name) {
    this.__name = name ? name : sgFactory.getClassName(this);

    this.__stateEvents = [];
    this.__activationActions = [];
    this.__deactivationActions = [];
  }

  /**
   * Getter for the name of the state.
   * @return {string} - Returns the name.
   */
  getName() {
    return this.__name
  }

  /**
   * Setter for the name of the state.
   * @param {string} name - The name of the state.
   */
  setName(name) {
    this.__name = name;
  }

  /**
   * The setStateMachine method.
   * @param {any} stateMachine - The stateMachine value.
   */
  setStateMachine(stateMachine) {
    this.__stateMachine = stateMachine;
  }

  /**
   * The getStateMachine method.
   * @return {any} - The return value.
   */
  getStateMachine() {
    return this.__stateMachine
  }

  /**
   * Activates the state.
   */
  activate() {
    this.__stateEvents.forEach(stateEvent => {
      stateEvent.activate();
    });
    this.__activationActions.forEach(action => {
      action.activate();
    });
  }

  /**
   * Deactivates the state.
   */
  deactivate() {
    this.__stateEvents.forEach(stateEvent => {
      stateEvent.deactivate();
    });
    this.__deactivationActions.forEach(action => {
      action.activate();
    });
  }

  /**
   * Add an event to the state.
   * @param {any} stateEvent - The event to add.
   */
  addStateEvent(stateEvent) {
    stateEvent.setState(this);
    this.__stateEvents.push(stateEvent);
  }

  /**
   * Getter for the state event.
   * @param {number} index - The index value.
   * @return {any} - The return value.
   */
  getStateEvent(index) {
    return this.__stateEvents[index]
  }

  /**
   * The addActivationAction method.
   * @param {any} action - The action value.
   */
  addActivationAction(action) {
    action.setState(this);
    this.__activationActions.push(action);
  }

  /**
   * The getActivationAction method.
   * @param {number} index - The index value.
   * @return {any} - The return value.
   */
  getActivationAction(index) {
    return this.__activationActions[index]
  }

  /**
   * The getActivationAction method.
   * @param {any} action - The action value.
   */
  addDeactivationAction(action) {
    action.setState(this);
    this.__deactivationActions.push(action);
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    const j = {
      name: this.__name,
      type: sgFactory.getClassName(this),
    };

    const stateEventsJson = [];
    for (const stateEvent of this.__stateEvents) {
      stateEventsJson.push(stateEvent.toJSON(context, flags));
    }
    j.stateEvents = stateEventsJson;

    const activationActionsJson = [];
    for (const stateEvent of this.__activationActions) {
      activationActionsJson.push(stateEvent.toJSON(context, flags));
    }
    j.activationActions = activationActionsJson;

    const deactivationActionsJson = [];
    for (const stateEvent of this.__deactivationActions) {
      deactivationActionsJson.push(stateEvent.toJSON(context, flags));
    }
    j.deactivationActions = deactivationActionsJson;

    return j
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    this.__name = j.name;

    for (const stateEventJson of j.stateEvents) {
      const stateEvent = sgFactory.constructClass(stateEventJson.type);
      stateEvent.fromJSON(stateEventJson, context);
      this.addStateEvent(stateEvent);
    }
    for (const activationActionJson of j.activationActions) {
      const activationAction = sgFactory.constructClass(
        activationActionJson.type
      );
      activationAction.fromJSON(activationActionJson, context);
      this.addActivationAction(activationAction);
    }
    for (const deactivationActionJson of j.deactivationActions) {
      const deactivationAction = sgFactory.constructClass(
        deactivationActionJson.type
      );
      deactivationAction.fromJSON(deactivationActionJson, context);
      this.addDeactivationAction(deactivationAction);
    }
  }
}

sgFactory.registerClass('State', State);

/** Class representing a state action.
 * @extends ParameterOwner
 * @private
 */
class StateAction extends ParameterOwner {
  /**
   * Create a state action.
   * @param {string} name - The name of the state action.
   */
  constructor(name) {
    super();
    this.__name = name;
    this.__childActions = [];

    this.__outputs = {};
  }

  /**
   * The addOutput method.
   * @param {any} output - The output value.
   * @return {any} - The return value.
   */
  addOutput(output) {
    this.__outputs[output.getName()] = output;
    return output
  }

  /**
   * The getOutput method.
   * @param {string} name - The name value.
   * @return {any} - The return value.
   */
  getOutput(name) {
    return this.__outputs[name]
  }

  /**
   * The setState method.
   * @param {any} state - The state value.
   */
  setState(state) {
    this.__state = state;
    this.__childActions.forEach(childAction => {
      childAction.setState(state);
    });
  }

  /**
   * The addChild method.
   * @param {any} childAction - The childAction value.
   */
  addChild(childAction) {
    this.__childActions.push(childAction);
    childAction.setState(this.__state);
  }

  /**
   * The getChild method.
   * @param {annumbery} index - The index value.
   * @return {any} - The return value.
   */
  getChild(index) {
    return this.__childActions[index]
  }

  /**
   * The activate method.
   */
  activate() {
    console.warn(
      'activate must be implmented by each action. this:' +
        sgFactory.getClassName(this)
    );
  }

  /**
   * The addChild method.
   * @param {any} childAction - The childAction value.
   */
  addChild(childAction) {
    this.__childActions.push(childAction);
    childAction.setState(this.__state);
  }

  /**
   * The deactivate method.
   */
  deactivate() {}

  /**
   * The __onDone method.
   * @private
   */
  __onDone() {
    this.__childActions.forEach(action => {
      action.activate();
    });
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    let j = super.toJSON(context, flags);
    if (!j)
      // If a state action has had no defaults changed, then it may not return json.
      j = {};
    j.type = sgFactory.getClassName(this);

    const childActionsj = [];
    for (const childAction of this.__childActions) {
      childActionsj.push(childAction.toJSON(context, flags));
    }
    j.childActions = childActionsj;

    const outputsj = {};
    for (const key in this.__outputs) {
      outputsj[key] = this.__outputs[key].toJSON(context, flags);
    }
    j.outputs = outputsj;

    return j
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    super.fromJSON(j, context, flags);

    for (const childActionjson of j.childActions) {
      const childAction = sgFactory.constructClass(childActionjson.type);
      if (childAction) {
        childAction.fromJSON(childActionjson, context);
        this.addChild(childAction);
      } else {
        throw new Error('Invalid type:' + childActionjson.type)
      }
    }

    for (const key in j.outputs) {
      this.__outputs[key].fromJSON(j.outputs[key], context);
      // const outputjson = j.outputs[key];
      // const output = sgFactory.constructClass(outputjson.type);
      // if (output) {
      //     output.fromJSON(outputjson, context);
      //     this.addOutput(key, output);
      // }
      // else {
      //     throw("Invalid type:" + outputjson.type)
      // }
    }
  }

  /**
   * The destroy is called by the system to cause explicit resources cleanup.
   * Users should never need to call this method directly.
   */
  destroy() {
    super.destroy();
    this.__outputs = [];
  }
}

/** Class representing a state event. An event tiggers an action
 * that changes the state of the model.
 * @extends StateAction
 * @private
 */
class StateEvent extends StateAction {
  /**
   * Create a state event.
   * @param {string} name - The name of the event.
   */
  constructor(name) {
    super();
    this.__name = name;
    // this.__childActions = [];
    this.__onEvent = this.__onEvent.bind(this);
  }

  /**
   * The __onEvent method.
   * @private
   */
  __onEvent() {
    this.__childActions.forEach(action => {
      action.activate();
    });
  }
}

/** A state machine is a mathematical model that describes the behavior of
 * a system that can be in only one state at a time. For example, a door with
 * two states can be "open" and "closed", but it cannot be both open and closed
 * at the same time.
 * @extends BaseItem
 * @private
 */
class StateMachine extends BaseItem {
  /**
   * Create a state machine.
   * @param {string} name - The name of the state machine.
   */
  constructor(name) {
    super(name);
    this.__states = {};
    this.__currentState;
    this.__initialStateName;

    this.stateChanged = new Signal();

    // Always save state machines.
    // Then never come as part of the binary data.
    this.setFlag(ItemFlags.USER_EDITED);

    // Manually invoke the callbacks for cases where the StateMAchine
    // is not beingn constructed by the SGFactory.
    if (!sgFactory.isConstructing()) {
      sgFactory.invokeCallbacks(this);
    }
  }

  /**
   * The addState method.
   * @param {any} state - The state value.
   */
  addState(state) {
    state.setStateMachine(this);
    this.__states[state.getName()] = state;

    if (
      Object.keys(this.__states).length == 1 &&
      this.__initialStateName == undefined
    ) {
      this.__initialStateName = state.getName();
    }
  }

  /**
   * The getState method.
   * @param {string} name - The name value.
   * @return {any} - The return value.
   */
  getState(name) {
    return this.__states[name]
  }

  /**
   * The activateState method.
   * @param {string} name - The name value.
   */
  activateState(name) {
    // console.log("StateMachine.activateState:" + name)
    if (!this.__states[name]) throw new Error('Invalid state transtion:' + name)
    if (this.__currentState == this.__states[name]) return
    if (this.__currentState) this.__currentState.deactivate();
    this.__currentState = this.__states[name];
    this.__currentState.activate();

    this.stateChanged.emit(name);
  }

  /**
   * The getActiveState method.
   * @return {any} - The return value.
   */
  getActiveState() {
    return this.__currentState
  }

  /**
   * Getter for the currently active state's name.
   * @return {any} - The return value.
   */
  getActiveStateName() {
    return sgFactory.getClassName(this.__currentState)
  }

  /**
   * Getter for the initial state of the state machine.
   * @return {any} - The return value.
   */
  getInitialState() {
    return this.__initialStateName
  }

  /**
   * Setter for the initial state of the state machine.
   * @param {string} name - The name value.
   */
  setInitialState(name) {
    this.__initialStateName = name;
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    const j = super.toJSON(context, flags);
    j.initialStateName = this.__initialStateName;

    const statesj = {};
    for (const key in this.__states) {
      statesj[key] = this.__states[key].toJSON(context, flags);
    }
    j.states = statesj;
    return j
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    super.fromJSON(j, context, flags);
    this.__initialStateName = j.initialStateName;

    context.stateMachine = this;

    for (const key in j.states) {
      const statejson = j.states[key];
      const state = sgFactory.constructClass(statejson.type);
      if (state) {
        state.fromJSON(statejson, context);
        this.addState(state);
      } else {
        throw new Error('Invalid type:' + statejson.type)
      }
    }
    context.addPLCB(() => {
      // Disabling for now.
      // We can have state machines that are not active at all.
      // E.g. in the 850 E-Tec project.
      // this.activateState(this.__initialStateName);
    });
  }
}

sgFactory.registerClass('StateMachine', StateMachine);

/** A state machine action that switches between states.
 * @extends StateAction
 * @private
 */
class SwitchState extends StateAction {
  /**
   * Create a switch state.
   */
  constructor() {
    super();
    this.__targetStateParam = this.addParameter(
      new StringParameter('TargetState', '')
    );
  }

  /**
   * Activate the action.
   */
  activate() {
    this.__state
      .getStateMachine()
      .activateState(this.__targetStateParam.getValue());
  }
}

sgFactory.registerClass('SwitchState', SwitchState);

/** A state machine action that sets the camera position and target.
 * @extends StateAction
 * @private
 */
class SetCameraPositionAndTarget extends StateAction {
  /**
   * Create a set camera position and target.
   */
  constructor() {
    super();

    this.addParameter(
      new TreeItemParameter('Camera', treeItem => treeItem instanceof Camera)
    );
    this.addParameter(new Vec3Parameter('cameraPos'));
    this.addParameter(new Vec3Parameter('cameraTarget'));
    this.addParameter(new NumberParameter('interpTime', 1.0));
    this.addParameter(new NumberParameter('updateFrequency', 30));
  }

  /**
   * Sets the camera's position and target.
   * @param {any} pos - The position of the camera.
   * @param {any} target - The target of the camera.
   */
  SetCameraPositionAndTarget(pos, target) {
    this.getParameter('cameraPos').setValue(pos);
    this.getParameter('cameraTarget').setValue(target);
  }

  /**
   * Activates the action.
   */
  activate() {
    const camera = this.getParameter('Camera').getValue();
    if (!camera) {
      console.warn(
        'Camera not assigned to SetCameraPositionAndTarget state action'
      );
      return
    }
    const posEnd = this.getParameter('cameraPos').getValue();
    const targetEnd = this.getParameter('cameraTarget').getValue();
    const interpTime = this.getParameter('interpTime').getValue();
    if (interpTime > 0.0) {
      const posStart = camera.getGlobalXfo().tr;
      const targetStart = camera.getTargetPostion();
      const distStart = posStart.subtract(targetStart).length();

      const updateFrequency = this.getParameter('updateFrequency').getValue();

      const distEnd = posEnd.subtract(targetEnd).length();
      let settingCameraDirection = true;
      let smooth_t_prev = 0;
      let step = 0;
      const steps = Math.round(interpTime * updateFrequency);
      let modifyingCameraXfo = false;
      const onCameraChanged = () => {
        if (!modifyingCameraXfo) {
          settingCameraDirection = false;
        }
      };
      camera.globalXfoChanged.connect(onCameraChanged);
      const timerCallback = () => {
        step++;
        if (step < steps) {
          const t = step / steps;
          const smooth_t = Math.smoothStep(0.0, 1.0, t);
          const delta = (smooth_t - smooth_t_prev) / (1.0 - t);
          smooth_t_prev = smooth_t;

          const posNow = camera.getGlobalXfo().tr;
          const targetNow = camera.getTargetPostion();
          const distNow = posNow.subtract(targetNow).length();
          let newPos = posNow;
          const newTarget = targetNow.lerp(targetEnd, delta);
          if (settingCameraDirection) {
            newPos = posNow.lerp(posEnd, delta);
          }

          const newVec = newPos.subtract(newTarget);
          const newDist = newVec.length();
          const idealDist = Math.lerp(distNow, distEnd, delta);
          // console.log("t:" + t + " delta: " + delta + " distNow:" + distNow + " idealDist:" + idealDist);
          newVec.scaleInPlace(idealDist / newVec.length());

          modifyingCameraXfo = true;
          camera.setPositionAndTarget(newTarget.add(newVec), newTarget);
          modifyingCameraXfo = false;

          this.__timeoutId = window.setTimeout(
            timerCallback,
            1000 / updateFrequency
          );
        } else {
          // camera.setPositionAndTarget(posEnd, targetEnd);
          camera.globalXfoChanged.disconnect(onCameraChanged);
          camera.movementFinished.emit();
          this.__timeoutId = undefined;
          this.__onDone();
        }
      };
      timerCallback();
    } else {
      camera.setPositionAndTarget(posEnd, targetEnd);
    }
  }

  /**
   * Cancels the action.
   */
  cancel() {
    if (this.__timeoutId) {
      clearTimeout(this.__timeoutId);
      this.__timeoutId = undefined;
    }
  }
}

sgFactory.registerClass(
  'SetCameraPositionAndTarget',
  SetCameraPositionAndTarget
);

/** A state machine action that sets parameter values.
 * @extends StateAction
 * @private
 */
class SetParameterValue extends StateAction {
  /**
   * Create a set parameter value.
   */
  constructor() {
    super();

    this.__interpTimeParam = this.addParameter(
      new NumberParameter('InterpTime', 1.0)
    );
    this.__updateFrequencyParam = this.addParameter(
      new NumberParameter('UpdateFrequency', 30)
    );

    this.__outParam = this.addOutput(new OperatorOutput('Param'));
    this.__outParam.paramSet.connect(() => {
      if (
        !this.__valueParam ||
        this.__outParam.getParam().getDataType() !=
          this.__valueParam.getDataType()
      ) {
        const param = this.__outParam.getParam().clone();
        param.setName('Value');
        if (this.__outParam.getInitialValue)
          param.setValue(this.__outParam.getInitialValue());
        else param.setValue(this.__outParam.getParam().getValue());
        this.__valueParam = this.addParameter(param);
      }
    });
  }

  /**
   * Activate the action.
   */
  activate() {
    if (this.__outParam.isConnected()) {
      const interpTime = this.__interpTimeParam.getValue();
      if (interpTime > 0.0) {
        const updateFrequency = this.__updateFrequencyParam.getValue();
        const paramValueStart = this.__outParam.getValue();
        const paramValueEnd = this.__valueParam.getValue();
        let step = 0;
        const steps = Math.round(interpTime / (1.0 / updateFrequency));
        const timerCallback = () => {
          step++;
          if (step < steps) {
            const t = step / steps;
            const smooth_t = Math.smoothStep(0.0, 1.0, t);
            const newVal = Math.lerp(paramValueStart, paramValueEnd, smooth_t);
            // Note: In this case, we want the parameter to emit a notification
            // and cause the update of the scene. But we also don't want the parameter value to then
            // be considered modified so it is saved to the JSON file. I'm not sure how to address this.
            // We need to check what happens if a parameter emits a 'valueChanged' during cleaning. (maybe it gets ignored)
            this.__outParam.setValue(newVal, ValueSetMode.GENERATED_VALUE);
            this.__timeoutId = window.setTimeout(
              timerCallback,
              1000 / updateFrequency
            );
          } else {
            this.__outParam.setValue(
              this.__valueParam.getValue(),
              ValueSetMode.GENERATED_VALUE
            );
            this.__timeoutId = undefined;
            this.__onDone();
          }
        };
        timerCallback();
      } else {
        this.__outParam.setValue(
          this.__valueParam.getValue(),
          ValueSetMode.GENERATED_VALUE
        );
        this.__onDone();
      }
    }
  }

  /**
   * The cancel the action.
   */
  cancel() {
    if (this.__timeoutId) {
      clearTimeout(this.__timeoutId);
      this.__timeoutId = undefined;
    }
  }

  // ////////////////////////////////////////
  // Persistence

  /**
   * The toJSON method encodes this type as a json object for persistences.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   * @return {object} - Returns the json object.
   */
  toJSON(context, flags) {
    const j = super.toJSON(context, flags);
    if (this.__valueParam) {
      j.valueParamType = sgFactory.getClassName(this.__valueParam);
    }
    return j
  }

  /**
   * The fromJSON method decodes a json object for this type.
   * @param {object} j - The json object this item must decode.
   * @param {object} context - The context value.
   * @param {number} flags - The flags value.
   */
  fromJSON(j, context, flags) {
    if (j.valueParamType) {
      const param = sgFactory.constructClass(j.valueParamType, 'Value');
      if (param) this.__valueParam = this.addParameter(param);
    }
    super.fromJSON(j, context, flags);
  }
}

sgFactory.registerClass('SetParameterValue', SetParameterValue);

/** Triggers an state machine event to occur when geometry is clicked.
 * @extends StateEvent
 * @private
 */
class GeomClicked extends StateEvent {
  /**
   * Create a geom clicked.
   * @param {string} name - The name value.
   */
  constructor(name) {
    super(name);
    this.__geomParam = this.addParameter(new TreeItemParameter('TreeItem'));
    this.__geomParam.valueChanged.connect(() => {
      this.__geom = this.__geomParam.getValue();
    });
  }

  /**
   * The __geomClicked method.
   * @param {any} event - The event that occurs.
   * @private
   */
  __geomClicked(event) {
    event.stopPropagation();
    this.__onEvent();
  }

  /**
   * The activate method.
   */
  activate() {
    if (this.__geom) {
      this.__geom.mouseDown.connect(this.__geomClicked.bind(this));
    }
  }

  /**
   * The deactivate method.
   */
  deactivate() {
    if (this.__geom) {
      this.__geom.mouseDown.disconnect(this.__geomClicked.bind(this));
    }
  }
}

sgFactory.registerClass('GeomClicked', GeomClicked);

/** Triggers an state machine event to occur when a key is pressed.
 * @extends StateEvent
 * @private
 */
class KeyPressedEvent extends StateEvent {
  /**
   * Create a key pressed event.
   * @param {string} name - The name value.
   */
  constructor(name) {
    super(name);
    this.onKeyPressed = this.onKeyPressed.bind(this);
    this.__keyParam = this.addParameter(new StringParameter('Key', ''));
  }

  /**
   * Causes an event to occur when a key is pressed.
   * @param {any} event - The event that occurs.
   */
  onKeyPressed(event) {
    console.log(event.key);
    if (event.key == this.__keyParam.getValue()) {
      this.__onEvent();
    }
  }

  /**
   * The activate method.
   */
  activate() {
    document.addEventListener('keydown', this.onKeyPressed);
  }

  /**
   * The deactivate method.
   */
  deactivate() {
    document.removeEventListener('keydown', this.onKeyPressed);
  }
}

sgFactory.registerClass('KeyPressedEvent', KeyPressedEvent);

/** Triggers an state machine event to occur after a certain time has passed.
 * @extends StateEvent
 * @private
 */
class TimedWait extends StateEvent {
  /**
   * Create a timed wait.
   * @param {string} name - The name value.
   */
  constructor(name) {
    super(name);
    this.__waitTimeParam = this.addParameter(new NumberParameter('WaitTime', 1));
  }

  /**
   * The activate method.
   */
  activate() {
    const timerCallback = () => {
      delete this.__timeoutId;
      this.__onEvent();
    };
    this.__timeoutId = window.setTimeout(
      timerCallback,
      this.__waitTimeParam.getValue() * 1000
    ); // Sample at 50fps.
  }

  /**
   * The deactivate method.
   */
  deactivate() {
    if (this.__timeoutId) {
      window.clearTimeout(this.__timeoutId);
    }
  }
}

sgFactory.registerClass('TimedWait', TimedWait);

var StateMachine$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  State: State,
  StateAction: StateAction,
  StateEvent: StateEvent,
  StateMachine: StateMachine,
  SwitchState: SwitchState,
  SetCameraPositionAndTarget: SetCameraPositionAndTarget,
  SetParameterValue: SetParameterValue,
  GeomClicked: GeomClicked,
  KeyPressedEvent: KeyPressedEvent,
  TimedWait: TimedWait
});

const ZeaEngine = {
  onResize,
  ...BrowserDetection,
  ...Math$1,
  ...Utilities,
  ...SceneTree,
  ...Renderer,
  ...StateMachine$1,
};

export default ZeaEngine;
export { AimOperator, AssetItem, Async, AttrValue, Attribute$1 as Attribute, AudioItem, BackgroundImageShader, BaseGeom, BaseGeomItem, BaseImage, BaseItem, BaseParameter, BillboardItem, BillboardShader, BinReader, BinWriter, BooleanParameter, Box2, Box3$1 as Box3, Camera, CameraMouseAndKeyboard, Circle, CloneFlags, CodeParameter, Color, ColorParameter, Cone, ConvolverShader, Cross, Cuboid, Cylinder, DataImage, DepthMapShader, Disc, DualFishEyeEnvMapShader, DualFishEyeToLatLongBackgroundShader, EnvMap, EnvMapShader, EnvProjectionShader, EulerAngles, ExplodePartsOperator, FatLinesShader, FatPointsGeomDataShader, FatPointsSelectedShader, FatPointsShader, FileAudioItem, FileImage$1 as FileImage, FileImage2D, FilePathParameter, FlatAlphaSurfaceShader, FlatSurfaceShader, Float32, Frustum, GIFImage, GLAudioItemsPass, GLBaseViewport, GLBillboardsPass, GLFbo, GLLines, GLMaterial, GLMesh, GLOpaqueGeomsPass, GLOverlayPass, GLPass, GLPoints, GLRenderTarget, GLRenderer, GLShader, GLStandardGeomsPass, GLTexture2D, GLTransparentGeomsPass, GLViewport, GearsOperator, GeomClicked, GeomItem, GeomLibrary, GeometryParameter, Grid, Group, GrowingPacker, HandleGeomDataShader, HandleShader, ImageParameter, InstanceItem, ItemFlags, ItemSetParameter, JSON_stringify_fixedPrecision, KeyPressedEvent, LDRImage, LDRVideo, Label, LatLongEnvMapShader, LatLongEnvProjectionShader, LayeredCarPaintShader, Lines, LinesCuboid, LinesProxy, LinesShader, ListParameter, LoadFlags, Mat3$1 as Mat3, Mat3Parameter, Mat4, Mat4Parameter, Material, MaterialColorParam, MaterialFloatParam, MaterialLibrary, MaterialParameter, Mesh, MeshProxy, MultiChoiceParameter, NormalsShader, NumberParameter, ObjAsset, OctahedralEnvMapShader, OctahedralEnvProjectionShader, Operator, OperatorOutput, ParamFlags, Parameter, ParameterOwner, PassType, PistonOperator, Plane$1 as Plane, PlaneType, PointGrid, Points, PointsProxy, PointsShader, PostProcessing, ProxyParameter, Quat, RGBA, Ray, Rect, RefCounted, RouterOperator, SAVE_FLAG_SKIP_GEOMDATA, SInt16, SInt32, SInt8, SaveFlags, Scene, ScreenQuadShader, ScreenSpaceShader, SetCameraPositionAndTarget, SetParameterValue, Signal, SimpleSurfaceShader, Sphere$1 as Sphere, SphereType, StandardSurfaceGeomDataShader, StandardSurfaceSelectedGeomsShader, StandardSurfaceShader, State, StateAction, StateEvent, StateMachine, SterioLatLongEnvMapShader, StringParameter, StructParameter, SwitchState, SystemDesc, TimedWait, ToolIconShader, Torus, TransparentSurfaceShader, TreeItem, TreeItemParameter, UInt16, UInt32, UInt8, UnpackHDRShader, UnpackLDRAlphaImageShader, VLAAsset, VRViewport, ValueGetMode, ValueSetMode, Vec2, Vec2Parameter, Vec3$1 as Vec3, Vec3Parameter, Vec4$1 as Vec4, Vec4Parameter, Version, VertexAttribute$1 as VertexAttribute, VideoStreamImage2D, WireShader, Xfo, XfoOperatorOutput, XfoParameter, audioCtx, create3DContext, decodeText, generateShaderGeomBinding, getFileFolder, hashStr, isObject, labelManager, loadBinfile, loadJSONfile, loadTextfile, loadXMLfile, mergeDeep, onResize, resourceLoader, sgFactory, shaderLibrary, typeRegistry };
