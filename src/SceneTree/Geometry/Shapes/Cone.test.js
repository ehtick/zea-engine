import { Cone } from './Cone'

describe('Cone', () => {
  it('tests default parameters', () => {
    const cone = new Cone()

    expect(cone.getParameter('Radius').getValue()).toBe(0.5)
    expect(cone.getParameter('Height').getValue()).toBe(1)
    expect(cone.getParameter('Detail').getValue()).toBe(32)
    expect(cone.getParameter('Cap').getValue()).toBe(true)
  })

  it('updates parameters', () => {
    const cone = new Cone()
    cone.getParameter('Radius').setValue(1)
    cone.getParameter('Height').setValue(2)
    cone.getParameter('Detail').setValue(16)
    cone.getParameter('Cap').setValue(false)

    expect(cone.getParameter('Radius').getValue()).toBe(1)
    expect(cone.getParameter('Height').getValue()).toBe(2)
    expect(cone.getParameter('Detail').getValue()).toBe(16)
    expect(cone.getParameter('Cap').getValue()).toBe(false)
  })

  it('saves to JSON (serialization).', () => {
    const cone = new Cone(2, 5, 8, true)
    const outputJSON = cone.toJSON()

    expect(outputJSON).toMatchSnapshot()
  })

  it('restores from JSON (serialization).', () => {
    const cone = new Cone()
    const expectedOutput =
      '{"params":{"Radius":{"value":2},"Height":{"value":5},"Detail":{"value":8,"range":[3,200],"step":1},"Cap":{"value":true}},"type":"Cone","numVertices":10,"vertexAttributes":{"positions":{"data":[2,0,0,1.4142135381698608,1.4142135381698608,0,1.2246468525851679e-16,2,0,-1.4142135381698608,1.4142135381698608,0,-2,2.4492937051703357e-16,0,-1.4142135381698608,-1.4142135381698608,0,-3.6739402930577075e-16,-2,0,1.4142135381698608,-1.4142135381698608,0,0,0,5,0,0,0],"dataType":"Vec3","defaultValue":0,"length":10,"splits":{},"splitValues":[]},"texCoords":{"data":[0,0,0.125,0,0.125,0,0.25,0,0.375,0,0.5,0,0.625,0,0.75,0,0.0625,1,null,null],"dataType":"Vec2","defaultValue":1.7976931348623157e+308,"length":10,"splits":{"0":{"0":1,"7":15},"1":{"0":0,"1":3},"2":{"2":5},"3":{"3":7},"4":{"4":9},"5":{"5":11},"6":{"6":13},"7":{"7":16},"8":{"0":2,"1":4,"2":6,"3":8,"4":10,"5":12,"6":14,"7":2}},"splitValues":[{"x":0,"y":0},{"x":0.125,"y":0},{"x":0.9375,"y":1},{"x":0.25,"y":0},{"x":0.1875,"y":1},{"x":0.375,"y":0},{"x":0.3125,"y":1},{"x":0.5,"y":0},{"x":0.4375,"y":1},{"x":0.625,"y":0},{"x":0.5625,"y":1},{"x":0.75,"y":0},{"x":0.6875,"y":1},{"x":0.875,"y":0},{"x":0.8125,"y":1},{"x":0.875,"y":0},{"x":1,"y":0}]},"normals":{"data":[0.9284766912460327,0.3713906705379486,0,0.6565321683883667,0.371390700340271,0.6565321683883667,5.685280509759434e-17,0.3713906705379486,0.9284766912460327,-0.6565321683883667,0.371390700340271,0.6565321683883667,-0.9284766912460327,0.3713906705379486,1.1370561019518867e-16,-0.6565321683883667,0.371390700340271,-0.6565321683883667,-1.705583954404483e-16,0.3713906705379486,-0.9284766912460327,0.6565321683883667,0.371390700340271,-0.6565321683883667,0.8578006029129028,0.371390700340271,0.35531264543533325,0,-1,0],"dataType":"Vec3","defaultValue":1.7976931348623157e+308,"length":10,"splits":{"0":{"7":6,"8":8,"15":8},"1":{"8":9,"9":9},"2":{"9":10,"10":10},"3":{"10":11,"11":11},"4":{"11":12,"12":12},"5":{"12":13,"13":13},"6":{"13":14,"14":14},"7":{"14":15,"15":15},"8":{"1":0,"2":1,"3":2,"4":3,"5":4,"6":5,"7":7}},"splitValues":[{"x":0.35531264543533325,"y":0.371390700340271,"z":0.8578006029129028},{"x":-0.35531264543533325,"y":0.371390700340271,"z":0.8578006029129028},{"x":-0.8578006029129028,"y":0.371390700340271,"z":0.35531264543533325},{"x":-0.8578006029129028,"y":0.371390700340271,"z":-0.35531264543533325},{"x":-0.35531264543533325,"y":0.371390700340271,"z":-0.8578006029129028},{"x":0.35531264543533325,"y":0.371390700340271,"z":-0.8578006029129028},{"x":0.9284766912460327,"y":0.3713906705379486,"z":-2.2741122039037734e-16},{"x":0.8578006029129028,"y":0.371390700340271,"z":-0.35531264543533325},{"x":0,"y":-1,"z":0},{"x":0,"y":-1,"z":0},{"x":0,"y":-1,"z":0},{"x":0,"y":-1,"z":0},{"x":0,"y":-1,"z":0},{"x":0,"y":-1,"z":0},{"x":0,"y":-1,"z":0},{"x":0,"y":-1,"z":0}]}},"faceCounts":[16],"faceVertexIndices":[1,0,8,2,1,8,3,2,8,4,3,8,5,4,8,6,5,8,7,6,8,0,7,8,0,1,9,1,2,9,2,3,9,3,4,9,4,5,9,5,6,9,6,7,9,7,0,9]}'
    cone.fromJSON(JSON.parse(expectedOutput))

    const newCone = new Cone(2, 5, 8, true)
    expect(cone.toJSON()).toEqual(newCone.toJSON())
  })
})
